File: java/src/org/openqa/selenium/chrome/ChromeDriverService.java
Patch:
@@ -284,7 +284,7 @@ protected void loadSystemProperties() {
     @Override
     protected List<String> createArgs() {
       List<String> args = new ArrayList<>();
-      args.add(String.format("--port=%d", getPort()));
+      args.add(String.format(Locale.ROOT, "--port=%d", getPort()));
 
       // Readable timestamp and append logs only work if log path is specified in args
       // Cannot use logOutput because goog:loggingPrefs requires --log-path get sent

File: java/src/org/openqa/selenium/edge/EdgeDriverService.java
Patch:
@@ -278,7 +278,7 @@ protected void loadSystemProperties() {
     @Override
     protected List<String> createArgs() {
       List<String> args = new ArrayList<>();
-      args.add(String.format("--port=%d", getPort()));
+      args.add(String.format(Locale.ROOT, "--port=%d", getPort()));
 
       // Readable timestamp and append logs only work if log path is specified in args
       // Cannot use logOutput because goog:loggingPrefs requires --log-path get sent

File: java/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriverException;
@@ -219,7 +220,7 @@ protected void loadSystemProperties() {
     @Override
     protected List<String> createArgs() {
       List<String> args = new ArrayList<>();
-      args.add(String.format("--port=%d", getPort()));
+      args.add(String.format(Locale.ROOT, "--port=%d", getPort()));
 
       int wsPort = PortProber.findFreePort();
       args.add(String.format("--websocket-port=%d", wsPort));

File: java/src/org/openqa/selenium/ie/InternetExplorerDriverService.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriverException;
@@ -217,7 +218,7 @@ protected void loadSystemProperties() {
     @Override
     protected List<String> createArgs() {
       List<String> args = new ArrayList<>();
-      args.add(String.format("--port=%d", getPort()));
+      args.add(String.format(Locale.ROOT, "--port=%d", getPort()));
 
       if (logLevel != null) {
         args.add(String.format("--log-level=%s", logLevel));

File: java/test/org/openqa/selenium/bidi/input/CombinedInputActionsTest.java
Patch:
@@ -235,8 +235,6 @@ private void navigateToClicksPageAndClickLink() {
 
   @SwitchToTopAfterTest
   @Test
-  @NotYetImplemented(EDGE)
-  @NotYetImplemented(CHROME)
   void canMoveMouseToAnElementInAnIframeAndClick() {
     driver.get(appServer.whereIs("click_tests/click_in_iframe.html"));
 

File: java/test/org/openqa/selenium/bidi/input/DefaultMouseTest.java
Patch:
@@ -57,7 +57,6 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NeedsFreshDriver;
-import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.SwitchToTopAfterTest;
 
 /** Tests operations that involve mouse and keyboard. */
@@ -237,8 +236,6 @@ void testMoveAndClick() {
 
   @SwitchToTopAfterTest
   @Test
-  @NotYetImplemented(CHROME)
-  @NotYetImplemented(EDGE)
   void testShouldClickElementInIFrame() {
     driver.get(pages.clicksPage);
     driver.switchTo().frame("source");

File: java/src/org/openqa/selenium/remote/AbstractDriverOptions.java
Patch:
@@ -40,7 +40,7 @@
 import org.openqa.selenium.UnexpectedAlertBehaviour;
 import org.openqa.selenium.internal.Require;
 
-public abstract class AbstractDriverOptions<DO extends AbstractDriverOptions>
+public abstract class AbstractDriverOptions<DO extends AbstractDriverOptions<DO>>
     extends MutableCapabilities {
   public DO setBrowserVersion(String browserVersion) {
     setCapability(BROWSER_VERSION, Require.nonNull("Browser version", browserVersion));

File: java/src/org/openqa/selenium/grid/log/LoggingOptions.java
Patch:
@@ -98,6 +98,9 @@ public void configureLogging() {
       return;
     }
 
+    // Keep current loggers if they are being manually set
+    if (LogManager.getLogManager().getProperty("handlers") != null) return;
+
     // Remove all handlers from existing loggers
     LogManager logManager = LogManager.getLogManager();
     Enumeration<String> names = logManager.getLoggerNames();

File: java/src/org/openqa/selenium/federatedcredentialmanagement/FederatedCredentialManagementDialog.java
Patch:
@@ -52,6 +52,8 @@ public interface FederatedCredentialManagementDialog {
   /** Returns the subtitle of the dialog or null if none. */
   String getSubtitle();
 
+  void clickDialog();
+
   /**
    * Returns the accounts shown in the account chooser.
    *

File: java/test/org/openqa/selenium/environment/webserver/HandlersForTests.java
Patch:
@@ -56,9 +56,10 @@ public HandlersForTests(String hostname, int port, Path tempPageDir) {
                                 .setContent(Contents.string("<h1>authorized</h1>", UTF_8)))
                 .with(new BasicAuthenticationFilter("test", "test")),
             Route.get("/.well-known/web-identity").to(WellKnownWebIdentityHandler::new),
+            Route.get("/fedcm/config.json").to(FedCmConfigHandler::new),
             Route.get("/echo").to(EchoHandler::new),
             Route.get("/cookie").to(CookieHandler::new),
-            Route.post("/fedcm/id_assertion").to(FedCmIdAssertion::new),
+            Route.post("/fedcm/id_assertion.json").to(FedCmIdAssertion::new),
             Route.get("/encoding").to(EncodingHandler::new),
             Route.matching(req -> req.getUri().startsWith("/generated/"))
                 .to(() -> new GeneratedJsTestHandler("/generated")),

File: java/test/org/openqa/selenium/environment/webserver/WellKnownWebIdentityHandler.java
Patch:
@@ -35,7 +35,7 @@ public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
     HttpResponse response = new HttpResponse();
     response.setHeader("Content-Type", "application/json");
     response.setHeader("Cache-Control", "no-store");
-    String targetLocation = UrlPath.relativeToContext(req, "/fedcm/fedcm.json");
+    String targetLocation = UrlPath.relativeToContext(req, "https://idp.com");
 
     response.setContent(Contents.string(String.format(RESPONSE_STRING, targetLocation), UTF_8));
 

File: java/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -144,6 +144,7 @@ protected Handlers createHandlers(Config config) {
             distributorOptions.getSlotMatcher(),
             newSessionRequestOptions.getSessionRequestTimeoutPeriod(),
             newSessionRequestOptions.getSessionRequestTimeout(),
+            newSessionRequestOptions.getMaximumResponseDelay(),
             secret,
             newSessionRequestOptions.getBatchSize());
     handler.addHandler(queue);

File: java/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -150,6 +150,7 @@ protected Handlers createHandlers(Config config) {
             distributorOptions.getSlotMatcher(),
             newSessionRequestOptions.getSessionRequestTimeoutPeriod(),
             newSessionRequestOptions.getSessionRequestTimeout(),
+            newSessionRequestOptions.getMaximumResponseDelay(),
             registrationSecret,
             newSessionRequestOptions.getBatchSize());
     combinedHandler.addHandler(queue);

File: java/test/org/openqa/selenium/grid/distributor/AddingNodesTest.java
Patch:
@@ -109,6 +109,7 @@ public void setUpDistributor() throws MalformedURLException {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(2),
             Duration.ofSeconds(2),
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
 

File: java/test/org/openqa/selenium/grid/distributor/DistributorTestBase.java
Patch:
@@ -106,6 +106,7 @@ public void setUp() throws URISyntaxException {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(2),
             Duration.ofSeconds(2),
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
 

File: java/test/org/openqa/selenium/grid/graphql/GraphqlHandlerTest.java
Patch:
@@ -121,6 +121,7 @@ public void setupGrid() {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(2),
             Duration.ofSeconds(2),
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
 

File: java/test/org/openqa/selenium/grid/router/JmxTest.java
Patch:
@@ -225,6 +225,7 @@ void shouldBeAbleToRegisterSessionQueue() {
               new DefaultSlotMatcher(),
               Duration.ofSeconds(2),
               Duration.ofSeconds(2),
+              Duration.ofSeconds(1),
               new Secret(""),
               5);
 
@@ -278,6 +279,7 @@ void shouldBeAbleToMonitorHub() throws Exception {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(2),
             Duration.ofSeconds(2),
+            Duration.ofSeconds(1),
             secret,
             5);
 

File: java/test/org/openqa/selenium/grid/router/NewSessionCreationTest.java
Patch:
@@ -101,6 +101,7 @@ void ensureJsCannotCreateANewSession() throws URISyntaxException {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(2),
             Duration.ofSeconds(60),
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
 
@@ -189,6 +190,7 @@ void shouldNotRetryNewSessionRequestOnUnexpectedError() throws URISyntaxExceptio
             new DefaultSlotMatcher(),
             Duration.ofSeconds(2),
             Duration.ofSeconds(10),
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
     handler.addHandler(queue);
@@ -264,6 +266,7 @@ void shouldRejectRequestForUnsupportedCaps() throws URISyntaxException {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(5),
             Duration.ofSeconds(60),
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
     handler.addHandler(queue);

File: java/test/org/openqa/selenium/grid/router/RouterTest.java
Patch:
@@ -128,6 +128,7 @@ public void setUp() {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(2),
             Duration.ofSeconds(2),
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
     handler.addHandler(queue);

File: java/test/org/openqa/selenium/grid/router/SessionCleanUpTest.java
Patch:
@@ -145,6 +145,7 @@ void shouldRemoveSessionAfterNodeIsShutDownGracefully() {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(2),
             Duration.ofSeconds(10),
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
     handler.addHandler(queue);
@@ -261,6 +262,7 @@ void shouldRemoveSessionAfterNodeIsDown() throws URISyntaxException {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(2),
             Duration.ofSeconds(2),
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
 

File: java/test/org/openqa/selenium/grid/router/SessionQueueGridTest.java
Patch:
@@ -110,6 +110,7 @@ public void setup() throws URISyntaxException, MalformedURLException {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(5),
             Duration.ofSeconds(60),
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
     handler.addHandler(queue);

File: java/test/org/openqa/selenium/grid/router/SessionQueueGridWithTimeoutTest.java
Patch:
@@ -108,6 +108,7 @@ public void setup() throws URISyntaxException, MalformedURLException {
             new DefaultSlotMatcher(),
             Duration.ofSeconds(1),
             Duration.ofSeconds(5), // low timeout to allow simulating it
+            Duration.ofSeconds(1),
             registrationSecret,
             5);
     handler.addHandler(queue);

File: java/test/org/openqa/selenium/grid/sessionqueue/local/LocalNewSessionQueueTest.java
Patch:
@@ -129,6 +129,7 @@ public static Stream<Arguments> data() {
                   new DefaultSlotMatcher(),
                   Duration.ofSeconds(1),
                   Duration.ofSeconds(Debug.isDebugging() ? 9999 : 5),
+                  Duration.ofSeconds(1),
                   REGISTRATION_SECRET,
                   5);
           return new TestData(local, local);
@@ -142,6 +143,7 @@ public static Stream<Arguments> data() {
                   new DefaultSlotMatcher(),
                   Duration.ofSeconds(1),
                   Duration.ofSeconds(Debug.isDebugging() ? 9999 : 5),
+                  Duration.ofSeconds(1),
                   REGISTRATION_SECRET,
                   5);
 

File: java/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -242,8 +242,10 @@ public void start() throws IOException {
             processFinished.cancel(true);
             break;
           case PROCESS_DIED:
+            int exitValue = process.exitValue();
             process = null;
-            throw new WebDriverException("Driver server process died prematurely.");
+            throw new WebDriverException(
+                "Driver server process died prematurely, exit value: " + exitValue);
           case PROCESS_IS_ACTIVE:
             process.shutdown();
             throw new WebDriverException("Timed out waiting for driver server to bind the port.");

File: java/src/org/openqa/selenium/manager/SeleniumManager.java
Patch:
@@ -213,7 +213,7 @@ private synchronized Path getBinary() {
         if (!binary.toFile().exists()) {
           String binaryPathInJar = String.format("%s/%s%s", folder, SELENIUM_MANAGER, extension);
           try (InputStream inputStream = this.getClass().getResourceAsStream(binaryPathInJar)) {
-            binary.getParent().toFile().mkdirs();
+            Files.createDirectories(binary.getParent());
             Files.copy(inputStream, binary);
           }
         }

File: java/src/org/openqa/selenium/By.java
Patch:
@@ -121,7 +121,7 @@ public static By cssSelector(String cssSelector) {
   public WebElement findElement(SearchContext context) {
     List<WebElement> allElements = findElements(context);
     if (allElements == null || allElements.isEmpty()) {
-      throw new NoSuchElementException("Cannot locate an element using " + toString());
+      throw new NoSuchElementException("Cannot locate an element using " + this);
     }
     return allElements.get(0);
   }

File: java/src/org/openqa/selenium/support/pagefactory/ByAll.java
Patch:
@@ -54,7 +54,7 @@ public WebElement findElement(SearchContext context) {
         return elements.get(0);
       }
     }
-    throw new NoSuchElementException("Cannot locate an element using " + toString());
+    throw new NoSuchElementException("Cannot locate an element using " + this);
   }
 
   @Override

File: java/src/org/openqa/selenium/support/pagefactory/ByChained.java
Patch:
@@ -52,7 +52,7 @@ public ByChained(By... bys) {
   public WebElement findElement(SearchContext context) {
     List<WebElement> elements = findElements(context);
     if (elements.isEmpty())
-      throw new NoSuchElementException("Cannot locate an element using " + toString());
+      throw new NoSuchElementException("Cannot locate an element using " + this);
     return elements.get(0);
   }
 

File: java/src/org/openqa/selenium/bidi/script/NodeProperties.java
Patch:
@@ -25,7 +25,7 @@
 public class NodeProperties {
   private enum Mode {
     OPEN("open"),
-    CLOSE("close");
+    CLOSED("closed");
 
     private final String value;
 

File: java/src/org/openqa/selenium/grid/node/Node.java
Patch:
@@ -152,7 +152,7 @@ protected Node(
                     req ->
                         getSessionId(req.getUri())
                             .map(SessionId::new)
-                            .map(this::isSessionOwner)
+                            .map(sessionId -> this.getSession(sessionId) != null)
                             .orElse(false))
                 .to(() -> new ForwardWebDriverCommand(this))
                 .with(spanDecorator("node.forward_command")),

File: java/src/org/openqa/selenium/grid/data/NodeStatus.java
Patch:
@@ -214,7 +214,8 @@ public boolean equals(Object o) {
     return Objects.equals(this.nodeId, that.nodeId)
         && Objects.equals(this.externalUri, that.externalUri)
         && this.maxSessionCount == that.maxSessionCount
-        && this.sessionTimeout == that.sessionTimeout
+        && this.sessionTimeout.compareTo(that.sessionTimeout) == 0
+        && this.heartbeatPeriod.compareTo(that.heartbeatPeriod) == 0
         && Objects.equals(this.slots, that.slots)
         && Objects.equals(this.availability, that.availability)
         && Objects.equals(this.version, that.version);

File: java/test/org/openqa/selenium/grid/distributor/local/LocalDistributorTest.java
Patch:
@@ -103,6 +103,7 @@ public void setUp() throws URISyntaxException {
             .add(caps, new TestSessionFactory((id, c) -> new Handler(c)))
             .maximumConcurrentSessions(2)
             .sessionTimeout(Duration.ofSeconds(30))
+            .heartbeatPeriod(Duration.ofSeconds(5))
             .build();
 
     wait =
@@ -145,6 +146,7 @@ void testAddNodeToDistributor() {
     assertThat(distributorNode.getNodeId()).isEqualByComparingTo(localNode.getId());
     assertThat(distributorNode.getExternalUri()).isEqualTo(uri);
     assertThat(distributorNode.getSessionTimeout()).isEqualTo(Duration.ofSeconds(30));
+    assertThat(distributorNode.getHeartbeatPeriod()).isEqualTo(Duration.ofSeconds(5));
   }
 
   @Test

File: java/test/org/openqa/selenium/grid/gridui/OverallGridTest.java
Patch:
@@ -68,7 +68,7 @@ public void tearDown() {
 
   @Test
   void shouldReportConcurrencyZeroPercentWhenGridIsStartedWithoutLoad() {
-    driver.get(whereIs(server, "/ui#/sessions"));
+    driver.get(whereIs(server, "/ui/#/sessions"));
 
     WebElement concurrency =
         wait.until(
@@ -79,7 +79,7 @@ void shouldReportConcurrencyZeroPercentWhenGridIsStartedWithoutLoad() {
 
   @Test
   void shouldShowOneNodeRegistered() {
-    driver.get(whereIs(server, "/ui"));
+    driver.get(whereIs(server, "/ui/"));
 
     List<WebElement> nodeInfoIcons =
         wait.until(
@@ -93,7 +93,7 @@ void shouldIncrementSessionCountWhenSessionStarts() {
     WebDriver remoteWebDriver =
         new RemoteWebDriver(server.getUrl(), Browser.detect().getCapabilities());
     try {
-      driver.get(whereIs(server, "/ui#/sessions"));
+      driver.get(whereIs(server, "/ui/#/sessions"));
 
       wait.until(textToBe(By.cssSelector("div[data-testid='session-count']"), "1"));
     } finally {

File: java/src/org/openqa/selenium/chromium/ChromiumDriver.java
Patch:
@@ -212,7 +212,8 @@ public ScriptKey pin(String script) {
     // Create the actual script we're going to use.
     String scriptToUse =
         String.format(
-            "window.seleniumPinnedScript%s = function(){%s}", Math.abs(script.hashCode()), script);
+            "window.seleniumPinnedScript%s = function(){%s}",
+            Math.abs((long) script.hashCode()), script);
 
     DevTools devTools = getDevTools();
     devTools.createSessionIfThereIsNotOne();

File: java/src/org/openqa/selenium/net/PortProber.java
Patch:
@@ -119,7 +119,7 @@ private static boolean isFree(String bindHost, int port) {
       socket.setReuseAddress(true);
       socket.bind(new InetSocketAddress(bindHost, port));
       return true;
-    } catch (Exception e) {
+    } catch (IOException | RuntimeException e) {
       return false;
     }
   }

File: java/src/org/openqa/selenium/devtools/v127/v127Network.java
Patch:
@@ -127,7 +127,7 @@ public Either<HttpRequest, HttpResponse> createSeMessages(RequestPaused pausedRe
       } catch (DevToolsException e) {
         // Redirects don't seem to have bodies
         int code = pausedReq.getResponseStatusCode().orElse(HTTP_OK);
-        if (code < 300 && code > 399) {
+        if (code >= 300 && code <= 399) {
           LOG.warning("Unable to get body for request id " + pausedReq.getRequestId());
         }
 

File: java/src/org/openqa/selenium/devtools/v128/v128Network.java
Patch:
@@ -127,7 +127,7 @@ public Either<HttpRequest, HttpResponse> createSeMessages(RequestPaused pausedRe
       } catch (DevToolsException e) {
         // Redirects don't seem to have bodies
         int code = pausedReq.getResponseStatusCode().orElse(HTTP_OK);
-        if (code < 300 && code > 399) {
+        if (code >= 300 && code <= 399) {
           LOG.warning("Unable to get body for request id " + pausedReq.getRequestId());
         }
 

File: java/src/org/openqa/selenium/devtools/v129/v129Network.java
Patch:
@@ -127,7 +127,7 @@ public Either<HttpRequest, HttpResponse> createSeMessages(RequestPaused pausedRe
       } catch (DevToolsException e) {
         // Redirects don't seem to have bodies
         int code = pausedReq.getResponseStatusCode().orElse(HTTP_OK);
-        if (code < 300 && code > 399) {
+        if (code >= 300 && code <= 399) {
           LOG.warning("Unable to get body for request id " + pausedReq.getRequestId());
         }
 

File: java/src/org/openqa/selenium/devtools/v85/V85Network.java
Patch:
@@ -137,7 +137,7 @@ public Either<HttpRequest, HttpResponse> createSeMessages(RequestPaused pausedRe
       } catch (DevToolsException e) {
         // Redirects don't seem to have bodies
         int code = pausedReq.getResponseStatusCode().orElse(HTTP_OK);
-        if (code < 300 && code > 399) {
+        if (code >= 300 && code <= 399) {
           LOG.warning("Unable to get body for request id " + pausedReq.getRequestId());
         }
 

File: java/src/org/openqa/selenium/remote/service/DriverFinder.java
Patch:
@@ -156,6 +156,8 @@ private List<String> toArguments() {
         arguments.add(proxy.getSslProxy());
       } else if (proxy.getHttpProxy() != null) {
         arguments.add(proxy.getHttpProxy());
+      } else if (proxy.getProxyAutoconfigUrl() != null) {
+        arguments.add(proxy.getProxyAutoconfigUrl());
       }
     }
     return arguments;

File: java/src/org/openqa/selenium/remote/http/jdk/JdkHttpClient.java
Patch:
@@ -421,7 +421,7 @@ private HttpResponse execute0(HttpRequest req) throws UncheckedIOException {
         switch (response.statusCode()) {
           case 303:
             method = HttpMethod.GET;
-            // fall-through
+          // fall-through
           case 301:
           case 302:
           case 307:

File: java/test/org/openqa/selenium/remote/internal/HttpClientTestBase.java
Patch:
@@ -208,19 +208,19 @@ public void shouldAllowConfigurationFromSystemProperties() {
     delegate =
         req -> {
           try {
-            Thread.sleep(1100);
+            Thread.sleep(3000);
           } catch (InterruptedException e) {
             throw new RuntimeException(e);
           }
           return new HttpResponse().setContent(Contents.utf8String("Connection timed out"));
         };
     try {
       System.setProperty("webdriver.httpclient.connectionTimeout", "1");
-      System.setProperty("webdriver.httpclient.readTimeout", "300");
+      System.setProperty("webdriver.httpclient.readTimeout", "2");
       System.setProperty("webdriver.httpclient.version", "HTTP_1_1");
       ClientConfig clientConfig = ClientConfig.defaultConfig();
       assertThat(clientConfig.connectionTimeout()).isEqualTo(Duration.ofSeconds(1));
-      assertThat(clientConfig.readTimeout()).isEqualTo(Duration.ofSeconds(300));
+      assertThat(clientConfig.readTimeout()).isEqualTo(Duration.ofSeconds(2));
       assertThat(clientConfig.version()).isEqualTo("HTTP_1_1");
       HttpClient client =
           createFactory().createClient(clientConfig.baseUri(URI.create(server.whereIs("/"))));

File: java/src/org/openqa/selenium/grid/node/docker/DockerOptions.java
Patch:
@@ -207,8 +207,8 @@ protected List<Device> getDevicesMapping() {
         config.getAll(DOCKER_SECTION, "devices").orElseGet(Collections::emptyList);
 
     List<Device> deviceMapping = new ArrayList<>();
-    for (int i = 0; i < devices.size(); i++) {
-      String deviceMappingDefined = devices.get(i).trim();
+    for (String device : devices) {
+      String deviceMappingDefined = device.trim();
       Matcher matcher =
           linuxDeviceMappingWithDefaultPermissionsPattern.matcher(deviceMappingDefined);
 

File: java/src/org/openqa/selenium/remote/http/FormEncodedData.java
Patch:
@@ -90,6 +90,6 @@ private static String read(Reader reader, Charset charSet, char delimiter, Atomi
       builder.append(c);
     }
 
-    return URLDecoder.decode(builder.toString(), charSet.toString());
+    return URLDecoder.decode(builder.toString(), charSet);
   }
 }

File: java/test/org/openqa/selenium/remote/codec/w3c/W3CHttpResponseCodecTest.java
Patch:
@@ -52,7 +52,7 @@ void noErrorNoCry() {
 
     Response decoded = new W3CHttpResponseCodec().decode(response);
 
-    assertThat(decoded.getStatus().intValue()).isEqualTo(ErrorCodes.SUCCESS);
+    assertThat(decoded.getStatus()).isEqualTo(ErrorCodes.SUCCESS);
     assertThat(decoded.getState()).isEqualTo("success");
     assertThat(decoded.getValue()).isEqualTo("cheese");
   }

File: java/src/org/openqa/selenium/remote/service/DriverFinder.java
Patch:
@@ -148,7 +148,9 @@ private List<String> toArguments() {
     }
 
     Proxy proxy = Proxy.extractFrom(options);
-    if (proxy != null) {
+    if (proxy != null
+        && proxy.getProxyType() != Proxy.ProxyType.DIRECT
+        && proxy.getProxyType() != Proxy.ProxyType.AUTODETECT) {
       arguments.add("--proxy");
       if (proxy.getSslProxy() != null) {
         arguments.add(proxy.getSslProxy());

File: java/test/org/openqa/selenium/bidi/input/DefaultKeyboardTest.java
Patch:
@@ -226,6 +226,9 @@ public void testSelectionSelectBySymbol() {
 
   @Test
   @Ignore(IE)
+  @NotYetImplemented(
+      value = CHROME,
+      reason = "https://github.com/GoogleChromeLabs/chromium-bidi/issues/2321")
   public void testSelectionSelectByWord() {
     assumeFalse(getEffectivePlatform(driver).is(Platform.MAC), "MacOS has alternative keyboard");
 

File: java/test/org/openqa/selenium/bidi/input/DefaultKeyboardTest.java
Patch:
@@ -197,7 +197,9 @@ void canGenerateKeyboardShortcuts() {
   }
 
   @Test
-  @NotYetImplemented(value = CHROME, reason = "https://github.com/GoogleChromeLabs/chromium-bidi/issues/2321")
+  @NotYetImplemented(
+      value = CHROME,
+      reason = "https://github.com/GoogleChromeLabs/chromium-bidi/issues/2321")
   public void testSelectionSelectBySymbol() {
     driver.get(appServer.whereIs("single_text_input.html"));
 

File: java/test/org/openqa/selenium/bidi/input/DefaultKeyboardTest.java
Patch:
@@ -197,7 +197,7 @@ void canGenerateKeyboardShortcuts() {
   }
 
   @Test
-  @NotYetImplemented(value = CHROME, reason = "Chrome click is selecting second half of text")
+  @NotYetImplemented(value = CHROME, reason = "https://github.com/GoogleChromeLabs/chromium-bidi/issues/2321")
   public void testSelectionSelectBySymbol() {
     driver.get(appServer.whereIs("single_text_input.html"));
 

File: java/src/org/openqa/selenium/PersistentCapabilities.java
Patch:
@@ -50,6 +50,7 @@ private PersistentCapabilities(Capabilities previousValues, Capabilities newValu
 
   public PersistentCapabilities setCapability(String name, Object value) {
     Require.nonNull("Name", name);
+    Require.nonNull("Value", value);
 
     return new PersistentCapabilities(this, new ImmutableCapabilities(name, value));
   }

File: java/src/org/openqa/selenium/chrome/ChromeDriverService.java
Patch:
@@ -33,6 +33,7 @@
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.chromium.ChromiumDriverLogLevel;
+import org.openqa.selenium.remote.service.DriverFinder;
 import org.openqa.selenium.remote.service.DriverService;
 
 /** Manages the life and death of a ChromeDriver server. */
@@ -128,8 +129,8 @@ public Capabilities getDefaultDriverOptions() {
   /**
    * Configures and returns a new {@link ChromeDriverService} using the default configuration. In
    * this configuration, the service will use the ChromeDriver executable identified by {@link
-   * org.openqa.selenium.remote.service.DriverFinder#getResult(DriverService, Capabilities)}. Each
-   * service created by this method will be configured to use a free port on the current system.
+   * DriverFinder#getDriverPath()} (DriverService, Capabilities)}. Each service created by this
+   * method will be configured to use a free port on the current system.
    *
    * @return A new ChromeDriverService using the default configuration.
    */

File: java/src/org/openqa/selenium/edge/EdgeDriverService.java
Patch:
@@ -31,6 +31,7 @@
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.chromium.ChromiumDriverLogLevel;
+import org.openqa.selenium.remote.service.DriverFinder;
 import org.openqa.selenium.remote.service.DriverService;
 
 /** Manages the life and death of the MSEdgeDriver */
@@ -117,8 +118,8 @@ public Capabilities getDefaultDriverOptions() {
   /**
    * Configures and returns a new {@link EdgeDriverService} using the default configuration. In this
    * configuration, the service will use the MSEdgeDriver executable identified by the {@link
-   * org.openqa.selenium.remote.service.DriverFinder#getResult(DriverService, Capabilities)}. Each
-   * service created by this method will be configured to use a free port on the current system.
+   * DriverFinder#getDriverPath()} (DriverService, Capabilities)}. Each service created by this
+   * method will be configured to use a free port on the current system.
    *
    * @return A new EdgeDriverService using the default configuration.
    */

File: java/src/org/openqa/selenium/ie/InternetExplorerDriverService.java
Patch:
@@ -31,6 +31,7 @@
 import java.util.Map;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriverException;
+import org.openqa.selenium.remote.service.DriverFinder;
 import org.openqa.selenium.remote.service.DriverService;
 
 /** Manages the life and death of an IEDriverServer. */
@@ -104,8 +105,7 @@ public Capabilities getDefaultDriverOptions() {
   /**
    * Configures and returns a new {@link InternetExplorerDriverService} using the default
    * configuration. In this configuration, the service will use the IEDriverServer executable
-   * identified by the {@link
-   * org.openqa.selenium.remote.service.DriverFinder#getResult(DriverService, Capabilities)}. Each
+   * identified by the {@link DriverFinder#getDriverPath()} (DriverService, Capabilities)}. Each
    * service created by this method will be configured to use a free port on the current system.
    *
    * @return A new InternetExplorerDriverService using the default configuration.

File: java/src/org/openqa/selenium/safari/SafariDriverService.java
Patch:
@@ -35,6 +35,7 @@
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.net.PortProber;
+import org.openqa.selenium.remote.service.DriverFinder;
 import org.openqa.selenium.remote.service.DriverService;
 
 /** Manages the life and death of SafariDriver. */
@@ -95,8 +96,8 @@ protected Capabilities getDefaultDriverOptions() {
   /**
    * Configures and returns a new {@link SafariDriverService} using the default configuration. In
    * this configuration, the service will use the SafariDriver executable identified by the {@link
-   * org.openqa.selenium.remote.service.DriverFinder#getResult(DriverService, Capabilities)}. Each
-   * service created by this method will be configured to use a free port on the current system.
+   * DriverFinder#getDriverPath()} (DriverService, Capabilities)}. Each service created by this
+   * method will be configured to use a free port on the current system.
    *
    * @return A new SafariDriverService using the default configuration.
    */

File: java/src/org/openqa/selenium/safari/SafariTechPreviewDriverService.java
Patch:
@@ -35,6 +35,7 @@
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.net.PortProber;
+import org.openqa.selenium.remote.service.DriverFinder;
 import org.openqa.selenium.remote.service.DriverService;
 
 /** Manages the life and death of SafariDriver Technology Preview. */
@@ -96,8 +97,7 @@ public Capabilities getDefaultDriverOptions() {
   /**
    * Configures and returns a new {@link SafariTechPreviewDriverService} using the default
    * configuration. In this configuration, the service will use the SafariDriver executable
-   * identified by the {@link
-   * org.openqa.selenium.remote.service.DriverFinder#getResult(DriverService, Capabilities)}. Each
+   * identified by the {@link DriverFinder#getDriverPath()} (DriverService, Capabilities)}. Each
    * service created by this method will be configured to use a free port on the current system.
    *
    * @return A new SafariTechPreviewDriverService using the default configuration.

File: java/src/org/openqa/selenium/support/AbstractFindByBuilder.java
Patch:
@@ -109,7 +109,7 @@ protected void assertValidFindBy(FindBy findBy) {
       throw new IllegalArgumentException(
           String.format(
               "You must specify at most one location strategy. Number found: %d (%s)",
-              finders.size(), finders.toString()));
+              finders.size(), finders));
     }
   }
 

File: java/src/org/openqa/selenium/support/Color.java
Patch:
@@ -116,7 +116,7 @@ public int hashCode() {
     result = 31 * result + green;
     result = 31 * result + blue;
     temp = alpha != +0.0d ? Double.doubleToLongBits(alpha) : 0L;
-    result = 31 * result + (int) (temp ^ (temp >>> 32));
+    result = 31 * result + Long.hashCode(temp);
     return result;
   }
 

File: java/test/org/openqa/selenium/bidi/input/DefaultMouseTest.java
Patch:
@@ -481,7 +481,7 @@ public void testCanMoveOverAndOutOfAnElement() {
     inputModule.perform(
         windowHandle,
         getBuilder(driver)
-            .moveToElement(redbox, redSize.getWidth() / 1 + 1, redSize.getHeight() / 1 + 1)
+            .moveToElement(redbox, redSize.getWidth() + 1, redSize.getHeight() + 1)
             .getSequences());
 
     wait.until(attributeToBe(redbox, "background-color", Colors.GREEN.getColorValue().asRgba()));

File: java/test/org/openqa/selenium/bidi/input/DragAndDropTest.java
Patch:
@@ -57,7 +57,7 @@ private static void sleep(int ms) {
     try {
       Thread.sleep(ms);
     } catch (InterruptedException e) {
-      throw new RuntimeException("Interrupted: " + e.toString());
+      throw new RuntimeException("Interrupted: " + e);
     }
   }
 

File: java/test/org/openqa/selenium/interactions/DefaultMouseTest.java
Patch:
@@ -404,7 +404,7 @@ public void testCanMoveOverAndOutOfAnElement() {
         .isEqualTo(RED.getColorValue());
 
     getBuilder(driver)
-        .moveToElement(redbox, redSize.getWidth() / 1 + 1, redSize.getHeight() / 1 + 1)
+        .moveToElement(redbox, redSize.getWidth() + 1, redSize.getHeight() + 1)
         .perform();
 
     wait.until(attributeToBe(redbox, "background-color", Colors.GREEN.getColorValue().asRgba()));

File: java/test/org/openqa/selenium/interactions/PenPointerTest.java
Patch:
@@ -367,7 +367,7 @@ public void testCanMoveOverAndOutOfAnElement() {
         .isEqualTo(RED.getColorValue());
 
     setDefaultPen(driver)
-        .moveToElement(redbox, redSize.getWidth() / 1 + 1, redSize.getHeight() / 1 + 1)
+        .moveToElement(redbox, redSize.getWidth() + 1, redSize.getHeight() + 1)
         .perform();
 
     wait.until(attributeToBe(redbox, "background-color", Colors.GREEN.getColorValue().asRgba()));
@@ -407,8 +407,8 @@ public void setPointerEventProperties() {
 
     Rectangle rect = pointerArea.getRect();
 
-    int centerX = (int) Math.floor(rect.width / 2 + rect.getX());
-    int centerY = (int) Math.floor(rect.height / 2 + rect.getY());
+    int centerX = rect.width / 2 + rect.getX();
+    int centerY = rect.height / 2 + rect.getY();
     Assertions.assertThat(moveTo.get("button")).isEqualTo("-1");
     Assertions.assertThat(moveTo.get("pageX")).isEqualTo("" + centerX);
     Assertions.assertThat(moveTo.get("pageY")).isEqualTo("" + centerY);

File: java/src/org/openqa/selenium/grid/distributor/AddNode.java
Patch:
@@ -65,6 +65,7 @@ public HttpResponse execute(HttpRequest req) {
             status.getNodeId(),
             status.getExternalUri(),
             registrationSecret,
+            status.getSessionTimeout(),
             status.getSlots().stream().map(Slot::getStereotype).collect(Collectors.toSet()));
 
     distributor.add(node);

File: java/src/org/openqa/selenium/grid/distributor/GridModel.java
Patch:
@@ -367,6 +367,7 @@ private NodeStatus rewrite(NodeStatus status, Availability availability) {
         status.getSlots(),
         availability,
         status.getHeartbeatPeriod(),
+        status.getSessionTimeout(),
         status.getVersion(),
         status.getOsInfo());
   }
@@ -508,6 +509,7 @@ private void amend(Availability availability, NodeStatus status, Slot slot) {
               newSlots,
               availability,
               status.getHeartbeatPeriod(),
+              status.getSessionTimeout(),
               status.getVersion(),
               status.getOsInfo()));
     } finally {

File: java/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java
Patch:
@@ -314,6 +314,7 @@ private void register(NodeStatus status) {
               status.getNodeId(),
               status.getExternalUri(),
               registrationSecret,
+              status.getSessionTimeout(),
               capabilities);
 
       add(remoteNode);

File: java/src/org/openqa/selenium/redis/GridRedisClient.java
Patch:
@@ -144,6 +144,7 @@ public Optional<NodeStatus> getNode(NodeId id) {
               node.getSlots(),
               node.getAvailability(),
               node.getHeartbeatPeriod(),
+              node.getSessionTimeout(),
               node.getVersion(),
               node.getOsInfo());
       return Optional.of(resultNode);

File: java/test/org/openqa/selenium/grid/data/NodeStatusTest.java
Patch:
@@ -56,6 +56,7 @@ void ensureRoundTripWorks() throws URISyntaxException {
                         Instant.now()))),
             UP,
             Duration.ofSeconds(10),
+            Duration.ofSeconds(300),
             "4.0.0",
             ImmutableMap.of(
                 "name", "Max OS X",

File: java/test/org/openqa/selenium/grid/distributor/selector/DefaultSlotSelectorTest.java
Patch:
@@ -229,6 +229,7 @@ private NodeStatus createNode(List<Capabilities> stereotypes, int count, int cur
         ImmutableSet.copyOf(slots),
         UP,
         Duration.ofSeconds(10),
+        Duration.ofSeconds(300),
         "4.0.0",
         ImmutableMap.of(
             "name", "Max OS X",

File: java/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -407,7 +407,7 @@ void testShouldBeAbleToExecuteABigChunkOfJavascriptCode() throws IOException {
     driver.get(pages.javascriptPage);
 
     Path jqueryFile = InProject.locate("common/src/web/js/jquery-3.5.1.min.js");
-    String jquery = new String(Files.readAllBytes(jqueryFile), US_ASCII);
+    String jquery = Files.readString(jqueryFile, US_ASCII);
     assertThat(jquery.length())
         .describedAs("The javascript code should be at least 50 KB.")
         .isGreaterThan(50000);

File: java/test/org/openqa/selenium/ProxyTest.java
Patch:
@@ -117,7 +117,7 @@ void testManualProxy() {
     assertThat(proxy.getHttpProxy()).isEqualTo("http.proxy:1234");
     assertThat(proxy.getSslProxy()).isEqualTo("ssl.proxy");
     assertThat(proxy.getSocksProxy()).isEqualTo("socks.proxy:65555");
-    assertThat(proxy.getSocksVersion()).isEqualTo(Integer.valueOf(5));
+    assertThat(proxy.getSocksVersion()).isEqualTo(5);
     assertThat(proxy.getSocksUsername()).isEqualTo("test1");
     assertThat(proxy.getSocksPassword()).isEqualTo("test2");
     assertThat(proxy.getNoProxy()).isEqualTo("localhost,127.0.0.*");
@@ -184,7 +184,7 @@ void manualProxyFromMap() {
     assertThat(proxy.getHttpProxy()).isEqualTo("http.proxy:1234");
     assertThat(proxy.getSslProxy()).isEqualTo("ssl.proxy");
     assertThat(proxy.getSocksProxy()).isEqualTo("socks.proxy:65555");
-    assertThat(proxy.getSocksVersion()).isEqualTo(Integer.valueOf(5));
+    assertThat(proxy.getSocksVersion()).isEqualTo(5);
     assertThat(proxy.getSocksUsername()).isEqualTo("test1");
     assertThat(proxy.getSocksPassword()).isEqualTo("test2");
     assertThat(proxy.getNoProxy()).isEqualTo("localhost,127.0.0.*");
@@ -209,7 +209,7 @@ void longSocksVersionFromMap() {
 
     Proxy proxy = new Proxy(proxyData);
 
-    assertThat(proxy.getSocksVersion()).isEqualTo(Integer.valueOf(5));
+    assertThat(proxy.getSocksVersion()).isEqualTo(5);
   }
 
   @Test

File: java/test/org/openqa/selenium/environment/webserver/Utf8Handler.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.environment.webserver;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
-
 import java.io.IOException;
 import java.io.UncheckedIOException;
 import java.nio.file.Files;
@@ -51,7 +49,7 @@ public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
 
       return new HttpResponse()
           .setHeader("Content-Type", "text/html; charset=UTF-8")
-          .setContent(Contents.utf8String(new String(Files.readAllBytes(target), UTF_8)));
+          .setContent(Contents.utf8String(Files.readString(target)));
     } catch (IOException e) {
       throw new UncheckedIOException(e);
     }

File: java/test/org/openqa/selenium/json/JsonOutputTest.java
Patch:
@@ -419,7 +419,7 @@ void shouldConvertUnhandledAlertException() {
   @Test
   void shouldConvertDatesToMillisecondsInUtcTime() {
     String jsonStr = convert(new Date(0));
-    assertThat(valueOf(jsonStr).intValue()).isZero();
+    assertThat(valueOf(jsonStr)).isZero();
   }
 
   @Test

File: java/test/org/openqa/selenium/bidi/log/LogInspectorTest.java
Patch:
@@ -66,6 +66,7 @@ void canListenToConsoleLog() throws ExecutionException, InterruptedException, Ti
       assertThat(logEntry.getText()).isEqualTo("Hello, world!");
       assertThat(logEntry.getRealm()).isNull();
       assertThat(logEntry.getArgs().size()).isEqualTo(1);
+      assertThat(logEntry.getArgs().get(0).getType()).isEqualTo("string");
       assertThat(logEntry.getType()).isEqualTo("console");
       assertThat(logEntry.getLevel()).isEqualTo(LogLevel.INFO);
       assertThat(logEntry.getMethod()).isEqualTo("log");

File: java/src/org/openqa/selenium/bidi/script/ExceptionDetails.java
Patch:
@@ -21,7 +21,6 @@
 
 import java.util.Map;
 import java.util.TreeMap;
-import org.openqa.selenium.bidi.log.StackTrace;
 import org.openqa.selenium.json.JsonInput;
 
 public class ExceptionDetails {

File: java/test/org/openqa/selenium/build/InProject.java
Patch:
@@ -69,7 +69,7 @@ public static Path findProjectRoot() {
     if (!Platform.getCurrent().is(WINDOWS)) {
       dir = findRunfilesRoot();
       if (dir != null) {
-        return dir.resolve("selenium").normalize();
+        return dir.resolve("_main").normalize();
       }
     }
 

File: java/test/org/openqa/selenium/javascript/JavaScriptTestSuite.java
Patch:
@@ -83,7 +83,7 @@ public Collection<DynamicTest> dynamicTests() throws IOException {
           try {
             String url = "/" + s;
             if (isBazel() && !url.startsWith("/common/generated/")) {
-              url = "/filez/selenium" + url;
+              url = "/filez/_main" + url;
             }
             return new URL(appServer.whereIs(url));
           } catch (MalformedURLException e) {

File: java/test/org/openqa/selenium/javascript/TestFileLocator.java
Patch:
@@ -72,7 +72,7 @@ private static Path getTestDirectory() {
     Path testDir;
     if (runfiles != null) {
       // Running with bazel.
-      testDir = runfiles.resolve("selenium").resolve(testDirName);
+      testDir = runfiles.resolve("_main").resolve(testDirName);
     } else {
       // Legacy.
       testDir = InProject.locate(testDirName);

File: java/test/org/openqa/selenium/testing/drivers/OutOfProcessSeleniumServer.java
Patch:
@@ -169,9 +169,7 @@ private String buildServerAndClasspath() {
     try {
       Runfiles.Preloaded runfiles = Runfiles.preload();
       String location =
-          runfiles
-              .unmapped()
-              .rlocation("selenium/java/src/org/openqa/selenium/grid/selenium_server");
+          runfiles.unmapped().rlocation("_main/java/src/org/openqa/selenium/grid/selenium_server");
       System.err.println("Location found is: " + location);
       Path path = Paths.get(location);
       if (Files.exists(path)) {

File: java/src/org/openqa/selenium/grid/node/remote/RemoteNode.java
Patch:
@@ -279,7 +279,7 @@ public Result check() {
       try {
         NodeStatus status = getStatus();
 
-        if (!Objects.equals(getId(), status.getNodeId())) {
+        if (status.getNodeId() != null && !Objects.equals(getId(), status.getNodeId())) {
           // ensure the original RemoteNode stays DOWN when it has been restarted and registered
           // again as another RemoteNode with the same externalUri
           return new Result(DOWN, externalUri + " has unexpected node id");

File: java/test/org/openqa/selenium/ClearTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.openqa.selenium.testing.drivers.Browser.CHROME;
+import static org.openqa.selenium.testing.drivers.Browser.EDGE;
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 
 import org.junit.jupiter.api.Test;
@@ -39,6 +40,7 @@ void testWritableTextInputShouldClear() {
 
   @Test
   @Ignore(value = CHROME, reason = "https://bugs.chromium.org/p/chromedriver/issues/detail?id=4743")
+  @Ignore(value = EDGE, reason = "https://bugs.chromium.org/p/chromedriver/issues/detail?id=4743")
   void testTextInputShouldNotClearWhenDisabled() {
     driver.get(pages.readOnlyPage);
     WebElement element = driver.findElement(By.id("textInputNotEnabled"));
@@ -63,6 +65,7 @@ void testWritableTextAreaShouldClear() {
 
   @Test
   @Ignore(value = CHROME, reason = "https://bugs.chromium.org/p/chromedriver/issues/detail?id=4743")
+  @Ignore(value = EDGE, reason = "https://bugs.chromium.org/p/chromedriver/issues/detail?id=4743")
   void testTextAreaShouldNotClearWhenDisabled() {
     driver.get(pages.readOnlyPage);
     WebElement element = driver.findElement(By.id("textAreaNotEnabled"));

File: java/src/org/openqa/selenium/bidi/module/Network.java
Patch:
@@ -53,7 +53,7 @@ public class Network implements AutoCloseable {
       new Event<>("network.responseStarted", ResponseDetails::fromJsonMap);
 
   private final Event<ResponseDetails> responseCompleted =
-      new Event<>("network.responseStarted", ResponseDetails::fromJsonMap);
+      new Event<>("network.responseCompleted", ResponseDetails::fromJsonMap);
 
   private final Event<ResponseDetails> authRequired =
       new Event<>("network.authRequired", ResponseDetails::fromJsonMap);

File: java/src/org/openqa/selenium/grid/node/ProxyNodeWebsockets.java
Patch:
@@ -171,7 +171,7 @@ private Optional<Consumer<Message>> findBiDiEndpoint(
       Consumer<SessionId> sessionConsumer,
       SessionId sessionId) {
     try {
-      URI uri = new URI(String.valueOf(caps.getCapability("webSocketUrl")));
+      URI uri = new URI(String.valueOf(caps.getCapability("se:gridWebSocketUrl")));
       return Optional.of(uri)
           .map(bidi -> createWsEndPoint(bidi, downstream, sessionConsumer, sessionId));
     } catch (URISyntaxException e) {

File: java/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -89,7 +89,6 @@
 import org.openqa.selenium.remote.http.ClientConfig;
 import org.openqa.selenium.remote.http.ConnectionFailedException;
 import org.openqa.selenium.remote.http.HttpClient;
-import org.openqa.selenium.remote.internal.WebElementToJsonConverter;
 import org.openqa.selenium.remote.tracing.TracedHttpClient;
 import org.openqa.selenium.remote.tracing.Tracer;
 import org.openqa.selenium.remote.tracing.opentelemetry.OpenTelemetryTracer;

File: java/src/org/openqa/selenium/remote/codec/w3c/W3CHttpCommandCodec.java
Patch:
@@ -88,8 +88,8 @@
 import java.util.stream.Stream;
 import org.openqa.selenium.InvalidSelectorException;
 import org.openqa.selenium.WebDriverException;
+import org.openqa.selenium.remote.WebElementToJsonConverter;
 import org.openqa.selenium.remote.codec.AbstractHttpCommandCodec;
-import org.openqa.selenium.remote.internal.WebElementToJsonConverter;
 
 /**
  * A command codec that adheres to the W3C's WebDriver wire protocol.

File: java/test/org/openqa/selenium/support/pagefactory/UsingPageFactoryTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.remote.RemoteWebElement;
-import org.openqa.selenium.remote.internal.WebElementToJsonConverter;
+import org.openqa.selenium.remote.WebElementToJsonConverter;
 import org.openqa.selenium.support.ByIdOrName;
 import org.openqa.selenium.support.CacheLookup;
 import org.openqa.selenium.support.FindBy;

File: java/src/org/openqa/selenium/grid/graphql/GraphqlHandler.java
Patch:
@@ -143,6 +143,7 @@ public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
       }
 
       String query = (String) inputs.get("query");
+
       @SuppressWarnings("unchecked")
       Map<String, Object> variables =
           inputs.get("variables") instanceof Map

File: java/src/org/openqa/selenium/grid/web/NoHandler.java
Patch:
@@ -20,7 +20,6 @@
 import static com.google.common.net.MediaType.JSON_UTF_8;
 import static java.net.HttpURLConnection.HTTP_NOT_FOUND;
 import static java.nio.charset.StandardCharsets.UTF_8;
-import static org.openqa.selenium.remote.ErrorCodes.UNKNOWN_COMMAND;
 import static org.openqa.selenium.remote.http.Contents.bytes;
 
 import com.google.common.collect.ImmutableMap;
@@ -47,7 +46,6 @@ public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
     // We're not using ImmutableMap for the outer map because it disallows null values.
     Map<String, Object> responseMap = new HashMap<>();
     responseMap.put("sessionId", null);
-    responseMap.put("status", UNKNOWN_COMMAND);
     responseMap.put(
         "value",
         ImmutableMap.of(

File: java/src/org/openqa/selenium/bidi/network/ContinueRequestParameters.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.openqa.selenium.bidi.network;
 
-import org.openqa.selenium.remote.http.HttpMethod;
-
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
+import org.openqa.selenium.remote.http.HttpMethod;
 
 public class ContinueRequestParameters {
   private final Map<String, Object> map = new HashMap<>();

File: java/test/org/openqa/selenium/bidi/network/NetworkEventsTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 import static org.openqa.selenium.testing.Safely.safelyCall;
 import static org.openqa.selenium.testing.drivers.Browser.EDGE;
-import static org.openqa.selenium.testing.drivers.Browser.FIREFOX;
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
@@ -173,7 +172,6 @@ void canListenToOnAuthRequiredEvent()
   @NotYetImplemented(SAFARI)
   @NotYetImplemented(IE)
   @NotYetImplemented(EDGE)
-  @NotYetImplemented(FIREFOX)
   void canListenToFetchError() throws ExecutionException, InterruptedException, TimeoutException {
     try (Network network = new Network(driver)) {
       CompletableFuture<FetchError> future = new CompletableFuture<>();

File: java/src/org/openqa/selenium/remote/ErrorCodec.java
Patch:
@@ -85,7 +85,7 @@ public class ErrorCodec {
           new W3CError("unable to capture screen", ScreenshotException.class, 500),
           new W3CError("unable to set cookie", UnableToSetCookieException.class, 500),
           new W3CError("unexpected alert open", UnhandledAlertException.class, 500),
-          new W3CError("unsupported operation", UnsupportedCommandException.class, 404),
+          new W3CError("unsupported operation", UnsupportedCommandException.class, 500),
           new W3CError("unknown command", UnsupportedCommandException.class, 404),
           new W3CError("unknown method", UnsupportedCommandException.class, 405),
           new W3CError("unknown error", WebDriverException.class, 500));

File: java/test/org/openqa/selenium/remote/codec/w3c/W3CHttpResponseCodecTest.java
Patch:
@@ -115,7 +115,7 @@ void decodingAnErrorWithoutAStacktraceIsDecodedProperlyForNonCompliantImplementa
     error.put("message", "I like peas");
     error.put("stacktrace", "");
 
-    HttpResponse response = createValidResponse(HTTP_INTERNAL_ERROR, error);
+    HttpResponse response = createValidResponse(HTTP_INTERNAL_ERROR, Map.of("value", error));
 
     Response decoded = new W3CHttpResponseCodec().decode(response);
 

File: java/src/org/openqa/selenium/bidi/script/ArrayLocalValue.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 import java.util.Map;
 
-class ArrayLocalValue extends LocalValue {
+public class ArrayLocalValue extends LocalValue {
 
   private final List<LocalValue> value;
 

File: java/src/org/openqa/selenium/bidi/script/DateLocalValue.java
Patch:
@@ -19,7 +19,7 @@
 
 import java.util.Map;
 
-class DateLocalValue extends LocalValue {
+public class DateLocalValue extends LocalValue {
 
   private final String value;
 

File: java/src/org/openqa/selenium/bidi/script/MapLocalValue.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import java.util.Map;
 
-class MapLocalValue extends LocalValue {
+public class MapLocalValue extends LocalValue {
 
   private final Map<Object, LocalValue> map;
 

File: java/src/org/openqa/selenium/bidi/script/ObjectLocalValue.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import java.util.Map;
 
-class ObjectLocalValue extends LocalValue {
+public class ObjectLocalValue extends LocalValue {
 
   private final Map<Object, LocalValue> map;
 

File: java/src/org/openqa/selenium/bidi/script/PrimitiveProtocolValue.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.TreeMap;
 import org.openqa.selenium.internal.Require;
 
-class PrimitiveProtocolValue extends LocalValue {
+public class PrimitiveProtocolValue extends LocalValue {
 
   private final PrimitiveType type;
   private Object value;

File: java/src/org/openqa/selenium/bidi/script/SetLocalValue.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Map;
 import java.util.Set;
 
-class SetLocalValue extends LocalValue {
+public class SetLocalValue extends LocalValue {
 
   private final Set<LocalValue> value;
 

File: java/test/org/openqa/selenium/bidi/browsingcontext/BrowsingContextTest.java
Patch:
@@ -503,7 +503,7 @@ void canPrintPage() {
   @NotYetImplemented(IE)
   @NotYetImplemented(CHROME)
   @NotYetImplemented(FIREFOX)
-  public void canNavigateBackInTheBrowserHistory() {
+  void canNavigateBackInTheBrowserHistory() {
     BrowsingContext browsingContext = new BrowsingContext(driver, driver.getWindowHandle());
     browsingContext.navigate(pages.formPage, ReadinessState.COMPLETE);
 

File: java/src/org/openqa/selenium/HasDownloads.java
Patch:
@@ -33,7 +33,7 @@ public interface HasDownloads {
    * @throws WebDriverException if capability to enable downloads is not set
    */
   default void requireDownloadsEnabled(Capabilities capabilities) {
-    boolean downloadsEnabled = (boolean) capabilities.getCapability("se:downloadsEnabled");
+    boolean downloadsEnabled = capabilities.is("se:downloadsEnabled");
     if (!downloadsEnabled) {
       throw new WebDriverException(
           "You must enable downloads in order to work with downloadable files.");

File: java/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -222,7 +222,7 @@ public void start() throws IOException {
                       ? StartOrDie.PROCESS_DIED
                       : StartOrDie.PROCESS_IS_ACTIVE;
                 } catch (InterruptedException ex) {
-                   return null;
+                  return null;
                 }
               },
               executorService);

File: java/src/org/openqa/selenium/logging/LogType.java
Patch:
@@ -32,7 +32,7 @@ public class LogType {
   /** This log type pertains to logs relating to performance timings. */
   public static final String PERFORMANCE = "performance";
 
-  /** This log type pertains to logs relating to performance timings. */
+  /** This log type pertains to logs relating to profiler timings. */
   public static final String PROFILER = "profiler";
 
   /** This log type pertains to logs from the remote server. */

File: java/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -173,7 +173,7 @@ public class ErrorCodes {
               405,
               UnsupportedCommandException.class,
               false,
-              true),
+              false),
           new KnownError(
               METHOD_NOT_ALLOWED,
               "unsupported operation",

File: java/src/org/openqa/selenium/remote/ErrorHandler.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.remote;
 
-import static org.openqa.selenium.remote.ErrorCodes.SUCCESS;
-
 import java.lang.reflect.Constructor;
 import java.math.BigDecimal;
 import java.math.RoundingMode;
@@ -82,7 +80,7 @@ public void setIncludeServerErrors(boolean includeServerErrors) {
 
   @SuppressWarnings("unchecked")
   public Response throwIfResponseFailed(Response response, long duration) throws RuntimeException {
-    if (response.getStatus() == null || response.getStatus() == SUCCESS) {
+    if ("success".equals(response.getState())) {
       return response;
     }
 

File: java/src/org/openqa/selenium/remote/codec/w3c/W3CHttpResponseCodec.java
Patch:
@@ -90,10 +90,12 @@ public Response decode(HttpResponse encodedResponse) {
     if (!encodedResponse.isSuccessful()) {
       LOG.fine("Processing an error");
       if (HTTP_BAD_METHOD == encodedResponse.getStatus()) {
+        response.setState("unknown command");
         response.setStatus(ErrorCodes.UNKNOWN_COMMAND);
         response.setValue(content);
       } else if (HTTP_GATEWAY_TIMEOUT == encodedResponse.getStatus()
           || HTTP_BAD_GATEWAY == encodedResponse.getStatus()) {
+        response.setState("unknown error");
         response.setStatus(ErrorCodes.UNHANDLED_ERROR);
         response.setValue(content);
       } else {

File: java/test/org/openqa/selenium/remote/AugmenterTest.java
Patch:
@@ -308,6 +308,7 @@ protected StubExecutor(Capabilities capabilities) {
     public Response execute(Command command) {
       if (DriverCommand.NEW_SESSION.equals(command.getName())) {
         Response response = new Response(new SessionId("foo"));
+        response.setState("success");
         response.setValue(capabilities.asMap());
         return response;
       }
@@ -316,6 +317,7 @@ public Response execute(Command command) {
         if (possibleMatch.commandName.equals(command.getName())
             && possibleMatch.args.equals(command.getParameters())) {
           Response response = new Response(new SessionId("foo"));
+          response.setState("success");
           response.setValue(possibleMatch.returnValue);
           return response;
         }

File: java/test/org/openqa/selenium/remote/ErrorHandlerTest.java
Patch:
@@ -480,6 +480,7 @@ private Response createResponse(int status) {
   private Response createResponse(int status, Object value) {
     Response response = new Response();
     response.setStatus(status);
+    response.setState(new ErrorCodes().toState(status));
     response.setValue(value);
     return response;
   }

File: java/test/org/openqa/selenium/remote/RemoteWebDriverInitializationTest.java
Patch:
@@ -167,6 +167,7 @@ void canHandleUnknownPlatformNameAndFallsBackToUnix() {
   void canHandleNonStandardCapabilitiesReturnedByRemoteEnd() throws IOException {
     Response resp = new Response();
     resp.setSessionId(UUID.randomUUID().toString());
+    resp.setState("success");
     resp.setValue(ImmutableMap.of("platformName", "xxx"));
     CommandExecutor executor = mock(CommandExecutor.class);
     when(executor.execute(any())).thenReturn(resp);

File: java/test/org/openqa/selenium/remote/WebDriverFixture.java
Patch:
@@ -156,6 +156,7 @@ private boolean areEqual(Object left, Object right) {
   public static Function<Command, Response> valueResponder(Object value) {
     return cmd -> {
       Response response = new Response();
+      response.setState("success");
       response.setValue(value);
       response.setSessionId(cmd.getSessionId() != null ? cmd.getSessionId().toString() : null);
       return response;
@@ -181,6 +182,7 @@ public static Function<Command, Response> errorResponder(String state, Object va
         Collection<Capabilities> capabilities =
             (Collection<Capabilities>) cmd.getParameters().get("capabilities");
 
+        response.setState("success");
         response.setValue(
             capabilities.iterator().next().asMap().entrySet().stream()
                 .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().toString())));

File: java/test/org/openqa/selenium/support/ui/WebDriverWaitTest.java
Patch:
@@ -62,6 +62,7 @@ public void createMocks() {
   void shouldIncludeRemoteInfoForWrappedDriverTimeout() throws IOException {
     Capabilities caps = new MutableCapabilities();
     Response response = new Response(new SessionId("foo"));
+    response.setState("success");
     response.setValue(caps.asMap());
     CommandExecutor executor = mock(CommandExecutor.class);
     when(executor.execute(any(Command.class))).thenReturn(response);

File: java/src/org/openqa/selenium/grid/node/config/NodeFlags.java
Patch:
@@ -149,7 +149,7 @@ public class NodeFlags implements HasRoles {
           "List of configured drivers a Node supports. "
               + "It is recommended to provide this type of configuration through a toml config "
               + "file to improve readability. Command line example: "
-              + "--drivers-configuration display-name=\"Firefox Nightly\" max-sessions=2 "
+              + "--driver-configuration display-name=\"Firefox Nightly\" max-sessions=2 "
               + "webdriver-path=\"/usr/local/bin/geckodriver\" "
               + "stereotype='{\"browserName\": \"firefox\", \"browserVersion\": \"86\", "
               + "\"moz:firefoxOptions\": "

File: java/src/org/openqa/selenium/PageLoadStrategy.java
Patch:
@@ -22,7 +22,7 @@ public enum PageLoadStrategy {
   EAGER("eager"),
   NORMAL("normal");
 
-  private String text;
+  private final String text;
 
   PageLoadStrategy(String text) {
     this.text = text;

File: java/src/org/openqa/selenium/UnexpectedAlertBehaviour.java
Patch:
@@ -24,7 +24,7 @@ public enum UnexpectedAlertBehaviour {
   DISMISS_AND_NOTIFY("dismiss and notify"),
   IGNORE("ignore");
 
-  private String text;
+  private final String text;
 
   UnexpectedAlertBehaviour(String text) {
     this.text = text;

File: java/src/org/openqa/selenium/devtools/noop/NoOpDomains.java
Patch:
@@ -28,7 +28,7 @@
 
 public class NoOpDomains implements Domains {
 
-  private static BuildInfo INFO = new BuildInfo();
+  private static final BuildInfo INFO = new BuildInfo();
 
   private static final String WARNING =
       String.format(

File: java/src/org/openqa/selenium/events/zeromq/UnboundZmqEventBus.java
Patch:
@@ -68,7 +68,7 @@ class UnboundZmqEventBus implements EventBus {
   private final Map<EventName, List<Consumer<Event>>> listeners = new ConcurrentHashMap<>();
   private final Queue<UUID> recentMessages = EvictingQueue.create(128);
   private final String encodedSecret;
-  private ZMQ.Poller poller;
+  private final ZMQ.Poller poller;
 
   private ZMQ.Socket pub;
   private ZMQ.Socket sub;

File: java/src/org/openqa/selenium/firefox/FirefoxBinary.java
Patch:
@@ -54,7 +54,7 @@ public enum Channel {
     DEV("dev"),
     NIGHTLY("nightly");
 
-    private String name;
+    private final String name;
 
     Channel(String name) {
       this.name = name;

File: java/src/org/openqa/selenium/firefox/FirefoxCommandContext.java
Patch:
@@ -24,7 +24,7 @@ public enum FirefoxCommandContext {
   CONTENT("content"),
   CHROME("chrome");
 
-  private String text;
+  private final String text;
 
   FirefoxCommandContext(String text) {
     this.text = text;

File: java/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -91,7 +91,7 @@ public class FirefoxDriver extends RemoteWebDriver
   private final Optional<URI> biDiUri;
   private Connection connection;
   private DevTools devTools;
-  private Optional<BiDi> biDi;
+  private final Optional<BiDi> biDi;
 
   /**
    * Creates a new FirefoxDriver using the {@link GeckoDriverService#createDefaultService)} server

File: java/src/org/openqa/selenium/firefox/Preferences.java
Patch:
@@ -56,8 +56,8 @@ class Preferences {
   private static final Pattern PREFERENCE_PATTERN =
       Pattern.compile("user_pref\\(\"([^\"]+)\", (\"?.+?\"?)\\);");
 
-  private Map<String, Object> immutablePrefs = new HashMap<>();
-  private Map<String, Object> allPrefs = new HashMap<>();
+  private final Map<String, Object> immutablePrefs = new HashMap<>();
+  private final Map<String, Object> allPrefs = new HashMap<>();
 
   public Preferences() {}
 

File: java/src/org/openqa/selenium/firefox/ProfilesIni.java
Patch:
@@ -34,7 +34,7 @@
 import org.openqa.selenium.io.TemporaryFilesystem;
 
 public class ProfilesIni {
-  private Map<String, File> profiles;
+  private final Map<String, File> profiles;
 
   public ProfilesIni() {
     File appData = locateAppDataDirectory(Platform.getCurrent());

File: java/src/org/openqa/selenium/ie/ElementScrollBehavior.java
Patch:
@@ -22,7 +22,7 @@ public enum ElementScrollBehavior {
   BOTTOM(1),
   ;
 
-  private int value;
+  private final int value;
 
   ElementScrollBehavior(int value) {
     this.value = value;

File: java/src/org/openqa/selenium/json/JsonInput.java
Patch:
@@ -40,7 +40,7 @@ public class JsonInput implements Closeable {
 
   private final Reader source;
   // FIXME: This flag is never set
-  private volatile boolean readPerformed = false;
+  private final boolean readPerformed = false;
   private JsonTypeCoercer coercer;
   private PropertySetting setter;
   private final Input input;

File: java/src/org/openqa/selenium/logging/CompositeLocalLogs.java
Patch:
@@ -28,8 +28,8 @@
  * LocalLogs instance.
  */
 class CompositeLocalLogs extends LocalLogs {
-  private LocalLogs predefinedTypeLogger;
-  private LocalLogs allTypesLogger;
+  private final LocalLogs predefinedTypeLogger;
+  private final LocalLogs allTypesLogger;
 
   protected CompositeLocalLogs(LocalLogs predefinedTypeLogger, LocalLogs allTypesLogger) {
     super();

File: java/src/org/openqa/selenium/netty/server/MessageInboundConverter.java
Patch:
@@ -46,8 +46,8 @@ private enum Continuation {
   private static final Logger LOG = Logger.getLogger(MessageInboundConverter.class.getName());
 
   private Continuation next;
-  private StringBuilder builder;
-  private ByteArrayOutputStream buffer;
+  private final StringBuilder builder;
+  private final ByteArrayOutputStream buffer;
 
   public MessageInboundConverter() {
     next = Continuation.None;

File: java/src/org/openqa/selenium/os/OsProcess.java
Patch:
@@ -54,7 +54,8 @@ class OsProcess {
   private final Executor executor = new DaemonExecutor();
 
   private volatile OutputStream drainTo;
-  private SeleniumWatchDog executeWatchdog = new SeleniumWatchDog(ExecuteWatchdog.INFINITE_TIMEOUT);
+  private final SeleniumWatchDog executeWatchdog =
+      new SeleniumWatchDog(ExecuteWatchdog.INFINITE_TIMEOUT);
   private PumpStreamHandler streamHandler;
 
   private final org.apache.commons.exec.CommandLine cl;

File: java/src/org/openqa/selenium/remote/ErrorHandler.java
Patch:
@@ -45,7 +45,7 @@ public class ErrorHandler {
   private static final String UNKNOWN_METHOD = "<anonymous method>";
   private static final String UNKNOWN_FILE = null;
 
-  private ErrorCodes errorCodes;
+  private final ErrorCodes errorCodes;
 
   private boolean includeServerErrors;
 

File: java/src/org/openqa/selenium/remote/http/Contents.java
Patch:
@@ -157,7 +157,7 @@ private static final class MemoizedSupplier implements Supplier<InputStream> {
 
     private volatile boolean initialized;
     private volatile FileBackedOutputStream fos;
-    private Supplier<InputStream> delegate;
+    private final Supplier<InputStream> delegate;
 
     private MemoizedSupplier(Supplier<InputStream> delegate) {
       this.delegate = delegate;

File: java/src/org/openqa/selenium/support/ByIdOrName.java
Patch:
@@ -29,9 +29,9 @@ public class ByIdOrName extends By implements Serializable {
 
   private static final long serialVersionUID = 3986638402799576701L;
 
-  private By idFinder;
-  private By nameFinder;
-  private String idOrName;
+  private final By idFinder;
+  private final By nameFinder;
+  private final String idOrName;
 
   public ByIdOrName(String idOrName) {
     this.idOrName = idOrName;

File: java/src/org/openqa/selenium/support/pagefactory/ByAll.java
Patch:
@@ -40,7 +40,7 @@ public class ByAll extends By implements Serializable {
 
   private static final long serialVersionUID = 4573668832699497306L;
 
-  private By[] bys;
+  private final By[] bys;
 
   public ByAll(By... bys) {
     this.bys = bys;

File: java/src/org/openqa/selenium/support/pagefactory/ByChained.java
Patch:
@@ -42,7 +42,7 @@ public class ByChained extends By implements Serializable {
 
   private static final long serialVersionUID = 1563769051170172451L;
 
-  private By[] bys;
+  private final By[] bys;
 
   public ByChained(By... bys) {
     this.bys = bys;

File: java/src/org/openqa/selenium/support/ui/FluentWait.java
Patch:
@@ -74,7 +74,7 @@ public class FluentWait<T> implements Wait<T> {
   private Duration interval = DEFAULT_WAIT_DURATION;
   private Supplier<String> messageSupplier = () -> null;
 
-  private List<Class<? extends Throwable>> ignoredExceptions = new ArrayList<>();
+  private final List<Class<? extends Throwable>> ignoredExceptions = new ArrayList<>();
 
   /**
    * @param input The input value to pass to the evaluated conditions.

File: java/test/org/openqa/selenium/grid/web/ReverseProxyHandlerTest.java
Patch:
@@ -32,8 +32,8 @@
 import org.openqa.selenium.remote.tracing.Tracer;
 
 class ReverseProxyHandlerTest {
-  private Tracer tracer = DefaultTestTracer.createTracer();
-  private HttpClient.Factory factory = HttpClient.Factory.createDefault();
+  private final Tracer tracer = DefaultTestTracer.createTracer();
+  private final HttpClient.Factory factory = HttpClient.Factory.createDefault();
 
   @Test
   void shouldForwardRequestsToEndPoint()

File: java/test/org/openqa/selenium/json/JsonTest.java
Patch:
@@ -561,7 +561,7 @@ public void setBean(SimpleBean bean) {
   }
 
   public static class JsonAware {
-    private String convertedValue;
+    private final String convertedValue;
 
     public JsonAware(String convertedValue) {
       this.convertedValue = convertedValue;
@@ -573,7 +573,7 @@ public static JsonAware fromJson(String json) {
   }
 
   public static class PrivatelyAware {
-    private String convertedValue;
+    private final String convertedValue;
 
     public PrivatelyAware(String convertedValue) {
       this.convertedValue = convertedValue;

File: java/test/org/openqa/selenium/netty/server/SimpleHttpServer.java
Patch:
@@ -79,7 +79,8 @@ public class SimpleHttpServer implements Closeable {
 
   private final Channel channel;
 
-  private Map<Map.Entry<HttpMethod, String>, Function<HttpRequest, FullHttpResponse>> endpoints;
+  private final Map<Map.Entry<HttpMethod, String>, Function<HttpRequest, FullHttpResponse>>
+      endpoints;
 
   public SimpleHttpServer() throws InterruptedException, URISyntaxException {
     this(PortProber.findFreePort());

File: java/test/org/openqa/selenium/remote/ErrorCodecTest.java
Patch:
@@ -54,7 +54,7 @@
 @Tag("UnitTests")
 public class ErrorCodecTest {
 
-  private ErrorCodec errorCodec = ErrorCodec.createDefault();
+  private final ErrorCodec errorCodec = ErrorCodec.createDefault();
 
   @Test
   void encodeW3cSpecExceptions() {

File: java/test/org/openqa/selenium/support/ui/SlowLoadableComponentTest.java
Patch:
@@ -78,7 +78,7 @@ protected void isLoaded() throws Error {
 
   private static class SlowLoading extends SlowLoadableComponent<SlowLoading> {
 
-    private int counts;
+    private final int counts;
     private long loopCount;
 
     public SlowLoading(Clock clock, int timeOutInSeconds, int counts) {

File: java/test/org/openqa/selenium/testing/Safely.java
Patch:
@@ -55,7 +55,7 @@ public static void safelyCall(TearDownFixture... fixtures) {
     try {
       CompletableFuture.allOf(futures.toArray(new CompletableFuture[] {})).get(2, TimeUnit.MINUTES);
     } catch (TimeoutException ex) {
-      LOG.log(Level.WARNING, "tear down timed out");
+      LOG.log(Level.WARNING, "tear down timed out: {}", ex.toString());
     } catch (Exception ex) {
       LOG.log(Level.WARNING, "tear down failed", ex);
     }

File: java/test/org/openqa/selenium/testing/StaticResources.java
Patch:
@@ -28,7 +28,7 @@
 import org.openqa.selenium.build.InProject;
 
 class StaticResources {
-  private static Logger LOG = Logger.getLogger(StaticResources.class.getName());
+  private static final Logger LOG = Logger.getLogger(StaticResources.class.getName());
 
   static void ensureAvailable() {
     if (!isInDevMode()) {

File: java/test/org/openqa/selenium/testing/drivers/RemoteSupplier.java
Patch:
@@ -28,9 +28,9 @@
 
 class RemoteSupplier implements Supplier<WebDriver> {
 
-  private static OutOfProcessSeleniumServer server = new OutOfProcessSeleniumServer();
+  private static final OutOfProcessSeleniumServer server = new OutOfProcessSeleniumServer();
   private static volatile boolean started;
-  private Capabilities desiredCapabilities;
+  private final Capabilities desiredCapabilities;
 
   public RemoteSupplier(Capabilities desiredCapabilities) {
     this.desiredCapabilities = desiredCapabilities;

File: java/test/org/openqa/selenium/testing/drivers/TestInternetExplorerSupplier.java
Patch:
@@ -22,7 +22,7 @@
 import org.openqa.selenium.WebDriver;
 
 class TestInternetExplorerSupplier implements Supplier<WebDriver> {
-  private Capabilities caps;
+  private final Capabilities caps;
 
   public TestInternetExplorerSupplier(Capabilities caps) {
     this.caps = caps;

File: java/src/org/openqa/selenium/manager/SeleniumManager.java
Patch:
@@ -97,6 +97,8 @@ private SeleniumManager() {
                       }
                     }
                   }));
+    } else {
+      LOG.fine(String.format("Selenium Manager set by env 'SE_MANAGER_PATH': %s", managerPath));
     }
   }
 

File: java/src/org/openqa/selenium/bidi/browsingcontext/BrowsingContext.java
Patch:
@@ -227,7 +227,7 @@ public String captureBoxScreenshot(double x, double y, double width, double heig
                 id,
                 "clip",
                 Map.of(
-                    "type", "viewport",
+                    "type", "box",
                     "x", x,
                     "y", y,
                     "width", width,

File: java/src/org/openqa/selenium/remote/tracing/AttributeKey.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.remote.tracing;
 
-import io.opentelemetry.semconv.trace.attributes.SemanticAttributes;
+import io.opentelemetry.semconv.SemanticAttributes;
 
 public enum AttributeKey {
   EXCEPTION_EVENT(SemanticAttributes.EXCEPTION_EVENT_NAME),

File: java/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -54,6 +54,7 @@
 import org.openqa.selenium.interactions.MoveTargetOutOfBoundsException;
 
 /** Defines common error codes for the wire protocol. */
+@Deprecated(forRemoval = true)
 public class ErrorCodes {
 
   public static final String SUCCESS_STRING = "success";

File: java/src/org/openqa/selenium/grid/Bootstrap.java
Patch:
@@ -76,7 +76,7 @@ private static void runMain(ClassLoader loader, String[] args) {
       Method main = clazz.getMethod("main", String[].class);
       main.invoke(null, new Object[] {args});
     } catch (ReflectiveOperationException e) {
-      e.printStackTrace();
+      LOG.severe("Error during execution: " + e.getMessage());
       System.exit(1);
     }
   }

File: java/test/org/openqa/selenium/grid/distributor/local/LocalDistributorTest.java
Patch:
@@ -43,6 +43,7 @@
 import java.util.concurrent.Executors;
 import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
+import java.util.logging.Logger;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
@@ -81,6 +82,7 @@
 
 class LocalDistributorTest {
 
+  private static final Logger LOG = Logger.getLogger(LocalDistributorTest.class.getName());
   private final Secret registrationSecret = new Secret("bavarian smoked");
   private static final int newSessionThreadPoolSize = Runtime.getRuntime().availableProcessors();
   private Tracer tracer;
@@ -421,7 +423,7 @@ void slowStartingNodesShouldNotCauseReservationsToBeSerialized() {
                       try {
                         Thread.sleep(delay);
                       } catch (InterruptedException e) {
-                        e.printStackTrace();
+                        LOG.severe("Error during execution: " + e.getMessage());
                       }
                       return new Handler(c);
                     }))

File: java/src/org/openqa/selenium/bidi/network/RequestData.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import org.openqa.selenium.Cookie;
 import org.openqa.selenium.json.JsonInput;
 import org.openqa.selenium.json.TypeToken;
 
@@ -32,7 +31,6 @@ public class RequestData {
 
   private final List<Header> headers;
 
-  // TODO: add from json method there
   private final List<Cookie> cookies;
 
   private final long headersSize;

File: java/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -838,6 +838,9 @@ private Session createExternalSession(
   private URI rewrite(String path) {
     try {
       String scheme = "https".equals(gridUri.getScheme()) ? "wss" : "ws";
+      if (gridUri.getPath() != null && !gridUri.getPath().isEmpty()) {
+        path = gridUri.getPath() + path;
+      }
       return new URI(
           scheme, gridUri.getUserInfo(), gridUri.getHost(), gridUri.getPort(), path, null, null);
     } catch (URISyntaxException e) {

File: java/src/org/openqa/selenium/chromium/AddHasNetworkConditions.java
Patch:
@@ -82,7 +82,7 @@ public ChromiumNetworkConditions getNetworkConditions() {
         networkConditions.setDownloadThroughput(
             ((Number) result.getOrDefault(ChromiumNetworkConditions.DOWNLOAD_THROUGHPUT, -1))
                 .intValue());
-        networkConditions.setDownloadThroughput(
+        networkConditions.setUploadThroughput(
             ((Number) result.getOrDefault(ChromiumNetworkConditions.UPLOAD_THROUGHPUT, -1))
                 .intValue());
         return networkConditions;

File: java/test/org/openqa/selenium/devtools/DevToolsReuseTest.java
Patch:
@@ -19,15 +19,13 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.remote.Augmenter;
 
 class DevToolsReuseTest extends DevToolsTestBase {
 
   @Test
-  @Disabled("JDK HTTP Client cannot get reused")
   public void shouldBeAbleToCloseDevToolsAndCreateNewInstance() {
     WebDriver driver = new Augmenter().augment(this.driver);
 

File: java/src/org/openqa/selenium/grid/router/ProxyWebsocketsIntoGrid.java
Patch:
@@ -19,14 +19,14 @@
 
 import static org.openqa.selenium.remote.http.HttpMethod.GET;
 
+import java.net.URI;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.openqa.selenium.NoSuchSessionException;
-import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.sessionmap.SessionMap;
 import org.openqa.selenium.remote.HttpSessionId;
 import org.openqa.selenium.remote.SessionId;
@@ -62,10 +62,10 @@ public Optional<Consumer<Message>> apply(String uri, Consumer<Message> downstrea
     }
 
     try {
-      Session session = sessions.get(sessionId.get());
+      URI sessionUri = sessions.getUri(sessionId.get());
 
       HttpClient client =
-          clientFactory.createClient(ClientConfig.defaultConfig().baseUri(session.getUri()));
+          clientFactory.createClient(ClientConfig.defaultConfig().baseUri(sessionUri));
       WebSocket upstream =
           client.openSocket(new HttpRequest(GET, uri), new ForwardingListener(downstream));
 

File: java/src/org/openqa/selenium/grid/sessionmap/GetSessionUri.java
Patch:
@@ -20,6 +20,7 @@
 import static org.openqa.selenium.remote.http.Contents.asJson;
 
 import java.io.UncheckedIOException;
+import java.util.Map;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.remote.SessionId;
 import org.openqa.selenium.remote.http.HttpHandler;
@@ -37,6 +38,6 @@ class GetSessionUri implements HttpHandler {
 
   @Override
   public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
-    return new HttpResponse().setContent(asJson(sessionMap.getUri(sessionId)));
+    return new HttpResponse().setContent(asJson(Map.of("value", sessionMap.getUri(sessionId))));
   }
 }

File: java/src/org/openqa/selenium/bidi/script/Message.java
Patch:
@@ -34,6 +34,7 @@ public static Message fromJson(JsonInput input) {
     RemoteValue data = null;
     Source source = null;
 
+    input.beginObject();
     while (input.hasNext()) {
       switch (input.nextName()) {
         case "channel":

File: java/src/org/openqa/selenium/grid/data/DefaultSlotMatcher.java
Patch:
@@ -79,7 +79,9 @@ public boolean matches(Capabilities stereotype, Capabilities capabilities) {
         (capabilities.getBrowserName() == null || capabilities.getBrowserName().isEmpty())
             || Objects.equals(stereotype.getBrowserName(), capabilities.getBrowserName());
     boolean browserVersionMatch =
-        (capabilities.getBrowserVersion() == null || capabilities.getBrowserVersion().isEmpty())
+        (capabilities.getBrowserVersion() == null
+                || capabilities.getBrowserVersion().isEmpty()
+                || Objects.equals(capabilities.getBrowserVersion(), "stable"))
             || Objects.equals(stereotype.getBrowserVersion(), capabilities.getBrowserVersion());
     boolean platformNameMatch =
         capabilities.getPlatformName() == null

File: java/test/org/openqa/selenium/bidi/script/ScriptCommandsTest.java
Patch:
@@ -781,15 +781,15 @@ void canAddPreloadScriptWithChannelOptions() {
   @Test
   void canAddPreloadScriptInASandbox() {
     Script script = new Script(driver);
-    String id = script.addPreloadScript("() => { window.bar=2; }");
+    String id = script.addPreloadScript("() => { window.bar=2; }", "sandbox");
     assertThat(id).isNotNull();
     assertThat(id).isNotEmpty();
 
     driver.get(new Pages(server).blankPage);
 
     EvaluateResult result =
         script.evaluateFunctionInBrowsingContext(
-            driver.getWindowHandle(), "window.bar", true, Optional.empty());
+            driver.getWindowHandle(), "sandbox", "window.bar", true, Optional.empty());
     assertThat(result.getResultType()).isEqualTo(EvaluateResult.Type.SUCCESS);
     assertThat(((EvaluateResultSuccess) result).getResult().getValue().get()).isEqualTo(2L);
   }

File: java/src/org/openqa/selenium/bidi/Script.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.function.Function;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.bidi.script.EvaluateResult;
-import org.openqa.selenium.bidi.script.EvaluateResultException;
+import org.openqa.selenium.bidi.script.EvaluateResultExceptionValue;
 import org.openqa.selenium.bidi.script.EvaluateResultSuccess;
 import org.openqa.selenium.bidi.script.ExceptionDetails;
 import org.openqa.selenium.bidi.script.LocalValue;
@@ -183,7 +183,7 @@ private EvaluateResult createEvaluateResult(Map<String, Object> response) {
       }
 
       evaluateResult =
-          new EvaluateResultException(
+          new EvaluateResultExceptionValue(
               EvaluateResult.EvaluateResultType.EXCEPTION, realmId, exceptionDetails);
     }
 

File: java/src/org/openqa/selenium/bidi/script/EvaluateResultExceptionValue.java
Patch:
@@ -16,13 +16,13 @@
 
 package org.openqa.selenium.bidi.script;
 
-public class EvaluateResultException implements EvaluateResult {
+public class EvaluateResultExceptionValue implements EvaluateResult {
 
   private final EvaluateResultType type;
   private final String realmId;
   private final ExceptionDetails exceptionDetails;
 
-  public EvaluateResultException(
+  public EvaluateResultExceptionValue(
       EvaluateResultType type, String realmId, ExceptionDetails exceptionDetails) {
     this.type = type;
     this.realmId = realmId;

File: java/test/org/openqa/selenium/bidi/script/ScriptCommandsTest.java
Patch:
@@ -229,7 +229,7 @@ void canCallFunctionThatThrowsException() {
     assertThat(result.getResultType()).isEqualTo(EvaluateResult.EvaluateResultType.EXCEPTION);
     assertThat(result.getRealmId()).isNotNull();
 
-    EvaluateResultException exception = (EvaluateResultException) result;
+    EvaluateResultExceptionValue exception = (EvaluateResultExceptionValue) result;
     assertThat(exception.getExceptionDetails().getException().getType()).isEqualTo("error");
     assertThat(exception.getExceptionDetails().getText())
         .isEqualTo("SyntaxError: expected expression, got ')'");

File: java/src/org/openqa/selenium/bidi/script/EvaluateResultSuccess.java
Patch:
@@ -44,4 +44,4 @@ public String getRealmId() {
   public RemoteValue getResult() {
     return this.value;
   }
-}
\ No newline at end of file
+}

File: java/test/org/openqa/selenium/bidi/BiDiTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 import static org.openqa.selenium.testing.Safely.safelyCall;
-import static org.openqa.selenium.testing.drivers.Browser.CHROME;
 import static org.openqa.selenium.testing.drivers.Browser.EDGE;
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;

File: java/src/org/openqa/selenium/bidi/script/RegExpValue.java
Patch:
@@ -16,7 +16,6 @@
 // under the License
 package org.openqa.selenium.bidi.script;
 
-
 import java.util.Map;
 import java.util.TreeMap;
 import org.openqa.selenium.json.JsonInput;

File: java/src/org/openqa/selenium/bidi/script/RemoteReference.java
Patch:
@@ -40,6 +40,7 @@ public RemoteReference(RemoteReferenceType type, String value) {
     }
   }
 
+  @Override
   public Map<String, Object> asMap() {
     Map<String, String> toReturn = new TreeMap<>();
     if (handle != null) {

File: java/src/org/openqa/selenium/netty/server/WebSocketUpgradeHandler.java
Patch:
@@ -165,11 +165,11 @@ private void handleWebSocketFrame(ChannelHandlerContext ctx, WebSocketFrame fram
       ctx.fireChannelRead(close);
     } else if (frame instanceof PingWebSocketFrame) {
       ctx.write(new PongWebSocketFrame(frame.isFinalFragment(), frame.rsv(), frame.content()));
-    } else if (frame instanceof ContinuationWebSocketFrame) {
-      ctx.write(frame);
     } else if (frame instanceof PongWebSocketFrame) {
       frame.release();
-    } else if (frame instanceof BinaryWebSocketFrame || frame instanceof TextWebSocketFrame) {
+    } else if (frame instanceof BinaryWebSocketFrame
+        || frame instanceof TextWebSocketFrame
+        || frame instanceof ContinuationWebSocketFrame) {
       // Allow the rest of the pipeline to deal with this.
       ctx.fireChannelRead(frame);
     } else {

File: java/src/org/openqa/selenium/bidi/network/BaseParameters.java
Patch:
@@ -38,7 +38,7 @@ public class BaseParameters {
 
   private final List<String> intercepts;
 
-  private BaseParameters(
+  BaseParameters(
       String browsingContextId,
       boolean isBlocked,
       String navigation,

File: java/src/org/openqa/selenium/bidi/network/RequestData.java
Patch:
@@ -68,7 +68,7 @@ public static RequestData fromJson(JsonInput input) {
     input.beginObject();
     while (input.hasNext()) {
       switch (input.nextName()) {
-        case "requestId":
+        case "request":
           requestId = input.read(String.class);
           break;
         case "url":

File: java/src/org/openqa/selenium/grid/sessionqueue/NewSessionQueue.java
Patch:
@@ -111,7 +111,7 @@ private RequestId requestIdFrom(Map<String, String> params) {
 
   public abstract List<SessionRequest> getNextAvailable(Map<Capabilities, Long> stereotypes);
 
-  public abstract void complete(
+  public abstract boolean complete(
       RequestId reqId, Either<SessionNotCreatedException, CreateSessionResponse> result);
 
   public abstract int clearQueue();

File: java/src/org/openqa/selenium/grid/sessionqueue/remote/RemoteNewSessionQueue.java
Patch:
@@ -154,7 +154,7 @@ public List<SessionRequest> getNextAvailable(Map<Capabilities, Long> stereotypes
   }
 
   @Override
-  public void complete(
+  public boolean complete(
       RequestId reqId, Either<SessionNotCreatedException, CreateSessionResponse> result) {
     Require.nonNull("Request ID", reqId);
     Require.nonNull("Result", result);
@@ -171,7 +171,8 @@ public void complete(
     }
 
     HttpTracing.inject(tracer, tracer.getCurrentContext(), upstream);
-    client.with(addSecret).execute(upstream);
+    HttpResponse response = client.with(addSecret).execute(upstream);
+    return Values.get(response, Boolean.class);
   }
 
   @Override

File: java/src/org/openqa/selenium/devtools/v116/v116Network.java
Patch:
@@ -196,7 +196,7 @@ protected Command<Void> continueRequest(RequestPaused pausedReq, HttpRequest req
 
     return Fetch.continueRequest(
         pausedReq.getRequestId(),
-        Optional.empty(),
+        Optional.of(req.getUri()),
         Optional.of(req.getMethod().toString()),
         Optional.of(Base64.getEncoder().encodeToString(bos.toByteArray())),
         Optional.of(headers),

File: java/src/org/openqa/selenium/devtools/v117/v117Network.java
Patch:
@@ -191,7 +191,7 @@ protected Command<Void> continueRequest(RequestPaused pausedReq, HttpRequest req
 
     return Fetch.continueRequest(
         pausedReq.getRequestId(),
-        Optional.empty(),
+        Optional.of(req.getUri()),
         Optional.of(req.getMethod().toString()),
         Optional.of(Base64.getEncoder().encodeToString(bos.toByteArray())),
         Optional.of(headers),

File: java/src/org/openqa/selenium/devtools/v118/v118Network.java
Patch:
@@ -191,7 +191,7 @@ protected Command<Void> continueRequest(RequestPaused pausedReq, HttpRequest req
 
     return Fetch.continueRequest(
         pausedReq.getRequestId(),
-        Optional.empty(),
+        Optional.of(req.getUri()),
         Optional.of(req.getMethod().toString()),
         Optional.of(Base64.getEncoder().encodeToString(bos.toByteArray())),
         Optional.of(headers),

File: java/src/org/openqa/selenium/devtools/v85/V85Network.java
Patch:
@@ -200,7 +200,7 @@ protected Command<Void> continueRequest(RequestPaused pausedReq, HttpRequest req
 
     return Fetch.continueRequest(
         pausedReq.getRequestId(),
-        Optional.empty(),
+        Optional.of(req.getUri()),
         Optional.of(req.getMethod().toString()),
         Optional.of(Base64.getEncoder().encodeToString(bos.toByteArray())),
         Optional.of(headers));

File: java/src/org/openqa/selenium/remote/http/ClientConfig.java
Patch:
@@ -39,7 +39,7 @@ public class ClientConfig {
   private final Proxy proxy;
   private final Credentials credentials;
   private final SSLContext sslContext;
-  private String version;
+  private final String version;
 
   protected ClientConfig(
       URI baseUri,

File: java/src/org/openqa/selenium/WebDriverException.java
Patch:
@@ -86,7 +86,7 @@ private String createMessage(String originalMessageString) {
             getBuildInformation().toString(),
             getSystemInformation(),
             getAdditionalInformation())
-        .filter(s -> !(s == null || s.equals("")))
+        .filter(s -> !(s == null || s.isEmpty()))
         .collect(Collectors.joining("\n"));
   }
 

File: java/src/org/openqa/selenium/WindowType.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium;
 
-/** Represents the type of a new browser window that may be created. */
+/** Represents the type of new browser window that may be created. */
 public enum WindowType {
   WINDOW("window"),
   TAB("tab"),

File: java/src/org/openqa/selenium/print/PageSize.java
Patch:
@@ -24,8 +24,8 @@ public class PageSize {
 
   public PageSize() {
     // Initialize with defaults. A4 paper size defaults in cms.
-    this.height = 21.59;
-    this.width = 27.94;
+    this.height = 27.94;
+    this.width = 21.59;
   }
 
   public PageSize(double height, double width) {

File: java/src/org/openqa/selenium/remote/http/HttpClient.java
Patch:
@@ -71,7 +71,7 @@ static Factory create(String name) {
      * <p>{@see create}
      */
     static Factory createDefault() {
-      return create(System.getProperty("webdriver.http.factory", "netty"));
+      return create(System.getProperty("webdriver.http.factory", "jdk-http-client"));
     }
 
     /**

File: java/test/org/openqa/selenium/chrome/ChromeOptionsTest.java
Patch:
@@ -147,7 +147,7 @@ void mergingOptionsMergesArguments() {
         .asInstanceOf(MAP)
         .extractingByKey("args")
         .asInstanceOf(LIST)
-        .containsExactly("--remote-allow-origins=*", "verbose", "silent");
+        .containsExactly("verbose", "silent");
   }
 
   @Test
@@ -263,7 +263,7 @@ void mergingOptionsWithMutableCapabilities() {
         .asInstanceOf(MAP)
         .extractingByKey("args")
         .asInstanceOf(LIST)
-        .containsExactly("--remote-allow-origins=*", "verbose", "silent");
+        .containsExactly("verbose", "silent");
 
     assertThat(map)
         .asInstanceOf(MAP)
@@ -328,7 +328,7 @@ void mergingOptionsWithOptionsAsMutableCapabilities() {
         .asInstanceOf(MAP)
         .extractingByKey("args")
         .asInstanceOf(LIST)
-        .containsExactly("--remote-allow-origins=*", "verbose", "silent");
+        .containsExactly("verbose", "silent");
 
     assertThat(map).asInstanceOf(MAP).containsEntry("opt1", "val1");
 

File: java/test/org/openqa/selenium/devtools/DevToolsReuseTest.java
Patch:
@@ -19,13 +19,15 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.remote.Augmenter;
 
 class DevToolsReuseTest extends DevToolsTestBase {
 
   @Test
+  @Disabled("JDK HTTP Client cannot get reused")
   public void shouldBeAbleToCloseDevToolsAndCreateNewInstance() {
     WebDriver driver = new Augmenter().augment(this.driver);
 

File: java/test/org/openqa/selenium/remote/http/RetryRequestTest.java
Patch:
@@ -44,7 +44,6 @@
 import org.openqa.selenium.TimeoutException;
 import org.openqa.selenium.environment.webserver.AppServer;
 import org.openqa.selenium.environment.webserver.NettyAppServer;
-import org.openqa.selenium.remote.http.netty.NettyClient;
 
 class RetryRequestTest {
 
@@ -58,7 +57,7 @@ public void setUp() throws MalformedURLException {
             .baseUrl(URI.create("http://localhost:2345").toURL())
             .withRetries()
             .readTimeout(Duration.ofSeconds(1));
-    client = new NettyClient.Factory().createClient(config);
+    client = HttpClient.Factory.createDefault().createClient(config);
   }
 
   @Test

File: java/src/org/openqa/selenium/devtools/CdpVersionFinder.java
Patch:
@@ -146,8 +146,9 @@ private Optional<CdpInfo> findNearestMatch(int version) {
     } else {
       LOG.log(
           Level.WARNING,
-          "Unable to find an exact match for CDP version {0}, so returning the closest version"
-              + " found: {1}",
+          "Unable to find an exact match for CDP version {0}, returning the closest version; "
+              + "found: {1}; "
+              + "Please update to a Selenium version that supports CDP version {0}",
           new Object[] {version, nearestMatch.getMajorVersion()});
     }
 

File: java/src/org/openqa/selenium/manager/SeleniumManager.java
Patch:
@@ -180,7 +180,8 @@ private synchronized Path getBinary() {
         throw new WebDriverException("Unable to obtain Selenium Manager Binary", e);
       }
     } else if (!Files.exists(binary)) {
-      throw new WebDriverException(String.format("Unable to obtain Selenium Manager Binary at: %s", binary));
+      throw new WebDriverException(
+          String.format("Unable to obtain Selenium Manager Binary at: %s", binary));
     }
     binary.toFile().setExecutable(true);
 

File: java/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -63,7 +63,6 @@ public void testDocumentShouldReflectLatestDom() {
   }
 
   @Test
-  @NotWorkingInRemoteBazelBuilds(value = CHROME)
   void testShouldWaitForLoadsToCompleteAfterJavascriptCausesANewPageToLoad() {
     driver.get(pages.formPage);
 

File: java/test/org/openqa/selenium/virtualauthenticator/VirtualAuthenticatorTest.java
Patch:
@@ -316,8 +316,8 @@ void testGetCredentials() {
     assertThat(credential2.isResidentCredential()).isFalse();
     assertThat(credential2.getPrivateKey()).isNotNull();
     // Non resident keys do not store raw RP IDs or user handles.
-    assertThat(credential2.getRpId()).isNull();
-    assertThat(credential2.getUserHandle()).isNull();
+    assertThat(credential2.getRpId()).isEqualTo("localhost");
+    assertThat(credential2.getUserHandle()).isNotNull();
     assertThat(credential2.getSignCount()).isEqualTo(1);
   }
 

File: java/src/org/openqa/selenium/devtools/v117/v117Javascript.java
Patch:
@@ -65,7 +65,8 @@ protected Command<Void> disablePage() {
 
   @Override
   protected Command<ScriptIdentifier> addScriptToEvaluateOnNewDocument(String script) {
-    return Page.addScriptToEvaluateOnNewDocument(script, Optional.empty(), Optional.empty(), Optional.empty());
+    return Page.addScriptToEvaluateOnNewDocument(
+        script, Optional.empty(), Optional.empty(), Optional.empty());
   }
 
   @Override

File: java/src/org/openqa/selenium/devtools/v117/v117Log.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.openqa.selenium.devtools.v117;
 
+import java.util.function.Function;
+import java.util.logging.Level;
 import org.openqa.selenium.devtools.Command;
 import org.openqa.selenium.devtools.ConverterFunctions;
 import org.openqa.selenium.devtools.Event;
@@ -25,9 +27,6 @@
 import org.openqa.selenium.devtools.v117.runtime.model.Timestamp;
 import org.openqa.selenium.json.JsonInput;
 
-import java.util.function.Function;
-import java.util.logging.Level;
-
 public class v117Log implements org.openqa.selenium.devtools.idealized.log.Log {
 
   @Override

File: java/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -452,7 +452,7 @@ protected OutputStream getLogOutput() {
     }
 
     protected void parseLogOutput(String logProperty) {
-      if (getLogFile() != null) {
+      if (getLogFile() != null || logOutputStream != null) {
         return;
       }
 

File: java/src/org/openqa/selenium/safari/SafariTechPreviewDriverService.java
Patch:
@@ -105,7 +105,7 @@ public File getDriverExecutable() {
   }
 
   @Override
-  protected Capabilities getDefaultDriverOptions() {
+  public Capabilities getDefaultDriverOptions() {
     return new SafariOptions().setUseTechnologyPreview(true);
   }
 

File: java/src/org/openqa/selenium/grid/node/config/DriverServiceSessionFactory.java
Patch:
@@ -187,7 +187,8 @@ public Either<WebDriverException, ActiveSession> apply(CreateSessionRequest sess
         if (platformName.isPresent()) {
           caps = setInitialCapabilityValue(caps, "platformName", platformName.get());
         }
-        if (browserVersion.isPresent()) {
+
+        if (caps.getBrowserVersion().isEmpty() && browserVersion.isPresent() && !browserVersion.get().isEmpty()) {
           caps = setInitialCapabilityValue(caps, "browserVersion", browserVersion.get());
         }
 

File: java/src/org/openqa/selenium/manager/SeleniumManager.java
Patch:
@@ -31,10 +31,12 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.openqa.selenium.Beta;
 import org.openqa.selenium.Capabilities;
+import org.openqa.selenium.MutableCapabilities;
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.Proxy;
 import org.openqa.selenium.WebDriverException;
@@ -256,6 +258,7 @@ public Result getDriverPath(Capabilities options, boolean offline) {
     if (!options.getBrowserVersion().isEmpty()) {
       arguments.add("--browser-version");
       arguments.add(options.getBrowserVersion());
+      ((MutableCapabilities) options).setCapability("browserVersion", Optional.empty());
     }
 
     String browserBinary = getBrowserBinary(options);

File: java/src/org/openqa/selenium/manager/SeleniumManager.java
Patch:
@@ -275,7 +275,7 @@ public Result getDriverPath(Capabilities options, boolean offline) {
       arguments.add("--offline");
     }
 
-    Proxy proxy = (Proxy) options.getCapability("proxy");
+    Proxy proxy = Proxy.extractFrom(options);
     if (proxy != null) {
       if (proxy.getSslProxy() != null) {
         arguments.add("--proxy");

File: java/src/org/openqa/selenium/remote/RemoteWebElement.java
Patch:
@@ -265,7 +265,7 @@ public int hashCode() {
     if (id != null) {
       return id.hashCode();
     }
-    return this.hashCode();
+    return super.hashCode();
   }
 
   /*

File: java/src/org/openqa/selenium/json/JsonOutput.java
Patch:
@@ -49,7 +49,7 @@
 /** */
 public class JsonOutput implements Closeable {
   private static final Logger LOG = Logger.getLogger(JsonOutput.class.getName());
-  static final int MAX_DEPTH = 10;
+  static final int MAX_DEPTH = 100;
 
   private static final Predicate<Class<?>> GSON_ELEMENT;
 

File: java/src/org/openqa/selenium/chrome/AddHasCasting.java
Patch:
@@ -29,6 +29,7 @@
 import org.openqa.selenium.remote.CommandInfo;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasCasting extends org.openqa.selenium.chromium.AddHasCasting {
 

File: java/src/org/openqa/selenium/chrome/AddHasCdp.java
Patch:
@@ -29,6 +29,7 @@
 import org.openqa.selenium.remote.CommandInfo;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasCdp extends org.openqa.selenium.chromium.AddHasCdp {
 

File: java/src/org/openqa/selenium/chrome/ChromeDriverService.java
Patch:
@@ -157,6 +157,7 @@ public static ChromeDriverService createDefaultService() {
   }
 
   /** Builder used to configure new {@link ChromeDriverService} instances. */
+  @SuppressWarnings({"rawtypes", "RedundantSuppression"})
   @AutoService(DriverService.Builder.class)
   public static class Builder
       extends DriverService.Builder<ChromeDriverService, ChromeDriverService.Builder> {

File: java/src/org/openqa/selenium/edge/AddHasCasting.java
Patch:
@@ -29,6 +29,7 @@
 import org.openqa.selenium.remote.CommandInfo;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasCasting extends org.openqa.selenium.chromium.AddHasCasting {
 

File: java/src/org/openqa/selenium/edge/AddHasCdp.java
Patch:
@@ -29,6 +29,7 @@
 import org.openqa.selenium.remote.CommandInfo;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasCdp extends org.openqa.selenium.chromium.AddHasCdp {
 

File: java/src/org/openqa/selenium/ie/InternetExplorerDriverService.java
Patch:
@@ -115,6 +115,7 @@ public static InternetExplorerDriverService createDefaultService() {
   }
 
   /** Builder used to configure new {@link InternetExplorerDriverService} instances. */
+  @SuppressWarnings({"rawtypes", "RedundantSuppression"})
   @AutoService(DriverService.Builder.class)
   public static class Builder
       extends DriverService.Builder<

File: java/src/org/openqa/selenium/bidi/BiDiProvider.java
Patch:
@@ -28,6 +28,7 @@
 import org.openqa.selenium.remote.http.ClientConfig;
 import org.openqa.selenium.remote.http.HttpClient;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService(AugmenterProvider.class)
 public class BiDiProvider implements AugmenterProvider<HasBiDi> {
 

File: java/src/org/openqa/selenium/chromium/AddHasLaunchApp.java
Patch:
@@ -31,6 +31,7 @@
 import org.openqa.selenium.remote.ExecuteMethod;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasLaunchApp implements AugmenterProvider<HasLaunchApp>, AdditionalHttpCommands {
 

File: java/src/org/openqa/selenium/chromium/AddHasNetworkConditions.java
Patch:
@@ -32,6 +32,7 @@
 import org.openqa.selenium.remote.ExecuteMethod;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasNetworkConditions
     implements AugmenterProvider<HasNetworkConditions>, AdditionalHttpCommands {

File: java/src/org/openqa/selenium/chromium/AddHasPermissions.java
Patch:
@@ -31,6 +31,7 @@
 import org.openqa.selenium.remote.ExecuteMethod;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasPermissions
     implements AugmenterProvider<HasPermissions>, AdditionalHttpCommands {

File: java/src/org/openqa/selenium/devtools/DevToolsProvider.java
Patch:
@@ -26,6 +26,7 @@
 import org.openqa.selenium.remote.AugmenterProvider;
 import org.openqa.selenium.remote.ExecuteMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService(AugmenterProvider.class)
 public class DevToolsProvider implements AugmenterProvider<HasDevTools> {
 

File: java/src/org/openqa/selenium/firefox/AddHasContext.java
Patch:
@@ -31,6 +31,7 @@
 import org.openqa.selenium.remote.ExecuteMethod;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasContext implements AugmenterProvider<HasContext>, AdditionalHttpCommands {
 

File: java/src/org/openqa/selenium/firefox/AddHasExtensions.java
Patch:
@@ -43,6 +43,7 @@
 import org.openqa.selenium.remote.ExecuteMethod;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasExtensions implements AugmenterProvider<HasExtensions>, AdditionalHttpCommands {
 

File: java/src/org/openqa/selenium/firefox/AddHasFullPageScreenshot.java
Patch:
@@ -32,6 +32,7 @@
 import org.openqa.selenium.remote.ExecuteMethod;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasFullPageScreenshot<X>
     implements AugmenterProvider<HasFullPageScreenshot>, AdditionalHttpCommands {

File: java/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -162,6 +162,7 @@ protected boolean hasShutdownEndpoint() {
   }
 
   /** Builder used to configure new {@link GeckoDriverService} instances. */
+  @SuppressWarnings({"rawtypes", "RedundantSuppression"})
   @AutoService(DriverService.Builder.class)
   public static class Builder
       extends FirefoxDriverService.Builder<GeckoDriverService, GeckoDriverService.Builder> {

File: java/src/org/openqa/selenium/safari/AddHasDebugger.java
Patch:
@@ -28,6 +28,7 @@
 import org.openqa.selenium.remote.ExecuteMethod;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasDebugger implements AugmenterProvider<HasDebugger>, AdditionalHttpCommands {
 

File: java/src/org/openqa/selenium/safari/AddHasPermissions.java
Patch:
@@ -28,6 +28,7 @@
 import org.openqa.selenium.remote.ExecuteMethod;
 import org.openqa.selenium.remote.http.HttpMethod;
 
+@SuppressWarnings({"rawtypes", "RedundantSuppression"})
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasPermissions
     implements AugmenterProvider<HasPermissions>, AdditionalHttpCommands {

File: java/src/org/openqa/selenium/safari/SafariDriverService.java
Patch:
@@ -128,6 +128,7 @@ protected void waitUntilAvailable() {
   }
 
   /** Builder used to configure new {@link SafariDriverService} instances. */
+  @SuppressWarnings({"rawtypes", "RedundantSuppression"})
   @AutoService(DriverService.Builder.class)
   public static class Builder
       extends DriverService.Builder<SafariDriverService, SafariDriverService.Builder> {

File: java/src/org/openqa/selenium/safari/SafariTechPreviewDriverService.java
Patch:
@@ -131,6 +131,7 @@ protected void waitUntilAvailable() {
   }
 
   /** Builder used to configure new {@link SafariTechPreviewDriverService} instances. */
+  @SuppressWarnings({"rawtypes", "RedundantSuppression"})
   @AutoService(DriverService.Builder.class)
   public static class Builder
       extends DriverService.Builder<

File: java/src/org/openqa/selenium/grid/node/Node.java
Patch:
@@ -165,6 +165,9 @@ protected Node(Tracer tracer, NodeId id, URI uri, Secret registrationSecret) {
             post("/session/{sessionId}/se/files")
                 .to(params -> new DownloadFile(this, sessionIdFrom(params)))
                 .with(spanDecorator("node.download_file")),
+            delete("/session/{sessionId}/se/files")
+                .to(params -> new DownloadFile(this, sessionIdFrom(params)))
+                .with(spanDecorator("node.download_file")),
             get("/se/grid/node/owner/{sessionId}")
                 .to(params -> new IsSessionOwner(this, sessionIdFrom(params)))
                 .with(spanDecorator("node.is_session_owner").andThen(requiresSecret)),

File: java/src/org/openqa/selenium/remote/service/DriverFinder.java
Patch:
@@ -21,7 +21,8 @@ public static Result getPath(DriverService service, Capabilities options, boolea
       try {
         result = SeleniumManager.getInstance().getDriverPath(options, offline);
       } catch (Exception e) {
-        throw new NoSuchDriverException(String.format("Unable to obtain: %s", options), e);
+        throw new NoSuchDriverException(
+            String.format("Unable to obtain: %s, error %s", options, e.getMessage()), e);
       }
     }
 

File: java/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java
Patch:
@@ -205,7 +205,7 @@ public LocalDistributor(
         NodeHeartBeatEvent.listener(
             nodeStatus -> {
               if (nodes.containsKey(nodeStatus.getNodeId())) {
-                model.touch(nodeStatus.getNodeId());
+                model.touch(nodeStatus);
               } else {
                 register(nodeStatus);
               }

File: java/test/org/openqa/selenium/environment/webserver/HandlersForTests.java
Patch:
@@ -55,8 +55,10 @@ public HandlersForTests(String hostname, int port, Path tempPageDir) {
                                 .addHeader("Content-Type", MediaType.HTML_UTF_8.toString())
                                 .setContent(Contents.string("<h1>authorized</h1>", UTF_8)))
                 .with(new BasicAuthenticationFilter("test", "test")),
+            Route.get("/.well-known/web-identity").to(WellKnownWebIdentityHandler::new),
             Route.get("/echo").to(EchoHandler::new),
             Route.get("/cookie").to(CookieHandler::new),
+            Route.post("/fedcm/id_assertion").to(FedCmIdAssertion::new),
             Route.get("/encoding").to(EncodingHandler::new),
             Route.matching(req -> req.getUri().startsWith("/generated/"))
                 .to(() -> new GeneratedJsTestHandler("/generated")),

File: java/src/org/openqa/selenium/remote/http/Contents.java
Patch:
@@ -136,6 +136,9 @@ public static <T> T fromJson(HttpMessage<?> message, Type typeOfT) {
   }
 
   public static Supplier<InputStream> memoize(Supplier<InputStream> delegate) {
+    if (delegate instanceof MemoizedSupplier) {
+      return delegate;
+    }
     return new MemoizedSupplier(delegate);
   }
 

File: java/src/org/openqa/selenium/internal/Debug.java
Patch:
@@ -23,8 +23,7 @@
 /** Used to provide information about whether Selenium is running under debug mode. */
 public class Debug {
 
-  private static boolean IS_DEBUG;
-
+  private static final boolean IS_DEBUG;
   static {
     boolean debugFlag =
         ManagementFactory.getRuntimeMXBean().getInputArguments().stream()

File: java/src/org/openqa/selenium/chromium/ChromiumDriver.java
Patch:
@@ -170,7 +170,7 @@ protected ChromiumDriver(
                               + " where the version (\"v86\") matches the version of the"
                               + " chromium-based browser you're using and the version number of the"
                               + " artifact is the same as Selenium's.",
-                          capabilities.getBrowserVersion(), new BuildInfo().getReleaseLabel()));
+                          originalCapabilities.getBrowserVersion(), new BuildInfo().getReleaseLabel()));
                   return new NoOpCdpInfo();
                 });
 

File: java/test/org/openqa/selenium/grid/node/CustomLocatorHandlerTest.java
Patch:
@@ -241,7 +241,7 @@ void shouldBeAbleToRootASearchWithinAnElement() {
 
     Node node = Mockito.mock(Node.class);
     when(node.executeWebDriverCommand(
-            argThat(matchesUri("/session/{sessionId}/element/{elementId}/element"))))
+            argThat(matchesUri("/session/{sessionId}/element/{elementId}/elements"))))
         .thenReturn(
             new HttpResponse()
                 .addHeader("Content-Type", Json.JSON_UTF_8)

File: java/src/org/openqa/selenium/grid/TemplateGridCommand.java
Patch:
@@ -52,7 +52,7 @@ public final Executable configure(PrintStream out, PrintStream err, String... ar
     allFlags.add(helpFlags);
     allFlags.add(configFlags);
 
-    StreamSupport.stream(ServiceLoader.load(HasRoles.class).spliterator(), true)
+    StreamSupport.stream(ServiceLoader.load(HasRoles.class).spliterator(), false)
         .filter(flags -> !Sets.intersection(getConfigurableRoles(), flags.getRoles()).isEmpty())
         .forEach(allFlags::add);
 

File: java/src/org/openqa/selenium/remote/Augmenter.java
Patch:
@@ -134,7 +134,7 @@ private Predicate<Capabilities> check(String capabilityName) {
   }
 
   /**
-   * Enhance the interfaces implemented by this instance of WebDriver iff that instance is a {@link
+   * Enhance the interfaces implemented by this instance of WebDriver if that instance is a {@link
    * org.openqa.selenium.remote.RemoteWebDriver}. The WebDriver that is returned may well be a
    * dynamic proxy. You cannot rely on the concrete implementing class to remain constant.
    *

File: java/src/org/openqa/selenium/edge/EdgeDriverService.java
Patch:
@@ -314,7 +314,7 @@ protected List<String> createArgs() {
 
       // Readable timestamp and append logs only work if a file is specified
       // Can only get readable logs via arguments; otherwise send service output as directed
-      if (getLogFile() != null && (readableTimestamp || appendLog)) {
+      if (getLogFile() != null) {
         args.add(String.format("--log-path=%s", getLogFile().getAbsolutePath()));
         if (readableTimestamp != null && readableTimestamp.equals(Boolean.TRUE)) {
           args.add("--readable-timestamp");

File: java/src/org/openqa/selenium/NoSuchShadowRootException.java
Patch:
@@ -17,6 +17,9 @@
 
 package org.openqa.selenium;
 
+/**
+ * Indicates that an element does not have a shadow root.
+ */
 public class NoSuchShadowRootException extends NotFoundException {
 
   public NoSuchShadowRootException(String message) {

File: java/test/org/openqa/selenium/testing/Pages.java
Patch:
@@ -66,6 +66,7 @@ public class Pages {
   public String richTextPage;
   public String selectableItemsPage;
   public String selectPage;
+  public String shadowRootPage;
   public String simpleTestPage;
   public String simpleXmlDocument;
   public String sleepingPage;
@@ -132,6 +133,7 @@ public Pages(AppServer appServer) {
     selectPage = appServer.whereIs("selectPage.html");
     simpleTestPage = appServer.whereIs("simpleTest.html");
     simpleXmlDocument = appServer.whereIs("simple.xml");
+    shadowRootPage = appServer.whereIs("shadowRootPage.html");
     sleepingPage = appServer.whereIs("sleep");
     slowIframes = appServer.whereIs("slow_loading_iframes.html");
     slowLoadingAlertPage = appServer.whereIs("slowLoadingAlert.html");

File: java/src/org/openqa/selenium/WebDriverException.java
Patch:
@@ -28,7 +28,8 @@ public class WebDriverException extends RuntimeException {
 
   public static final String SESSION_ID = "Session ID";
   public static final String DRIVER_INFO = "Driver info";
-  protected static final String BASE_SUPPORT_URL = "https://www.selenium.dev/documentation/webdriver/troubleshooting/errors";
+  protected static final String BASE_SUPPORT_URL =
+      "https://www.selenium.dev/documentation/webdriver/troubleshooting/errors";
 
   private final Map<String, String> extraInfo = new ConcurrentHashMap<>();
 

File: java/src/org/openqa/selenium/remote/NoSuchDriverException.java
Patch:
@@ -22,7 +22,8 @@
 import org.openqa.selenium.remote.service.DriverService;
 
 /**
- * Thrown by {@link org.openqa.selenium.remote.service.DriverFinder#getPath(DriverService, Capabilities)}.
+ * Thrown by {@link org.openqa.selenium.remote.service.DriverFinder#getPath(DriverService,
+ * Capabilities)}.
  */
 public class NoSuchDriverException extends WebDriverException {
 

File: java/src/org/openqa/selenium/remote/service/DriverFinder.java
Patch:
@@ -26,8 +26,7 @@ public static String getPath(DriverService service, Capabilities options) {
       try {
         exePath = SeleniumManager.getInstance().getDriverPath(options);
       } catch (Exception e) {
-        throw new NoSuchDriverException(String.format(
-          "Unable to obtain: %s", options), e);
+        throw new NoSuchDriverException(String.format("Unable to obtain: %s", options), e);
       }
     }
 
@@ -37,7 +36,8 @@ public static String getPath(DriverService service, Capabilities options) {
     } else if (!new File(exePath).exists()) {
       message = String.format("%s located at %s, but invalid", service.getDriverName(), exePath);
     } else if (!new File(exePath).canExecute()) {
-      message = String.format("%s located at %s, cannot be executed", service.getDriverName(), exePath);
+      message =
+          String.format("%s located at %s, cannot be executed", service.getDriverName(), exePath);
     } else {
       return exePath;
     }

File: java/test/org/openqa/selenium/testing/NotWorkingInRemoteBazelBuilds.java
Patch:
@@ -1,18 +1,16 @@
 package org.openqa.selenium.testing;
 
-import org.openqa.selenium.testing.drivers.Browser;
-
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Repeatable;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
+import org.openqa.selenium.testing.drivers.Browser;
 
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 @Repeatable(NotWorkingInRemoteBazelBuildsList.class)
 public @interface NotWorkingInRemoteBazelBuilds {
 
   Browser value() default Browser.ALL;
-
 }

File: java/src/org/openqa/selenium/InvalidSelectorException.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class InvalidSelectorException extends WebDriverException {
 
-  private static final String SUPPORT_URL = BASE_SUPPORT_URL + "#invalid_selector_exception";
+  private static final String SUPPORT_URL = BASE_SUPPORT_URL + "#invalid-selector-exception";
 
   public InvalidSelectorException(String reason) {
     super(reason);

File: java/src/org/openqa/selenium/NoSuchElementException.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class NoSuchElementException extends NotFoundException {
 
-  private static final String SUPPORT_URL = BASE_SUPPORT_URL + "#no_such_element";
+  private static final String SUPPORT_URL = BASE_SUPPORT_URL + "#no-such-element-exception";
 
   public NoSuchElementException(String reason) {
     super(reason);

File: java/src/org/openqa/selenium/StaleElementReferenceException.java
Patch:
@@ -23,7 +23,7 @@
  */
 public class StaleElementReferenceException extends WebDriverException {
 
-  private static final String SUPPORT_URL = BASE_SUPPORT_URL + "#stale_element_reference";
+  private static final String SUPPORT_URL = BASE_SUPPORT_URL + "#stale-element-reference-exception";
 
   public StaleElementReferenceException(String message) {
     super(message);

File: java/src/org/openqa/selenium/WebDriverException.java
Patch:
@@ -28,7 +28,7 @@ public class WebDriverException extends RuntimeException {
 
   public static final String SESSION_ID = "Session ID";
   public static final String DRIVER_INFO = "Driver info";
-  protected static final String BASE_SUPPORT_URL = "https://selenium.dev/exceptions/";
+  protected static final String BASE_SUPPORT_URL = "https://www.selenium.dev/documentation/webdriver/troubleshooting/errors";
 
   private final Map<String, String> extraInfo = new ConcurrentHashMap<>();
 

File: java/src/org/openqa/selenium/By.java
Patch:
@@ -101,7 +101,7 @@ public static By className(String className) {
 
   /**
    * Find elements via the driver's underlying W3C Selector engine. If the browser does not
-   * implement the Selector API, a best effort is made to emulate the API. In this case, we strive
+   * implement the Selector API, the best effort is made to emulate the API. In this case, we strive
    * for at least CSS2 support, but offer no guarantees.
    *
    * @param cssSelector CSS expression.

File: java/src/org/openqa/selenium/Capabilities.java
Patch:
@@ -71,7 +71,7 @@ default String getBrowserVersion() {
 
   /**
    * @param capabilityName The capability to check.
-   * @return Whether or not the value is not null and not false.
+   * @return Whether the value is not null and not false.
    * @see org.openqa.selenium.remote.CapabilityType
    */
   default boolean is(String capabilityName) {

File: java/src/org/openqa/selenium/grid/distributor/selector/DefaultSlotSelector.java
Patch:
@@ -39,7 +39,7 @@ public Set<SlotId> selectSlot(Capabilities capabilities, Set<NodeStatus> nodes)
     // First, filter the Nodes that support the required capabilities. Then, the filtered Nodes
     // get ordered in ascendant order by the number of browsers they support.
     // With this, Nodes with diverse configurations (supporting many browsers, e.g. Chrome,
-    // Firefox, Safari) are placed at the bottom so they have more availability when a session
+    // Firefox, Safari) are placed at the bottom, so they have more availability when a session
     // requests a browser supported only by a few Nodes (e.g. Safari only supported on macOS
     // Nodes).
     // After that, Nodes are ordered by their load, last session creation, and their id.

File: java/src/org/openqa/selenium/grid/graphql/SessionNotFoundException.java
Patch:
@@ -44,9 +44,7 @@ public SessionNotFoundException(String message, String sessionId) {
   @Override
   public Map<String, Object> getExtensions() {
     Map<String, Object> customAttributes = new LinkedHashMap<>();
-    if (sessionId.isPresent()) {
-      customAttributes.put("sessionId", sessionId.get());
-    }
+    sessionId.ifPresent(s -> customAttributes.put("sessionId", s));
     return customAttributes;
   }
 

File: java/src/org/openqa/selenium/interactions/Coordinates.java
Patch:
@@ -52,7 +52,7 @@ public interface Coordinates {
   /**
    * Gets coordinates on the element relative to the top-left corner of the page.
    *
-   * @return coordinates on the element relative to the top-left corner of the the page.
+   * @return coordinates on the element relative to the top-left corner of the page.
    */
   Point onPage();
 

File: java/src/org/openqa/selenium/internal/Debug.java
Patch:
@@ -20,7 +20,7 @@
 import java.lang.management.ManagementFactory;
 import java.util.logging.Level;
 
-/** Used to provide information about whether or not Selenium is running under debug mode. */
+/** Used to provide information about whether Selenium is running under debug mode. */
 public class Debug {
 
   private static boolean IS_DEBUG;

File: java/src/org/openqa/selenium/remote/CommandCodec.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Converts {@link Command} objects to and from another representation.
  *
- * @param <T> The type of an encoded command.
+ * @param <T> The type of encoded command.
  */
 public interface CommandCodec<T> {
 

File: java/src/org/openqa/selenium/remote/codec/AbstractHttpResponseCodec.java
Patch:
@@ -48,7 +48,7 @@ public abstract class AbstractHttpResponseCodec implements ResponseCodec<HttpRes
   private final Json json = new Json();
 
   /**
-   * Encodes the given response as a HTTP response message. This method is guaranteed not to throw.
+   * Encodes the given response as an HTTP response message. This method is guaranteed not to throw.
    *
    * @param response The response to encode.
    * @return The encoded response.

File: java/src/org/openqa/selenium/support/pagefactory/AbstractAnnotations.java
Patch:
@@ -27,15 +27,15 @@
 public abstract class AbstractAnnotations {
 
   /**
-   * Defines how to transform given object (field, class, etc) into {@link org.openqa.selenium.By}
+   * Defines how to transform given object (field, class, etc.) into {@link org.openqa.selenium.By}
    * class used by webdriver to locate elements.
    *
    * @return By object
    */
   public abstract By buildBy();
 
   /**
-   * Defines whether or not given element should be returned from cache on further calls.
+   * Defines whether given element should be returned from cache on further calls.
    *
    * @return boolean if lookup cached
    */

File: java/src/org/openqa/selenium/support/pagefactory/AjaxElementLocator.java
Patch:
@@ -118,15 +118,15 @@ protected long sleepFor() {
 
   /**
    * By default, elements are considered "found" if they are in the DOM. Override this method in
-   * order to change whether or not you consider the element loaded. For example, perhaps you need
+   * order to change whether you consider the element loaded. For example, perhaps you need
    * the element to be displayed:
    *
    * <pre>{@code
    * return element.isDisplayed();
    * }</pre>
    *
    * @param element The element to use
-   * @return Whether or not it meets your criteria for "found"
+   * @return Whether it meets your criteria for "found"
    */
   protected boolean isElementUsable(WebElement element) {
     return true;

File: java/src/org/openqa/selenium/support/pagefactory/DefaultFieldDecorator.java
Patch:
@@ -33,7 +33,7 @@
 import org.openqa.selenium.support.pagefactory.internal.LocatingElementListHandler;
 
 /**
- * Default decorator for use with PageFactory. Will decorate 1) all of the WebElement fields and 2)
+ * Default decorator for use with PageFactory. Will decorate 1) all the WebElement fields and 2)
  * List&lt;WebElement&gt; fields that have {@literal @FindBy}, {@literal @FindBys}, or
  * {@literal @FindAll} annotation with a proxy that locates the elements using the passed in
  * ElementLocatorFactory.

File: java/test/org/openqa/selenium/environment/webserver/CookieHandler.java
Patch:
@@ -49,7 +49,7 @@ class CookieHandler implements HttpHandler {
   public HttpResponse execute(HttpRequest request) throws UncheckedIOException {
     HttpResponse response = new HttpResponse();
     response.setHeader("Content-Type", "text/html");
-    // Dont Cache Anything  at the browser
+    // Don't Cache Anything  at the browser
     response.setHeader("Cache-Control", "no-cache");
     response.setHeader("Pragma", "no-cache");
     response.setHeader("Expires", EPOCH_START);

File: java/test/org/openqa/selenium/grid/node/local/CreateSessionTest.java
Patch:
@@ -84,7 +84,7 @@ void shouldAcceptAW3CPayload() throws URISyntaxException {
           json.toType(new String(sessionResponse.getDownstreamEncodedResponse(), UTF_8), MAP_TYPE);
 
       // Ensure that there's no status field (as this is used by the protocol handshake to determine
-      // whether the session is using the JWP or the W3C dialect.
+      // whether the session is using the JWP or the W3C dialect).
       assertThat(all.containsKey("status")).isFalse();
 
       // Now check the fields required by the spec
@@ -140,7 +140,7 @@ void shouldPreferUsingTheW3CProtocol() throws URISyntaxException {
           json.toType(new String(sessionResponse.getDownstreamEncodedResponse(), UTF_8), MAP_TYPE);
 
       // Ensure that there's no status field (as this is used by the protocol handshake to determine
-      // whether the session is using the JWP or the W3C dialect.
+      // whether the session is using the JWP or the W3C dialect).
       assertThat(all.containsKey("status")).isFalse();
 
       // Now check the fields required by the spec

File: java/test/org/openqa/selenium/support/pagefactory/AjaxElementLocatorTest.java
Patch:
@@ -94,7 +94,7 @@ void shouldThrowNoSuchElementExceptionIfElementTakesTooLongToAppear() throws Exc
 
     assertThatExceptionOfType(NoSuchElementException.class).isThrownBy(locator::findElement);
 
-    // Look ups:
+    // Look-ups:
     // 1. In "isLoaded"
     // 2. Immediately after call of load. (clock is 0)
     // 3. First sleep, then third call.   (clock is 1)

File: java/test/org/openqa/selenium/testing/SeleniumExtension.java
Patch:
@@ -140,8 +140,8 @@ public void afterEach(ExtensionContext context) throws Exception {
       throw new Exception(
           String.format(
               "%s.%s is marked as not yet implemented with %s but already works!",
-              testClass.isPresent() ? testClass.get().getName() : "",
-              testMethod.isPresent() ? testMethod.get().getName() : "",
+              testClass.map(Class::getName).orElse(""),
+              testMethod.map(Method::getName).orElse(""),
               current));
     }
   }

File: java/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -261,7 +261,7 @@ protected void loadSystemProperties() {
         }
       }
       if (logTruncate == null) {
-        logTruncate = Boolean.getBoolean(GECKO_DRIVER_LOG_LEVEL_PROPERTY);
+        logTruncate = !Boolean.getBoolean(GECKO_DRIVER_LOG_NO_TRUNCATE);
       }
       if (profileRoot == null) {
         String profileRootFromProperty = System.getProperty(GECKO_DRIVER_PROFILE_ROOT);
@@ -288,7 +288,7 @@ protected List<String> createArgs() {
         args.add("--log");
         args.add(logLevel.toString());
       }
-      if (logTruncate != null && logTruncate.equals(Boolean.TRUE)) {
+      if (logTruncate != null && logTruncate.equals(Boolean.FALSE)) {
         args.add("--log-no-truncate");
       }
       if (profileRoot != null) {

File: java/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -465,7 +465,9 @@ protected OutputStream getLogOutput(String logProperty) {
         }
 
         if (logLocation == null) {
-          return System.err;
+          LOG.info("Driver logs no longer sent to console by default; " +
+            "https://www.selenium.dev/documentation/webdriver/drivers/service/#setting-log-output");
+          return ByteStreams.nullOutputStream();
         }
 
         switch (logLocation) {

File: java/src/org/openqa/selenium/support/locators/RelativeLocator.java
Patch:
@@ -69,7 +69,7 @@ public class RelativeLocator {
 
   private static final Json JSON = new Json();
 
-  private static final int CLOSE_IN_PIXELS = 100;
+  private static final int CLOSE_IN_PIXELS = 50;
 
   /** Start of a relative locator, finding elements by tag name. */
   public static RelativeBy with(By by) {

File: java/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -533,6 +533,8 @@ private Capabilities setDownloadsDirectory(UUID uuid, Capabilities caps) {
               "download.prompt_for_download",
               false,
               "download.default_directory",
+              tempDir.getAbsolutePath(),
+              "savefile.default_directory",
               tempDir.getAbsolutePath());
       String optionsKey = Browser.CHROME.is(caps) ? "goog:chromeOptions" : "ms:edgeOptions";
       return appendPrefs(caps, optionsKey, map);

File: java/src/org/openqa/selenium/remote/ErrorHandler.java
Patch:
@@ -107,6 +107,7 @@ public Response throwIfResponseFailed(Response response, long duration) throws R
         try {
           rawErrorData = (Map<String, Object>) rawErrorData.get("value");
         } catch (ClassCastException cce) {
+          message = String.valueOf(cce);
         }
       }
       try {

File: java/src/org/openqa/selenium/grid/node/config/NodeOptions.java
Patch:
@@ -626,7 +626,7 @@ private int getDriverMaxSessions(WebDriverInfo info, int desiredMaxSessions) {
     return Math.min(info.getMaximumSimultaneousSessions(), desiredMaxSessions);
   }
 
-  private Capabilities enhanceStereotype(Capabilities capabilities) {
+  public Capabilities enhanceStereotype(Capabilities capabilities) {
     if (capabilities.getPlatformName() == null) {
       capabilities = new PersistentCapabilities(capabilities)
         .setCapability("platformName", CURRENT_PLATFORM);

File: java/src/org/openqa/selenium/grid/node/local/LocalNodeFactory.java
Patch:
@@ -83,7 +83,7 @@ public static Node create(Config config) {
       .forEach((caps, factories) -> factories.forEach(factory -> builder.add(caps, factory)));
 
     if (config.getAll("docker", "configs").isPresent()) {
-      new DockerOptions(config).getDockerSessionFactories(tracer, clientFactory, sessionTimeout)
+      new DockerOptions(config).getDockerSessionFactories(tracer, clientFactory, nodeOptions)
         .forEach((caps, factories) -> factories.forEach(factory -> builder.add(caps, factory)));
     }
 

File: java/src/org/openqa/selenium/grid/node/ProxyNodeWebsockets.java
Patch:
@@ -136,7 +136,7 @@ private Optional<Consumer<Message>> findBiDiEndpoint(Consumer<Message> downstrea
       URI uri = new URI(String.valueOf(caps.getCapability("webSocketUrl")));
       return Optional.of(uri).map(bidi -> createWsEndPoint(bidi, downstream));
     } catch (URISyntaxException e) {
-      LOG.warning("Unable to create URI from: " + caps.getCapability(""));
+      LOG.warning("Unable to create URI from: " + caps.getCapability("webSocketUrl"));
       return Optional.empty();
     }
   }

File: java/test/org/openqa/selenium/support/ui/WebDriverWaitTest.java
Patch:
@@ -77,7 +77,7 @@ void shouldIncludeRemoteInfoForWrappedDriverTimeout() throws IOException {
 
     assertThatExceptionOfType(TimeoutException.class)
       .isThrownBy(() -> wait.until(d -> false))
-      .withMessageContaining("Capabilities {platformName: ANY}")
+      .withMessageContaining("Capabilities {platformName: any}")
         .withMessageContaining("Session ID: foo");
   }
 

File: java/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -360,7 +360,9 @@ public static final class SystemProperty {
 
     /**
      * System property that defines the location of the file where Firefox log should be stored.
+     * @deprecated equivalent constant located at {@link GeckoDriverService#GECKO_DRIVER_LOG_PROPERTY}
      */
+    @Deprecated
     public static final String BROWSER_LOGFILE = "webdriver.firefox.logfile";
 
     /**

File: java/test/com/thoughtworks/selenium/BaseSuite.java
Patch:
@@ -47,7 +47,7 @@ public static void teardown() {
         InternalSelenseTestBase.destroyDriver();
         log.info("Browser stopped successfully.");
     } catch (SeleniumException e) {
-        log.error("Failed to stop browser: {}", e.getMessage());
+        log.severe("Failed to stop browser: " + e.getMessage());
     }
 
     // testEnvironment
@@ -56,7 +56,7 @@ public static void teardown() {
         GlobalTestEnvironment.stop();
         log.info("Test environment cleaned successfully.");
     } catch (Exception e) {
-        log.error("Failed to clean test environment: {}", e.getMessage());
+        log.severe("Failed to clean test environment: " + e.getMessage());
     }
 }
 

File: java/src/org/openqa/selenium/grid/node/SessionFactory.java
Patch:
@@ -29,4 +29,5 @@ public interface SessionFactory extends
   Function<CreateSessionRequest, Either<WebDriverException, ActiveSession>>,
   Predicate<Capabilities> {
 
+  Capabilities getStereotype();
 }

File: java/test/org/openqa/selenium/ElementDomPropertyTest.java
Patch:
@@ -91,7 +91,7 @@ public void testShouldGetClassPropertiesOfAnElement() {
     WebElement heading = driver.findElement(By.cssSelector(".nameA"));
     assertThat(heading.getDomProperty("class")).isNull();
     assertThat(heading.getDomProperty("className")).isEqualTo("nameA nameBnoise   nameC");
-    assertThat(heading.getDomProperty("classList")).isEqualTo("nameA nameBnoise   nameC");
+    assertThat(heading.getDomProperty("classList")).contains("nameA nameBnoise   nameC");
   }
 
   @Test
@@ -123,7 +123,6 @@ void testShouldGetNumericProperty() {
   }
 
   @Test
-  @NotYetImplemented(FIREFOX)
   public void testCanReturnATextApproximationOfTheStyleProperty() {
     driver.get(pages.javascriptPage);
     WebElement element = driver.findElement(By.id("red-item"));

File: java/src/org/openqa/selenium/chromium/ChromiumOptions.java
Patch:
@@ -119,7 +119,7 @@ public T addArguments(String... arguments) {
    * Adds additional command line arguments to be used when starting Chrome.
    * For example:
    * <pre><code>
-   *   options.setArguments(
+   *   options.addArguments(
    *       "load-extension=/path/to/unpacked_extension",
    *       "allow-outdated-plugins");
    * </code></pre>

File: java/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -552,7 +552,7 @@ protected Response execute(CommandPayload payload) {
       Object value = getElementConverter().apply(response.getValue());
       response.setValue(value);
     } catch (Throwable e) {
-      log(sessionId, command.getName(), command, When.EXCEPTION);
+      log(sessionId, command.getName(), e.getMessage(), When.EXCEPTION);
       WebDriverException toThrow;
       if (command.getName().equals(DriverCommand.NEW_SESSION)) {
         if (e instanceof SessionNotCreatedException) {
@@ -663,10 +663,10 @@ protected void log(SessionId sessionId, String commandName, Object toLog, When w
         logger.log(level, "Executing: " + commandName + " " + text);
         break;
       case AFTER:
-        logger.log(level, "Executed: " + text);
+        logger.log(level, "Executed: " + commandName + " " + text);
         break;
       case EXCEPTION:
-        logger.log(level, "Exception: " + text);
+        logger.log(level, "Exception: " + commandName + " " + text);
         break;
       default:
         logger.log(level, text);

File: java/test/org/openqa/selenium/grid/gridui/OverallGridTest.java
Patch:
@@ -81,7 +81,7 @@ public void tearDown() {
 
   @Test
   void shouldReportConcurrencyZeroPercentWhenGridIsStartedWithoutLoad() {
-    driver.get(whereIs(server, "/ui/index.html#/sessions"));
+    driver.get(whereIs(server, "/ui#/sessions"));
 
     WebElement concurrency = wait
       .until(visibilityOfElementLocated(By.cssSelector("div[data-testid='concurrency-usage']")));
@@ -91,7 +91,7 @@ void shouldReportConcurrencyZeroPercentWhenGridIsStartedWithoutLoad() {
 
   @Test
   void shouldShowOneNodeRegistered() {
-    driver.get(whereIs(server, "/ui/index.html#"));
+    driver.get(whereIs(server, "/ui"));
 
     List<WebElement> nodeInfoIcons = wait
       .until(visibilityOfAllElementsLocatedBy(By.cssSelector("button[data-testid*='node-info-']")));
@@ -102,7 +102,7 @@ void shouldShowOneNodeRegistered() {
   @Test
   void shouldIncrementSessionCountWhenSessionStarts() {
     remoteWebDriver = new RemoteWebDriver(server.getUrl(), Browser.detect().getCapabilities());
-    driver.get(whereIs(server, "/ui/index.html#/sessions"));
+    driver.get(whereIs(server, "/ui#/sessions"));
 
     wait.until(textToBe(By.cssSelector("div[data-testid='session-count']"), "1"));
   }

File: java/src/org/openqa/selenium/grid/node/config/SessionCapabilitiesMutator.java
Patch:
@@ -156,7 +156,7 @@ private Map<String, Object> mergeChromiumOptions(Map<String, Object> stereotypeO
         toReturn.put(name, value);
       }
 
-      if (!name.equals("extensions") && !name.equals("args")) {
+      if (!name.equals("binary") && !name.equals("extensions") && !name.equals("args")) {
         toReturn.put(name, value);
       }
     }

File: java/test/org/openqa/selenium/grid/node/config/SessionCapabilitiesMutatorTest.java
Patch:
@@ -194,7 +194,7 @@ void shouldMergeEdgeSpecificOptionsFromStereotypeAndCaps() {
 
     assertThat(modifiedCapabilities)
       .extractingByKey("ms:edgeOptions").asInstanceOf(MAP)
-      .extractingByKey("binary").isNull();
+      .extractingByKey("binary").isEqualTo("/path/to/binary");
   }
 
   @Test

File: java/src/org/openqa/selenium/grid/node/docker/DockerSession.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.docker.Container;
-import org.openqa.selenium.grid.node.ProtocolConvertingSession;
+import org.openqa.selenium.grid.node.DefaultActiveSession;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.remote.Dialect;
 import org.openqa.selenium.remote.SessionId;
@@ -35,7 +35,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-public class DockerSession extends ProtocolConvertingSession {
+public class DockerSession extends DefaultActiveSession {
 
   private static final Logger LOG = Logger.getLogger(DockerSession.class.getName());
   private final Container container;

File: java/src/org/openqa/selenium/grid/node/relay/RelaySessionFactory.java
Patch:
@@ -23,7 +23,7 @@
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.grid.data.CreateSessionRequest;
 import org.openqa.selenium.grid.node.ActiveSession;
-import org.openqa.selenium.grid.node.ProtocolConvertingSession;
+import org.openqa.selenium.grid.node.DefaultActiveSession;
 import org.openqa.selenium.grid.node.SessionFactory;
 import org.openqa.selenium.internal.Debug;
 import org.openqa.selenium.internal.Either;
@@ -172,7 +172,7 @@ public Either<WebDriverException, ActiveSession> apply(CreateSessionRequest sess
 
         span.addEvent("Relay service created session", attributeMap);
         LOG.fine(String.format("Created session: %s - %s", response.getSessionId(), capabilities));
-        return Either.right(new ProtocolConvertingSession(
+        return Either.right(new DefaultActiveSession(
           tracer,
           client,
           new SessionId(response.getSessionId()),

File: java/src/org/openqa/selenium/remote/RemoteWebElement.java
Patch:
@@ -412,7 +412,6 @@ public String toString() {
 
   public Map<String, Object> toJson() {
     return ImmutableMap.of(
-      Dialect.OSS.getEncodedElementKey(), getId(),
       Dialect.W3C.getEncodedElementKey(), getId());
   }
 }

File: java/src/org/openqa/selenium/remote/codec/AbstractHttpCommandCodec.java
Patch:
@@ -255,7 +255,6 @@ public HttpRequest encode(Command command) {
     HttpRequest request = new HttpRequest(spec.method, uri);
 
     if (HttpMethod.POST == spec.method) {
-
       String content = json.toJson(parameters);
       byte[] data = content.getBytes(UTF_8);
 

File: java/src/org/openqa/selenium/remote/codec/w3c/W3CHttpCommandCodec.java
Patch:
@@ -100,8 +100,6 @@
  */
 public class W3CHttpCommandCodec extends AbstractHttpCommandCodec {
 
-  private final PointerInput mouse = new PointerInput(PointerInput.Kind.MOUSE, "mouse");
-
   public W3CHttpCommandCodec() {
     String sessionId = "/session/:sessionId";
 

File: java/src/org/openqa/selenium/remote/internal/WebElementToJsonConverter.java
Patch:
@@ -23,7 +23,6 @@
 import org.openqa.selenium.remote.RemoteWebElement;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
@@ -54,7 +53,6 @@ public Object apply(Object arg) {
 
     if (arg instanceof RemoteWebElement) {
       return ImmutableMap.of(
-        Dialect.OSS.getEncodedElementKey(), ((RemoteWebElement) arg).getId(),
         Dialect.W3C.getEncodedElementKey(), ((RemoteWebElement) arg).getId());
     }
 
@@ -84,7 +82,7 @@ public Object apply(Object arg) {
     throw new IllegalArgumentException(
         "Argument is of an illegal type: " + arg.getClass().getName());
   }
-  
+
   private static List<Object> arrayToList(Object array) {
     List<Object> list = new ArrayList<>();
     for (int i = 0; i < Array.getLength(array); i++) {

File: java/src/org/openqa/selenium/remote/server/InMemorySession.java
Patch:
@@ -93,7 +93,7 @@ public SessionId getId() {
 
   @Override
   public Dialect getUpstreamDialect() {
-    return Dialect.OSS;
+    return Dialect.W3C;
   }
 
   @Override
@@ -149,8 +149,8 @@ public Optional<ActiveSession> apply(CreateSessionRequest sessionRequest) {
 
         // Prefer the OSS dialect.
         Set<Dialect> downstreamDialects = sessionRequest.getDownstreamDialects();
-        Dialect downstream = downstreamDialects.contains(Dialect.OSS) || downstreamDialects.isEmpty() ?
-                             Dialect.OSS :
+        Dialect downstream = downstreamDialects.contains(Dialect.W3C) || downstreamDialects.isEmpty() ?
+                             Dialect.W3C :
                              downstreamDialects.iterator().next();
         return Optional.of(
             new InMemorySession(driver, sessionRequest.getDesiredCapabilities(), downstream));

File: java/test/org/openqa/selenium/UnexpectedAlertBehaviorTest.java
Patch:
@@ -20,7 +20,7 @@
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.openqa.selenium.UnexpectedAlertBehaviour.IGNORE;
 import static org.openqa.selenium.WaitingConditions.elementTextToEqual;
-import static org.openqa.selenium.remote.CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR;
+import static org.openqa.selenium.remote.CapabilityType.UNHANDLED_PROMPT_BEHAVIOUR;
 import static org.openqa.selenium.testing.drivers.Browser.CHROME;
 import static org.openqa.selenium.testing.drivers.Browser.EDGE;
 import static org.openqa.selenium.testing.drivers.Browser.HTMLUNIT;
@@ -39,7 +39,7 @@
 class UnexpectedAlertBehaviorTest extends JupiterTestBase {
 
   @Test
-  @Ignore(value = CHROME, reason = "Legacy behaviour, not W3C conformant")
+  @Ignore(value = CHROME, reason = "Legacy behaviour, not W3C conformance")
   @Ignore(value = EDGE, reason = "Legacy behaviour, not W3C conformant")
   @Ignore(value = HTMLUNIT, reason = "Legacy behaviour, not W3C conformant")
   @NoDriverBeforeTest
@@ -98,7 +98,7 @@ private void runScenarioWithUnhandledAlert(
       boolean silently) {
     Capabilities caps = behaviour == null
                         ? new ImmutableCapabilities()
-                        : new ImmutableCapabilities(UNEXPECTED_ALERT_BEHAVIOUR, behaviour);
+                        : new ImmutableCapabilities(UNHANDLED_PROMPT_BEHAVIOUR, behaviour);
     createNewDriver(caps);
 
     driver.get(pages.alertsPage);

File: java/test/org/openqa/selenium/grid/graphql/GraphqlHandlerTest.java
Patch:
@@ -76,7 +76,6 @@
 import static org.assertj.core.api.InstanceOfAssertFactories.LIST;
 import static org.assertj.core.api.InstanceOfAssertFactories.MAP;
 import static org.openqa.selenium.json.Json.MAP_TYPE;
-import static org.openqa.selenium.remote.Dialect.OSS;
 import static org.openqa.selenium.remote.Dialect.W3C;
 import static org.openqa.selenium.remote.http.HttpMethod.GET;
 
@@ -112,7 +111,7 @@ public void setupGrid() {
     sessionRequest = new SessionRequest(
       new RequestId(UUID.randomUUID()),
       Instant.now(),
-      Set.of(OSS, W3C),
+      Set.of(W3C),
       Set.of(caps),
       Map.of(),
       Map.of());

File: java/test/org/openqa/selenium/grid/router/ReverseProxyEndToEndTest.java
Patch:
@@ -178,7 +178,7 @@ void success(Supplier<Deployment> values) {
     setFields(values);
 
     // The node added only has a single node. Make sure we can start and stop sessions.
-    Capabilities caps = new ImmutableCapabilities("browserName", "cheese", "type", "cheddar");
+    Capabilities caps = new ImmutableCapabilities("browserName", "cheese", "se:type", "cheddar");
     URL url = url(server);
     WebDriver driver = new RemoteWebDriver(url, caps);
     driver.get(gridUi(server));

File: java/test/org/openqa/selenium/grid/router/RouterTest.java
Patch:
@@ -73,7 +73,6 @@
 import static org.openqa.selenium.grid.data.Availability.DOWN;
 import static org.openqa.selenium.grid.data.Availability.UP;
 import static org.openqa.selenium.json.Json.MAP_TYPE;
-import static org.openqa.selenium.remote.Dialect.OSS;
 import static org.openqa.selenium.remote.Dialect.W3C;
 import static org.openqa.selenium.remote.http.HttpMethod.GET;
 
@@ -255,7 +254,7 @@ void ifNodesHaveSpareSlotsButAlreadyHaveMaxSessionsGridIsNotReady()
     SessionRequest sessionRequest = new SessionRequest(
       new RequestId(UUID.randomUUID()),
       Instant.now(),
-      ImmutableSet.of(OSS, W3C),
+      ImmutableSet.of(W3C),
       ImmutableSet.of(chromeCapabilities),
       ImmutableMap.of(),
       ImmutableMap.of());

File: java/src/org/openqa/selenium/grid/node/config/NodeFlags.java
Patch:
@@ -233,7 +233,7 @@ public class NodeFlags implements HasRoles {
     names = {"--enable-managed-downloads"},
     arity = 1,
     description = "When enabled, the Grid node will automatically do the following: " +
-                  "1. Creates a directory named '$HOME/.cache/selenium/downloads/' which "
+                  "1. Creates a temporary directory which "
                   + "will now represent the directory into which files downloaded by "
                   + "Chrome/Firefox/Edge browser will be under. " +
                   "2. For every new session, a sub-directory will be created/deleted so that "

File: java/test/org/openqa/selenium/chrome/ChromeOptionsTest.java
Patch:
@@ -143,7 +143,7 @@ void mergingOptionsMergesArguments() {
     assertThat(merged.asMap()).asInstanceOf(MAP)
       .extractingByKey(ChromeOptions.CAPABILITY).asInstanceOf(MAP)
       .extractingByKey("args").asInstanceOf(LIST)
-      .containsExactly("verbose", "silent");
+      .containsExactly("--remote-allow-origins=*", "verbose", "silent");
   }
 
   @Test
@@ -243,7 +243,7 @@ void mergingOptionsWithMutableCapabilities() {
     assertThat(map).asInstanceOf(MAP)
       .extractingByKey(ChromeOptions.CAPABILITY).asInstanceOf(MAP)
       .extractingByKey("args").asInstanceOf(LIST)
-      .containsExactly("verbose", "silent");
+      .containsExactly("--remote-allow-origins=*", "verbose", "silent");
 
     assertThat(map).asInstanceOf(MAP)
       .extractingByKey(ChromeOptions.CAPABILITY).asInstanceOf(MAP)
@@ -295,7 +295,7 @@ void mergingOptionsWithOptionsAsMutableCapabilities() {
     assertThat(map).asInstanceOf(MAP)
       .extractingByKey(ChromeOptions.CAPABILITY).asInstanceOf(MAP)
       .extractingByKey("args").asInstanceOf(LIST)
-      .containsExactly("verbose", "silent");
+      .containsExactly("--remote-allow-origins=*", "verbose", "silent");
 
     assertThat(map).asInstanceOf(MAP)
       .containsEntry("opt1", "val1");

File: java/test/org/openqa/selenium/grid/node/config/NodeOptionsTest.java
Patch:
@@ -467,7 +467,7 @@ void driversCanBeConfiguredWithASpecificArguments() {
     assertThat(reported.get(0).asMap()).asInstanceOf(MAP)
       .extractingByKey(ChromeOptions.CAPABILITY).asInstanceOf(MAP)
       .extractingByKey("args").asInstanceOf(LIST)
-      .containsExactly("--homepage=https://www.selenium.dev");
+      .containsAnyOf("--homepage=https://www.selenium.dev");
   }
 
   @Test

File: java/src/org/openqa/selenium/grid/node/local/LocalNodeFactory.java
Patch:
@@ -71,13 +71,12 @@ public static Node create(Config config) {
       .drainAfterSessionCount(nodeOptions.getDrainAfterSessionCount())
       .enableCdp(nodeOptions.isCdpEnabled())
       .enableBiDi(nodeOptions.isBiDiEnabled())
+      .enableManagedDownloads(nodeOptions.isManagedDownloadsEnabled())
       .heartbeatPeriod(nodeOptions.getHeartbeatPeriod());
 
     List<DriverService.Builder<?, ?>> builders = new ArrayList<>();
     ServiceLoader.load(DriverService.Builder.class).forEach(builders::add);
 
-    nodeOptions.getDownloadsPath().ifPresent(builder::downloadsPath);
-
     nodeOptions
       .getSessionFactories(
         caps -> createSessionFactory(tracer, clientFactory, sessionTimeout, builders, caps))

File: java/src/org/openqa/selenium/InvalidSelectorException.java
Patch:
@@ -25,7 +25,7 @@
  * errors, or a compound class name passed as an argument to By.className(),
  * or the expression does not select WebElements (e.g. "count(//input)").
  */
-public class InvalidSelectorException extends NoSuchElementException {
+public class InvalidSelectorException extends WebDriverException {
 
   private static final String SUPPORT_URL =
     BASE_SUPPORT_URL + "#invalid_selector_exception";

File: java/src/org/openqa/selenium/chrome/ChromeDriverInfo.java
Patch:
@@ -27,6 +27,7 @@
 import org.openqa.selenium.WebDriverInfo;
 import org.openqa.selenium.chromium.ChromiumDriverInfo;
 import org.openqa.selenium.remote.CapabilityType;
+import org.openqa.selenium.remote.service.DriverFinder;
 
 import java.util.Optional;
 
@@ -64,7 +65,7 @@ public boolean isSupportingBiDi() {
   @Override
   public boolean isAvailable() {
     try {
-      ChromeDriverService.createDefaultService();
+      DriverFinder.getPath(ChromeDriverService.createDefaultService());
       return true;
     } catch (IllegalStateException | WebDriverException e) {
       return false;

File: java/src/org/openqa/selenium/edge/EdgeDriverInfo.java
Patch:
@@ -25,6 +25,7 @@
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.WebDriverInfo;
 import org.openqa.selenium.chromium.ChromiumDriverInfo;
+import org.openqa.selenium.remote.service.DriverFinder;
 
 import java.util.Optional;
 
@@ -65,7 +66,7 @@ public boolean isSupportingBiDi() {
   @Override
   public boolean isAvailable() {
     try {
-      EdgeDriverService.createDefaultService();
+      DriverFinder.getPath(EdgeDriverService.createDefaultService());
       return true;
     } catch (IllegalStateException | WebDriverException e) {
       return false;

File: java/src/org/openqa/selenium/firefox/FirefoxDriverService.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.firefox;
 
 import org.openqa.selenium.remote.service.DriverService;
+import org.openqa.selenium.remote.service.DriverServiceInfo;
 
 import java.io.File;
 import java.io.IOException;

File: java/src/org/openqa/selenium/firefox/GeckoDriverInfo.java
Patch:
@@ -25,6 +25,7 @@
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.WebDriverInfo;
+import org.openqa.selenium.remote.service.DriverFinder;
 
 import java.util.Optional;
 
@@ -69,7 +70,7 @@ public boolean isSupportingBiDi() {
   @Override
   public boolean isAvailable() {
     try {
-      GeckoDriverService.createDefaultService();
+      DriverFinder.getPath(GeckoDriverService.createDefaultService());
       return true;
     } catch (IllegalStateException | WebDriverException e) {
       return false;

File: java/src/org/openqa/selenium/ie/InternetExplorerDriverInfo.java
Patch:
@@ -26,6 +26,7 @@
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.WebDriverInfo;
+import org.openqa.selenium.remote.service.DriverFinder;
 
 import java.util.Optional;
 
@@ -65,7 +66,7 @@ public boolean isSupportingBiDi() {
   public boolean isAvailable() {
     try {
       if (Platform.getCurrent().is(Platform.WINDOWS)) {
-        InternetExplorerDriverService.createDefaultService();
+        DriverFinder.getPath(InternetExplorerDriverService.createDefaultService());
         return true;
       }
       return false;

File: java/src/org/openqa/selenium/safari/SafariDriverInfo.java
Patch:
@@ -25,6 +25,7 @@
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.WebDriverInfo;
+import org.openqa.selenium.remote.service.DriverFinder;
 
 import java.util.Optional;
 
@@ -69,7 +70,7 @@ public boolean isSupportingBiDi() {
   @Override
   public boolean isAvailable() {
     try {
-      SafariDriverService.createDefaultService();
+      DriverFinder.getPath(SafariDriverService.createDefaultService());
       return true;
     } catch (IllegalStateException | WebDriverException e) {
       return false;

File: java/src/org/openqa/selenium/safari/SafariTechPreviewDriverInfo.java
Patch:
@@ -25,6 +25,7 @@
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.WebDriverInfo;
+import org.openqa.selenium.remote.service.DriverFinder;
 
 import java.util.Optional;
 
@@ -70,7 +71,7 @@ public boolean isSupportingBiDi() {
   @Override
   public boolean isAvailable() {
     try {
-      SafariTechPreviewDriverService.createDefaultService();
+      DriverFinder.getPath(SafariTechPreviewDriverService.createDefaultService());
       return true;
     } catch (IllegalStateException | WebDriverException e) {
       return false;

File: java/test/org/openqa/selenium/chrome/ChromeDriverServiceTest.java
Patch:
@@ -43,7 +43,6 @@ void builderPassesTimeoutToDriverService() {
     Duration customTimeout = Duration.ofSeconds(60);
 
     ChromeDriverService.Builder builderMock = spy(ChromeDriverService.Builder.class);
-    doReturn(exe).when(builderMock).findDefaultExecutable();
     builderMock.build();
 
     verify(builderMock).createDriverService(any(), anyInt(), eq(defaultTimeout), any(), any());
@@ -59,7 +58,6 @@ void logLevelLastWins() {
     File exe = new File("someFile");
 
     ChromeDriverService.Builder builderMock = spy(ChromeDriverService.Builder.class);
-    doReturn(exe).when(builderMock).findDefaultExecutable();
 
     List<String> silentLast = Arrays.asList("--port=1", "--log-level=OFF");
     builderMock.withLogLevel(ChromiumDriverLogLevel.ALL).usingPort(1).withSilent(true).build();
@@ -84,7 +82,6 @@ void ignoreFalseLogging() {
     File exe = new File("someFile");
 
     ChromeDriverService.Builder builderMock = spy(ChromeDriverService.Builder.class);
-    doReturn(exe).when(builderMock).findDefaultExecutable();
 
     List<String> falseSilent = Arrays.asList("--port=1", "--log-level=DEBUG");
     builderMock.withLogLevel(ChromiumDriverLogLevel.DEBUG).usingPort(1).withSilent(false).build();

File: java/test/org/openqa/selenium/firefox/GeckoDriverServiceTest.java
Patch:
@@ -17,16 +17,15 @@
 
 package org.openqa.selenium.firefox;
 
-import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Tag;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.time.Duration;
 
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.ArgumentMatchers.eq;
-import static org.mockito.Mockito.doReturn;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 
@@ -40,7 +39,6 @@ void builderPassesTimeoutToDriverService() {
     Duration customTimeout = Duration.ofSeconds(60);
 
     GeckoDriverService.Builder builderMock = spy(GeckoDriverService.Builder.class);
-    doReturn(exe).when(builderMock).findDefaultExecutable();
     builderMock.build();
 
     verify(builderMock).createDriverService(any(), anyInt(), eq(defaultTimeout), any(), any());

File: java/src/org/openqa/selenium/devtools/DevTools.java
Patch:
@@ -118,6 +118,9 @@ public void createSession() {
    * @param windowHandle result of {@link WebDriver#getWindowHandle()}, optional.
    */
   public void createSession(String windowHandle) {
+    if (connection.isClosed()) {
+      connection.reopen();
+    }
     TargetID targetId = findTarget(windowHandle);
 
     // Starts the session

File: java/src/org/openqa/selenium/grid/node/config/SessionCapabilitiesMutator.java
Patch:
@@ -57,6 +57,9 @@ public Capabilities apply(Capabilities capabilities) {
     }
 
     String browserName = capabilities.getBrowserName().toLowerCase();
+    if (!BROWSER_OPTIONS.containsKey(browserName)) {
+      return capabilities;
+    }
     String options = BROWSER_OPTIONS.get(browserName);
     if (slotStereotype.asMap().containsKey(options) && capabilities.asMap().containsKey(options)) {
 

File: java/src/org/openqa/selenium/grid/node/config/NodeOptions.java
Patch:
@@ -74,7 +74,7 @@ public class NodeOptions {
   public static final boolean DEFAULT_ENABLE_BIDI = true;
   static final String NODE_SECTION = "node";
   static final boolean DEFAULT_DETECT_DRIVERS = true;
-  static final boolean DEFAULT_USE_SELENIUM_MANAGER = true;
+  static final boolean DEFAULT_USE_SELENIUM_MANAGER = false;
   static final boolean OVERRIDE_MAX_SESSIONS = false;
   static final String DEFAULT_VNC_ENV_VAR = "SE_START_XVFB";
   static final int DEFAULT_NO_VNC_PORT = 7900;

File: java/test/org/openqa/selenium/grid/gridui/OverallGridTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.grid.gridui;
 
 import com.google.common.collect.ImmutableMap;
+
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -112,7 +113,8 @@ private Server<?> createStandalone() {
     Config config = new MemoizedConfig(
       new MapConfig(ImmutableMap.of(
         "server", Collections.singletonMap("port", port),
-        "node", Collections.singletonMap("detect-drivers", true))));
+        "node", ImmutableMap.of("detect-drivers", true, "selenium-manager", true)
+      )));
 
     Server<?> server = new Standalone().asServer(config).start();
 

File: java/test/org/openqa/selenium/grid/router/StressTest.java
Patch:
@@ -66,6 +66,7 @@ public void setupServers() {
       browser.getCapabilities(),
       new TomlConfig(new StringReader(
         "[node]\n" +
+        "selenium-manager = true\n" +
         "driver-implementation = " + browser.displayName())));
     tearDowns.add(deployment);
 

File: java/test/org/openqa/selenium/testing/drivers/RemoteSupplier.java
Patch:
@@ -67,7 +67,7 @@ private synchronized void startServer() {
     if (started) {
       return;
     }
-    server.start("standalone");
+    server.start("standalone", "--selenium-manager", "true");
     started = true;
   }
 }

File: java/src/org/openqa/selenium/manager/SeleniumManager.java
Patch:
@@ -117,7 +117,7 @@ private static String runCommand(String... command) {
    * Determines the correct Selenium Manager binary to use.
    * @return the path to the Selenium Manager binary.
    */
-    private File getBinary() {
+    private synchronized File getBinary() {
         if (binary == null) {
             try {
                 Platform current = Platform.getCurrent();

File: java/test/org/openqa/selenium/chrome/ChromeDriverFunctionalTest.java
Patch:
@@ -43,6 +43,7 @@
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.assertj.core.api.Assertions.fail;
 import static org.assertj.core.api.Assumptions.assumeThat;
+import static org.openqa.selenium.testing.drivers.Browser.CHROME;
 
 import com.google.common.util.concurrent.Uninterruptibles;
 
@@ -81,6 +82,7 @@ void builderWithClientConfigThrowsException() {
   }
 
   @Test
+  @Ignore(value = CHROME, reason = "https://bugs.chromium.org/p/chromedriver/issues/detail?id=4350")
   void canSetPermission() {
     HasPermissions permissions = (HasPermissions) driver;
 

File: java/src/org/openqa/selenium/chrome/ChromeDriverService.java
Patch:
@@ -158,8 +158,10 @@ public static ChromeDriverService createDefaultService() {
    */
   @Deprecated
   public static ChromeDriverService createServiceWithConfig(ChromeOptions options) {
+    ChromeDriverLogLevel oldLevel = options.getLogLevel();
+    ChromiumDriverLogLevel level = (oldLevel == null) ? null : ChromiumDriverLogLevel.fromString(oldLevel.toString());
     return new Builder()
-      .withLogLevel(ChromiumDriverLogLevel.fromString(options.getLogLevel().toString()))
+      .withLogLevel(level)
       .build();
   }
 

File: java/test/org/openqa/selenium/chromium/LoggingTest.java
Patch:
@@ -58,7 +58,7 @@ void demonstrateLoggingWorks() throws InterruptedException {
     ((JavascriptExecutor) driver).executeScript("console.log('I like cheese');");
 
     assertThat(latch.await(10, SECONDS)).isTrue();
-    assertThat(seen.get().toString()).contains("I like cheese");
+    assertThat(seen.get().getMessages()).contains("I like cheese");
   }
 
   @Test

File: java/src/org/openqa/selenium/WebDriverInfo.java
Patch:
@@ -56,7 +56,7 @@ public interface WebDriverInfo {
   boolean isSupportingCdp();
 
   /**
-   * @return Whether the driver has enabled the CDP interface.
+   * @return Whether the driver has enabled the BiDi interface.
    */
   boolean isSupportingBiDi();
 

File: java/src/org/openqa/selenium/devtools/v105/V105Events.java
Patch:
@@ -74,7 +74,8 @@ protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
     return new ConsoleEvent(
       event.getType().toString(),
       Instant.ofEpochMilli(ts),
-      modifiedArgs);
+      modifiedArgs,
+      event.getArgs());
   }
 
   @Override

File: java/src/org/openqa/selenium/devtools/v106/V106Events.java
Patch:
@@ -74,7 +74,8 @@ protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
     return new ConsoleEvent(
       event.getType().toString(),
       Instant.ofEpochMilli(ts),
-      modifiedArgs);
+      modifiedArgs,
+      event.getArgs());
   }
 
   @Override

File: java/src/org/openqa/selenium/devtools/v107/V107Events.java
Patch:
@@ -75,7 +75,8 @@ protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
     return new ConsoleEvent(
       event.getType().toString(),
       Instant.ofEpochMilli(ts),
-      modifiedArgs);
+      modifiedArgs,
+      event.getArgs());
   }
 
   @Override

File: java/src/org/openqa/selenium/devtools/v108/V108Events.java
Patch:
@@ -75,7 +75,8 @@ protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
     return new ConsoleEvent(
       event.getType().toString(),
       Instant.ofEpochMilli(ts),
-      modifiedArgs);
+      modifiedArgs,
+      event.getArgs());
   }
 
   @Override

File: java/src/org/openqa/selenium/devtools/v85/V85Events.java
Patch:
@@ -75,7 +75,8 @@ protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
     return new ConsoleEvent(
       event.getType().toString(),
       Instant.ofEpochMilli(ts),
-      modifiedArgs);
+      modifiedArgs,
+      event.getArgs());
   }
 
   @Override

File: java/src/org/openqa/selenium/docker/v1_41/GetContainerLogs.java
Patch:
@@ -50,7 +50,6 @@ public ContainerLogs apply(ContainerId id) {
 
     HttpResponse res = client.execute(
       new HttpRequest(GET, requestUrl)
-        .addHeader("Content-Length", "0")
         .addHeader("Content-Type", "text/plain"));
     if (res.getStatus() != HTTP_OK) {
       LOG.warning("Unable to inspect container " + id);

File: java/src/org/openqa/selenium/docker/v1_41/InspectContainer.java
Patch:
@@ -52,7 +52,6 @@ public ContainerInfo apply(ContainerId id) {
 
     HttpResponse res = client.execute(
       new HttpRequest(GET, String.format("/v%s/containers/%s/json", DOCKER_API_VERSION, id))
-        .addHeader("Content-Length", "0")
         .addHeader("Content-Type", "text/plain"));
     if (res.getStatus() != HTTP_OK) {
       LOG.warning("Unable to inspect container " + id);

File: java/src/org/openqa/selenium/docker/v1_41/IsContainerPresent.java
Patch:
@@ -38,7 +38,6 @@ public boolean apply(ContainerId id) {
 
     HttpResponse res = client.execute(
       new HttpRequest(GET, String.format("/v%s/containers/%s/json", DOCKER_API_VERSION, id))
-        .addHeader("Content-Length", "0")
         .addHeader("Content-Type", "text/plain"));
 
     return res.isSuccessful();

File: java/src/org/openqa/selenium/docker/v1_41/ListImages.java
Patch:
@@ -58,7 +58,6 @@ public Set<Image> apply(Reference reference) {
 
     // https://docs.docker.com/engine/api/v1.41/#operation/ImageList
     HttpRequest req = new HttpRequest(GET, String.format("/v%s/images/json", DOCKER_API_VERSION))
-      .addHeader("Content-Length", "0")
       .addHeader("Content-Type", JSON_UTF_8)
       .addQueryParameter("filters", JSON.toJson(filters));
 

File: java/src/org/openqa/selenium/docker/v1_41/StartContainer.java
Patch:
@@ -39,7 +39,6 @@ public void apply(ContainerId id) {
     throwIfNecessary(
       client.execute(
         new HttpRequest(POST, String.format("/v%s/containers/%s/start", DOCKER_API_VERSION, id))
-          .addHeader("Content-Length", "0")
           .addHeader("Content-Type", "text/plain")),
       "Unable to start container: %s",
       id);

File: java/src/org/openqa/selenium/docker/v1_41/StopContainer.java
Patch:
@@ -43,7 +43,6 @@ public void apply(ContainerId id, Duration timeout) {
 
     String requestUrl = String.format("/v%s/containers/%s/stop", DOCKER_API_VERSION, id);
     HttpRequest request = new HttpRequest(POST, requestUrl)
-      .addHeader("Content-Length", "0")
       .addHeader("Content-Type", "text/plain")
       .addQueryParameter("t", seconds);
 

File: java/src/org/openqa/selenium/grid/node/local/LocalNodeFactory.java
Patch:
@@ -76,6 +76,8 @@ public static Node create(Config config) {
     List<DriverService.Builder<?, ?>> builders = new ArrayList<>();
     ServiceLoader.load(DriverService.Builder.class).forEach(builders::add);
 
+    nodeOptions.getDownloadsPath().ifPresent(builder::downloadsPath);
+
     nodeOptions
       .getSessionFactories(
         caps -> createSessionFactory(tracer, clientFactory, sessionTimeout, builders, caps))

File: java/src/org/openqa/selenium/chromium/ChromiumDriver.java
Patch:
@@ -276,7 +276,6 @@ public void deleteNetworkConditions() {
 
   @Override
   public void quit() {
-    connection.ifPresent(Connection::close);
     super.quit();
   }
 }

File: java/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -320,9 +320,6 @@ public BiDi getBiDi() {
 
   @Override
   public void quit() {
-    if (connection != null) {
-      connection.close();
-    }
     super.quit();
   }
 

File: java/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -141,6 +141,7 @@ protected static File findExecutable(
         exePath = SeleniumManager.getInstance().getDriverPath(exeName);
         checkExecutable(new File(exePath));
       } catch (Exception e) {
+        exePath = null;
         LOG.warning(String.format("Unable to obtain driver using Selenium Manager: %s", e.getMessage()));
       }
     }

File: java/src/org/openqa/selenium/docker/v1_41/PullImage.java
Patch:
@@ -51,7 +51,6 @@ public void apply(Reference ref) {
     String image = String.format("%s/%s", ref.getDomain(), ref.getName());
     HttpRequest req = new HttpRequest(POST, String.format("/v%s/images/create", DOCKER_API_VERSION))
       .addHeader("Content-Type", JSON_UTF_8)
-      .addHeader("Content-Length", "0")
       .addQueryParameter("fromImage", image);
 
     if (ref.getDigest() != null) {

File: java/src/org/openqa/selenium/bidi/log/Log.java
Patch:
@@ -48,7 +48,7 @@ public static Event<LogEntry> entryAdded() {
             if ("console".equals(type)) {
               consoleLogEntry = Optional.ofNullable(input.read(ConsoleLogEntry.class));
             } else if ("javascript".equals(type)) {
-              javascriptLogEntry = Optional.ofNullable(input.read(GenericLogEntry.class));
+              javascriptLogEntry = Optional.ofNullable(input.read(JavascriptLogEntry.class));
             } else {
               genericLogEntry = Optional.ofNullable(input.read(GenericLogEntry.class));
             }

File: java/src/org/openqa/selenium/netty/server/RequestConverter.java
Patch:
@@ -84,7 +84,7 @@ protected void channelRead0(
       }
 
       if (nettyRequest.headers().contains("Sec-WebSocket-Version") &&
-          "upgrade".equals(nettyRequest.headers().get("Connection"))) {
+          "upgrade".equalsIgnoreCase(nettyRequest.headers().get("Connection"))) {
         // Pass this on to later in the pipeline.
         ReferenceCountUtil.retain(msg);
         ctx.fireChannelRead(msg);

File: java/src/org/openqa/selenium/print/PrintOptions.java
Patch:
@@ -121,7 +121,7 @@ public Map<String, Object> toMap() {
     options.put("background", getBackground());
     final String[] effectivePageRanges = getPageRanges();
     if (effectivePageRanges != null) {
-      options.put("effectivePageRanges", effectivePageRanges);
+      options.put("pageRanges", effectivePageRanges);
     }
     options.put("margin", getPageMargin());
 

File: java/src/org/openqa/selenium/internal/Require.java
Patch:
@@ -138,6 +138,9 @@ public static int positive(String argName, Integer number, String message) {
   }
 
   public static double positive(String argName, Double number, String message) {
+    if (number == null) {
+        throw new IllegalArgumentException(String.format(MUST_BE_SET, argName));
+    }
     if (number <= 0) {
       if (message == null) {
         throw new IllegalArgumentException(String.format(MUST_BE_POSITIVE, argName));

File: java/src/org/openqa/selenium/grid/server/BaseServerFlags.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.grid.server;
 
-import static org.openqa.selenium.grid.config.StandardGridRoles.HTTPD_ROLE;
-
 import com.google.auto.service.AutoService;
 
 import com.beust.jcommander.Parameter;
@@ -31,6 +29,8 @@
 import java.util.Collections;
 import java.util.Set;
 
+import static org.openqa.selenium.grid.config.StandardGridRoles.HTTPD_ROLE;
+
 @AutoService(HasRoles.class)
 public class BaseServerFlags implements HasRoles {
 
@@ -65,7 +65,7 @@ public class BaseServerFlags implements HasRoles {
                   + "Default value is: (available processors) * 3.",
     names = "--max-threads")
   @ConfigValue(section = SERVER_SECTION, name = "max-threads", example = "12")
-  private int maxThreads = Runtime.getRuntime().availableProcessors() * 3;
+  private int maxThreads;
 
   @Parameter(
     names = "--allow-cors",

File: java/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -149,7 +149,7 @@ protected Handlers createHandlers(Config config) {
     NewSessionQueue queue = new LocalNewSessionQueue(
       tracer,
       distributorOptions.getSlotMatcher(),
-      newSessionRequestOptions.getSessionRequestRetryInterval(),
+      newSessionRequestOptions.getSessionRequestTimeoutPeriod(),
       newSessionRequestOptions.getSessionRequestTimeout(),
       secret);
     handler.addHandler(queue);

File: java/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -65,7 +65,6 @@
 import java.net.URI;
 import java.net.URL;
 import java.util.Collections;
-import java.util.Optional;
 import java.util.Set;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -149,7 +148,7 @@ protected Handlers createHandlers(Config config) {
     NewSessionQueue queue = new LocalNewSessionQueue(
       tracer,
       distributorOptions.getSlotMatcher(),
-      newSessionRequestOptions.getSessionRequestRetryInterval(),
+      newSessionRequestOptions.getSessionRequestTimeoutPeriod(),
       newSessionRequestOptions.getSessionRequestTimeout(),
       registrationSecret);
     combinedHandler.addHandler(queue);

File: java/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -68,7 +68,7 @@ public Result createSession(HttpHandler client, Command command) throws IOExcept
 
       if (result.isRight()) {
         Result toReturn = result.right();
-        LOG.info(String.format("Detected upstream dialect: %s", toReturn.dialect));
+        LOG.log(Level.FINE, "Detected upstream dialect: {0}", toReturn.dialect);
 
         List<String> invalid = desired.asMap().keySet()
           .stream()

File: java/src/org/openqa/selenium/WindowType.java
Patch:
@@ -26,7 +26,7 @@ public enum WindowType {
   TAB ("tab"),
   ;
 
-  private String text;
+  private final String text;
 
   WindowType(String text) {
     this.text = text;

File: java/test/com/thoughtworks/selenium/DefaultSeleniumStartErrorHandlingTest.java
Patch:
@@ -22,10 +22,10 @@
 
 import org.junit.jupiter.api.Test;
 
-public class DefaultSeleniumStartErrorHandlingTest {
+class DefaultSeleniumStartErrorHandlingTest {
 
   @Test
-  public void testWrapsConnectionRefusedWithUserFriendlyExceptionMessage() {
+  void testWrapsConnectionRefusedWithUserFriendlyExceptionMessage() {
     final FailOnStartCommandProcessor failOnStartCommandProcessor;
 
     failOnStartCommandProcessor = new FailOnStartCommandProcessor("Connection refused: connect");
@@ -41,7 +41,7 @@ public void testWrapsConnectionRefusedWithUserFriendlyExceptionMessage() {
   }
 
   @Test
-  public void testShouldLeaveOtherExceptionAlone() {
+  void testShouldLeaveOtherExceptionAlone() {
     FailOnStartCommandProcessor failOnStartCommandProcessor;
     failOnStartCommandProcessor =
         new FailOnStartCommandProcessor("some crazy unexpected exception");

File: java/test/com/thoughtworks/selenium/DefaultSeleniumTest.java
Patch:
@@ -27,23 +27,23 @@ public class DefaultSeleniumTest {
   private static final String prefix = "setContext,com.thoughtworks.selenium.DefaultSeleniumTest: ";
 
   @Test
-  public void testBannerSimple() {
+  void testBannerSimple() {
     MyCommandProcessor cp = new MyCommandProcessor();
     DefaultSelenium selenium = new DefaultSelenium(cp);
     selenium.showContextualBanner();
     assertEquals(prefix + "test Banner Simple\n", cp.commands.toString());
   }
 
   @Test
-  public void testMoreComplexExample() {
+  void testMoreComplexExample() {
     MyCommandProcessor cp = new MyCommandProcessor();
     DefaultSelenium selenium = new DefaultSelenium(cp);
     selenium.showContextualBanner();
     assertEquals(prefix + "test More Complex Example\n", cp.commands.toString());
   }
 
   @Test
-  public void testEvenMOREComplexExample() {
+  void testEvenMOREComplexExample() {
     MyCommandProcessor cp = new MyCommandProcessor();
     DefaultSelenium selenium = new DefaultSelenium(cp);
     selenium.showContextualBanner();

File: java/test/com/thoughtworks/selenium/MockBrowserTest.java
Patch:
@@ -42,7 +42,7 @@ public void tearDown() {
   }
 
   @Test
-  public void testMock() {
+  void testMock() {
     sel.open("/");
     sel.click("foo");
     assertEquals(sel.getTitle(), "x", "Incorrect title");

File: java/test/com/thoughtworks/selenium/RealDealIntegrationTest.java
Patch:
@@ -22,7 +22,7 @@
 public class RealDealIntegrationTest extends InternalSelenseTestBase {
 
   @Test
-  public void testWithJavaScript() {
+  void testWithJavaScript() {
     selenium
         .setContext("A real test, using the real Selenium on the browser side served by Jetty, driven from Java");
     selenium.setBrowserLogLevel(SeleniumLogLevels.DEBUG);
@@ -41,12 +41,12 @@ public void testWithJavaScript() {
   }
 
   @Test
-  public void testAgain() {
+  void testAgain() {
     testWithJavaScript();
   }
 
   @Test
-  public void testFailure() {
+  void testFailure() {
     selenium
         .setContext("A real negative test, using the real Selenium on the browser side served by Jetty, driven from Java");
     selenium.open("test_click_page1.html");

File: java/test/com/thoughtworks/selenium/StabilityTest.java
Patch:
@@ -37,7 +37,7 @@ public void assumeSeCoreImplementation() {
   }
 
   @Test
-  public void retrieveLastRemoteControlLogsDoesNotTriggerOutOfMemoryErrors() {
+  void retrieveLastRemoteControlLogsDoesNotTriggerOutOfMemoryErrors() {
     for (int i = 1; i < 100000; i++) {
       selenium.retrieveLastRemoteControlLogs();
     }

File: java/test/com/thoughtworks/selenium/StartTest.java
Patch:
@@ -47,7 +47,7 @@ public static void killSeleniumServer() {
   }
 
   @Test
-  public void shouldBeAbleToCreateAWebDriverBackedSeleniumInstance() {
+  void shouldBeAbleToCreateAWebDriverBackedSeleniumInstance() {
     WebDriver driver = new FirefoxDriver();
     Selenium selenium = new WebDriverBackedSelenium(driver, root);
 

File: java/test/com/thoughtworks/selenium/TestLargeHtml.java
Patch:
@@ -22,7 +22,7 @@
 
 public class TestLargeHtml extends InternalSelenseTestBase {
   @Test
-  public void testLargeHtml() {
+  void testLargeHtml() {
     selenium.open("test_large_html.html");
     String source = selenium.getHtmlSource().trim();
     String expectedEndsWith = "</html>";

File: java/test/com/thoughtworks/selenium/TestNativeKeys.java
Patch:
@@ -26,7 +26,7 @@
 @Disabled("Focus does not focus")
 public class TestNativeKeys extends InternalSelenseTestBase {
   @Test
-  public void testKeyPressNative() {
+  void testKeyPressNative() {
     selenium.open("test_type_page1.html");
     selenium.focus("username");
     selenium.keyPressNative(Integer.toString(KeyEvent.VK_H));

File: java/test/com/thoughtworks/selenium/WaitTest.java
Patch:
@@ -36,7 +36,7 @@ public void setUp() {
   }
 
   @Test
-  public void testUntil() {
+  void testUntil() {
     finished = now + 500l;
     new Wait() {
       @Override
@@ -49,7 +49,7 @@ public boolean until() {
   }
 
   @Test
-  public void testUntilWithWaitTakingString() {
+  void testUntilWithWaitTakingString() {
     finished = now + 500l;
     new Wait("a message to be shown if wait times out") {
       @Override
@@ -62,7 +62,7 @@ public boolean until() {
   }
 
   @Test
-  public void testTimedOut() {
+  void testTimedOut() {
     finished = now + 5000l;
     try {
       new Wait() {

File: java/test/com/thoughtworks/selenium/condition/JUnit4AndTestNgConditionRunnerTest.java
Patch:
@@ -22,10 +22,10 @@
 
 import org.junit.jupiter.api.Test;
 
-public class JUnit4AndTestNgConditionRunnerTest {
+class JUnit4AndTestNgConditionRunnerTest {
 
   @Test
-  public void testAssertionErrorIsOfRightType() {
+  void testAssertionErrorIsOfRightType() {
     JUnit4AndTestNgConditionRunner cr = new JUnit4AndTestNgConditionRunner(null, null, 1, 1);
     try {
       cr.throwAssertionException("foo");

File: java/test/com/thoughtworks/selenium/corebased/SeleniumMouseTest.java
Patch:
@@ -23,7 +23,7 @@
 
 public class SeleniumMouseTest extends InternalSelenseTestBase {
   @Test
-  public void canFireAMouseOutEvent() {
+  void canFireAMouseOutEvent() {
     selenium.open("test_mouse_events1.html");
 
     selenium.mouseOut("id=out");

File: java/test/com/thoughtworks/selenium/corebased/TestAddLocationStrategy.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestAddLocationStrategy extends InternalSelenseTestBase {
   @Test
-  public void testAddLocationStrategy() {
+  void testAddLocationStrategy() {
     selenium.open("test_click_page1.html");
     selenium.addLocationStrategy("foo", "return inDocument.getElementById(locator);");
     assertTrue(selenium.isElementPresent("foo=link"));

File: java/test/com/thoughtworks/selenium/corebased/TestAddSelection.java
Patch:
@@ -24,7 +24,7 @@
 
 public class TestAddSelection extends InternalSelenseTestBase {
   @Test
-  public void addingToSelectionWhenSelectHasEmptyMultipleAttribute() {
+  void addingToSelectionWhenSelectHasEmptyMultipleAttribute() {
     selenium.open("test_multiple_select.html");
 
     selenium.addSelection("sel", "select_2");
@@ -38,7 +38,7 @@ public void addingToSelectionWhenSelectHasEmptyMultipleAttribute() {
   }
 
   @Test
-  public void addingToSelectionShouldThrowExceptionForSingleSelectionList() {
+  void addingToSelectionShouldThrowExceptionForSingleSelectionList() {
     selenium.open("test_select.html");
 
     String[] before = selenium.getSelectedIds("theSelect");

File: java/test/com/thoughtworks/selenium/corebased/TestAlerts.java
Patch:
@@ -25,7 +25,7 @@
 
 public class TestAlerts extends InternalSelenseTestBase {
   @Test
-  public void testAlerts() throws Exception {
+  void testAlerts() throws Exception {
     selenium.open("test_verify_alert.html");
     verifyFalse(selenium.isAlertPresent());
     assertFalse(selenium.isAlertPresent());

File: java/test/com/thoughtworks/selenium/corebased/TestAttachFile.java
Patch:
@@ -50,7 +50,7 @@ private File createTmpFile(String content) throws IOException {
   }
 
   @Test
-  public void testAttachFile() throws Exception {
+  void testAttachFile() throws Exception {
     selenium.open("/common/upload.html");
     selenium.attachFile("upload", testFile.toURI().toURL().toString());
     selenium.click("go");
@@ -61,7 +61,7 @@ public void testAttachFile() throws Exception {
   }
 
   @Test
-  public void testAttachNonExistingFile() throws Exception {
+  void testAttachNonExistingFile() throws Exception {
     selenium.open("/common/upload.html");
     try {
       selenium.attachFile("upload", testFile.toURI().toURL().toString() + "-missing");

File: java/test/com/thoughtworks/selenium/corebased/TestBasicAuth.java
Patch:
@@ -30,7 +30,7 @@
 @Disabled("Browsers don't allow basic auth through URL params any more")
 public class TestBasicAuth extends InternalSelenseTestBase {
   @Test
-  public void testBasicAuth() throws Exception {
+  void testBasicAuth() throws Exception {
     selenium.open(getUrl());
     assertEquals(selenium.getTitle(), "Welcome");
   }

File: java/test/com/thoughtworks/selenium/corebased/TestBrowserVersion.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestBrowserVersion extends InternalSelenseTestBase {
   @Test
-  public void testBrowserVersion() {
+  void testBrowserVersion() {
     System.out.println(selenium.getEval("browserVersion.name"));
   }
 }

File: java/test/com/thoughtworks/selenium/corebased/TestCheckUncheck.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestCheckUncheck extends InternalSelenseTestBase {
   @Test
-  public void testCheckUncheck() {
+  void testCheckUncheck() {
     selenium.open("test_check_uncheck.html");
     verifyTrue(selenium.isChecked("base-spud"));
     verifyFalse(selenium.isChecked("base-rice"));

File: java/test/com/thoughtworks/selenium/corebased/TestClick.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestClick extends InternalSelenseTestBase {
   @Test
-  public void testClick() throws Exception {
+  void testClick() throws Exception {
     selenium.open("test_click_page1.html");
     verifyEquals(selenium.getText("link"), "Click here for next page");
     selenium.click("link");

File: java/test/com/thoughtworks/selenium/corebased/TestClickBlankTarget.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled("Switching to the null window appears to fail")
 public class TestClickBlankTarget extends InternalSelenseTestBase {
   @Test
-  public void testClickBlankTarget() {
+  void testClickBlankTarget() {
     selenium.open("Frames.html");
     selenium.selectFrame("bottomFrame");
     selenium.click("changeBlank");

File: java/test/com/thoughtworks/selenium/corebased/TestClickJavascriptHref.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestClickJavascriptHref extends InternalSelenseTestBase {
   @Test
-  public void testClickJavascriptHref() {
+  void testClickJavascriptHref() {
     selenium.open("test_click_javascript_page.html");
     selenium.click("link");
     verifyEquals(selenium.getAlert(), "link clicked: foo");

File: java/test/com/thoughtworks/selenium/corebased/TestClickJavascriptHrefChrome.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestClickJavascriptHrefChrome extends InternalSelenseTestBase {
   @Test
-  public void testClickJavascriptHrefChrome() {
+  void testClickJavascriptHrefChrome() {
     selenium.open("test_click_javascript_chrome_page.html");
     selenium.click("id=a");
     verifyEquals(selenium.getAlert(), "a");

File: java/test/com/thoughtworks/selenium/corebased/TestClickJavascriptHrefWithVoidChrome.java
Patch:
@@ -24,7 +24,7 @@
 public class TestClickJavascriptHrefWithVoidChrome extends
     InternalSelenseTestBase {
   @Test
-  public void testClickJavascriptHrefWithVoidChrome() {
+  void testClickJavascriptHrefWithVoidChrome() {
     selenium.open("test_click_javascript_href_void_chrome.html");
     selenium.click("linkWithJavascriptVoidHref");
     verifyEquals(selenium.getAlert(), "onclick:voidHref");

File: java/test/com/thoughtworks/selenium/corebased/TestCommandError.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestCommandError extends InternalSelenseTestBase {
   @Test
-  public void testCommandError() {
+  void testCommandError() {
     selenium.open("test_verifications.html");
     try {
       selenium.click("notALink");

File: java/test/com/thoughtworks/selenium/corebased/TestComments.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestComments extends InternalSelenseTestBase {
   @Test
-  public void testComments() {
+  void testComments() {
     selenium.open("test_verifications.html?foo=bar");
     verifyTrue(selenium.getLocation().matches(
         "^.*/test_verifications\\.html[\\s\\S]*$"));

File: java/test/com/thoughtworks/selenium/corebased/TestConfirmations.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestConfirmations extends InternalSelenseTestBase {
   @Test
-  public void testConfirmations() throws Exception {
+  void testConfirmations() throws Exception {
     selenium.open("test_confirm.html");
     selenium.chooseCancelOnNextConfirmation();
     selenium.click("confirmAndLeave");

File: java/test/com/thoughtworks/selenium/corebased/TestCookie.java
Patch:
@@ -27,7 +27,7 @@
 @Disabled("Incorrectly calculated base path")
 public class TestCookie extends InternalSelenseTestBase {
   @Test
-  public void testCookie() {
+  void testCookie() {
     String base =
         selenium
             .getEval("parseUrl(canonicalize(absolutify(\"html\", selenium.browserbot.baseUrl))).pathname;");

File: java/test/com/thoughtworks/selenium/corebased/TestCssLocators.java
Patch:
@@ -24,7 +24,7 @@
 
 public class TestCssLocators extends InternalSelenseTestBase {
   @Test
-  public void testCssLocators() {
+  void testCssLocators() {
 
     // Unimplemented features:
     // namespace

File: java/test/com/thoughtworks/selenium/corebased/TestCursorPosition.java
Patch:
@@ -24,7 +24,7 @@
 
 public class TestCursorPosition extends InternalSelenseTestBase {
   @Test
-  public void testCursorPosition() {
+  void testCursorPosition() {
     selenium.open("test_type_page1.html");
     try {
       assertEquals(selenium.getCursorPosition("username"), "8");

File: java/test/com/thoughtworks/selenium/corebased/TestDojoDragAndDrop.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestDojoDragAndDrop extends InternalSelenseTestBase {
   @Test
-  public void testDojoDragAndDrop() {
+  void testDojoDragAndDrop() {
     selenium.open("dojo-0.4.0-mini/tests/dnd/test_simple.html");
     selenium.dragAndDropToObject("1_3", "2_1");
     assertTrue(selenium.isTextPresent("either side of me*list 1 item 3"));

File: java/test/com/thoughtworks/selenium/corebased/TestDomainCookie.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestDomainCookie extends InternalSelenseTestBase {
   @Test
-  public void testDomainCookie() {
+  void testDomainCookie() {
     String host =
         selenium
             .getEval("parseUrl(canonicalize(absolutify(\"html\", selenium.browserbot.baseUrl))).host;");

File: java/test/com/thoughtworks/selenium/corebased/TestDragAndDrop.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled("Move target out of bounds, apparently")
 public class TestDragAndDrop extends InternalSelenseTestBase {
   @Test
-  public void testDragAndDrop() {
+  void testDragAndDrop() {
     selenium.open("slider/example.html");
     selenium.dragdrop("id=slider01", "800,0");
     assertEquals(selenium.getValue("id=output1"), "20");

File: java/test/com/thoughtworks/selenium/corebased/TestEditable.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestEditable extends InternalSelenseTestBase {
   @Test
-  public void testEditable() {
+  void testEditable() {
     selenium.open("test_editable.html");
     verifyTrue(selenium.isEditable("normal_text"));
     verifyTrue(selenium.isEditable("normal_select"));

File: java/test/com/thoughtworks/selenium/corebased/TestElementIndex.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestElementIndex extends InternalSelenseTestBase {
   @Test
-  public void testElementIndex() {
+  void testElementIndex() {
     selenium.open("test_element_order.html");
     assertEquals(selenium.getElementIndex("d2"), "1");
     assertEquals(selenium.getElementIndex("d1.1.1"), "0");

File: java/test/com/thoughtworks/selenium/corebased/TestElementOrder.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestElementOrder extends InternalSelenseTestBase {
   @Test
-  public void testElementOrder() {
+  void testElementOrder() {
     selenium.open("test_element_order.html");
     assertTrue(selenium.isOrdered("s1.1", "d1.1"));
     assertFalse(selenium.isOrdered("s1.1", "s1.1"));

File: java/test/com/thoughtworks/selenium/corebased/TestElementPresent.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestElementPresent extends InternalSelenseTestBase {
   @Test
-  public void testElementPresent() throws Exception {
+  void testElementPresent() throws Exception {
     selenium.open("test_element_present.html");
     assertTrue(selenium.isElementPresent("aLink"));
     selenium.click("removeLinkAfterAWhile");

File: java/test/com/thoughtworks/selenium/corebased/TestErrorChecking.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestErrorChecking extends InternalSelenseTestBase {
   @Test
-  public void testErrorChecking() {
+  void testErrorChecking() {
     selenium.open("test_click_page1.html");
     // These tests should all fail, as they are checking the error checking commands.
     try {

File: java/test/com/thoughtworks/selenium/corebased/TestEval.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestEval extends InternalSelenseTestBase {
   @Test
-  public void testEval() {
+  void testEval() {
     selenium.open("test_open.html");
     assertEquals(selenium.getEval("window.document.title"), "Open Test");
   }

File: java/test/com/thoughtworks/selenium/corebased/TestEvilClosingWindow.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestEvilClosingWindow extends InternalSelenseTestBase {
   @Test
-  public void testEvilClosingWindow() {
+  void testEvilClosingWindow() {
     selenium.open("test_select_window.html");
     selenium.click("popupPage");
     selenium.waitForPopUp("myPopupWindow", "5000");

File: java/test/com/thoughtworks/selenium/corebased/TestFailingAssert.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestFailingAssert extends InternalSelenseTestBase {
   @Test
-  public void testFailingAssert() {
+  void testFailingAssert() {
     selenium.open("test_verifications.html");
     try {
       assertEquals(selenium.getValue("theText"), "not the text value");

File: java/test/com/thoughtworks/selenium/corebased/TestFailingVerifications.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestFailingVerifications extends InternalSelenseTestBase {
   @Test
-  public void testFailingVerifications() {
+  void testFailingVerifications() {
     selenium.open("/test_verifications.html");
     try {
       assertTrue(selenium.getLocation().matches(

File: java/test/com/thoughtworks/selenium/corebased/TestFocusOnBlur.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestFocusOnBlur extends InternalSelenseTestBase {
   @Test
-  public void testFocusOnBlur() {
+  void testFocusOnBlur() {
     selenium.open("test_focus_on_blur.html");
     selenium.type("testInput", "test");
     selenium.fireEvent("testInput", "blur");

File: java/test/com/thoughtworks/selenium/corebased/TestFramesClick.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestFramesClick extends InternalSelenseTestBase {
   @Test
-  public void testFramesClick() throws Exception {
+  void testFramesClick() throws Exception {
     selenium.open("Frames.html");
     selenium.selectFrame("mainFrame");
     selenium.open("test_click_page1.html");

File: java/test/com/thoughtworks/selenium/corebased/TestFramesClickJavascriptHref.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestFramesClickJavascriptHref extends InternalSelenseTestBase {
   @Test
-  public void testFramesClickJavascriptHref() {
+  void testFramesClickJavascriptHref() {
     selenium.open("Frames.html");
     selenium.selectFrame("mainFrame");
     selenium.open("test_click_javascript_page.html");

File: java/test/com/thoughtworks/selenium/corebased/TestFramesNested.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled
 public class TestFramesNested extends InternalSelenseTestBase {
   @Test
-  public void testFramesNested() {
+  void testFramesNested() {
     selenium.open("NestedFrames.html");
     verifyEquals(selenium.getTitle(), "NestedFrames");
     verifyFalse(selenium.isTextPresent("This is a test"));

File: java/test/com/thoughtworks/selenium/corebased/TestFramesOpen.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestFramesOpen extends InternalSelenseTestBase {
   @Test
-  public void testFramesOpen() {
+  void testFramesOpen() {
     selenium.open("Frames.html");
     selenium.selectFrame("mainFrame");
     verifyTrue(selenium.getLocation().matches("^.*/test_open\\.html$"));

File: java/test/com/thoughtworks/selenium/corebased/TestFramesSpecialTargets.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled("Unable to find changeSpan")
 public class TestFramesSpecialTargets extends InternalSelenseTestBase {
   @Test
-  public void testFramesSpecialTargets() {
+  void testFramesSpecialTargets() {
     selenium.openWindow("Frames.html", "SpecialTargets");
     selenium.waitForPopUp("SpecialTargets", "10000");
     selenium.selectWindow("SpecialTargets");

File: java/test/com/thoughtworks/selenium/corebased/TestFunkEventHandling.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestFunkEventHandling extends InternalSelenseTestBase {
   @Test
-  public void testFunkEventHandling() throws Exception {
+  void testFunkEventHandling() throws Exception {
     selenium.open("test_funky_event_handling.html");
     selenium.click("clickMe");
     Thread.sleep(1000);

File: java/test/com/thoughtworks/selenium/corebased/TestGet.java
Patch:
@@ -26,7 +26,7 @@
 // TODO(simon): The verifications should not be commented out
 public class TestGet extends InternalSelenseTestBase {
   @Test
-  public void testGet() {
+  void testGet() {
     // test API getters
     selenium.open("test_get.html");
     // IE uppercases the property names of the style.

File: java/test/com/thoughtworks/selenium/corebased/TestGetTextContent.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestGetTextContent extends InternalSelenseTestBase {
   @Test
-  public void testGetTextContent() {
+  void testGetTextContent() {
     selenium.open("test_gettextcontent.html");
     verifyTrue(selenium.isTextPresent("Text1"));
 

File: java/test/com/thoughtworks/selenium/corebased/TestGettingValueOfCheckbox.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestGettingValueOfCheckbox extends InternalSelenseTestBase {
   @Test
-  public void testGettingValueOfCheckbox() {
+  void testGettingValueOfCheckbox() {
     selenium.open("test_submit.html");
 
     String elementLocator = "name=okayToSubmit";

File: java/test/com/thoughtworks/selenium/corebased/TestGettingValueOfRadioButton.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestGettingValueOfRadioButton extends InternalSelenseTestBase {
   @Test
-  public void testGettingValueOfCheckbox() {
+  void testGettingValueOfCheckbox() {
     selenium.open("test_check_uncheck.html");
 
     String firstRadioLocator = "xpath=//input[@name='base'][1]";

File: java/test/com/thoughtworks/selenium/corebased/TestGoBack.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestGoBack extends InternalSelenseTestBase {
   @Test
-  public void testGoBack() {
+  void testGoBack() {
     selenium.open("test_click_page1.html");
     verifyEquals(selenium.getTitle(), "Click Page 1");
     // Click a regular link

File: java/test/com/thoughtworks/selenium/corebased/TestHighlight.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestHighlight extends InternalSelenseTestBase {
   @Test
-  public void testHighlight() {
+  void testHighlight() {
     selenium.open("test_locators.html");
     selenium.highlight("id1");
   }

File: java/test/com/thoughtworks/selenium/corebased/TestHtmlSource.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestHtmlSource extends InternalSelenseTestBase {
   @Test
-  public void testHtmlSource() {
+  void testHtmlSource() {
     selenium.open("test_html_source.html");
     verifyTrue(selenium.getHtmlSource().matches("^[\\s\\S]*Text is here[\\s\\S]*$"));
     verifyFalse(selenium.getHtmlSource().matches("^[\\s\\S]*can not be found[\\s\\S]*$"));

File: java/test/com/thoughtworks/selenium/corebased/TestImplicitLocators.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestImplicitLocators extends InternalSelenseTestBase {
   @Test
-  public void testImplicitLocators() {
+  void testImplicitLocators() {
     selenium.open("test_locators.html");
     verifyEquals(selenium.getText("id1"), "this is the first element");
     verifyEquals(selenium.getAttribute("id1@class"), "a1");

File: java/test/com/thoughtworks/selenium/corebased/TestJavaScriptAttributes.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestJavaScriptAttributes extends InternalSelenseTestBase {
   @Test
-  public void testJavaScriptAttributes() {
+  void testJavaScriptAttributes() {
     selenium.open("test_javascript_attributes.html");
     selenium.click("//a[@onclick=\"alert('foo')\"]");
     assertEquals(selenium.getAlert(), "foo");

File: java/test/com/thoughtworks/selenium/corebased/TestJavascriptParameters.java
Patch:
@@ -27,7 +27,7 @@
 @Disabled("selenium.getValue is not a function. Needs to be added to selenium JS emulation")
 public class TestJavascriptParameters extends InternalSelenseTestBase {
   @Test
-  public void testJavascriptParameters() {
+  void testJavascriptParameters() {
     selenium.open("test_store_value.html");
     selenium.type("theText", selenium.getEval("[1,2,3,4,5].join(':')"));
     verifyEquals(selenium.getValue("theText"), "1:2:3:4:5");

File: java/test/com/thoughtworks/selenium/corebased/TestLocators.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestLocators extends InternalSelenseTestBase {
   @Test
-  public void testLocators() {
+  void testLocators() {
     selenium.open("test_locators.html");
     // Id location
     verifyEquals(selenium.getText("id=id1"), "this is the first element");

File: java/test/com/thoughtworks/selenium/corebased/TestModalDialog.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled("apparently this test was ignored before. Probably a bad base path.")
 public class TestModalDialog extends InternalSelenseTestBase {
   @Test
-  public void testModalDialog() {
+  void testModalDialog() {
     selenium.open("test_modal_dialog.html");
     verifyTrue(selenium.getLocation().matches("^[\\s\\S]*/common/legacy/test_modal_dialog\\.html$"));
     verifyEquals(selenium.getTitle(), "Modal Dialog Host Window");

File: java/test/com/thoughtworks/selenium/corebased/TestMultiSelect.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestMultiSelect extends InternalSelenseTestBase {
   @Test
-  public void testMultiSelect() {
+  void testMultiSelect() {
     selenium.open("test_multiselect.html");
     assertEquals(join(selenium.getSelectedLabels("theSelect"), ','), "Second Option");
     selenium.select("theSelect", "index=4");

File: java/test/com/thoughtworks/selenium/corebased/TestOpen.java
Patch:
@@ -23,13 +23,13 @@
 
 public class TestOpen extends InternalSelenseTestBase {
   @Test
-  public void testOpen() {
+  void testOpen() {
     selenium.open("test_open.html");
     verifyTrue(selenium.getLocation().matches("^.*/test_open\\.html$"));
   }
 
   @Test
-  public void testIsTextPresentCanDoExactAndRegexChecks() {
+  void testIsTextPresentCanDoExactAndRegexChecks() {
     selenium.open("test_open.html");
     verifyTrue(selenium.isTextPresent("This is a test of the open command."));
     verifyTrue(selenium.isTextPresent("glob:This is a test of the open command."));
@@ -41,7 +41,7 @@ public void testIsTextPresentCanDoExactAndRegexChecks() {
   }
 
 @Test
-  public void testCanOpenSlowLoadingPage() {
+  void testCanOpenSlowLoadingPage() {
     selenium.open("test_page.slow.html");
     verifyTrue(selenium.getLocation().matches("^.*/test_page\\.slow\\.html$"));
     verifyEquals(selenium.getTitle(), "Slow Loading Page");

File: java/test/com/thoughtworks/selenium/corebased/TestOpenInTargetFrame.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestOpenInTargetFrame extends InternalSelenseTestBase {
   @Test
-  public void testOpenInTargetFrame() throws Exception {
+  void testOpenInTargetFrame() throws Exception {
     selenium.open("test_open_in_target_frame.html");
     selenium.selectFrame("rightFrame");
     selenium.click("link=Show new frame in leftFrame");

File: java/test/com/thoughtworks/selenium/corebased/TestPatternMatching.java
Patch:
@@ -25,7 +25,7 @@
 
 public class TestPatternMatching extends InternalSelenseTestBase {
   @Test
-  public void testPatternMatching() {
+  void testPatternMatching() {
     selenium.open("test_verifications.html");
     verifyTrue(selenium.getValue("theText").matches("^[\\s\\S]*text[\\s\\S]*$"));
     verifyTrue(selenium.getValue("theHidden").matches("^[\\s\\S]* hidden value$"));

File: java/test/com/thoughtworks/selenium/corebased/TestPause.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestPause extends InternalSelenseTestBase {
   @Test
-  public void testPause() throws Exception {
+  void testPause() throws Exception {
     selenium.open("test_reload_onchange_page.html");
     // Make sure we can pause even when the page doesn't change
     Thread.sleep(100);

File: java/test/com/thoughtworks/selenium/corebased/TestPrompt.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled("getPrompt not implemented")
 public class TestPrompt extends InternalSelenseTestBase {
   @Test
-  public void testPrompt() throws Exception {
+  void testPrompt() throws Exception {
     selenium.open("test_prompt.html");
     verifyFalse(selenium.isPromptPresent());
     assertFalse(selenium.isPromptPresent());

File: java/test/com/thoughtworks/selenium/corebased/TestProxy.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestProxy extends InternalSelenseTestBase {
   @Test
-  public void testProxy() {
+  void testProxy() {
     // selenium.setTimeout("20000");
     // selenium.open("http://www.yahoo.com/");
     // selenium.type("p", "Selenium");

File: java/test/com/thoughtworks/selenium/corebased/TestQuickOpen.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestQuickOpen extends InternalSelenseTestBase {
   @Test
-  public void testQuickOpen() {
+  void testQuickOpen() {
     // <tr>
     // <td>setTimeout</td>
     // <td>5000</td>

File: java/test/com/thoughtworks/selenium/corebased/TestRefresh.java
Patch:
@@ -25,7 +25,7 @@
 public class TestRefresh extends InternalSelenseTestBase {
   @Disabled("The click on slowRefresh doesn't make the rc implementation wait")
   @Test
-  public void testRefresh() {
+  void testRefresh() {
     selenium.open("test_page.slow.html");
     System.out.println(selenium.getLocation());
     verifyTrue(selenium.getLocation().matches("^[\\s\\S]*/common/rc/tests/html/test_page\\.slow\\.html$"));

File: java/test/com/thoughtworks/selenium/corebased/TestRollup.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled("Rollup functionality is not implemented. Also addScript is not implemented")
 public class TestRollup extends InternalSelenseTestBase {
   @Test
-  public void testRollup() {
+  void testRollup() {
     // TODO(simon): re-enable this. It looks like the addScript method is not right
     selenium.addScript(getRollupScript(), "rollup");
     selenium.open("test_rollup.html");

File: java/test/com/thoughtworks/selenium/corebased/TestSelect.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestSelect extends InternalSelenseTestBase {
   @Test
-  public void testSelect() {
+  void testSelect() {
     selenium.open("test_select.html");
     assertTrue(selenium.isSomethingSelected("theSelect"));
     assertEquals(selenium.getSelectedLabel("theSelect"), "Second Option");

File: java/test/com/thoughtworks/selenium/corebased/TestSelectMultiLevelFrame.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestSelectMultiLevelFrame extends InternalSelenseTestBase {
   @Test
-  public void testSelectMultiLevelFrame() {
+  void testSelectMultiLevelFrame() {
     selenium.open("test_multi_level_frame.html");
     // Select first level frame
     selenium.selectFrame("frame2");

File: java/test/com/thoughtworks/selenium/corebased/TestSelectPopUp.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestSelectPopUp extends InternalSelenseTestBase {
   @Test
-  public void testSelectPopUp() {
+  void testSelectPopUp() {
     selenium.open("test_select_window.html");
     selenium.click("popupPage");
     selenium.waitForPopUp("myPopupWindow", "");

File: java/test/com/thoughtworks/selenium/corebased/TestSelectWindow.java
Patch:
@@ -25,7 +25,7 @@
 
 public class TestSelectWindow extends InternalSelenseTestBase {
   @Test
-  public void testSelectWindow() {
+  void testSelectWindow() {
     selenium.open("test_select_window.html");
     selenium.click("popupPage");
     selenium.waitForPopUp("myPopupWindow", "5000");

File: java/test/com/thoughtworks/selenium/corebased/TestSelectWindowTitle.java
Patch:
@@ -25,7 +25,7 @@
 
 public class TestSelectWindowTitle extends InternalSelenseTestBase {
   @Test
-  public void testSelectWindowTitle() {
+  void testSelectWindowTitle() {
     selenium.open("test_select_window.html");
     selenium.click("popupPage");
     selenium.waitForPopUp("myPopupWindow", "5000");

File: java/test/com/thoughtworks/selenium/corebased/TestSetSpeed.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled("Set speed is a no-op, it seems")
 public class TestSetSpeed extends InternalSelenseTestBase {
   @Test
-  public void testSetSpeed() throws Exception {
+  void testSetSpeed() throws Exception {
     String lastSpeed = selenium.getSpeed();
     // The max value in slider is 1000, but setSpeed command can set higher than this
     selenium.setSpeed("1600");

File: java/test/com/thoughtworks/selenium/corebased/TestStore.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestStore extends InternalSelenseTestBase {
   @Test
-  public void testStore() {
+  void testStore() {
     selenium.open("test_verifications.html");
     String storedHiddenValue = selenium.getValue("theHidden");
     String storedSpanText = selenium.getText("theSpan");

File: java/test/com/thoughtworks/selenium/corebased/TestSubmit.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestSubmit extends InternalSelenseTestBase {
   @Test
-  public void testSubmit() {
+  void testSubmit() {
     selenium.open("test_submit.html");
     selenium.submit("searchForm");
     assertEquals(selenium.getAlert(), "onsubmit called");

File: java/test/com/thoughtworks/selenium/corebased/TestTextWhitespace.java
Patch:
@@ -25,7 +25,7 @@
 
 public class TestTextWhitespace extends InternalSelenseTestBase {
   @Test
-  public void testTextWhitespace() {
+  void testTextWhitespace() {
     selenium.open("test_text_content.html");
     verifyEquals(selenium.getText("nonTextMarkup"),
         "There is non-visible and visible markup here that doesn't change the text content");

File: java/test/com/thoughtworks/selenium/corebased/TestType.java
Patch:
@@ -29,7 +29,7 @@
 
 public class TestType extends InternalSelenseTestBase {
   @Test
-  public void testType() throws Exception {
+  void testType() throws Exception {
     selenium.open("test_type_page1.html");
     verifyEquals(selenium.getValue("username"), "");
     selenium.shiftKeyDown();

File: java/test/com/thoughtworks/selenium/corebased/TestUIElementLocators.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled("Not implemented")
 public class TestUIElementLocators extends InternalSelenseTestBase {
   @Test
-  public void testUIElementLocators() {
+  void testUIElementLocators() {
     selenium.addScript(getUiMap(), "uimap");
     selenium.open("test_locators.html");
     verifyEquals(selenium.getText("ui=pageset1::linksWithId()"), "this is the first element");

File: java/test/com/thoughtworks/selenium/corebased/TestUseXpathLibrary.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled("WebDriverBackedSelenium uses webdriver for xpath evaluation")
 public class TestUseXpathLibrary extends InternalSelenseTestBase {
   @Test
-  public void testUseXpathLibrary() {
+  void testUseXpathLibrary() {
     selenium.useXpathLibrary("ajaxslt");
     assertEquals(selenium.getEval("this.browserbot.xpathEvaluator.getCurrentEngine()"), "ajaxslt");
     assertEquals(selenium.getXpathCount("//"), "1");

File: java/test/com/thoughtworks/selenium/corebased/TestVerifications.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestVerifications extends InternalSelenseTestBase {
   @Test
-  public void testVerifications() {
+  void testVerifications() {
     selenium.open("test_verifications.html?foo=bar");
     verifyTrue(selenium.getLocation().matches(
         "^.*/test_verifications\\.html[\\s\\S]*$"));

File: java/test/com/thoughtworks/selenium/corebased/TestVisibility.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestVisibility extends InternalSelenseTestBase {
   @Test
-  public void testVisibility() {
+  void testVisibility() {
     selenium.open("test_visibility.html");
     verifyTrue(selenium.isVisible("visibleParagraph"));
     verifyFalse(selenium.isVisible("hiddenParagraph"));

File: java/test/com/thoughtworks/selenium/corebased/TestWait.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestWait extends InternalSelenseTestBase {
   @Test
-  public void testWait() {
+  void testWait() {
     // Link click
     selenium.open("test_reload_onchange_page.html");
     selenium.click("theLink");

File: java/test/com/thoughtworks/selenium/corebased/TestWaitFor.java
Patch:
@@ -26,7 +26,7 @@
 
 public class TestWaitFor extends InternalSelenseTestBase {
   @Test
-  public void testWaitFor() throws Exception {
+  void testWaitFor() throws Exception {
     selenium.open("test_async_event.html");
     assertEquals(selenium.getValue("theField"), "oldValue");
     selenium.click("theButton");

File: java/test/com/thoughtworks/selenium/corebased/TestWaitForNot.java
Patch:
@@ -25,7 +25,7 @@
 
 public class TestWaitForNot extends InternalSelenseTestBase {
   @Test
-  public void testWaitForNot() throws Exception {
+  void testWaitForNot() throws Exception {
     selenium.open("test_async_event.html");
     assertEquals(selenium.getValue("theField"), "oldValue");
     selenium.click("theButton");

File: java/test/com/thoughtworks/selenium/corebased/TestWaitInPopupWindow.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestWaitInPopupWindow extends InternalSelenseTestBase {
   @Test
-  public void testWaitInPopupWindow() {
+  void testWaitInPopupWindow() {
     selenium.open("test_select_window.html");
     selenium.click("popupPage");
     selenium.waitForPopUp("myPopupWindow", "5000");

File: java/test/com/thoughtworks/selenium/corebased/TestXPathLocatorInXHtml.java
Patch:
@@ -25,7 +25,7 @@
 @Disabled
 public class TestXPathLocatorInXHtml extends InternalSelenseTestBase {
   @Test
-  public void testXPathLocatorInXHtml() {
+  void testXPathLocatorInXHtml() {
     selenium.open("test_locators.xhtml");
     verifyTrue(selenium.isElementPresent("xpath=//x:body"));
   }

File: java/test/com/thoughtworks/selenium/corebased/TestXPathLocators.java
Patch:
@@ -23,7 +23,7 @@
 
 public class TestXPathLocators extends InternalSelenseTestBase {
   @Test
-  public void testXPathLocators() {
+  void testXPathLocators() {
     selenium.open("test_locators.html");
     verifyEquals(selenium.getText("xpath=//a"), "this is the first element");
     verifyEquals(selenium.getText("xpath=//a[@class='a2']"), "this is the second element");

File: java/test/com/thoughtworks/selenium/webdriven/ScriptMutatorTest.java
Patch:
@@ -28,7 +28,7 @@
 public class ScriptMutatorTest extends JupiterTestBase {
 
   @Test
-  public void testShouldBeAbleToUseTheBrowserbot() {
+  void testShouldBeAbleToUseTheBrowserbot() {
     String url = pages.tables;
     Selenium selenium = new WebDriverBackedSelenium(driver, url);
     selenium.open(pages.tables);

File: java/test/com/thoughtworks/selenium/webdriven/TimerTest.java
Patch:
@@ -26,7 +26,7 @@
 public class TimerTest {
 
   @Test
-  public void testCannotExecuteCommandsAfterStoppingTheTimer() {
+  void testCannotExecuteCommandsAfterStoppingTheTimer() {
     Timer timer = new Timer(250);
     timer.stop();
     try {
@@ -38,7 +38,7 @@ public void testCannotExecuteCommandsAfterStoppingTheTimer() {
   }
 
   @Test
-  public void testShouldTimeOut() {
+  void testShouldTimeOut() {
     Timer timer = new Timer(10);
     try {
       timer.run(new SeleneseCallable(60), null, new String[0]);
@@ -50,7 +50,7 @@ public void testShouldTimeOut() {
   }
 
   @Test
-  public void testShouldNotTimeOut() {
+  void testShouldNotTimeOut() {
     Timer timer = new Timer(200);
     timer.run(new SeleneseCallable(10), null, new String[0]);
     timer.stop();

File: java/test/com/thoughtworks/selenium/webdriven/VariableDeclarationTest.java
Patch:
@@ -35,7 +35,7 @@ public void setUp() {
   }
 
   @Test
-  public void testShouldLeaveThingsWellAloneIfNotNeeded() {
+  void testShouldLeaveThingsWellAloneIfNotNeeded() {
     StringBuilder builder = new StringBuilder();
     declaration.mutate("I like cheese", builder);
 
@@ -44,15 +44,15 @@ public void testShouldLeaveThingsWellAloneIfNotNeeded() {
   }
 
   @Test
-  public void testShouldAddDeclarationIfNecessary() {
+  void testShouldAddDeclarationIfNecessary() {
     StringBuilder builder = new StringBuilder();
     declaration.mutate("selenium.browserbot.findElement", builder);
 
     assertEquals(REPLACEMENT, builder.toString());
   }
 
   @Test
-  public void testReplacementStillHappensWithStrangeSpacing() {
+  void testReplacementStillHappensWithStrangeSpacing() {
     StringBuilder builder = new StringBuilder();
     declaration.mutate("selenium   \n\n\n .browserbot .findCheese", builder);
 

File: java/test/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumHandlerTest.java
Patch:
@@ -79,7 +79,7 @@ public void stopServer() {
   }
 
   @Test
-  public void searchGoogle() {
+  void searchGoogle() {
     Selenium selenium = new DefaultSelenium("localhost", port, "*chrome", appServer.whereIs("/"));
     selenium.start();
 

File: java/test/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumLargeTest.java
Patch:
@@ -40,7 +40,7 @@ public void setUpEnvironment() {
   }
 
   @Test
-  public void canUseTheOriginalWaitClassWithAWebDriverBackedInstance() {
+  void canUseTheOriginalWaitClassWithAWebDriverBackedInstance() {
     selenium.open(pages.dynamicPage);
 
     Wait waiter = new Wait() {
@@ -65,7 +65,7 @@ public boolean until() {
 
   @NoDriverAfterTest
   @Test
-  public void testCallingStopThenSleepDoesNotCauseAnExceptionToBeThrown() {
+  void testCallingStopThenSleepDoesNotCauseAnExceptionToBeThrown() {
     // Stop selenium
     selenium.stop();
 
@@ -87,7 +87,7 @@ public void testCallingStopThenSleepDoesNotCauseAnExceptionToBeThrown() {
   }
 
   @Test
-  public void testShouldBeAbleToInvokeSeleniumCoreElementLocatorsWithGetEval() {
+  void testShouldBeAbleToInvokeSeleniumCoreElementLocatorsWithGetEval() {
     selenium.open(pages.simpleTestPage);
     String tagName = selenium.getEval(
         "var el = selenium.browserbot.findElement('id=oneline');" +

File: java/test/com/thoughtworks/selenium/webdriven/WebDriverCommandProcessorTest.java
Patch:
@@ -27,7 +27,7 @@
 
 public class WebDriverCommandProcessorTest {
   @Test
-  public void testDriverNeedNotImplementHasCapabilities() {
+  void testDriverNeedNotImplementHasCapabilities() {
     WebDriver driver = mock(WebDriver.class,
                             withSettings().extraInterfaces(JavascriptExecutor.class));
 
@@ -39,7 +39,7 @@ public void testDriverNeedNotImplementHasCapabilities() {
   }
 
   @Test
-  public void testRequiresAJavascriptEnabledDriver() {
+  void testRequiresAJavascriptEnabledDriver() {
     WebDriver driver = mock(WebDriver.class);
 
     try {

File: java/test/com/thoughtworks/selenium/webdriven/commands/GetAttributeTest.java
Patch:
@@ -25,7 +25,7 @@
 
 public class GetAttributeTest {
   @Test
-  public void shouldExtractElementAndAttributeName() {
+  void shouldExtractElementAndAttributeName() {
     GetAttribute getAttribute = new GetAttribute(new StubLibrary(), null);
 
     String[] pair = getAttribute.getNameAndAttribute("username@disabled");

File: java/test/com/thoughtworks/selenium/webdriven/commands/TypeKeysTest.java
Patch:
@@ -45,7 +45,7 @@ public WebElement findElement(WebDriver driver, String locator) {
   }
 
   @Test
-  public void substitutesArrowKeys() {
+  void substitutesArrowKeys() {
     String expected = newString(Keys.ARROW_DOWN, Keys.ARROW_LEFT, Keys.ARROW_RIGHT, Keys.ARROW_UP);
     String input = "\\40\\37\\39\\38";
 
@@ -55,7 +55,7 @@ public void substitutesArrowKeys() {
   }
 
   @Test
-  public void substitutesReturnAndEscapeKeys() {
+  void substitutesReturnAndEscapeKeys() {
     String expected = newString(Keys.ENTER, Keys.RETURN, Keys.ESCAPE);
     String input = "\\10\\13\\27";
 

File: java/test/org/openqa/selenium/AtomsInjectionTest.java
Patch:
@@ -22,10 +22,10 @@
 import org.junit.jupiter.api.Test;
 import org.openqa.selenium.testing.JupiterTestBase;
 
-public class AtomsInjectionTest extends JupiterTestBase {
+class AtomsInjectionTest extends JupiterTestBase {
 
   @Test
-  public void testInjectingAtomShouldNotTrampleOnUnderscoreGlobal() {
+  void testInjectingAtomShouldNotTrampleOnUnderscoreGlobal() {
     driver.get(pages.underscorePage);
     driver.findElement(By.tagName("body"));
     assertThat(((JavascriptExecutor) driver).executeScript("return _.join('');")).isEqualTo("123");

File: java/test/org/openqa/selenium/AuthenticationTest.java
Patch:
@@ -26,7 +26,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assumptions.assumeThat;
 
-public class AuthenticationTest extends JupiterTestBase {
+class AuthenticationTest extends JupiterTestBase {
 
   @BeforeEach
   public void testRequiresAuthentication() {

File: java/test/org/openqa/selenium/ContentEditableTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
-public class ContentEditableTest extends JupiterTestBase {
+class ContentEditableTest extends JupiterTestBase {
 
   @AfterEach
   public void switchToDefaultContent() {
@@ -73,7 +73,7 @@ public void testNonPrintableCharactersShouldWorkWithContentEditableOrDesignModeS
   }
 
   @Test
-  public void testShouldBeAbleToTypeIntoEmptyContentEditableElement() {
+  void testShouldBeAbleToTypeIntoEmptyContentEditableElement() {
     driver.get(pages.readOnlyPage);
     WebElement editable = driver.findElement(By.id("content-editable-blank"));
 
@@ -96,7 +96,7 @@ public void testShouldBeAbleToTypeIntoContentEditableElementWithExistingValue()
   }
 
   @Test
-  public void testShouldBeAbleToTypeIntoTinyMCE() {
+  void testShouldBeAbleToTypeIntoTinyMCE() {
     driver.get(appServer.whereIs("tinymce.html"));
     driver.switchTo().frame("mce_0_ifr");
 

File: java/test/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -39,7 +39,7 @@
 import java.util.Random;
 import java.util.Set;
 
-public class CookieImplementationTest extends JupiterTestBase {
+class CookieImplementationTest extends JupiterTestBase {
 
   private DomainHelper domainHelper;
   private String cookiePage;
@@ -267,7 +267,7 @@ public void testsShouldNotGetCookiesRelatedToCurrentDomainWithoutLeadingPeriod()
   }
 
   @Test
-  public void testShouldBeAbleToIncludeLeadingPeriodInDomainName() {
+  void testShouldBeAbleToIncludeLeadingPeriodInDomainName() {
     String cookieName = "name";
     assertCookieIsNotPresentWithName(cookieName);
 
@@ -513,7 +513,7 @@ private void assertNoCookiesArePresent() {
     assertThat(driver.manage().getCookies()).isEmpty();
     String documentCookie = getDocumentCookieOrNull();
     if (documentCookie != null) {
-      assertThat(documentCookie).isEqualTo("");
+      assertThat(documentCookie).isEmpty();
     }
   }
 

File: java/test/org/openqa/selenium/DimensionTest.java
Patch:
@@ -26,16 +26,16 @@
  * Test WebDriver's Dimensions class.
  */
 @Tag("UnitTests")
-public class DimensionTest {
+class DimensionTest {
   @Test
-  public void testSimpleAssignment() {
+  void testSimpleAssignment() {
     Dimension d1 = new Dimension(100, 200);
     assertThat(d1.getHeight()).isEqualTo(200);
     assertThat(d1.getWidth()).isEqualTo(100);
   }
 
   @Test
-  public void testEquality() {
+  void testEquality() {
     Dimension d1 = new Dimension(100, 200);
     Dimension d2 = new Dimension(200, 200);
 

File: java/test/org/openqa/selenium/ElementAccessibleNameTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.drivers.Browser;
 
-public class ElementAccessibleNameTest extends JupiterTestBase {
+class ElementAccessibleNameTest extends JupiterTestBase {
 
   @Test
   @NotYetImplemented(Browser.FIREFOX)

File: java/test/org/openqa/selenium/ElementAriaRoleTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.drivers.Browser;
 
-public class ElementAriaRoleTest extends JupiterTestBase {
+class ElementAriaRoleTest extends JupiterTestBase {
 
   @Test
   @NotYetImplemented(Browser.FIREFOX)

File: java/test/org/openqa/selenium/ErrorsTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JupiterTestBase;
 
-public class ErrorsTest extends JupiterTestBase {
+class ErrorsTest extends JupiterTestBase {
 
   /**
    * This will trivially pass on browsers that do not support the onerror handler (e.g. Internet

File: java/test/org/openqa/selenium/LargeTests.java
Patch:
@@ -26,6 +26,6 @@
     ExecutingAsyncJavascriptTest.class
 })
 @Suite
-public class LargeTests {
+class LargeTests {
 
 }

File: java/test/org/openqa/selenium/PrintPageTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JupiterTestBase;
 
-public class PrintPageTest extends JupiterTestBase {
+class PrintPageTest extends JupiterTestBase {
   private static final String MAGIC_STRING = "JVBER";
   private PrintsPage printer;
 

File: java/test/org/openqa/selenium/ProxySettingTest.java
Patch:
@@ -58,7 +58,7 @@
 import static org.openqa.selenium.testing.drivers.Browser.FIREFOX;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-public class ProxySettingTest extends JupiterTestBase {
+class ProxySettingTest extends JupiterTestBase {
 
   private final List<TearDownFixture> tearDowns = new ArrayList<>();
 

File: java/test/org/openqa/selenium/ReferrerTest.java
Patch:
@@ -78,7 +78,7 @@
  * <p>Note: depending on the condition under test, the various pages may or may
  * not be served by the same server.
  */
-public class ReferrerTest {
+class ReferrerTest {
 
   @RegisterExtension
   static SeleniumExtension seleniumExtension = new SeleniumExtension();
@@ -128,7 +128,7 @@ private WebDriver createDriver(String pacUrl) {
    * does not have a proxy configured.
    */
   @Test
-  public void basicHistoryNavigationWithoutAProxy() {
+  void basicHistoryNavigationWithoutAProxy() {
     String page1Url = server1.whereIs(PAGE_1 + "?next=" + encode(server1.whereIs(PAGE_2)));
     String page2Url = server1.whereIs(PAGE_2 + "?next=" + encode(server1.whereIs(PAGE_3)));
 
@@ -145,7 +145,7 @@ public void basicHistoryNavigationWithoutAProxy() {
    * configured to use a proxy that permits direct access to that domain.
    */
   @Test
-  public void basicHistoryNavigationWithADirectProxy() {
+  void basicHistoryNavigationWithADirectProxy() {
     proxyServer.setPacFileContents("function FindProxyForURL(url, host) { return 'DIRECT'; }");
     WebDriver driver = createDriver(proxyServer.whereIs("/pac.js"));
 

File: java/test/org/openqa/selenium/SlowLoadingPageTest.java
Patch:
@@ -25,19 +25,19 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JupiterTestBase;
 
-public class SlowLoadingPageTest extends JupiterTestBase {
+class SlowLoadingPageTest extends JupiterTestBase {
   private static final long LOAD_TIME_IN_SECONDS = 3;
 
   @Test
-  public void testShouldBlockUntilPageLoads() {
+  void testShouldBlockUntilPageLoads() {
     long start = System.currentTimeMillis();
     driver.get(pages.sleepingPage + "?time=" + LOAD_TIME_IN_SECONDS);
     long now = System.currentTimeMillis();
     assertElapsed(LOAD_TIME_IN_SECONDS * 1000, now - start);
   }
 
   @Test
-  public void testShouldBlockUntilIFramesAreLoaded() {
+  void testShouldBlockUntilIFramesAreLoaded() {
     long start = System.currentTimeMillis();
     driver.get(pages.slowIframes);
     long now = System.currentTimeMillis();

File: java/test/org/openqa/selenium/StaleElementReferenceTest.java
Patch:
@@ -26,10 +26,10 @@
 import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
-public class StaleElementReferenceTest extends JupiterTestBase {
+class StaleElementReferenceTest extends JupiterTestBase {
 
   @Test
-  public void testOldPage() {
+  void testOldPage() {
     driver.get(pages.simpleTestPage);
     WebElement elem = driver.findElement(By.id("links"));
     driver.get(pages.xhtmlTestPage);

File: java/test/org/openqa/selenium/SvgDocumentTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
-public class SvgDocumentTest extends JupiterTestBase {
+class SvgDocumentTest extends JupiterTestBase {
 
   @Test
   @Ignore(value = HTMLUNIT, reason = "test should enable JavaScript")

File: java/test/org/openqa/selenium/SvgElementTest.java
Patch:
@@ -30,13 +30,13 @@
 
 import java.util.List;
 
-public class SvgElementTest extends JupiterTestBase {
+class SvgElementTest extends JupiterTestBase {
 
   @Test
   @Ignore(value = HTMLUNIT, reason="test should enable JavaScript")
   @NotYetImplemented(value = FIREFOX, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1428780")
   @NotYetImplemented(SAFARI)
-  public void testShouldClickOnGraphVisualElements() {
+  void testShouldClickOnGraphVisualElements() {
     driver.get(pages.svgPage);
     WebElement svg = driver.findElement(By.cssSelector("svg"));
 
@@ -68,7 +68,7 @@ private static WebElement findAppleElement(List<WebElement> textElements) {
 
   @Test
   @Ignore(value = HTMLUNIT, reason="test should enable JavaScript")
-  public void testShouldClickOnGraphTextElements() {
+  void testShouldClickOnGraphTextElements() {
     driver.get(pages.svgPage);
     WebElement svg = driver.findElement(By.cssSelector("svg"));
     List<WebElement> textElements = svg.findElements(By.cssSelector("text"));

File: java/test/org/openqa/selenium/TextPagesTest.java
Patch:
@@ -31,7 +31,7 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JupiterTestBase;
 
-public class TextPagesTest extends JupiterTestBase {
+class TextPagesTest extends JupiterTestBase {
 
   private String textPage;
 
@@ -41,7 +41,7 @@ public void setUp() {
   }
 
   @Test
-  public void testShouldBeAbleToLoadASimplePageOfText() {
+  void testShouldBeAbleToLoadASimplePageOfText() {
     driver.get(textPage);
     String source = driver.getPageSource();
     assertThat(source).contains("Test");

File: java/test/org/openqa/selenium/UnexpectedAlertBehaviorTest.java
Patch:
@@ -36,7 +36,7 @@
 import java.time.Duration;
 
 @Ignore(value = SAFARI, reason = "Does not support alerts yet")
-public class UnexpectedAlertBehaviorTest extends JupiterTestBase {
+class UnexpectedAlertBehaviorTest extends JupiterTestBase {
 
   @Test
   @Ignore(value = CHROME, reason = "Legacy behaviour, not W3C conformant")
@@ -111,5 +111,4 @@ private void runScenarioWithUnhandledAlert(
               .ignoring(UnhandledAlertException.class);
     wait1.until(elementTextToEqual(By.id("text"), expectedAlertText));
   }
-
 }

File: java/test/org/openqa/selenium/WaitingConditions.java
Patch:
@@ -29,8 +29,8 @@ private WaitingConditions() {
 
   private static abstract class ElementTextComparator implements ExpectedCondition<String> {
     private String lastText = "";
-    private WebElement element;
-    private String expectedValue;
+    private final WebElement element;
+    private final String expectedValue;
 
     ElementTextComparator(WebElement element, String expectedValue) {
       this.element = element;

File: java/test/org/openqa/selenium/WebElementTest.java
Patch:
@@ -25,17 +25,17 @@
 /**
  * Tests for generic WebElement.
  */
-public class WebElementTest extends JupiterTestBase {
+class WebElementTest extends JupiterTestBase {
 
   @Test
-  public void testElementImplementsWrapsDriver() {
+  void testElementImplementsWrapsDriver() {
     driver.get(pages.simpleTestPage);
     WebElement parent = driver.findElement(By.id("containsSomeDiv"));
     assertThat(parent).isInstanceOf(WrapsDriver.class);
   }
 
   @Test
-  public void testElementReturnsOriginDriver() {
+  void testElementReturnsOriginDriver() {
     driver.get(pages.simpleTestPage);
     WebElement parent = driver.findElement(By.id("containsSomeDiv"));
     assertThat(((WrapsDriver) parent).getWrappedDriver()).isSameAs(driver);

File: java/test/org/openqa/selenium/WrappedWebElement.java
Patch:
@@ -25,7 +25,7 @@
  */
 public class WrappedWebElement implements WebElement, WrapsElement {
 
-  private WebElement wrappedElement;
+  private final WebElement wrappedElement;
 
   public WrappedWebElement(WebElement element) {
     this.wrappedElement = element;

File: java/test/org/openqa/selenium/atoms/InputAtomsTest.java
Patch:
@@ -31,12 +31,12 @@
 /**
  * Sanity tests against the //javascript/webdriver/atoms:inputs target.
  */
-public class InputAtomsTest {
+class InputAtomsTest {
 
   private static final String RESOURCE_PATH = "/org/openqa/selenium/atoms/atoms_inputs.js";
 
   @Test
-  public void exportsTheExpectedNames() throws IOException {
+  void exportsTheExpectedNames() throws IOException {
     final String source = JavaScriptLoader.loadResource(RESOURCE_PATH);
     ContextFactory.getGlobal().call(new ContextAction<Object>() {
       private ScriptableObject global;
@@ -45,7 +45,7 @@ public void exportsTheExpectedNames() throws IOException {
       public Object run(Context context) {
         global = context.initStandardObjects();
 
-        // Check assumptions abut the global context, which the atoms assumes is a DOM window.
+        // Check assumptions abut the global context, which the atoms assume is a DOM window.
         assertThat(eval(context, "this.window=this;")).isEqualTo(global);
         assertThat(eval(context, "this")).isEqualTo(global);
         assertThat(eval(context, "window")).isEqualTo(global);

File: java/test/org/openqa/selenium/bidi/BiDiSessionTest.java
Patch:
@@ -27,12 +27,12 @@
 
 import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
 
-public class BiDiSessionTest {
+class BiDiSessionTest {
 
   private FirefoxDriver driver;
-  
+
   @Test
-  public void shouldBeAbleToCreateABiDiSession() {
+  void shouldBeAbleToCreateABiDiSession() {
     FirefoxOptions options = new FirefoxOptions();
     // Enable BiDi
     options.setCapability("webSocketUrl", true);

File: java/test/org/openqa/selenium/build/BazelBuild.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.logging.Logger;
 
 public class BazelBuild {
-  private static Logger log = Logger.getLogger(BazelBuild.class.getName());
+  private static final Logger log = Logger.getLogger(BazelBuild.class.getName());
 
   public static File findBinRoot(File dir) {
     if ("bin".equals(dir.getName())) {

File: java/test/org/openqa/selenium/build/Build.java
Patch:
@@ -31,9 +31,9 @@
 import java.util.logging.Logger;
 
 public class Build {
-  private static Logger log = Logger.getLogger(Build.class.getName());
+  private static final Logger log = Logger.getLogger(Build.class.getName());
 
-  private List<String> targets = new ArrayList<>();
+  private final List<String> targets = new ArrayList<>();
 
   public Build of(String... targets) {
     this.targets.addAll(Arrays.asList(targets));

File: java/test/org/openqa/selenium/chrome/ChromeDriverServiceTest.java
Patch:
@@ -31,10 +31,10 @@
 import java.time.Duration;
 
 @Tag("UnitTests")
-public class ChromeDriverServiceTest {
+class ChromeDriverServiceTest {
 
   @Test
-  public void builderPassesTimeoutToDriverService() {
+  void builderPassesTimeoutToDriverService() {
     File exe = new File("someFile");
     Duration defaultTimeout = Duration.ofSeconds(20);
     Duration customTimeout = Duration.ofSeconds(60);

File: java/test/org/openqa/selenium/chrome/ChromeOptionsFunctionalTest.java
Patch:
@@ -35,7 +35,7 @@
 import java.nio.file.Files;
 import java.util.Base64;
 
-public class ChromeOptionsFunctionalTest extends JupiterTestBase {
+class ChromeOptionsFunctionalTest extends JupiterTestBase {
 
   private static final String EXT_PATH = "common/extensions/webextensions-selenium-example.crx";
 
@@ -55,7 +55,7 @@ public void canStartChromeWithCustomOptions() {
   }
 
   @Test
-  public void optionsStayEqualAfterSerialization() {
+  void optionsStayEqualAfterSerialization() {
     ChromeOptions options1 = new ChromeOptions();
     ChromeOptions options2 = new ChromeOptions();
     assertThat(options2).isEqualTo(options1);

File: java/test/org/openqa/selenium/chromium/LoggingTest.java
Patch:
@@ -36,15 +36,15 @@
 import static org.openqa.selenium.devtools.events.CdpEventTypes.consoleEvent;
 import static org.openqa.selenium.devtools.events.CdpEventTypes.domMutation;
 
-public class LoggingTest extends JupiterTestBase {
+class LoggingTest extends JupiterTestBase {
 
   @BeforeEach
   public void checkAssumptions() {
     assumeThat(driver).isInstanceOf(HasLogEvents.class);
   }
 
   @Test
-  public void demonstrateLoggingWorks() throws InterruptedException {
+  void demonstrateLoggingWorks() throws InterruptedException {
     HasLogEvents logger = (HasLogEvents) driver;
 
     AtomicReference<ConsoleEvent> seen = new AtomicReference<>();
@@ -62,7 +62,7 @@ public void demonstrateLoggingWorks() throws InterruptedException {
   }
 
   @Test
-  public void watchDomMutations() throws InterruptedException {
+  void watchDomMutations() throws InterruptedException {
     HasLogEvents logger = (HasLogEvents) driver;
 
     AtomicReference<DomMutationEvent> seen = new AtomicReference<>();

File: java/test/org/openqa/selenium/devtools/CdpFacadeTest.java
Patch:
@@ -38,7 +38,7 @@
 import static org.openqa.selenium.remote.http.Contents.utf8String;
 import static org.openqa.selenium.testing.Safely.safelyCall;
 
-public class CdpFacadeTest extends DevToolsTestBase {
+class CdpFacadeTest extends DevToolsTestBase {
 
   private static NettyAppServer server;
 

File: java/test/org/openqa/selenium/devtools/ChangeUserAgentTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ChangeUserAgentTest extends DevToolsTestBase {
+class ChangeUserAgentTest extends DevToolsTestBase {
 
   @Test
   @NotYetImplemented(value = Browser.FIREFOX, reason = "Network interception not yet supported")

File: java/test/org/openqa/selenium/devtools/ConsoleEventsTest.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 
-public class ConsoleEventsTest extends DevToolsTestBase {
+class ConsoleEventsTest extends DevToolsTestBase {
 
   @Test
   @Ignore(gitHubActions = true)

File: java/test/org/openqa/selenium/devtools/JavascriptExceptionsTest.java
Patch:
@@ -31,7 +31,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class JavascriptExceptionsTest extends DevToolsTestBase {
+class JavascriptExceptionsTest extends DevToolsTestBase {
 
   @Test
   @NotYetImplemented(value = Browser.FIREFOX, reason = "`Log` domain not yet supported")

File: java/test/org/openqa/selenium/devtools/WindowSwitchingTest.java
Patch:
@@ -29,7 +29,7 @@
 
 import java.util.List;
 
-public class WindowSwitchingTest extends DevToolsTestBase {
+class WindowSwitchingTest extends DevToolsTestBase {
 
   @Test
   @Ignore(FIREFOX)

File: java/test/org/openqa/selenium/docker/internal/ReferenceTest.java
Patch:
@@ -26,7 +26,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ReferenceTest {
+class ReferenceTest {
 
   public static Stream<Arguments> data() {
     String sha256 = "sha256:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff";
@@ -62,14 +62,14 @@ public static Stream<Arguments> data() {
 
   @ParameterizedTest
   @MethodSource("data")
-  public void shouldEvaluateValidInputsAsReferences(String input, Reference expected, String familiarName) {
+  void shouldEvaluateValidInputsAsReferences(String input, Reference expected, String familiarName) {
     Reference seen = Reference.parse(input);
     assertThat(seen).describedAs("%s -> %s", input, expected).isEqualTo(expected);
   }
 
   @ParameterizedTest
   @MethodSource("data")
-  public void shouldEvaluateReferencesFamiliarName(String input, Reference expected, String familiarName) {
+  void shouldEvaluateReferencesFamiliarName(String input, Reference expected, String familiarName) {
     Reference seen = Reference.parse(input);
     assertThat(seen.getFamiliarName()).describedAs("%s -> %s", input, familiarName)
       .isEqualTo(familiarName);

File: java/test/org/openqa/selenium/docker/v1_41/ListImagesTest.java
Patch:
@@ -34,10 +34,10 @@
 import static org.openqa.selenium.json.Json.MAP_TYPE;
 import static org.openqa.selenium.remote.http.Contents.utf8String;
 
-public class ListImagesTest {
+class ListImagesTest {
 
   @Test
-  public void shouldReturnImageIfTagIsPresent() {
+  void shouldReturnImageIfTagIsPresent() {
 
     HttpHandler handler = req -> {
       String filters = req.getQueryParameter("filters");

File: java/test/org/openqa/selenium/edge/EdgeOptionsFunctionalTest.java
Patch:
@@ -35,7 +35,7 @@
 import java.nio.file.Files;
 import java.util.Base64;
 
-public class EdgeOptionsFunctionalTest extends JupiterTestBase {
+class EdgeOptionsFunctionalTest extends JupiterTestBase {
 
   private static final String EXT_PATH = "common/extensions/webextensions-selenium-example.crx";
 
@@ -52,7 +52,7 @@ public void canStartEdgeWithCustomOptions() {
   }
 
   @Test
-  public void optionsStayEqualAfterSerialization() {
+  void optionsStayEqualAfterSerialization() {
     EdgeOptions options1 = new EdgeOptions();
     EdgeOptions options2 = new EdgeOptions();
     assertThat(options2).isEqualTo(options1);

File: java/test/org/openqa/selenium/environment/DomainHelper.java
Patch:
@@ -24,7 +24,7 @@
 
 public class DomainHelper {
 
-  private AppServer appServer;
+  private final AppServer appServer;
 
   public DomainHelper(AppServer appServer) {
     this.appServer = appServer;

File: java/test/org/openqa/selenium/environment/InProcessTestEnvironment.java
Patch:
@@ -22,7 +22,7 @@
 
 public class InProcessTestEnvironment implements TestEnvironment {
 
-  private AppServer appServer;
+  private final AppServer appServer;
 
   public InProcessTestEnvironment() {
     appServer = new NettyAppServer();

File: java/test/org/openqa/selenium/environment/webserver/CommonWebResources.java
Patch:
@@ -32,7 +32,7 @@
 
 import static org.openqa.selenium.build.InProject.locate;
 
-public class CommonWebResources implements Routable {
+class CommonWebResources implements Routable {
 
   private final Routable delegate;
 

File: java/test/org/openqa/selenium/environment/webserver/CookieHandler.java
Patch:
@@ -39,7 +39,7 @@
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME;
 
-public class CookieHandler implements HttpHandler {
+class CookieHandler implements HttpHandler {
 
   private static final String EPOCH_START = RFC_1123_DATE_TIME.format(
     ZonedDateTime.ofInstant(Instant.ofEpochMilli(0), ZoneId.of("UTC")));

File: java/test/org/openqa/selenium/environment/webserver/CreatePageHandler.java
Patch:
@@ -38,7 +38,7 @@
  * {"content" : "... code of the page..."}
  * Response body contains the address of the created page.
  */
-public class CreatePageHandler implements HttpHandler {
+class CreatePageHandler implements HttpHandler {
 
   private final Path tempPageDir;
   private final String hostname;

File: java/test/org/openqa/selenium/environment/webserver/EchoHandler.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.StreamSupport;
 
-public class EchoHandler implements HttpHandler {
+class EchoHandler implements HttpHandler {
 
   private static final String EPOCH_START = RFC_1123_DATE_TIME.format(
     ZonedDateTime.ofInstant(Instant.ofEpochMilli(0), ZoneId.of("UTC")));
@@ -47,7 +47,7 @@ public class EchoHandler implements HttpHandler {
   public HttpResponse execute(HttpRequest request) throws UncheckedIOException {
     HttpResponse response = new HttpResponse();
     response.setHeader("Content-Type", "text/html");
-    //Dont Cache Anything  at the browser
+    //Don't Cache Anything  at the browser
     response.setHeader("Cache-Control","no-cache");
     response.setHeader("Pragma","no-cache");
     response.setHeader ("Expires", EPOCH_START);

File: java/test/org/openqa/selenium/environment/webserver/EncodingHandler.java
Patch:
@@ -26,7 +26,7 @@
 import static java.nio.charset.StandardCharsets.UTF_16LE;
 import static org.openqa.selenium.remote.http.Contents.string;
 
-public class EncodingHandler implements HttpHandler {
+class EncodingHandler implements HttpHandler {
 
   @Override
   public HttpResponse execute(HttpRequest req) throws UncheckedIOException {

File: java/test/org/openqa/selenium/environment/webserver/GeneratedJsTestHandler.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.io.UncheckedIOException;
 
-public class GeneratedJsTestHandler implements HttpHandler {
+class GeneratedJsTestHandler implements HttpHandler {
 
   private final String stripPrefix;
 

File: java/test/org/openqa/selenium/environment/webserver/NettyAppServerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.environment.webserver;
 
-public class NettyAppServerTest extends AppServerTestBase {
+class NettyAppServerTest extends AppServerTestBase {
 
   @Override
   protected AppServer createAppServer() {

File: java/test/org/openqa/selenium/environment/webserver/PageHandler.java
Patch:
@@ -25,7 +25,7 @@
 
 import static org.openqa.selenium.remote.http.Contents.utf8String;
 
-public class PageHandler implements HttpHandler {
+class PageHandler implements HttpHandler {
 
   @Override
   public HttpResponse execute(HttpRequest req) throws UncheckedIOException {

File: java/test/org/openqa/selenium/environment/webserver/ServletServer.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.openqa.selenium.environment.webserver;
 
-public class ServletServer {
+class ServletServer {
+
 
-  
 
 }

File: java/test/org/openqa/selenium/environment/webserver/UploadHandler.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-public class UploadHandler implements HttpHandler {
+class UploadHandler implements HttpHandler {
 
   @Override
   public HttpResponse execute(HttpRequest req) throws UncheckedIOException {

File: java/test/org/openqa/selenium/environment/webserver/Utf8Handler.java
Patch:
@@ -29,7 +29,7 @@
 
 import static java.nio.charset.StandardCharsets.UTF_8;
 
-public class Utf8Handler implements HttpHandler {
+class Utf8Handler implements HttpHandler {
 
   private final Path webSrc;
   private final String stripPrefix;

File: java/test/org/openqa/selenium/events/ZeroMqEventBusTest.java
Patch:
@@ -30,10 +30,10 @@
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ZeroMqEventBusTest {
+class ZeroMqEventBusTest {
 
   @Test
-  public void shouldEnsureMessagesRequireSecret() throws InterruptedException, ExecutionException, TimeoutException {
+  void shouldEnsureMessagesRequireSecret() throws InterruptedException, ExecutionException, TimeoutException {
     String publish = "inproc://zmqebt-publish";
     String subscribe = "inproc://zmqebt-subscribe";
 

File: java/test/org/openqa/selenium/firefox/ExecutableTest.java
Patch:
@@ -28,7 +28,7 @@
 import static org.junit.jupiter.api.Assumptions.assumeTrue;
 
 @Tag("UnitTests")
-public class ExecutableTest {
+class ExecutableTest {
 
   private String binaryPath;
 
@@ -43,14 +43,14 @@ public void setUp() {
   }
 
   @Test
-  public void canFindVersion() {
+  void canFindVersion() {
     Executable exe = new Executable(new File(binaryPath));
     System.out.println(exe.getVersion());
     assertThat(exe.getVersion()).isNotEmpty().isNotEqualTo("1000.0 unknown");
   }
 
   @Test
-  public void canFindChannel() {
+  void canFindChannel() {
     Executable exe = new Executable(new File(binaryPath));
     System.out.println(exe.getChannel());
     assertThat(exe.getChannel()).isNotNull();

File: java/test/org/openqa/selenium/firefox/GeckoDriverServiceTest.java
Patch:
@@ -31,10 +31,10 @@
 import static org.mockito.Mockito.verify;
 
 @Tag("UnitTests")
-public class GeckoDriverServiceTest {
+class GeckoDriverServiceTest {
 
   @Test
-  public void builderPassesTimeoutToDriverService() {
+  void builderPassesTimeoutToDriverService() {
     File exe = new File("someFile");
     Duration defaultTimeout = Duration.ofSeconds(20);
     Duration customTimeout = Duration.ofSeconds(60);

File: java/test/org/openqa/selenium/firefox/MarionetteTest.java
Patch:
@@ -39,7 +39,7 @@
 import static org.openqa.selenium.remote.CapabilityType.ACCEPT_INSECURE_CERTS;
 import static org.openqa.selenium.remote.CapabilityType.PAGE_LOAD_STRATEGY;
 
-public class MarionetteTest extends JupiterTestBase {
+class MarionetteTest extends JupiterTestBase {
 
   private static final String EXT_PATH = "common/extensions/webextensions-selenium-example.xpi";
 

File: java/test/org/openqa/selenium/firefox/RemoteFirefoxDriverTest.java
Patch:
@@ -35,7 +35,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.junit.jupiter.api.Assertions.fail;
 
-public class RemoteFirefoxDriverTest extends JupiterTestBase {
+class RemoteFirefoxDriverTest extends JupiterTestBase {
 
   @Test
   @NoDriverAfterTest
@@ -52,10 +52,10 @@ public void shouldAllowRemoteWebDriverBuilderToUseHasExtensions() {
   }
 
   @Test
-  public void shouldTakeFullPageScreenshot() {
+  void shouldTakeFullPageScreenshot() {
     File tempFile = ((HasFullPageScreenshot) driver).getFullPageScreenshotAs(OutputType.FILE);
     assertThat(tempFile.exists()).isTrue();
-    assertThat(tempFile.length()).isGreaterThan(0);
+    assertThat(tempFile).isNotEmpty();
   }
 
   @Test

File: java/test/org/openqa/selenium/grid/MainTest.java
Patch:
@@ -27,7 +27,7 @@
 import java.io.UnsupportedEncodingException;
 import java.nio.charset.StandardCharsets;
 
-public class MainTest {
+class MainTest {
 
   ByteArrayOutputStream out;
   ByteArrayOutputStream err;
@@ -47,13 +47,13 @@ private PrintStream toPrintStream(ByteArrayOutputStream baos) {
   }
 
   @Test
-  public void shouldPrintAListOfCommandsWhenStartedWithoutOptions() {
+  void shouldPrintAListOfCommandsWhenStartedWithoutOptions() {
     new Main(toPrintStream(out), toPrintStream(err), new String[]{}).go();
     assertThat(out.toString()).contains("A list of all the commands available");
   }
 
   @Test
-  public void shouldPrintAListOfCommandsWhenStartedWithHelpOption() {
+  void shouldPrintAListOfCommandsWhenStartedWithHelpOption() {
     new Main(toPrintStream(out), toPrintStream(err), new String[]{"--help"}).go();
     assertThat(out.toString()).contains("A list of all the commands available");
   }

File: java/test/org/openqa/selenium/grid/config/ConcatenatingConfigTest.java
Patch:
@@ -23,10 +23,10 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ConcatenatingConfigTest {
+class ConcatenatingConfigTest {
 
   @Test
-  public void shouldReturnSectionNames() {
+  void shouldReturnSectionNames() {
     Config config = new ConcatenatingConfig(
       "FOO",
       '_',
@@ -41,7 +41,7 @@ public void shouldReturnSectionNames() {
   }
 
   @Test
-  public void shouldReturnOptionNamesInSection() {
+  void shouldReturnOptionNamesInSection() {
     Config config = new ConcatenatingConfig(
       "FOO",
       '_',

File: java/test/org/openqa/selenium/grid/config/JsonConfigTest.java
Patch:
@@ -24,10 +24,10 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class JsonConfigTest {
+class JsonConfigTest {
 
   @Test
-  public void shouldUseATableAsASection() {
+  void shouldUseATableAsASection() {
     String raw = "{\"cheeses\": {\"selected\": \"brie\"}}";
     Config config = new JsonConfig(new StringReader(raw));
 

File: java/test/org/openqa/selenium/grid/config/TomlConfigTest.java
Patch:
@@ -27,18 +27,18 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class TomlConfigTest {
+class TomlConfigTest {
 
   @Test
-  public void shouldUseATableAsASection() {
+  void shouldUseATableAsASection() {
     String raw = "[cheeses]\nselected=brie";
     Config config = new TomlConfig(new StringReader(raw));
 
     assertThat(config.get("cheeses", "selected")).isEqualTo(Optional.of("brie"));
   }
 
   @Test
-  public void shouldContainConfigFromArrayOfTables() {
+  void shouldContainConfigFromArrayOfTables() {
     String[] rawConfig = new String[]{
       "[cheeses]",
       "default = manchego",

File: java/test/org/openqa/selenium/grid/data/NodeStatusTest.java
Patch:
@@ -33,10 +33,10 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.openqa.selenium.grid.data.Availability.UP;
 
-public class NodeStatusTest {
+class NodeStatusTest {
 
   @Test
-  public void ensureRoundTripWorks() throws URISyntaxException {
+  void ensureRoundTripWorks() throws URISyntaxException {
     ImmutableCapabilities stereotype = new ImmutableCapabilities("cheese", "brie");
     NodeId nodeId = new NodeId(UUID.randomUUID());
     NodeStatus status = new NodeStatus(

File: java/test/org/openqa/selenium/grid/gridui/Urls.java
Patch:
@@ -22,7 +22,7 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 
-public class Urls {
+class Urls {
 
   private Urls() {
     // Utility class

File: java/test/org/openqa/selenium/grid/router/DistributedCdpTest.java
Patch:
@@ -49,7 +49,7 @@
 import java.util.Map;
 import java.util.Objects;
 
-public class DistributedCdpTest {
+class DistributedCdpTest {
 
   @BeforeAll
   public static void ensureBrowserIsCdpEnabled() {
@@ -59,7 +59,7 @@ public static void ensureBrowserIsCdpEnabled() {
   }
 
   @Test
-  public void ensureBasicFunctionality() {
+  void ensureBasicFunctionality() {
     Browser browser = Browser.detect();
 
     Deployment deployment = DeploymentTypes.DISTRIBUTED.start(

File: java/test/org/openqa/selenium/grid/router/StressTest.java
Patch:
@@ -49,7 +49,7 @@
 import static java.util.concurrent.TimeUnit.MINUTES;
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class StressTest {
+class StressTest {
 
   private final ExecutorService executor =
     Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);
@@ -94,7 +94,7 @@ public void tearDown() {
   }
 
   @Test
-  public void multipleSimultaneousSessions() throws Exception {
+  void multipleSimultaneousSessions() throws Exception {
     assertThat(server.isStarted()).isTrue();
 
     CompletableFuture<?>[] futures = new CompletableFuture<?>[10];

File: java/test/org/openqa/selenium/grid/security/BasicAuthenticationFilterTest.java
Patch:
@@ -29,10 +29,10 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.openqa.selenium.remote.http.HttpMethod.GET;
 
-public class BasicAuthenticationFilterTest {
+class BasicAuthenticationFilterTest {
 
   @Test
-  public void shouldAskAnUnauthenticatedRequestToAuthenticate() {
+  void shouldAskAnUnauthenticatedRequestToAuthenticate() {
     HttpHandler handler = new BasicAuthenticationFilter("cheese", "cheddar").apply(req -> new HttpResponse());
 
     HttpResponse res = handler.execute(new HttpRequest(GET, "/"));
@@ -43,7 +43,7 @@ public void shouldAskAnUnauthenticatedRequestToAuthenticate() {
   }
 
   @Test
-  public void shouldAllowAuthenticatedTrafficThrough() {
+  void shouldAllowAuthenticatedTrafficThrough() {
     HttpHandler handler = new BasicAuthenticationFilter("cheese", "cheddar").apply(req -> new HttpResponse());
 
     HttpResponse res = handler.execute(

File: java/test/org/openqa/selenium/grid/server/BaseServerOptionsTest.java
Patch:
@@ -24,10 +24,10 @@
 
 import java.util.Map;
 
-public class BaseServerOptionsTest {
+class BaseServerOptionsTest {
 
   @Test
-  public void readingThePortTwiceShouldGiveTheSameResult() {
+  void readingThePortTwiceShouldGiveTheSameResult() {
     BaseServerOptions options = new BaseServerOptions(
       new MapConfig(Map.of("server", Map.of("port", -1))));
 
@@ -38,7 +38,7 @@ public void readingThePortTwiceShouldGiveTheSameResult() {
   }
 
   @Test
-  public void serverConfigBindsToHostByDefault() {
+  void serverConfigBindsToHostByDefault() {
     BaseServerOptions options = new BaseServerOptions(
       new MapConfig(Map.of("server", Map.of("port", 4444))));
 

File: java/test/org/openqa/selenium/grid/server/NetworkOptionsTest.java
Patch:
@@ -42,14 +42,14 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.openqa.selenium.remote.http.HttpMethod.GET;
 
-public class NetworkOptionsTest {
+class NetworkOptionsTest {
   /**
    * An initial version of our wrapper around OpenTracing caused exceptions
    * to be thrown when spans were closed prematurely and out of order. This
    * test was written to both demonstrate that problem and to resolve it.
    */
   @Test
-  public void triggerFailureInTracing() {
+  void triggerFailureInTracing() {
     // I better explain this. The only hint that we have that our use of
     // OpenTelemetry is wrong is found in the log message that the
     // io.grpc.Context generates when `Context.detach` is called in an
@@ -87,7 +87,7 @@ public void triggerFailureInTracing() {
   private static class CapturingHandler extends Handler {
 
     private final String loggerNamePrefix;
-    private Map<Level, List<String>> recordedMessages = new HashMap<>();
+    private final Map<Level, List<String>> recordedMessages = new HashMap<>();
 
     public CapturingHandler(String loggerNamePrefix) {
       this.loggerNamePrefix = loggerNamePrefix;

File: java/test/org/openqa/selenium/grid/server/ServletRequestWrappingHttpRequestTest.java
Patch:
@@ -25,10 +25,10 @@
 import org.openqa.testing.FakeHttpServletRequest;
 import org.openqa.testing.UrlInfo;
 
-public class ServletRequestWrappingHttpRequestTest {
+class ServletRequestWrappingHttpRequestTest {
 
   @Test
-  public void shouldNotExtractQueryParametersFromPostedBody() {
+  void shouldNotExtractQueryParametersFromPostedBody() {
     FakeHttpServletRequest request = new FakeHttpServletRequest(
         "GET",
         new UrlInfo("http://example.com", "/", "some-url"));
@@ -39,7 +39,7 @@ public void shouldNotExtractQueryParametersFromPostedBody() {
   }
 
   @Test
-  public void shouldExtractQueryParametersFromQueryString() {
+  void shouldExtractQueryParametersFromQueryString() {
     FakeHttpServletRequest request = new FakeHttpServletRequest(
         "GET",
         new UrlInfo("http://example.com", "/", "some-url", "cheese=cheddar"));

File: java/test/org/openqa/selenium/grid/testing/EitherAssert.java
Patch:
@@ -42,4 +42,4 @@ public EitherAssert<A, B> isRight() {
     }
     return this;
   }
-}
\ No newline at end of file
+}

File: java/test/org/openqa/selenium/grid/web/ReverseProxyHandlerTest.java
Patch:
@@ -46,7 +46,7 @@
 import static org.openqa.selenium.remote.http.Contents.bytes;
 
 
-public class ReverseProxyHandlerTest {
+class ReverseProxyHandlerTest {
 
   private Server server;
   private Tracer tracer = DefaultTestTracer.createTracer();
@@ -63,7 +63,7 @@ public void stopServer() {
   }
 
   @Test
-  public void shouldForwardRequestsToEndPoint() {
+  void shouldForwardRequestsToEndPoint() {
     HttpHandler handler = new ReverseProxyHandler(tracer, factory.createClient(server.url));
     HttpRequest req = new HttpRequest(HttpMethod.GET, "/ok");
     req.addHeader("X-Cheese", "Cake");

File: java/test/org/openqa/selenium/grid/web/TeeReaderTest.java
Patch:
@@ -28,10 +28,10 @@
 import java.io.StringWriter;
 
 
-public class TeeReaderTest {
+class TeeReaderTest {
 
   @Test
-  public void shouldDuplicateStreams() {
+  void shouldDuplicateStreams() {
     String expected = "{\"key\": \"value\"}";
     Reader source = new StringReader(expected);
 

File: java/test/org/openqa/selenium/html5/AppCacheTest.java
Patch:
@@ -27,15 +27,15 @@
 
 import java.time.Duration;
 
-public class AppCacheTest extends JupiterTestBase {
+class AppCacheTest extends JupiterTestBase {
 
   @BeforeEach
   public void checkIsApplicationCache() {
     assumeTrue(driver instanceof ApplicationCache);
   }
 
   @Test
-  public void testAppCacheStatus() {
+  void testAppCacheStatus() {
     driver.get(pages.html5Page);
     driver.manage().timeouts().implicitlyWait(Duration.ofMillis(2000));
 
@@ -47,7 +47,7 @@ public void testAppCacheStatus() {
   }
 
   @Test
-  public void testBrowserLoadsFromCacheWhenOffline() {
+  void testBrowserLoadsFromCacheWhenOffline() {
     driver.get(pages.html5Page);
     driver.get(pages.formPage);
   }

File: java/test/org/openqa/selenium/html5/LocationContextTest.java
Patch:
@@ -28,15 +28,15 @@
 import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
-public class LocationContextTest extends JupiterTestBase {
+class LocationContextTest extends JupiterTestBase {
 
   @BeforeEach
   public void hasLocationContext() {
     assumeTrue(driver instanceof LocationContext);
   }
 
   @Test
-  public void testShouldSetAndGetLatitude() {
+  void testShouldSetAndGetLatitude() {
     driver.get(pages.html5Page);
 
     ((LocationContext) driver).setLocation(new Location(40.714353, -74.005973, 0.056747));
@@ -46,7 +46,7 @@ public void testShouldSetAndGetLatitude() {
   }
 
   @Test
-  public void testShouldSetAndGetLongitude() {
+  void testShouldSetAndGetLongitude() {
     driver.get(pages.html5Page);
 
     ((LocationContext) driver).setLocation(new Location(40.714353, -74.005973, 0.056747));

File: java/test/org/openqa/selenium/ie/InternetExplorerDriverServiceTest.java
Patch:
@@ -31,10 +31,10 @@
 import java.time.Duration;
 
 @Tag("UnitTests")
-public class InternetExplorerDriverServiceTest {
+class InternetExplorerDriverServiceTest {
 
   @Test
-  public void builderPassesTimeoutToDriverService() {
+  void builderPassesTimeoutToDriverService() {
     File exe = new File("someFile");
     Duration defaultTimeout = Duration.ofSeconds(20);
     Duration customTimeout = Duration.ofSeconds(60);

File: java/test/org/openqa/selenium/interactions/CompositeActionTest.java
Patch:
@@ -25,10 +25,10 @@
 import org.mockito.Mockito;
 
 @Tag("UnitTests")
-public class CompositeActionTest {
+class CompositeActionTest {
 
   @Test
-  public void invokingActions() {
+  void invokingActions() {
     CompositeAction sequence = new CompositeAction();
     final Action dummyAction1 = mock(Action.class);
     final Action dummyAction2 = mock(Action.class, "dummy2");

File: java/test/org/openqa/selenium/interactions/InteractionTests.java
Patch:
@@ -25,5 +25,5 @@
   CompositeActionTest.class,
   DragAndDropTest.class})
 @Suite
-public class InteractionTests {
+class InteractionTests {
 }

File: java/test/org/openqa/selenium/interactions/PointerInputTest.java
Patch:
@@ -35,10 +35,10 @@
 import java.util.Map;
 
 @Tag("UnitTests")
-public class PointerInputTest {
+class PointerInputTest {
 
   @Test
-  public void encodesWrappedElementInMoveOrigin() {
+  void encodesWrappedElementInMoveOrigin() {
     RemoteWebElement innerElement = new RemoteWebElement();
     innerElement.setId("12345");
     WebElement element = new WrappedWebElement(innerElement);
@@ -60,7 +60,7 @@ public void encodesWrappedElementInMoveOrigin() {
   }
 
   @Test
-  public void acceptsPointerEventProperties() {
+  void acceptsPointerEventProperties() {
     PointerInput pen = new PointerInput(PointerInput.Kind.PEN, "my pen");
     Interaction pointerDown = pen.createPointerDown(0, PointerInput.eventProperties().setHeight(12).setTiltX(30));
 

File: java/src/org/openqa/selenium/devtools/NetworkInterceptor.java
Patch:
@@ -99,6 +99,7 @@ public NetworkInterceptor(WebDriver driver, Filter filter) {
   @Override
   public void close() {
     tools.getDomains().network().resetNetworkFilter();
+    tools.getDomains().network().markNetworkInterceptorClosed();
   }
 
   protected HttpMethod convertFromCdpHttpMethod(String method) {

File: java/src/org/openqa/selenium/Platform.java
Patch:
@@ -58,7 +58,7 @@ public String toString() {
   /**
    * For versions of Windows that "feel like" Windows Vista.
    */
-  VISTA("windows 7", "win7") {
+  VISTA("windows vista", "Windows Server 2008") {
     @Override
     public Platform family() {
       return WINDOWS;

File: java/test/org/openqa/selenium/PlatformTest.java
Patch:
@@ -100,7 +100,7 @@ public void testShouldIdentifyXPVariants() {
 
   @Test
   public void testShouldIdentifyVistaVariants() {
-    assertAllAre(Platform.VISTA, "Windows Vista", "windows server 2008", "Windows 7", "win7");
+    assertAllAre(Platform.VISTA, "Windows Vista", "windows server 2008");
   }
 
   @Test

File: java/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java
Patch:
@@ -94,7 +94,7 @@ public void testExtractDebugLogLevelFromCapabilityMap() {
   @Test
   public void shouldAutomaticallyConvertPlatformFromStringToEnum() {
     DesiredCapabilities caps = new DesiredCapabilities();
-    caps.setCapability(CapabilityType.PLATFORM_NAME, "windows 7");
+    caps.setCapability(CapabilityType.PLATFORM_NAME, "Windows Server 2008");
     assertThat(caps.getCapability(CapabilityType.PLATFORM_NAME)).isEqualTo(Platform.VISTA);
     caps.setCapability(CapabilityType.PLATFORM_NAME, "win8.1");
     assertThat(caps.getCapability(CapabilityType.PLATFORM_NAME)).isEqualTo(Platform.WIN8_1);

File: java/test/org/openqa/selenium/ElementDomPropertyTest.java
Patch:
@@ -188,7 +188,6 @@ public void testMultiplePropertyShouldBeTrueWhenSelectHasMultipleWithValueAsSome
   }
 
   @Test
-  @NotYetImplemented(FIREFOX)
   public void testGetValueOfUserDefinedProperty() {
     driver.get(pages.userDefinedProperty);
     WebElement element = driver.findElement(By.id("d"));

File: java/test/org/openqa/selenium/testing/IgnoreComparator.java
Patch:
@@ -45,7 +45,7 @@ public boolean shouldIgnore(Ignore ignore) {
     return ignore != null && shouldIgnore(Stream.of(ignore));
   }
 
-  private boolean shouldIgnore(Stream<Ignore> ignoreList) {
+  public boolean shouldIgnore(Stream<Ignore> ignoreList) {
     return ignoreList.anyMatch(
       driver -> (ignored.contains(driver.value()) || driver.value() == Browser.ALL)
                 && ((!driver.travis() || TestUtilities.isOnTravis())

File: java/src/org/openqa/selenium/WebElement.java
Patch:
@@ -140,7 +140,7 @@ default String getDomAttribute(String name) {
    * neither exists, null is returned.
    * <p>
    * The "style" attribute is converted as best can be to a text representation with a trailing
-   * semi-colon.
+   * semicolon.
    * <p>
    * The following are deemed to be "boolean" attributes, and will return either "true" or null:
    * <p>

File: java/src/org/openqa/selenium/grid/data/SessionRequest.java
Patch:
@@ -84,7 +84,7 @@ public SessionRequest(
     Map<String, Object> metadata,
     Map<String, String> traceHeaders) {
     this.requestId = Require.nonNull("Request ID", requestId);
-    this.enqueued = Require.nonNull("Enqueud time", enqueued);
+    this.enqueued = Require.nonNull("Enqueued time", enqueued);
     this.downstreamDialects = unmodifiableSet(
       new HashSet<>(Require.nonNull("Downstream dialects", downstreamDialects)));
     this.desiredCapabilities = unmodifiableSet(

File: java/src/org/openqa/selenium/grid/sessionmap/jdbc/JdbcBackedSessionMap.java
Patch:
@@ -117,7 +117,7 @@ public static SessionMap create(Config config) {
   public boolean isReady() {
     try {
       return !connection.isClosed();
-    } catch (SQLException throwables) {
+    } catch (SQLException throwable) {
       return false;
     }
   }

File: java/src/org/openqa/selenium/remote/http/jdk/JdkHttpClient.java
Patch:
@@ -168,7 +168,7 @@ public WebSocket send(Message message) {
           CloseMessage closeMessage = (CloseMessage) message;
           makeCall = () -> underlyingSocket.sendClose(closeMessage.code(), closeMessage.reason());
         } else {
-          throw new IllegalArgumentException("Unsupport message type: " + message);
+          throw new IllegalArgumentException("Unsupported message type: " + message);
         }
 
         synchronized (underlyingSocket) {

File: java/test/com/thoughtworks/selenium/corebased/TestGet.java
Patch:
@@ -31,7 +31,7 @@ public void testGet() {
     selenium.open("test_get.html");
     // IE uppercases the property names of the style.
     // Firefox lowercases the property names of the style.
-    // IE omits the trailing semi-colon.
+    // IE omits the trailing semicolon.
     verifyTrue(Pattern.compile("(width|WIDTH): 644px; (height|HEIGHT): 41px(;?)")
         .matcher(selenium.getAttribute("//img[@alt='banner']@style")).find());
     // This asserts on the current behavior of selArrayToString(). Commas and

File: java/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -171,7 +171,7 @@ public void testShouldRetainTheFormattingOfTextWithinAPreElement() {
 
   @Test
   @NotYetImplemented(value = SAFARI, reason = "getText does not normalize spaces")
-  public void testShouldRetainTheFormatingOfTextWithinAPreElementThatIsWithinARegularBlock() {
+  public void testShouldRetainTheFormattingOfTextWithinAPreElementThatIsWithinARegularBlock() {
     driver.get(pages.simpleTestPage);
     String text = driver.findElement(By.id("div-with-pre")).getText();
 

File: java/test/org/openqa/selenium/json/JsonTest.java
Patch:
@@ -336,7 +336,7 @@ public void shouldConvertAnArrayBackIntoAnArray() {
   }
 
   @Test
-  public void sShouldBeAbleToReconsituteASessionId() {
+  public void sShouldBeAbleToReconstituteASessionId() {
     String json = new Json().toJson(new SessionId("id"));
     SessionId sessionId = new Json().toType(json, SessionId.class);
 

File: java/test/org/openqa/selenium/WindowTest.java
Patch:
@@ -77,7 +77,6 @@ public void testSetsTheSizeOfTheCurrentWindowFromIframe() {
   }
 
   @Test
-  @Ignore(value = FIREFOX, gitHubActions = true, issue = "https://github.com/mozilla/geckodriver/issues/2042")
   public void testGetsThePositionOfTheCurrentWindow() {
     // Window position is undefined on ANDROID (and most mobile platforms
     // though others aren't defined in org.openqa.selenium.Platform).
@@ -92,6 +91,7 @@ public void testGetsThePositionOfTheCurrentWindow() {
   }
 
   @Test
+  @Ignore(value = FIREFOX, gitHubActions = true, issue = "https://github.com/mozilla/geckodriver/issues/2042")
   public void testSetsThePositionOfTheCurrentWindow() {
     // Browser window cannot be resized or moved on ANDROID (and most mobile platforms
     // though others aren't defined in org.openqa.selenium.Platform).

File: java/test/org/openqa/selenium/WindowTest.java
Patch:
@@ -77,6 +77,7 @@ public void testSetsTheSizeOfTheCurrentWindowFromIframe() {
   }
 
   @Test
+  @Ignore(value = FIREFOX, gitHubActions = true, issue = "https://github.com/mozilla/geckodriver/issues/2042")
   public void testGetsThePositionOfTheCurrentWindow() {
     // Window position is undefined on ANDROID (and most mobile platforms
     // though others aren't defined in org.openqa.selenium.Platform).

File: java/src/org/openqa/selenium/grid/data/DefaultSlotMatcher.java
Patch:
@@ -103,7 +103,7 @@ private Boolean initialMatch(Capabilities stereotype, Capabilities capabilities)
         }
       })
       .reduce(Boolean::logicalAnd)
-      .orElse(false);
+      .orElse(true);
   }
 
   private Boolean platformVersionMatch(Capabilities stereotype, Capabilities capabilities) {

File: java/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -79,8 +79,6 @@ public class ErrorCodes {
   public static final int UNEXPECTED_ALERT_PRESENT = 26;
   public static final int NO_ALERT_PRESENT = 27;
   public static final int ASYNC_SCRIPT_TIMEOUT = 28;
-  public static final int IME_NOT_AVAILABLE = 30;
-  public static final int IME_ENGINE_ACTIVATION_FAILED = 31;
   public static final int INVALID_SELECTOR_ERROR = 32;
   public static final int SESSION_NOT_CREATED = 33;
   public static final int MOVE_TARGET_OUT_OF_BOUNDS = 34;

File: java/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -705,8 +705,7 @@ private void checkChromeW3CFalse(Capabilities capabilities) {
         w3c = rawW3C == null || Boolean.parseBoolean(String.valueOf(rawW3C));
       }
       if (!w3c) {
-        logger.log(
-          Level.WARNING,
+        throw new WebDriverException(
           "Setting 'w3c: false' inside 'goog:chromeOptions' will no longer be supported " +
           "Please update to W3C Syntax: https://www.selenium.dev/blog/2022/legacy-protocol-support/"
         );

File: java/src/org/openqa/selenium/grid/distributor/GridModel.java
Patch:
@@ -210,6 +210,8 @@ public void purgeDeadNodes() {
       for (NodeStatus node : nodes) {
         NodeId id = node.getNodeId();
         if (nodeHealthCount.getOrDefault(id, 0) > UNHEALTHY_THRESHOLD) {
+          LOG.info(String.format("Removing Node %s, unhealthy threshold has been reached",
+                                 node.getExternalUri()));
           toRemove.add(node);
           break;
         }

File: java/src/org/openqa/selenium/grid/node/docker/DockerSessionFactory.java
Patch:
@@ -176,7 +176,7 @@ public Either<WebDriverException, ActiveSession> apply(CreateSessionRequest sess
       try {
         waitForServerToStart(client, Duration.ofMinutes(1));
       } catch (TimeoutException e) {
-        span.setAttribute("error", true);
+        span.setAttribute(AttributeKey.ERROR.getKey(), true);
         span.setStatus(Status.CANCELLED);
 
         EXCEPTION.accept(attributeMap, e);
@@ -205,7 +205,7 @@ public Either<WebDriverException, ActiveSession> apply(CreateSessionRequest sess
         attributeMap.put(AttributeKey.DRIVER_RESPONSE.getKey(),
                          EventAttribute.setValue(response.toString()));
       } catch (IOException | RuntimeException e) {
-        span.setAttribute("error", true);
+        span.setAttribute(AttributeKey.ERROR.getKey(), true);
         span.setStatus(Status.CANCELLED);
 
         EXCEPTION.accept(attributeMap, e);

File: java/src/org/openqa/selenium/grid/node/relay/RelaySessionFactory.java
Patch:
@@ -40,6 +40,7 @@
 import org.openqa.selenium.remote.http.HttpMethod;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;
+import org.openqa.selenium.remote.tracing.AttributeKey;
 import org.openqa.selenium.remote.tracing.EventAttributeValue;
 import org.openqa.selenium.remote.tracing.Span;
 import org.openqa.selenium.remote.tracing.Status;
@@ -187,7 +188,7 @@ public void stop() {
           }
         });
       } catch (Exception e) {
-        span.setAttribute("error", true);
+        span.setAttribute(AttributeKey.ERROR.getKey(), true);
         span.setStatus(Status.CANCELLED);
         EXCEPTION.accept(attributeMap, e);
         String errorMessage = String.format("Error while creating session with the service %s. %s",

File: java/src/org/openqa/selenium/grid/router/GridStatusHandler.java
Patch:
@@ -84,7 +84,7 @@ public HttpResponse execute(HttpRequest req) {
       try {
         status = EXECUTOR_SERVICE.submit(span.wrap(distributor::getStatus)).get(2, SECONDS);
       } catch (ExecutionException | TimeoutException e) {
-        span.setAttribute("error", true);
+        span.setAttribute(AttributeKey.ERROR.getKey(), true);
         span.setStatus(Status.CANCELLED);
         EXCEPTION.accept(attributeMap, e);
         attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),
@@ -101,7 +101,7 @@ public HttpResponse execute(HttpRequest req) {
 
         return response;
       } catch (InterruptedException e) {
-        span.setAttribute("error", true);
+        span.setAttribute(AttributeKey.ERROR.getKey(), true);
         span.setStatus(Status.ABORTED);
         EXCEPTION.accept(attributeMap, e);
         attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),

File: java/src/org/openqa/selenium/grid/router/HandleSession.java
Patch:
@@ -125,7 +125,7 @@ public HttpResponse execute(HttpRequest req) {
 
         return res;
       } catch (Exception e) {
-        span.setAttribute("error", true);
+        span.setAttribute(AttributeKey.ERROR.getKey(), true);
         span.setStatus(Status.CANCELLED);
 
         String errorMessage = "Unable to execute request for an existing session: " + e.getMessage();

File: java/src/org/openqa/selenium/grid/sessionqueue/config/NewSessionQueueOptions.java
Patch:
@@ -35,7 +35,7 @@ public class NewSessionQueueOptions {
 
   static final String SESSION_QUEUE_SECTION = "sessionqueue";
   static final int DEFAULT_REQUEST_TIMEOUT = 300;
-  static final int DEFAULT_RETRY_INTERVAL = 0;
+  static final int DEFAULT_RETRY_INTERVAL = 15;
 
   private final Config config;
 

File: java/src/org/openqa/selenium/grid/node/docker/DockerSessionFactory.java
Patch:
@@ -266,7 +266,8 @@ public Either<WebDriverException, ActiveSession> apply(CreateSessionRequest sess
         mergedCapabilities,
         downstream,
         result.getDialect(),
-        Instant.now()));
+        Instant.now(),
+        assetsPath));
     }
   }
 

File: java/src/org/openqa/selenium/grid/node/config/NodeFlags.java
Patch:
@@ -180,7 +180,7 @@ public class NodeFlags implements HasRoles {
     names = "--vnc-env-var",
     description = "Environment variable to check in order to determine if a vnc stream is " +
                   "available or not.")
-  @ConfigValue(section = NODE_SECTION, name = "vnc-env-var", example = "START_XVFB")
+  @ConfigValue(section = NODE_SECTION, name = "vnc-env-var", example = "SE_START_XVFB")
   public String vncEnvVar = DEFAULT_VNC_ENV_VAR;
 
   @Parameter(

File: java/src/org/openqa/selenium/grid/node/config/NodeOptions.java
Patch:
@@ -74,7 +74,7 @@ public class NodeOptions {
   static final String NODE_SECTION = "node";
   static final boolean DEFAULT_DETECT_DRIVERS = true;
   static final boolean OVERRIDE_MAX_SESSIONS = false;
-  static final String DEFAULT_VNC_ENV_VAR = "START_XVFB";
+  static final String DEFAULT_VNC_ENV_VAR = "SE_START_XVFB";
   static final int DEFAULT_NO_VNC_PORT = 7900;
   static final int DEFAULT_REGISTER_CYCLE = 10;
   static final int DEFAULT_REGISTER_PERIOD = 120;

File: java/test/org/openqa/selenium/remote/server/log/PerSessionLogHandlerUnitTest.java
Patch:
@@ -50,7 +50,7 @@ public void testPopulationOfSessionLog() throws IOException {
   }
 
   @Test
-  @Ignore("it fails!")
+  @Disabled("it fails!")
   public void testLoggedSessions() {
     PerSessionLogHandler handler = createPerSessionLogHandler();
     SessionId sessionId = new SessionId("session-1");
@@ -61,7 +61,7 @@ public void testLoggedSessions() {
   }
 
   @Test
-  @Ignore("it fails!")
+  @Disabled("it fails!")
   public void testGetSessionLogsWithLogCaptureDisabled() {
     PerSessionLogHandler handler = createPerSessionLogHandler();
     SessionId sessionId = new SessionId("session-1");

File: java/test/com/thoughtworks/selenium/DefaultSeleniumStartErrorHandlingTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package com.thoughtworks.selenium;
 
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.fail;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class DefaultSeleniumStartErrorHandlingTest {
 

File: java/test/com/thoughtworks/selenium/DefaultSeleniumTest.java
Patch:
@@ -18,9 +18,9 @@
 package com.thoughtworks.selenium;
 
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class DefaultSeleniumTest {
 

File: java/test/com/thoughtworks/selenium/RealDealIntegrationTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package com.thoughtworks.selenium;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class RealDealIntegrationTest extends InternalSelenseTestBase {
 

File: java/test/com/thoughtworks/selenium/TestLargeHtml.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.thoughtworks.selenium;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 
 public class TestLargeHtml extends InternalSelenseTestBase {
   @Test
@@ -28,6 +28,6 @@ public void testLargeHtml() {
     String expectedEndsWith = "</html>";
     int index = source.length() - expectedEndsWith.length();
     String actualEndsWith = source.substring(index).toLowerCase();
-    Assert.assertEquals("source doesn't end correctly", actualEndsWith, expectedEndsWith);
+    Assertions.assertEquals(actualEndsWith, expectedEndsWith, "source doesn't end correctly");
   }
 }

File: java/test/com/thoughtworks/selenium/condition/JUnit4AndTestNgConditionRunnerTest.java
Patch:
@@ -17,10 +17,10 @@
 package com.thoughtworks.selenium.condition;
 
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.fail;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class JUnit4AndTestNgConditionRunnerTest {
 

File: java/test/com/thoughtworks/selenium/corebased/SeleniumMouseTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class SeleniumMouseTest extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestAddLocationStrategy.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestAddLocationStrategy extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestAddSelection.java
Patch:
@@ -20,7 +20,7 @@
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 import com.thoughtworks.selenium.SeleniumException;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestAddSelection extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestAlerts.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 

File: java/test/com/thoughtworks/selenium/corebased/TestAttachFile.java
Patch:
@@ -22,8 +22,8 @@
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 import com.thoughtworks.selenium.SeleniumException;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.File;
 import java.io.IOException;
@@ -37,7 +37,7 @@ public class TestAttachFile extends InternalSelenseTestBase {
   private File testFile;
 
   @Override
-  @Before
+  @BeforeEach
   public void setUp() throws Exception {
     testFile = createTmpFile(FILE_HTML);
   }

File: java/test/com/thoughtworks/selenium/corebased/TestBasicAuth.java
Patch:
@@ -19,15 +19,15 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.environment.GlobalTestEnvironment;
 import org.openqa.selenium.environment.webserver.AppServer;
 
 import java.net.MalformedURLException;
 import java.net.URL;
 
-@Ignore("Browsers don't allow basic auth through URL params any more")
+@Disabled("Browsers don't allow basic auth through URL params any more")
 public class TestBasicAuth extends InternalSelenseTestBase {
   @Test
   public void testBasicAuth() throws Exception {

File: java/test/com/thoughtworks/selenium/corebased/TestBrowserVersion.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestBrowserVersion extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestCheckUncheck.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestCheckUncheck extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestClick.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestClick extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestClickBlankTarget.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore("Switching to the null window appears to fail")
+@Disabled("Switching to the null window appears to fail")
 public class TestClickBlankTarget extends InternalSelenseTestBase {
   @Test
   public void testClickBlankTarget() {

File: java/test/com/thoughtworks/selenium/corebased/TestClickJavascriptHref.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestClickJavascriptHref extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestClickJavascriptHrefChrome.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestClickJavascriptHrefChrome extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestClickJavascriptHrefWithVoidChrome.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestClickJavascriptHrefWithVoidChrome extends
     InternalSelenseTestBase {

File: java/test/com/thoughtworks/selenium/corebased/TestCommandError.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestCommandError extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestComments.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestComments extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestConfirmations.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestConfirmations extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestCookie.java
Patch:
@@ -19,12 +19,12 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 
-@Ignore("Incorrectly calculated base path")
+@Disabled("Incorrectly calculated base path")
 public class TestCookie extends InternalSelenseTestBase {
   @Test
   public void testCookie() {

File: java/test/com/thoughtworks/selenium/corebased/TestCssLocators.java
Patch:
@@ -20,7 +20,7 @@
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 import com.thoughtworks.selenium.Selenium;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestCssLocators extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestCursorPosition.java
Patch:
@@ -20,7 +20,7 @@
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 import com.thoughtworks.selenium.SeleniumException;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestCursorPosition extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestDojoDragAndDrop.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestDojoDragAndDrop extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestDomainCookie.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestDomainCookie extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestDragAndDrop.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore("Move target out of bounds, apparently")
+@Disabled("Move target out of bounds, apparently")
 public class TestDragAndDrop extends InternalSelenseTestBase {
   @Test
   public void testDragAndDrop() {

File: java/test/com/thoughtworks/selenium/corebased/TestEditable.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestEditable extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestElementIndex.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestElementIndex extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestElementOrder.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestElementOrder extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestElementPresent.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestElementPresent extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestErrorChecking.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestErrorChecking extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestEval.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestEval extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestEvilClosingWindow.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestEvilClosingWindow extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestFailingAssert.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestFailingAssert extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestFailingVerifications.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestFailingVerifications extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestFocusOnBlur.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestFocusOnBlur extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestFramesClick.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestFramesClick extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestFramesClickJavascriptHref.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestFramesClickJavascriptHref extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestFramesNested.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore
+@Disabled
 public class TestFramesNested extends InternalSelenseTestBase {
   @Test
   public void testFramesNested() {

File: java/test/com/thoughtworks/selenium/corebased/TestFramesOpen.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestFramesOpen extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestFramesSpecialTargets.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore("Unable to find changeSpan")
+@Disabled("Unable to find changeSpan")
 public class TestFramesSpecialTargets extends InternalSelenseTestBase {
   @Test
   public void testFramesSpecialTargets() {

File: java/test/com/thoughtworks/selenium/corebased/TestFunkEventHandling.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestFunkEventHandling extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestGet.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 

File: java/test/com/thoughtworks/selenium/corebased/TestGetTextContent.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestGetTextContent extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestGettingValueOfCheckbox.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestGettingValueOfCheckbox extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestGettingValueOfRadioButton.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestGettingValueOfRadioButton extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestGoBack.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestGoBack extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestHighlight.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestHighlight extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestHtmlSource.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestHtmlSource extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestImplicitLocators.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestImplicitLocators extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestJavaScriptAttributes.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestJavaScriptAttributes extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestJavascriptParameters.java
Patch:
@@ -19,12 +19,12 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 
-@Ignore("selenium.getValue is not a function. Needs to be added to selenium JS emulation")
+@Disabled("selenium.getValue is not a function. Needs to be added to selenium JS emulation")
 public class TestJavascriptParameters extends InternalSelenseTestBase {
   @Test
   public void testJavascriptParameters() {

File: java/test/com/thoughtworks/selenium/corebased/TestLocators.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestLocators extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestModalDialog.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore("apparently this test was ignored before. Probably a bad base path.")
+@Disabled("apparently this test was ignored before. Probably a bad base path.")
 public class TestModalDialog extends InternalSelenseTestBase {
   @Test
   public void testModalDialog() {

File: java/test/com/thoughtworks/selenium/corebased/TestMultiSelect.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestMultiSelect extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestOpen.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestOpen extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestOpenInTargetFrame.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestOpenInTargetFrame extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestPatternMatching.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 

File: java/test/com/thoughtworks/selenium/corebased/TestPause.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestPause extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestPrompt.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore("getPrompt not implemented")
+@Disabled("getPrompt not implemented")
 public class TestPrompt extends InternalSelenseTestBase {
   @Test
   public void testPrompt() throws Exception {

File: java/test/com/thoughtworks/selenium/corebased/TestProxy.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestProxy extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestQuickOpen.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestQuickOpen extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestRefresh.java
Patch:
@@ -19,11 +19,11 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
 public class TestRefresh extends InternalSelenseTestBase {
-  @Ignore("The click on slowRefresh doesn't make the rc implementation wait")
+  @Disabled("The click on slowRefresh doesn't make the rc implementation wait")
   @Test
   public void testRefresh() {
     selenium.open("test_page.slow.html");

File: java/test/com/thoughtworks/selenium/corebased/TestRollup.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore("Rollup functionality is not implemented. Also addScript is not implemented")
+@Disabled("Rollup functionality is not implemented. Also addScript is not implemented")
 public class TestRollup extends InternalSelenseTestBase {
   @Test
   public void testRollup() {

File: java/test/com/thoughtworks/selenium/corebased/TestSelect.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestSelect extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestSelectMultiLevelFrame.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestSelectMultiLevelFrame extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestSelectPopUp.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestSelectPopUp extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestSelectWindow.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 

File: java/test/com/thoughtworks/selenium/corebased/TestSelectWindowTitle.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 

File: java/test/com/thoughtworks/selenium/corebased/TestSetSpeed.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore("Set speed is a no-op, it seems")
+@Disabled("Set speed is a no-op, it seems")
 public class TestSetSpeed extends InternalSelenseTestBase {
   @Test
   public void testSetSpeed() throws Exception {

File: java/test/com/thoughtworks/selenium/corebased/TestStore.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestStore extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestSubmit.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestSubmit extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestTextWhitespace.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 

File: java/test/com/thoughtworks/selenium/corebased/TestType.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.WrapsDriver;
 
 import java.io.File;

File: java/test/com/thoughtworks/selenium/corebased/TestUIElementLocators.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore("Not implemented")
+@Disabled("Not implemented")
 public class TestUIElementLocators extends InternalSelenseTestBase {
   @Test
   public void testUIElementLocators() {

File: java/test/com/thoughtworks/selenium/corebased/TestUseXpathLibrary.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore("WebDriverBackedSelenium uses webdriver for xpath evaluation")
+@Disabled("WebDriverBackedSelenium uses webdriver for xpath evaluation")
 public class TestUseXpathLibrary extends InternalSelenseTestBase {
   @Test
   public void testUseXpathLibrary() {

File: java/test/com/thoughtworks/selenium/corebased/TestVerifications.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestVerifications extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestVisibility.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestVisibility extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestWait.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestWait extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestWaitFor.java
Patch:
@@ -19,8 +19,8 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.After;
-import org.junit.Test;
+import org.junit.jupiter.api.AfterEach;
+import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 
@@ -92,7 +92,7 @@ public void testWaitFor() throws Exception {
     }
   }
 
-  @After
+  @AfterEach
   public void resetTimeout() {
     selenium.setTimeout("30000");
   }

File: java/test/com/thoughtworks/selenium/corebased/TestWaitForNot.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.util.regex.Pattern;
 

File: java/test/com/thoughtworks/selenium/corebased/TestWaitInPopupWindow.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestWaitInPopupWindow extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/corebased/TestXPathLocatorInXHtml.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
 
-@Ignore
+@Disabled
 public class TestXPathLocatorInXHtml extends InternalSelenseTestBase {
   @Test
   public void testXPathLocatorInXHtml() {

File: java/test/com/thoughtworks/selenium/corebased/TestXPathLocators.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TestXPathLocators extends InternalSelenseTestBase {
   @Test

File: java/test/com/thoughtworks/selenium/webdriven/FastWebDriverBackedSeleniumTest.java
Patch:
@@ -20,7 +20,7 @@
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.WebDriver;
 

File: java/test/com/thoughtworks/selenium/webdriven/WebDriverCommandProcessorTest.java
Patch:
@@ -17,11 +17,11 @@
 
 package com.thoughtworks.selenium.webdriven;
 
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.fail;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.withSettings;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.WebDriver;
 

File: java/test/com/thoughtworks/selenium/webdriven/commands/GetAttributeTest.java
Patch:
@@ -17,11 +17,11 @@
 
 package com.thoughtworks.selenium.webdriven.commands;
 
-import static org.junit.Assert.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 import com.thoughtworks.selenium.webdriven.JavascriptLibrary;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class GetAttributeTest {
   @Test

File: java/test/com/thoughtworks/selenium/webdriven/commands/TypeKeysTest.java
Patch:
@@ -22,8 +22,8 @@
 
 import com.thoughtworks.selenium.webdriven.ElementFinder;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Keys;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;
@@ -32,7 +32,7 @@ public class TypeKeysTest {
   private ElementFinder elementFinder;
   private WebElement element;
 
-  @Before
+  @BeforeEach
   public void setUp() {
     element = mock(WebElement.class);
 

File: java/test/org/openqa/selenium/AtomsInjectionTest.java
Patch:
@@ -19,10 +19,10 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Test;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.junit.jupiter.api.Test;
+import org.openqa.selenium.testing.JupiterTestBase;
 
-public class AtomsInjectionTest extends JUnit4TestBase {
+public class AtomsInjectionTest extends JupiterTestBase {
 
   @Test
   public void testInjectingAtomShouldNotTrampleOnUnderscoreGlobal() {

File: java/test/org/openqa/selenium/ChildrenFindingTest.java
Patch:
@@ -21,13 +21,13 @@
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.junit.jupiter.api.Test;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
 import java.util.List;
 
-public class ChildrenFindingTest extends JUnit4TestBase {
+public class ChildrenFindingTest extends JupiterTestBase {
 
   @Test
   public void testFindElementByXPath() {

File: java/test/org/openqa/selenium/ClearTest.java
Patch:
@@ -26,11 +26,11 @@
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.junit.jupiter.api.Test;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
-public class ClearTest extends JUnit4TestBase {
+public class ClearTest extends JupiterTestBase {
 
   @Test
   public void testWritableTextInputShouldClear() {

File: java/test/org/openqa/selenium/CssValueTest.java
Patch:
@@ -19,11 +19,11 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.support.Color;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 
-public class CssValueTest extends JUnit4TestBase {
+public class CssValueTest extends JupiterTestBase {
 
   @Test
   public void testShouldPickUpStyleOfAnElement() {

File: java/test/org/openqa/selenium/ElementAccessibleNameTest.java
Patch:
@@ -19,13 +19,13 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.environment.webserver.Page;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.drivers.Browser;
 
-public class ElementAccessibleNameTest extends JUnit4TestBase {
+public class ElementAccessibleNameTest extends JupiterTestBase {
 
   @Test
   @NotYetImplemented(Browser.FIREFOX)

File: java/test/org/openqa/selenium/ElementAriaRoleTest.java
Patch:
@@ -19,13 +19,13 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.environment.webserver.Page;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.drivers.Browser;
 
-public class ElementAriaRoleTest extends JUnit4TestBase {
+public class ElementAriaRoleTest extends JupiterTestBase {
 
   @Test
   @NotYetImplemented(Browser.FIREFOX)

File: java/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -27,15 +27,15 @@
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.environment.webserver.Page;
 import org.openqa.selenium.support.ui.ExpectedConditions;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
 import java.util.List;
 
-public class ElementAttributeTest extends JUnit4TestBase {
+public class ElementAttributeTest extends JupiterTestBase {
 
   @Test
   public void testShouldReturnNullWhenGettingTheValueOfAnAttributeThatIsNotListed() {

File: java/test/org/openqa/selenium/ElementDomAttributeTest.java
Patch:
@@ -27,14 +27,14 @@
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.environment.webserver.Page;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
 import java.util.List;
 
-public class ElementDomAttributeTest extends JUnit4TestBase {
+public class ElementDomAttributeTest extends JupiterTestBase {
 
   @Test
   public void testShouldReturnNullWhenGettingTheValueOfAnAttributeThatIsNotListed() {

File: java/test/org/openqa/selenium/ElementDomPropertyTest.java
Patch:
@@ -22,14 +22,14 @@
 import static org.openqa.selenium.testing.drivers.Browser.EDGE;
 import static org.openqa.selenium.testing.drivers.Browser.FIREFOX;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.support.ui.ExpectedConditions;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
 import java.util.List;
 
-public class ElementDomPropertyTest extends JUnit4TestBase {
+public class ElementDomPropertyTest extends JupiterTestBase {
 
   @Test
   public void testShouldReturnNullWhenGettingTheValueOfAPropertyThatDoesNotExist() {

File: java/test/org/openqa/selenium/ElementEqualityTest.java
Patch:
@@ -20,15 +20,15 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.remote.RemoteWebElement;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.SwitchToTopAfterTest;
 
 import java.util.List;
 
-public class ElementEqualityTest extends JUnit4TestBase {
+public class ElementEqualityTest extends JupiterTestBase {
 
   @Test
   public void testSameElementLookedUpDifferentWaysShouldBeEqual() {

File: java/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.openqa.selenium;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NeedsFreshDriver;
 import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.SwitchToTopAfterTest;
@@ -35,7 +35,7 @@
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-public class ElementFindingTest extends JUnit4TestBase {
+public class ElementFindingTest extends JupiterTestBase {
 
   // By.id positive
 

File: java/test/org/openqa/selenium/ElementSelectingTest.java
Patch:
@@ -19,11 +19,11 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.support.ui.ExpectedConditions;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 
-public class ElementSelectingTest extends JUnit4TestBase {
+public class ElementSelectingTest extends JupiterTestBase {
   private static final boolean UNSELECTED = false;
   private static final boolean SELECTED = true;
 

File: java/test/org/openqa/selenium/ErrorsTest.java
Patch:
@@ -20,11 +20,11 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 
-public class ErrorsTest extends JUnit4TestBase {
+public class ErrorsTest extends JupiterTestBase {
 
   /**
    * This will trivially pass on browsers that do not support the onerror handler (e.g. Internet

File: java/test/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -25,16 +25,16 @@
 import static org.openqa.selenium.testing.drivers.Browser.FIREFOX;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.environment.webserver.Page;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
 import java.io.File;
 import java.io.IOException;
 
-public class FormHandlingTest extends JUnit4TestBase {
+public class FormHandlingTest extends JupiterTestBase {
 
   @Test
   public void testShouldClickOnSubmitInputElements() {

File: java/test/org/openqa/selenium/MiscTest.java
Patch:
@@ -24,12 +24,12 @@
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
-public class MiscTest extends JUnit4TestBase {
+public class MiscTest extends JupiterTestBase {
 
   @Test
   public void testShouldReturnTitleOfPageIfSet() {

File: java/test/org/openqa/selenium/PositionAndSizeTest.java
Patch:
@@ -25,16 +25,16 @@
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.interactions.Locatable;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.SwitchToTopAfterTest;
 
 @Ignore(value = HTMLUNIT,
           reason = "Getting coordinates requires rendering, others: not tested")
-public class PositionAndSizeTest extends JUnit4TestBase {
+public class PositionAndSizeTest extends JupiterTestBase {
 
   @Test
   public void testShouldBeAbleToDetermineTheLocationOfAnElement() {

File: java/test/org/openqa/selenium/SelectElementHandlingTest.java
Patch:
@@ -20,13 +20,13 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.openqa.selenium.testing.drivers.Browser.HTMLUNIT;
 
-import org.junit.Test;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.junit.jupiter.api.Test;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
 import java.util.List;
 
-public class SelectElementHandlingTest extends JUnit4TestBase {
+public class SelectElementHandlingTest extends JupiterTestBase {
 
   @Test
   public void testShouldBePossibleToDeselectASingleOptionFromASelectWhichAllowsMultipleChoices() {

File: java/test/org/openqa/selenium/SessionHandlingTest.java
Patch:
@@ -21,12 +21,12 @@
 import static org.openqa.selenium.testing.drivers.Browser.FIREFOX;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.junit.jupiter.api.Test;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NoDriverAfterTest;
 import org.openqa.selenium.testing.NotYetImplemented;
 
-public class SessionHandlingTest extends JUnit4TestBase {
+public class SessionHandlingTest extends JupiterTestBase {
 
   @NoDriverAfterTest
   @Test

File: java/test/org/openqa/selenium/SlowLoadingPageTest.java
Patch:
@@ -21,11 +21,11 @@
 import static org.openqa.selenium.testing.drivers.Browser.CHROME;
 import static org.openqa.selenium.testing.drivers.Browser.EDGE;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 
-public class SlowLoadingPageTest extends JUnit4TestBase {
+public class SlowLoadingPageTest extends JupiterTestBase {
   private static final long LOAD_TIME_IN_SECONDS = 3;
 
   @Test

File: java/test/org/openqa/selenium/StaleElementReferenceTest.java
Patch:
@@ -22,11 +22,11 @@
 import static org.openqa.selenium.support.ui.ExpectedConditions.stalenessOf;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.junit.jupiter.api.Test;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
-public class StaleElementReferenceTest extends JUnit4TestBase {
+public class StaleElementReferenceTest extends JupiterTestBase {
 
   @Test
   public void testOldPage() {

File: java/test/org/openqa/selenium/SvgDocumentTest.java
Patch:
@@ -21,12 +21,12 @@
 import static org.openqa.selenium.testing.drivers.Browser.HTMLUNIT;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
-public class SvgDocumentTest extends JUnit4TestBase {
+public class SvgDocumentTest extends JupiterTestBase {
 
   @Test
   @Ignore(value = HTMLUNIT, reason = "test should enable JavaScript")

File: java/test/org/openqa/selenium/SvgElementTest.java
Patch:
@@ -23,14 +23,14 @@
 import static org.openqa.selenium.testing.drivers.Browser.FIREFOX;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
 import java.util.List;
 
-public class SvgElementTest extends JUnit4TestBase {
+public class SvgElementTest extends JupiterTestBase {
 
   @Test
   @Ignore(value = HTMLUNIT, reason="test should enable JavaScript")

File: java/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -24,13 +24,13 @@
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.environment.webserver.Page;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
-public class TextHandlingTest extends JUnit4TestBase {
+public class TextHandlingTest extends JupiterTestBase {
 
   private static final String NEW_LINE = "\n";
 

File: java/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.openqa.selenium;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.support.ui.ExpectedConditions;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 
 import static com.google.common.base.Joiner.on;
@@ -32,7 +32,7 @@
 import static org.openqa.selenium.testing.drivers.Browser.IE;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-public class TypingTest extends JUnit4TestBase {
+public class TypingTest extends JupiterTestBase {
 
   private static void checkRecordedKeySequence(WebElement element, int expectedKeyCode) {
     assertThat(element.getText().trim()).contains(

File: java/test/org/openqa/selenium/UnexpectedAlertBehaviorTest.java
Patch:
@@ -26,17 +26,17 @@
 import static org.openqa.selenium.testing.drivers.Browser.HTMLUNIT;
 import static org.openqa.selenium.testing.drivers.Browser.SAFARI;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.support.ui.Wait;
 import org.openqa.selenium.support.ui.WebDriverWait;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NoDriverBeforeTest;
 
 import java.time.Duration;
 
 @Ignore(value = SAFARI, reason = "Does not support alerts yet")
-public class UnexpectedAlertBehaviorTest extends JUnit4TestBase {
+public class UnexpectedAlertBehaviorTest extends JupiterTestBase {
 
   @Test
   @Ignore(value = CHROME, reason = "Legacy behaviour, not W3C conformant")

File: java/test/org/openqa/selenium/WebElementTest.java
Patch:
@@ -19,13 +19,13 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Test;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.junit.jupiter.api.Test;
+import org.openqa.selenium.testing.JupiterTestBase;
 
 /**
  * Tests for generic WebElement.
  */
-public class WebElementTest extends JUnit4TestBase {
+public class WebElementTest extends JupiterTestBase {
 
   @Test
   public void testElementImplementsWrapsDriver() {

File: java/test/org/openqa/selenium/atoms/InputAtomsTest.java
Patch:
@@ -24,7 +24,7 @@
 import net.sourceforge.htmlunit.corejs.javascript.ContextFactory;
 import net.sourceforge.htmlunit.corejs.javascript.ScriptableObject;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.IOException;
 

File: java/test/org/openqa/selenium/build/Build.java
Patch:
@@ -16,7 +16,7 @@
 // under the License.
 package org.openqa.selenium.build;
 
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.fail;
 import static org.openqa.selenium.Platform.WINDOWS;
 import static org.openqa.selenium.build.DevMode.isInDevMode;
 

File: java/test/org/openqa/selenium/chrome/ChromeDriverFunctionalTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.chrome;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.WebDriver;
@@ -30,7 +30,7 @@
 import org.openqa.selenium.remote.RemoteWebDriverBuilder;
 import org.openqa.selenium.remote.http.ClientConfig;
 import org.openqa.selenium.testing.Ignore;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NoDriverBeforeTest;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
 
@@ -43,7 +43,7 @@
 import static org.assertj.core.api.Assertions.fail;
 import static org.assertj.core.api.Assumptions.assumeThat;
 
-public class ChromeDriverFunctionalTest extends JUnit4TestBase {
+public class ChromeDriverFunctionalTest extends JupiterTestBase {
 
   private final String CLIPBOARD_READ = "clipboard-read";
   private final String CLIPBOARD_WRITE = "clipboard-write";

File: java/test/org/openqa/selenium/devtools/ChangeUserAgentTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.devtools;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.By;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.devtools.idealized.Network;

File: java/test/org/openqa/selenium/devtools/ConsoleEventsTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.By;
 import org.openqa.selenium.devtools.events.ConsoleEvent;
 import org.openqa.selenium.environment.webserver.Page;

File: java/test/org/openqa/selenium/devtools/JavascriptExceptionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.devtools;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.By;
 import org.openqa.selenium.JavascriptException;
 import org.openqa.selenium.environment.webserver.Page;

File: java/test/org/openqa/selenium/devtools/WindowSwitchingTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.openqa.selenium.testing.drivers.Browser.FIREFOX;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WindowType;
 import org.openqa.selenium.devtools.idealized.target.model.TargetInfo;

File: java/test/org/openqa/selenium/docker/VersionCommandTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.docker;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.remote.http.HttpHandler;
 import org.openqa.selenium.remote.http.HttpResponse;
 

File: java/test/org/openqa/selenium/docker/v1_41/ListImagesTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.docker.v1_41;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.docker.Image;
 import org.openqa.selenium.docker.ImageId;
 import org.openqa.selenium.docker.internal.Reference;

File: java/test/org/openqa/selenium/edge/EdgeDriverFunctionalTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.edge;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.WebDriver;
@@ -29,7 +29,7 @@
 import org.openqa.selenium.chromium.HasPermissions;
 import org.openqa.selenium.remote.RemoteWebDriverBuilder;
 import org.openqa.selenium.remote.http.ClientConfig;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NoDriverBeforeTest;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
 
@@ -42,7 +42,7 @@
 import static org.assertj.core.api.Assertions.fail;
 import static org.assertj.core.api.Assumptions.assumeThat;
 
-public class EdgeDriverFunctionalTest extends JUnit4TestBase {
+public class EdgeDriverFunctionalTest extends JupiterTestBase {
 
   private final String CLIPBOARD_READ = "clipboard-read";
   private final String CLIPBOARD_WRITE = "clipboard-write";

File: java/test/org/openqa/selenium/edge/EdgeOptionsFunctionalTest.java
Patch:
@@ -20,13 +20,13 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.openqa.selenium.remote.CapabilityType.ACCEPT_INSECURE_CERTS;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.By;
 import org.openqa.selenium.HasCapabilities;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.build.InProject;
-import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JupiterTestBase;
 import org.openqa.selenium.testing.NoDriverBeforeTest;
 import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
@@ -35,7 +35,7 @@
 import java.nio.file.Files;
 import java.util.Base64;
 
-public class EdgeOptionsFunctionalTest extends JUnit4TestBase {
+public class EdgeOptionsFunctionalTest extends JupiterTestBase {
 
   private static final String EXT_PATH = "common/extensions/webextensions-selenium-example.crx";
 

File: java/test/org/openqa/selenium/events/ZeroMqEventBusTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.openqa.selenium.events;
 
 import org.assertj.core.api.Assertions;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.events.zeromq.ZeroMqEventBus;
 import org.openqa.selenium.grid.security.Secret;
 import org.zeromq.ZContext;

File: java/test/org/openqa/selenium/grid/MainTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
@@ -32,7 +32,7 @@ public class MainTest {
   ByteArrayOutputStream out;
   ByteArrayOutputStream err;
 
-  @Before
+  @BeforeEach
   public void init() {
     out = new ByteArrayOutputStream();
     err = new ByteArrayOutputStream();

File: java/test/org/openqa/selenium/grid/config/ConcatenatingConfigTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: java/test/org/openqa/selenium/grid/config/ConfigTest.java
Patch:
@@ -18,16 +18,16 @@
 package org.openqa.selenium.grid.config;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 
 import com.beust.jcommander.JCommander;
 import com.beust.jcommander.Parameter;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 

File: java/test/org/openqa/selenium/grid/config/JsonConfigTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.grid.config;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.StringReader;
 import java.util.Optional;

File: java/test/org/openqa/selenium/grid/config/TomlConfigTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.grid.config;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.io.StringReader;
 import java.util.Arrays;

File: java/test/org/openqa/selenium/grid/data/DefaultSlotMatcherTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.Platform;

File: java/test/org/openqa/selenium/grid/data/NodeStatusTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.SessionId;

File: java/test/org/openqa/selenium/grid/distributor/local/LocalDistributorTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.openqa.selenium.grid.distributor.local;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
@@ -89,7 +89,7 @@ public class LocalDistributorTest {
   private Node localNode;
   private Wait<Object> wait;
 
-  @Before
+  @BeforeEach
   public void setUp() throws URISyntaxException {
     tracer = DefaultTestTracer.createTracer();
     bus = new GuavaEventBus();

File: java/test/org/openqa/selenium/grid/distributor/selector/DefaultSlotSelectorTest.java
Patch:
@@ -20,8 +20,8 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.events.EventBus;
@@ -67,7 +67,7 @@ public class DefaultSlotSelectorTest {
   private EventBus bus;
   private URI uri;
 
-  @Before
+  @BeforeEach
   public void setUp() throws URISyntaxException {
     tracer = DefaultTestTracer.createTracer();
     bus = new GuavaEventBus();

File: java/test/org/openqa/selenium/grid/graphql/GraphqlHandlerTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import com.google.common.collect.ImmutableMap;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
@@ -99,7 +99,7 @@ public class GraphqlHandlerTest {
   public GraphqlHandlerTest() throws URISyntaxException {
   }
 
-  @Before
+  @BeforeEach
   public void setupGrid() {
     tracer = DefaultTestTracer.createTracer();
     bus = new GuavaEventBus();

File: java/test/org/openqa/selenium/grid/node/CustomLocatorHandlerTest.java
Patch:
@@ -18,8 +18,8 @@
 package org.openqa.selenium.grid.node;
 
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.mockito.ArgumentMatcher;
 import org.mockito.Mockito;
 import org.openqa.selenium.By;
@@ -76,7 +76,7 @@ public class CustomLocatorHandlerTest {
   private LocalNode.Builder nodeBuilder;
   private URI nodeUri;
 
-  @Before
+  @BeforeEach
   public void partiallyBuildNode() {
     Tracer tracer = DefaultTestTracer.createTracer();
     nodeUri = URI.create("http://localhost:1234");

File: java/test/org/openqa/selenium/grid/node/NodeTest.java
Patch:
@@ -30,8 +30,8 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.NoSuchSessionException;
@@ -104,7 +104,7 @@ private static <A, B> EitherAssert<A, B> assertThatEither(Either<A, B> either) {
     return new EitherAssert<>(either);
   }
 
-  @Before
+  @BeforeEach
   public void setUp() throws URISyntaxException {
     tracer = DefaultTestTracer.createTracer();
     bus = new GuavaEventBus();

File: java/test/org/openqa/selenium/grid/node/config/DriverServiceSessionFactoryTest.java
Patch:
@@ -20,8 +20,8 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.WebDriverException;
@@ -62,7 +62,7 @@ public class DriverServiceSessionFactoryTest {
   private DriverService.Builder builder;
   private DriverService driverService;
 
-  @Before
+  @BeforeEach
   public void setUp() throws MalformedURLException {
     tracer = DefaultTestTracer.createTracer();
 

File: java/test/org/openqa/selenium/grid/node/local/CreateSessionTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.WebDriverException;

File: java/test/org/openqa/selenium/grid/node/local/LocalNodeTest.java
Patch:
@@ -20,8 +20,8 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.NoSuchSessionException;
@@ -74,7 +74,7 @@ private static <A, B> EitherAssert<A, B> assertThatEither(Either<A, B> either) {
     return new EitherAssert<>(either);
   }
 
-  @Before
+  @BeforeEach
   public void setUp() throws URISyntaxException {
     Tracer tracer = DefaultTestTracer.createTracer();
     EventBus bus = new GuavaEventBus();

File: java/test/org/openqa/selenium/grid/node/relay/RelayOptionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.grid.node.relay;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.grid.config.Config;
 import org.openqa.selenium.grid.config.ConfigException;

File: java/test/org/openqa/selenium/grid/router/DistributedCdpTest.java
Patch:
@@ -22,8 +22,8 @@
 
 import com.google.common.collect.ImmutableMap;
 
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.By;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.MutableCapabilities;
@@ -51,7 +51,7 @@
 
 public class DistributedCdpTest {
 
-  @BeforeClass
+  @BeforeAll
   public static void ensureBrowserIsCdpEnabled() {
     Browser browser = Objects.requireNonNull(Browser.detect());
 

File: java/test/org/openqa/selenium/grid/router/JmxTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.openqa.selenium.grid.router;
 
 import com.google.common.collect.ImmutableMap;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.events.EventBus;
@@ -61,7 +61,7 @@
 import java.util.logging.Logger;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.fail;
 
 public class JmxTest {
 

File: java/test/org/openqa/selenium/grid/security/BasicAuthenticationFilterTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.grid.security;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.remote.http.HttpHandler;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;

File: java/test/org/openqa/selenium/grid/server/BaseServerOptionsTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.openqa.selenium.grid.config.MapConfig;
 
 import java.util.Map;

File: java/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -64,6 +64,7 @@ public FirefoxProfile(File profileDir) {
     if (prefsInModel.exists()) {
       StringReader reader = new StringReader("{\"frozen\": {}, \"mutable\": {}}");
       Preferences existingPrefs = new Preferences(reader, prefsInModel);
+      existingPrefs.addTo(this.additionalPrefs);
       acceptUntrustedCerts = getBooleanPreference(existingPrefs, ACCEPT_UNTRUSTED_CERTS_PREF, true);
       untrustedCertIssuer = getBooleanPreference(existingPrefs, ASSUME_UNTRUSTED_ISSUER_PREF, true);
     } else {

File: java/src/org/openqa/selenium/safari/SafariDriverService.java
Patch:
@@ -35,7 +35,6 @@
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.openqa.selenium.Platform.MAC;
 import static org.openqa.selenium.remote.Browser.SAFARI;
-import static org.openqa.selenium.remote.Browser.SAFARI_TECH_PREVIEW;
 
 public class SafariDriverService extends DriverService {
 
@@ -87,8 +86,6 @@ public int score(Capabilities capabilities) {
 
       if (SAFARI.is(capabilities)) {
         score++;
-      } else if (SAFARI_TECH_PREVIEW.browserName().equals(capabilities.getBrowserName())) {
-        score++;
       }
 
       return score;

File: java/src/org/openqa/selenium/safari/AddHasDebugger.java
Patch:
@@ -57,7 +57,7 @@ public HasDebugger getImplementation(Capabilities capabilities, ExecuteMethod ex
     return new HasDebugger() {
       @Override
       public void attachDebugger() {
-        executeMethod.execute(ATTACH_DEBUGGER, ImmutableMap.of(ATTACH_DEBUGGER, null));
+        executeMethod.execute(ATTACH_DEBUGGER, null);
       }
     };
   }

File: java/src/org/openqa/selenium/support/ui/ExpectedCondition.java
Patch:
@@ -35,4 +35,4 @@
 // NB: this originally extended Guava's Function interface since Java didn't have one. To avoid code
 // such as "com.google.common.base.Function condition = ExpectedConditions.elementFound(By);"
 // breaking at compile time, we continue to extend Guava's Function interface.
-public interface ExpectedCondition<T> extends Function<WebDriver, T> {}
+public interface ExpectedCondition<T> extends Function<WebDriver, T>, java.util.function.Function<WebDriver, T> {}

File: java/src/org/openqa/selenium/remote/RemoteWebElement.java
Patch:
@@ -326,7 +326,7 @@ public boolean isDisplayed() {
   @Override
   @SuppressWarnings({"unchecked"})
   public Point getLocation() {
-    Response response = execute(DriverCommand.GET_ELEMENT_LOCATION(id));
+    Response response = execute(DriverCommand.GET_ELEMENT_RECT(id));
     Map<String, Object> rawPoint = (Map<String, Object>) response.getValue();
     int x = ((Number) rawPoint.get("x")).intValue();
     int y = ((Number) rawPoint.get("y")).intValue();
@@ -336,7 +336,7 @@ public Point getLocation() {
   @Override
   @SuppressWarnings({"unchecked"})
   public Dimension getSize() {
-    Response response = execute(DriverCommand.GET_ELEMENT_SIZE(id));
+    Response response = execute(DriverCommand.GET_ELEMENT_RECT(id));
     Map<String, Object> rawSize = (Map<String, Object>) response.getValue();
     int width = ((Number) rawSize.get("width")).intValue();
     int height = ((Number) rawSize.get("height")).intValue();

File: java/src/org/openqa/selenium/remote/RemoteRotatable.java
Patch:
@@ -51,7 +51,7 @@ public ScreenOrientation getOrientation() {
 
   @Override
   public void rotate(DeviceRotation rotation) {
-    executeMethod.execute(DriverCommand.SET_SCREEN_ORIENTATION, rotation.parameters());
+    executeMethod.execute(DriverCommand.SET_SCREEN_ROTATION, rotation.parameters());
   }
 
   @Override

File: java/test/org/openqa/selenium/grid/router/SessionCleanUpTest.java
Patch:
@@ -221,12 +221,13 @@ public void shouldRemoveSessionAfterNodeIsShutDownGracefully() {
     Optional<Map<String, Object>> maybeResponse =
       Optional.ofNullable(Values.get(httpResponse, Map.class));
 
+    assertThat(maybeResponse.isPresent()).isTrue();
     String rawResponse = JSON.toJson(maybeResponse.get().get("sessionId"));
     SessionId id = JSON.toType(rawResponse, SessionId.class);
 
     Session session = sessions.get(id);
 
-    assertThat(session.getCapabilities()).isEqualTo(capabilities);
+    assertThat(session.getCapabilities().getBrowserName()).isEqualTo(capabilities.getBrowserName());
 
     nodeServer.stop();
 
@@ -296,7 +297,7 @@ public void shouldRemoveSessionAfterNodeIsDown() throws URISyntaxException {
     SessionId id = result.right().getSession().getId();
     Session session = sessions.get(id);
 
-    assertThat(session.getCapabilities()).isEqualTo(capabilities);
+    assertThat(session.getCapabilities().getBrowserName()).isEqualTo(capabilities.getBrowserName());
 
     availability.set(DOWN);
 

File: java/src/org/openqa/selenium/grid/node/local/LocalNodeFactory.java
Patch:
@@ -69,6 +69,7 @@ public static Node create(Config config) {
       .maximumConcurrentSessions(nodeOptions.getMaxSessions())
       .sessionTimeout(sessionTimeout)
       .drainAfterSessionCount(nodeOptions.getDrainAfterSessionCount())
+      .enableCdp(nodeOptions.isCdpEnabled())
       .heartbeatPeriod(nodeOptions.getHeartbeatPeriod());
 
     List<DriverService.Builder<?, ?>> builders = new ArrayList<>();

File: java/test/org/openqa/selenium/docker/BootstrapTest.java
Patch:
@@ -61,7 +61,7 @@ public void shouldReportDockerIsUnsupportedIfServerReturns404() {
   }
 
   @Test
-  public void shouldReportDockerIsUnsupportIfRequestCausesAnIoException() {
+  public void shouldReportDockerIsUnsupportedIfRequestCausesAnIoException() {
     HttpHandler client = req -> { throw new UncheckedIOException(new IOException("Eeek!")); };
 
     boolean isSupported = new Docker(client).isSupported();

File: java/src/org/openqa/selenium/ImeActivationFailedException.java
Patch:
@@ -22,6 +22,7 @@
  *
  * @deprecated Will be removed. IME is not part of W3C WebDriver and does not work on browsers.
  */
+@Deprecated
 public class ImeActivationFailedException extends WebDriverException {
   public ImeActivationFailedException(String message) {
     super(message);

File: java/src/org/openqa/selenium/ImeNotAvailableException.java
Patch:
@@ -23,7 +23,7 @@
  *
  * @deprecated Will be removed. IME is not part of W3C WebDriver and does not work on browsers.
  */
-
+@Deprecated
 public class ImeNotAvailableException extends WebDriverException {
   public ImeNotAvailableException(String message) {
     super(message);

File: java/src/org/openqa/selenium/WebDriver.java
Patch:
@@ -279,6 +279,7 @@ interface Options {
      * @return the interface for controlling IME engines to generate complex-script input.
      * @deprecated Will be removed. IME is not part of W3C WebDriver and does not work on browsers.
      */
+    @Deprecated
     ImeHandler ime();
 
     /**
@@ -637,6 +638,7 @@ interface Navigation {
    * @deprecated Will be removed. IME is not part of W3C WebDriver and does not work on browsers.
    * An interface for managing input methods.
    */
+  @Deprecated
   interface ImeHandler {
     /**
      * All available engines on the machine. To use an engine, it has to be activated.

File: java/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -853,6 +853,7 @@ public Window window() {
     /**
      * @deprecated Will be removed. IME is not part of W3C WebDriver and does not work on browsers.
      */
+    @Deprecated
     protected class RemoteInputMethodManager implements WebDriver.ImeHandler {
 
       @Override

File: java/test/org/openqa/selenium/SvgElementTest.java
Patch:
@@ -34,7 +34,7 @@ public class SvgElementTest extends JUnit4TestBase {
 
   @Test
   @Ignore(value = HTMLUNIT, reason="test should enable JavaScript")
-  @NotYetImplemented(value = FIREFOX, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1415068")
+  @NotYetImplemented(value = FIREFOX, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1428780")
   @NotYetImplemented(SAFARI)
   public void testShouldClickOnGraphVisualElements() {
     driver.get(pages.svgPage);

File: java/test/org/openqa/selenium/ClickScrollingTest.java
Patch:
@@ -93,6 +93,7 @@ public void testShouldBeAbleToClickOnAnElementHiddenByOverflow() {
   }
 
   @Test
+  @Ignore(value = FIREFOX, issue = "https://github.com/mozilla/geckodriver/issues/2013")
   public void testShouldBeAbleToClickOnAnElementHiddenByDoubleOverflow() {
     driver.get(appServer.whereIs("scrolling_tests/page_with_double_overflow_auto.html"));
 
@@ -110,6 +111,7 @@ public void testShouldBeAbleToClickOnAnElementHiddenByYOverflow() {
 
   @Test
   @Ignore(value = IE, issue = "716")
+  @Ignore(value = FIREFOX, issue = "https://github.com/mozilla/geckodriver/issues/2013")
   public void testShouldBeAbleToClickOnAnElementPartiallyHiddenByOverflow() {
     driver.get(appServer.whereIs("scrolling_tests/page_with_partially_hidden_element.html"));
 
@@ -129,6 +131,7 @@ public void testShouldNotScrollOverflowElementsWhichAreVisible() {
   }
 
   @Test
+  @Ignore(value = FIREFOX, issue = "https://github.com/mozilla/geckodriver/issues/2013")
   @NotYetImplemented(IE)
   public void testShouldNotScrollIfAlreadyScrolledAndElementIsInView() {
     driver.get(appServer.whereIs("scroll3.html"));

File: java/src/org/openqa/selenium/interactions/SourceType.java
Patch:
@@ -23,7 +23,8 @@
 public enum SourceType {
   KEY("key"),
   NONE(null),
-  POINTER("pointer");
+  POINTER("pointer"),
+  WHEEL("wheel");
 
   private final String type;
 

File: java/test/org/openqa/selenium/interactions/ActionsTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.testing.UnitTests;
 
+import java.time.Duration;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
@@ -220,7 +221,6 @@ public void testCtrlClick() {
         .containsEntry("type", "keyUp").containsEntry("value", CONTROL.toString());
   }
 
-
   private WebElement mockLocatableElementWithCoordinates(Coordinates coordinates) {
     WebElement element = mock(WebElement.class,
                               withSettings().extraInterfaces(Locatable.class));

File: java/src/org/openqa/selenium/events/zeromq/UnboundZmqEventBus.java
Patch:
@@ -231,7 +231,6 @@ public void run() {
               EventName eventName = new EventName(new String(socket.recv(), UTF_8));
               // Processing only events we are listening to
               if (!listeners.containsKey(eventName)) {
-//                LOG.log(Level.SEVERE, "Ignoring {0}", eventName);
                 continue;
               }
 

File: java/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -214,7 +214,7 @@ private LocalNode(
         r -> {
           Thread thread = new Thread(r);
           thread.setDaemon(true);
-          thread.setName("TempFile Cleanup Node " + externalUri);
+          thread.setName("HeartBeat Node " + externalUri);
           return thread;
         });
     heartbeatNodeService.scheduleAtFixedRate(

File: java/src/org/openqa/selenium/grid/security/BasicAuthenticationFilter.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.grid.security;
 
+import org.openqa.selenium.internal.Debug;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.remote.http.Filter;
 import org.openqa.selenium.remote.http.HttpHandler;
@@ -43,7 +44,7 @@ public HttpHandler apply(HttpHandler next) {
       Require.nonNull("Request", req);
 
       if (!isAuthorized(req.getHeader("Authorization"))) {
-        LOG.info("Unauthorized request to " + req);
+        LOG.log(Debug.getDebugLogLevel(), "Unauthorized request to " + req);
         return new HttpResponse()
           .setStatus(HttpURLConnection.HTTP_UNAUTHORIZED)
           .addHeader("WWW-Authenticate", "Basic realm=\"selenium-server\"");

File: java/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.remote;
 
-import static org.assertj.core.api.Assertions.assertThat;
-
 import com.google.common.collect.ImmutableMap;
 
 import org.junit.Test;
@@ -34,6 +32,8 @@
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Level;
 
+import static org.assertj.core.api.Assertions.assertThat;
+
 @Category(UnitTests.class)
 public class DesiredCapabilitiesTest {
 
@@ -97,7 +97,7 @@ public void shouldAutomaticallyConvertPlatformFromStringToEnum() {
     DesiredCapabilities caps = new DesiredCapabilities();
     caps.setCapability(CapabilityType.PLATFORM, "windows 7");
     assertThat(caps.getCapability(CapabilityType.PLATFORM)).isEqualTo(Platform.VISTA);
-    caps.setCapability(CapabilityType.PLATFORM, "WIN8_1");
+    caps.setCapability(CapabilityType.PLATFORM, "win8.1");
     assertThat(caps.getCapability(CapabilityType.PLATFORM)).isEqualTo(Platform.WIN8_1);
   }
 

File: java/test/org/openqa/selenium/devtools/NetworkInterceptorRestTest.java
Patch:
@@ -61,7 +61,7 @@ public void setup() {
 
     Route route = Route.matching(req -> req.getMethod() == HttpMethod.OPTIONS)
         .to(() -> req -> new HttpResponse()
-          .addHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE")
+          .addHeader("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, PATCH")
           .addHeader("Access-Control-Allow-Origin", "*"));
 
     appServer = new NettyAppServer(route);

File: java/src/org/openqa/selenium/chrome/ChromeDriver.java
Patch:
@@ -65,7 +65,7 @@ public ChromeDriver(ChromeDriverService service) {
    *
    * @param capabilities The capabilities required from the ChromeDriver.
    * @see #ChromeDriver(ChromeDriverService, Capabilities)
-   * @deprecated Use {@link ChromeDriver(ChromeOptions)} instead.
+   * @deprecated Use {@link #ChromeDriver(ChromeOptions)} instead.
    */
   @Deprecated
   public ChromeDriver(Capabilities capabilities) {
@@ -99,7 +99,7 @@ public ChromeDriver(ChromeDriverService service, ChromeOptions options) {
    *
    * @param service      The service to use.
    * @param capabilities The capabilities required from the ChromeDriver.
-   * @deprecated Use {@link ChromeDriver(ChromeDriverService, ChromeOptions)} instead.
+   * @deprecated Use {@link #ChromeDriver(ChromeDriverService, ChromeOptions)} instead.
    */
   @Deprecated
   public ChromeDriver(ChromeDriverService service, Capabilities capabilities) {

File: java/src/org/openqa/selenium/remote/DriverCommand.java
Patch:
@@ -275,7 +275,7 @@ static CommandPayload SET_ALERT_VALUE(String keysToSend) {
 
   String PRINT_PAGE = "printPage";
   static CommandPayload PRINT_PAGE(PrintOptions options) {
-    return new CommandPayload(PRINT_PAGE, ImmutableMap.of("options", options));
+    return new CommandPayload(PRINT_PAGE, options.toMap());
   }
 
   @Deprecated

File: java/src/org/openqa/selenium/grid/node/local/LocalNodeFactory.java
Patch:
@@ -68,9 +68,9 @@ public static Node create(Config config) {
         secretOptions.getRegistrationSecret())
       .maximumConcurrentSessions(nodeOptions.getMaxSessions())
       .sessionTimeout(sessionTimeout)
+      .drainAfterSessionCount(nodeOptions.getDrainAfterSessionCount())
       .heartbeatPeriod(nodeOptions.getHeartbeatPeriod());
 
-
     List<DriverService.Builder<?, ?>> builders = new ArrayList<>();
     ServiceLoader.load(DriverService.Builder.class).forEach(builders::add);
 

File: java/src/org/openqa/selenium/remote/http/HttpMethod.java
Patch:
@@ -21,5 +21,6 @@ public enum HttpMethod {
   DELETE,
   GET,
   POST,
+  PUT,
   OPTIONS
 }

File: java/src/org/openqa/selenium/devtools/CdpVersionFinder.java
Patch:
@@ -41,7 +41,7 @@ public class CdpVersionFinder {
   public CdpVersionFinder() {
     this(
       5,
-      StreamSupport.stream(ServiceLoader.load(CdpInfo.class).spliterator(), false).collect(Collectors.toSet()));
+      StreamSupport.stream(ServiceLoader.load(CdpInfo.class, CdpVersionFinder.class.getClassLoader()).spliterator(), false).collect(Collectors.toSet()));
   }
 
   public CdpVersionFinder(int versionFudgeFactor, Collection<CdpInfo> infos) {

File: java/src/org/openqa/selenium/ElementNotInteractableException.java
Patch:
@@ -18,8 +18,9 @@
 package org.openqa.selenium;
 
 /**
- * Thrown to indicate that although an element is present on the DOM, it is not in a state that can
- * be interacted with.
+ * Thrown to indicate that although a {@link WebElement} is present on the DOM, it is not in a state that can
+ * be interacted with. This includes an element that is not displayed or whose center point
+ * can not be scrolled into the viewport.
  */
 public class ElementNotInteractableException extends InvalidElementStateException {
   public ElementNotInteractableException(String message) {

File: java/src/org/openqa/selenium/InvalidElementStateException.java
Patch:
@@ -19,8 +19,7 @@
 
 /**
  * Indicates that a {@link WebElement} is in a state that means actions cannot be performed with it.
- * Examples would include an element being obscured by another when clicking, or perhaps not being
- * visible on the DOM. Subclasses of this provide more detailed information.
+ * For example, attempting to clear an element that isn’t both editable and resettable.
  */
 public class InvalidElementStateException extends WebDriverException {
   public InvalidElementStateException() {

File: java/test/org/openqa/selenium/remote/http/RetryRequestTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.remote.http;
 
 import com.google.common.collect.ImmutableMap;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.openqa.selenium.environment.webserver.AppServer;
@@ -45,6 +46,7 @@ public class RetryRequestTest {
   public void setUp() throws MalformedURLException {
     ClientConfig config = ClientConfig.defaultConfig()
       .baseUrl(URI.create("http://localhost:2345").toURL())
+      .withRetries()
       .readTimeout(Duration.ofSeconds(1));
     client = new NettyClient.Factory().createClient(config);
   }

File: java/src/org/openqa/selenium/grid/distributor/httpd/DistributorServer.java
Patch:
@@ -40,8 +40,8 @@
 import java.util.Set;
 import java.util.logging.Logger;
 
-import static java.net.HttpURLConnection.HTTP_INTERNAL_ERROR;
 import static java.net.HttpURLConnection.HTTP_OK;
+import static java.net.HttpURLConnection.HTTP_UNAVAILABLE;
 import static org.openqa.selenium.grid.config.StandardGridRoles.DISTRIBUTOR_ROLE;
 import static org.openqa.selenium.grid.config.StandardGridRoles.EVENT_BUS_ROLE;
 import static org.openqa.selenium.grid.config.StandardGridRoles.HTTPD_ROLE;
@@ -94,7 +94,7 @@ protected Handlers createHandlers(Config config) {
     HttpHandler readinessCheck = req -> {
       boolean ready = distributor.isReady();
       return new HttpResponse()
-        .setStatus(ready ? HTTP_OK : HTTP_INTERNAL_ERROR)
+        .setStatus(ready ? HTTP_OK : HTTP_UNAVAILABLE)
         .setHeader("Content-Type", MediaType.PLAIN_TEXT_UTF_8.toString())
         .setContent(Contents.utf8String("Distributor is " + ready));
     };

File: java/src/org/openqa/selenium/netty/server/ResponseConverter.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.netty.server;
 
+import com.google.common.io.ByteStreams;
 import io.netty.buffer.Unpooled;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelHandlerContext;
@@ -59,7 +60,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)
     // We may not know how large the response is, but figure it out if we can.
     byte[] ary = new byte[CHUNK_SIZE];
     InputStream is = seResponse.getContent().get();
-    int byteCount = is.read(ary);
+    int byteCount = ByteStreams.read(is, ary, 0, ary.length);
     // If there are no bytes left to read, then -1 is returned by read, and this is bad.
     byteCount = byteCount == -1 ? 0 : byteCount;
 
@@ -84,7 +85,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)
       // We need to write the first response.
       ctx.write(new DefaultHttpContent(Unpooled.wrappedBuffer(ary)));
 
-      HttpChunkedInput writer = new HttpChunkedInput(new ChunkedStream(is));
+      HttpChunkedInput writer = new HttpChunkedInput(new ChunkedStream(is, CHUNK_SIZE));
       ChannelFuture future = ctx.write(writer);
       future.addListener(ignored -> {
         is.close();

File: java/src/org/openqa/selenium/By.java
Patch:
@@ -301,7 +301,7 @@ public static class ByClassName extends PreW3CLocator {
 
     public ByClassName(String className) {
       super(
-        "class",
+        "class name",
         Require.argument("Class name", className)
           .nonNull("Cannot find elements when the class name expression is null."),
       ".%s");

File: java/src/org/openqa/selenium/grid/node/relay/RelayOptions.java
Patch:
@@ -161,6 +161,7 @@ public Map<Capabilities, Collection<SessionFactory>> getSessionFactories(
             tracer,
             clientFactory,
             getServiceUri(),
+            getServiceStatusUri(),
             stereotype));
       }
       LOG.info(String.format("Mapping %s, %d times", stereotype, maxSessions));

File: java/test/org/openqa/selenium/firefox/MarionetteTest.java
Patch:
@@ -39,7 +39,7 @@
 
 public class MarionetteTest extends JUnit4TestBase {
 
-  private static final String MOOLTIPASS_PATH = "third_party/firebug/mooltipass-1.1.87.xpi";
+  private static final String EXT_PATH = "common/extensions/webextensions-selenium-example.xpi";
 
   private FirefoxDriver localDriver;
 
@@ -233,8 +233,9 @@ public void canStartHeadless() {
   public void canInstallAndUninstallExtensionsOnTheFly() {
     assumeTrue(driver instanceof FirefoxDriver);
     FirefoxDriver localDriver = (FirefoxDriver) driver;
-    Path extension = InProject.locate(MOOLTIPASS_PATH);
+    Path extension = InProject.locate(EXT_PATH);
     String extId = localDriver.installExtension(extension);
+    assertThat(extId).isEqualTo("webextensions-selenium-example@example.com");
     localDriver.uninstallExtension(extId);
   }
 

File: java/test/org/openqa/selenium/firefox/RemoteFirefoxDriverTest.java
Patch:
@@ -39,9 +39,9 @@ public class RemoteFirefoxDriverTest extends JUnit4TestBase {
   @Test
   @NoDriverAfterTest
   public void shouldAllowRemoteWebDriverBuilderToUseHasExtensions() {
-    Path extension = InProject.locate("third_party/firebug/favourite_colour-1.1-an+fx.xpi");
+    Path extension = InProject.locate("common/extensions/webextensions-selenium-example.xpi");
     String id = ((HasExtensions) driver).installExtension(extension);
-    assertThat(id).isEqualTo("favourite-colour-examples@mozilla.org");
+    assertThat(id).isEqualTo("webextensions-selenium-example@example.com");
 
     try {
       ((HasExtensions) driver).uninstallExtension(id);

File: java/test/org/openqa/selenium/testing/Pages.java
Patch:
@@ -38,6 +38,7 @@ public class Pages {
   public String droppableItems;
   public String dynamicallyModifiedPage;
   public String dynamicPage;
+  public String echoPage;
   public String errorsPage;
   public String formPage;
   public String formSelectionPage;
@@ -98,6 +99,7 @@ public Pages(AppServer appServer) {
     documentWrite = appServer.whereIs("document_write_in_onload.html");
     dynamicallyModifiedPage = appServer.whereIs("dynamicallyModifiedPage.html");
     dynamicPage = appServer.whereIs("dynamic.html");
+    echoPage = appServer.whereIs("echo");
     errorsPage = appServer.whereIs("errors.html");
     xhtmlFormPage = appServer.whereIs("xhtmlFormPage.xhtml");
     formPage = appServer.whereIs("formPage.html");

File: java/src/org/openqa/selenium/interactions/Coordinates.java
Patch:
@@ -31,7 +31,7 @@ public interface Coordinates {
    * before calculating its coordinates.
    *
    * @return coordinates on the element relative to the top-left corner of the monitor (screen).
-   * @throws org.openqa.selenium.ElementNotVisibleException if the element can't be scrolled into view.
+   * @throws org.openqa.selenium.ElementNotInteractableException if the element can't be scrolled into view.
    */
   Point onScreen();
 
@@ -41,7 +41,7 @@ public interface Coordinates {
    * scrolls the page and/or frames to make element visible in viewport before calculating its coordinates.
    *
    * @return coordinates on the element relative to the top-left corner of the browser window's viewport.
-   * @throws org.openqa.selenium.ElementNotVisibleException if the element can't be scrolled into view.
+   * @throws org.openqa.selenium.ElementNotInteractableException if the element can't be scrolled into view.
    */
   Point inViewPort();
 

File: java/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -64,7 +64,6 @@ public class FirefoxOptions extends AbstractDriverOptions<FirefoxOptions> {
   public FirefoxOptions() {
     setCapability(CapabilityType.BROWSER_NAME, FIREFOX.browserName());
     setAcceptInsecureCerts(true);
-    addPreference("remote.active-protocols", 2);
     setCapability("moz:debuggerAddress", true);
   }
 

File: java/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -64,6 +64,7 @@ public class FirefoxOptions extends AbstractDriverOptions<FirefoxOptions> {
   public FirefoxOptions() {
     setCapability(CapabilityType.BROWSER_NAME, FIREFOX.browserName());
     setAcceptInsecureCerts(true);
+    addPreference("remote.active-protocols", 2);
     setCapability("moz:debuggerAddress", true);
   }
 

File: java/src/org/openqa/selenium/JavascriptExecutor.java
Patch:
@@ -105,7 +105,7 @@ public interface JavascriptExecutor {
    *   ((JavascriptExecutor) driver).executeAsyncScript(
    *       "window.setTimeout(arguments[arguments.length - 1], 500);");
    *   System.out.println(
-   *       "Elapsed time: " + System.currentTimeMillis() - start);
+   *       "Elapsed time: " + (System.currentTimeMillis() - start));
    * }</pre>
    *
    * <p>

File: java/src/org/openqa/selenium/grid/router/HandleSession.java
Patch:
@@ -32,6 +32,7 @@
 import com.google.common.collect.ImmutableMap;
 
 import org.openqa.selenium.NoSuchSessionException;
+import org.openqa.selenium.concurrent.GuardedRunnable;
 import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.sessionmap.SessionMap;
 import org.openqa.selenium.grid.web.ReverseProxyHandler;
@@ -88,7 +89,7 @@ class HandleSession implements HttpHandler {
           return thread;
         });
     cleanUpHttpClientsCacheService.scheduleAtFixedRate(
-      httpClients::cleanUp, 1, 1, TimeUnit.MINUTES);
+      GuardedRunnable.guard(httpClients::cleanUp), 1, 1, TimeUnit.MINUTES);
   }
 
   @Override

File: java/src/org/openqa/selenium/grid/sessionqueue/local/LocalNewSessionQueue.java
Patch:
@@ -9,6 +9,7 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.SessionNotCreatedException;
+import org.openqa.selenium.concurrent.GuardedRunnable;
 import org.openqa.selenium.events.EventBus;
 import org.openqa.selenium.grid.config.Config;
 import org.openqa.selenium.grid.data.CreateSessionResponse;
@@ -123,7 +124,7 @@ public LocalNewSessionQueue(
     // if retryPeriod is 0, we will schedule timeout checks every second
     long period = this.requestTimeout.isZero() ? 1000 : this.requestTimeout.toMillis();
     service.scheduleAtFixedRate(
-      this::timeoutSessions,
+      GuardedRunnable.guard(this::timeoutSessions),
       retryPeriod.toMillis(),
       period, MILLISECONDS);
 

File: java/src/org/openqa/selenium/Platform.java
Patch:
@@ -203,7 +203,7 @@ public String toString() {
     }
   },
 
-  MONTERREY("monterrey", "os x 12.0", "macos 12.0") {
+  MONTEREY("monterey", "os x 12.0", "macos 12.0") {
     @Override
     public Platform family() {
       return MAC;

File: java/test/org/openqa/selenium/environment/webserver/NettyAppServer.java
Patch:
@@ -95,9 +95,8 @@ private static Config createDefaultConfig() {
   }
 
   public static void main(String[] args) {
-    MemoizedConfig
-      config =
-      new MemoizedConfig(new MapConfig(singletonMap("server", singletonMap("port", 2310))));
+    MemoizedConfig config = new MemoizedConfig(
+      new MapConfig(singletonMap("server", singletonMap("port", 2310))));
     BaseServerOptions options = new BaseServerOptions(config);
 
     HttpHandler handler = new HandlersForTests(

File: java/src/org/openqa/selenium/grid/log/LoggingFlags.java
Patch:
@@ -66,17 +66,17 @@ public class LoggingFlags implements HasRoles {
 
   @Parameter(description = "File to write out logs. "
                            + "Ensure the file path is compatible with the operating system's file path.\n"
-                           + "Windows path example : \\\\path\\to\\file\\gridlog.log OR "
+                           + "# Windows path example : \\\\path\\to\\file\\gridlog.log OR "
                            + "C:\\path\\path\\to\\file\\gridlog.log \n"
-                           + "Linux/Unix/MacOS path example : /path/to/file/gridlog.log \n"
+                           + "# Linux/Unix/MacOS path example : /path/to/file/gridlog.log \n"
     , names = "--log", arity = 1)
   @ConfigValue(section = LOGGING_SECTION, name = "log-file", example = {"'\\\\path\\to\\file\\gridlog.log'",
                                                                         "'C:\\path\\path\\to\\file\\gridlog.log'",
                                                                         "'/path/to/file/gridlog.log'"})
   private String logFile;
 
   @Parameter(description = "Log encoding", names = "--log-encoding", arity = 1)
-  @ConfigValue(section = LOGGING_SECTION, name = "log-encoding", example = "UTF-8")
+  @ConfigValue(section = LOGGING_SECTION, name = "log-encoding", example = "\"UTF-8\"")
   private String logEncoding;
 
   @Parameter(description =

File: java/src/org/openqa/selenium/grid/node/config/NodeFlags.java
Patch:
@@ -145,9 +145,9 @@ public class NodeFlags implements HasRoles {
               "display-name = \"Firefox Nightly\"\n" +
               "webdriver-executable = \"/usr/local/bin/geckodriver\"\n" +
               "max-sessions = 2\n" +
-              "stereotype = \"{\"browserName\": \"firefox\", \"browserVersion\": \"86\", " +
-              "\"moz:firefoxOptions\": " +
-              "{\"binary\":\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin\"}}\"")
+              "stereotype = \"{\\\"browserName\\\": \\\"firefox\\\", \\\"browserVersion\\\": \\\"86\\\", " +
+              "\\\"moz:firefoxOptions\\\": " +
+              "{\\\"binary\\\":\\\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin\\\"}}\"")
   public List<String> driverConfiguration;
 
   @Parameter(

File: java/src/org/openqa/selenium/grid/node/docker/DockerFlags.java
Patch:
@@ -40,7 +40,7 @@ public class DockerFlags implements HasRoles {
     names = {"--docker-url"},
     description = "URL for connecting to the docker daemon"
   )
-  @ConfigValue(section = DockerOptions.DOCKER_SECTION, name = "url", example = DockerOptions.DEFAULT_DOCKER_URL)
+  @ConfigValue(section = DockerOptions.DOCKER_SECTION, name = "url", example = "\"" + DockerOptions.DEFAULT_DOCKER_URL + "\"")
   private String dockerUrl;
 
   @Parameter(
@@ -81,7 +81,7 @@ public class DockerFlags implements HasRoles {
     names = {"--docker-assets-path"},
     description = "Absolute path where assets will be stored"
   )
-  @ConfigValue(section = DockerOptions.DOCKER_SECTION, name = "assets-path", example = DockerOptions.DEFAULT_ASSETS_PATH)
+  @ConfigValue(section = DockerOptions.DOCKER_SECTION, name = "assets-path", example = "\"" + DockerOptions.DEFAULT_ASSETS_PATH + "\"")
   private String assetsPath;
 
   @Override

File: java/src/org/openqa/selenium/grid/node/relay/RelayFlags.java
Patch:
@@ -54,16 +54,16 @@ public class RelayFlags implements HasRoles {
     prefixed = true,
     example = "\n" +
               "max-sessions = 2\n" +
-              "stereotype = \"{\"browserName\": \"safari\", \"platformName\": \"iOS\", " +
-              "\"appium:platformVersion\": \"14.5\" }}\"")
+              "stereotype = \"{\\\"browserName\\\": \\\"safari\\\", \\\"platformName\\\": \\\"iOS\\\", " +
+              "\\\"appium:platformVersion\\\": \\\"14.5\\\" }}\"")
   public List<String> driverConfiguration;
 
   @Parameter(
     names = {"--service-url"},
     description = "URL for connecting to the service that supports WebDriver commands, "
                   + "like an Appium server or a cloud service."
   )
-  @ConfigValue(section = RELAY_SECTION, name = "url", example = "http://localhost:4723")
+  @ConfigValue(section = RELAY_SECTION, name = "url", example = "\"http://localhost:4723\"")
   private String serviceUrl;
   @Parameter(
     names = {"--service-host"},

File: java/src/org/openqa/selenium/grid/server/EventBusFlags.java
Patch:
@@ -64,7 +64,7 @@ public class EventBusFlags implements HasRoles {
   @ConfigValue(
     section = EVENTS_SECTION,
     name = "implementation",
-    example = "org.openqa.selenium.events.zeromq.ZeroMqEventBus")
+    example = "\"org.openqa.selenium.events.zeromq.ZeroMqEventBus\"")
   private String implementation;
 
   @Override

File: java/test/org/openqa/selenium/remote/RemoteWebDriverBuilderTest.java
Patch:
@@ -310,7 +310,6 @@ public void shouldSetRemoteHostUriOnClientConfigIfSet() {
   @Test
   public void shouldThrowErrorIfCustomConfigIfSetForLocalDriver() {
     ClientConfig config = ClientConfig.defaultConfig()
-      .connectionTimeout(Duration.ofMinutes(5))
       .readTimeout(Duration.ofMinutes(4));
 
     RemoteWebDriverBuilder builder = RemoteWebDriver.builder()

File: java/src/org/openqa/selenium/devtools/Connection.java
Patch:
@@ -35,9 +35,9 @@
 import java.io.Closeable;
 import java.io.StringReader;
 import java.time.Duration;
-import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
 import java.util.concurrent.Executors;
@@ -66,7 +66,7 @@ public class Connection implements Closeable {
   });
   private static final AtomicLong NEXT_ID = new AtomicLong(1L);
   private final WebSocket socket;
-  private final Map<Long, Consumer<Either<Throwable, JsonInput>>> methodCallbacks = new LinkedHashMap<>();
+  private final Map<Long, Consumer<Either<Throwable, JsonInput>>> methodCallbacks = new ConcurrentHashMap<>();
   private final ReadWriteLock callbacksLock = new ReentrantReadWriteLock(true);
   private final Multimap<Event<?>, Consumer<?>> eventCallbacks = HashMultimap.create();
 

File: java/src/org/openqa/selenium/remote/http/HttpClient.java
Patch:
@@ -48,7 +48,7 @@ interface Factory {
      * @throws IllegalStateException if more than one implementation with the given name can be found
      */
     static Factory create(String name) {
-      ServiceLoader<HttpClient.Factory> loader = ServiceLoader.load(HttpClient.Factory.class);
+      ServiceLoader<HttpClient.Factory> loader = ServiceLoader.load(HttpClient.Factory.class, HttpClient.Factory.class.getClassLoader());
       Set<Factory> factories = StreamSupport.stream(loader.spliterator(), true)
           .filter(p -> p.getClass().isAnnotationPresent(HttpClientName.class))
           .filter(p -> name.equals(p.getClass().getAnnotation(HttpClientName.class).value()))

File: java/src/org/openqa/selenium/support/ui/FluentWait.java
Patch:
@@ -49,8 +49,8 @@
  *   // Waiting 30 seconds for an element to be present on the page, checking
  *   // for its presence once every 5 seconds.
  *   Wait&lt;WebDriver&gt; wait = new FluentWait&lt;WebDriver&gt;(driver)
- *       .withTimeout(30, SECONDS)
- *       .pollingEvery(5, SECONDS)
+ *       .withTimeout(Duration.ofSeconds(30L))
+ *       .pollingEvery(Duration.ofSeconds(5L))
  *       .ignoring(NoSuchElementException.class);
  *
  *   WebElement foo = wait.until(new Function&lt;WebDriver, WebElement&gt;() {

File: java/src/org/openqa/selenium/devtools/CdpClientGenerator.java
Patch:
@@ -769,6 +769,9 @@ public TypeDeclaration<?> toTypeDeclaration() {
       if (type.equals("object")) {
         toJson.setType("java.util.Map<String, Object>");
         toJson.getBody().get().addStatement(String.format("return %s;", propertyName));
+      } else if (type.equals("number")) {
+        toJson.setType(Number.class);
+        toJson.getBody().get().addStatement(String.format("return %s;", propertyName));
       } else if (type.equals("integer")) {
         toJson.setType(Integer.class);
         toJson.getBody().get().addStatement(String.format("return %s;", propertyName));

File: java/src/org/openqa/selenium/devtools/v85/V85Events.java
Patch:
@@ -64,7 +64,7 @@ protected Event<ExceptionThrown> exceptionThrownEvent() {
 
   @Override
   protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
-    long ts = new BigDecimal(event.getTimestamp().toJson()).longValue();
+    long ts = event.getTimestamp().toJson().longValue();
 
     List<Object> modifiedArgs = event.getArgs().stream()
       .map(obj -> new RemoteObject(

File: java/src/org/openqa/selenium/devtools/v94/V94Events.java
Patch:
@@ -64,7 +64,7 @@ protected Event<ExceptionThrown> exceptionThrownEvent() {
 
   @Override
   protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
-    long ts = new BigDecimal(event.getTimestamp().toJson()).longValue();
+    long ts = event.getTimestamp().toJson().longValue();
 
     List<Object> modifiedArgs = event.getArgs().stream()
       .map(obj -> new RemoteObject(

File: java/src/org/openqa/selenium/devtools/v95/V95Events.java
Patch:
@@ -64,7 +64,7 @@ protected Event<ExceptionThrown> exceptionThrownEvent() {
 
   @Override
   protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
-    long ts = new BigDecimal(event.getTimestamp().toJson()).longValue();
+    long ts = event.getTimestamp().toJson().longValue();
 
     List<Object> modifiedArgs = event.getArgs().stream()
       .map(obj -> new RemoteObject(

File: java/src/org/openqa/selenium/devtools/v96/V96Events.java
Patch:
@@ -64,7 +64,7 @@ protected Event<ExceptionThrown> exceptionThrownEvent() {
 
   @Override
   protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
-    long ts = new BigDecimal(event.getTimestamp().toJson()).longValue();
+    long ts = event.getTimestamp().toJson().longValue();
 
     List<Object> modifiedArgs = event.getArgs().stream()
       .map(obj -> new RemoteObject(

File: java/test/org/openqa/selenium/devtools/ConsoleEventsTest.java
Patch:
@@ -23,8 +23,7 @@
 import org.openqa.selenium.By;
 import org.openqa.selenium.devtools.events.ConsoleEvent;
 import org.openqa.selenium.environment.webserver.Page;
-import org.openqa.selenium.testing.NotYetImplemented;
-import org.openqa.selenium.testing.drivers.Browser;
+import org.openqa.selenium.testing.Ignore;
 
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
@@ -34,7 +33,7 @@
 public class ConsoleEventsTest extends DevToolsTestBase {
 
   @Test
-  @NotYetImplemented(value = Browser.FIREFOX, reason = "`Log` domain not yet supported")
+  @Ignore(gitHubActions = true)
   public void canWatchConsoleEvents() throws InterruptedException, ExecutionException, TimeoutException {
     String page = appServer.create(
       new Page()

File: java/src/org/openqa/selenium/grid/node/httpd/NodeServer.java
Patch:
@@ -54,7 +54,6 @@
 import org.openqa.selenium.grid.server.NetworkOptions;
 import org.openqa.selenium.grid.server.Server;
 import org.openqa.selenium.internal.Require;
-import org.openqa.selenium.internal.ShutdownHooks;
 import org.openqa.selenium.netty.server.NettyServer;
 import org.openqa.selenium.remote.http.Contents;
 import org.openqa.selenium.remote.http.HttpClient;
@@ -227,7 +226,7 @@ public NettyServer start() {
   protected void execute(Config config) {
     Require.nonNull("Config", config);
 
-    ShutdownHooks.add(shutdownHook);
+    Runtime.getRuntime().addShutdownHook(shutdownHook);
     Server<?> server = asServer(config).start();
 
     BuildInfo info = new BuildInfo();

File: java/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -69,7 +69,6 @@
 import org.openqa.selenium.internal.Debug;
 import org.openqa.selenium.internal.Either;
 import org.openqa.selenium.internal.Require;
-import org.openqa.selenium.internal.ShutdownHooks;
 import org.openqa.selenium.io.TemporaryFilesystem;
 import org.openqa.selenium.io.Zip;
 import org.openqa.selenium.json.Json;
@@ -189,7 +188,7 @@ private LocalNode(
       }
     }));
 
-    ShutdownHooks.add(new Thread(this::stopAllSessions));
+    Runtime.getRuntime().addShutdownHook(new Thread(this::stopAllSessions));
     new JMXHelper().register(this);
   }
 

File: java/src/org/openqa/selenium/By.java
Patch:
@@ -31,14 +31,14 @@
  * though it is expected that all subclasses rely on the basic finding mechanisms provided
  * through static methods of this class:
  *
- * <code>
+ * <pre><code>
  * public WebElement findElement(WebDriver driver) {
  *     WebElement element = driver.findElement(By.id(getSelector()));
  *     if (element == null)
  *       element = driver.findElement(By.name(getSelector());
  *     return element;
  * }
- * </code>
+ * </code></pre>
  */
 public abstract class By {
   /**

File: java/src/org/openqa/selenium/devtools/NetworkInterceptor.java
Patch:
@@ -43,14 +43,14 @@
  * <p>
  * Example usage:
  * <p>
- * <code>
+ * <pre><code>
  *   Route route = Route.matching(req -&gt; GET == req.getMethod() &amp;&amp; req.getUri().endsWith("/example"))
  *     .to(() -&gt; req -&gt; new HttpResponse().setContent(Contents.utf8String("Hello, World!")));
  *
  *   try (NetworkInterceptor interceptor = new NetworkInterceptor(driver, route)) {
  *     // Your code here.
  *   }
- * </code>
+ * </code></pre>
  * <p>
  * It is also possible to intercept and modify responses that the browser will
  * receive. Do this by calling {@link #NetworkInterceptor(WebDriver, Filter)}.

File: java/src/org/openqa/selenium/opera/OperaOptions.java
Patch:
@@ -110,7 +110,7 @@ public OperaOptions addArguments(String... arguments) {
 
   /**
    * Adds additional command line arguments to be used when starting Opera.
-   * For example:
+   * <p>For example:
    * <pre><code>
    *   options.setArguments(
    *       "load-extension=/path/to/unpacked_extension",

File: java/src/org/openqa/selenium/support/PageFactory.java
Patch:
@@ -39,15 +39,15 @@ public class PageFactory {
    * List&lt;WebElement&gt; fields that have been declared, assuming that the field
    * name is also the HTML element's "id" or "name". This means that for the class:
    *
-   * <code> public class Page { private WebElement submit; } </code>
+   * <pre><code> public class Page { private WebElement submit; } </code></pre>
    *
    * there will be an element that can be located using the xpath expression "//*[@id='submit']" or
    * "//*[@name='submit']"
-   *
+   * <p>
    * By default, the element or the list is looked up each and every time a method is called upon
    * it. To change this behaviour, simply annotate the field with the {@link CacheLookup}. To change
    * how the element is located, use the {@link FindBy} annotation.
-   *
+   * <p>
    * This method will attempt to instantiate the class given to it, preferably using a constructor
    * which takes a WebDriver instance as its only argument or falling back on a no-arg constructor.
    * An exception will be thrown if the class cannot be instantiated.

File: java/src/org/openqa/selenium/remote/http/ClientConfig.java
Patch:
@@ -30,7 +30,7 @@
 
 public class ClientConfig {
 
-  private static final AddSeleniumUserAgent DEFAULT_FILTER = new AddSeleniumUserAgent();
+  private static final Filter DEFAULT_FILTER = new AddSeleniumUserAgent().andThen(new RetryRequest());
   private final URI baseUri;
   private final Duration connectionTimeout;
   private final Duration readTimeout;
@@ -58,7 +58,7 @@ public static ClientConfig defaultConfig() {
       null,
       Duration.ofSeconds(10),
       Duration.ofMinutes(3),
-      new AddSeleniumUserAgent(),
+      DEFAULT_FILTER,
       null,
       null);
   }

File: java/src/org/openqa/selenium/WebDriverException.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
@@ -34,7 +35,7 @@ public class WebDriverException extends RuntimeException {
   private static final String HOST_NAME = HostIdentifier.getHostName();
   private static final String HOST_ADDRESS = HostIdentifier.getHostAddress();
 
-  private final Map<String, String> extraInfo = new HashMap<>();
+  private final Map<String, String> extraInfo = new ConcurrentHashMap<>();
 
   public WebDriverException() {
     super();

File: java/src/com/thoughtworks/selenium/Selenium.java
Patch:
@@ -1704,7 +1704,7 @@ public interface Selenium {
   String captureNetworkTraffic(String type);
 
   /**
-   * Tells the Selenium server to add the specificed key and value as a custom outgoing request
+   * Tells the Selenium server to add the specified key and value as a custom outgoing request
    * header. This only works if the browser is configured to use the built in Selenium proxy.
    *
    * @param key the header name.

File: java/src/org/openqa/selenium/grid/distributor/package-info.java
Patch:
@@ -26,8 +26,8 @@
  * <p>
  * To complicate matters, local ends may send a session request that is one of
  * two different dialects (presumably in the future there may be more. *sigh*)
- * and care must be taken to ensure that dialacts match, or that a converter
+ * and care must be taken to ensure that dialects match, or that a converter
  * of some sort is added. The Node may be the part of the system responsible
  * for adding this converter.
  */
-package org.openqa.selenium.grid.distributor;
\ No newline at end of file
+package org.openqa.selenium.grid.distributor;

File: java/src/org/openqa/selenium/grid/node/config/NodeFlags.java
Patch:
@@ -56,7 +56,7 @@ public class NodeFlags implements HasRoles {
   @Parameter(
     names = {"--override-max-sessions"},
     arity = 1,
-    description = "The # of available processos is the recommended max sessions value (1 browser "
+    description = "The # of available processors is the recommended max sessions value (1 browser "
                   + "session per processor). Setting this flag to true allows the recommended max "
                   + "value to be overwritten. Session stability and reliability might suffer as "
                   + "the host could run out of resources.")

File: java/src/org/openqa/selenium/grid/router/ProxyWebsocketsIntoGrid.java
Patch:
@@ -71,7 +71,7 @@ public Optional<Consumer<Message>> apply(String uri, Consumer<Message> downstrea
       return Optional.of(upstream::send);
 
     } catch (NoSuchSessionException e) {
-      LOG.info("Attempt to connect to non-existant session: " + uri);
+      LOG.info("Attempt to connect to non-existent session: " + uri);
       return Optional.empty();
     }
   }

File: java/src/org/openqa/selenium/grid/sessionmap/jdbc/JdbcBackedSessionMap.java
Patch:
@@ -181,7 +181,7 @@ public Session get(SessionId id) throws NoSuchSessionException {
     Require.nonNull("Session ID", id);
 
     URI uri = null;
-    Capabilities sterotype = null;
+    Capabilities stereotype = null;
     Capabilities caps = null;
     Instant start = null;
     String rawUri = null;
@@ -229,7 +229,7 @@ public Session get(SessionId id) throws NoSuchSessionException {
 
           String rawStereotype = sessions.getString(SESSION_STEREOTYPE_COL);
 
-          sterotype = rawStereotype == null ?
+          stereotype = rawStereotype == null ?
             new ImmutableCapabilities() :
             JSON.toType(rawStereotype, Capabilities.class);
 
@@ -261,7 +261,7 @@ public Session get(SessionId id) throws NoSuchSessionException {
         }
 
         span.addEvent("Retrieved session from the database", attributeMap);
-        return new Session(id, uri, sterotype, caps, start);
+        return new Session(id, uri, stereotype, caps, start);
       } catch (SQLException e) {
         span.setAttribute("error", true);
         span.setStatus(Status.CANCELLED);

File: java/src/org/openqa/selenium/ie/InternetExplorerDriverService.java
Patch:
@@ -107,14 +107,14 @@ public static class Builder extends DriverService.Builder<
     private Boolean silent = null;
 
     @Override
-    public int score(Capabilities capabilites) {
+    public int score(Capabilities capabilities) {
       int score = 0;
 
-      if (IE.is(capabilites)) {
+      if (IE.is(capabilities)) {
         score++;
       }
 
-      if (capabilites.getCapability(InternetExplorerOptions.IE_OPTIONS) != null) {
+      if (capabilities.getCapability(InternetExplorerOptions.IE_OPTIONS) != null) {
         score++;
       }
 

File: java/src/org/openqa/selenium/net/Urls.java
Patch:
@@ -67,7 +67,7 @@ public static URL fromUri(URI uri) {
    * {@code docker://localhost:1234} would not generally be a valid {@link URL}
    * but would be a correct {@link URI}.
    * <p>
-   * A known limitiation is that URI fragments are not handled. In the
+   * A known limitation is that URI fragments are not handled. In the
    * expected use cases for this method, that is not a problem.
    */
   public static URI from(String rawUri) {
@@ -86,8 +86,8 @@ public static URI from(String rawUri) {
         return createHttpUri(rawUri);
       }
 
-      // Check the characters preceeding the colon. If they're all numbers
-      // (or there's no preceeding character), we're dealing with a short form
+      // Check the characters preceding the colon. If they're all numbers
+      // (or there's no preceding character), we're dealing with a short form
       // ip6 address.
       if (colonIndex != -1) {
         if (colonIndex == 0) {

File: java/src/org/openqa/selenium/remote/server/handler/DeleteSession.java
Patch:
@@ -55,7 +55,7 @@ public Void call() {
           thread and the thread executing commands
           All this ugliness would go away if we just handled create and delete of sessions fully
           inside ResultConfig because then we could avoid switching threads and there will
-          not be logevents that do not have a session present
+          not be log events that do not have a session present
           Additionally; if we ever get non-session bound logging here, it will come in
           the incorrect order. But that should only happen on create/delete, right ?
        */

File: java/src/org/openqa/selenium/server/htmlrunner/TestState.java
Patch:
@@ -82,7 +82,7 @@ public String expand(String toExpand) {
 
     int lastEnd = 0;
     while (matcher.find()) {
-      // Copy from the last end into the stringbuffer
+      // Copy from the last end into the string builder
       toReturn.append(toExpand, lastEnd, matcher.start());
       // Now insert the value
       toReturn.append(getValue(matcher.group(1)));

File: java/src/org/openqa/selenium/support/ui/ExpectedConditions.java
Patch:
@@ -532,7 +532,7 @@ public String toString() {
 
   /**
    * An expectation for checking whether the given frame is available to switch to. <p> If the frame
-   * is available it switches the given driver to the specified webelement.
+   * is available it switches the given driver to the specified web element.
    *
    * @param frameLocator used to find the frame (webelement)
    * @return WebDriver instance after frame has been switched

File: java/test/com/thoughtworks/selenium/BrowserConfigurationOptionsTest.java
Patch:
@@ -97,7 +97,7 @@ public void testSetBrowserExecutablePathWithNullPath() {
   }
 
   @Test
-  public void testSetBrowserExcecutablePathWithValidPath() {
+  public void testSetBrowserExecutablePathWithValidPath() {
     String path = "c:\\chrome\\is\\cool.exe with_arg";
     BrowserConfigurationOptions bco =
         new BrowserConfigurationOptions().setBrowserExecutablePath(path);

File: java/test/com/thoughtworks/selenium/DefaultSeleniumStartErrorHandlingTest.java
Patch:
@@ -50,9 +50,9 @@ public void testShouldLeaveOtherExceptionAlone() {
       new DefaultSelenium(failOnStartCommandProcessor).start();
       fail("Did not catch RuntimeException as expected");
     } catch (RuntimeException expected) {
-      /* Catching RuntimeEception as expected */
-      assertTrue(-1 != expected.getMessage().indexOf("Could not start Selenium session: "));
-      assertTrue(-1 != expected.getMessage().indexOf("some crazy unexpected exception"));
+      /* Catching RuntimeException as expected */
+      assertTrue(expected.getMessage().contains("Could not start Selenium session: "));
+      assertTrue(expected.getMessage().contains("some crazy unexpected exception"));
     }
   }
 

File: java/test/com/thoughtworks/selenium/corebased/TestCssLocators.java
Patch:
@@ -101,7 +101,7 @@ public void testCssLocators() {
 
     // css3 selector test
 
-    // attribuite test
+    // attribute test
 
     verifyEquals(selenium.getText("css=a[name^=\"foo\"]"), "foobar");
 
@@ -149,7 +149,7 @@ public void testCssLocators() {
     }
 
     if (isCapableOfAdvancedSelectors(selenium, isIe)) {
-      // Versions of firefox prior to 3.5 don't propogate the lang property.
+      // Versions of firefox prior to 3.5 don't propagate the lang property.
       verifyEquals(selenium.getText("css=a:lang(en)"), "this is the first element");
 
       verifyEquals(selenium.getText("css=#linkPseudoTest :link"), "link pseudo test");

File: java/test/com/thoughtworks/selenium/corebased/TestJavascriptParameters.java
Patch:
@@ -38,7 +38,7 @@ public void testJavascriptParameters() {
     selenium.type("theText", selenium
         .getEval("\n function square(n) {\n return n * n;\n };\n '25 * 25 = ' + square(25);\n "));
     verifyTrue(selenium.getValue("theText").matches("^25 [\\s\\S]* 25 = 625$"));
-    // Demonstrate interation between variable substitution and javascript
+    // Demonstrate interaction between variable substitution and javascript
     String var1 = "the value";
     selenium.type("theText", selenium.getEval("'${var1}'.toUpperCase()"));
     verifyEquals(selenium.getValue("theText"), "${VAR1}");

File: java/test/com/thoughtworks/selenium/corebased/TestTable.java
Patch:
@@ -25,7 +25,7 @@
 public class TestTable extends InternalSelenseTestBase {
   /* See https://github.com/SeleniumHQ/selenium-google-code-issue-archive/issues/2255 */
   @Test @Ignore
-  public void getValueFramTableTwiceInARowShouldWork() {
+  public void getValueFromTableTwiceInARowShouldWork() {
     selenium.open("test_table.html");
 
     String value1 = selenium.getTable("test_table.0.0");

File: java/test/com/thoughtworks/selenium/webdriven/VariableDeclarationTest.java
Patch:
@@ -47,7 +47,7 @@ public void testShouldLeaveThingsWellAloneIfNotNeeded() {
   }
 
   @Test
-  public void testShouldAddDeclarationIfNecesssary() {
+  public void testShouldAddDeclarationIfNecessary() {
     StringBuilder builder = new StringBuilder();
     declaration.mutate("selenium.browserbot.findElement", builder);
 

File: java/test/org/openqa/selenium/ClearTest.java
Patch:
@@ -44,7 +44,7 @@ public void testWritableTextInputShouldClear() {
   @Test
   public void testTextInputShouldNotClearWhenDisabled() {
     driver.get(pages.readOnlyPage);
-    WebElement element = driver.findElement(By.id("textInputnotenabled"));
+    WebElement element = driver.findElement(By.id("textInputNotEnabled"));
     assertThat(element.isEnabled()).isFalse();
     assertThatExceptionOfType(InvalidElementStateException.class)
         .isThrownBy(element::clear);
@@ -69,7 +69,7 @@ public void testWritableTextAreaShouldClear() {
   @Test
   public void testTextAreaShouldNotClearWhenDisabled() {
     driver.get(pages.readOnlyPage);
-    WebElement element = driver.findElement(By.id("textAreaNotenabled"));
+    WebElement element = driver.findElement(By.id("textAreaNotEnabled"));
     assertThatExceptionOfType(InvalidElementStateException.class)
         .isThrownBy(element::clear);
   }

File: java/test/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -307,7 +307,7 @@ public void testShouldWalkThePathToDeleteACookie() {
     driver.manage().addCookie(cookie2);
 
     driver.get(domainHelper.getUrlForFirstValidHostname("child/grandchild/grandchildPage.html"));
-    Cookie cookie3 = new Cookie("dog", "dalmation", "/common/child/grandchild/");
+    Cookie cookie3 = new Cookie("dog", "dalmatian", "/common/child/grandchild/");
     driver.manage().addCookie(cookie3);
 
     driver.get(domainHelper.getUrlForFirstValidHostname("child/grandchild/grandchildPage.html"));

File: java/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -247,7 +247,7 @@ public void testShouldReturnHiddenTextForTextContentAttribute() {
   }
 
   @Test
-  public void testShouldGetNumericAtribute() {
+  public void testShouldGetNumericAttribute() {
     driver.get(pages.formPage);
     WebElement element = driver.findElement(By.id("withText"));
     assertThat(element.getAttribute("rows")).isEqualTo("5");

File: java/test/org/openqa/selenium/ElementDomAttributeTest.java
Patch:
@@ -213,7 +213,7 @@ public void testShouldNotReturnTextContentProperty() {
   }
 
   @Test
-  public void testShouldGetNumericAtribute() {
+  public void testShouldGetNumericAttribute() {
     driver.get(pages.formPage);
     WebElement element = driver.findElement(By.id("withText"));
     assertThat(element.getDomAttribute("rows")).isEqualTo("5");

File: java/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -765,7 +765,7 @@ public void testShouldNotBeAbleToFindAnElementOnABlankPage() {
   public void testShouldNotBeAbleToLocateASingleElementOnABlankPage() {
     // Note we're on the default start page for the browser at this point.
     assertThatExceptionOfType(NoSuchElementException.class)
-        .isThrownBy(() -> driver.findElement(By.id("nonExistantButton")));
+        .isThrownBy(() -> driver.findElement(By.id("nonExistentButton")));
   }
 
   @SwitchToTopAfterTest

File: java/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -433,7 +433,7 @@ public void testShouldBeAbleToSwitchToTheTopIfTheFrameIsDeletedFromUnderUsWithFr
 
   @Test
   @Ignore(SAFARI)
-  public void testShouldBeAbleToSwitchToTheTopIfTheFrameIsDeletedFromUnderUsWithWebelement() {
+  public void testShouldBeAbleToSwitchToTheTopIfTheFrameIsDeletedFromUnderUsWithWebElement() {
     driver.get(appServer.whereIs("frame_switching_tests/deletingFrame.html"));
     WebElement iframe = driver.findElement(By.id("iframe1"));
     wait.until(frameToBeAvailableAndSwitchToIt(iframe));

File: java/test/org/openqa/selenium/ProxyTest.java
Patch:
@@ -397,7 +397,7 @@ public void constructingWithNullKeysWorksAsExpected() {
 
   @Test
   @Ignore
-  public void serialiazesAndDeserializesWithoutError() {
+  public void serializesAndDeserializesWithoutError() {
     Proxy proxy = new Proxy();
     proxy.setProxyAutoconfigUrl("http://www.example.com/config.pac");
 

File: java/test/org/openqa/selenium/devtools/NetworkInterceptorTest.java
Patch:
@@ -120,7 +120,7 @@ public void shouldAllowTheInterceptorToChangeTheResponse() {
   }
 
   @Test
-  public void shouldBeAbleToReturnAMagicResponseThatCausesTheOriginalRequestToProceeed() {
+  public void shouldBeAbleToReturnAMagicResponseThatCausesTheOriginalRequestToProceed() {
     AtomicBoolean seen = new AtomicBoolean(false);
 
     interceptor = new NetworkInterceptor(

File: java/test/org/openqa/selenium/edge/EdgeDriverFunctionalTest.java
Patch:
@@ -62,7 +62,7 @@ public void canSetPermissionHeadless() {
     EdgeOptions options = new EdgeOptions();
     options.setHeadless(true);
 
-    //TestEdgeDrivere is not honoring headless request; using EdgeDriver instead
+    //TestEdgeDriver is not honoring headless request; using EdgeDriver instead
     WebDriver driver = new WebDriverBuilder().get(options);
     try {
       HasPermissions permissions = (HasPermissions) driver;

File: java/test/org/openqa/selenium/firefox/PreferencesTest.java
Patch:
@@ -107,7 +107,7 @@ public void parsePreferences_multiline() {
   }
 
   @Test
-  public void cannotOverrideAFozenPrefence() {
+  public void cannotOverrideAFrozenPreference() {
     StringReader reader = new StringReader("{\"frozen\": {\"frozen.pref\": true }, \"mutable\": {}}");
     Preferences preferences = new Preferences(reader);
     preferences.setPreference("frozen.pref", false);

File: java/test/org/openqa/selenium/grid/config/ConcatenatingConfigTest.java
Patch:
@@ -23,7 +23,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-public class ConcatentatingConfigTest {
+public class ConcatenatingConfigTest {
 
   @Test
   public void shouldReturnSectionNames() {

File: java/test/org/openqa/selenium/interactions/ActionsTest.java
Patch:
@@ -86,7 +86,7 @@ public void throwsIllegalArgumentExceptionIfKeysNull() {
   }
 
   @Test
-  public void throwsIllegalArgumentExceptionOverridenIfKeysNull() {
+  public void throwsIllegalArgumentExceptionOverriddenIfKeysNull() {
     assertThatExceptionOfType(IllegalArgumentException.class)
         .isThrownBy(() -> new Actions(driver).sendKeys(dummyLocatableElement).perform());
   }
@@ -221,10 +221,10 @@ public void testCtrlClick() {
   }
 
 
-  private WebElement mockLocatableElementWithCoordinates(Coordinates coord) {
+  private WebElement mockLocatableElementWithCoordinates(Coordinates coordinates) {
     WebElement element = mock(WebElement.class,
                               withSettings().extraInterfaces(Locatable.class));
-    when(((Locatable) element).getCoordinates()).thenReturn(coord);
+    when(((Locatable) element).getCoordinates()).thenReturn(coordinates);
     return element;
   }
 }

File: java/test/org/openqa/selenium/interactions/BasicMouseInterfaceTest.java
Patch:
@@ -471,8 +471,8 @@ public void testCanMoveOverAndOutOfAnElement() {
     wait.until(attributeToBe(redbox, "background-color", Colors.GREEN.getColorValue().asRgba()));
   }
 
-  private boolean fuzzyPositionMatching(int expectedX, int expectedY, String locationTouple) {
-    String[] splitString = locationTouple.split(",");
+  private boolean fuzzyPositionMatching(int expectedX, int expectedY, String locationTuple) {
+    String[] splitString = locationTuple.split(",");
     int gotX = Integer.parseInt(splitString[0].trim());
     int gotY = Integer.parseInt(splitString[1].trim());
 

File: java/test/org/openqa/selenium/remote/NewSessionPayloadTest.java
Patch:
@@ -206,7 +206,7 @@ public void shouldValidateW3cCapabilitiesByComplainingAboutDuplicateFirstAndAlwa
   }
 
   @Test
-  public void convertEverythingToFirstMatchOnlyifPayloadContainsAlwaysMatchSectionAndOssCapabilities() {
+  public void convertEverythingToFirstMatchOnlyIfPayloadContainsAlwaysMatchSectionAndOssCapabilities() {
     List<Capabilities> capabilities = create(ImmutableMap.of(
         "desiredCapabilities", ImmutableMap.of(
             "browserName", "firefox",

File: java/test/org/openqa/selenium/remote/RemoteWebDriverUnitTest.java
Patch:
@@ -799,7 +799,7 @@ public void canHandleResponseWithErrorCodeButNoExceptionReturnedByCommandExecuto
   }
 
   @Test
-  public void noArgConstuctorEmptyCapabilitiesTest() {
+  public void noArgConstructorEmptyCapabilitiesTest() {
     RemoteWebDriver driver = new RemoteWebDriver() {}; // anonymous subclass
     assertThat(driver.getCapabilities()).isEqualTo(new ImmutableCapabilities());
   }

File: java/test/org/openqa/selenium/remote/http/FilterTest.java
Patch:
@@ -74,7 +74,7 @@ public void shouldBePossibleToChainFiltersOneAfterAnother() {
   }
 
   @Test
-  public void eachFilterShouldOnlybeCalledOnce() {
+  public void eachFilterShouldOnlyBeCalledOnce() {
     AtomicInteger rootCalls = new AtomicInteger(0);
 
     HttpHandler root = req -> {

File: java/test/org/openqa/selenium/remote/http/PrefixedRouteTest.java
Patch:
@@ -47,7 +47,7 @@ public void pathWithPrefixIsMatched() {
   }
 
   @Test
-  public void pathWhichCoincidentallyStartsWithThePrefixIsNotMacthed() {
+  public void pathWhichCoincidentallyStartsWithThePrefixIsNotMatched() {
     Route route = Route.prefix("/cheese").to(Route.matching(req -> true).to(() -> req -> new HttpResponse()));
 
     assertThat(route.matches(new HttpRequest(GET, "/cheeseandpeas"))).isFalse();

File: java/test/org/openqa/selenium/remote/tracing/opentelemetry/TracerTest.java
Patch:
@@ -532,7 +532,7 @@ public void currentSpanIsKeptOnTracerCorrectlyBetweenThreads() throws ExecutionE
           child.close();
         }
 
-        // At this point, the parent span is undefind, but shouldn't be null
+        // At this point, the parent span is undefined, but shouldn't be null
 
         assertThat(parent.getId()).isNotEqualTo(tracer.getCurrentContext().getId());
         assertThat(child.getId()).isNotEqualTo(tracer.getCurrentContext().getId());

File: java/test/org/openqa/selenium/server/htmlrunner/CoreSelfTest.java
Patch:
@@ -84,7 +84,6 @@ public void executeTests() throws IOException {
       .runHTMLSuite(
         browser,
         // We need to do this because the path relativizing code in java.net.URL is
-        // We need to do this because the path relativizing code in java.net.URL is
         // clearly having a bad day. "/selenium-server/tests" appended to "../tests/"
         // ends up as "/tests" rather than "/selenium-server/tests" as you'd expect.
         testBase + "/TestSuite.html",

File: java/test/org/openqa/selenium/support/events/EventFiringWebDriverTest.java
Patch:
@@ -486,7 +486,7 @@ public void shouldFireEventsAroundGetText() {
   }
 
   @Test
-  public void shouldReturnCapabilitiesWhenUnderlyingDriverImplementsInterfac() {
+  public void shouldReturnCapabilitiesWhenUnderlyingDriverImplementsInterface() {
     WebDriver mockedDriver = mock(WebDriver.class, withSettings().extraInterfaces(HasCapabilities.class));
     EventFiringWebDriver testedDriver = new EventFiringWebDriver(mockedDriver);
 
@@ -497,7 +497,7 @@ public void shouldReturnCapabilitiesWhenUnderlyingDriverImplementsInterfac() {
   }
 
   @Test
-  public void shouldThrowExceptionWhenUnderlyingDriverDoesNotImplementInterfac() {
+  public void shouldThrowExceptionWhenUnderlyingDriverDoesNotImplementInterface() {
     WebDriver mockedDriver = mock(WebDriver.class);
     EventFiringWebDriver testedDriver = new EventFiringWebDriver(mockedDriver);
 

File: java/test/org/openqa/selenium/support/pagefactory/AnnotationsTest.java
Patch:
@@ -232,7 +232,7 @@ public void findByUnsetHowIsEquivalentToFindById() throws Exception {
   }
 
   /*
-   * Example of how teams making their own @FinyBy alikes would experience a general purpose
+   * Example of how teams making their own @FindBy alike would experience a general purpose
    * capability.
    *
    * @See @FindByXXXX (above)

File: java/test/org/openqa/selenium/support/pagefactory/DefaultFieldDecoratorTest.java
Patch:
@@ -43,7 +43,7 @@
 @Category(UnitTests.class)
 public class DefaultFieldDecoratorTest {
 
-  // Unusued fields are used by tests. Do not remove!
+  // Unused fields are used by tests. Do not remove!
   @SuppressWarnings("unused") private WebElement element1;
   @SuppressWarnings("unused") private WebElement element2;
   @SuppressWarnings("unused") private List<WebElement> list1;

File: java/test/org/openqa/selenium/support/ui/SelectElementTest.java
Patch:
@@ -65,7 +65,7 @@ public void shouldIndicateThatASelectCanSupportMultipleOptionsWithTrueMultipleAt
   }
 
   @Test
-  public void shouldNotIndicateThatANormalSelectSupportsMulitpleOptions() {
+  public void shouldNotIndicateThatANormalSelectSupportsMultipleOptions() {
     WebElement selectElement = driver.findElement(By.name("selectomatic"));
     Select select = new Select(selectElement);
     assertThat(select.isMultiple()).isFalse();

File: java/test/org/openqa/selenium/support/ui/SelectLargeTest.java
Patch:
@@ -32,7 +32,7 @@
  */
 public class SelectLargeTest extends JUnit4TestBase {
   @Test
-  public void multipleSelectShouldBePossibleIfMulitpleAttributeEmpty() {
+  public void multipleSelectShouldBePossibleIfMultipleAttributeEmpty() {
     driver.get(pages.formPage);
 
     WebElement selectElement = driver.findElement(By.name("select_empty_multiple"));

File: java/src/org/openqa/selenium/grid/commands/InfoCommand.java
Patch:
@@ -50,7 +50,7 @@ public String getDescription() {
 
   @Override
   public Set<Role> getConfigurableRoles() {
-    return Collections.emptySet();
+    return Collections.singleton(Role.of("info"));
   }
 
   @Override

File: java/src/org/openqa/selenium/grid/node/docker/DockerFlags.java
Patch:
@@ -60,7 +60,7 @@ public class DockerFlags implements HasRoles {
   @Parameter(
     names = {"--docker", "-D"},
     description = "Docker configs which map image name to stereotype capabilities (example " +
-                  "`-D selenium/standalone-firefox:latest '{\"browserName\": \"firefox\"}')",
+                  "`-D selenium/standalone-firefox:latest '{\"browserName\": \"firefox\"}'`)",
     arity = 2,
     variableArity = true,
     splitter = NonSplittingSplitter.class)

File: java/src/org/openqa/selenium/support/locators/RelativeLocator.java
Patch:
@@ -38,7 +38,7 @@
  * position on the DOM. Elements are returned ordered by their proximity to
  * the last anchor element used for finding them. As an example:
  * <pre>
- *   List<WebElement> elements = driver.findElements(withTagName("p").above(lowest));
+ *   List<WebElement> elements = driver.findElements(with(tagName("p")).above(lowest));
  * </pre>
  * Would return all {@code p} elements above the {@link WebElement}
  * {@code lowest} sorted by the proximity to {@code lowest}.

File: java/src/org/openqa/selenium/events/zeromq/ZeroMqEventBus.java
Patch:
@@ -63,7 +63,7 @@ public static EventBus create(Config config) {
         return mungeUri(uri, "tcp", 4442);
       });
 
-    String subscribe = config.get(EVENTS_SECTION, "publish")
+    String subscribe = config.get(EVENTS_SECTION, "subscribe")
       .orElseGet(() -> {
         URI uri = config.get("node", "hub-address")
           .map(Urls::from)

File: java/test/org/openqa/selenium/edge/EdgeDriverFunctionalTest.java
Patch:
@@ -35,6 +35,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
+import static org.assertj.core.api.Assumptions.assumeThat;
 
 public class EdgeDriverFunctionalTest extends JUnit4TestBase {
 
@@ -46,8 +47,8 @@ public void canSetPermission() {
     HasPermissions permissions = (HasPermissions) driver;
 
     driver.get(pages.clicksPage);
-    assertThat(checkPermission(driver, CLIPBOARD_READ)).isEqualTo("prompt");
-    assertThat(checkPermission(driver, CLIPBOARD_WRITE)).isEqualTo("granted");
+    assumeThat(checkPermission(driver, CLIPBOARD_READ)).isEqualTo("prompt");
+    assumeThat(checkPermission(driver, CLIPBOARD_WRITE)).isEqualTo("granted");
 
     permissions.setPermission(CLIPBOARD_READ, "denied");
     permissions.setPermission(CLIPBOARD_WRITE, "prompt");

File: java/test/org/openqa/selenium/chrome/ChromeDriverFunctionalTest.java
Patch:
@@ -35,6 +35,7 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.fail;
+import static org.assertj.core.api.Assumptions.assumeThat;
 
 public class ChromeDriverFunctionalTest extends JUnit4TestBase {
 
@@ -46,8 +47,8 @@ public void canSetPermission() {
     HasPermissions permissions = (HasPermissions) driver;
 
     driver.get(pages.clicksPage);
-    assertThat(checkPermission(driver, CLIPBOARD_READ)).isEqualTo("prompt");
-    assertThat(checkPermission(driver, CLIPBOARD_WRITE)).isEqualTo("granted");
+    assumeThat(checkPermission(driver, CLIPBOARD_READ)).isEqualTo("prompt");
+    assumeThat(checkPermission(driver, CLIPBOARD_WRITE)).isEqualTo("granted");
 
     permissions.setPermission(CLIPBOARD_READ, "denied");
     permissions.setPermission(CLIPBOARD_WRITE, "prompt");

File: java/src/org/openqa/selenium/chrome/AddHasCasting.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
-import static org.openqa.selenium.remote.BrowserType.CHROME;
+import static org.openqa.selenium.remote.Browser.CHROME;
 
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasCasting extends org.openqa.selenium.chromium.AddHasCasting {
@@ -45,6 +45,6 @@ GET_CAST_ISSUE_MESSAGE, new CommandInfo("session/:sessionId/goog/cast/get_issue_
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> CHROME.equals(caps.getBrowserName());
+    return CHROME::is;
   }
 }

File: java/src/org/openqa/selenium/chrome/AddHasCdp.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
-import static org.openqa.selenium.remote.BrowserType.CHROME;
+import static org.openqa.selenium.remote.Browser.CHROME;
 
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasCdp extends org.openqa.selenium.chromium.AddHasCdp {
@@ -41,6 +41,6 @@ public Map<String, CommandInfo> getAdditionalCommands() {
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> CHROME.equals(caps.getBrowserName());
+    return CHROME::is;
   }
 }

File: java/src/org/openqa/selenium/chrome/ChromeOptions.java
Patch:
@@ -20,9 +20,10 @@
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.chromium.ChromiumOptions;
 import org.openqa.selenium.internal.Require;
-import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 
+import static org.openqa.selenium.remote.Browser.CHROME;
+
 /**
  * Class to manage options specific to {@link ChromeDriver}.
  *
@@ -53,8 +54,7 @@ public class ChromeOptions extends ChromiumOptions<ChromeOptions> {
   private ChromeDriverLogLevel logLevel;
 
   public ChromeOptions() {
-
-    super(CapabilityType.BROWSER_NAME, BrowserType.CHROME, CAPABILITY);
+    super(CapabilityType.BROWSER_NAME, CHROME.browserName(), CAPABILITY);
   }
 
   public ChromeOptions setLogLevel(ChromeDriverLogLevel logLevel){

File: java/src/org/openqa/selenium/chromium/AddHasCdp.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
-import static org.openqa.selenium.chromium.ChromiumDriver.KNOWN_CHROMIUM_BROWSERS;
+import static org.openqa.selenium.chromium.ChromiumDriver.IS_CHROMIUM_BROWSER;
 
 public abstract class AddHasCdp implements AugmenterProvider<HasCdp>, AdditionalHttpCommands {
 
@@ -39,7 +39,7 @@ public abstract class AddHasCdp implements AugmenterProvider<HasCdp>, Additional
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> KNOWN_CHROMIUM_BROWSERS.contains(caps.getBrowserName());
+    return caps -> IS_CHROMIUM_BROWSER.test(caps.getBrowserName());
   }
 
   @Override

File: java/src/org/openqa/selenium/chromium/AddHasLaunchApp.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
-import static org.openqa.selenium.chromium.ChromiumDriver.KNOWN_CHROMIUM_BROWSERS;
+import static org.openqa.selenium.chromium.ChromiumDriver.IS_CHROMIUM_BROWSER;
 
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasLaunchApp implements AugmenterProvider<HasLaunchApp>, AdditionalHttpCommands {
@@ -47,7 +47,7 @@ public Map<String, CommandInfo> getAdditionalCommands() {
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> KNOWN_CHROMIUM_BROWSERS.contains(caps.getBrowserName());
+    return caps -> IS_CHROMIUM_BROWSER.test(caps.getBrowserName());
   }
 
   @Override

File: java/src/org/openqa/selenium/chromium/AddHasNetworkConditions.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
-import static org.openqa.selenium.chromium.ChromiumDriver.KNOWN_CHROMIUM_BROWSERS;
+import static org.openqa.selenium.chromium.ChromiumDriver.IS_CHROMIUM_BROWSER;
 
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasNetworkConditions implements AugmenterProvider<HasNetworkConditions>, AdditionalHttpCommands {
@@ -53,7 +53,7 @@ public Map<String, CommandInfo> getAdditionalCommands() {
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> KNOWN_CHROMIUM_BROWSERS.contains(caps.getBrowserName());
+    return caps -> IS_CHROMIUM_BROWSER.test(caps.getBrowserName());
   }
 
   @Override

File: java/src/org/openqa/selenium/chromium/AddHasPermissions.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
-import static org.openqa.selenium.chromium.ChromiumDriver.KNOWN_CHROMIUM_BROWSERS;
+import static org.openqa.selenium.chromium.ChromiumDriver.IS_CHROMIUM_BROWSER;
 
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasPermissions implements AugmenterProvider<HasPermissions>, AdditionalHttpCommands {
@@ -47,7 +47,7 @@ public Map<String, CommandInfo> getAdditionalCommands() {
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> KNOWN_CHROMIUM_BROWSERS.contains(caps.getBrowserName());
+    return caps -> IS_CHROMIUM_BROWSER.test(caps.getBrowserName());
   }
 
   @Override

File: java/src/org/openqa/selenium/edge/AddHasCasting.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
+import static org.openqa.selenium.remote.Browser.EDGE;
+
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasCasting extends org.openqa.selenium.chromium.AddHasCasting {
 
@@ -45,6 +47,6 @@ public Map<String, CommandInfo> getAdditionalCommands() {
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> "msedge".equals(caps.getBrowserName());
+    return EDGE::is;
   }
 }

File: java/src/org/openqa/selenium/edge/AddHasCdp.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
+import static org.openqa.selenium.remote.Browser.EDGE;
+
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasCdp extends org.openqa.selenium.chromium.AddHasCdp {
 
@@ -41,6 +43,6 @@ public Map<String, CommandInfo> getAdditionalCommands() {
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> "msedge".equals(caps.getBrowserName());
+    return EDGE::is;
   }
 }

File: java/src/org/openqa/selenium/edge/EdgeOptions.java
Patch:
@@ -18,9 +18,10 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.chromium.ChromiumOptions;
-import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 
+import static org.openqa.selenium.remote.Browser.EDGE;
+
 /**
  * Class to manage options specific to {@link EdgeDriver}.
  *
@@ -54,7 +55,7 @@ public class EdgeOptions extends ChromiumOptions<EdgeOptions> {
   public static final String CAPABILITY = "ms:edgeOptions";
 
   public EdgeOptions() {
-    super(CapabilityType.BROWSER_NAME, BrowserType.EDGE, CAPABILITY);
+    super(CapabilityType.BROWSER_NAME, EDGE.browserName(), CAPABILITY);
   }
 
   @Override

File: java/src/org/openqa/selenium/firefox/AddHasContext.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
-import static org.openqa.selenium.remote.BrowserType.FIREFOX;
+import static org.openqa.selenium.remote.Browser.FIREFOX;
 
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasContext implements AugmenterProvider<HasContext>, AdditionalHttpCommands {
@@ -47,7 +47,7 @@ public Map<String, CommandInfo> getAdditionalCommands() {
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> FIREFOX.equals(caps.getBrowserName());
+    return FIREFOX::is;
   }
 
   @Override

File: java/src/org/openqa/selenium/firefox/AddHasExtensions.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
-import static org.openqa.selenium.remote.BrowserType.FIREFOX;
+import static org.openqa.selenium.remote.Browser.FIREFOX;
 
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasExtensions implements AugmenterProvider<HasExtensions>, AdditionalHttpCommands {
@@ -50,7 +50,7 @@ public Map<String, CommandInfo> getAdditionalCommands() {
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> FIREFOX.equals(caps.getBrowserName());
+    return FIREFOX::is;
   }
 
   @Override

File: java/src/org/openqa/selenium/firefox/AddHasFullPageScreenshot.java
Patch:
@@ -31,7 +31,7 @@
 import java.util.Map;
 import java.util.function.Predicate;
 
-import static org.openqa.selenium.remote.BrowserType.FIREFOX;
+import static org.openqa.selenium.remote.Browser.FIREFOX;
 
 @AutoService({AdditionalHttpCommands.class, AugmenterProvider.class})
 public class AddHasFullPageScreenshot<X> implements AugmenterProvider<HasFullPageScreenshot>, AdditionalHttpCommands {
@@ -48,7 +48,7 @@ public Map<String, CommandInfo> getAdditionalCommands() {
 
   @Override
   public Predicate<Capabilities> isApplicable() {
-    return caps -> FIREFOX.equals(caps.getBrowserName());
+    return FIREFOX::is;
   }
 
   @Override

File: java/src/org/openqa/selenium/firefox/xpi/XpiDriverInfo.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.firefox.xpi;
 
 import com.google.auto.service.AutoService;
-
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
@@ -27,11 +26,11 @@
 import org.openqa.selenium.WebDriverInfo;
 import org.openqa.selenium.firefox.FirefoxBinary;
 import org.openqa.selenium.firefox.FirefoxDriver;
-import org.openqa.selenium.remote.BrowserType;
 
 import java.util.Optional;
 
 import static org.openqa.selenium.firefox.FirefoxDriver.Capability.MARIONETTE;
+import static org.openqa.selenium.remote.Browser.FIREFOX;
 import static org.openqa.selenium.remote.CapabilityType.BROWSER_NAME;
 
 @Deprecated
@@ -45,7 +44,7 @@ public String getDisplayName() {
 
   @Override
   public Capabilities getCanonicalCapabilities() {
-    return new ImmutableCapabilities(BROWSER_NAME, BrowserType.FIREFOX, MARIONETTE, true);
+    return new ImmutableCapabilities(BROWSER_NAME, FIREFOX.browserName(), MARIONETTE, true);
   }
 
   @Override

File: java/src/org/openqa/selenium/remote/BrowserType.java
Patch:
@@ -19,7 +19,10 @@
 
 /**
  * All the browsers supported by selenium
+ *
+ * @deprecated Prefer to use {@link Browser}
  */
+@Deprecated
 public interface BrowserType {
   String FIREFOX = "firefox";
   String SAFARI = "safari";

File: java/src/org/openqa/selenium/remote/DesiredCapabilities.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.remote;
 
+import static org.openqa.selenium.remote.Browser.HTMLUNIT;
 import static org.openqa.selenium.remote.CapabilityType.ACCEPT_INSECURE_CERTS;
 import static org.openqa.selenium.remote.CapabilityType.BROWSER_NAME;
 import static org.openqa.selenium.remote.CapabilityType.PLATFORM;
@@ -112,6 +113,6 @@ public DesiredCapabilities merge(Capabilities extraCapabilities) {
 
   @Deprecated
   public static DesiredCapabilities htmlUnit() {
-    return new DesiredCapabilities(BrowserType.HTMLUNIT, "", Platform.ANY);
+    return new DesiredCapabilities(HTMLUNIT.browserName(), "", Platform.ANY);
   }
 }

File: java/src/org/openqa/selenium/remote/session/ChromeFilter.java
Patch:
@@ -17,21 +17,22 @@
 
 package org.openqa.selenium.remote.session;
 
-import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.Map;
 import java.util.Objects;
 import java.util.TreeMap;
 import java.util.stream.Collectors;
 
+import static org.openqa.selenium.remote.Browser.CHROME;
+
 public class ChromeFilter implements CapabilitiesFilter {
   @Override
   public Map<String, Object> apply(Map<String, Object> unmodifiedCaps) {
     Map<String, Object> caps = unmodifiedCaps.entrySet().parallelStream()
       .filter(
         entry ->
-          (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && BrowserType.CHROME.equals(entry.getValue())) ||
+          (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && CHROME.is(String.valueOf(entry.getValue()))) ||
           entry.getKey().startsWith("goog:") ||
           "chromeOptions".equals(entry.getKey()) ||
           "loggingPrefs".equals(entry.getKey()))

File: java/src/org/openqa/selenium/remote/session/EdgeFilter.java
Patch:
@@ -18,20 +18,20 @@
 package org.openqa.selenium.remote.session;
 
 import com.google.common.collect.ImmutableMap;
-
-import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.Map;
 import java.util.Objects;
 
+import static org.openqa.selenium.remote.Browser.EDGE;
+
 public class EdgeFilter implements CapabilitiesFilter {
 
   @Override
   public Map<String, Object> apply(Map<String, Object> unmodifiedCaps) {
     ImmutableMap<String, Object> caps = unmodifiedCaps.entrySet().parallelStream()
       .filter(
-        entry -> (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && BrowserType.EDGE.equals(entry.getValue())) ||
+        entry -> (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && EDGE.is(String.valueOf(entry.getValue()))) ||
                  entry.getKey().startsWith("ms:"))
       .distinct()
       .filter(entry -> Objects.nonNull(entry.getValue()))

File: java/src/org/openqa/selenium/remote/session/FirefoxFilter.java
Patch:
@@ -17,22 +17,23 @@
 
 package org.openqa.selenium.remote.session;
 
-import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.Map;
 import java.util.Objects;
 import java.util.TreeMap;
 import java.util.stream.Collectors;
 
+import static org.openqa.selenium.remote.Browser.FIREFOX;
+
 public class FirefoxFilter implements CapabilitiesFilter {
   // Note: we don't take a dependency on the FirefoxDriver jar as it might not be on the classpath
 
   @Override
   public Map<String, Object> apply(Map<String, Object> unmodifiedCaps) {
     Map<String, Object> caps = unmodifiedCaps.entrySet().parallelStream()
       .filter(entry ->
-                (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && BrowserType.FIREFOX.equals(entry.getValue())) ||
+                (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && FIREFOX.is(String.valueOf(entry.getValue()))) ||
                 entry.getKey().startsWith("firefox_") ||
                 entry.getKey().startsWith("moz:"))
       .filter(entry -> Objects.nonNull(entry.getValue()))

File: java/src/org/openqa/selenium/remote/session/InternetExplorerFilter.java
Patch:
@@ -18,19 +18,19 @@
 package org.openqa.selenium.remote.session;
 
 import com.google.common.collect.ImmutableMap;
-
-import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.Map;
 import java.util.Objects;
 
+import static org.openqa.selenium.remote.Browser.IE;
+
 public class InternetExplorerFilter implements CapabilitiesFilter {
   @Override
   public Map<String, Object> apply(Map<String, Object> unmodifiedCaps) {
     ImmutableMap<String, Object> caps = unmodifiedCaps.entrySet().parallelStream()
       .filter(entry ->
-                (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && BrowserType.IE.equals(entry.getValue())) ||
+                (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && IE.is(String.valueOf(entry.getValue()))) ||
                 "browserAttachTimeout".equals(entry.getKey()) ||
                 "enableElementCacheCleanup".equals(entry.getKey()) ||
                 "enablePersistentHover".equals(entry.getKey()) ||

File: java/src/org/openqa/selenium/remote/session/SafariFilter.java
Patch:
@@ -18,19 +18,19 @@
 package org.openqa.selenium.remote.session;
 
 import com.google.common.collect.ImmutableMap;
-
-import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.Map;
 import java.util.Objects;
 
+import static org.openqa.selenium.remote.Browser.SAFARI;
+
 public class SafariFilter implements CapabilitiesFilter {
   @Override
   public Map<String, Object> apply(Map<String, Object> unmodifiedCaps) {
     ImmutableMap<String, Object> caps = unmodifiedCaps.entrySet().parallelStream()
       .filter(entry ->
-                (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && BrowserType.SAFARI.equals(entry.getValue())) ||
+                (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && SAFARI.is(String.valueOf(entry.getValue()))) ||
                 "safari.options".equals(entry.getKey()))
       .distinct()
       .filter(entry -> Objects.nonNull(entry.getValue()))

File: java/src/org/openqa/selenium/safari/SafariOptions.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.openqa.selenium.safari;
 
+import static org.openqa.selenium.remote.Browser.SAFARI;
 import static org.openqa.selenium.remote.CapabilityType.BROWSER_NAME;
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.remote.AbstractDriverOptions;
-import org.openqa.selenium.remote.BrowserType;
 
 import java.util.Collections;
 import java.util.Set;
@@ -51,7 +51,7 @@ public class SafariOptions extends AbstractDriverOptions<SafariOptions> {
 
   public SafariOptions() {
     setUseTechnologyPreview(false);
-    setCapability(BROWSER_NAME, BrowserType.SAFARI);
+    setCapability(BROWSER_NAME, SAFARI.browserName());
   }
 
   public SafariOptions(Capabilities source) {

File: java/test/org/openqa/selenium/testing/drivers/Browser.java
Patch:
@@ -30,7 +30,6 @@
 import org.openqa.selenium.ie.InternetExplorerOptions;
 import org.openqa.selenium.opera.OperaDriverInfo;
 import org.openqa.selenium.opera.OperaOptions;
-import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.safari.SafariDriverInfo;
 import org.openqa.selenium.safari.SafariOptions;
 
@@ -96,7 +95,8 @@ public Capabilities getCapabilities() {
       return options;
     }
   },
-  HTMLUNIT(new ImmutableCapabilities(BROWSER_NAME, BrowserType.HTMLUNIT), "HtmlUnit", false),
+  HTMLUNIT(
+    new ImmutableCapabilities(BROWSER_NAME, org.openqa.selenium.remote.Browser.HTMLUNIT.browserName()), "HtmlUnit", false),
   LEGACY_FIREFOX_XPI(new FirefoxOptions().setLegacy(true), new XpiDriverInfo().getDisplayName(), false),
   IE(new InternetExplorerOptions(), new InternetExplorerDriverInfo().getDisplayName(), false) {
     @Override

File: java/test/org/openqa/selenium/testing/drivers/DefaultDriverSupplier.java
Patch:
@@ -21,7 +21,6 @@
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebDriverInfo;
 import org.openqa.selenium.htmlunit.HtmlUnitDriver;
-import org.openqa.selenium.remote.BrowserType;
 
 import java.lang.reflect.Constructor;
 import java.lang.reflect.InvocationTargetException;
@@ -42,7 +41,7 @@ public WebDriver get() {
     Function<Capabilities, WebDriver> driverConstructor;
 
     if (capabilities != null) {
-      if (capabilities.getBrowserName().equals(BrowserType.HTMLUNIT)) {
+      if (org.openqa.selenium.remote.Browser.HTMLUNIT.is(capabilities)) {
         return new HtmlUnitDriver();
       }
 

File: java/test/org/openqa/selenium/testing/drivers/TestInternetExplorerSupplier.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.remote.BrowserType;
 
 import java.util.function.Supplier;
 
@@ -36,7 +35,7 @@ public WebDriver get() {
       return null;
     }
 
-    if (!BrowserType.IE.equals(caps.getBrowserName())) {
+    if (!org.openqa.selenium.remote.Browser.IE.is(caps)) {
       return null;
     }
 

File: java/src/org/openqa/selenium/firefox/HasContext.java
Patch:
@@ -20,7 +20,7 @@
 import org.openqa.selenium.Beta;
 
 /**
- * Used by classes to indicate that they can install and uninstall browser extensions on the fly.
+ * Used by classes to indicate that they can change the context commands operate in.
  */
 @Beta
 public interface HasContext {

File: java/src/org/openqa/selenium/firefox/HasExtensions.java
Patch:
@@ -37,6 +37,7 @@ public interface HasExtensions {
 
   /**
    * Uninstall the extension by the given identifier.
+   * This value can be found in the extension's manifest, and typically ends with "@mozilla.org".
    *
    * @param extensionId The unique extension identifier returned by {{@link #installExtension(Path)}}
    */

File: java/test/org/openqa/selenium/edge/EdgeOptionsTest.java
Patch:
@@ -65,9 +65,9 @@ public void canAddArguments() {
   }
 
   @Test
-  public void canAddExtensions() {
+  public void canAddExtensions() throws IOException {
     EdgeOptions options = new EdgeOptions();
-    File tmpDir = Files.createTempDir();
+    File tmpDir = File.createTempFile("webdriver", "tmp");
     tmpDir.deleteOnExit();
     File ext1 = createTempFile(tmpDir, "ext1 content");
     File ext2 = createTempFile(tmpDir, "ext2 content");
@@ -118,4 +118,4 @@ public void mergingOptionsMergesArguments() {
       .extractingByKey("args").asInstanceOf(LIST)
       .containsExactly("verbose", "silent");
   }
-}
\ No newline at end of file
+}

File: java/src/org/openqa/selenium/grid/node/local/LocalNodeFactory.java
Patch:
@@ -41,6 +41,7 @@
 import java.io.File;
 import java.util.ArrayList;
 import java.util.Collection;
+import java.util.Comparator;
 import java.util.List;
 import java.util.ServiceLoader;
 
@@ -100,7 +101,8 @@ private static Collection<SessionFactory> createSessionFactory(
 
     builders.stream()
       .filter(builder -> builder.score(stereotype) > 0)
-      .forEach(builder -> {
+      .max(Comparator.comparingInt(builder -> builder.score(stereotype)))
+      .ifPresent(builder -> {
         DriverService.Builder<?, ?> driverServiceBuilder;
         Class<?> clazz = builder.getClass();
         try {

File: java/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -163,7 +163,8 @@ protected Handlers createHandlers(Config config) {
       distributorOptions.getSlotSelector(),
       secret,
       distributorOptions.getHealthCheckInterval(),
-      distributorOptions.shouldRejectUnsupportedCaps());
+      distributorOptions.shouldRejectUnsupportedCaps(),
+      newSessionRequestOptions.getSessionRequestRetryInterval());
     handler.addHandler(distributor);
 
     Router router = new Router(tracer, clientFactory, sessions, queue, distributor);

File: java/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -161,7 +161,8 @@ protected Handlers createHandlers(Config config) {
       distributorOptions.getSlotSelector(),
       registrationSecret,
       distributorOptions.getHealthCheckInterval(),
-      distributorOptions.shouldRejectUnsupportedCaps());
+      distributorOptions.shouldRejectUnsupportedCaps(),
+      newSessionRequestOptions.getSessionRequestRetryInterval());
     combinedHandler.addHandler(distributor);
 
     Routable router = new Router(tracer, clientFactory, sessions, queue, distributor)

File: java/src/org/openqa/selenium/grid/sessionqueue/config/NewSessionQueueOptions.java
Patch:
@@ -100,7 +100,7 @@ public Duration getSessionRequestRetryInterval() {
     // If the user sets 0 or less, we default to 1s.
     int interval = Math.max(
       config.getInt(SESSION_QUEUE_SECTION, "session-retry-interval")
-        .orElse(DEFAULT_REQUEST_TIMEOUT),
+        .orElse(DEFAULT_RETRY_INTERVAL),
       1);
     return Duration.ofSeconds(interval);
   }

File: java/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -152,7 +152,7 @@ private LocalNode(
       .ticker(ticker)
       .removalListener((RemovalListener<SessionId, SessionSlot>) notification -> {
         // Attempt to stop the session
-        LOG.log(Debug.getDebugLogLevel(), "Stopping session %s", notification.getKey().toString());
+        LOG.log(Debug.getDebugLogLevel(), "Stopping session {0}", notification.getKey().toString());
         SessionSlot slot = notification.getValue();
         if (!slot.isAvailable()) {
           slot.stop();

File: java/test/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumLargeTest.java
Patch:
@@ -70,12 +70,13 @@ public void testCallingStopThenSleepDoesNotCauseAnExceptionToBeThrown() {
     selenium.stop();
 
     try {
-      // Now schedule a command that caues "interrupt" to be thrown internally.
+      // Now schedule a command that causes "interrupt" to be thrown internally.
       selenium.isElementPresent("name=q");
       fail("This test should have failed");
-    } catch (NullPointerException expected) {
+    } catch (NullPointerException | IllegalStateException expected) {
       // This is the exception thrown by selenium 1. We should throw the same
       // one
+      // IllegalStateException is what the timer throws when it has been stopped
     }
 
     try {

File: java/test/org/openqa/selenium/json/JsonTest.java
Patch:
@@ -209,6 +209,9 @@ public void canNotPopulateAnObjectOfAClassWithNoDefaultConstructor() {
 
     assertThatExceptionOfType(JsonException.class)
       .isThrownBy(() -> new Json().toType(raw, NoDefaultConstructor.class))
+      .withMessage("Unable to parse: {\"value\": \"time\"}")
+      .havingCause()
+      .isInstanceOf(JsonException.class)
       .withMessageStartingWith(
         "Unable to find type coercer for class %s", NoDefaultConstructor.class.getTypeName());
   }

File: java/src/org/openqa/selenium/remote/AbstractDriverOptions.java
Patch:
@@ -49,7 +49,6 @@ public DO setUnhandledPromptBehaviour(UnexpectedAlertBehaviour behaviour) {
     setCapability(
         UNHANDLED_PROMPT_BEHAVIOUR,
         Require.nonNull("Unhandled prompt behavior", behaviour));
-    setCapability(UNEXPECTED_ALERT_BEHAVIOUR, behaviour);
     return (DO) this;
   }
 

File: java/src/org/openqa/selenium/json/Json.java
Patch:
@@ -53,6 +53,8 @@ public <T> T toType(String source, Type typeOfT) {
   public <T> T toType(String source, Type typeOfT, PropertySetting setter) {
     try (StringReader reader = new StringReader(source)) {
       return toType(reader, typeOfT, setter);
+    } catch (JsonException e) {
+      throw new JsonException("Unable to parse: " + source, e);
     }
   }
 

File: java/src/org/openqa/selenium/grid/distributor/GridModel.java
Patch:
@@ -199,6 +199,7 @@ public void purgeDeadNodes() {
         NodeId id = node.getNodeId();
         if (nodeHealthCount.getOrDefault(id, 0) > UNHEALTHY_THRESHOLD) {
           toRemove.add(node);
+          break;
         }
 
         Instant now = Instant.now();

File: java/src/org/openqa/selenium/grid/docker/DockerSession.java
Patch:
@@ -30,7 +30,7 @@
 import java.time.Duration;
 import java.time.Instant;
 
-class DockerSession extends ProtocolConvertingSession {
+public class DockerSession extends ProtocolConvertingSession {
 
   private final Container container;
   private final Container videoContainer;

File: java/client/src/org/openqa/selenium/devtools/Command.java
Patch:
@@ -34,7 +34,7 @@ public class Command<X> {
   private final boolean sendsResponse;
 
   public Command(String method, Map<String, Object> params) {
-    this(method, params, Void.class);
+    this(method, params, Object.class);
   }
 
   public Command(String method, Map<String, Object> params, Type typeOfX) {

File: java/client/src/org/openqa/selenium/remote/service/DriverCommandExecutor.java
Patch:
@@ -130,6 +130,8 @@ public Response execute(Command command) throws IOException {
       } catch (InterruptedException e) {
         Thread.currentThread().interrupt();
         throw new WebDriverException("Timed out waiting for driver server to stop.", e);
+      } finally {
+        executorService.shutdownNow();
       }
 
     } else {

File: java/client/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -286,6 +286,7 @@ public void stop() {
     } finally {
       process = null;
       lock.unlock();
+      executorService.shutdownNow();
     }
 
     if (toThrow != null) {

File: java/server/src/org/openqa/selenium/grid/distributor/config/DistributorOptions.java
Patch:
@@ -31,7 +31,7 @@
 
 public class DistributorOptions {
 
-  public static final int DEFAULT_HEALTHCHECK_INTERVAL = 300;
+  public static final int DEFAULT_HEALTHCHECK_INTERVAL = 120;
   public static final String DISTRIBUTOR_SECTION = "distributor";
   static final String DEFAULT_DISTRIBUTOR_IMPLEMENTATION =
     "org.openqa.selenium.grid.distributor.local.LocalDistributor";

File: java/server/src/org/openqa/selenium/grid/distributor/selector/DefaultSlotSelector.java
Patch:
@@ -51,7 +51,7 @@ public Set<SlotId> selectSlot(Capabilities capabilities, Set<NodeStatus> nodes)
           // And use the node id as a tie-breaker.
           .thenComparing(NodeStatus::getId))
       .flatMap(node -> node.getSlots().stream()
-        .filter(slot -> !slot.getSession().isPresent())
+        .filter(slot -> slot.getSession()==null)
         .filter(slot -> slot.isSupporting(capabilities))
         .map(Slot::getId))
       .collect(toImmutableSet());

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverInfo.java
Patch:
@@ -51,7 +51,7 @@ public boolean isSupporting(Capabilities capabilities) {
       return false;
     }
 
-    if (BrowserType.FIREFOX.equals(capabilities.getBrowserName())) {
+    if (BrowserType.FIREFOX.equalsIgnoreCase(capabilities.getBrowserName())) {
       return true;
     }
 

File: java/client/src/org/openqa/selenium/ie/InternetExplorerDriverInfo.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.ie;
 
 import com.google.auto.service.AutoService;
+
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
@@ -45,8 +46,8 @@ public Capabilities getCanonicalCapabilities() {
 
   @Override
   public boolean isSupporting(Capabilities capabilities) {
-    return BrowserType.IE.equals(capabilities.getBrowserName()) ||
-      capabilities.getCapability("se:ieOptions") != null;
+    return BrowserType.IE.equalsIgnoreCase(capabilities.getBrowserName()) ||
+           capabilities.getCapability("se:ieOptions") != null;
   }
 
   @Override

File: java/client/src/org/openqa/selenium/opera/OperaDriverInfo.java
Patch:
@@ -46,8 +46,8 @@ public Capabilities getCanonicalCapabilities() {
 
   @Override
   public boolean isSupporting(Capabilities capabilities) {
-    return BrowserType.OPERA_BLINK.equals(capabilities.getBrowserName()) ||
-      BrowserType.OPERA.equals(capabilities.getBrowserName());
+    return BrowserType.OPERA_BLINK.equalsIgnoreCase(capabilities.getBrowserName()) ||
+           BrowserType.OPERA.equalsIgnoreCase(capabilities.getBrowserName());
   }
 
   @Override

File: java/client/src/org/openqa/selenium/safari/SafariDriverInfo.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.safari;
 
 import com.google.auto.service.AutoService;
+
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
@@ -45,7 +46,7 @@ public Capabilities getCanonicalCapabilities() {
 
   @Override
   public boolean isSupporting(Capabilities capabilities) {
-    if (BrowserType.SAFARI.equals(capabilities.getBrowserName())) {
+    if (BrowserType.SAFARI.equalsIgnoreCase(capabilities.getBrowserName())) {
       return true;
     }
 

File: java/client/src/org/openqa/selenium/safari/SafariTechPreviewDriverInfo.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.safari;
 
 import com.google.auto.service.AutoService;
+
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
@@ -44,7 +45,7 @@ public Capabilities getCanonicalCapabilities() {
 
   @Override
   public boolean isSupporting(Capabilities capabilities) {
-    if (SafariOptions.SAFARI_TECH_PREVIEW.equals(capabilities.getBrowserName())) {
+    if (SafariOptions.SAFARI_TECH_PREVIEW.equalsIgnoreCase(capabilities.getBrowserName())) {
       return true;
     }
 

File: java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.grid.distributor.local;
 
 import com.google.common.collect.ImmutableSet;
+
 import org.openqa.selenium.Beta;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
@@ -609,7 +610,7 @@ private void handleNewSessionRequest(SessionRequest sessionRequest) {
 
         if (response.isLeft() && response.left() instanceof RetrySessionRequestException) {
           try(Span childSpan = span.createSpan("distributor.retry")) {
-            LOG.info("Retryinggg");
+            LOG.info("Retrying");
             boolean retried = sessionQueue.retryAddToQueue(sessionRequest);
 
             attributeMap.put("request.retry_add", EventAttribute.setValue(retried));

File: java/server/src/org/openqa/selenium/docker/v1_40/PullImage.java
Patch:
@@ -47,7 +47,7 @@ public void apply(Reference ref) {
 
     LOG.info("Pulling " + ref);
 
-    String image = String.format("%s/%s/%s", ref.getDomain(), ref.getRepository(), ref.getName());
+    String image = String.format("%s/%s", ref.getDomain(), ref.getName());
     HttpRequest req = new HttpRequest(POST, "/v1.40/images/create")
       .addHeader("Content-Type", JSON_UTF_8)
       .addHeader("Content-Length", "0")

File: java/server/src/org/openqa/selenium/docker/v1_40/PullImage.java
Patch:
@@ -47,10 +47,11 @@ public void apply(Reference ref) {
 
     LOG.info("Pulling " + ref);
 
+    String image = String.format("%s/%s/%s", ref.getDomain(), ref.getRepository(), ref.getName());
     HttpRequest req = new HttpRequest(POST, "/v1.40/images/create")
       .addHeader("Content-Type", JSON_UTF_8)
       .addHeader("Content-Length", "0")
-      .addQueryParameter("fromImage", String.format("%s/%s", ref.getRepository(), ref.getName()));
+      .addQueryParameter("fromImage", image);
 
     if (ref.getDigest() != null) {
       req.addQueryParameter("tag", ref.getDigest());

File: java/client/test/org/openqa/selenium/support/decorators/DecoratedWebDriverTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.interactions.Interactive;
+import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.testing.UnitTests;
 import org.openqa.selenium.virtualauthenticator.HasVirtualAuthenticator;
 import org.openqa.selenium.virtualauthenticator.VirtualAuthenticator;

File: java/server/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -28,7 +28,6 @@
 import org.openqa.selenium.grid.distributor.Distributor;
 import org.openqa.selenium.grid.distributor.config.DistributorOptions;
 import org.openqa.selenium.grid.distributor.local.LocalDistributor;
-import org.openqa.selenium.grid.distributor.selector.DefaultSlotSelector;
 import org.openqa.selenium.grid.graphql.GraphqlHandler;
 import org.openqa.selenium.grid.log.LoggingOptions;
 import org.openqa.selenium.grid.router.ProxyCdpIntoGrid;
@@ -141,16 +140,17 @@ protected Handlers createHandlers(Config config) {
       handler,
       networkOptions.getHttpClientFactory(tracer));
 
+    DistributorOptions distributorOptions = new DistributorOptions(config);
     SessionRequestOptions sessionRequestOptions = new SessionRequestOptions(config);
     NewSessionQueue queue = new LocalNewSessionQueue(
       tracer,
-       bus,
+      bus,
+      distributorOptions.getSlotMatcher(),
       sessionRequestOptions.getSessionRequestRetryInterval(),
       sessionRequestOptions.getSessionRequestTimeout(),
       secret);
     handler.addHandler(queue);
 
-    DistributorOptions distributorOptions = new DistributorOptions(config);
     Distributor distributor = new LocalDistributor(
       tracer,
       bus,

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -138,16 +138,17 @@ protected Handlers createHandlers(Config config) {
     SessionMap sessions = new LocalSessionMap(tracer, bus);
     combinedHandler.addHandler(sessions);
 
+    DistributorOptions distributorOptions = new DistributorOptions(config);
     SessionRequestOptions sessionRequestOptions = new SessionRequestOptions(config);
     NewSessionQueue queue = new LocalNewSessionQueue(
       tracer,
       bus,
+      distributorOptions.getSlotMatcher(),
       sessionRequestOptions.getSessionRequestRetryInterval(),
       sessionRequestOptions.getSessionRequestTimeout(),
       registrationSecret);
     combinedHandler.addHandler(queue);
 
-    DistributorOptions distributorOptions = new DistributorOptions(config);
     Distributor distributor = new LocalDistributor(
       tracer,
       bus,

File: java/server/src/org/openqa/selenium/grid/data/SlotMatcher.java
Patch:
@@ -19,7 +19,8 @@
 
 import org.openqa.selenium.Capabilities;
 
-/** Used to determine how a {@link Slot} can match its
+/**
+ * Used to determine how a {@link Slot} can match its
  * stereotype to the capabilities sent in a particular
  * New Session request.
  */

File: java/server/test/org/openqa/selenium/grid/distributor/AddingNodesTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.openqa.selenium.events.local.GuavaEventBus;
 import org.openqa.selenium.grid.data.CreateSessionRequest;
 import org.openqa.selenium.grid.data.CreateSessionResponse;
+import org.openqa.selenium.grid.data.DefaultSlotMatcher;
 import org.openqa.selenium.grid.data.NodeId;
 import org.openqa.selenium.grid.data.NodeStatus;
 import org.openqa.selenium.grid.data.NodeStatusEvent;
@@ -109,6 +110,7 @@ public void setUpDistributor() throws MalformedURLException {
     NewSessionQueue queue = new LocalNewSessionQueue(
       tracer,
       bus,
+      new DefaultSlotMatcher(),
       Duration.ofSeconds(2),
       Duration.ofSeconds(2),
       registrationSecret);

File: java/server/test/org/openqa/selenium/grid/distributor/local/GridModelTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.junit.Test;
 import org.openqa.selenium.events.EventBus;
 import org.openqa.selenium.events.local.GuavaEventBus;
+import org.openqa.selenium.grid.data.DefaultSlotMatcher;
 import org.openqa.selenium.grid.distributor.Distributor;
 import org.openqa.selenium.grid.distributor.selector.DefaultSlotSelector;
 import org.openqa.selenium.grid.security.Secret;
@@ -43,6 +44,7 @@ public class GridModelTest {
   LocalNewSessionQueue queue = new LocalNewSessionQueue(
     tracer,
     events,
+    new DefaultSlotMatcher(),
     Duration.ofSeconds(2),
     Duration.ofSeconds(2),
     secret);

File: java/server/test/org/openqa/selenium/grid/graphql/GraphqlHandlerTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.openqa.selenium.events.local.GuavaEventBus;
 import org.openqa.selenium.grid.data.CreateSessionRequest;
 import org.openqa.selenium.grid.data.CreateSessionResponse;
+import org.openqa.selenium.grid.data.DefaultSlotMatcher;
 import org.openqa.selenium.grid.data.NewSessionRequestEvent;
 import org.openqa.selenium.grid.data.RequestId;
 import org.openqa.selenium.grid.data.Session;
@@ -117,6 +118,7 @@ public void setupGrid() {
     queue = new LocalNewSessionQueue(
       tracer,
       events,
+      new DefaultSlotMatcher(),
       Duration.ofSeconds(2),
       Duration.ofSeconds(2),
       registrationSecret);

File: java/server/test/org/openqa/selenium/grid/router/JmxTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.openqa.selenium.events.EventBus;
 import org.openqa.selenium.events.local.GuavaEventBus;
 import org.openqa.selenium.grid.config.MapConfig;
+import org.openqa.selenium.grid.data.DefaultSlotMatcher;
 import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.jmx.JMXHelper;
 import org.openqa.selenium.grid.node.local.LocalNode;
@@ -196,6 +197,7 @@ public void shouldBeAbleToRegisterSessionQueue() {
       NewSessionQueue sessionQueue = new LocalNewSessionQueue(
         tracer,
         bus,
+        new DefaultSlotMatcher(),
         Duration.ofSeconds(2),
         Duration.ofSeconds(2),
         new Secret(""));

File: java/server/test/org/openqa/selenium/grid/router/NewSessionCreationTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.openqa.selenium.events.EventBus;
 import org.openqa.selenium.events.local.GuavaEventBus;
 import org.openqa.selenium.grid.config.MapConfig;
+import org.openqa.selenium.grid.data.DefaultSlotMatcher;
 import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.distributor.Distributor;
 import org.openqa.selenium.grid.distributor.local.LocalDistributor;
@@ -94,6 +95,7 @@ public void ensureJsCannotCreateANewSession() throws URISyntaxException {
     NewSessionQueue queue = new LocalNewSessionQueue(
       tracer,
       events,
+      new DefaultSlotMatcher(),
       Duration.ofSeconds(2),
       Duration.ofSeconds(2),
       registrationSecret);
@@ -167,6 +169,7 @@ public void shouldNotRetryNewSessionRequestOnUnexpectedError() throws URISyntaxE
     NewSessionQueue queue = new LocalNewSessionQueue(
       tracer,
       events,
+      new DefaultSlotMatcher(),
       Duration.ofSeconds(2),
       Duration.ofSeconds(10),
       registrationSecret);

File: java/server/test/org/openqa/selenium/grid/router/RouterTest.java
Patch:
@@ -24,6 +24,7 @@
 import org.openqa.selenium.events.EventBus;
 import org.openqa.selenium.events.local.GuavaEventBus;
 import org.openqa.selenium.grid.data.Availability;
+import org.openqa.selenium.grid.data.DefaultSlotMatcher;
 import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.distributor.Distributor;
 import org.openqa.selenium.grid.distributor.local.LocalDistributor;
@@ -88,6 +89,7 @@ public void setUp() {
     queue = new LocalNewSessionQueue(
       tracer,
       bus,
+      new DefaultSlotMatcher(),
       Duration.ofSeconds(2),
       Duration.ofSeconds(2),
       registrationSecret);

File: java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java
Patch:
@@ -424,7 +424,7 @@ private void handleNewSessionRequest(SessionRequest sessionRequest, RequestId re
         attributeMap.put("request", EventAttribute.setValue(sessionRequest.toString()));
         Either<SessionNotCreatedException, CreateSessionResponse> response = newSession(sessionRequest);
 
-        if (response.isLeft()) {
+        if (response.isLeft() && response.left() instanceof RetrySessionRequestException) {
           boolean retried = sessionQueue.retryAddToQueue(sessionRequest);
 
           attributeMap.put("request.retry_add", EventAttribute.setValue(retried));

File: java/server/test/org/openqa/selenium/grid/router/DeploymentTypes.java
Patch:
@@ -189,7 +189,7 @@ public Deployment start(Capabilities capabilities, Config additionalConfig) {
       Config newSessionQueueServerConfig = new TomlConfig(new StringReader(String.join(
         "\n",
         new String[] {
-          "[sessionqueuer]",
+          "[sessionqueue]",
           "hostname = \"localhost\"",
           "port = " + newSessionQueueServer.getUrl().getPort()
         }

File: java/server/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -44,7 +44,7 @@
 import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.NewSessionQueue;
 import org.openqa.selenium.grid.sessionqueue.config.SessionRequestOptions;
-import org.openqa.selenium.grid.sessionqueue.local.LocalSessionRequests;
+import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue;
 import org.openqa.selenium.grid.web.CombinedHandler;
 import org.openqa.selenium.grid.web.GridUiRoute;
@@ -144,7 +144,7 @@ protected Handlers createHandlers(Config config) {
       networkOptions.getHttpClientFactory(tracer));
 
     SessionRequestOptions sessionRequestOptions = new SessionRequestOptions(config);
-    SessionRequests sessionRequests = new LocalSessionRequests(
+    SessionRequests sessionRequests = new SessionRequests(
       tracer,
       bus,
       sessionRequestOptions.getSessionRequestRetryInterval(),

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -45,7 +45,6 @@
 import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.NewSessionQueue;
 import org.openqa.selenium.grid.sessionqueue.config.SessionRequestOptions;
-import org.openqa.selenium.grid.sessionqueue.local.LocalSessionRequests;
 import org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue;
 import org.openqa.selenium.grid.web.CombinedHandler;
 import org.openqa.selenium.grid.web.GridUiRoute;
@@ -141,7 +140,7 @@ protected Handlers createHandlers(Config config) {
     combinedHandler.addHandler(sessions);
 
     SessionRequestOptions sessionRequestOptions = new SessionRequestOptions(config);
-    SessionRequests sessionRequests = new LocalSessionRequests(
+    SessionRequests sessionRequests = new SessionRequests(
       tracer,
       bus,
       sessionRequestOptions.getSessionRequestRetryInterval(),

File: java/server/src/org/openqa/selenium/grid/sessionqueue/local/LocalNewSessionQueue.java
Patch:
@@ -70,7 +70,7 @@ public static NewSessionQueue create(Config config) {
     EventBus bus = new EventBusOptions(config).getEventBus();
     Duration retryInterval = new SessionRequestOptions(config).getSessionRequestRetryInterval();
     Duration requestTimeout = new SessionRequestOptions(config).getSessionRequestTimeout();
-    SessionRequests sessionRequests = new LocalSessionRequests(
+    SessionRequests sessionRequests = new SessionRequests(
       tracer,
       bus,
       retryInterval,

File: java/server/test/org/openqa/selenium/grid/distributor/AddingNodesTest.java
Patch:
@@ -46,7 +46,7 @@
 import org.openqa.selenium.grid.node.local.LocalNode;
 import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.sessionmap.local.LocalSessionMap;
-import org.openqa.selenium.grid.sessionqueue.local.LocalSessionRequests;
+import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue;
 import org.openqa.selenium.grid.testing.TestSessionFactory;
 import org.openqa.selenium.grid.web.CombinedHandler;
@@ -106,7 +106,7 @@ public void setUpDistributor() throws MalformedURLException {
       HttpClient.Factory.createDefault());
 
     LocalSessionMap sessions = new LocalSessionMap(tracer, bus);
-    LocalSessionRequests localNewSessionQueue = new LocalSessionRequests(
+    SessionRequests localNewSessionQueue = new SessionRequests(
       tracer,
       bus,
       Duration.ofSeconds(2),

File: java/server/test/org/openqa/selenium/grid/distributor/local/GridModelTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.sessionmap.SessionMap;
 import org.openqa.selenium.grid.sessionmap.local.LocalSessionMap;
-import org.openqa.selenium.grid.sessionqueue.local.LocalSessionRequests;
+import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue;
 import org.openqa.selenium.remote.http.HttpClient;
 import org.openqa.selenium.remote.tracing.DefaultTestTracer;
@@ -39,7 +39,7 @@ public class GridModelTest {
   private final HttpClient.Factory clientFactory = HttpClient.Factory.createDefault();
   private final SessionMap sessions = new LocalSessionMap(tracer, events);
   private final Secret secret = new Secret("cheese");
-  LocalSessionRequests localSessionRequests = new LocalSessionRequests(
+  SessionRequests localSessionRequests = new SessionRequests(
     tracer,
     events,
     Duration.ofSeconds(2),

File: java/server/test/org/openqa/selenium/grid/graphql/GraphqlHandlerTest.java
Patch:
@@ -55,7 +55,7 @@
 import org.openqa.selenium.grid.sessionmap.local.LocalSessionMap;
 import org.openqa.selenium.grid.sessionqueue.NewSessionQueue;
 import org.openqa.selenium.grid.sessionqueue.SessionRequest;
-import org.openqa.selenium.grid.sessionqueue.local.LocalSessionRequests;
+import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue;
 import org.openqa.selenium.grid.testing.TestSessionFactory;
 import org.openqa.selenium.internal.Either;
@@ -92,7 +92,7 @@ public class GraphqlHandlerTest {
   private EventBus events;
   private ImmutableCapabilities caps;
   private ImmutableCapabilities stereotype;
-  private LocalSessionRequests localNewSessionQueue;
+  private SessionRequests localNewSessionQueue;
   private SessionRequest sessionRequest;
 
   public GraphqlHandlerTest() throws URISyntaxException {
@@ -113,7 +113,7 @@ public void setupGrid() {
       Set.of(OSS, W3C),
       Set.of(caps));
 
-    localNewSessionQueue = new LocalSessionRequests(
+    localNewSessionQueue = new SessionRequests(
       tracer,
       events,
       Duration.ofSeconds(2),

File: java/server/test/org/openqa/selenium/grid/router/JmxTest.java
Patch:
@@ -30,7 +30,7 @@
 import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.server.BaseServerOptions;
 import org.openqa.selenium.grid.sessionqueue.config.SessionRequestOptions;
-import org.openqa.selenium.grid.sessionqueue.local.LocalSessionRequests;
+import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.testing.TestSessionFactory;
 import org.openqa.selenium.net.PortProber;
 import org.openqa.selenium.remote.tracing.DefaultTestTracer;
@@ -193,7 +193,7 @@ public void shouldBeAbleToRegisterSessionQueue() {
       Tracer tracer = DefaultTestTracer.createTracer();
       EventBus bus = new GuavaEventBus();
 
-      LocalSessionRequests localNewSessionQueue = new LocalSessionRequests(
+      SessionRequests localNewSessionQueue = new SessionRequests(
         tracer,
         bus,
         Duration.ofSeconds(2),

File: java/server/test/org/openqa/selenium/grid/router/NewSessionCreationTest.java
Patch:
@@ -41,7 +41,7 @@
 import org.openqa.selenium.grid.sessionmap.local.LocalSessionMap;
 import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.NewSessionQueue;
-import org.openqa.selenium.grid.sessionqueue.local.LocalSessionRequests;
+import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue;
 import org.openqa.selenium.grid.testing.TestSessionFactory;
 import org.openqa.selenium.grid.web.CombinedHandler;
@@ -92,7 +92,7 @@ public void stopServer() {
   @Test
   public void ensureJsCannotCreateANewSession() throws URISyntaxException {
     SessionMap sessions = new LocalSessionMap(tracer, events);
-    LocalSessionRequests localSessionRequests = new LocalSessionRequests(
+    SessionRequests localSessionRequests = new SessionRequests(
       tracer,
       events,
       Duration.ofSeconds(2),
@@ -168,7 +168,7 @@ public void shouldNotRetryNewSessionRequestOnUnexpectedError() throws URISyntaxE
 
     SessionMap sessions = new LocalSessionMap(tracer, events);
     handler.addHandler(sessions);
-    SessionRequests sessionRequests = new LocalSessionRequests(
+    SessionRequests sessionRequests = new SessionRequests(
       tracer,
       events,
       Duration.ofSeconds(2),

File: java/server/test/org/openqa/selenium/grid/router/RouterTest.java
Patch:
@@ -34,7 +34,7 @@
 import org.openqa.selenium.grid.sessionmap.SessionMap;
 import org.openqa.selenium.grid.sessionmap.local.LocalSessionMap;
 import org.openqa.selenium.grid.sessionqueue.NewSessionQueue;
-import org.openqa.selenium.grid.sessionqueue.local.LocalSessionRequests;
+import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue;
 import org.openqa.selenium.grid.testing.PassthroughHttpClient;
 import org.openqa.selenium.grid.testing.TestSessionFactory;
@@ -85,7 +85,7 @@ public void setUp() {
 
     registrationSecret = new Secret("stinking bishop");
 
-    LocalSessionRequests localNewSessionQueue = new LocalSessionRequests(
+    SessionRequests localNewSessionQueue = new SessionRequests(
       tracer,
       bus,
       Duration.ofSeconds(2),

File: java/server/test/org/openqa/selenium/grid/router/SessionQueueGridTest.java
Patch:
@@ -64,7 +64,7 @@
 import org.openqa.selenium.grid.sessionmap.local.LocalSessionMap;
 import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.NewSessionQueue;
-import org.openqa.selenium.grid.sessionqueue.local.LocalSessionRequests;
+import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue;
 import org.openqa.selenium.grid.testing.TestSessionFactory;
 import org.openqa.selenium.grid.web.CombinedHandler;
@@ -98,7 +98,7 @@ public void setup() throws URISyntaxException, MalformedURLException {
 
     SessionMap sessions = new LocalSessionMap(tracer, bus);
     handler.addHandler(sessions);
-    SessionRequests localSessionRequests = new LocalSessionRequests(
+    SessionRequests localSessionRequests = new SessionRequests(
       tracer,
       bus,
       Duration.ofSeconds(5),

File: java/server/test/org/openqa/selenium/grid/sessionqueue/NewSessionQueueTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.openqa.selenium.grid.data.RequestId;
 import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.security.Secret;
-import org.openqa.selenium.grid.sessionqueue.local.LocalSessionRequests;
 import org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueue;
 import org.openqa.selenium.grid.sessionqueue.local.SessionRequests;
 import org.openqa.selenium.grid.sessionqueue.remote.RemoteNewSessionQueue;
@@ -94,7 +93,7 @@ public void setUp() {
     caps = new ImmutableCapabilities("browserName", "chrome");
     bus = new GuavaEventBus();
 
-    sessionQueue = new LocalSessionRequests(
+    sessionQueue = new SessionRequests(
         tracer,
         bus,
         Duration.ofSeconds(1),
@@ -428,7 +427,7 @@ public void shouldBeAbleToTimeoutARequestOnRetry() {
   @Test(timeout = 15000)
   public void shouldBeAbleToTimeoutARequestOnRemove() {
     Tracer tracer = DefaultTestTracer.createTracer();
-    LocalSessionRequests sessionQueue = new LocalSessionRequests(
+    SessionRequests sessionQueue = new SessionRequests(
         tracer,
         bus,
         Duration.ofSeconds(4),

File: java/server/test/org/openqa/selenium/grid/sessionqueue/local/SessionRequestsTest.java
Patch:
@@ -46,7 +46,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.remote.Dialect.W3C;
 
-public class LocalSessionRequestsTest {
+public class SessionRequestsTest {
 
   private EventBus bus;
   private SessionRequests sessionQueue;
@@ -58,7 +58,7 @@ public void setUp() {
     Tracer tracer = DefaultTestTracer.createTracer();
     expectedCaps = new ImmutableCapabilities("browserName", "chrome");
     bus = new GuavaEventBus();
-    sessionQueue = new LocalSessionRequests(
+    sessionQueue = new SessionRequests(
         tracer,
         bus,
         Duration.ofSeconds(30),
@@ -202,7 +202,7 @@ public void shouldBeAbleToGetQueueContents() {
 
   @Test(timeout = 15000)
   public void shouldBeAbleToRemoveRequestsOnTimeout() throws InterruptedException {
-    SessionRequests localSessionQueue = new LocalSessionRequests(
+    SessionRequests localSessionQueue = new SessionRequests(
       DefaultTestTracer.createTracer(),
       bus,
       Duration.ofSeconds(30),

File: java/server/src/org/openqa/selenium/grid/graphql/GridData.java
Patch:
@@ -25,7 +25,7 @@
 
 import java.net.URI;
 
-public class GridData implements DataFetcher {
+public class GridData implements DataFetcher<Grid> {
   private final Distributor distributor;
   private final NewSessionQueue newSessionQueue;
   private final URI publicUri;
@@ -43,7 +43,7 @@ public GridData(
   }
 
   @Override
-  public Object get(DataFetchingEnvironment environment) {
+  public Grid get(DataFetchingEnvironment environment) {
     return new Grid(distributor, newSessionQueue, publicUri, version);
   }
 }

File: java/server/src/org/openqa/selenium/grid/sessionqueue/NewSessionQueue.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.grid.sessionqueue;
 
+import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.grid.data.RequestId;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.remote.tracing.Tracer;
@@ -26,6 +27,7 @@
 import java.time.Instant;
 import java.util.List;
 import java.util.Optional;
+import java.util.Set;
 
 public abstract class NewSessionQueue implements HasReadyState {
 
@@ -49,7 +51,7 @@ protected NewSessionQueue(Tracer tracer, Duration retryInterval, Duration reques
 
   public abstract int getQueueSize();
 
-  public abstract List<Object> getQueuedRequests();
+  public abstract List<Set<Capabilities>> getQueuedRequests();
 
   public boolean hasRequestTimedOut(SessionRequest request) {
     Instant enque = request.getEnqueued();

File: java/server/src/org/openqa/selenium/grid/sessionqueue/NewSessionQueuer.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.grid.sessionqueue;
 
+import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.grid.data.RequestId;
 import org.openqa.selenium.grid.security.RequiresSecretFilter;
 import org.openqa.selenium.grid.security.Secret;
@@ -37,6 +38,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
+import java.util.Set;
 import java.util.UUID;
 import java.util.stream.Collectors;
 
@@ -98,7 +100,7 @@ private RequestId requestIdFrom(Map<String, String> params) {
 
   public abstract int clearQueue();
 
-  public abstract List<Object> getQueueContents();
+  public abstract List<Set<Capabilities>> getQueueContents();
 
   @Override
   public boolean matches(HttpRequest req) {

File: java/server/src/org/openqa/selenium/grid/sessionqueue/local/LocalNewSessionQueuer.java
Patch:
@@ -50,6 +50,7 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.Set;
 
 import static org.openqa.selenium.remote.http.Contents.reader;
 import static org.openqa.selenium.remote.tracing.Tags.EXCEPTION;
@@ -111,7 +112,7 @@ public int clearQueue() {
   }
 
   @Override
-  public List<Object> getQueueContents() {
+  public List<Set<Capabilities>> getQueueContents() {
     return sessionRequests.getQueuedRequests();
   }
 

File: java/server/test/org/openqa/selenium/grid/sessionqueue/local/LocalNewSessionQueueTest.java
Patch:
@@ -192,13 +192,13 @@ public void shouldBeAbleToGetQueueContents() {
     boolean addFirefoxRequest = sessionQueue.offerLast(firefoxRequest);
     assertTrue(addFirefoxRequest);
 
-    List<Object> response = sessionQueue.getQueuedRequests();
+    List<Set<Capabilities>> response = sessionQueue.getQueuedRequests();
     assertThat(response).isNotNull();
 
     assertEquals(2, response.size());
 
-    assertEquals(chromeCaps, response.get(0));
-    assertEquals(firefoxCaps, response.get(1));
+    assertEquals(Set.of(chromeCaps), response.get(0));
+    assertEquals(Set.of(firefoxCaps), response.get(1));
   }
 
   @Test(timeout = 15000)

File: java/client/src/org/openqa/selenium/remote/NewSessionPayload.java
Patch:
@@ -318,7 +318,7 @@ public Stream<Capabilities> stream() {
     }
   }
 
-  public ImmutableSet<Dialect> getDownstreamDialects() {
+  public Set<Dialect> getDownstreamDialects() {
     return dialects.isEmpty() ? ImmutableSet.of(DEFAULT_DIALECT) : dialects;
   }
 

File: java/server/src/org/openqa/selenium/grid/sessionqueue/AddToSessionQueue.java
Patch:
@@ -22,6 +22,7 @@
 import static org.openqa.selenium.remote.tracing.Tags.HTTP_RESPONSE;
 
 import org.openqa.selenium.internal.Require;
+import org.openqa.selenium.remote.http.Contents;
 import org.openqa.selenium.remote.http.HttpHandler;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;
@@ -43,7 +44,7 @@ public HttpResponse execute(HttpRequest req) {
     try (Span span = newSpanAsChildOf(tracer, req, "sessionqueuer.add")) {
       HTTP_REQUEST.accept(span, req);
 
-      HttpResponse response = newSessionQueuer.addToQueue(req);
+      HttpResponse response = newSessionQueuer.addToQueue(Contents.fromJson(req, SessionRequest.class));
 
       HTTP_RESPONSE.accept(span, response);
 

File: java/server/src/org/openqa/selenium/grid/TemplateGridCommand.java
Patch:
@@ -98,7 +98,7 @@ public final Executable configure(PrintStream out, PrintStream err, String... ar
         .map(ParameterDescription::getLongestName)
         .collect(Collectors.toSet());
       if (cliArgs.size() > 0) {
-        allFlags.forEach(flags -> allConfigs.add(new AnnotatedConfig(flags, cliArgs)));
+        allFlags.forEach(flags -> allConfigs.add(new AnnotatedConfig(flags, cliArgs, true)));
       }
 
       // 4. Configuration files (config.toml)
@@ -111,7 +111,7 @@ public final Executable configure(PrintStream out, PrintStream err, String... ar
       getFlagObjects().forEach(flagObject -> allConfigs.add(new AnnotatedConfig(flagObject)));
 
       // 7. Default values
-      allFlags.forEach(flags -> allConfigs.add(new AnnotatedConfig(flags)));
+      allFlags.forEach(flags -> allConfigs.add(new AnnotatedConfig(flags, cliArgs, false)));
 
       Config config = new MemoizedConfig(new CompoundConfig(allConfigs.toArray(new Config[0])));
 

File: java/client/src/org/openqa/selenium/chromium/ChromiumDriverInfo.java
Patch:
@@ -23,6 +23,6 @@ public abstract class ChromiumDriverInfo implements WebDriverInfo {
 
   @Override
   public int getMaximumSimultaneousSessions() {
-    return Runtime.getRuntime().availableProcessors() + 1;
+    return Runtime.getRuntime().availableProcessors();
   }
 }

File: java/client/src/org/openqa/selenium/edge/EdgeDriverInfo.java
Patch:
@@ -17,6 +17,7 @@
 package org.openqa.selenium.edge;
 
 import com.google.auto.service.AutoService;
+
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
@@ -71,7 +72,7 @@ public boolean isAvailable() {
 
   @Override
   public int getMaximumSimultaneousSessions() {
-    return Runtime.getRuntime().availableProcessors() + 1;
+    return Runtime.getRuntime().availableProcessors();
   }
 
   @Override

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverInfo.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.firefox;
 
 import com.google.auto.service.AutoService;
+
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
@@ -77,7 +78,7 @@ public boolean isAvailable() {
 
   @Override
   public int getMaximumSimultaneousSessions() {
-    return Runtime.getRuntime().availableProcessors() + 1;
+    return Runtime.getRuntime().availableProcessors();
   }
 
   @Override

File: java/client/src/org/openqa/selenium/firefox/xpi/XpiDriverInfo.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.firefox.xpi;
 
 import com.google.auto.service.AutoService;
+
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
@@ -72,7 +73,7 @@ public boolean isAvailable() {
 
   @Override
   public int getMaximumSimultaneousSessions() {
-    return Runtime.getRuntime().availableProcessors() + 1;
+    return Runtime.getRuntime().availableProcessors();
   }
 
   @Override

File: java/client/src/org/openqa/selenium/opera/OperaDriverInfo.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.opera;
 
-import static org.openqa.selenium.remote.CapabilityType.BROWSER_NAME;
-
 import com.google.auto.service.AutoService;
 
 import org.openqa.selenium.Capabilities;
@@ -31,6 +29,8 @@
 
 import java.util.Optional;
 
+import static org.openqa.selenium.remote.CapabilityType.BROWSER_NAME;
+
 @AutoService(WebDriverInfo.class)
 public class OperaDriverInfo implements WebDriverInfo {
 
@@ -67,7 +67,7 @@ public boolean isAvailable() {
 
   @Override
   public int getMaximumSimultaneousSessions() {
-    return Runtime.getRuntime().availableProcessors() + 1;
+    return Runtime.getRuntime().availableProcessors();
   }
 
   @Override

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -50,9 +50,9 @@
 import org.openqa.selenium.grid.data.NodeAddedEvent;
 import org.openqa.selenium.grid.data.NodeDrainComplete;
 import org.openqa.selenium.grid.data.NodeDrainStarted;
-import org.openqa.selenium.grid.data.NodeHeartBeatEvent;
 import org.openqa.selenium.grid.data.NodeId;
 import org.openqa.selenium.grid.data.NodeStatus;
+import org.openqa.selenium.grid.data.NodeHeartBeatEvent;
 import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.data.SessionClosedEvent;
 import org.openqa.selenium.grid.data.Slot;
@@ -181,7 +181,7 @@ private LocalNode(
         // Lets avoid to create more than one "Regularly" when the Node registers again.
         if (!heartBeatStarted.getAndSet(true)) {
           regularly.submit(
-            () -> bus.fire(new NodeHeartBeatEvent(getId())), heartbeatPeriod, heartbeatPeriod);
+            () -> bus.fire(new NodeHeartBeatEvent(getStatus())), heartbeatPeriod, heartbeatPeriod);
         }
       }
     }));

File: java/server/test/org/openqa/selenium/grid/distributor/AddingNodesTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.openqa.selenium.Capabilities;

File: java/server/test/org/openqa/selenium/grid/distributor/DistributorTest.java
Patch:
@@ -187,9 +187,9 @@ public void shouldStartHeartBeatOnNodeRegistration() {
     AtomicBoolean heartbeatStarted = new AtomicBoolean();
     CountDownLatch latch = new CountDownLatch(1);
 
-    bus.addListener(NodeHeartBeatEvent.listener(nodeId -> {
+    bus.addListener(NodeHeartBeatEvent.listener(nodeStatus -> {
       latch.countDown();
-      if (node.getId().equals(nodeId)) {
+      if (node.getId().equals(nodeStatus.getId())) {
         heartbeatStarted.set(true);
       }
     }));

File: java/server/test/org/openqa/selenium/grid/distributor/local/LocalDistributorTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.grid.distributor.local;
 
 import com.google.common.collect.ImmutableMap;
+
 import org.junit.Before;
 import org.junit.Test;
 import org.openqa.selenium.Capabilities;

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -88,7 +88,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.openqa.selenium.remote.CapabilityType.LOGGING_PREFS;
 import static org.openqa.selenium.remote.CapabilityType.PLATFORM;
@@ -358,8 +357,7 @@ public <X> X getScreenshotAs(OutputType<X> outputType) throws WebDriverException
       String base64EncodedPng = (String) result;
       return outputType.convertFromBase64Png(base64EncodedPng);
     } else if (result instanceof byte[]) {
-      String base64EncodedPng = new String((byte[]) result, UTF_8);
-      return outputType.convertFromBase64Png(base64EncodedPng);
+      return outputType.convertFromPngBytes((byte[]) result);
     } else {
       throw new RuntimeException(String.format("Unexpected result for %s command: %s",
           DriverCommand.SCREENSHOT,

File: java/server/src/org/openqa/selenium/grid/sessionqueue/GetNewSessionResponse.java
Patch:
@@ -143,7 +143,7 @@ public HttpResponse add(HttpRequest request) {
   private HttpResponse internalErrorResponse(String message) {
     return new HttpResponse()
       .setStatus(HTTP_INTERNAL_ERROR)
-      .setContent(asJson(singletonMap("message", message)));
+      .setContent(asJson(singletonMap("value", singletonMap("message", message))));
   }
 
   private void removeRequest(RequestId id) {

File: java/server/src/org/openqa/selenium/grid/sessionqueue/GetNewSessionResponse.java
Patch:
@@ -143,7 +143,7 @@ public HttpResponse add(HttpRequest request) {
   private HttpResponse internalErrorResponse(String message) {
     return new HttpResponse()
       .setStatus(HTTP_INTERNAL_ERROR)
-      .setContent(asJson(singletonMap("message", message)));
+      .setContent(asJson(singletonMap("value", singletonMap("message", message))));
   }
 
   private void removeRequest(RequestId id) {

File: java/server/src/org/openqa/selenium/grid/distributor/remote/RemoteDistributor.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.grid.distributor.remote;
 
+import org.openqa.selenium.SessionNotCreatedException;
 import org.openqa.selenium.grid.data.CreateSessionRequest;
 import org.openqa.selenium.grid.data.CreateSessionResponse;
 import org.openqa.selenium.grid.data.DistributorStatus;
@@ -29,6 +30,7 @@
 import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.sessionmap.NullSessionMap;
 import org.openqa.selenium.grid.web.Values;
+import org.openqa.selenium.internal.Either;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.remote.http.Filter;
 import org.openqa.selenium.remote.http.HttpClient;
@@ -40,7 +42,6 @@
 
 import java.net.URL;
 import java.util.Set;
-import java.util.function.Supplier;
 import java.util.logging.Logger;
 
 import static org.openqa.selenium.remote.http.Contents.asJson;
@@ -129,7 +130,7 @@ protected Set<NodeStatus> getAvailableNodes() {
   }
 
   @Override
-  protected Supplier<CreateSessionResponse> reserve(SlotId slot, CreateSessionRequest request) {
+  protected Either<SessionNotCreatedException, CreateSessionResponse> reserve(SlotId slot, CreateSessionRequest request) {
     throw new UnsupportedOperationException("reserve is not required for remote sessions");
   }
 }

File: java/server/src/org/openqa/selenium/grid/TemplateGridCommand.java
Patch:
@@ -95,7 +95,7 @@ public final Executable configure(PrintStream out, PrintStream err, String... ar
         .values()
         .stream()
         .filter(ParameterDescription::isAssigned)
-        .map(parameterDescription -> parameterDescription.getLongestName().replaceFirst("--", ""))
+        .map(ParameterDescription::getLongestName)
         .collect(Collectors.toSet());
       if (cliArgs.size() > 0) {
         allFlags.forEach(flags -> allConfigs.add(new AnnotatedConfig(flags, cliArgs)));

File: java/server/src/org/openqa/selenium/grid/node/config/NodeFlags.java
Patch:
@@ -44,8 +44,9 @@
 public class NodeFlags implements HasRoles {
 
   @Parameter(
-    names = "--max-sessions. Default value is the number of available processors.",
-    description = "Maximum number of concurrent sessions.")
+    names = {"--max-sessions"},
+    description = "Maximum number of concurrent sessions. Default value is the number "
+                  + "of available processors.")
   @ConfigValue(section = NODE_SECTION, name = "max-sessions", example = "8")
   public int maxSessions = DEFAULT_MAX_SESSIONS;
 

File: java/server/src/org/openqa/selenium/grid/distributor/Distributor.java
Patch:
@@ -270,8 +270,8 @@ public Either<SessionNotCreatedException, CreateSessionResponse> newSession(Http
       attributeMap.put(AttributeKey.EXCEPTION_MESSAGE.getKey(),
         EventAttribute.setValue("Unable to create session: " + e.getMessage()));
       span.addEvent(AttributeKey.EXCEPTION_EVENT.getKey(), attributeMap);
-      SessionNotCreatedException exception = new RetrySessionRequestException(e.getMessage());
-      return Either.left(exception);
+
+      return Either.left(e);
     } catch (IOException e) {
       span.setAttribute(AttributeKey.ERROR.getKey(), true);
       span.setStatus(Status.UNKNOWN);

File: java/server/src/org/openqa/selenium/grid/node/Node.java
Patch:
@@ -28,6 +28,7 @@
 import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.security.RequiresSecretFilter;
 import org.openqa.selenium.grid.security.Secret;
+import org.openqa.selenium.internal.Either;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.io.TemporaryFilesystem;
 import org.openqa.selenium.json.Json;
@@ -40,11 +41,11 @@
 import org.openqa.selenium.remote.tracing.SpanDecorator;
 import org.openqa.selenium.remote.tracing.Tracer;
 import org.openqa.selenium.status.HasReadyState;
+import org.openqa.selenium.WebDriverException;
 
 import java.io.IOException;
 import java.net.URI;
 import java.util.Map;
-import java.util.Optional;
 import java.util.ServiceLoader;
 import java.util.Set;
 import java.util.logging.Logger;
@@ -203,7 +204,7 @@ public ImmutableMap<String, String> getOsInfo() {
     return OS_INFO;
   }
 
-  public abstract Optional<CreateSessionResponse> newSession(CreateSessionRequest sessionRequest);
+  public abstract Either<WebDriverException, CreateSessionResponse> newSession(CreateSessionRequest sessionRequest);
 
   public abstract HttpResponse executeWebDriverCommand(HttpRequest req);
 

File: java/server/src/org/openqa/selenium/grid/log/LoggingOptions.java
Patch:
@@ -42,7 +42,7 @@ public class LoggingOptions {
   static final String LOGGING_SECTION = "logging";
   static final boolean DEFAULT_CONFIGURE_LOGGING = true;
   static final String DEFAULT_LOG_LEVEL = Level.INFO.getName();
-  static final boolean DEFAULT_PLAIN_LOGS = false;
+  static final boolean DEFAULT_PLAIN_LOGS = true;
   static final boolean DEFAULT_STRUCTURED_LOGS = false;
   static final boolean DEFAULT_TRACING_ENABLED = true;
   private static final Logger LOG = Logger.getLogger(LoggingOptions.class.getName());

File: java/server/src/org/openqa/selenium/grid/distributor/config/DistributorFlags.java
Patch:
@@ -46,7 +46,7 @@ public class DistributorFlags implements HasRoles {
     names = "--distributor-port",
     description = "Port on which the distributor is listening.")
   @ConfigValue(section = DISTRIBUTOR_SECTION, name = "port", example = "5553")
-  private int distributorServerPort;
+  private Integer distributorServerPort;
 
   @Parameter(
     names = "--distributor-host",

File: java/server/src/org/openqa/selenium/grid/server/EventBusOptions.java
Patch:
@@ -23,8 +23,8 @@
 
 public class EventBusOptions {
 
+  static final String EVENTS_SECTION = "events";
   private static final String DEFAULT_CLASS = "org.openqa.selenium.events.zeromq.ZeroMqEventBus";
-
   private final Config config;
   private volatile EventBus bus;
 
@@ -48,6 +48,6 @@ public EventBus getEventBus() {
   }
 
   private EventBus createBus() {
-    return config.getClass("events", "implementation", EventBus.class, DEFAULT_CLASS);
+    return config.getClass(EVENTS_SECTION, "implementation", EventBus.class, DEFAULT_CLASS);
   }
 }

File: java/server/src/org/openqa/selenium/grid/sessionqueue/config/NewSessionQueuerFlags.java
Patch:
@@ -44,7 +44,7 @@ public class NewSessionQueuerFlags implements HasRoles {
     names = "--sessionqueuer-port",
     description = "Port on which the session queue server is listening.")
   @ConfigValue(section = "sessionqueuer", name = "port", example = "1234")
-  private int sessionQueueServerPort;
+  private Integer sessionQueueServerPort;
 
   @Parameter(
     names = "--sessionqueuer-host",

File: java/server/src/org/openqa/selenium/grid/distributor/config/DistributorOptions.java
Patch:
@@ -27,8 +27,8 @@
 
 public class DistributorOptions {
 
-  private static final String DISTRIBUTOR_SECTION = "distributor";
-  private static final String DEFAULT_DISTRIBUTOR_IMPLEMENTATION =
+  static final String DISTRIBUTOR_SECTION = "distributor";
+  static final String DEFAULT_DISTRIBUTOR_IMPLEMENTATION =
     "org.openqa.selenium.grid.distributor.local.LocalDistributor";
 
   private final Config config;

File: java/client/src/org/openqa/selenium/remote/session/ChromeFilter.java
Patch:
@@ -31,7 +31,7 @@ public Map<String, Object> apply(Map<String, Object> unmodifiedCaps) {
     Map<String, Object> caps = unmodifiedCaps.entrySet().parallelStream()
       .filter(
         entry ->
-          (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && BrowserType.EDGE.equals(entry.getValue())) ||
+          (CapabilityType.BROWSER_NAME.equals(entry.getKey()) && BrowserType.CHROME.equals(entry.getValue())) ||
           entry.getKey().startsWith("goog:") ||
           "chromeOptions".equals(entry.getKey()) ||
           "loggingPrefs".equals(entry.getKey()))

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -563,7 +563,7 @@ public static class Builder {
     private Ticker ticker = Ticker.systemTicker();
     private Duration sessionTimeout = Duration.ofMinutes(5);
     private HealthCheck healthCheck;
-    private Duration heartbeatPeriod;
+    private Duration heartbeatPeriod = Duration.ofSeconds(10);
 
     private Builder(
       Tracer tracer,

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNodeFactory.java
Patch:
@@ -60,7 +60,8 @@ public static Node create(Config config) {
       serverOptions.getExternalUri(),
       nodeOptions.getPublicGridUri().orElseGet(serverOptions::getExternalUri),
       secretOptions.getRegistrationSecret())
-      .maximumConcurrentSessions(nodeOptions.getMaxSessions());
+      .maximumConcurrentSessions(nodeOptions.getMaxSessions())
+      .heartbeatPeriod(nodeOptions.getHeartbeatPeriod());
 
 
     List<DriverService.Builder<?, ?>> builders = new ArrayList<>();

File: java/server/test/org/openqa/selenium/grid/data/NodeStatusTest.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.time.Duration;
 import java.time.Instant;
 import java.util.Optional;
 import java.util.UUID;
@@ -55,6 +56,7 @@ public void ensureRoundTripWorks() throws URISyntaxException {
             new ImmutableCapabilities("peas", "sausages"),
             Instant.now())))),
       UP,
+      Duration.ofSeconds(10),
       "4.0.0",
       ImmutableMap.of(
         "name", "Max OS X",

File: java/server/test/org/openqa/selenium/grid/distributor/AddingNodesTest.java
Patch:
@@ -254,6 +254,7 @@ public void distributorShouldUpdateStateOfExistingNodeWhenNodePublishesStateChan
           Optional.of(new Session(
             new SessionId(UUID.randomUUID()), sessionUri, CAPS, CAPS, Instant.now())))),
       UP,
+      Duration.ofSeconds(10),
       status.getVersion(),
       status.getOsInfo());
 
@@ -376,6 +377,7 @@ public NodeStatus getStatus() {
             Instant.now(),
             Optional.ofNullable(sess))),
         UP,
+        Duration.ofSeconds(10),
         getNodeVersion(),
         getOsInfo());
     }

File: java/server/test/org/openqa/selenium/grid/distributor/selector/DefaultSlotSelectorTest.java
Patch:
@@ -45,6 +45,7 @@
 import java.io.UncheckedIOException;
 import java.net.URI;
 import java.net.URISyntaxException;
+import java.time.Duration;
 import java.time.Instant;
 import java.util.Arrays;
 import java.util.Collections;
@@ -209,6 +210,7 @@ private NodeStatus createNode(List<Capabilities> stereotypes, int count, int cur
       count,
       ImmutableSet.copyOf(slots),
       UP,
+      Duration.ofSeconds(10),
       "4.0.0",
       ImmutableMap.of(
         "name", "Max OS X",

File: java/client/test/org/openqa/selenium/atoms/JavaScriptLoader.java
Patch:
@@ -34,8 +34,8 @@ private JavaScriptLoader() {}  // Utility class.
   static String loadResource(String resourcePath) throws IOException {
     URL resourceUrl = JavaScriptLoader.class.getResource(resourcePath);
     assumeThat(resourceUrl)
-      .isNotNull()
-      .as("Resource not found; are you running with `bazel test`? " + resourcePath);
+      .withFailMessage("Resource %s not found; are you running with `bazel test`? ", resourcePath)
+      .isNotNull();
     return Resources.toString(resourceUrl, UTF_8);
   }
 }

File: java/client/test/org/openqa/selenium/remote/RemoteWebDriverInitializationTest.java
Patch:
@@ -72,7 +72,7 @@ public void testQuitsIfStartSessionFails() {
   public void constructorShouldThrowIfExecutorIsNull() {
     assertThatExceptionOfType(IllegalArgumentException.class)
       .isThrownBy(() -> new RemoteWebDriver((CommandExecutor) null, new ImmutableCapabilities()))
-      .withMessage("RemoteWebDriver cannot work without a command executor");
+      .withMessage("Command executor must be set");
   }
 
   @Test
@@ -206,7 +206,8 @@ public void canPassClientConfig() throws MalformedURLException {
 
     CommandExecutor executor = new HttpCommandExecutor(
       emptyMap(),
-      ClientConfig.defaultConfig().readTimeout(Duration.ofSeconds(1)),
+      ClientConfig.defaultConfig()
+        .baseUrl(new URL("http://localhost:4444/")).readTimeout(Duration.ofSeconds(1)),
       factory);
 
     RemoteWebDriver driver = new RemoteWebDriver(executor, new ImmutableCapabilities());

File: java/client/src/org/openqa/selenium/firefox/Executable.java
Patch:
@@ -37,7 +37,7 @@ class Executable {
   private FirefoxBinary.Channel channel;
 
   public Executable(File userSpecifiedBinaryPath) {
-    Require.argument("Path to the firefox binary", userSpecifiedBinaryPath).isFile();
+    Require.argument("Path to the firefox binary", (Object) userSpecifiedBinaryPath).nonNull();
     binary = userSpecifiedBinaryPath;
   }
 

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -325,7 +325,7 @@ public void clean(File profileDir) {
     TemporaryFilesystem.getDefaultTmpFS().deleteTempDir(profileDir);
   }
 
-  public String toJson() throws IOException {
+  String toJson() throws IOException {
     File file = layoutOnDisk();
     try {
       return Zip.zip(file);

File: java/client/src/org/openqa/selenium/RetrySessionRequestException.java
Patch:
@@ -15,9 +15,7 @@
 // specific language governing permissions and limitations
 // under the License.
 
-package org.openqa.selenium.grid.distributor;
-
-import org.openqa.selenium.SessionNotCreatedException;
+package org.openqa.selenium;
 
 public class RetrySessionRequestException extends SessionNotCreatedException {
   public RetrySessionRequestException(String msg) {

File: java/server/src/org/openqa/selenium/grid/distributor/Distributor.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import org.openqa.selenium.Capabilities;
+import org.openqa.selenium.RetrySessionRequestException;
 import org.openqa.selenium.SessionNotCreatedException;
 import org.openqa.selenium.grid.data.CreateSessionRequest;
 import org.openqa.selenium.grid.data.CreateSessionResponse;

File: java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java
Patch:
@@ -26,6 +26,7 @@
 import org.openqa.selenium.Beta;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
+import org.openqa.selenium.RetrySessionRequestException;
 import org.openqa.selenium.SessionNotCreatedException;
 import org.openqa.selenium.concurrent.Regularly;
 import org.openqa.selenium.events.EventBus;
@@ -48,7 +49,6 @@
 import org.openqa.selenium.grid.data.Slot;
 import org.openqa.selenium.grid.data.SlotId;
 import org.openqa.selenium.grid.distributor.Distributor;
-import org.openqa.selenium.grid.distributor.RetrySessionRequestException;
 import org.openqa.selenium.grid.distributor.selector.DefaultSlotSelector;
 import org.openqa.selenium.grid.log.LoggingOptions;
 import org.openqa.selenium.grid.node.HealthCheck;

File: java/client/src/org/openqa/selenium/devtools/v86/V86Network.java
Patch:
@@ -47,7 +47,7 @@ public V86Network(DevTools devTools) {
 
   @Override
   protected Command<Void> setUserAgentOverride(UserAgent userAgent) {
-    return org.openqa.selenium.devtools.v89.network.Network.setUserAgentOverride(
+    return org.openqa.selenium.devtools.v86.network.Network.setUserAgentOverride(
       userAgent.userAgent(), userAgent.acceptLanguage(), userAgent.platform(), Optional.empty());
   }
 

File: java/client/src/org/openqa/selenium/devtools/v87/V87Network.java
Patch:
@@ -47,7 +47,7 @@ public V87Network(DevTools devTools) {
 
   @Override
   protected Command<Void> setUserAgentOverride(UserAgent userAgent) {
-    return org.openqa.selenium.devtools.v89.network.Network.setUserAgentOverride(
+    return org.openqa.selenium.devtools.v87.network.Network.setUserAgentOverride(
       userAgent.userAgent(), userAgent.acceptLanguage(), userAgent.platform(), Optional.empty());
   }
 

File: java/client/src/org/openqa/selenium/devtools/v88/V88Network.java
Patch:
@@ -47,7 +47,7 @@ public V88Network(DevTools devTools) {
 
   @Override
   protected Command<Void> setUserAgentOverride(UserAgent userAgent) {
-    return org.openqa.selenium.devtools.v89.network.Network.setUserAgentOverride(
+    return org.openqa.selenium.devtools.v88.network.Network.setUserAgentOverride(
       userAgent.userAgent(), userAgent.acceptLanguage(), userAgent.platform(), Optional.empty());
   }
 

File: java/client/src/org/openqa/selenium/remote/http/netty/NettyClient.java
Patch:
@@ -73,6 +73,7 @@ private AsyncHttpClient createHttpClient(ClientConfig config) {
         .setWebSocketMaxBufferSize(Integer.MAX_VALUE)
         .setWebSocketMaxFrameSize(Integer.MAX_VALUE)
         .setNettyTimer(TIMER)
+        .setRequestTimeout(toClampedInt(config.readTimeout().toMillis()))
         .setConnectTimeout(toClampedInt(config.connectionTimeout().toMillis()))
         .setReadTimeout(toClampedInt(config.readTimeout().toMillis()));
 

File: java/client/src/org/openqa/selenium/ie/InternetExplorerOptions.java
Patch:
@@ -92,8 +92,7 @@ public InternetExplorerOptions() {
 
   public InternetExplorerOptions(Capabilities source) {
     this();
-
-    merge(source);
+    source.getCapabilityNames().forEach(name -> setCapability(name, source.getCapability(name)));
   }
 
   @Override

File: java/client/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -93,7 +93,7 @@ public FirefoxOptions() {
 
     setCapability(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
     setAcceptInsecureCerts(true);
-    // setCapability("moz:debuggerAddress", true);
+    setCapability("moz:debuggerAddress", true);
   }
 
   public FirefoxOptions(Capabilities source) {

File: java/client/src/org/openqa/selenium/os/OsProcess.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.commons.exec.Executor;
 import org.apache.commons.exec.PumpStreamHandler;
 import org.openqa.selenium.Platform;
+import org.openqa.selenium.TimeoutException;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.io.CircularOutputStream;
@@ -169,7 +170,7 @@ public void waitFor(long timeout) throws InterruptedException {
       Thread.sleep(50);
     }
     if (timedOut) {
-      throw new InterruptedException(
+      throw new TimeoutException(
           String.format("Process timed out after waiting for %d ms.", timeout));
     }
 

File: java/client/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -93,7 +93,7 @@ public FirefoxOptions() {
 
     setCapability(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
     setAcceptInsecureCerts(true);
-    setCapability("moz:debuggerAddress", true);
+    // setCapability("moz:debuggerAddress", true);
   }
 
   public FirefoxOptions(Capabilities source) {

File: java/server/src/org/openqa/selenium/grid/server/NetworkOptions.java
Patch:
@@ -22,6 +22,7 @@
 import org.openqa.selenium.grid.config.Config;
 import org.openqa.selenium.grid.web.CheckContentTypeHeader;
 import org.openqa.selenium.grid.web.CheckOriginHeader;
+import org.openqa.selenium.grid.web.EnsureSpecCompliantResponseHeaders;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.remote.http.Filter;
 import org.openqa.selenium.remote.http.HttpClient;
@@ -52,6 +53,8 @@ public Filter getSpecComplianceChecks() {
     // Base case: we do nothing
     Filter toReturn = httpHandler -> httpHandler;
 
+    toReturn = toReturn.andThen(new EnsureSpecCompliantResponseHeaders());
+
     if (config.getBool(NETWORK_SECTION, "relax-checks").orElse(false)) {
       return toReturn;
     }

File: java/server/src/org/openqa/selenium/grid/web/EnsureSpecCompliantHeaders.java
Patch:
@@ -32,7 +32,9 @@ public EnsureSpecCompliantHeaders(Collection<String> allowedOriginHosts, Set<Str
     Require.nonNull("Allowed origins list", allowedOriginHosts);
     Require.nonNull("URLs to skip checks on", skipChecksOn);
 
-    filter = new CheckOriginHeader(allowedOriginHosts, skipChecksOn).andThen(new CheckContentTypeHeader(skipChecksOn));
+    filter = new CheckOriginHeader(allowedOriginHosts, skipChecksOn)
+      .andThen(new CheckContentTypeHeader(skipChecksOn))
+      .andThen(new EnsureSpecCompliantResponseHeaders());
   }
 
   @Override

File: java/client/test/org/openqa/selenium/ByTest.java
Patch:
@@ -118,8 +118,7 @@ public void ensureIdIsSerializedProperly() {
     Map<String, Object> blob = json.toType(json.toJson(by), MAP_TYPE);
 
     assertThat(blob.get("using")).isEqualTo("css selector");
-    assertThat(blob.get("value")).isEqualTo("#one #two");
-
+    assertThat(blob.get("value")).isEqualTo("#one\\ two");
   }
 
   private interface AllDriver extends SearchContext {

File: java/client/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -328,6 +328,7 @@ public FirefoxOptions merge(Capabilities capabilities) {
     FirefoxOptions newInstance = new FirefoxOptions();
     this.asMap().forEach(newInstance::setCapability);
     capabilities.asMap().forEach(newInstance::setCapability);
+    newInstance.mirror(this);
     if (capabilities instanceof FirefoxOptions) {
       newInstance.mirror((FirefoxOptions) capabilities);
     }

File: java/server/test/org/openqa/selenium/grid/node/local/LocalNodeTest.java
Patch:
@@ -182,6 +182,7 @@ public HttpResponse execute(HttpRequest req) {
       .add(caps, new TestSessionFactory(VerifyingHandler::new))
       .add(caps, new TestSessionFactory(VerifyingHandler::new))
       .add(caps, new TestSessionFactory(VerifyingHandler::new))
+      .maximumConcurrentSessions(2)
       .build();
 
     List<Callable<SessionId>> callables = new ArrayList<>();

File: java/server/src/org/openqa/selenium/remote/server/ActiveSessionFactory.java
Patch:
@@ -47,7 +47,6 @@
 import static org.openqa.selenium.remote.BrowserType.IE;
 import static org.openqa.selenium.remote.BrowserType.OPERA;
 import static org.openqa.selenium.remote.BrowserType.OPERA_BLINK;
-import static org.openqa.selenium.remote.BrowserType.PHANTOMJS;
 import static org.openqa.selenium.remote.BrowserType.SAFARI;
 import static org.openqa.selenium.remote.CapabilityType.BROWSER_NAME;
 
@@ -93,7 +92,6 @@ public ActiveSessionFactory(Tracer tracer) {
         .put(containsKey("se:ieOptions"), "org.openqa.selenium.ie.InternetExplorerDriverService")
         .put(browserName(OPERA), "org.openqa.selenium.opera.OperaDriverService")
         .put(browserName(OPERA_BLINK), "org.openqa.selenium.opera.OperaDriverService")
-        .put(browserName(PHANTOMJS), "org.openqa.selenium.phantomjs.PhantomJSDriverService")
         .put(browserName(SAFARI), "org.openqa.selenium.safari.SafariDriverService")
         .put(containsKey(Pattern.compile("^safari\\..*")), "org.openqa.selenium.safari.SafariDriverService")
         .build()

File: java/server/src/org/openqa/selenium/remote/server/DefaultDriverFactory.java
Patch:
@@ -27,7 +27,6 @@
 import static org.openqa.selenium.remote.BrowserType.IE;
 import static org.openqa.selenium.remote.BrowserType.OPERA;
 import static org.openqa.selenium.remote.BrowserType.OPERA_BLINK;
-import static org.openqa.selenium.remote.BrowserType.PHANTOMJS;
 import static org.openqa.selenium.remote.BrowserType.SAFARI;
 import static org.openqa.selenium.remote.CapabilityType.BROWSER_NAME;
 import static org.openqa.selenium.remote.CapabilityType.PLATFORM_NAME;
@@ -63,7 +62,6 @@ public class DefaultDriverFactory implements DriverFactory {
             .put(CHROME, "org.openqa.selenium.chrome.ChromeDriver")
             .put(OPERA, "com.opera.core.systems.OperaDriver")
             .put(OPERA_BLINK, "org.openqa.selenium.opera.OperaDriver")
-            .put(PHANTOMJS, "org.openqa.selenium.phantomjs.PhantomJSDriver")
             .put(HTMLUNIT, "org.openqa.selenium.htmlunit.HtmlUnitDriver")
             .build().entrySet().stream()
             .map(e -> createProvider(new ImmutableCapabilities(BROWSER_NAME, e.getKey()), e.getValue()))

File: java/client/src/org/openqa/selenium/remote/NewSessionPayload.java
Patch:
@@ -535,8 +535,7 @@ public String toString() {
     StringBuilder res = new StringBuilder();
     try {
       writeTo(res);
-    } catch (IOException e) {
-      e.printStackTrace();
+    } catch (IOException ignore) {
     }
     return res.toString();
   }

File: java/client/src/org/openqa/selenium/remote/tracing/AttributeKey.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.remote.tracing;
 
-import io.opentelemetry.api.trace.attributes.SemanticAttributes;
+import io.opentelemetry.semconv.trace.attributes.SemanticAttributes;
 
 public enum AttributeKey {
 

File: java/server/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -170,7 +170,7 @@ protected Handlers createHandlers(Config config) {
       distributor,
       queuer,
       serverOptions.getExternalUri(),
-      getFormattedVersion());
+      getServerVersion());
     HttpHandler readinessCheck = req -> {
       boolean ready = router.isReady() && bus.isReady();
       return new HttpResponse()
@@ -207,10 +207,10 @@ protected void execute(Config config) {
 
     Server<?> server = asServer(config).start();
 
-    LOG.info(String.format("Started Selenium Hub %s: %s", getFormattedVersion(), server.getUrl()));
+    LOG.info(String.format("Started Selenium Hub %s: %s", getServerVersion(), server.getUrl()));
   }
 
-  private String getFormattedVersion() {
+  private String getServerVersion() {
     BuildInfo info = new BuildInfo();
     return String.format("%s (revision %s)", info.getReleaseLabel(), info.getBuildRevision());
   }

File: java/server/src/org/openqa/selenium/grid/graphql/Grid.java
Patch:
@@ -84,7 +84,8 @@ public List<Node> getNodes() {
         status.getAvailability(),
         status.getMaxSessionCount(),
         capabilities,
-        sessions));
+        sessions,
+        status.getVersion()));
     }
 
     return toReturn.build();

File: java/server/src/org/openqa/selenium/grid/node/k8s/OneShotNode.java
Patch:
@@ -344,7 +344,8 @@ public NodeStatus getStatus() {
           driver == null ?
             Optional.empty() :
             Optional.of(new Session(sessionId, getUri(), stereotype, capabilities, Instant.now())))),
-      isDraining() ? DRAINING : UP);
+      isDraining() ? DRAINING : UP,
+      getNodeVersion());
   }
 
   @Override

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -483,7 +483,8 @@ public NodeStatus getStatus() {
       externalUri,
       maxSessionCount,
       slots,
-      isDraining() ? DRAINING : UP);
+      isDraining() ? DRAINING : UP,
+      getNodeVersion());
   }
 
   @Override

File: java/server/test/org/openqa/selenium/grid/data/NodeStatusTest.java
Patch:
@@ -53,7 +53,8 @@ public void ensureRoundTripWorks() throws URISyntaxException {
             stereotype,
             new ImmutableCapabilities("peas", "sausages"),
             Instant.now())))),
-      UP);
+      UP,
+      "4.0.0");
 
     Json json = new Json();
     String source = json.toJson(status);

File: java/server/test/org/openqa/selenium/grid/distributor/selector/DefaultSlotSelectorTest.java
Patch:
@@ -207,7 +207,8 @@ private NodeStatus createNode(List<Capabilities> stereotypes, int count, int cur
       uri,
       count,
       ImmutableSet.copyOf(slots),
-      UP);
+      UP,
+      "4.0.0");
   }
 
   private NodeStatus createNode(String... browsers) {

File: java/client/test/org/openqa/selenium/remote/http/FilterTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.openqa.selenium.testing.UnitTests;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -118,6 +119,6 @@ public void filtersShouldBeCalledInTheOrderAddedWithLastInCalledFirst() {
 
     handler.execute(new HttpRequest(GET, "/cheese"));
 
-    assertThat(ordered).isEqualTo(List.of("outer", "middle", "inner"));
+    assertThat(ordered).isEqualTo(Arrays.asList("outer", "middle", "inner"));
   }
 }

File: java/server/src/org/openqa/selenium/grid/sessionqueue/NewSessionQueue.java
Patch:
@@ -26,6 +26,7 @@
 
 import java.time.Duration;
 import java.time.Instant;
+import java.util.Map;
 import java.util.Optional;
 
 public abstract class NewSessionQueue implements HasReadyState {
@@ -50,6 +51,8 @@ public abstract class NewSessionQueue implements HasReadyState {
 
   public abstract int getQueueSize();
 
+  public abstract Map<String,Object> getQueueContents();
+
   public void addRequestHeaders(HttpRequest request, RequestId reqId) {
     long timestamp = Instant.now().getEpochSecond();
     request.addHeader(SESSIONREQUEST_TIMESTAMP_HEADER, Long.toString(timestamp));

File: java/server/src/org/openqa/selenium/grid/sessionqueue/NewSessionQueuer.java
Patch:
@@ -74,8 +74,8 @@ protected NewSessionQueuer(Tracer tracer, Secret registrationSecret) {
       get("/se/grid/newsessionqueuer/session/{requestId}")
         .to(params -> new RemoveFromSessionQueue(tracer, this, requestIdFrom(params)))
         .with(requiresSecret),
-      get("/se/grid/newsessionqueuer/queue/size")
-        .to(() -> new GetNewSessionQueueSize(tracer, this)),
+      get("/se/grid/newsessionqueuer/queue")
+        .to(() -> new GetSessionQueue(tracer, this)),
       delete("/se/grid/newsessionqueuer/queue")
         .to(() -> new ClearSessionQueue(tracer, this))
         .with(requiresSecret));
@@ -125,7 +125,7 @@ public void validateSessionRequest(HttpRequest request) {
 
   public abstract int clearQueue();
 
-  public abstract int getQueueSize();
+  public abstract Map<String, Object> getQueueContents();
 
   @Override
   public boolean matches(HttpRequest req) {

File: java/server/src/org/openqa/selenium/grid/sessionqueue/local/LocalNewSessionQueuer.java
Patch:
@@ -34,6 +34,7 @@
 import org.openqa.selenium.remote.tracing.Tracer;
 
 import java.time.Duration;
+import java.util.Map;
 import java.util.Optional;
 
 public class LocalNewSessionQueuer extends NewSessionQueuer {
@@ -92,8 +93,8 @@ public int clearQueue() {
   }
 
   @Override
-  public int getQueueSize() {
-    return sessionRequests.getQueueSize();
+  public Map<String, Object> getQueueContents() {
+    return sessionRequests.getQueueContents();
   }
 
   @Override

File: java/client/test/org/openqa/selenium/RequireTest.java
Patch:
@@ -159,12 +159,12 @@ public void canCheckIntegersWithMessages() {
   @Test
   public void canCheckIntegerArgumentWithCheckerObject() {
     assertThatExceptionOfType(IllegalArgumentException.class)
-        .isThrownBy(() -> Require.argument((Integer) null).greaterThan(5, "It should be longer"))
+        .isThrownBy(() -> Require.argument("Timeout", (Integer) null).greaterThan(5, "It should be longer"))
         .withMessage("Timeout must be set");
     assertThatExceptionOfType(IllegalArgumentException.class)
-        .isThrownBy(() -> Require.argument( 3).greaterThan(5, "It should be longer"))
+        .isThrownBy(() -> Require.argument("Timeout", 3).greaterThan(5, "It should be longer"))
         .withMessage("It should be longer");
-    assertThat(Require.argument(10).greaterThan(5, "It should be longer")).isEqualTo(10);
+    assertThat(Require.argument("Timeout", 10).greaterThan(5, "It should be longer")).isEqualTo(10);
   }
 
   @Test

File: java/server/src/org/openqa/selenium/cli/WrappedPrintWriter.java
Patch:
@@ -37,7 +37,7 @@ public WrappedPrintWriter(OutputStream out, int lineLength, int indentBy) {
 
   public WrappedPrintWriter(Writer out, int lineLength, int indentBy) {
     super(out);
-    this.lineLength = Require.argument(lineLength).greaterThan(9, "Lines must be 10 or more characters");
+    this.lineLength = Require.argument("Line length", lineLength).greaterThan(9, "Lines must be 10 or more characters");
     this.indentBy = Require.nonNegative("An indent", indentBy);
 
   }

File: java/client/test/org/openqa/selenium/RequireTest.java
Patch:
@@ -159,12 +159,12 @@ public void canCheckIntegersWithMessages() {
   @Test
   public void canCheckIntegerArgumentWithCheckerObject() {
     assertThatExceptionOfType(IllegalArgumentException.class)
-        .isThrownBy(() -> Require.argument("Timeout", (Integer) null).greaterThan(5, "It should be longer"))
+        .isThrownBy(() -> Require.argument((Integer) null).greaterThan(5, "It should be longer"))
         .withMessage("Timeout must be set");
     assertThatExceptionOfType(IllegalArgumentException.class)
-        .isThrownBy(() -> Require.argument("Timeout", 3).greaterThan(5, "It should be longer"))
+        .isThrownBy(() -> Require.argument( 3).greaterThan(5, "It should be longer"))
         .withMessage("It should be longer");
-    assertThat(Require.argument("Timeout", 10).greaterThan(5, "It should be longer")).isEqualTo(10);
+    assertThat(Require.argument(10).greaterThan(5, "It should be longer")).isEqualTo(10);
   }
 
   @Test

File: java/server/src/org/openqa/selenium/cli/WrappedPrintWriter.java
Patch:
@@ -37,7 +37,7 @@ public WrappedPrintWriter(OutputStream out, int lineLength, int indentBy) {
 
   public WrappedPrintWriter(Writer out, int lineLength, int indentBy) {
     super(out);
-    this.lineLength = Require.argument("Line length", lineLength).greaterThan(9, "Lines must be 10 or more characters");
+    this.lineLength = Require.argument(lineLength).greaterThan(9, "Lines must be 10 or more characters");
     this.indentBy = Require.nonNegative("An indent", indentBy);
 
   }

File: java/server/src/org/openqa/selenium/grid/node/httpd/NodeFlags.java
Patch:
@@ -82,11 +82,11 @@ public class NodeFlags implements HasRoles {
     description = "List of configured drivers a Node supports. " +
                   "It is recommended to provide this type of configuration through a toml config " +
                   "file to improve readability." +
-                  "--drivers-configuration name=\"Firefox Nightly\" " +
+                  "--drivers-configuration name=\"Firefox Nightly\" max-sessions=2 " +
                   "stereotype='{\"browserName\": \"firefox\", \"browserVersion\": \"86\", " +
                   "\"moz:firefoxOptions\": " +
                   "{\"binary\":\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin\"}}'",
-    arity = 2,
+    arity = 3,
     variableArity = true,
     splitter = NonSplittingSplitter.class)
   @ConfigValue(
@@ -95,6 +95,7 @@ public class NodeFlags implements HasRoles {
     prefixed = true,
     example = "\n" +
               "name = \"Firefox Nightly\"\n" +
+              "max-sessions = 2\n" +
               "stereotype = \"{\"browserName\": \"firefox\", \"browserVersion\": \"86\", " +
               "\"moz:firefoxOptions\": " +
               "{\"binary\":\"/Applications/Firefox Nightly.app/Contents/MacOS/firefox-bin\"}}\"")

File: java/client/test/org/openqa/selenium/json/JsonOutputTest.java
Patch:
@@ -690,7 +690,7 @@ public Optional<String> getNoValue() {
   }
 
   @Test
-  public void onRequsetShouldNotWriteClassNamesIntoJson() {
+  public void onRequestShouldNotWriteClassNamesIntoJson() {
     class WithClassName {
       public String getCheese() {
         return "gouda";

File: java/server/src/org/openqa/selenium/grid/log/LoggingOptions.java
Patch:
@@ -166,7 +166,7 @@ public CompletableResultCode export(Collection<SpanData> spans) {
             map.put("attributes", attributeMap);
             String jsonString = getJsonString(map);
             if (status.isOk()) {
-              LOG.log(Level.INFO, jsonString);
+              LOG.log(Level.FINE, jsonString);
             } else {
               LOG.log(Level.WARNING, jsonString);
             }
@@ -188,7 +188,7 @@ public CompletableResultCode shutdown() {
     }).build());
 
     // The Jaeger exporter doesn't yet have a `TracerFactoryProvider`, so we
-    //shall look up the class using reflection, and beg for forgiveness
+    // shall look up the class using reflection, and beg for forgiveness
     // later.
     Optional<SpanExporter> maybeJaeger = JaegerTracing.findJaegerExporter();
     maybeJaeger.ifPresent(

File: java/server/src/org/openqa/selenium/grid/sessionqueue/NewSessionQueue.java
Patch:
@@ -48,6 +48,8 @@ public abstract class NewSessionQueue implements HasReadyState {
 
   public abstract int clear();
 
+  public abstract int getQueueSize();
+
   public void addRequestHeaders(HttpRequest request, RequestId reqId) {
     long timestamp = Instant.now().getEpochSecond();
     request.addHeader(SESSIONREQUEST_TIMESTAMP_HEADER, Long.toString(timestamp));

File: java/server/src/org/openqa/selenium/grid/sessionqueue/local/LocalNewSessionQueue.java
Patch:
@@ -88,6 +88,7 @@ public boolean isReady() {
     return bus.isReady();
   }
 
+  @Override
   @ManagedAttribute(name = "NewSessionQueueSize")
   public int getQueueSize() {
     Lock readLock = lock.readLock();

File: java/server/src/org/openqa/selenium/grid/sessionqueue/AddBackToSessionQueue.java
Patch:
@@ -55,8 +55,8 @@ public HttpResponse execute(HttpRequest req) {
 
       span.setAttribute("request.retry", value);
 
-      HttpResponse response = new HttpResponse().setContent(
-          asJson(ImmutableMap.of("value", value)));
+      HttpResponse response = new HttpResponse()
+        .setContent(asJson(ImmutableMap.of("value", value)));
 
       HTTP_RESPONSE.accept(span, response);
 

File: java/server/src/org/openqa/selenium/grid/sessionqueue/RemoveFromSessionQueue.java
Patch:
@@ -56,7 +56,7 @@ public HttpResponse execute(HttpRequest req) {
         HttpRequest request = sessionRequest.get();
         response.setContent(request.getContent());
         response.setHeader(NewSessionQueue.SESSIONREQUEST_TIMESTAMP_HEADER,
-                           request.getHeader(NewSessionQueue.SESSIONREQUEST_TIMESTAMP_HEADER));
+          request.getHeader(NewSessionQueue.SESSIONREQUEST_TIMESTAMP_HEADER));
       } else {
         response.setStatus(HTTP_NO_CONTENT);
       }

File: java/server/src/org/openqa/selenium/grid/sessionqueue/httpd/NewSessionQueuerServer.java
Patch:
@@ -49,8 +49,8 @@
 public class NewSessionQueuerServer extends TemplateGridServerCommand {
 
   private static final Logger LOG = Logger.getLogger(NewSessionQueuerServer.class.getName());
-  private static final String
-      LOCAL_NEWSESSION_QUEUER = "org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueuer";
+  private static final String LOCAL_NEWSESSION_QUEUER =
+    "org.openqa.selenium.grid.sessionqueue.local.LocalNewSessionQueuer";
 
   @Override
   public String getName() {

File: java/server/src/org/openqa/selenium/grid/sessionqueue/remote/RemoteNewSessionQueuer.java
Patch:
@@ -93,7 +93,7 @@ public HttpResponse addToQueue(HttpRequest request) {
   @Override
   public boolean retryAddToQueue(HttpRequest request, RequestId reqId) {
     HttpRequest upstream =
-        new HttpRequest(POST, "/se/grid/newsessionqueuer/session/retry/" + reqId.toString());
+      new HttpRequest(POST, "/se/grid/newsessionqueuer/session/retry/" + reqId.toString());
     HttpTracing.inject(tracer, tracer.getCurrentContext(), upstream);
     upstream.setContent(request.getContent());
     upstream.setHeader(timestampHeader, request.getHeader(timestampHeader));
@@ -105,7 +105,7 @@ public boolean retryAddToQueue(HttpRequest request, RequestId reqId) {
   @Override
   public Optional<HttpRequest> remove(RequestId reqId) {
     HttpRequest upstream =
-        new HttpRequest(GET, "/se/grid/newsessionqueuer/session/" + reqId.toString());
+      new HttpRequest(GET, "/se/grid/newsessionqueuer/session/" + reqId.toString());
     HttpTracing.inject(tracer, tracer.getCurrentContext(), upstream);
     HttpResponse response = client.with(addSecret).execute(upstream);
 

File: java/server/src/org/openqa/selenium/grid/node/httpd/NodeFlags.java
Patch:
@@ -44,7 +44,7 @@ public class NodeFlags implements HasRoles {
   @Parameter(
       names = {"--detect-drivers"}, arity = 1,
       description = "Autodetect which drivers are available on the current system, " +
-                    "and add them to the node. Defaults to true.")
+                    "and add them to the Node. Defaults to true.")
   @ConfigValue(section = "node", name = "detect-drivers", example = "true")
   public Boolean autoconfigure;
 
@@ -59,8 +59,8 @@ public class NodeFlags implements HasRoles {
     names = {"--driver-factory"},
     description = "Mapping of fully qualified class name to a browser configuration that this " +
                   "matches against. " +
-                  "`--driver-factory org.openqa.selenium.example.LynxDriverFactory " +
-                  "'{\"browserName\": \"lynx\"}')",
+                  "--driver-factory org.openqa.selenium.example.LynxDriverFactory " +
+                  "'{\"browserName\": \"lynx\"}'",
     arity = 2,
     variableArity = true,
     splitter = NonSplittingSplitter.class)

File: java/server/src/org/openqa/selenium/grid/docker/DockerFlags.java
Patch:
@@ -21,6 +21,7 @@
 import com.google.auto.service.AutoService;
 import org.openqa.selenium.grid.config.ConfigValue;
 import org.openqa.selenium.grid.config.HasRoles;
+import org.openqa.selenium.grid.config.NonSplittingSplitter;
 import org.openqa.selenium.grid.config.Role;
 
 import java.net.URL;
@@ -52,7 +53,8 @@ public class DockerFlags implements HasRoles {
       description = "Docker configs which map image name to stereotype capabilities (example " +
                     "`-D selenium/standalone-firefox:latest '{\"browserName\": \"firefox\"}')",
       arity = 2,
-      variableArity = true)
+      variableArity = true,
+      splitter = NonSplittingSplitter.class)
   @ConfigValue(
     section = "docker",
     name = "configs",

File: java/server/src/org/openqa/selenium/grid/distributor/remote/RemoteDistributor.java
Patch:
@@ -58,7 +58,7 @@ public RemoteDistributor(Tracer tracer, HttpClient.Factory factory, URL url, Sec
     super(
       tracer,
       factory,
-      (caps, nodes) -> {throw new UnsupportedOperationException("host selection");},
+      (caps, nodes) -> {throw new UnsupportedOperationException("Slot selector");},
       new NullSessionMap(tracer),
       registrationSecret);
     this.client = factory.createClient(url);

File: java/server/src/org/openqa/selenium/grid/data/SlotMatcher.java
Patch:
@@ -25,5 +25,5 @@
  */
 @FunctionalInterface
 public interface SlotMatcher {
-  boolean matches(Capabilities capabilities, Capabilities stereotype);
+  boolean matches(Capabilities stereotype, Capabilities capabilities);
 }

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNodeFactory.java
Patch:
@@ -92,7 +92,7 @@ private static Collection<SessionFactory> createSessionFactory(
           tracer,
           clientFactory,
           stereotype,
-          capabilities -> slotMatcher.matches(capabilities, stereotype),
+          capabilities -> slotMatcher.matches(stereotype, capabilities),
           driverServiceBuilder));
       });
 

File: java/client/src/org/openqa/selenium/devtools/CdpClientGenerator.java
Patch:
@@ -769,6 +769,9 @@ public TypeDeclaration<?> toTypeDeclaration() {
       if (type.equals("object")) {
         toJson.setType("java.util.Map<String, Object>");
         toJson.getBody().get().addStatement(String.format("return %s;", propertyName));
+      } else if (type.equals("integer")) {
+        toJson.setType(Integer.class);
+        toJson.getBody().get().addStatement(String.format("return %s;", propertyName));
       } else {
         toJson.setType(String.class);
         toJson.getBody().get().addStatement(String.format("return %s.toString();", propertyName));

File: java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java
Patch:
@@ -1505,7 +1505,7 @@ public String toString() {
    * An expectation for String value from javascript
    *
    * @param javaScript as executable js line
-   * @return true once js return string
+   * @return object once javaScript executes without errors
    */
   public static ExpectedCondition<Object> jsReturnsValue(final String javaScript) {
     return new ExpectedCondition<Object>() {

File: java/server/src/org/openqa/selenium/grid/distributor/httpd/DistributorServer.java
Patch:
@@ -52,7 +52,6 @@
 public class DistributorServer extends TemplateGridServerCommand {
 
   private static final Logger LOG = Logger.getLogger(DistributorServer.class.getName());
-  private static final String LOCAL_DISTRIBUTOR_SERVER = "org.openqa.selenium.grid.distributor.local.LocalDistributor";
 
   @Override
   public String getName() {
@@ -88,7 +87,7 @@ protected Config getDefaultConfig() {
   protected Handlers createHandlers(Config config) {
     DistributorOptions distributorOptions = new DistributorOptions(config);
 
-    Distributor distributor = distributorOptions.getDistributor(LOCAL_DISTRIBUTOR_SERVER);
+    Distributor distributor = distributorOptions.getDistributor();
 
     HttpHandler readinessCheck = req -> {
       boolean ready = distributor.isReady();

File: java/client/test/org/openqa/selenium/support/locators/RelativeLocatorTest.java
Patch:
@@ -40,7 +40,7 @@ public void shouldBeAbleToFindElementsAboveAnother() {
     List<WebElement> elements = driver.findElements(withTagName("p").above(lowest));
     List<String> ids = elements.stream().map(e -> e.getAttribute("id")).collect(Collectors.toList());
 
-    assertThat(ids).isEqualTo(List.of("mid", "above"));
+    assertThat(ids).containsExactly("mid", "above");
   }
 
   @Test
@@ -50,7 +50,7 @@ public void shouldBeAbleToCombineFilters() {
     List<WebElement> seen = driver.findElements(withTagName("td").above(By.id("center")).toRightOf(By.id("second")));
 
     List<String> ids = seen.stream().map(e -> e.getAttribute("id")).collect(Collectors.toList());
-    assertThat(ids).isEqualTo(singletonList("third"));
+    assertThat(ids).containsExactly("third");
   }
 
   @Test
@@ -69,6 +69,6 @@ public void exerciseNearLocator() {
     // 5-8. Diagonally close (pythagorus sorting, with top row first
     //    because of DOM insertion order)
     List<String> ids = seen.stream().map(e -> e.getAttribute("id")).collect(Collectors.toList());
-    assertThat(ids).isEqualTo(List.of("second", "eighth", "fourth", "sixth", "first", "third", "seventh", "ninth"));
+    assertThat(ids).containsExactly("second", "eighth", "fourth", "sixth", "first", "third", "seventh", "ninth");
   }
 }

File: java/server/test/org/openqa/selenium/grid/router/EndToEndTest.java
Patch:
@@ -102,19 +102,21 @@ public static Collection<Supplier<TestData>> buildGrids() {
   public Supplier<TestData> values;
 
   private Server<?> server;
+  private TearDownFixture[] fixtures;
 
   private HttpClient.Factory clientFactory;
 
   @Before
   public void setFields() {
     TestData data = values.get();
     this.server = data.server;
+    this.fixtures = data.fixtures;
     this.clientFactory = HttpClient.Factory.createDefault();
   }
 
   @After
   public void stopServers() {
-    Safely.safelyCall(values.get().fixtures);
+    Safely.safelyCall(this.fixtures);
   }
 
 

File: java/server/src/org/openqa/selenium/grid/log/LoggingFlags.java
Patch:
@@ -59,7 +59,7 @@ public class LoggingFlags implements HasRoles {
     "Log levels are described here https://docs.oracle.com/javase/7/docs/api/java/util/logging/Level.html ",
     names = "--log-level", arity = 1)
   @ConfigValue(section = "logging", name = "log-level", example = "INFO")
-  private String logLevel = Level.INFO.getName();
+  private String logLevel;
 
   @Override
   public Set<Role> getRoles() {

File: java/client/src/org/openqa/selenium/remote/tracing/AttributeKey.java
Patch:
@@ -42,6 +42,8 @@ public enum AttributeKey {
   HTTP_SCHEME(SemanticAttributes.HTTP_SCHEME.getKey()),
   HTTP_FLAVOR(SemanticAttributes.HTTP_FLAVOR.getKey()),
 
+  ERROR("error"),
+
   LOGGER_CLASS("logger"),
 
   DRIVER_RESPONSE("driver.response"),

File: java/client/src/org/openqa/selenium/remote/http/ClientConfig.java
Patch:
@@ -52,8 +52,8 @@ private ClientConfig(
   public static ClientConfig defaultConfig() {
     return new ClientConfig(
       null,
-      Duration.ofMinutes(2),
-      Duration.ofHours(3),
+      Duration.ofSeconds(10),
+      Duration.ofMinutes(3),
       new AddSeleniumUserAgent(),
       null);
   }

File: java/server/src/org/openqa/selenium/grid/config/ClassCreation.java
Patch:
@@ -14,8 +14,8 @@ static <X> X callCreateMethod(String clazz, Class<X> typeOfClass, Config configT
     try {
       // Use the context class loader since this is what the `--ext`
       // flag modifies.
-      Class<?> сlassClazz = Class.forName(clazz, true, Thread.currentThread().getContextClassLoader());
-      Method create = сlassClazz.getMethod("create", org.openqa.selenium.grid.config.Config.class);
+      Class<?> classClazz = Class.forName(clazz, true, Thread.currentThread().getContextClassLoader());
+      Method create = classClazz.getMethod("create", org.openqa.selenium.grid.config.Config.class);
 
       if (!Modifier.isStatic(create.getModifiers())) {
         throw new IllegalArgumentException(String.format(

File: java/server/test/org/openqa/selenium/grid/node/config/NodeOptionsTest.java
Patch:
@@ -156,7 +156,7 @@ public void canConfigureNodeWithoutDriverDetection() {
   }
 
   @Test
-  public void doNotDetectDriversByDefault() {
+  public void detectDriversByDefault() {
     Config config = new MapConfig(emptyMap());
 
     List<WebDriverInfo> reported = new ArrayList<>();
@@ -165,7 +165,7 @@ public void doNotDetectDriversByDefault() {
       return Collections.emptySet();
     });
 
-    assertThat(reported).isEmpty();
+    assertThat(reported).isNotEmpty();
   }
 
   @Test

File: java/server/src/org/openqa/selenium/grid/node/httpd/NodeFlags.java
Patch:
@@ -38,7 +38,7 @@ public class NodeFlags implements HasRoles {
     names = "--max-sessions",
     description = "Maximum number of concurrent sessions.")
   @ConfigValue(section = "node", name = "max-concurrent-sessions", example = "8")
-  public int maxSessions = Runtime.getRuntime().availableProcessors();
+  public int maxSessions;
 
   @Parameter(
       names = {"--detect-drivers"}, arity = 1,

File: java/client/src/org/openqa/selenium/json/JsonType.java
Patch:
@@ -28,5 +28,4 @@ public enum JsonType {
   END_COLLECTION,
   STRING,
   END
-  ;
 }

File: java/client/src/org/openqa/selenium/json/PropertySetting.java
Patch:
@@ -20,5 +20,4 @@
 public enum PropertySetting {
   BY_NAME,
   BY_FIELD
-  ;
 }

File: java/client/src/org/openqa/selenium/net/UrlChecker.java
Patch:
@@ -21,7 +21,6 @@
 import java.net.HttpURLConnection;
 import java.net.URL;
 import java.util.Arrays;
-import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;

File: java/client/src/org/openqa/selenium/remote/codec/w3c/W3CHttpCommandCodec.java
Patch:
@@ -435,7 +435,7 @@ private Map<String, String> asElement(Object id) {
   private String cssEscape(String using) {
     using = using.replaceAll("([\\s'\"\\\\#.:;,!?+<>=~*^$|%&@`{}\\-\\/\\[\\]\\(\\)])", "\\\\$1");
     if (using.length() > 0 && Character.isDigit(using.charAt(0))) {
-      using = "\\" + Integer.toString(30 + Integer.parseInt(using.substring(0,1))) + " " + using.substring(1);
+      using = "\\" + (30 + Integer.parseInt(using.substring(0,1))) + " " + using.substring(1);
     }
     return using;
   }

File: java/client/src/org/openqa/selenium/remote/tracing/Span.java
Patch:
@@ -46,7 +46,7 @@ enum Kind {
     // The nice name is the name expected in an OT trace.
     private final String niceName;
 
-    private Kind(String niceName) {
+    Kind(String niceName) {
       this.niceName = niceName;
     }
 

File: java/client/test/org/openqa/selenium/ProxySettingTest.java
Patch:
@@ -53,6 +53,7 @@
 import java.util.Map;
 
 import static java.nio.charset.StandardCharsets.US_ASCII;
+import static java.util.Collections.singletonMap;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.openqa.selenium.remote.CapabilityType.PROXY;
 import static org.openqa.selenium.testing.drivers.Browser.CHROME;
@@ -183,7 +184,8 @@ private Server<?> createPacfileServer(final String pacFileContents) {
 
   private Server<?> createServer(HttpHandler handler) {
     Server<?> server = new JreServer(
-      new BaseServerOptions(new MapConfig(Map.of("server", Map.of("port", PortProber.findFreePort())))),
+      new BaseServerOptions(new MapConfig(
+        singletonMap("server", singletonMap("port", PortProber.findFreePort())))),
       handler)
       .start();
 

File: java/server/src/org/openqa/selenium/grid/web/ResourceHandler.java
Patch:
@@ -187,7 +187,7 @@ private String mediaType(String uri) {
         break;
 
       default:
-        type = HTML_UTF_8;
+        type = MediaType.create("text", "html");
         break;
     }
 

File: java/client/test/org/openqa/selenium/testing/IgnoreComparator.java
Patch:
@@ -48,7 +48,6 @@ public boolean shouldIgnore(Ignore ignore) {
   private boolean shouldIgnore(Stream<Ignore> ignoreList) {
     return ignoreList.anyMatch(
       driver -> (ignored.contains(driver.value()) || driver.value() == Browser.ALL)
-                && (!driver.travis() || TestUtilities.isOnTravis())
                 && ((!driver.travis() || TestUtilities.isOnTravis())
                     || (!driver.gitHubActions() || TestUtilities.isOnGitHubActions()))
                 && isOpen(driver.issue()));

File: java/client/test/org/openqa/selenium/testing/IgnoreComparator.java
Patch:
@@ -49,7 +49,8 @@ private boolean shouldIgnore(Stream<Ignore> ignoreList) {
     return ignoreList.anyMatch(
       driver -> (ignored.contains(driver.value()) || driver.value() == Browser.ALL)
                 && (!driver.travis() || TestUtilities.isOnTravis())
-                && (!driver.gitHubActions() || TestUtilities.isOnGitHubActions())
+                && ((!driver.travis() || TestUtilities.isOnTravis())
+                    || (!driver.gitHubActions() || TestUtilities.isOnGitHubActions()))
                 && isOpen(driver.issue()));
   }
 

File: java/client/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -97,7 +97,7 @@ public FirefoxOptions() {
 
   public FirefoxOptions(Capabilities source) {
     // We need to initialize all our own fields before calling.
-    super();
+    this();
     source.asMap().forEach((key, value)-> {
       if (value != null) {
         setCapability(key, value);

File: java/client/test/org/openqa/selenium/testing/drivers/RemoteSupplier.java
Patch:
@@ -62,7 +62,7 @@ public WebDriver get() {
     return driver;
   }
 
-  private synchronized  void startServer() {
+  private synchronized void startServer() {
     if (started) {
       return;
     }

File: java/client/src/org/openqa/selenium/Cookie.java
Patch:
@@ -21,6 +21,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.Map;
+import java.util.Objects;
 import java.util.TreeMap;
 
 public class Cookie implements Serializable {
@@ -269,7 +270,7 @@ public boolean equals(Object o) {
     if (!name.equals(cookie.name)) {
       return false;
     }
-    return !(value != null ? !value.equals(cookie.value) : cookie.value != null);
+    return Objects.equals(value, cookie.value);
   }
 
   @Override

File: java/client/src/org/openqa/selenium/devtools/CdpClientGenerator.java
Patch:
@@ -936,7 +936,7 @@ public TypeDeclaration<?> toTypeDeclaration() {
       ClassOrInterfaceDeclaration classDecl = new ClassOrInterfaceDeclaration().setName(capitalize(name));
 
       properties.stream().filter(property -> property.type instanceof EnumType).forEach(
-          property -> classDecl.addMember(((EnumType) property.type).toTypeDeclaration()));
+          property -> classDecl.addMember(property.type.toTypeDeclaration()));
 
       properties.forEach(property -> classDecl.addField(
           property.getJavaType(), property.getFieldName()).setPrivate(true).setFinal(true));

File: java/client/src/org/openqa/selenium/devtools/events/CdpEventTypes.java
Patch:
@@ -101,7 +101,7 @@ public void initializeListener(HasLogEvents loggable) {
         ((JavascriptExecutor) driver).executeScript(script);
 
         tools.getDomains().javascript().addBindingCalledListener(
-          (Consumer<String>) json -> {
+          json -> {
             Map<String, Object> values = JSON.toType(json, MAP_TYPE);
             String id = (String) values.get("target");
 

File: java/client/src/org/openqa/selenium/devtools/idealized/Javascript.java
Patch:
@@ -42,9 +42,7 @@ public void disable() {
     devtools.send(disableRuntime());
     devtools.send(disablePage());
 
-    pinnedScripts.values().forEach(id -> {
-      removeScriptToEvaluateOnNewDocument(id.getActualId());
-    });
+    pinnedScripts.values().forEach(id -> removeScriptToEvaluateOnNewDocument(id.getActualId()));
 
     pinnedScripts.clear();
   }

File: java/client/src/org/openqa/selenium/devtools/idealized/Network.java
Patch:
@@ -192,9 +192,7 @@ protected HttpRequest createHttpRequest(
     Optional<String> postData) {
     HttpRequest req = new HttpRequest(convertFromCdpHttpMethod(cdpMethod), url);
     headers.forEach((key, value) -> req.addHeader(key, String.valueOf(value)));
-    postData.ifPresent(data -> {
-      req.setContent(Contents.utf8String(data));
-    });
+    postData.ifPresent(data -> req.setContent(Contents.utf8String(data)));
 
     return req;
   }

File: java/client/src/org/openqa/selenium/firefox/FileExtension.java
Patch:
@@ -194,7 +194,7 @@ public Iterator<String> getPrefixes(String uri) {
 
       Node idNode = (Node) xpath.compile("//em:id").evaluate(doc, XPathConstants.NODE);
 
-      String id = null;
+      String id;
       if (idNode == null) {
         Node descriptionNode =
             (Node) xpath.compile("//RDF:Description").evaluate(doc, XPathConstants.NODE);

File: java/client/src/org/openqa/selenium/net/DefaultNetworkInterfaceProvider.java
Patch:
@@ -43,7 +43,7 @@ public Iterable<NetworkInterface> getNetworkInterfaces() {
   }
 
   public DefaultNetworkInterfaceProvider() {
-    Enumeration<java.net.NetworkInterface> interfaces = null;
+    Enumeration<java.net.NetworkInterface> interfaces;
     try {
       interfaces = java.net.NetworkInterface.getNetworkInterfaces();
     } catch (SocketException e) {

File: java/client/src/org/openqa/selenium/net/UrlChecker.java
Patch:
@@ -58,7 +58,7 @@ public void waitUntilAvailable(long timeout, TimeUnit unit, final URL... urls)
     long start = System.nanoTime();
     log.fine("Waiting for " + Arrays.toString(urls));
     try {
-      Future<Void> callback = EXECUTOR.submit((Callable<Void>) () -> {
+      Future<Void> callback = EXECUTOR.submit(() -> {
         HttpURLConnection connection = null;
 
         long sleepMillis = MIN_POLL_INTERVAL_MS;
@@ -103,7 +103,7 @@ public void waitUntilUnavailable(long timeout, TimeUnit unit, final URL url)
     long start = System.nanoTime();
     log.fine("Waiting for " + url);
     try {
-      Future<Void> callback = EXECUTOR.submit((Callable<Void>) () -> {
+      Future<Void> callback = EXECUTOR.submit(() -> {
         HttpURLConnection connection = null;
 
         long sleepMillis = MIN_POLL_INTERVAL_MS;

File: java/client/src/org/openqa/selenium/remote/NewSessionPayload.java
Patch:
@@ -403,7 +403,7 @@ private Stream<Map<String, Object>> getW3C() throws IOException {
       if (alwaysMatch == null) {
         alwaysMatch = ImmutableMap.of();
       }
-      Map<String, Object> always = alwaysMatch; // Keep the comoiler happy.
+      Map<String, Object> always = alwaysMatch; // Keep the compiler happy.
       if (firsts == null) {
         firsts = ImmutableList.of(ImmutableMap.of());
       }

File: java/client/src/org/openqa/selenium/remote/html5/RemoteLocationContext.java
Patch:
@@ -50,7 +50,7 @@ private Double castToDouble(Number number) {
     if (number instanceof Double) {
       return (Double) number;
     } else if (number instanceof Long) {
-      return ((Long) number).doubleValue();
+      return number.doubleValue();
     } else {
       throw new RuntimeException("Can't convert to double: " + number);
     }

File: java/client/src/org/openqa/selenium/support/ThreadGuard.java
Patch:
@@ -61,7 +61,7 @@ private static Class<?>[] getInterfaces(Object target) {
       interfaces.addAll(Arrays.asList(base.getInterfaces()));
       base = base.getSuperclass();
     }
-    return interfaces.toArray(new Class[interfaces.size()]);
+    return interfaces.toArray(new Class[0]);
 
   }
 

File: java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java
Patch:
@@ -127,7 +127,7 @@ private Class<?>[] extractInterfaces(Object object) {
     }
     extractInterfaces(allInterfaces, object.getClass());
 
-    return allInterfaces.toArray(new Class<?>[allInterfaces.size()]);
+    return allInterfaces.toArray(new Class<?>[0]);
   }
 
   private void extractInterfaces(Set<Class<?>> addTo, Class<?> clazz) {

File: java/client/src/org/openqa/selenium/support/pagefactory/AjaxElementLocator.java
Patch:
@@ -41,7 +41,7 @@ public class AjaxElementLocator extends DefaultElementLocator {
   private final Clock clock;
 
   /**
-   * Use this constructor in order to process custom annotaions.
+   * Use this constructor in order to process custom annotations.
    *
    * @param context The context to use when finding the element
    * @param timeOutInSeconds How long to wait for the element to appear. Measured in seconds.

File: java/client/src/org/openqa/selenium/json/UuidCoercer.java
Patch:
@@ -43,7 +43,7 @@ public BiFunction<JsonInput, PropertySetting, UUID> apply(Type type) {
           break;
 
         default:
-          throw new JsonException("Unable to coerce type to URL: " + jsonInput.peek());
+          throw new JsonException("Unable to coerce type to UUID: " + jsonInput.peek());
       }
 
       return UUID.fromString(toCoerce);

File: java/server/src/org/openqa/selenium/docker/internal/Reference.java
Patch:
@@ -38,7 +38,7 @@ public class Reference {
   private static final String DEFAULT_TAG = "latest";
 
   // Capturing groups used in patterns below
-  private static final String DOMAIN = "([\\w\\d-_.]+?(:(\\d+))?";
+  private static final String DOMAIN = "([\\w\\d-_.]+?(:(\\d+))?)";
   private static final String REPO = "([\\w\\d-_.]+?)";
   private static final String NAME = "([\\w\\d-_.]+?)";
   private static final String TAG = "([\\w\\d-_.]+?)";
@@ -59,6 +59,8 @@ public class Reference {
     .put(Pattern.compile(String.format("%s@%s", NAME, DIGEST)), m -> new Reference(DEFAULT_DOMAIN, DEFAULT_REPO, m.group(1), null, m.group(2)))
     .put(Pattern.compile(String.format("%s/%s:%s", REPO, NAME, TAG)), m -> new Reference(DEFAULT_DOMAIN, m.group(1), m.group(2), m.group(3), null))
     .put(Pattern.compile(String.format("%s/%s@%s", REPO, NAME, DIGEST)), m -> new Reference(DEFAULT_DOMAIN, m.group(1), m.group(2), null, m.group(3)))
+    .put(Pattern.compile(String.format("%s/%s/%s", DOMAIN, REPO, NAME)), m -> new Reference(m.group(1), m.group(4), m.group(5), DEFAULT_TAG, null))
+    .put(Pattern.compile(String.format("%s/%s/%s:%s", DOMAIN, REPO, NAME, TAG)), m -> new Reference(m.group(1), m.group(4), m.group(5), m.group(6), null))
     .build();
 
   private final String domain;

File: java/server/test/org/openqa/selenium/docker/internal/ReferenceTest.java
Patch:
@@ -42,7 +42,8 @@ public static Collection<Object[]> data() {
       {"repo/img", new Reference("docker.io", "repo", "img", "latest",null)},
       {"repo/img:tag", new Reference("docker.io", "repo", "img", "tag",null)},
       {"repo/img@sha256:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", new Reference("docker.io", "repo", "img", null,"sha256:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")},
-      // domain/repository/name:tag -> {domain: domain, repository: repository, name: name, tag: tag, digest: null}
+      {"images.sample.io/repo/img", new Reference("images.sample.io", "repo", "img", "latest",null)},
+      {"images.sample.io/repo/img:tag", new Reference("images.sample.io", "repo", "img", "tag",null)},
       // domain:port/repository/name@digest ->
     });
   }

File: java/client/test/org/openqa/selenium/environment/webserver/CookieHandler.java
Patch:
@@ -26,9 +26,7 @@
 
 import java.io.UncheckedIOException;
 import java.time.Instant;
-import java.time.LocalDateTime;
 import java.time.ZoneId;
-import java.time.ZoneOffset;
 import java.time.ZonedDateTime;
 import java.time.temporal.TemporalAccessor;
 import java.util.Collection;

File: java/client/test/org/openqa/selenium/environment/webserver/RedirectHandler.java
Patch:
@@ -31,7 +31,7 @@ public class RedirectHandler implements HttpHandler {
 
   @Override
   public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
-    String targetLocation = UrlPath.relativeToContext(req, "/resultPage.html");
+    String targetLocation = UrlPath.relativeToContext(req, "resultPage.html");
 
     return new HttpResponse()
       .setStatus(HTTP_MOVED_TEMP)

File: java/client/test/org/openqa/selenium/environment/webserver/CookieHandler.java
Patch:
@@ -175,6 +175,9 @@ private Cookie parse(String cookieString) {
           case "secure":
             builder.isSecure(true);
             break;
+
+          default:
+            throw new RuntimeException("Unknown option: " + key);
         }
       });
 

File: java/server/test/org/openqa/selenium/grid/graphql/GraphqlHandlerTest.java
Patch:
@@ -131,7 +131,7 @@ public void shouldReturnAnEmptyListForNodesIfNoneAreRegistered() {
 
     assertThat(topLevel)
       .describedAs(topLevel.toString())
-      .isEqualTo(Collections.singletonMap("data", Collections.singletonMap("grid", Collections.singletonMap("nodes", Collections.emptyMap()))));
+      .isEqualTo(Collections.singletonMap("data", Collections.singletonMap("grid", Collections.singletonMap("nodes", Collections.emptyList()))));
   }
 
   @Test

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -218,7 +218,7 @@ public void shouldGetMeaningfulExceptionOnBrowserDeath() throws Exception {
   public void shouldWaitUntilBrowserHasClosedProperly() {
     driver.get(pages.simpleTestPage);
     driver.quit();
-    JUnit4TestBase.removeDriver();
+    removeDriver();
 
     driver = new WebDriverBuilder().get();
 

File: java/client/test/org/openqa/selenium/testing/SeleniumTestRule.java
Patch:
@@ -78,8 +78,8 @@ private WebDriver actuallyCreateDriver(Capabilities capabilities) {
     Instances current = instances.get();
 
     if (current == null ||
-      current.driver == null ||
-      (current.driver instanceof RemoteWebDriver && ((RemoteWebDriver) current.driver).getSessionId() == null)) {
+        current.driver == null ||
+        (current.driver instanceof RemoteWebDriver && ((RemoteWebDriver) current.driver).getSessionId() == null)) {
       StaticResources.ensureAvailable();
       WebDriver driver = new WebDriverBuilder().get(capabilities);
       instances.set(new Instances(driver, regularWait, shortWait));
@@ -208,7 +208,7 @@ private boolean notImplemented(Stream<NotYetImplemented> nyi) {
     @Override
     public Statement apply(final Statement base, final Description description) {
       if (notImplemented(description.getAnnotation(NotYetImplementedList.class)) ||
-        notImplemented(description.getAnnotation(NotYetImplemented.class))) {
+          notImplemented(description.getAnnotation(NotYetImplemented.class))) {
         return new Statement() {
           @Override
           public void evaluate() throws Throwable {

File: java/client/test/org/openqa/selenium/devtools/CdpFacadeTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.HasAuthentication;
 import org.openqa.selenium.UsernameAndPassword;
 import org.openqa.selenium.environment.webserver.BasicAuthHandler;
-import org.openqa.selenium.environment.webserver.JreAppServer;
+import org.openqa.selenium.environment.webserver.NettyAppServer;
 import org.openqa.selenium.remote.http.HttpResponse;
 import org.openqa.selenium.remote.http.Route;
 import org.openqa.selenium.support.devtools.NetworkInterceptor;
@@ -36,11 +36,11 @@
 
 public class CdpFacadeTest extends DevToolsTestBase {
 
-  private static JreAppServer server;
+  private static NettyAppServer server;
 
   @BeforeClass
   public static void startServer() {
-    server = new JreAppServer(new BasicAuthHandler());
+    server = new NettyAppServer(new BasicAuthHandler());
     server.start();
   }
 

File: java/client/test/org/openqa/selenium/environment/webserver/NettyAppServerTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.openqa.selenium.environment.webserver;
 
-public class JreAppServerTest extends AppServerTestBase {
+public class NettyAppServerTest extends AppServerTestBase {
 
   @Override
   protected AppServer createAppServer() {
-    return new JreAppServer();
+    return new NettyAppServer();
   }
 }

File: java/client/test/org/openqa/selenium/net/UrlCheckerTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
-import org.openqa.selenium.environment.webserver.JreAppServer;
+import org.openqa.selenium.environment.webserver.NettyAppServer;
 import org.openqa.selenium.remote.http.HttpResponse;
 
 import java.net.MalformedURLException;
@@ -36,12 +36,12 @@ public class UrlCheckerTest {
 
   private final UrlChecker urlChecker = new UrlChecker();
   private final ExecutorService executorService = Executors.newSingleThreadExecutor();
-  private JreAppServer server;
+  private NettyAppServer server;
   private URL url;
 
   @Before
   public void buildServer() throws MalformedURLException {
-    JreAppServer server = new JreAppServer(req -> new HttpResponse()
+    NettyAppServer server = new NettyAppServer(req -> new HttpResponse()
       .setStatus(200)
       .setContent(utf8String("<h1>Working</h1>")));
     this.server = server;

File: java/client/test/org/openqa/selenium/support/devtools/NetworkInterceptorTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.By;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.devtools.HasDevTools;
-import org.openqa.selenium.environment.webserver.JreAppServer;
+import org.openqa.selenium.environment.webserver.NettyAppServer;
 import org.openqa.selenium.remote.http.Contents;
 import org.openqa.selenium.remote.http.HttpResponse;
 import org.openqa.selenium.remote.http.Route;
@@ -40,13 +40,13 @@
 
 public class NetworkInterceptorTest {
 
-  private JreAppServer appServer;
+  private NettyAppServer appServer;
   private WebDriver driver;
   private NetworkInterceptor interceptor;
 
   @Before
   public void setup() {
-    appServer = new JreAppServer(req -> new HttpResponse()
+    appServer = new NettyAppServer(req -> new HttpResponse()
         .setStatus(200)
         .addHeader("Content-Type", MediaType.XHTML_UTF_8.toString())
         .setContent(utf8String("<html><head><title>Hello, World!</title></head><body/></html>")));

File: java/client/src/org/openqa/selenium/devtools/v84/V84Events.java
Patch:
@@ -70,7 +70,6 @@ protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
       .map(obj -> new RemoteObject(
         obj.getType().toString(),
         obj.getValue().orElse(null)))
-      .map(obj -> (Object) obj)
       .collect(ImmutableList.toImmutableList());
 
     return new ConsoleEvent(

File: java/client/src/org/openqa/selenium/devtools/v85/V85Events.java
Patch:
@@ -70,7 +70,6 @@ protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
       .map(obj -> new RemoteObject(
         obj.getType().toString(),
         obj.getValue().orElse(null)))
-      .map(obj -> (Object) obj)
       .collect(ImmutableList.toImmutableList());
 
     return new ConsoleEvent(

File: java/client/src/org/openqa/selenium/devtools/v86/V86Events.java
Patch:
@@ -71,7 +71,6 @@ protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
       .map(obj -> new RemoteObject(
         obj.getType().toString(),
         obj.getValue().orElse(null)))
-      .map(obj -> (Object) obj)
       .collect(ImmutableList.toImmutableList());
 
     return new ConsoleEvent(

File: java/client/src/org/openqa/selenium/devtools/v87/V87Events.java
Patch:
@@ -70,7 +70,6 @@ protected ConsoleEvent toConsoleEvent(ConsoleAPICalled event) {
       .map(obj -> new RemoteObject(
         obj.getType().toString(),
         obj.getValue().orElse(null)))
-      .map(obj -> (Object) obj)
       .collect(ImmutableList.toImmutableList());
 
     return new ConsoleEvent(

File: java/client/src/org/openqa/selenium/firefox/FileExtension.java
Patch:
@@ -33,10 +33,10 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
-import java.io.FileReader;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.UncheckedIOException;
+import java.nio.file.Files;
 import java.util.Iterator;
 import java.util.Map;
 
@@ -129,7 +129,7 @@ private String getExtensionId(File root) {
   private String readIdFromManifestJson(File root) {
     final String MANIFEST_JSON_FILE = "manifest.json";
     File manifestJsonFile = new File(root, MANIFEST_JSON_FILE);
-    try (Reader reader = new FileReader(manifestJsonFile, UTF_8);
+    try (Reader reader = Files.newBufferedReader(manifestJsonFile.toPath(), UTF_8);
          JsonInput json = new Json().newInput(reader)) {
       String addOnId = null;
 

File: java/client/src/org/openqa/selenium/firefox/Preferences.java
Patch:
@@ -29,11 +29,11 @@
 
 import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileReader;
 import java.io.IOException;
 import java.io.Reader;
 import java.io.Writer;
 import java.nio.charset.Charset;
+import java.nio.file.Files;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.regex.Matcher;
@@ -68,7 +68,7 @@ public Preferences(Reader defaults) {
 
   public Preferences(Reader defaults, File userPrefs) {
     readDefaultPreferences(defaults);
-    try (FileReader reader = new FileReader(userPrefs, Charset.defaultCharset())) {
+    try (Reader reader = Files.newBufferedReader(userPrefs.toPath(), Charset.defaultCharset())) {
       readPreferences(reader);
     } catch (IOException e) {
       throw new WebDriverException(e);

File: java/client/src/org/openqa/selenium/firefox/ProfilesIni.java
Patch:
@@ -27,9 +27,9 @@
 
 import java.io.BufferedReader;
 import java.io.File;
-import java.io.FileReader;
 import java.io.IOException;
 import java.nio.charset.Charset;
+import java.nio.file.Files;
 import java.text.MessageFormat;
 import java.util.HashMap;
 import java.util.Map;
@@ -57,7 +57,7 @@ protected Map<String, File> readProfiles(File appData) {
 
     BufferedReader reader = null;
     try {
-      reader = new BufferedReader(new FileReader(profilesIni, Charset.defaultCharset()));
+      reader = Files.newBufferedReader(profilesIni.toPath(), Charset.defaultCharset());
 
       String line = reader.readLine();
 

File: java/client/src/org/openqa/selenium/net/LinuxEphemeralPortRangeDetector.java
Patch:
@@ -24,6 +24,7 @@
 import java.io.Reader;
 import java.io.StringReader;
 import java.nio.charset.Charset;
+import java.nio.file.Files;
 
 public class LinuxEphemeralPortRangeDetector implements EphemeralPortRangeDetector {
 
@@ -33,7 +34,7 @@ public class LinuxEphemeralPortRangeDetector implements EphemeralPortRangeDetect
   public static LinuxEphemeralPortRangeDetector getInstance() {
     File file = new File("/proc/sys/net/ipv4/ip_local_port_range");
     if (file.exists() && file.canRead()) {
-      try (Reader inputFil = new FileReader(file, Charset.defaultCharset())) {
+      try (Reader inputFil = Files.newBufferedReader(file.toPath(), Charset.defaultCharset())) {
         return new LinuxEphemeralPortRangeDetector(inputFil);
       } catch (IOException e) {
         throw new RuntimeException(e);

File: java/client/test/org/openqa/selenium/environment/webserver/CreatePageServlet.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.openqa.selenium.json.Json;
 
-import java.io.FileWriter;
 import java.io.IOException;
 import java.io.Writer;
 import java.nio.file.Files;
@@ -51,7 +50,7 @@ protected void doPost(HttpServletRequest request,
 
     Path tempPageDir = Paths.get(getServletContext().getInitParameter("tempPageDir"));
     Path target = Files.createTempFile(tempPageDir, "page", ".html");
-    try (Writer out = new FileWriter(target.toFile(), UTF_8)) {
+    try (Writer out = Files.newBufferedWriter(target, UTF_8)) {
       out.write(json.get("content"));
     }
 

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -31,7 +31,7 @@
 import org.openqa.selenium.grid.log.LoggingOptions;
 import org.openqa.selenium.grid.node.Node;
 import org.openqa.selenium.grid.node.ProxyNodeCdp;
-import org.openqa.selenium.grid.node.local.LocalNodeFactory;
+import org.openqa.selenium.grid.node.config.NodeOptions;
 import org.openqa.selenium.grid.router.Router;
 import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.security.SecretOptions;
@@ -192,7 +192,7 @@ protected Handlers createHandlers(Config config) {
       Route.post("/graphql").to(() -> graphqlHandler),
       Route.get("/readyz").to(() -> readinessCheck));
 
-    Node node = LocalNodeFactory.create(config);
+    Node node = new NodeOptions(config).getNode();
     combinedHandler.addHandler(node);
     distributor.add(node);
 

File: java/server/src/org/openqa/selenium/docker/DockerProtocol.java
Patch:
@@ -27,6 +27,5 @@ public interface DockerProtocol {
   Container create(ContainerConfig info);
   void startContainer(ContainerId id) throws DockerException;
   void stopContainer(ContainerId id, Duration timeout) throws DockerException;
-  boolean exists(ContainerId id);
   ContainerInfo inspectContainer(ContainerId id) throws DockerException;
 }

File: java/server/src/org/openqa/selenium/grid/config/DescribedOption.java
Patch:
@@ -125,7 +125,7 @@ public String example(Config config) {
     Optional<List<String>> allOptions = config.getAll(section, optionName);
     if (allOptions.isPresent() && !allOptions.get().isEmpty()) {
       if (repeats) {
-        return allOptions.stream()
+        return allOptions.get().stream()
           .map(value -> quotable ? "\"" + value + "\"" : String.valueOf(value))
           .collect(Collectors.joining(", ", "[", "]"));
       }

File: java/server/src/org/openqa/selenium/grid/docker/DockerOptions.java
Patch:
@@ -95,7 +95,7 @@ private URI getDockerUri() {
   }
 
   private boolean isEnabled(HttpClient.Factory clientFactory) {
-    if (config.getAll(DOCKER_SECTION, "configs").isEmpty()) {
+    if (!config.getAll(DOCKER_SECTION, "configs").isPresent()) {
       return false;
     }
 

File: java/server/src/org/openqa/selenium/grid/docker/DockerSessionFactory.java
Patch:
@@ -271,7 +271,7 @@ private TimeZone getTimeZone(Capabilities sessionRequestCapabilities) {
   private Dimension getScreenResolution(Capabilities sessionRequestCapabilities) {
     Optional<Object> screenResolution =
       ofNullable(getCapability(sessionRequestCapabilities, "screenResolution"));
-    if (screenResolution.isEmpty()) {
+    if (!screenResolution.isPresent()) {
       return null;
     }
     try {

File: java/server/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -155,7 +155,7 @@ protected Handlers createHandlers(Config config) {
       secretOptions.getRegistrationSecret());
     handler.addHandler(distributor);
 
-    Router router = new Router(tracer, clientFactory, sessions, distributor);
+    Router router = new Router(tracer, clientFactory, sessions, queuer, distributor);
     GraphqlHandler graphqlHandler = new GraphqlHandler(distributor, serverOptions.getExternalUri());
     HttpHandler readinessCheck = req -> {
       boolean ready = router.isReady() && bus.isReady();

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -161,7 +161,7 @@ protected Handlers createHandlers(Config config) {
       registrationSecret);
     combinedHandler.addHandler(distributor);
 
-    Routable router = new Router(tracer, clientFactory, sessions, distributor)
+    Routable router = new Router(tracer, clientFactory, sessions, queuer, distributor)
       .with(networkOptions.getSpecComplianceChecks());
 
     HttpHandler readinessCheck = req -> {

File: java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java
Patch:
@@ -150,7 +150,7 @@ private void handleNewSessionRequest(HttpRequest sessionRequest, RequestId reqId
 
       attributeMap.put("request", EventAttribute.setValue(sessionRequest.toString()));
       Either<SessionNotCreatedException, CreateSessionResponse> response =
-          createNewSessionResponse(sessionRequest);
+          newSession(sessionRequest);
       if (response.isRight()) {
         CreateSessionResponse sessionResponse = response.right();
         NewSessionResponse newSessionResponse =

File: java/server/test/org/openqa/selenium/grid/distributor/local/LocalDistributorTest.java
Patch:
@@ -244,7 +244,7 @@ public HttpResponse execute(HttpRequest req) {
     List<Callable<SessionId>> callables = new ArrayList<>();
     for (int i = 0; i < 3; i++) {
       callables.add(() -> {
-        CreateSessionResponse res = distributor.newSession(req);
+        CreateSessionResponse res = distributor.newSession(req).right();
         assertThat(res.getSession().getCapabilities().getBrowserName()).isEqualTo("cheese");
         return res.getSession().getId();
       });

File: java/server/test/org/openqa/selenium/grid/router/NewSessionCreationTest.java
Patch:
@@ -104,7 +104,7 @@ public void ensureJsCannotCreateANewSession() throws URISyntaxException {
         queuer,
         registrationSecret);
 
-    Routable router = new Router(tracer, clientFactory, sessions, distributor)
+    Routable router = new Router(tracer, clientFactory, sessions, queuer, distributor)
       .with(new EnsureSpecCompliantHeaders(ImmutableList.of(), ImmutableSet.of()));
 
     Server<?> server = new NettyServer(

File: java/server/test/org/openqa/selenium/grid/router/RouterTest.java
Patch:
@@ -102,7 +102,7 @@ public void setUp() {
         registrationSecret);
     handler.addHandler(distributor);
 
-    router = new Router(tracer, clientFactory, sessions, distributor);
+    router = new Router(tracer, clientFactory, sessions, queuer, distributor);
   }
 
   @Test

File: java/server/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -141,8 +141,8 @@ protected Handlers createHandlers(Config config) {
     NewSessionQueue sessionRequests = new LocalNewSessionQueue(
       tracer,
       bus,
-      newSessionQueueOptions.getSessionRequestTimeout(),
-      newSessionQueueOptions.getSessionRequestRetryInterval());
+      newSessionQueueOptions.getSessionRequestRetryInterval(),
+      newSessionQueueOptions.getSessionRequestTimeout());
     NewSessionQueuer queuer = new LocalNewSessionQueuer(tracer, bus, sessionRequests);
     handler.addHandler(queuer);
 

File: java/server/src/org/openqa/selenium/grid/distributor/httpd/DistributorServer.java
Patch:
@@ -44,6 +44,7 @@
 import static org.openqa.selenium.grid.config.StandardGridRoles.EVENT_BUS_ROLE;
 import static org.openqa.selenium.grid.config.StandardGridRoles.HTTPD_ROLE;
 import static org.openqa.selenium.grid.config.StandardGridRoles.SESSION_MAP_ROLE;
+import static org.openqa.selenium.grid.config.StandardGridRoles.SESSION_QUEUER_ROLE;
 import static org.openqa.selenium.remote.http.HttpMethod.GET;
 import static org.openqa.selenium.remote.http.Route.get;
 
@@ -65,7 +66,7 @@ public String getDescription() {
 
   @Override
   public Set<Role> getConfigurableRoles() {
-    return ImmutableSet.of(EVENT_BUS_ROLE, HTTPD_ROLE, SESSION_MAP_ROLE);
+    return ImmutableSet.of(EVENT_BUS_ROLE, HTTPD_ROLE, SESSION_MAP_ROLE, SESSION_QUEUER_ROLE);
   }
 
   @Override

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -189,6 +189,7 @@ public void testShouldBeAbleToGetAFragmentOnTheCurrentPage() {
   }
 
   @Test
+  @NotYetImplemented(CHROME)
   @NotYetImplemented(MARIONETTE)
   public void testShouldReturnWhenGettingAUrlThatDoesNotResolve() {
     assertThatCode(
@@ -213,6 +214,7 @@ public void testShouldThrowIfUrlIsMalformedInPortPart() {
   }
 
   @Test
+  @NotYetImplemented(CHROME)
   @NotYetImplemented(MARIONETTE)
   public void testShouldReturnWhenGettingAUrlThatDoesNotConnect() {
     // Here's hoping that there's nothing here. There shouldn't be

File: java/client/test/org/openqa/selenium/devtools/ChromeDevToolsNetworkTest.java
Patch:
@@ -219,7 +219,7 @@ public void verifyCacheDisabledAndClearCache() {
 
     devTools.send(setCacheDisabled(true));
 
-    devTools.addListener(responseReceived(), responseReceived -> assertEquals(false, responseReceived.getResponse().getFromDiskCache()));
+    devTools.addListener(responseReceived(), responseReceived -> assertEquals(false, responseReceived.getResponse().getFromDiskCache().get()));
 
     driver.get(appServer.whereIs("simpleTest.html"));
 

File: java/server/src/org/openqa/selenium/grid/sessionqueue/NewSessionQueue.java
Patch:
@@ -44,7 +44,7 @@ public abstract class NewSessionQueue implements HasReadyState {
 
   public abstract boolean offerFirst(HttpRequest request, RequestId requestId);
 
-  public abstract Optional<HttpRequest> poll();
+  public abstract Optional<HttpRequest> remove(RequestId requestId);
 
   public abstract int clear();
 

File: java/server/src/org/openqa/selenium/grid/sessionqueue/local/LocalNewSessionQueuer.java
Patch:
@@ -77,8 +77,8 @@ public boolean retryAddToQueue(HttpRequest request, RequestId reqId) {
   }
 
   @Override
-  public Optional<HttpRequest> remove() {
-    return sessionRequests.poll();
+  public Optional<HttpRequest> remove(RequestId id) {
+    return sessionRequests.remove(id);
   }
 
   @Override

File: java/server/src/org/openqa/selenium/grid/sessionqueue/remote/RemoteNewSessionQueuer.java
Patch:
@@ -89,8 +89,9 @@ public boolean retryAddToQueue(HttpRequest request, RequestId reqId) {
   }
 
   @Override
-  public Optional<HttpRequest> remove() {
-    HttpRequest upstream = new HttpRequest(GET, "/se/grid/newsessionqueuer/session");
+  public Optional<HttpRequest> remove(RequestId reqId) {
+    HttpRequest upstream =
+        new HttpRequest(GET, "/se/grid/newsessionqueuer/session/" + reqId.toString());
     HttpTracing.inject(tracer, tracer.getCurrentContext(), upstream);
     HttpResponse response = client.execute(upstream);
 

File: java/client/src/org/openqa/selenium/remote/http/HttpClient.java
Patch:
@@ -67,7 +67,7 @@ static Factory create(String name) {
      * {@see create}
      */
     static Factory createDefault() {
-      return create(System.getProperty("webdriver.http.factory", "reactor"));
+      return create(System.getProperty("webdriver.http.factory", "netty"));
     }
 
     /**

File: java/client/test/org/openqa/selenium/remote/http/HttpClientFactoryTest.java
Patch:
@@ -47,13 +47,13 @@ public void restoreSystemProperty() {
   @Test
   public void canCreateDefaultHttpClientFactory() {
     HttpClient.Factory factory = HttpClient.Factory.createDefault();
-    assertThat(factory.getClass().getAnnotation(HttpClientName.class).value()).isEqualTo("reactor");
+    assertThat(factory.getClass().getAnnotation(HttpClientName.class).value()).isEqualTo("netty");
   }
 
   @Test
   public void canCreateHttpClientFactoryByName() {
-    HttpClient.Factory factory = HttpClient.Factory.create("netty");
-    assertThat(factory.getClass().getAnnotation(HttpClientName.class).value()).isEqualTo("netty");
+    HttpClient.Factory factory = HttpClient.Factory.create("reactor");
+    assertThat(factory.getClass().getAnnotation(HttpClientName.class).value()).isEqualTo("reactor");
   }
 
   @Test

File: java/client/src/org/openqa/selenium/remote/tracing/TraceContext.java
Patch:
@@ -23,7 +23,7 @@ public interface TraceContext {
 
   Span createSpan(String name);
 
-  SpanId getId();
+  String getId();
 
   Runnable wrap(Runnable runnable);
 

File: java/client/src/org/openqa/selenium/remote/tracing/empty/NullContext.java
Patch:
@@ -19,18 +19,17 @@
 
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.remote.tracing.Span;
-import org.openqa.selenium.remote.tracing.SpanId;
 import org.openqa.selenium.remote.tracing.TraceContext;
 
 import java.util.UUID;
 import java.util.concurrent.Callable;
 
 public class NullContext implements TraceContext {
 
-  private final SpanId id = new SpanId(UUID.randomUUID());
+  private final String id = UUID.randomUUID().toString();
 
   @Override
-  public SpanId getId() {
+  public String getId() {
     return id;
   }
 

File: java/client/src/org/openqa/selenium/remote/tracing/opentelemetry/OpenTelemetryPropagator.java
Patch:
@@ -64,8 +64,8 @@ public <C> OpenTelemetryContext extractContext(
 
     // If the extracted context is the root context, then we continue to be a
     // child span of the existing context.
-    SpanId id = TracingContextUtils.getSpan(extracted).getContext().getSpanId();
-    if (DefaultSpan.getInvalid().getContext().getSpanId().equals(id)) {
+    String id = TracingContextUtils.getSpan(extracted).getContext().getSpanIdAsHexString();
+    if (DefaultSpan.getInvalid().getContext().getSpanIdAsHexString().equals(id)) {
       return (OpenTelemetryContext) existing;
     }
 

File: java/client/test/org/openqa/selenium/remote/http/HttpClientFactoryTest.java
Patch:
@@ -47,13 +47,13 @@ public void restoreSystemProperty() {
   @Test
   public void canCreateDefaultHttpClientFactory() {
     HttpClient.Factory factory = HttpClient.Factory.createDefault();
-    assertThat(factory.getClass().getAnnotation(HttpClientName.class).value()).isEqualTo("netty");
+    assertThat(factory.getClass().getAnnotation(HttpClientName.class).value()).isEqualTo("reactor");
   }
 
   @Test
   public void canCreateHttpClientFactoryByName() {
-    HttpClient.Factory factory = HttpClient.Factory.create("reactor");
-    assertThat(factory.getClass().getAnnotation(HttpClientName.class).value()).isEqualTo("reactor");
+    HttpClient.Factory factory = HttpClient.Factory.create("netty");
+    assertThat(factory.getClass().getAnnotation(HttpClientName.class).value()).isEqualTo("netty");
   }
 
   @Test

File: java/client/src/org/openqa/selenium/remote/http/HttpClient.java
Patch:
@@ -67,7 +67,7 @@ static Factory create(String name) {
      * {@see create}
      */
     static Factory createDefault() {
-      return create(System.getProperty("webdriver.http.factory", "netty"));
+      return create(System.getProperty("webdriver.http.factory", "reactor"));
     }
 
     /**

File: java/server/src/org/openqa/selenium/grid/docker/DockerOptions.java
Patch:
@@ -172,7 +172,7 @@ private Image getVideoImage(Docker docker) {
   }
 
   private Path getStoragePath() {
-    String storagePath = config.get(DOCKER_SECTION, "video-path").orElse(null);
+    String storagePath = config.get(DOCKER_SECTION, "video-path").orElse("");
     if (Files.isDirectory(Path.of(storagePath))) {
       return Path.of(storagePath);
     }

File: java/server/src/org/openqa/selenium/events/zeromq/ZeroMqEventBus.java
Patch:
@@ -22,6 +22,7 @@
 import org.openqa.selenium.events.EventName;
 import org.openqa.selenium.grid.config.Config;
 import org.openqa.selenium.grid.security.Secret;
+import org.openqa.selenium.grid.security.SecretOptions;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.json.JsonInput;
 import org.zeromq.ZContext;
@@ -59,9 +60,9 @@ public static EventBus create(Config config) {
 
     boolean bind = config.getBool(EVENTS_SECTION, "bind").orElse(false);
 
-    Secret secret = config.get("server", "registration-secret").map(Secret::new).orElse(new Secret(""));
+    SecretOptions secretOptions = new SecretOptions(config);
 
-    return create(new ZContext(), publish, subscribe, bind, secret);
+    return create(new ZContext(), publish, subscribe, bind, secretOptions.getRegistrationSecret());
   }
 
   public static EventListener<RejectedEvent> onRejectedEvent(Consumer<RejectedEvent> handler) {

File: java/server/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -31,6 +31,7 @@
 import org.openqa.selenium.grid.log.LoggingOptions;
 import org.openqa.selenium.grid.router.ProxyCdpIntoGrid;
 import org.openqa.selenium.grid.router.Router;
+import org.openqa.selenium.grid.security.SecretOptions;
 import org.openqa.selenium.grid.server.BaseServerOptions;
 import org.openqa.selenium.grid.server.EventBusOptions;
 import org.openqa.selenium.grid.server.NetworkOptions;
@@ -116,6 +117,7 @@ protected Handlers createHandlers(Config config) {
     handler.addHandler(sessions);
 
     BaseServerOptions serverOptions = new BaseServerOptions(config);
+    SecretOptions secretOptions = new SecretOptions(config);
 
     URL externalUrl;
     try {
@@ -135,7 +137,7 @@ protected Handlers createHandlers(Config config) {
       bus,
       clientFactory,
       sessions,
-      serverOptions.getRegistrationSecret());
+      secretOptions.getRegistrationSecret());
     handler.addHandler(distributor);
 
     Router router = new Router(tracer, clientFactory, sessions, distributor);

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -34,6 +34,7 @@
 import org.openqa.selenium.grid.node.local.LocalNodeFactory;
 import org.openqa.selenium.grid.router.Router;
 import org.openqa.selenium.grid.security.Secret;
+import org.openqa.selenium.grid.security.SecretOptions;
 import org.openqa.selenium.grid.server.BaseServerOptions;
 import org.openqa.selenium.grid.server.EventBusOptions;
 import org.openqa.selenium.grid.server.NetworkOptions;
@@ -115,7 +116,8 @@ protected Handlers createHandlers(Config config) {
     EventBus bus = events.getEventBus();
 
     BaseServerOptions serverOptions = new BaseServerOptions(config);
-    Secret registrationSecret = serverOptions.getRegistrationSecret();
+    SecretOptions secretOptions = new SecretOptions(config);
+    Secret registrationSecret = secretOptions.getRegistrationSecret();
 
     URI localhost = serverOptions.getExternalUri();
     URL localhostUrl;

File: java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java
Patch:
@@ -43,7 +43,7 @@
 import org.openqa.selenium.grid.node.Node;
 import org.openqa.selenium.grid.node.remote.RemoteNode;
 import org.openqa.selenium.grid.security.Secret;
-import org.openqa.selenium.grid.server.BaseServerOptions;
+import org.openqa.selenium.grid.security.SecretOptions;
 import org.openqa.selenium.grid.server.EventBusOptions;
 import org.openqa.selenium.grid.server.NetworkOptions;
 import org.openqa.selenium.grid.sessionmap.SessionMap;
@@ -113,9 +113,9 @@ public static Distributor create(Config config) {
     EventBus bus = new EventBusOptions(config).getEventBus();
     HttpClient.Factory clientFactory = new NetworkOptions(config).getHttpClientFactory(tracer);
     SessionMap sessions = new SessionMapOptions(config).getSessionMap();
-    BaseServerOptions serverOptions = new BaseServerOptions(config);
+    SecretOptions secretOptions = new SecretOptions(config);
 
-    return new LocalDistributor(tracer, bus, clientFactory, sessions, serverOptions.getRegistrationSecret());
+    return new LocalDistributor(tracer, bus, clientFactory, sessions, secretOptions.getRegistrationSecret());
   }
 
   @Override

File: java/server/src/org/openqa/selenium/grid/node/k8s/OneShotNode.java
Patch:
@@ -43,6 +43,7 @@
 import org.openqa.selenium.grid.node.Node;
 import org.openqa.selenium.grid.node.config.NodeOptions;
 import org.openqa.selenium.grid.security.Secret;
+import org.openqa.selenium.grid.security.SecretOptions;
 import org.openqa.selenium.grid.server.BaseServerOptions;
 import org.openqa.selenium.grid.server.EventBusOptions;
 import org.openqa.selenium.internal.Require;
@@ -117,6 +118,7 @@ public static Node create(Config config) {
     LoggingOptions loggingOptions = new LoggingOptions(config);
     EventBusOptions eventOptions = new EventBusOptions(config);
     BaseServerOptions serverOptions = new BaseServerOptions(config);
+    SecretOptions secretOptions = new SecretOptions(config);
     NodeOptions nodeOptions = new NodeOptions(config);
 
     Map<String, Object> raw = new Json().toType(
@@ -142,7 +144,7 @@ public static Node create(Config config) {
     return new OneShotNode(
       loggingOptions.getTracer(),
       eventOptions.getEventBus(),
-      serverOptions.getRegistrationSecret(),
+      secretOptions.getRegistrationSecret(),
       new NodeId(UUID.randomUUID()),
       serverOptions.getExternalUri(),
       nodeOptions.getPublicGridUri().orElseThrow(() -> new ConfigException("Unable to determine public grid address")),

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNodeFactory.java
Patch:
@@ -27,6 +27,7 @@
 import org.openqa.selenium.grid.node.SessionFactory;
 import org.openqa.selenium.grid.node.config.DriverServiceSessionFactory;
 import org.openqa.selenium.grid.node.config.NodeOptions;
+import org.openqa.selenium.grid.security.SecretOptions;
 import org.openqa.selenium.grid.server.BaseServerOptions;
 import org.openqa.selenium.grid.server.EventBusOptions;
 import org.openqa.selenium.grid.server.NetworkOptions;
@@ -47,6 +48,7 @@ public static Node create(Config config) {
     BaseServerOptions serverOptions = new BaseServerOptions(config);
     NodeOptions nodeOptions = new NodeOptions(config);
     NetworkOptions networkOptions = new NetworkOptions(config);
+    SecretOptions secretOptions = new SecretOptions(config);
 
     Tracer tracer = loggingOptions.getTracer();
     HttpClient.Factory clientFactory = networkOptions.getHttpClientFactory(tracer);
@@ -56,7 +58,7 @@ public static Node create(Config config) {
       eventOptions.getEventBus(),
       serverOptions.getExternalUri(),
       nodeOptions.getPublicGridUri().orElseGet(serverOptions::getExternalUri),
-      serverOptions.getRegistrationSecret());
+      secretOptions.getRegistrationSecret());
 
     List<DriverService.Builder<?, ?>> builders = new ArrayList<>();
     ServiceLoader.load(DriverService.Builder.class).forEach(builders::add);

File: java/server/src/org/openqa/selenium/grid/router/httpd/RouterServer.java
Patch:
@@ -33,6 +33,7 @@
 import org.openqa.selenium.grid.log.LoggingOptions;
 import org.openqa.selenium.grid.router.ProxyCdpIntoGrid;
 import org.openqa.selenium.grid.router.Router;
+import org.openqa.selenium.grid.security.SecretOptions;
 import org.openqa.selenium.grid.server.BaseServerOptions;
 import org.openqa.selenium.grid.server.NetworkOptions;
 import org.openqa.selenium.grid.server.Server;
@@ -104,14 +105,15 @@ protected Handlers createHandlers(Config config) {
     SessionMap sessions = sessionsOptions.getSessionMap();
 
     BaseServerOptions serverOptions = new BaseServerOptions(config);
+    SecretOptions secretOptions = new SecretOptions(config);
 
     DistributorOptions distributorOptions = new DistributorOptions(config);
     URL distributorUrl = fromUri(distributorOptions.getDistributorUri());
     Distributor distributor = new RemoteDistributor(
       tracer,
       clientFactory,
       distributorUrl,
-      serverOptions.getRegistrationSecret());
+      secretOptions.getRegistrationSecret());
 
     GraphqlHandler graphqlHandler = new GraphqlHandler(distributor, serverOptions.getExternalUri());
 

File: java/server/test/org/openqa/selenium/grid/distributor/AddingNodesTest.java
Patch:
@@ -289,7 +289,7 @@ protected CustomNode(
         NodeId nodeId,
         URI uri,
         Function<Capabilities, Session> factory) {
-      super(DefaultTestTracer.createTracer(), nodeId, uri, null);
+      super(DefaultTestTracer.createTracer(), nodeId, uri, registrationSecret);
 
       this.bus = bus;
       this.factory = Objects.requireNonNull(factory);

File: java/server/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -135,7 +135,7 @@ protected void execute(Config config) {
       bus,
       clientFactory,
       sessions,
-      null);
+      serverOptions.getRegistrationSecret());
     handler.addHandler(distributor);
 
     Router router = new Router(tracer, clientFactory, sessions, distributor);

File: java/server/src/org/openqa/selenium/cli/WrappedPrintWriter.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.OutputStreamWriter;
 import java.io.PrintWriter;
 import java.io.Writer;
+import java.nio.charset.Charset;
 
 public class WrappedPrintWriter extends PrintWriter {
 
@@ -31,7 +32,7 @@ public class WrappedPrintWriter extends PrintWriter {
   private int position = 0;
 
   public WrappedPrintWriter(OutputStream out, int lineLength, int indentBy) {
-    this(new OutputStreamWriter(out), lineLength, indentBy);
+    this(new OutputStreamWriter(out, Charset.defaultCharset()), lineLength, indentBy);
   }
 
   public WrappedPrintWriter(Writer out, int lineLength, int indentBy) {

File: java/server/src/org/openqa/selenium/events/zeromq/UnboundZmqEventBus.java
Patch:
@@ -39,6 +39,7 @@
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Queue;
 import java.util.UUID;
 import java.util.concurrent.ConcurrentHashMap;
@@ -94,7 +95,7 @@ class UnboundZmqEventBus implements EventBus {
     );
     // Connections are already established
     ZMQ.Poller poller = context.createPoller(1);
-    poller.register(sub, ZMQ.Poller.POLLIN);
+    poller.register(Objects.requireNonNull(sub), ZMQ.Poller.POLLIN);
 
     LOG.info("Sockets created");
 

File: java/server/src/org/openqa/selenium/grid/Main.java
Patch:
@@ -212,7 +212,7 @@ public Executable configure(PrintStream out, PrintStream err, String... args) {
                   "classpath to use with the server (for example, to provide additional " +
                   "commands, or to provide additional driver implementations). For example:\n");
         outWriter.write(String.format(
-            "\n  java -jar selenium.jar --ext example.jar%sdir standalone --port 1234",
+            "%n  java -jar selenium.jar --ext example.jar%sdir standalone --port 1234",
             File.pathSeparator));
         out.println("\n");
       };

File: java/server/src/org/openqa/selenium/grid/log/LoggingOptions.java
Patch:
@@ -66,7 +66,7 @@ public class LoggingOptions {
   // humanity. This implies that we're never going to need to configure
   // tracing more than once for the entire JVM, so we're never going to be
   // adding unit tests for this.
-  private static Tracer tracer;
+  private static volatile Tracer tracer;
 
   public static final Json JSON = new Json();
 

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -383,7 +383,6 @@ private Session createExternalSession(ActiveSession other, URI externalUri) {
       @SuppressWarnings("unchecked") Map<String, Object> original = (Map<String, Object>) rawSeleniumOptions;
       Map<String, Object> updated = new TreeMap<>(original);
 
-      Object cdp = original.get("cdp");
       String cdpPath = String.format("/session/%s/se/cdp", other.getId());
       updated.put("cdp", rewrite(cdpPath));
 

File: java/server/src/org/openqa/selenium/grid/node/remote/RemoteNode.java
Patch:
@@ -128,7 +128,7 @@ public boolean isSessionOwner(SessionId id) {
 
     HttpResponse res = client.execute(req);
 
-    return Values.get(res, Boolean.class) == Boolean.TRUE;
+    return Boolean.TRUE.equals(Values.get(res, Boolean.class));
   }
 
   @Override

File: java/server/src/org/openqa/selenium/grid/server/HelpFlags.java
Patch:
@@ -36,7 +36,7 @@ public boolean displayHelp(JCommander commander, PrintStream outputTo) {
       BuildInfo info = new BuildInfo();
 
       outputTo.printf(
-          "%s version: %s, revision: %s\n",
+          "%s version: %s, revision: %s%n",
           commander.getProgramName(),
           info.getReleaseLabel(),
           info.getBuildRevision());

File: java/server/src/org/openqa/selenium/grid/session/remote/RemoteSession.java
Patch:
@@ -59,7 +59,7 @@
  */
 public abstract class RemoteSession implements ActiveSession {
 
-  protected static Logger log = Logger.getLogger(ActiveSession.class.getName());
+  protected final static Logger LOG = Logger.getLogger(ActiveSession.class.getName());
 
   private final SessionId id;
   private final Dialect downstream;
@@ -163,10 +163,10 @@ protected Optional<ActiveSession> performHandshake(
             codec,
             new SessionId(response.getSessionId()),
             (Map<String, Object>) response.getValue()));
-        activeSession.ifPresent(session -> log.info("Started new session " + session));
+        activeSession.ifPresent(session -> LOG.info("Started new session " + session));
         return activeSession;
       } catch (IOException | IllegalStateException | NullPointerException e) {
-        log.log(Level.WARNING, e.getMessage(), e);
+        LOG.log(Level.WARNING, e.getMessage(), e);
         return Optional.empty();
       }
     }

File: java/server/src/org/openqa/selenium/grid/session/remote/ServicedSession.java
Patch:
@@ -168,7 +168,7 @@ public Optional<ActiveSession> apply(CreateSessionRequest sessionRequest) {
             sessionRequest.getDownstreamDialects(),
             sessionRequest.getCapabilities());
       } catch (IOException | IllegalStateException | NullPointerException | InvalidArgumentException e) {
-        log.log(Level.INFO, e.getMessage(), e);
+        LOG.log(Level.INFO, e.getMessage(), e);
         service.stop();
         return Optional.empty();
       }

File: java/server/src/org/openqa/selenium/grid/web/PathResource.java
Patch:
@@ -39,7 +39,7 @@ public PathResource(Path base) {
 
   @Override
   public String name() {
-    return base.getFileName().toString();
+    return base.getFileName() == null ? "" : base.getFileName().toString();
   }
 
   @Override

File: java/server/src/org/openqa/selenium/remote/server/handler/interactions/ClickInSession.java
Patch:
@@ -44,6 +44,9 @@ public void setJsonParameters(Map<String, Object> allParameters) throws Exceptio
         case 2:
           leftMouseButton = false;
           break;
+        default:
+          // This is suboptimal
+          break;
       }
     }
   }

File: java/server/src/org/openqa/selenium/remote/server/log/PerSessionLogHandler.java
Patch:
@@ -202,8 +202,8 @@ public synchronized SessionLogs getAllLogsForSession(SessionId sessionId) {
     SessionLogs sessionLogs = new SessionLogs();
     if (perSessionDriverEntries.containsKey(sessionId)) {
       Map<String, LogEntries> typeToEntriesMap = perSessionDriverEntries.get(sessionId);
-      for (String logType : typeToEntriesMap.keySet()) {
-        sessionLogs.addLog(logType, typeToEntriesMap.get(logType));
+      for (Map.Entry<String, LogEntries> entry : typeToEntriesMap.entrySet()) {
+        sessionLogs.addLog(entry.getKey(), entry.getValue());
       }
       perSessionDriverEntries.remove(sessionId);
     }
@@ -254,7 +254,7 @@ public synchronized void fetchAndStoreLogsFromDriver(SessionId sessionId, WebDri
    * @param prefs The logging preferences object.
    */
   // TODO(simons): Of course, this effects all loggers, not just the one for the session.
-  public void configureLogging(LoggingPreferences prefs) {
+  public synchronized void configureLogging(LoggingPreferences prefs) {
     if (prefs == null) {
       return;
     }

File: java/server/src/org/openqa/selenium/server/htmlrunner/CoreTestCase.java
Patch:
@@ -122,7 +122,7 @@ private List<LoggableStep> findCommands(WebDriver driver, URL baseUrl) {
       if (!allLinks.isEmpty()) {
         String href = allLinks.get(0).getAttribute("href");
         try {
-          baseUrl = new URL(href);
+          new URL(href);
         } catch (MalformedURLException e) {
           throw new SeleniumException("Base URL for test cannot be parsed: " + href);
         }
@@ -225,7 +225,7 @@ public boolean isFailure() {
 
     public String getStepLog() {
       return cause == null ? step.toString()
-        : String.format("%s\n%s", step.toString(), cause);
+        : String.format("%s%n%s", step.toString(), cause);
     }
   }
 }

File: java/server/src/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java
Patch:
@@ -92,7 +92,9 @@ public String runHTMLSuite(
     String userExtensions) throws IOException {
     File parent = outputFile.getParentFile();
     if (parent != null && !parent.exists()) {
-      parent.mkdirs();
+      if (!parent.mkdirs()) {
+        throw new IOException("Unable to create directory to store outputs: " + parent);
+      }
     }
     if (outputFile.exists() && !outputFile.canWrite()) {
       throw new IOException("Can't write to outputFile: " + outputFile.getAbsolutePath());

File: java/server/test/org/openqa/testing/FakeHttpServletResponse.java
Patch:
@@ -27,13 +27,15 @@
 import javax.servlet.http.Cookie;
 import javax.servlet.http.HttpServletResponse;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 public class FakeHttpServletResponse extends HeaderContainer
     implements HttpServletResponse {
 
   private final StringWriter stringWriter = new StringWriter();
   private final ServletOutputStream servletOutputStream =
       new StringServletOutputStream(stringWriter);
-  private final PrintWriter printWriter = new PrintWriter(servletOutputStream);
+  private final PrintWriter printWriter = new PrintWriter(servletOutputStream, false, UTF_8);
   private int status = HttpServletResponse.SC_OK;
 
   @Override

File: java/server/test/org/openqa/testing/HeaderContainer.java
Patch:
@@ -83,6 +83,6 @@ public void addIntHeader(String name, int i) {
 
   public int getIntHeader(String name) {
     String value = getHeader(name);
-    return value == null ? -1 : Integer.valueOf(value);
+    return value == null ? -1 : Integer.parseInt(value);
   }
 }

File: java/client/src/com/thoughtworks/selenium/HttpCommandProcessor.java
Patch:
@@ -271,7 +271,7 @@ protected void setSessionInProgress(String result) {
   @Override
   public void stop() {
     if (hasSessionInProgress()) {
-      doCommand("testComplete", null);
+      doCommand("testComplete", new String[0]);
     }
     setSessionInProgress(null);
   }

File: java/client/src/com/thoughtworks/selenium/SeleneseTestNgHelper.java
Patch:
@@ -34,7 +34,7 @@
 
 public class SeleneseTestNgHelper extends SeleneseTestBase {
 
-  private static Selenium staticSelenium;
+  private Selenium staticSelenium;
 
   @BeforeTest
   @Override
@@ -110,7 +110,7 @@ public static void assertEquals(String actual, String expected) {
 
   // @Override static method of super class (which assumes JUnit conventions)
   public static void assertEquals(String actual, String[] expected) {
-    SeleneseTestBase.assertEquals(expected, actual);
+    SeleneseTestBase.assertEquals(expected, new String[] {actual});
   }
 
   // @Override static method of super class (which assumes JUnit conventions)

File: java/client/src/com/thoughtworks/selenium/Wait.java
Patch:
@@ -98,7 +98,7 @@ public void wait(String message, long timeoutInMilliseconds, long intervalInMill
     throw new WaitTimedOutException(message);
   }
 
-  public class WaitTimedOutException extends RuntimeException {
+  public static class WaitTimedOutException extends RuntimeException {
 
     private static final long serialVersionUID = 1L;
 

File: java/client/src/com/thoughtworks/selenium/webdriven/SeleneseCommand.java
Patch:
@@ -53,7 +53,7 @@ public void setDefaultTimeout(long defaultTimeout) {
   protected long toLong(String timeout) {
     // Of course, a non-breaking space doesn't count as whitespace.
     timeout = timeout.replace('\u00A0',' ').trim();
-    return "".equals(timeout) ? defaultTimeout : Long.valueOf(timeout);
+    return "".equals(timeout) ? defaultTimeout : Long.parseLong(timeout);
   }
 
   protected abstract T handleSeleneseCommand(WebDriver driver, String locator, String value);

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/IsSomethingSelected.java
Patch:
@@ -38,6 +38,6 @@ public IsSomethingSelected(JavascriptLibrary library) {
   protected Boolean handleSeleneseCommand(WebDriver driver, String selectLocator, String ignored) {
     Object value = library.executeScript(driver, script, selectLocator);
 
-    return Boolean.TRUE == value;
+    return Boolean.TRUE.equals(value);
   }
 }

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/IsTextPresent.java
Patch:
@@ -38,6 +38,6 @@ protected Boolean handleSeleneseCommand(WebDriver driver, String pattern, String
         "return (" + script + ")(arguments[0]);", pattern);
 
     // Handle the null case
-    return Boolean.TRUE == result;
+    return Boolean.TRUE.equals(result);
   }
 }

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/WaitForCondition.java
Patch:
@@ -59,7 +59,7 @@ public boolean until() {
           return true;
         }
       }
-    }.wait("Failed to resolve " + script, Long.valueOf(timeout));
+    }.wait("Failed to resolve " + script, Long.parseLong(timeout));
 
     return null;
   }

File: java/client/src/org/openqa/selenium/Cookie.java
Patch:
@@ -176,7 +176,7 @@ public boolean isHttpOnly() {
   }
 
   public Date getExpiry() {
-    return expiry;
+    return expiry == null ? null : new Date(expiry.getTime());
   }
 
   public String getSameSite() {
@@ -304,7 +304,7 @@ public Builder path(String path) {
     }
 
     public Builder expiresOn(Date expiry) {
-      this.expiry = expiry;
+      this.expiry = expiry == null ? null : new Date(expiry.getTime());
       return this;
     }
 

File: java/client/src/org/openqa/selenium/Dimension.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.openqa.selenium;
 
+import java.util.Objects;
+
 /**
  * Similar to Point - implement locally to avoid depending on GWT.
  */
@@ -49,9 +51,7 @@ public boolean equals(Object o) {
 
   @Override
   public int hashCode() {
-    // Assuming height, width, rarely exceed 4096 pixels, shifting
-    // by 12 should provide a good hash value.
-    return width << 12 + height;
+    return Objects.hash(width, height);
   }
 
   @Override

File: java/client/src/org/openqa/selenium/Platform.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium;
 
+import java.util.Arrays;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
@@ -254,7 +255,7 @@ public boolean is(Platform compareWith) {
   }
 
   public String[] getPartOfOsName() {
-    return partOfOsName;
+    return Arrays.copyOf(partOfOsName, partOfOsName.length);
   }
 
   private static Platform current;

File: java/client/src/org/openqa/selenium/Point.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.openqa.selenium;
 
+import java.util.Objects;
+
 /**
  * A copy of java.awt.Point, to remove dependency on awt.
  */
@@ -53,9 +55,7 @@ public boolean equals(Object o) {
 
   @Override
   public int hashCode() {
-    // Assuming x,y rarely exceed 4096 pixels, shifting
-    // by 12 should provide a good hash value.
-    return x << 12 + y;
+    return Objects.hash(x, y);
   }
 
   public void move(int newX, int newY) {

File: java/client/src/org/openqa/selenium/firefox/ClasspathExtension.java
Patch:
@@ -49,7 +49,9 @@ public void writeTo(File extensionsDir) throws IOException {
     File extractedXpi = new File(holdingPen, loadFrom);
     File parentDir = extractedXpi.getParentFile();
     if (!parentDir.exists()) {
-      parentDir.mkdirs();
+      if (!parentDir.mkdirs()) {
+        throw new IOException("Unable to create directory for extracted extension");
+      }
     }
 
     URL resourceUrl = Resources.getResource(loadResourcesUsing, loadFrom);

File: java/client/src/org/openqa/selenium/firefox/FileExtension.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.firefox;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.openqa.selenium.json.Json.MAP_TYPE;
 
 import org.openqa.selenium.WebDriverException;
@@ -128,7 +129,7 @@ private String getExtensionId(File root) {
   private String readIdFromManifestJson(File root) {
     final String MANIFEST_JSON_FILE = "manifest.json";
     File manifestJsonFile = new File(root, MANIFEST_JSON_FILE);
-    try (Reader reader = new FileReader(manifestJsonFile);
+    try (Reader reader = new FileReader(manifestJsonFile, UTF_8);
          JsonInput json = new Json().newInput(reader)) {
       String addOnId = null;
 

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.firefox;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.Collections.singletonMap;
 import static org.openqa.selenium.remote.CapabilityType.PROXY;
 
@@ -259,7 +260,7 @@ public <X> X getFullPageScreenshotAs(OutputType<X> outputType) throws WebDriverE
       String base64EncodedPng = (String) result;
       return outputType.convertFromBase64Png(base64EncodedPng);
     } else if (result instanceof byte[]) {
-      String base64EncodedPng = new String((byte[]) result);
+      String base64EncodedPng = new String((byte[]) result, UTF_8);
       return outputType.convertFromBase64Png(base64EncodedPng);
     } else {
       throw new RuntimeException(String.format("Unexpected result for %s command: %s",

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -33,6 +33,7 @@
 import java.io.Reader;
 import java.io.StringReader;
 import java.net.URL;
+import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -110,7 +111,7 @@ protected FirefoxProfile(Reader defaultsReader, File profileDir) {
   protected Reader onlyOverrideThisIfYouKnowWhatYouAreDoing() {
     URL resource = Resources.getResource(FirefoxProfile.class, defaultPrefs);
     try {
-      return new InputStreamReader(resource.openStream());
+      return new InputStreamReader(resource.openStream(), Charset.defaultCharset());
     } catch (IOException e) {
       throw new WebDriverException(e);
     }
@@ -247,7 +248,7 @@ public void updateUserPrefs(File userPrefs) {
       prefs.setPreference("browser.startup.page", 1);
     }
 
-    try (FileWriter writer = new FileWriter(userPrefs)) {
+    try (FileWriter writer = new FileWriter(userPrefs, Charset.defaultCharset())) {
       prefs.writeTo(writer);
     } catch (IOException e) {
       throw new WebDriverException(e);

File: java/client/src/org/openqa/selenium/firefox/Preferences.java
Patch:
@@ -33,6 +33,7 @@
 import java.io.IOException;
 import java.io.Reader;
 import java.io.Writer;
+import java.nio.charset.Charset;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.regex.Matcher;
@@ -67,7 +68,7 @@ public Preferences(Reader defaults) {
 
   public Preferences(Reader defaults, File userPrefs) {
     readDefaultPreferences(defaults);
-    try (FileReader reader = new FileReader(userPrefs)) {
+    try (FileReader reader = new FileReader(userPrefs, Charset.defaultCharset())) {
       readPreferences(reader);
     } catch (IOException e) {
       throw new WebDriverException(e);

File: java/client/src/org/openqa/selenium/firefox/ProfilesIni.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
+import java.nio.charset.Charset;
 import java.text.MessageFormat;
 import java.util.HashMap;
 import java.util.Map;
@@ -56,7 +57,7 @@ protected Map<String, File> readProfiles(File appData) {
 
     BufferedReader reader = null;
     try {
-      reader = new BufferedReader(new FileReader(profilesIni));
+      reader = new BufferedReader(new FileReader(profilesIni, Charset.defaultCharset()));
 
       String line = reader.readLine();
 

File: java/client/src/org/openqa/selenium/io/CircularOutputStream.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.io;
 
 import java.io.OutputStream;
+import java.nio.charset.Charset;
 
 /**
  * Captures the last N bytes of output.
@@ -59,7 +60,7 @@ public String toString() {
     // Handle the partially filled array as a special case
     if (!filled) {
       System.arraycopy(buffer, 0, toReturn, 0, end);
-      return new String(toReturn);
+      return new String(toReturn, Charset.defaultCharset());
     }
 
     int copyStart = buffer.length - start;
@@ -69,6 +70,6 @@ public String toString() {
 
     System.arraycopy(buffer, start, toReturn, 0, copyStart);
     System.arraycopy(buffer, 0, toReturn, copyStart, end);
-    return new String(toReturn);
+    return new String(toReturn, Charset.defaultCharset());
   }
 }

File: java/client/src/org/openqa/selenium/logging/LoggingHandler.java
Patch:
@@ -65,7 +65,7 @@ public synchronized  void publish(LogRecord logRecord) {
   }
 
   @Override
-  public void flush() {
+  public synchronized void flush() {
     records = new ArrayDeque<>();
   }
 

File: java/client/src/org/openqa/selenium/mobile/NetworkConnection.java
Patch:
@@ -57,7 +57,6 @@ class ConnectionType {
     Future for Network Data types. With a new constructor accepting this enum.
     public enum DataType {
       _2G, _3G, _4G, LTE
-
     }
     */
 

File: java/client/src/org/openqa/selenium/net/HostIdentifier.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.NetworkInterface;
+import java.nio.charset.Charset;
 import java.util.Enumeration;
 import java.util.concurrent.TimeUnit;
 
@@ -48,7 +49,7 @@ public class HostIdentifier {
           process.waitFor(2, TimeUnit.SECONDS);
         }
         if (process.exitValue() == 0) {
-          try (InputStreamReader isr = new InputStreamReader(process.getInputStream());
+          try (InputStreamReader isr = new InputStreamReader(process.getInputStream(), Charset.defaultCharset());
                BufferedReader reader = new BufferedReader(isr)) {
             host = reader.readLine();
           }

File: java/client/src/org/openqa/selenium/net/LinuxEphemeralPortRangeDetector.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
+import java.nio.charset.Charset;
 
 public class LinuxEphemeralPortRangeDetector implements EphemeralPortRangeDetector {
 
@@ -32,7 +33,7 @@ public class LinuxEphemeralPortRangeDetector implements EphemeralPortRangeDetect
   public static LinuxEphemeralPortRangeDetector getInstance() {
     File file = new File("/proc/sys/net/ipv4/ip_local_port_range");
     if (file.exists() && file.canRead()) {
-      try (Reader inputFil = new FileReader(file)) {
+      try (Reader inputFil = new FileReader(file, Charset.defaultCharset())) {
         return new LinuxEphemeralPortRangeDetector(inputFil);
       } catch (IOException e) {
         throw new RuntimeException(e);
@@ -49,7 +50,7 @@ public static LinuxEphemeralPortRangeDetector getInstance() {
       String[] split = in.readLine().split("\\s+");
       lowPort = Integer.parseInt(split[0]);
       highPort = Integer.parseInt(split[1]);
-    } catch (IOException ignore) {
+    } catch (IOException | NullPointerException ignore) {
     }
     firstEphemeralPort = lowPort;
     lastEphemeralPort = highPort;

File: java/client/src/org/openqa/selenium/net/NetworkUtils.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.InputStreamReader;
 import java.net.ConnectException;
 import java.net.InetAddress;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
@@ -83,7 +84,7 @@ public String getPrivateLocalAddress() {
    */
   public String getNonLoopbackAddressOfThisMachine() {
     InetAddress ip4NonLoopbackAddressOfThisMachine = getIp4NonLoopbackAddressOfThisMachine();
-    if (! Objects.equals(cachedIp4NonLoopbackAddressOfThisMachine, ip4NonLoopbackAddressOfThisMachine)) {
+    if (!Objects.equals(cachedIp4NonLoopbackAddressOfThisMachine, ip4NonLoopbackAddressOfThisMachine)) {
       cachedIp4NonLoopbackAddressOfThisMachine = ip4NonLoopbackAddressOfThisMachine;
       cachedIp4NonLoopbackAddressHostName = ip4NonLoopbackAddressOfThisMachine.getHostAddress();
     }
@@ -270,7 +271,7 @@ private synchronized void determineHostnameAndAddress() {
           process.waitFor(2, TimeUnit.SECONDS);
         }
         if (process.exitValue() == 0) {
-          try (InputStreamReader isr = new InputStreamReader(process.getInputStream());
+          try (InputStreamReader isr = new InputStreamReader(process.getInputStream(), Charset.defaultCharset());
                BufferedReader reader = new BufferedReader(isr)) {
             host = reader.readLine();
           }

File: java/client/src/org/openqa/selenium/os/OsProcess.java
Patch:
@@ -36,6 +36,8 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
+import java.nio.charset.Charset;
+import java.nio.charset.StandardCharsets;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -87,7 +89,7 @@ private Map<String, String> getMergedEnv() {
   }
 
   private ByteArrayInputStream getInputStream() {
-    return allInput != null ? new ByteArrayInputStream(allInput.getBytes()) : null;
+    return allInput != null ? new ByteArrayInputStream(allInput.getBytes(Charset.defaultCharset())) : null;
   }
 
   public void executeAsync() {

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.remote;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.openqa.selenium.remote.CapabilityType.LOGGING_PREFS;
 import static org.openqa.selenium.remote.CapabilityType.PLATFORM;
@@ -296,7 +297,7 @@ public <X> X getScreenshotAs(OutputType<X> outputType) throws WebDriverException
       String base64EncodedPng = (String) result;
       return outputType.convertFromBase64Png(base64EncodedPng);
     } else if (result instanceof byte[]) {
-      String base64EncodedPng = new String((byte[]) result);
+      String base64EncodedPng = new String((byte[]) result, UTF_8);
       return outputType.convertFromBase64Png(base64EncodedPng);
     } else {
       throw new RuntimeException(String.format("Unexpected result for %s command: %s",
@@ -1040,7 +1041,7 @@ public void removeCredential(byte[] credentialId) {
     @Override
     public void removeCredential(String credentialId) {
       execute(DriverCommand.REMOVE_CREDENTIAL,
-          ImmutableMap.of("authenticatorId", id, "credentialId", credentialId)).getValue();
+          ImmutableMap.of("authenticatorId", id, "credentialId", credentialId));
     }
 
     @Override

File: java/client/src/org/openqa/selenium/remote/RemoteWebElement.java
Patch:
@@ -45,6 +45,8 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 public class RemoteWebElement implements WebElement, WrapsDriver, TakesScreenshot, Locatable {
 
   private String foundBy;
@@ -362,7 +364,7 @@ public <X> X getScreenshotAs(OutputType<X> outputType) throws WebDriverException
       String base64EncodedPng = (String) result;
       return outputType.convertFromBase64Png(base64EncodedPng);
     } else if (result instanceof byte[]) {
-      String base64EncodedPng = new String((byte[]) result);
+      String base64EncodedPng = new String((byte[]) result, UTF_8);
       return outputType.convertFromBase64Png(base64EncodedPng);
     } else {
       throw new RuntimeException(String.format("Unexpected result for %s command: %s",

File: java/client/src/org/openqa/selenium/remote/codec/w3c/W3CHttpResponseCodec.java
Patch:
@@ -135,7 +135,7 @@ public Response decode(HttpResponse encodedResponse) {
     response.setState("success");
     response.setStatus(ErrorCodes.SUCCESS);
     if (!content.isEmpty()) {
-      if (contentType.startsWith("application/json") || Strings.isNullOrEmpty("")) {
+      if (contentType.startsWith("application/json")) {
         Map<String, Object> parsed = json.toType(content, MAP_TYPE);
         if (parsed.containsKey("value")) {
           Object value = parsed.get("value");

File: java/client/src/org/openqa/selenium/remote/http/BinaryMessage.java
Patch:
@@ -41,6 +41,5 @@ public BinaryMessage(byte[] data) {
   public byte[] data() {
     return data;
   }
-
 }
 

File: java/client/src/org/openqa/selenium/remote/http/UrlTemplate.java
Patch:
@@ -87,6 +87,7 @@ public UrlTemplate.Match match(String matchAgainst) {
     return new Match(matchAgainst, params.build());
   }
 
+  @SuppressWarnings("InnerClassMayBeStatic")
   public class Match {
     private final String url;
     private final Map<String, String> parameters;

File: java/client/src/org/openqa/selenium/remote/http/reactor/ReactorClient.java
Patch:
@@ -50,6 +50,7 @@
 import java.net.URI;
 import java.net.URISyntaxException;
 import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ArrayList;
@@ -153,7 +154,7 @@ public HttpResponse execute(HttpRequest request) {
         res.responseHeaders().entries().forEach(
           entry -> toReturn.addHeader(entry.getKey(), entry.getValue()));
         return buf.asInputStream()
-          .switchIfEmpty(Mono.just(new ByteArrayInputStream("".getBytes())))
+          .switchIfEmpty(Mono.just(new ByteArrayInputStream("".getBytes(UTF_8))))
           .zipWith(Mono.just(toReturn));
       }).block();
     result.getT2().setContent(result::getT1);

File: java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java
Patch:
@@ -269,8 +269,8 @@ private Object unpackWrappedElement(Object arg) {
     } else if (arg instanceof Map<?, ?>) {
       Map<?, ?> aMap = (Map<?, ?>) arg;
       Map<Object, Object> toReturn = new HashMap<>();
-      for (Object key : aMap.keySet()) {
-        toReturn.put(key, unpackWrappedElement(aMap.get(key)));
+      for (Map.Entry<?, ?> entry : aMap.entrySet()) {
+        toReturn.put(entry.getKey(), unpackWrappedElement(aMap.get(entry.getValue())));
       }
       return toReturn;
     } else if (arg instanceof EventFiringWebElement) {

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -402,7 +402,6 @@ public void testShouldNotHandleAlertInAnotherWindow() {
         .withBody(String.format(
             "<a id='open-new-window' href='%s' target='newwindow'>open new window</a>", pageWithOnLoad))));
 
-    String mainWindow = driver.getWindowHandle();
     Set<String> currentWindowHandles = driver.getWindowHandles();
     driver.findElement(By.id("open-new-window")).click();
     wait.until(newWindowIsOpened(currentWindowHandles));

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -69,6 +69,7 @@ protected void finished(Description description) {
         driver.getWindowHandles().stream().filter(handle -> ! mainWindow.equals(handle))
             .forEach(handle -> driver.switchTo().window(handle).close());
       } catch (Exception ignore) {
+        System.err.println("Ignoring: " + ignore.getMessage());
       }
       try {
         driver.switchTo().window(mainWindow);

File: java/client/test/org/openqa/selenium/build/Build.java
Patch:
@@ -24,6 +24,7 @@
 
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
+import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -98,7 +99,7 @@ private BuildWatcher(Process buildProcess) {
     @Override
     public void run() {
       try (BufferedReader buildOutput = new BufferedReader(
-          new InputStreamReader(buildProcess.getInputStream()), 8192)) {
+          new InputStreamReader(buildProcess.getInputStream(), Charset.defaultCharset()), 8192)) {
         for (String s = buildOutput.readLine(); s != null && !interrupted(); s =
             buildOutput.readLine()) {
           try {

File: java/client/test/org/openqa/selenium/environment/webserver/AppServerTestBase.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.environment.webserver;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.remote.http.Contents.string;
@@ -123,7 +124,7 @@ public void manifestHasCorrectMimeType() throws IOException {
     HttpClient client = factory.createClient(new URL(url));
     HttpResponse response = client.execute(new HttpRequest(HttpMethod.GET, url));
 
-    System.out.printf("Content for %s was %s\n", url, string(response));
+    System.out.printf("Content for %s was %s%n", url, string(response));
 
     assertTrue(StreamSupport.stream(response.getHeaders("Content-Type").spliterator(), false)
         .anyMatch(header -> header.contains(APPCACHE_MIME_TYPE)));
@@ -134,7 +135,7 @@ public void uploadsFile() throws Throwable {
     String FILE_CONTENTS = "Uploaded file";
     File testFile = File.createTempFile("webdriver", "tmp");
     testFile.deleteOnExit();
-    Files.write(testFile.toPath(), FILE_CONTENTS.getBytes());
+    Files.write(testFile.toPath(), FILE_CONTENTS.getBytes(UTF_8));
 
     driver.get(server.whereIs("upload.html"));
     driver.findElement(By.id("upload")).sendKeys(testFile.getAbsolutePath());

File: java/client/test/org/openqa/selenium/environment/webserver/BasicAuth.java
Patch:
@@ -24,6 +24,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 public class BasicAuth extends HttpServlet {
   private static final String CREDENTIALS = "test:test";
   private final Base64.Decoder decoder = Base64.getDecoder();
@@ -44,7 +46,7 @@ private boolean isAuthorized(String auth) {
       final int index = auth.indexOf(' ') + 1;
 
       if (index > 0) {
-        final String credentials = new String(decoder.decode(auth.substring(index)));
+        final String credentials = new String(decoder.decode(auth.substring(index)), UTF_8);
         return CREDENTIALS.equals(credentials);
       }
     }

File: java/client/test/org/openqa/selenium/environment/webserver/BasicAuthHandler.java
Patch:
@@ -51,7 +51,7 @@ private boolean isAuthorized(String auth) {
       final int index = auth.indexOf(' ') + 1;
 
       if (index > 0) {
-        final String credentials = new String(decoder.decode(auth.substring(index)));
+        final String credentials = new String(decoder.decode(auth.substring(index)), UTF_8);
         return CREDENTIALS.equals(credentials);
       }
     }

File: java/client/test/org/openqa/selenium/environment/webserver/CreatePageServlet.java
Patch:
@@ -32,6 +32,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 /**
  * Simple API to create pages on server.
  * Request format (JSON):
@@ -49,7 +51,7 @@ protected void doPost(HttpServletRequest request,
 
     Path tempPageDir = Paths.get(getServletContext().getInitParameter("tempPageDir"));
     Path target = Files.createTempFile(tempPageDir, "page", ".html");
-    try (Writer out = new FileWriter(target.toFile())) {
+    try (Writer out = new FileWriter(target.toFile(), UTF_8)) {
       out.write(json.get("content"));
     }
 

File: java/client/test/org/openqa/selenium/environment/webserver/ManifestServlet.java
Patch:
@@ -28,6 +28,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 public class ManifestServlet extends HttpServlet {
   @Override
   protected void doGet(HttpServletRequest request, HttpServletResponse response)
@@ -38,7 +40,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)
     String manifestContent = "";
 
     try (InputStream is = new FileInputStream(manifestPath)) {
-      manifestContent = new String(ByteStreams.toByteArray(is));
+      manifestContent = new String(ByteStreams.toByteArray(is), UTF_8);
     } catch (IOException e) {
       throw new ServletException("Failed to read cache-manifest file: " + manifestPath);
     }

File: java/client/test/org/openqa/selenium/environment/webserver/UploadServlet.java
Patch:
@@ -53,7 +53,9 @@ protected void doPost(HttpServletRequest request,
       if (part.getName().equalsIgnoreCase("upload")) {
         byte[] buffer = new byte[(int) part.getSize()];
         try (InputStream in = part.getInputStream()) {
-          in.read(buffer, 0, (int) part.getSize());
+          if (in.read(buffer, 0, (int) part.getSize()) == -1) {
+            throw new IOException("Unable to read all content");
+          }
           content.append(new String(buffer, StandardCharsets.UTF_8));
         }
       }

File: java/client/test/org/openqa/selenium/javascript/JavaScriptTestSuite.java
Patch:
@@ -164,7 +164,7 @@ public void run(RunNotifier notifier) {
 
   private static class DriverSupplier implements Supplier<WebDriver>, Closeable {
 
-    private WebDriver driver;
+    private volatile WebDriver driver;
 
     @Override
     public WebDriver get() {

File: java/client/test/org/openqa/selenium/testing/StaticResources.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.UncheckedIOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.util.Objects;
 import java.util.logging.Logger;
 
 class StaticResources {

File: java/client/test/org/openqa/selenium/testing/drivers/GridSupplier.java
Patch:
@@ -94,7 +94,7 @@ private synchronized void startServers() {
       HttpResponse response = c.execute(req);
       Map<?, ?> value = json.toType(string(response), Map.class);
 
-      return ((Map<?, ?>) value.get("value")).get("ready") == Boolean.TRUE;
+      return Boolean.TRUE.equals(((Map<?, ?>) value.get("value")).get("ready"));
     });
 
     started = true;

File: java/server/src/org/openqa/selenium/grid/data/NodeStatus.java
Patch:
@@ -51,7 +51,9 @@ public NodeStatus(
       Secret registrationSecret) {
     this.nodeId = Require.nonNull("Node id", nodeId);
     this.externalUri = Require.nonNull("URI", externalUri);
-    this.maxSessionCount = Require.positive("Max session count", maxSessionCount);
+    this.maxSessionCount = Require.positive("Max session count",
+        maxSessionCount,
+"Make sure that a driver is available on $PATH");
     this.slots = ImmutableSet.copyOf(Require.nonNull("Slots", slots));
     this.availability = Require.nonNull("Availability", availability);
     this.registrationSecret = registrationSecret;

File: java/server/src/org/openqa/selenium/events/EventBus.java
Patch:
@@ -24,7 +24,7 @@
 
 public interface EventBus extends Closeable, HasReadyState {
 
-  void addListener(Type type, Consumer<Event> onType);
+  void addListener(EventName eventName, Consumer<Event> onType);
 
   void fire(Event event);
 

File: java/server/src/org/openqa/selenium/events/zeromq/BoundZmqEventBus.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.openqa.selenium.events.Event;
 import org.openqa.selenium.events.EventBus;
-import org.openqa.selenium.events.Type;
+import org.openqa.selenium.events.EventName;
 import org.openqa.selenium.net.NetworkUtils;
 import org.zeromq.SocketType;
 import org.zeromq.ZContext;
@@ -77,8 +77,8 @@ public boolean isReady() {
   }
 
   @Override
-  public void addListener(Type type, Consumer<Event> onType) {
-    delegate.addListener(type, onType);
+  public void addListener(EventName eventName, Consumer<Event> onType) {
+    delegate.addListener(eventName, onType);
   }
 
   @Override

File: java/server/src/org/openqa/selenium/grid/commands/EventBusCommand.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.cli.CliCommand;
 import org.openqa.selenium.events.Event;
 import org.openqa.selenium.events.EventBus;
-import org.openqa.selenium.events.Type;
+import org.openqa.selenium.events.EventName;
 import org.openqa.selenium.grid.TemplateGridCommand;
 import org.openqa.selenium.grid.config.Config;
 import org.openqa.selenium.grid.config.MapConfig;
@@ -106,7 +106,7 @@ protected void execute(Config config) {
         Route.get("/status").to(() -> req -> {
           CountDownLatch latch = new CountDownLatch(1);
 
-          Type healthCheck = new Type("healthcheck");
+          EventName healthCheck = new EventName("healthcheck");
           bus.addListener(healthCheck, event -> latch.countDown());
           bus.fire(new Event(healthCheck, "ping"));
 

File: java/server/src/org/openqa/selenium/grid/data/NodeAddedEvent.java
Patch:
@@ -18,11 +18,11 @@
 package org.openqa.selenium.grid.data;
 
 import org.openqa.selenium.events.Event;
-import org.openqa.selenium.events.Type;
+import org.openqa.selenium.events.EventName;
 
 public class NodeAddedEvent extends Event {
 
-  public static final Type NODE_ADDED = new Type("node-added");
+  public static final EventName NODE_ADDED = new EventName("node-added");
 
   public NodeAddedEvent(NodeId nodeId) {
     super(NODE_ADDED, nodeId);

File: java/server/src/org/openqa/selenium/grid/data/NodeDrainStarted.java
Patch:
@@ -18,11 +18,11 @@
 package org.openqa.selenium.grid.data;
 
 import org.openqa.selenium.events.Event;
-import org.openqa.selenium.events.Type;
+import org.openqa.selenium.events.EventName;
 
 public class NodeDrainStarted extends Event {
 
-  public static final Type NODE_DRAIN_STARTED = new Type("node-drain-started");
+  public static final EventName NODE_DRAIN_STARTED = new EventName("node-drain-started");
 
   public NodeDrainStarted(NodeId id) {
     super(NODE_DRAIN_STARTED, id);

File: java/server/src/org/openqa/selenium/grid/data/NodeRejectedEvent.java
Patch:
@@ -18,13 +18,13 @@
 package org.openqa.selenium.grid.data;
 
 import org.openqa.selenium.events.Event;
-import org.openqa.selenium.events.Type;
+import org.openqa.selenium.events.EventName;
 
 import java.net.URI;
 
 public class NodeRejectedEvent extends Event {
 
-  public static final Type NODE_REJECTED = new Type("node-rejected");
+  public static final EventName NODE_REJECTED = new EventName("node-rejected");
 
   public NodeRejectedEvent(URI uri) {
     super(NODE_REJECTED, uri);

File: java/server/src/org/openqa/selenium/grid/data/NodeRemovedEvent.java
Patch:
@@ -18,11 +18,11 @@
 package org.openqa.selenium.grid.data;
 
 import org.openqa.selenium.events.Event;
-import org.openqa.selenium.events.Type;
+import org.openqa.selenium.events.EventName;
 
 public class NodeRemovedEvent extends Event {
 
-  public static final Type NODE_REMOVED = new Type("node-removed");
+  public static final EventName NODE_REMOVED = new EventName("node-removed");
 
   public NodeRemovedEvent(NodeId nodeId) {
     super(NODE_REMOVED, nodeId);

File: java/server/src/org/openqa/selenium/grid/data/NodeStatusEvent.java
Patch:
@@ -18,12 +18,12 @@
 package org.openqa.selenium.grid.data;
 
 import org.openqa.selenium.events.Event;
-import org.openqa.selenium.events.Type;
+import org.openqa.selenium.events.EventName;
 import org.openqa.selenium.internal.Require;
 
 public class NodeStatusEvent extends Event {
 
-  public static final Type NODE_STATUS = new Type("node-status");
+  public static final EventName NODE_STATUS = new EventName("node-status");
 
   public NodeStatusEvent(NodeStatus status) {
     super(NODE_STATUS, Require.nonNull("Node status", status));

File: java/server/src/org/openqa/selenium/grid/data/SessionClosedEvent.java
Patch:
@@ -18,12 +18,12 @@
 package org.openqa.selenium.grid.data;
 
 import org.openqa.selenium.events.Event;
-import org.openqa.selenium.events.Type;
+import org.openqa.selenium.events.EventName;
 import org.openqa.selenium.remote.SessionId;
 
 public class SessionClosedEvent extends Event {
 
-  public static final Type SESSION_CLOSED = new Type("session-closed");
+  public static final EventName SESSION_CLOSED = new EventName("session-closed");
 
   public SessionClosedEvent(SessionId id) {
     super(SESSION_CLOSED, id);

File: java/server/test/org/openqa/selenium/events/EventBusTest.java
Patch:
@@ -78,7 +78,7 @@ public void closeBus() {
 
   @Test(timeout = 4000)
   public void shouldBeAbleToPublishToAKnownTopic() throws InterruptedException {
-    Type cheese = new Type("cheese");
+    EventName cheese = new EventName("cheese");
     Event event = new Event(cheese, null);
 
     CountDownLatch latch = new CountDownLatch(1);
@@ -92,9 +92,9 @@ public void shouldBeAbleToPublishToAKnownTopic() throws InterruptedException {
   @Test(timeout = 4000)
   public void shouldNotReceiveEventsNotMeantForTheTopic() {
     AtomicInteger count = new AtomicInteger(0);
-    bus.addListener(new Type("peas"), e -> count.incrementAndGet());
+    bus.addListener(new EventName("peas"), e -> count.incrementAndGet());
 
-    bus.fire(new Event(new Type("cheese"), null));
+    bus.fire(new Event(new EventName("cheese"), null));
 
     assertThat(count.get()).isEqualTo(0);
   }

File: java/server/test/org/openqa/selenium/grid/distributor/DistributorTest.java
Patch:
@@ -28,13 +28,12 @@
 import org.openqa.selenium.NoSuchSessionException;
 import org.openqa.selenium.SessionNotCreatedException;
 import org.openqa.selenium.events.EventBus;
-import org.openqa.selenium.events.Type;
+import org.openqa.selenium.events.EventName;
 import org.openqa.selenium.events.local.GuavaEventBus;
 import org.openqa.selenium.grid.data.Availability;
 import org.openqa.selenium.grid.data.CreateSessionRequest;
 import org.openqa.selenium.grid.data.CreateSessionResponse;
 import org.openqa.selenium.grid.data.DistributorStatus;
-import org.openqa.selenium.grid.data.NodeAddedEvent;
 import org.openqa.selenium.grid.data.NodeStatus;
 import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.data.Slot;
@@ -370,7 +369,7 @@ public void registeringTheWrongRegistrationSecretDoesNotWork()
     URI nodeUri = new URI("http://example:5678");
     URI routableUri = new URI("http://localhost:1234");
 
-    Type rejected = new Type("node-rejected");
+    EventName rejected = new EventName("node-rejected");
     CountDownLatch latch = new CountDownLatch(1);
     bus.addListener(rejected, e -> latch.countDown());
 

File: java/server/src/org/openqa/selenium/grid/distributor/Distributor.java
Patch:
@@ -132,7 +132,7 @@ protected Distributor(
     Secret registrationSecret) {
     this.tracer = Require.nonNull("Tracer", tracer);
     Require.nonNull("HTTP client factory", httpClientFactory);
-    this.slotSelector = Require.nonNull("Host selector", slotSelector);
+    this.slotSelector = Require.nonNull("Slot selector", slotSelector);
     this.sessions = Require.nonNull("Session map", sessions);
 
     RequiresSecretFilter requiresSecret = new RequiresSecretFilter(registrationSecret);

File: java/server/src/org/openqa/selenium/grid/docker/DockerSession.java
Patch:
@@ -40,11 +40,12 @@ class DockerSession extends ProtocolConvertingSession {
     HttpClient client,
     SessionId id,
     URL url,
+    Capabilities stereotype,
     Capabilities capabilities,
     Dialect downstream,
     Dialect upstream,
     Instant startTime) {
-    super(tracer, client, id, url, downstream, upstream, capabilities, startTime);
+    super(tracer, client, id, url, downstream, upstream, stereotype, capabilities, startTime);
     this.container = Require.nonNull("Container", container);
   }
 

File: java/server/src/org/openqa/selenium/grid/docker/DockerSessionFactory.java
Patch:
@@ -185,6 +185,7 @@ public Optional<ActiveSession> apply(CreateSessionRequest sessionRequest) {
         client,
         id,
         remoteAddress,
+        stereotype,
         capabilities,
         downstream,
         result.getDialect(),

File: java/server/src/org/openqa/selenium/grid/node/ActiveSession.java
Patch:
@@ -29,6 +29,8 @@ public interface ActiveSession extends HttpHandler {
 
   SessionId getId();
 
+  Capabilities getStereotype();
+
   Capabilities getCapabilities();
 
   Instant getStartTime();

File: java/server/src/org/openqa/selenium/grid/node/ProtocolConvertingSession.java
Patch:
@@ -48,9 +48,10 @@ protected ProtocolConvertingSession(
     URL url,
     Dialect downstream,
     Dialect upstream,
+    Capabilities stereotype,
     Capabilities capabilities,
     Instant startTime) {
-    super(id, url, downstream, upstream, capabilities, startTime);
+    super(id, url, downstream, upstream, stereotype, capabilities, startTime);
 
     Require.nonNull("HTTP client", client);
 

File: java/server/src/org/openqa/selenium/grid/node/k8s/OneShotNode.java
Patch:
@@ -287,6 +287,7 @@ public Session getSession(SessionId id) throws NoSuchSessionException {
     return new Session(
       sessionId,
       getUri(),
+      stereotype,
       capabilities,
       sessionStart); }
 

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -384,7 +384,7 @@ private Session createExternalSession(ActiveSession other, URI externalUri) {
       toUse = new PersistentCapabilities(toUse).setCapability("se:options", updated);
     }
 
-    return new Session(other.getId(), externalUri, toUse, Instant.now());
+    return new Session(other.getId(), externalUri, other.getStereotype(), toUse, Instant.now());
   }
 
   private URI rewrite(String path) {

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNodeFactory.java
Patch:
@@ -86,6 +86,7 @@ private static Collection<SessionFactory> createSessionFactory(
         toReturn.add(new DriverServiceSessionFactory(
           tracer,
           clientFactory,
+          info.getCanonicalCapabilities(),
           c -> freePortBuilder.score(c) > 0,
           freePortBuilder));
       });

File: java/server/test/org/openqa/selenium/grid/distributor/selector/DefaultSlotSelectorTest.java
Patch:
@@ -172,7 +172,7 @@ private URI createUri() {
 
   private class Handler extends Session implements HttpHandler {
     private Handler(Capabilities capabilities) {
-      super(new SessionId(UUID.randomUUID()), uri, capabilities, Instant.now());
+      super(new SessionId(UUID.randomUUID()), uri, new ImmutableCapabilities(), capabilities, Instant.now());
     }
 
     @Override

File: java/server/test/org/openqa/selenium/grid/node/config/DriverServiceSessionFactoryTest.java
Patch:
@@ -50,6 +50,7 @@
 import static org.mockito.Mockito.verifyNoInteractions;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
+import static org.openqa.selenium.remote.CapabilityType.BROWSER_NAME;
 
 public class DriverServiceSessionFactoryTest {
 
@@ -164,7 +165,8 @@ public void shouldInstantiateSessionIfEverythingIsOK() throws IOException {
 
   private DriverServiceSessionFactory factoryFor(String browser, DriverService.Builder builder) {
     Predicate<Capabilities> predicate = c -> c.getBrowserName().equals(browser);
-    return new DriverServiceSessionFactory(tracer, clientFactory, predicate, builder);
+    ImmutableCapabilities stereotype = new ImmutableCapabilities(BROWSER_NAME, browser);
+    return new DriverServiceSessionFactory(tracer, clientFactory, stereotype, predicate, builder);
   }
 
   private Capabilities toPayload(String browserName) {

File: java/server/test/org/openqa/selenium/grid/node/local/CreateSessionTest.java
Patch:
@@ -68,7 +68,7 @@ public void shouldAcceptAW3CPayload() throws URISyntaxException {
         uri,
         uri,
         null)
-        .add(stereotype, new TestSessionFactory((id, caps) -> new Session(id, uri, caps, Instant.now())))
+        .add(stereotype, new TestSessionFactory((id, caps) -> new Session(id, uri, new ImmutableCapabilities(), caps, Instant.now())))
         .build();
 
     CreateSessionResponse sessionResponse = node.newSession(
@@ -119,7 +119,7 @@ public void ifOnlyJWPPayloadSentResponseShouldBeJWPOnlyIfJWPConfigured()
         uri,
         uri,
         null)
-        .add(stereotype, new TestSessionFactory((id, caps) -> new Session(id, uri, caps, Instant.now())))
+        .add(stereotype, new TestSessionFactory((id, caps) -> new Session(id, uri, new ImmutableCapabilities(), caps, Instant.now())))
         .build();
 
     CreateSessionResponse sessionResponse = node.newSession(
@@ -162,7 +162,7 @@ public void shouldPreferUsingTheW3CProtocol() throws URISyntaxException {
         uri,
         uri,
         null)
-        .add(stereotype, new TestSessionFactory((id, caps) -> new Session(id, uri, caps, Instant.now())))
+        .add(stereotype, new TestSessionFactory((id, caps) -> new Session(id, uri, new ImmutableCapabilities(), caps, Instant.now())))
         .build();
 
     CreateSessionResponse sessionResponse = node.newSession(

File: java/server/test/org/openqa/selenium/grid/node/local/LocalNodeTest.java
Patch:
@@ -68,7 +68,7 @@ public void setUp() throws URISyntaxException {
     URI uri = new URI("http://localhost:1234");
     Capabilities stereotype = new ImmutableCapabilities("cheese", "brie");
     node = LocalNode.builder(tracer, bus, uri, uri, null)
-        .add(stereotype, new TestSessionFactory((id, caps) -> new Session(id, uri, caps, Instant.now())))
+        .add(stereotype, new TestSessionFactory((id, caps) -> new Session(id, uri, stereotype, caps, Instant.now())))
         .build();
 
     CreateSessionResponse sessionResponse = node.newSession(
@@ -164,7 +164,7 @@ public void shouldBeAbleToCreateSessionsConcurrently() throws Exception {
 
     class VerifyingHandler extends Session implements HttpHandler {
       private VerifyingHandler(SessionId id, Capabilities capabilities) {
-        super(id, uri, capabilities, Instant.now());
+        super(id, uri, new ImmutableCapabilities(), capabilities, Instant.now());
       }
 
       @Override

File: java/server/test/org/openqa/selenium/grid/router/EndToEndTest.java
Patch:
@@ -211,7 +211,7 @@ private static SessionFactory createFactory(URI serverUri) {
     class SpoofSession extends Session implements HttpHandler {
 
       private SpoofSession(Capabilities capabilities) {
-        super(new SessionId(UUID.randomUUID()), serverUri, capabilities, Instant.now());
+        super(new SessionId(UUID.randomUUID()), serverUri, new ImmutableCapabilities(), capabilities, Instant.now());
       }
 
       @Override

File: java/server/test/org/openqa/selenium/grid/router/NewSessionCreationTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.google.common.collect.ImmutableSet;
 import org.junit.Before;
 import org.junit.Test;
+import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.WebDriverInfo;
 import org.openqa.selenium.chrome.ChromeDriverInfo;
 import org.openqa.selenium.events.EventBus;
@@ -99,7 +100,7 @@ public void ensureJsCannotCreateANewSession() throws URISyntaxException {
       uri,
       uri,
       null)
-      .add(Browser.detect().getCapabilities(), new TestSessionFactory((id, caps) -> new Session(id, uri, caps, Instant.now())))
+      .add(Browser.detect().getCapabilities(), new TestSessionFactory((id, caps) -> new Session(id, uri, Browser.detect().getCapabilities(), caps, Instant.now())))
       .build();
     distributor.add(node);
 
@@ -145,6 +146,7 @@ private LocalNode.Builder addDriverFactory(
       new DriverServiceSessionFactory(
         tracer,
         clientFactory,
+        info.getCanonicalCapabilities(),
         info::isSupporting,
         driverService));
   }

File: java/server/test/org/openqa/selenium/grid/router/RouterTest.java
Patch:
@@ -93,7 +93,7 @@ public void addingANodeThatIsDownMeansTheGridIsNotReady() throws URISyntaxExcept
     AtomicBoolean isUp = new AtomicBoolean(false);
 
     Node node = LocalNode.builder(tracer, bus, uri, uri, null)
-        .add(capabilities, new TestSessionFactory((id, caps) -> new Session(id, uri, caps, Instant.now())))
+        .add(capabilities, new TestSessionFactory((id, caps) -> new Session(id, uri, new ImmutableCapabilities(), caps, Instant.now())))
         .advanced()
         .healthCheck(() -> new HealthCheck.Result(isUp.get(), "TL;DR"))
         .build();
@@ -111,7 +111,7 @@ public void aNodeThatIsUpAndHasSpareSessionsMeansTheGridIsReady() throws URISynt
     AtomicBoolean isUp = new AtomicBoolean(true);
 
     Node node = LocalNode.builder(tracer, bus, uri, uri, null)
-        .add(capabilities, new TestSessionFactory((id, caps) -> new Session(id, uri, caps, Instant.now())))
+        .add(capabilities, new TestSessionFactory((id, caps) -> new Session(id, uri, new ImmutableCapabilities(), caps, Instant.now())))
         .advanced()
         .healthCheck(() -> new HealthCheck.Result(isUp.get(), "TL;DR"))
         .build();

File: java/server/test/org/openqa/selenium/grid/sessionmap/SessionMapTest.java
Patch:
@@ -65,6 +65,7 @@ public void setUp() throws URISyntaxException {
       id,
       new URI("http://localhost:1234"),
       new ImmutableCapabilities(),
+      new ImmutableCapabilities(),
       Instant.now());
 
     Tracer tracer = DefaultTestTracer.createTracer();

File: java/server/test/org/openqa/selenium/grid/sessionmap/redis/RedisBackedSessionMapTest.java
Patch:
@@ -76,6 +76,7 @@ public void canGetTheUriOfASessionWithoutNeedingUrl() throws URISyntaxException
       new SessionId(UUID.randomUUID()),
       new URI("http://example.com/foo"),
       new ImmutableCapabilities(),
+      new ImmutableCapabilities(),
       Instant.now());
     sessions.add(expected);
 
@@ -93,6 +94,7 @@ public void canCreateARedisBackedSessionMap() throws URISyntaxException {
     Session expected = new Session(
       new SessionId(UUID.randomUUID()),
       new URI("http://example.com/foo"),
+      new ImmutableCapabilities(),
       new ImmutableCapabilities("cheese", "beyaz peynir"),
       Instant.now());
     sessions.add(expected);
@@ -111,6 +113,7 @@ public void shouldBeAbleToRemoveSessions() throws URISyntaxException {
     Session expected = new Session(
       new SessionId(UUID.randomUUID()),
       new URI("http://example.com/foo"),
+      new ImmutableCapabilities(),
       new ImmutableCapabilities("cheese", "beyaz peynir"),
       Instant.now());
     sessions.add(expected);

File: java/server/test/org/openqa/selenium/grid/sessionqueue/NewSessionQueuerTest.java
Patch:
@@ -114,7 +114,7 @@ public void shouldBeAbleToAddToQueueAndGetValidResponse() {
       ImmutableCapabilities capabilities = new ImmutableCapabilities("browserName", "chrome");
       try {
         SessionId sessionId = new SessionId("123");
-        Session session = new Session(sessionId, new URI("http://example.com"), capabilities, Instant.now());
+        Session session = new Session(sessionId, new URI("http://example.com"), caps, capabilities, Instant.now());
         CreateSessionResponse sessionResponse = new CreateSessionResponse(
           session,
           JSON.toJson(
@@ -261,7 +261,7 @@ public void shouldBeAbleToRetryRequest() {
         ImmutableCapabilities capabilities = new ImmutableCapabilities("browserName", "chrome");
         try {
           SessionId sessionId = new SessionId("123");
-          Session session = new Session(sessionId, new URI("http://example.com"), capabilities, Instant.now());
+          Session session = new Session(sessionId, new URI("http://example.com"), caps, capabilities, Instant.now());
           CreateSessionResponse sessionResponse = new CreateSessionResponse(
             session,
             JSON.toJson(
@@ -297,7 +297,7 @@ public void shouldBeAbleToHandleMultipleSessionRequestsAtTheSameTime() {
       ImmutableCapabilities capabilities = new ImmutableCapabilities("browserName", "chrome");
       try {
         SessionId sessionId = new SessionId(UUID.randomUUID());
-        Session session = new Session(sessionId, new URI("http://example.com"), capabilities, Instant.now());
+        Session session = new Session(sessionId, new URI("http://example.com"), caps, capabilities, Instant.now());
         CreateSessionResponse sessionResponse = new CreateSessionResponse(
           session,
           JSON.toJson(

File: java/client/src/org/openqa/selenium/remote/tracing/AttributeKey.java
Patch:
@@ -48,7 +48,9 @@ public enum AttributeKey {
   DATABASE_OPERATION ("db.operation"),
   DATABASE_USER ("db.user"),
   DATABASE_CONNECTION_STRING ("db.connection_string"),
-  DATABASE_SYSTEM("db.system");
+  DATABASE_SYSTEM("db.system"),
+
+  REQUEST_ID ("request.id");
 
   private final String key;
 

File: java/server/src/org/openqa/selenium/grid/distributor/AddNode.java
Patch:
@@ -21,6 +21,7 @@
 import org.openqa.selenium.grid.data.Slot;
 import org.openqa.selenium.grid.node.Node;
 import org.openqa.selenium.grid.node.remote.RemoteNode;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.http.HttpClient;
@@ -39,14 +40,14 @@ class AddNode implements HttpHandler {
   private final Distributor distributor;
   private final Json json;
   private final HttpClient.Factory httpFactory;
-  private final String registrationSecret;
+  private final Secret registrationSecret;
 
   AddNode(
       Tracer tracer,
       Distributor distributor,
       Json json,
       HttpClient.Factory httpFactory,
-      String registrationSecret) {
+      Secret registrationSecret) {
     this.tracer = Require.nonNull("Tracer", tracer);
     this.distributor = Require.nonNull("Distributor", distributor);
     this.json = Require.nonNull("Json converter", json);

File: java/server/src/org/openqa/selenium/grid/distributor/Distributor.java
Patch:
@@ -32,6 +32,7 @@
 import org.openqa.selenium.grid.distributor.selector.SlotSelector;
 import org.openqa.selenium.grid.node.Node;
 import org.openqa.selenium.grid.security.RequiresSecretFilter;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.sessionmap.SessionMap;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.json.Json;
@@ -131,7 +132,7 @@ protected Distributor(
     HttpClient.Factory httpClientFactory,
     SlotSelector slotSelector,
     SessionMap sessions,
-    String registrationSecret) {
+    Secret registrationSecret) {
     this.tracer = Require.nonNull("Tracer", tracer);
     Require.nonNull("HTTP client factory", httpClientFactory);
     this.slotSelector = Require.nonNull("Host selector", slotSelector);

File: java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java
Patch:
@@ -40,6 +40,7 @@
 import org.openqa.selenium.grid.log.LoggingOptions;
 import org.openqa.selenium.grid.node.Node;
 import org.openqa.selenium.grid.node.remote.RemoteNode;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.server.BaseServerOptions;
 import org.openqa.selenium.grid.server.EventBusOptions;
 import org.openqa.selenium.grid.server.NetworkOptions;
@@ -86,14 +87,14 @@ public class LocalDistributor extends Distributor {
   private final SessionMap sessions;
   private final Regularly hostChecker = new Regularly("distributor host checker");
   private final Map<NodeId, Collection<Runnable>> allChecks = new ConcurrentHashMap<>();
-  private final String registrationSecret;
+  private final Secret registrationSecret;
 
   public LocalDistributor(
       Tracer tracer,
       EventBus bus,
       HttpClient.Factory clientFactory,
       SessionMap sessions,
-      String registrationSecret) {
+      Secret registrationSecret) {
     super(tracer, clientFactory, new DefaultSlotSelector(), sessions, registrationSecret);
     this.tracer = Require.nonNull("Tracer", tracer);
     this.bus = Require.nonNull("Event bus", bus);

File: java/server/src/org/openqa/selenium/grid/distributor/model/Host.java
Patch:
@@ -32,6 +32,7 @@
 import org.openqa.selenium.grid.data.SlotId;
 import org.openqa.selenium.grid.node.HealthCheck;
 import org.openqa.selenium.grid.node.Node;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.remote.SessionId;
 
@@ -62,7 +63,7 @@ public class Host {
 
   private static final Logger LOG = Logger.getLogger("Selenium Host");
   private final Node node;
-  private final String registrationSecret;
+  private final Secret registrationSecret;
   private final NodeId nodeId;
   private final URI uri;
   private final Runnable performHealthCheck;
@@ -73,7 +74,7 @@ public class Host {
   private Set<Slot> slots;
   private int maxSessionCount;
 
-  public Host(EventBus bus, Node node, String registrationSecret) {
+  public Host(EventBus bus, Node node, Secret registrationSecret) {
     this.node = Require.nonNull("Node", node);
     Require.nonNull("Event bus", bus);
 

File: java/server/src/org/openqa/selenium/grid/distributor/remote/RemoteDistributor.java
Patch:
@@ -26,6 +26,7 @@
 import org.openqa.selenium.grid.distributor.Distributor;
 import org.openqa.selenium.grid.distributor.model.Host;
 import org.openqa.selenium.grid.node.Node;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.sessionmap.NullSessionMap;
 import org.openqa.selenium.grid.web.Values;
 import org.openqa.selenium.internal.Require;
@@ -51,7 +52,7 @@ public class RemoteDistributor extends Distributor {
   private static final Logger LOG = Logger.getLogger("Selenium Distributor (Remote)");
   private final HttpHandler client;
 
-  public RemoteDistributor(Tracer tracer, HttpClient.Factory factory, URL url, String registrationSecret) {
+  public RemoteDistributor(Tracer tracer, HttpClient.Factory factory, URL url, Secret registrationSecret) {
     super(
       tracer,
       factory,

File: java/server/src/org/openqa/selenium/grid/node/HealthCheck.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.grid.node;
 
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.internal.Require;
 
 @FunctionalInterface
@@ -27,13 +28,13 @@ public interface HealthCheck {
   class Result {
     private final boolean isAlive;
     private final String message;
-    private final String registrationSecret;
+    private final Secret registrationSecret;
 
     public Result(boolean isAlive, String message) {
       this(isAlive, message, null);
     }
 
-    public Result(boolean isAlive, String message, String registrationSecret) {
+    public Result(boolean isAlive, String message, Secret registrationSecret) {
       this.isAlive = isAlive;
       this.message = Require.nonNull("Message", message);
       this.registrationSecret = registrationSecret;

File: java/server/src/org/openqa/selenium/grid/node/Node.java
Patch:
@@ -25,6 +25,7 @@
 import org.openqa.selenium.grid.data.NodeStatus;
 import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.security.RequiresSecretFilter;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.io.TemporaryFilesystem;
 import org.openqa.selenium.json.Json;
@@ -105,7 +106,7 @@ public abstract class Node implements HasReadyState, Routable {
   private final Route routes;
   protected boolean draining;
 
-  protected Node(Tracer tracer, NodeId id, URI uri, String registrationSecret) {
+  protected Node(Tracer tracer, NodeId id, URI uri, Secret registrationSecret) {
     this.tracer = Require.nonNull("Tracer", tracer);
     this.id = Require.nonNull("Node id", id);
     this.uri = Require.nonNull("URI", uri);

File: java/server/src/org/openqa/selenium/grid/node/k8s/OneShotNode.java
Patch:
@@ -43,6 +43,7 @@
 import org.openqa.selenium.grid.node.HealthCheck;
 import org.openqa.selenium.grid.node.Node;
 import org.openqa.selenium.grid.node.config.NodeOptions;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.server.BaseServerOptions;
 import org.openqa.selenium.grid.server.EventBusOptions;
 import org.openqa.selenium.internal.Require;
@@ -86,7 +87,7 @@ public class OneShotNode extends Node {
   private final EventBus events;
   private final WebDriverInfo driverInfo;
   private final Capabilities stereotype;
-  private final String registrationSecret;
+  private final Secret registrationSecret;
   private final URI gridUri;
   private final UUID slotId = UUID.randomUUID();
   private RemoteWebDriver driver;
@@ -97,7 +98,7 @@ public class OneShotNode extends Node {
   private OneShotNode(
     Tracer tracer,
     EventBus events,
-    String registrationSecret,
+    Secret registrationSecret,
     NodeId id,
     URI uri,
     URI gridUri,

File: java/server/src/org/openqa/selenium/grid/node/remote/RemoteNode.java
Patch:
@@ -28,6 +28,7 @@
 import org.openqa.selenium.grid.data.Session;
 import org.openqa.selenium.grid.node.HealthCheck;
 import org.openqa.selenium.grid.node.Node;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.web.Values;
 import org.openqa.selenium.internal.Require;
 import org.openqa.selenium.json.Json;
@@ -72,7 +73,7 @@ public RemoteNode(
       HttpClient.Factory clientFactory,
       NodeId id,
       URI externalUri,
-      String registrationSecret,
+      Secret registrationSecret,
       Collection<Capabilities> capabilities) {
     super(tracer, id, externalUri, registrationSecret);
     this.externalUri = Require.nonNull("External URI", externalUri);

File: java/server/src/org/openqa/selenium/grid/security/AddSecretFilter.java
Patch:
@@ -23,17 +23,17 @@
 public class AddSecretFilter implements Filter {
 
   static final String HEADER_NAME = "X-REGISTRATION-SECRET";
-  private final String secret;
+  private final Secret secret;
 
-  public AddSecretFilter(String secret) {
+  public AddSecretFilter(Secret secret) {
     this.secret = secret;
   }
 
   @Override
   public HttpHandler apply(HttpHandler httpHandler) {
     return req -> {
       if (req.getHeader(HEADER_NAME) == null) {
-        req.addHeader(HEADER_NAME, secret);
+        req.addHeader(HEADER_NAME, secret.encode());
       }
 
       return httpHandler.execute(req);

File: java/server/src/org/openqa/selenium/grid/server/BaseServerOptions.java
Patch:
@@ -20,6 +20,7 @@
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.grid.config.Config;
 import org.openqa.selenium.grid.config.ConfigException;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.net.HostIdentifier;
 import org.openqa.selenium.net.NetworkUtils;
 import org.openqa.selenium.net.PortProber;
@@ -118,8 +119,8 @@ public File getCertificate() {
     throw new ConfigException("you must provide a certificate via --https-certificate when using --https");
   }
 
-  public String getRegistrationSecret() {
-    return config.get(SERVER_SECTION, "registration-secret").orElse(null);
+  public Secret getRegistrationSecret() {
+    return config.get(SERVER_SECTION, "registration-secret").map(Secret::new).orElse(null);
   }
 
   public boolean isSelfSigned() {

File: java/server/test/org/openqa/selenium/grid/data/NodeStatusTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.collect.ImmutableSet;
 import org.junit.Test;
 import org.openqa.selenium.ImmutableCapabilities;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.SessionId;
 
@@ -52,7 +53,7 @@ public void ensureRoundTripWorks() throws URISyntaxException {
             new ImmutableCapabilities("peas", "sausages"),
             Instant.now())))),
       false,
-      "cheese");
+      new Secret("cheese"));
 
     Json json = new Json();
     String source = json.toJson(status);

File: java/server/test/org/openqa/selenium/grid/distributor/AddingNodesTest.java
Patch:
@@ -42,6 +42,7 @@
 import org.openqa.selenium.grid.node.HealthCheck;
 import org.openqa.selenium.grid.node.Node;
 import org.openqa.selenium.grid.node.local.LocalNode;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.sessionmap.local.LocalSessionMap;
 import org.openqa.selenium.grid.testing.TestSessionFactory;
 import org.openqa.selenium.grid.web.CombinedHandler;
@@ -82,7 +83,7 @@ public class AddingNodesTest {
   private Wait<Object> wait;
   private URL externalUrl;
   private CombinedHandler handler;
-  private String registrationSecret;
+  private Secret registrationSecret;
 
   @Before
   public void setUpDistributor() throws MalformedURLException {
@@ -310,7 +311,7 @@ public NodeStatus getStatus() {
             Instant.now(),
             Optional.ofNullable(active))),
         false,
-        "cheese");
+        new Secret("cheese"));
     }
 
     @Override

File: java/server/test/org/openqa/selenium/grid/distributor/DistributorTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.openqa.selenium.grid.node.HealthCheck;
 import org.openqa.selenium.grid.node.Node;
 import org.openqa.selenium.grid.node.local.LocalNode;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.sessionmap.SessionMap;
 import org.openqa.selenium.grid.sessionmap.local.LocalSessionMap;
 import org.openqa.selenium.grid.testing.PassthroughHttpClient;
@@ -93,7 +94,7 @@ public class DistributorTest {
   private EventBus bus;
   private Distributor local;
   private ImmutableCapabilities caps;
-  private String registrationSecret;
+  private Secret registrationSecret;
 
   @Before
   public void setUp() {
@@ -365,7 +366,7 @@ public void registeringTheWrongRegistrationSecretDoesNotWork()
     CountDownLatch latch = new CountDownLatch(1);
     bus.addListener(rejected, e -> latch.countDown());
 
-    LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, "pickles")
+    LocalNode node = LocalNode.builder(tracer, bus, routableUri, routableUri, new Secret("pickles"))
       .add(caps, new TestSessionFactory((id, c) -> new Session(id, nodeUri, c)))
       .build();
 

File: java/server/test/org/openqa/selenium/grid/node/NodeTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.openqa.selenium.grid.data.Slot;
 import org.openqa.selenium.grid.node.local.LocalNode;
 import org.openqa.selenium.grid.node.remote.RemoteNode;
+import org.openqa.selenium.grid.security.Secret;
 import org.openqa.selenium.grid.testing.PassthroughHttpClient;
 import org.openqa.selenium.grid.testing.TestSessionFactory;
 import org.openqa.selenium.grid.web.Values;
@@ -102,7 +103,7 @@ public class NodeTest {
   private Node node;
   private ImmutableCapabilities caps;
   private URI uri;
-  private String registrationSecret;
+  private Secret registrationSecret;
 
   @Before
   public void setUp() throws URISyntaxException {

File: java/server/src/org/openqa/selenium/grid/node/ForwardWebDriverCommand.java
Patch:
@@ -32,6 +32,6 @@ class ForwardWebDriverCommand implements HttpHandler {
 
   @Override
   public HttpResponse execute(HttpRequest req) {
-    return node.executeWebDriverCommand(req);
+    return node.executeWebDriverCommand(req).setHeader("X-REGISTRATION-SECRET", node.getRegistrationSecret());
   }
 }

File: java/server/src/org/openqa/selenium/grid/node/GetNodeSession.java
Patch:
@@ -43,6 +43,6 @@ class GetNodeSession implements HttpHandler {
   public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
     Session session = node.getSession(id);
 
-    return new HttpResponse().setContent(asJson(ImmutableMap.of("value", session)));
+    return new HttpResponse().setContent(asJson(ImmutableMap.of("value", session))).setHeader("X-REGISTRATION-SECRET", node.getRegistrationSecret());
   }
 }

File: java/server/src/org/openqa/selenium/grid/node/IsSessionOwner.java
Patch:
@@ -41,6 +41,6 @@ class IsSessionOwner implements HttpHandler {
 
   @Override
   public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
-    return new HttpResponse().setContent(asJson(ImmutableMap.of("value", node.isSessionOwner(id))));
+    return new HttpResponse().setContent(asJson(ImmutableMap.of("value", node.isSessionOwner(id)))).setHeader("X-REGISTRATION-SECRET", node.getRegistrationSecret());
   }
 }

File: java/server/src/org/openqa/selenium/grid/node/NewNodeSession.java
Patch:
@@ -50,6 +50,6 @@ public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
     HashMap<String, Object> value = new HashMap<>();
     value.put("value", sessionResponse);
 
-    return new HttpResponse().setContent(asJson(value));
+    return new HttpResponse().setContent(asJson(value)).setHeader("X-REGISTRATION-SECRET", node.getRegistrationSecret());
   }
 }

File: java/server/src/org/openqa/selenium/grid/node/Node.java
Patch:
@@ -187,6 +187,8 @@ public TemporaryFilesystem getTemporaryFilesystem(SessionId id) throws IOExcepti
 
   public abstract void drain();
 
+  public abstract String getRegistrationSecret();
+
   @Override
   public boolean matches(HttpRequest req) {
     return routes.matches(req);

File: java/server/src/org/openqa/selenium/grid/node/StatusHandler.java
Patch:
@@ -46,6 +46,6 @@ public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
             "message", status.hasCapacity() ? "Ready" : "No free slots available",
             "node", status));
 
-    return new HttpResponse().setContent(asJson(report));
+    return new HttpResponse().setContent(asJson(report)).setHeader("X-REGISTRATION-SECRET", node.getRegistrationSecret());
   }
 }

File: java/server/src/org/openqa/selenium/grid/node/StopNodeSession.java
Patch:
@@ -37,6 +37,6 @@ class StopNodeSession implements HttpHandler {
   @Override
   public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
     node.stop(id);
-    return new HttpResponse();
+    return new HttpResponse().setHeader("X-REGISTRATION-SECRET", node.getRegistrationSecret());
   }
 }

File: java/server/src/org/openqa/selenium/grid/node/UploadFile.java
Patch:
@@ -37,6 +37,6 @@ class UploadFile implements HttpHandler {
 
   @Override
   public HttpResponse execute(HttpRequest req) throws UncheckedIOException {
-    return node.uploadFile(req, id);
+    return node.uploadFile(req, id).setHeader("X-REGISTRATION-SECRET", node.getRegistrationSecret());
   }
 }

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -458,6 +458,9 @@ public void drain() {
       pendingSessions.set(currentSessionCount);
     }
   }
+  public String getRegistrationSecret() {
+    return registrationSecret;
+  }
 
   private Map<String, Object> toJson() {
     return ImmutableMap.of(

File: java/server/src/org/openqa/selenium/grid/distributor/selector/DefaultHostSelector.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import static org.openqa.selenium.grid.distributor.model.Host.Status.UP;
+import static org.openqa.selenium.grid.data.Availability.UP;
 
 public class DefaultHostSelector implements HostSelector {
 

File: java/server/src/org/openqa/selenium/grid/graphql/Grid.java
Patch:
@@ -47,7 +47,7 @@ public List<Node> getNodes() {
     return distributorStatus.get().getNodes().stream()
       .map(summary -> new Node(summary.getNodeId(),
                                summary.getUri(),
-                               summary.isUp(),
+                               summary.getHostAvailability(),
                                summary.getMaxSessionCount(),
                                summary.getStereotypes(),
                                summary.getActiveSessions()))

File: java/server/src/org/openqa/selenium/grid/node/httpd/NodeServer.java
Patch:
@@ -26,6 +26,7 @@
 import org.openqa.selenium.cli.CliCommand;
 import org.openqa.selenium.events.EventBus;
 import org.openqa.selenium.grid.TemplateGridCommand;
+import org.openqa.selenium.grid.data.NodeId;
 import org.openqa.selenium.grid.node.HealthCheck;
 import org.openqa.selenium.grid.config.Config;
 import org.openqa.selenium.grid.config.Role;
@@ -136,7 +137,7 @@ protected void execute(Config config) {
     });
 
     bus.addListener(NODE_DRAIN_COMPLETE, event -> {
-      UUID nodeId = event.getData(UUID.class);
+      NodeId nodeId = event.getData(NodeId.class);
       if (!node.getId().equals(nodeId)) {
         return;
       }

File: java/client/src/org/openqa/selenium/support/ui/FluentWait.java
Patch:
@@ -208,7 +208,7 @@ public <V> V until(Function<? super T, V> isTrue) {
           .get(deriveSafeTimeout(), TimeUnit.MILLISECONDS);
     } catch (ExecutionException cause) {
       if (cause.getCause() instanceof RuntimeException) {
-        throw (RuntimeException) cause.getCause();
+        throw (RuntimeException) cause.getCause().fillInStackTrace();
       } else if (cause.getCause() instanceof Error) {
         throw (Error) cause.getCause();
       }

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -56,7 +56,6 @@
 import org.openqa.selenium.remote.http.Route;
 import org.openqa.selenium.remote.tracing.Tracer;
 
-import java.net.HttpURLConnection;
 import java.net.MalformedURLException;
 import java.net.URI;
 import java.net.URISyntaxException;

File: java/client/test/org/openqa/selenium/remote/NewSessionPayloadTest.java
Patch:
@@ -162,7 +162,7 @@ public void shouldCorrectlyExtractPlatformNameFromOssCapabilities() {
         "desiredCapabilities", singletonMap(
             "platform", "linux")));
 
-    assertEquals(Platform.LINUX, capabilities.get(0).getPlatform());
+    assertEquals(Platform.LINUX, capabilities.get(0).getPlatformName());
     assertEquals(Platform.LINUX, capabilities.get(0).getCapability("platform"));
     assertNull(capabilities.get(0).getCapability("platformName"));
   }
@@ -174,7 +174,7 @@ public void shouldCorrectlyExtractPlatformFromW3cCapabilities() {
             "alwaysMatch", singletonMap(
                 "platformName", "linux"))));
 
-    assertEquals(Platform.LINUX, capabilities.get(0).getPlatform());
+    assertEquals(Platform.LINUX, capabilities.get(0).getPlatformName());
     assertNull(capabilities.get(0).getCapability("platform"));
     assertEquals("linux", capabilities.get(0).getCapability("platformName"));
   }

File: java/client/test/org/openqa/selenium/remote/RemoteWebDriverUnitTest.java
Patch:
@@ -113,7 +113,7 @@ public void canHandlePlatformNameCapability() throws IOException {
 
     RemoteWebDriver driver = new RemoteWebDriver(executor, capabilities);
 
-    assertThat(driver.getCapabilities().getPlatform().is(Platform.MOJAVE)).isTrue();
+    assertThat(driver.getCapabilities().getPlatformName().is(Platform.MOJAVE)).isTrue();
   }
 
   @Test
@@ -124,7 +124,7 @@ public void canHandlePlatformOSSCapability() throws IOException {
 
     RemoteWebDriver driver = new RemoteWebDriver(executor, capabilities);
 
-    assertThat(driver.getCapabilities().getPlatform().is(Platform.MOJAVE)).isTrue();
+    assertThat(driver.getCapabilities().getPlatformName().is(Platform.MOJAVE)).isTrue();
   }
 
   @Test
@@ -135,7 +135,7 @@ public void canHandleUnknownPlatformNameAndFallsBackToUnix() throws IOException
 
     RemoteWebDriver driver = new RemoteWebDriver(executor, capabilities);
 
-    assertThat(driver.getCapabilities().getPlatform().is(Platform.UNIX)).isTrue(); // fallback
+    assertThat(driver.getCapabilities().getPlatformName().is(Platform.UNIX)).isTrue(); // fallback
   }
 
   @Test

File: java/client/test/org/openqa/selenium/testing/TestUtilities.java
Patch:
@@ -163,7 +163,7 @@ public static Platform getEffectivePlatform(WebDriver driver) {
     }
 
     Capabilities caps = ((HasCapabilities) driver).getCapabilities();
-    return caps.getPlatform();
+    return caps.getPlatformName();
   }
 
   public static boolean isLocal() {

File: java/server/src/org/openqa/selenium/remote/server/DefaultDriverFactory.java
Patch:
@@ -137,8 +137,8 @@ private void registerDriverProvider(Platform current, DriverProvider provider) {
   }
 
   private boolean platformMatches(Platform current, Capabilities caps) {
-    return caps.getPlatform() == null
-           || caps.getPlatform() == ANY
-           || current.is(caps.getPlatform());
+    return caps.getPlatformName() == null
+           || caps.getPlatformName() == ANY
+           || current.is(caps.getPlatformName());
   }
 }

File: java/server/src/org/openqa/selenium/remote/server/DefaultSession.java
Patch:
@@ -176,7 +176,7 @@ public EventFiringWebDriver call() {
       Capabilities actualCapabilities = capabilities;
       if (rawDriver instanceof HasCapabilities) {
         actualCapabilities = ((HasCapabilities) rawDriver).getCapabilities();
-        isAndroid = actualCapabilities.getPlatform().is(Platform.ANDROID);
+        isAndroid = actualCapabilities.getPlatformName().is(Platform.ANDROID);
       }
       describedCapabilities = getDescription(rawDriver, actualCapabilities);
       if (rawDriver instanceof RemoteWebDriver) {

File: java/server/src/org/openqa/selenium/grid/server/NetworkOptions.java
Patch:
@@ -36,8 +36,7 @@ public class NetworkOptions {
 
   private final Config config;
   // These are commonly used by process which can't set various headers.
-  // Checks are skipped when the session already exists
-  private final Set<String> SKIP_CHECKS_ON = ImmutableSet.of("/status", "/readyz", "\\/session\\/(.*)");
+  private final Set<String> SKIP_CHECKS_ON = ImmutableSet.of("/status", "/readyz");
 
   public NetworkOptions(Config config) {
     this.config = Require.nonNull("Config", config);

File: java/server/src/org/openqa/selenium/grid/web/CheckContentTypeHeader.java
Patch:
@@ -50,7 +50,7 @@ public HttpHandler apply(HttpHandler httpHandler) {
     Require.nonNull("Next handler", httpHandler);
 
     return req -> {
-      if (skipChecksOn.stream().anyMatch(s -> req.getUri().matches(s))) {
+      if (skipChecksOn.contains(req.getUri())) {
         return httpHandler.execute(req);
       }
 

File: java/server/src/org/openqa/selenium/grid/server/NetworkOptions.java
Patch:
@@ -36,7 +36,8 @@ public class NetworkOptions {
 
   private final Config config;
   // These are commonly used by process which can't set various headers.
-  private final Set<String> SKIP_CHECKS_ON = ImmutableSet.of("/status", "/readyz");
+  // Checks are skipped when the session already exists
+  private final Set<String> SKIP_CHECKS_ON = ImmutableSet.of("/status", "/readyz", "\\/session\\/(.*)");
 
   public NetworkOptions(Config config) {
     this.config = Require.nonNull("Config", config);

File: java/server/src/org/openqa/selenium/grid/web/CheckContentTypeHeader.java
Patch:
@@ -50,7 +50,7 @@ public HttpHandler apply(HttpHandler httpHandler) {
     Require.nonNull("Next handler", httpHandler);
 
     return req -> {
-      if (skipChecksOn.contains(req.getUri())) {
+      if (skipChecksOn.stream().anyMatch(s -> req.getUri().matches(s))) {
         return httpHandler.execute(req);
       }
 

File: java/client/src/org/openqa/selenium/chromium/ChromiumDevToolsLocator.java
Patch:
@@ -67,7 +67,7 @@ public static Optional<URI> getReportedUri(String capabilityKey, Capabilities ca
       LOG.fine("URI found: " + uri);
       return Optional.of(uri);
     } catch (URISyntaxException e) {
-      LOG.warning("Unable to creeate URI from: " + raw);
+      LOG.warning("Unable to create URI from: " + raw);
       return Optional.empty();
     }
   }

File: java/server/test/org/openqa/selenium/grid/router/NewSessionCreationTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
+import com.google.common.collect.ImmutableSet;
 import org.junit.Before;
 import org.junit.Test;
 import org.openqa.selenium.WebDriverInfo;
@@ -81,7 +82,8 @@ public void ensureJsCannotCreateANewSession() throws URISyntaxException {
 
     SessionMap sessions = new LocalSessionMap(tracer, events);
     Distributor distributor = new LocalDistributor(tracer, events, clientFactory, sessions, null);
-    Routable router = new Router(tracer, clientFactory, sessions, distributor).with(new EnsureSpecCompliantHeaders(ImmutableList.of()));
+    Routable router = new Router(tracer, clientFactory, sessions, distributor)
+      .with(new EnsureSpecCompliantHeaders(ImmutableList.of(), ImmutableSet.of()));
 
     Server<?> server = new NettyServer(
       new BaseServerOptions(new MapConfig(ImmutableMap.of())),

File: java/server/src/org/openqa/selenium/grid/node/Node.java
Patch:
@@ -120,6 +120,9 @@ protected Node(Tracer tracer, UUID id, URI uri) {
         post("/session/{sessionId}/file")
             .to(params -> new UploadFile(this, sessionIdFrom(params)))
             .with(spanDecorator("node.upload_file")),
+        post("/session/{sessionId}/se/file")
+          .to(params -> new UploadFile(this, sessionIdFrom(params)))
+          .with(spanDecorator("node.upload_file")),
         get("/se/grid/node/owner/{sessionId}")
             .to(params -> new IsSessionOwner(this, sessionIdFrom(params)))
             .with(spanDecorator("node.is_session_owner")),

File: java/client/test/org/openqa/selenium/testing/TestUtilities.java
Patch:
@@ -57,7 +57,7 @@ public static boolean isFirefox(WebDriver driver) {
 
   public static boolean isInternetExplorer(WebDriver driver) {
     String userAgent = getUserAgent(driver);
-    return userAgent != null && userAgent.contains("MSIE") || userAgent.contains("Trident");
+    return userAgent != null && (userAgent.contains("MSIE") || userAgent.contains("Trident"));
   }
 
   public static boolean isChrome(WebDriver driver) {

File: java/client/src/org/openqa/selenium/devtools/CdpClientGenerator.java
Patch:
@@ -77,7 +77,6 @@ public static void main(String[] args) throws IOException {
     model.dumpTo(target);
 
     Path outputJar = Paths.get(args[2]).toAbsolutePath();
-    System.out.println(outputJar);
     Files.createDirectories(outputJar.getParent());
 
     try (OutputStream os = Files.newOutputStream(outputJar);

File: java/server/test/org/openqa/selenium/grid/graphql/GraphqlHandlerTest.java
Patch:
@@ -77,7 +77,7 @@ public void shouldBeAbleToGetGridUri() {
 
     Map<String, Object> topLevel = executeQuery(handler, "query { grid { uri } }");
 
-    assertThat(topLevel).isEqualTo(Map.of("data", Map.of("grid", Map.of("uri", publicUri))));
+    assertThat(topLevel).isEqualTo(Map.of("data", Map.of("grid", Map.of("uri", publicUri.toString()))));
   }
 
   @Test

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriverBuilder.java
Patch:
@@ -174,7 +174,7 @@ public RemoteWebDriverBuilder url(String url) {
    * {@link #withDriverService(DriverService)}.
    */
   public RemoteWebDriverBuilder url(URL url) {
-    this.remoteHost = Require.nonNull("Remote seerver URL", url);
+    this.remoteHost = Require.nonNull("Remote server URL", url);
     validateDriverServiceAndUrlConstraint();
     return this;
   }

File: java/server/test/org/openqa/selenium/grid/graphql/GraphqlHandlerTest.java
Patch:
@@ -108,7 +108,7 @@ public boolean test(Capabilities capabilities) {
         }
       })
       .build();
-    distributor.add(node);String
+    distributor.add(node);
 
     GraphqlHandler handler = new GraphqlHandler(distributor, publicUri);
     Map<String, Object> topLevel = executeQuery(handler, "query { grid { nodes { uri } } }");

File: java/server/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -131,7 +131,7 @@ protected void execute(Config config) {
     handler.addHandler(distributor);
 
     Router router = new Router(tracer, clientFactory, sessions, distributor);
-    GraphqlHandler graphqlHandler = new GraphqlHandler(distributor, serverOptions.getExternalUri().toString());
+    GraphqlHandler graphqlHandler = new GraphqlHandler(distributor, serverOptions.getExternalUri());
     HttpHandler readinessCheck = req -> {
       boolean ready = router.isReady() && bus.isReady();
       return new HttpResponse()

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -147,7 +147,7 @@ protected void execute(Config config) {
     };
 
     BaseServerOptions serverOptions = new BaseServerOptions(config);
-    GraphqlHandler graphqlHandler = new GraphqlHandler(distributor, serverOptions.getExternalUri().toString());
+    GraphqlHandler graphqlHandler = new GraphqlHandler(distributor, serverOptions.getExternalUri());
     HttpHandler httpHandler = combine(
       router,
       Route.prefix("/wd/hub").to(combine(router)),

File: java/server/src/org/openqa/selenium/grid/router/httpd/RouterServer.java
Patch:
@@ -113,7 +113,7 @@ protected void execute(Config config) {
         distributorUrl
     );
 
-    GraphqlHandler graphqlHandler = new GraphqlHandler(distributor, serverOptions.getExternalUri().toString());
+    GraphqlHandler graphqlHandler = new GraphqlHandler(distributor, serverOptions.getExternalUri());
 
     Route handler = Route.combine(
       new Router(tracer, clientFactory, sessions, distributor),

File: java/server/src/org/openqa/selenium/grid/config/Config.java
Patch:
@@ -43,7 +43,7 @@ default Optional<Boolean> getBool(String section, String option) {
     return get(section, option).map(Boolean::parseBoolean);
   }
 
-  default <X> Object getClass(String section, String option, Class<X> typeOfClass, String defaultClazz) {
+  default <X> X getClass(String section, String option, Class<X> typeOfClass, String defaultClazz) {
     String clazz = get(section, option).orElse(defaultClazz);
 
     try {
@@ -60,7 +60,7 @@ default <X> Object getClass(String section, String option, Class<X> typeOfClass,
             "Class %s's `create(Config)` method must be static", clazz));
       }
 
-      return create.invoke(null, this);
+      return typeOfClass.cast(create.invoke(null, this));
     } catch (NoSuchMethodException e) {
       throw new IllegalArgumentException(String.format(
           "Class %s must have a static `create(Config)` method", clazz));

File: java/server/src/org/openqa/selenium/grid/distributor/config/DistributorOptions.java
Patch:
@@ -75,6 +75,6 @@ public URI getDistributorUri() {
   }
 
   public Distributor getDistributor(String defaultClass) {
-    return (Distributor) config.getClass(DISTRIBUTOR_SECTION, "implementation", Distributor.class, defaultClass);
+    return config.getClass(DISTRIBUTOR_SECTION, "implementation", Distributor.class, defaultClass);
   }
 }

File: java/server/src/org/openqa/selenium/grid/server/EventBusOptions.java
Patch:
@@ -21,8 +21,6 @@
 import org.openqa.selenium.grid.config.Config;
 import org.openqa.selenium.internal.Require;
 
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
 import java.util.logging.Logger;
 
 public class EventBusOptions {
@@ -50,6 +48,6 @@ public EventBus getEventBus() {
   }
 
   private EventBus createBus() {
-    return (EventBus) config.getClass("events", "implementation", EventBus.class, DEFAULT_CLASS);
+    return config.getClass("events", "implementation", EventBus.class, DEFAULT_CLASS);
   }
 }

File: java/server/src/org/openqa/selenium/grid/sessionmap/config/SessionMapOptions.java
Patch:
@@ -76,6 +76,6 @@ public URI getSessionMapUri() {
   }
 
   public SessionMap getSessionMap() {
-    return  (SessionMap) config.getClass(SESSIONS_SECTION, "implementation", SessionMap.class, DEFAULT_SESSION_MAP);
+    return config.getClass(SESSIONS_SECTION, "implementation", SessionMap.class, DEFAULT_SESSION_MAP);
   }
 }

File: java/client/src/org/openqa/selenium/support/locators/RelativeLocator.java
Patch:
@@ -72,8 +72,6 @@ private RelativeBy(Object rootLocator) {
     }
 
     private RelativeBy(Object rootLocator, List<Map<String, Object>> filters) {
-      this.root = Require.nonNull("Root locator", rootLocator);
-
       if (rootLocator instanceof By) {
         assertLocatorCanBeSerialized(rootLocator);
         rootLocator = asAtomLocatorParameter(rootLocator);
@@ -86,6 +84,7 @@ private RelativeBy(Object rootLocator, List<Map<String, Object>> filters) {
         throw new IllegalArgumentException("Root locator must be an element or a locator: " + rootLocator);
       }
 
+      this.root = Require.nonNull("Root locator", rootLocator);
       this.filters = ImmutableList.copyOf(Require.nonNull("Filters", filters));
     }
 

File: java/server/src/org/openqa/selenium/grid/distributor/remote/RemoteDistributor.java
Patch:
@@ -35,6 +35,7 @@
 import java.util.UUID;
 import java.util.logging.Logger;
 
+import static org.openqa.selenium.net.Urls.fromUri;
 import static org.openqa.selenium.remote.http.Contents.asJson;
 import static org.openqa.selenium.remote.http.HttpMethod.DELETE;
 import static org.openqa.selenium.remote.http.HttpMethod.GET;

File: java/server/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -52,6 +52,7 @@
 import java.util.Set;
 import java.util.logging.Logger;
 
+import static org.openqa.selenium.grid.config.StandardGridRoles.EVENT_BUS_ROLE;
 import static org.openqa.selenium.grid.config.StandardGridRoles.HTTPD_ROLE;
 import static org.openqa.selenium.remote.http.HttpMethod.GET;
 import static org.openqa.selenium.remote.http.Route.combine;
@@ -73,7 +74,7 @@ public String getDescription() {
 
   @Override
   public Set<Role> getConfigurableRoles() {
-    return ImmutableSet.of(HTTPD_ROLE);
+    return ImmutableSet.of(EVENT_BUS_ROLE, HTTPD_ROLE);
   }
 
   @Override

File: java/client/test/org/openqa/selenium/support/pagefactory/ByChainedTest.java
Patch:
@@ -122,6 +122,7 @@ public void findElementTwoBy() {
     elems345.addAll(elems34);
     elems345.addAll(elems5);
 
+    when(driver.findElements(By.name("cheese"))).thenReturn(elems12);
     when(elem1.findElements(By.name("photo"))).thenReturn(elems34);
     when(elem2.findElements(By.name("photo"))).thenReturn(elems5);
 

File: java/client/test/org/openqa/selenium/testing/TestUtilities.java
Patch:
@@ -38,9 +38,6 @@ public static boolean isNativeEventsEnabled(WebDriver driver) {
   }
 
   public static String getUserAgent(WebDriver driver) {
-    if (driver instanceof HtmlUnitDriver) {
-      return ((HtmlUnitDriver) driver).getBrowserVersion().getUserAgent();
-    }
     try {
       return (String) ((JavascriptExecutor) driver).executeScript(
         "return navigator.userAgent;");

File: java/server/src/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumHandler.java
Patch:
@@ -65,7 +65,7 @@ public class WebDriverBackedSeleniumHandler implements Routable {
 
   // Prepare the shared set of thingies
   private static final Map<SessionId, CommandProcessor> PROCESSORS = new ConcurrentHashMap<>();
-  public static final Logger LOG = Logger.getLogger(WebDriverBackedSelenium.class.getName());
+  private static final Logger LOG = Logger.getLogger(WebDriverBackedSelenium.class.getName());
 
   private NewSessionPipeline pipeline;
   private ActiveSessions sessions;

File: java/server/src/org/openqa/selenium/events/zeromq/BoundZmqEventBus.java
Patch:
@@ -36,7 +36,7 @@
 
 class BoundZmqEventBus implements EventBus {
 
-  public static final Logger LOG = Logger.getLogger(EventBus.class.getName());
+  private static final Logger LOG = Logger.getLogger(EventBus.class.getName());
   private final UnboundZmqEventBus delegate;
   private final ZMQ.Socket xpub;
   private final ZMQ.Socket xsub;

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -81,7 +81,7 @@
 
 public class LocalNode extends Node {
 
-  public static final Json JSON = new Json();
+  private static final Json JSON = new Json();
   private static final Logger LOG = Logger.getLogger(LocalNode.class.getName());
   private final URI externalUri;
   private final URI gridUri;

File: java/server/src/org/openqa/selenium/grid/node/local/SessionSlot.java
Patch:
@@ -43,7 +43,7 @@ public class SessionSlot implements
     Function<CreateSessionRequest, Optional<ActiveSession>>,
     Predicate<Capabilities>  {
 
-  public static final Logger LOG = Logger.getLogger(SessionSlot.class.getName());
+  private static final Logger LOG = Logger.getLogger(SessionSlot.class.getName());
   private final EventBus bus;
   private final Capabilities stereotype;
   private final SessionFactory factory;

File: java/server/src/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumHandler.java
Patch:
@@ -79,7 +79,7 @@ public void onStop(ActiveSession session) {
         PROCESSORS.remove(session.getId());
       }
     };
-    sessions.addListener(listener);
+    this.sessions.addListener(listener);
 
     this.pipeline = NewSessionPipeline.builder().add(new ActiveSessionFactory(tracer)).create();
   }

File: java/client/src/org/openqa/selenium/internal/Require.java
Patch:
@@ -98,7 +98,7 @@ public T equalTo(Object other) {
       return arg;
     }
 
-    public T instanceOf(Class cls) {
+    public T instanceOf(Class<?> cls) {
       if (arg == null) {
         throw new IllegalArgumentException(argName + " must be set");
       }
@@ -249,7 +249,7 @@ public T nonNull(String message, Object... args) {
       return state;
     }
 
-    public T instanceOf(Class cls) {
+    public T instanceOf(Class<?> cls) {
       if (state == null) {
         throw new IllegalStateException(name + " must be set");
       }

File: java/server/src/org/openqa/selenium/grid/node/httpd/NodeServer.java
Patch:
@@ -122,7 +122,7 @@ protected void execute(Config config) {
     bus.addListener(NODE_ADDED, event -> {
       UUID nodeId = event.getData(UUID.class);
       if (node.getId().equals(nodeId)) {
-        LOG.info("Node has been registered");
+        LOG.info("Node has been added");
       }
     });
 

File: java/client/src/org/openqa/selenium/edgehtml/EdgeHtmlDriver.java
Patch:
@@ -102,6 +102,6 @@ public EdgeHtmlDriver(EdgeHtmlDriverService service) {
   }
 
   public EdgeHtmlDriver(EdgeHtmlDriverService service, EdgeHtmlOptions options) {
-    super(new DriverCommandExecutor(new EdgeHtmlDriverService.Builder().build()), Require.nonNull("Driver options", options));
+    super(new DriverCommandExecutor(service), Require.nonNull("Driver options", options));
   }
 }

File: java/server/src/org/openqa/selenium/grid/node/ProtocolConvertingSession.java
Patch:
@@ -61,6 +61,9 @@ protected ProtocolConvertingSession(
 
   @Override
   public HttpResponse execute(HttpRequest req) {
+    String host = "host";
+    req.removeHeader(host);
+    req.addHeader(host, String.format("%s:%s", getUri().getHost(), getUri().getPort()));
     HttpResponse res = handler.execute(req);
     if (req.getMethod() == DELETE && killUrl.equals(req.getUri())) {
       stop();

File: java/client/src/org/openqa/selenium/interactions/Actions.java
Patch:
@@ -550,7 +550,7 @@ public Actions tick(Action action) {
 
   /**
    * Generates a composite action containing all actions so far, ready to be performed (and
-   * resets the internal builder state, so subsequent calls to {@link #build()} will contain fresh
+   * resets the internal builder state, so subsequent calls to this method will contain fresh
    * sequences).
    *
    * @return the composite action

File: java/client/src/org/openqa/selenium/lift/find/PageTitleFinder.java
Patch:
@@ -15,9 +15,6 @@
 // specific language governing permissions and limitations
 // under the License.
 
-/**
- * A {@link Finder} for title tags.
- */
 package org.openqa.selenium.lift.find;
 
 import static org.hamcrest.Matchers.equalTo;

File: java/client/src/org/openqa/selenium/WebDriver.java
Patch:
@@ -50,7 +50,7 @@ public interface WebDriver extends SearchContext {
   // Navigation
 
   /**
-   * Load a new web page in the current browser window. This is done using an HTTP GET operation,
+   * Load a new web page in the current browser window. This is done using an HTTP POST operation,
    * and the method will block until the load is complete (with the default 'page load strategy'.
    * This will follow redirects issued either by the server or as a meta-redirect from within the
    * returned HTML. Should a meta-redirect "rest" for any duration of time, it is best to wait until
@@ -480,7 +480,7 @@ interface Navigation {
 
 
     /**
-     * Load a new web page in the current browser window. This is done using an HTTP GET operation,
+     * Load a new web page in the current browser window. This is done using an HTTP POST operation,
      * and the method will block until the load is complete. This will follow redirects issued
      * either by the server or as a meta-redirect from within the returned HTML. Should a
      * meta-redirect "rest" for any duration of time, it is best to wait until this timeout is over,

File: java/client/src/org/openqa/selenium/remote/BrowserType.java
Patch:
@@ -27,11 +27,11 @@ public interface BrowserType {
   String GOOGLECHROME = "googlechrome";
   String SAFARI = "safari";
   /**
-   * @deprecated Use OPERA_BLINK
+   * @deprecated Use {@link #OPERA}
    */
-  @Deprecated
-  String OPERA = "opera";
+  @Deprecated(since = "4.0", forRemoval = true)
   String OPERA_BLINK = "operablink";
+  String OPERA = "opera";
   String EDGE = "edgium";
   String EDGEHTML = "MicrosoftEdge";
   String IEXPLORE= "iexplore";

File: java/client/src/org/openqa/selenium/firefox/FirefoxBinary.java
Patch:
@@ -151,7 +151,7 @@ public String toJson() {
    * Locates the firefox binary from a system property. Will throw an exception if the binary cannot
    * be found.
    */
-  private static Executable locateFirefoxBinaryFromSystemProperty() {
+   static Executable locateFirefoxBinaryFromSystemProperty() {
     String binaryName = System.getProperty(FirefoxDriver.SystemProperty.BROWSER_BINARY);
     if (binaryName == null)
       return null;

File: java/client/test/org/openqa/selenium/testing/drivers/Browser.java
Patch:
@@ -21,6 +21,7 @@
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.chrome.ChromeOptions;
 import org.openqa.selenium.edge.EdgeOptions;
+import org.openqa.selenium.edgehtml.EdgeHtmlOptions;
 import org.openqa.selenium.firefox.FirefoxOptions;
 import org.openqa.selenium.ie.InternetExplorerOptions;
 import org.openqa.selenium.opera.OperaOptions;
@@ -34,9 +35,7 @@
 public enum Browser {
   ALL(new ImmutableCapabilities(), false),
   CHROME(new ChromeOptions(), true),
-  // This is not strictly true, but it's true enough: original Edge
-  // doesn't support CDP
-  EDGE(new EdgeOptions(), true),
+  EDGE(new EdgeHtmlOptions(), false),
   CHROMIUMEDGE(new EdgeOptions(), true),
   HTMLUNIT(new ImmutableCapabilities(BROWSER_NAME, BrowserType.HTMLUNIT), false),
   FIREFOX(new FirefoxOptions(), false),

File: java/client/test/org/openqa/selenium/testing/TestUtilities.java
Patch:
@@ -60,7 +60,7 @@ public static boolean isFirefox(WebDriver driver) {
 
   public static boolean isInternetExplorer(WebDriver driver) {
     String userAgent = getUserAgent(driver);
-    return userAgent.contains("MSIE") || userAgent.contains("Trident");
+    return userAgent != null && userAgent.contains("MSIE") || userAgent.contains("Trident");
   }
 
   public static boolean isChrome(WebDriver driver) {

File: java/client/src/org/openqa/selenium/remote/http/HttpClient.java
Patch:
@@ -66,7 +66,7 @@ static Factory create(String name) {
      * {@see create}
      */
     static Factory createDefault() {
-      return create(System.getProperty("webdriver.http.factory", "reactor"));
+      return create(System.getProperty("webdriver.http.factory", "netty"));
     }
 
     /**

File: java/client/test/org/openqa/selenium/remote/http/HttpClientFactoryTest.java
Patch:
@@ -47,7 +47,7 @@ public void restoreSystemProperty() {
   @Test
   public void canCreateDefaultHttpClientFactory() {
     HttpClient.Factory factory = HttpClient.Factory.createDefault();
-    assertThat(factory.getClass().getAnnotation(HttpClientName.class).value()).isEqualTo("reactor");
+    assertThat(factory.getClass().getAnnotation(HttpClientName.class).value()).isEqualTo("netty");
   }
 
   @Test

File: java/server/src/org/openqa/selenium/grid/config/AnnotatedConfig.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSortedSet;
+import com.google.common.primitives.Primitives;
 
 import java.lang.reflect.Field;
 import java.util.ArrayDeque;
@@ -105,7 +106,7 @@ private String getSingleValue(Object value) {
       throw new ConfigException("Collection fields may not be used for configuration: " + value);
     }
 
-    if (Boolean.FALSE.equals(value)) {
+    if (Boolean.FALSE.equals(value) && !Primitives.isWrapperType(value.getClass())) {
       return null;
     }
 

File: java/server/src/org/openqa/selenium/grid/node/httpd/NodeFlags.java
Patch:
@@ -36,7 +36,7 @@ public class NodeFlags implements HasRoles {
       names = {"--detect-drivers"}, arity = 1,
       description = "Autodetect which drivers are available on the current system, and add them to the node.")
   @ConfigValue(section = "node", name = "detect-drivers")
-  public boolean autoconfigure = true;
+  public Boolean autoconfigure = true;
 
   @Override
   public Set<Role> getRoles() {

File: java/server/src/org/openqa/selenium/grid/server/EventBusFlags.java
Patch:
@@ -43,14 +43,13 @@ public class EventBusFlags implements HasRoles {
   @ConfigValue(section = "events", name = "subscribe")
   private String subscribeString;
 
-
   @Parameter(
       names = {"--bind-bus"},
       description = "Whether the connection string should be bound or connected")
   @ConfigValue(section = "events", name = "bind")
   // We use the Boolean here so we can differentiate between there being no option, and a default
   // false value.
-  private boolean bind;
+  private Boolean bind;
 
   @Parameter(
       names = {"--events-implementation"},

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -192,6 +192,7 @@ public void testShouldBeAbleToIterateOverAllOpenWindows() {
   public void testClickingOnAButtonThatClosesAnOpenWindowDoesNotCauseTheBrowserToHang() {
     assumeFalse(Browser.detect() == Browser.OPERA &&
                 getEffectivePlatform(driver).is(Platform.WINDOWS));
+    boolean isIE = isInternetExplorer(driver);
 
     driver.get(pages.xhtmlTestPage);
     Set<String> currentWindowHandles = driver.getWindowHandles();
@@ -204,7 +205,7 @@ public void testClickingOnAButtonThatClosesAnOpenWindowDoesNotCauseTheBrowserToH
 
     wait.until(ExpectedConditions.presenceOfElementLocated(By.id("close"))).click();
 
-    if (isInternetExplorer(driver)) {
+    if (isIE) {
       Alert alert = wait.until(alertIsPresent());
       alert.accept();
     }

File: java/client/src/org/openqa/selenium/Cookie.java
Patch:
@@ -234,7 +234,7 @@ public Map<String, Object> toJson() {
     toReturn.put("httpOnly", isHttpOnly());
 
     if (getSameSite() != null) {
-      toReturn.put("samesite", getSameSite());
+      toReturn.put("sameSite", getSameSite());
     }
 
     return toReturn;

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -771,7 +771,7 @@ public Set<Cookie> getCookies() {
                     .isSecure(rawCookie.containsKey("secure") && (Boolean) rawCookie.get("secure"))
                     .isHttpOnly(
                         rawCookie.containsKey("httpOnly") && (Boolean) rawCookie.get("httpOnly"))
-                    .sameSite((String) rawCookie.get("samesite"));
+                    .sameSite((String) rawCookie.get("sameSite"));
 
             Number expiryNum = (Number) rawCookie.get("expiry");
             builder.expiresOn(expiryNum == null ? null : new Date(SECONDS.toMillis(expiryNum.longValue())));

File: java/client/test/org/openqa/selenium/CookieTest.java
Patch:
@@ -78,9 +78,11 @@ public void testHttpOnlyDefaultsToFalse() {
   public void testCookiesShouldAllowSameSiteToBeSet() {
     Cookie cookie = new Cookie("name", "value", "", "/", new Date(), false, true, "Lax");
     assertThat(cookie.getSameSite()).isEqualTo("Lax");
+    assertThat(cookie.toJson().get("sameSite")).isEqualTo("Lax");
 
     Cookie builderCookie = new Cookie.Builder("name", "value").sameSite("Lax").build();
     assertThat(builderCookie.getSameSite()).isEqualTo("Lax");
+    assertThat(builderCookie.toJson().get("sameSite")).isEqualTo("Lax");
   }
 
   @Test

File: java/client/test/org/openqa/selenium/remote/RemoteWebDriverUnitTest.java
Patch:
@@ -625,7 +625,7 @@ public void canHandleGetCookiesCommand() throws IOException {
     CommandExecutor executor = prepareExecutorMock(
         echoCapabilities,
         valueResponder(Arrays.asList(
-            ImmutableMap.of("name", "cookie1", "value", "value1", "samesite", "Lax"),
+            ImmutableMap.of("name", "cookie1", "value", "value1", "sameSite", "Lax"),
             ImmutableMap.of("name", "cookie2", "value", "value2"))));
 
     RemoteWebDriver driver = new RemoteWebDriver(executor, new ImmutableCapabilities());

File: java/client/src/com/thoughtworks/selenium/condition/Condition.java
Patch:
@@ -24,7 +24,7 @@
  * <ul>
  * <li>a message (purely used for displaying purposes)
  * <li>an implementation of
- * {@link Condition isTrue(com.google.testing.selenium.condition.ConditionRunner.Context)}
+ * {@link Condition#isTrue(ConditionRunner.Context)}
  * </ul>
  */
 public abstract class Condition {

File: java/client/src/com/thoughtworks/selenium/condition/ConditionRunner.java
Patch:
@@ -56,7 +56,7 @@ public interface ConditionRunner {
 
   /**
    * Used by implementations of {@link ConditionRunner#waitFor(Condition)} to provide context to the
-   * {@link Condition isTrue(com.google.testing.selenium.condition.ConditionRunner.Context)} method
+   * {@link Condition#isTrue(Context)}  method
    */
   interface Context {
 

File: java/server/test/org/openqa/selenium/grid/node/config/NodeOptionsTest.java
Patch:
@@ -123,7 +123,7 @@ public void shouldDetectCorrectDriversOnMac() {
     assertThat(node.isSupporting(toPayload("chrome"))).isTrue();
     assertThat(node.isSupporting(toPayload("firefox"))).isTrue();
     assertThat(node.isSupporting(toPayload("internet explorer"))).isFalse();
-    assertThat(node.isSupporting(toPayload("MicrosoftEdge"))).isFalse();
+    assertThat(node.isSupporting(toPayload("MicrosoftEdge"))).isTrue();
     assertThat(node.isSupporting(toPayload("safari"))).isTrue();
   }
 

File: java/server/src/org/openqa/selenium/grid/config/AnnotatedConfig.java
Patch:
@@ -133,7 +133,7 @@ private Deque<Field> findConfigFields(Class<?> clazz) {
           .forEach(toSet::addLast);
 
       Class<?> toAdd = clazz.getSuperclass();
-      if (!Object.class.equals(toAdd) && !seen.contains(toAdd)) {
+      if (toAdd != null && !Object.class.equals(toAdd) && !seen.contains(toAdd)) {
         toVisit.add(toAdd);
       }
       Arrays.stream(clazz.getInterfaces())

File: java/client/test/org/openqa/selenium/os/CommandLineTest.java
Patch:
@@ -135,16 +135,17 @@ public void canDetectSuccess() {
     CommandLine commandLine = new CommandLine(
         testExecutable, (Platform.getCurrent().is(WINDOWS) ? "-n" : "-c"), "3", "localhost");
     commandLine.execute();
-    assertThat(commandLine.isSuccessful()).isTrue();
+    System.out.println(commandLine.getStdOut());
     assertThat(commandLine.getExitCode()).isEqualTo(0);
+    assertThat(commandLine.isSuccessful()).isTrue();
   }
 
   @Test
   public void canDetectFailure() {
     CommandLine commandLine = new CommandLine(testExecutable);
     commandLine.execute();
-    assertThat(commandLine.isSuccessful()).isFalse();
     assertThat(commandLine.getExitCode()).isNotEqualTo(0);
+    assertThat(commandLine.isSuccessful()).isFalse();
   }
 
   @Test

File: java/client/src/org/openqa/selenium/virtualauthenticator/Credential.java
Patch:
@@ -104,7 +104,7 @@ public int getSignCount() {
 
   public Map<String, Object> toMap() {
     Base64.Encoder encoder = Base64.getUrlEncoder();
-    Map<String, Object> map = new HashMap<String, Object>();
+    Map<String, Object> map = new HashMap<>();
     map.put("credentialId", encoder.encodeToString(id));
     map.put("isResidentCredential", isResidentCredential);
     map.put("rpId", rpId);

File: java/client/test/org/openqa/selenium/atoms/CompiledAtomsNotLeakingTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.atoms;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.InstanceOfAssertFactories.MAP;
 
 import net.sourceforge.htmlunit.corejs.javascript.Context;
 import net.sourceforge.htmlunit.corejs.javascript.ContextFactory;
@@ -104,7 +105,8 @@ public void nestedFragmentsShouldNotLeakVariables() {
 
       assertThat(result.get("status")).isInstanceOf(Long.class).as(jsonResult).isEqualTo(0L);
       assertThat(result.get("value")).isInstanceOf(Map.class);
-      assertThat((Map<String, Object>) result.get("value"))
+      assertThat(result.get("value"))
+          .asInstanceOf(MAP)
           .hasSize(2)
           .containsEntry("status", 0L)
           .containsEntry("value", 3L);

File: java/server/src/org/openqa/selenium/grid/router/Router.java
Patch:
@@ -33,7 +33,6 @@
 import static org.openqa.selenium.remote.http.Route.combine;
 import static org.openqa.selenium.remote.http.Route.get;
 import static org.openqa.selenium.remote.http.Route.matching;
-import static org.openqa.selenium.remote.http.Route.prefix;
 
 /**
  * A simple router that is aware of the selenium-protocol.
@@ -49,15 +48,14 @@ public Router(
     Distributor distributor) {
     Objects.requireNonNull(tracer, "Tracer to use must be set.");
 
-    Routable nonPrefixedRoutes =
+    routes =
       combine(
         get("/status")
           .to(() -> new GridStatusHandler(new Json(), tracer, clientFactory, distributor)),
         sessions.with(new SpanDecorator(tracer, req -> "session_map")),
         distributor.with(new SpanDecorator(tracer, req -> "distributor")),
         matching(req -> req.getUri().startsWith("/session/"))
           .to(() -> new HandleSession(tracer, clientFactory, sessions)));
-    routes = combine(nonPrefixedRoutes, prefix("/wd/hub").to(combine(nonPrefixedRoutes)));
   }
 
   @Override

File: java/server/src/org/openqa/selenium/grid/router/Router.java
Patch:
@@ -33,6 +33,7 @@
 import static org.openqa.selenium.remote.http.Route.combine;
 import static org.openqa.selenium.remote.http.Route.get;
 import static org.openqa.selenium.remote.http.Route.matching;
+import static org.openqa.selenium.remote.http.Route.prefix;
 
 /**
  * A simple router that is aware of the selenium-protocol.
@@ -48,14 +49,15 @@ public Router(
     Distributor distributor) {
     Objects.requireNonNull(tracer, "Tracer to use must be set.");
 
-    routes =
+    Routable nonPrefixedRoutes =
       combine(
         get("/status")
           .to(() -> new GridStatusHandler(new Json(), tracer, clientFactory, distributor)),
         sessions.with(new SpanDecorator(tracer, req -> "session_map")),
         distributor.with(new SpanDecorator(tracer, req -> "distributor")),
         matching(req -> req.getUri().startsWith("/session/"))
           .to(() -> new HandleSession(tracer, clientFactory, sessions)));
+    routes = combine(nonPrefixedRoutes, prefix("/wd/hub").to(combine(nonPrefixedRoutes)));
   }
 
   @Override

File: java/client/src/org/openqa/selenium/chromium/ChromiumOptions.java
Patch:
@@ -21,7 +21,7 @@
 import static com.google.common.base.Preconditions.checkNotNull;
 import static java.util.Collections.unmodifiableList;
 import static java.util.Collections.unmodifiableMap;
-import static java.util.stream.Collectors.toUnmodifiableList;
+import static java.util.stream.Collectors.toList;
 
 import com.google.common.io.Files;
 
@@ -230,7 +230,7 @@ public Map<String, Object> asMap() {
 
     options.put(
         "extensions",
-        Stream.concat(
+        unmodifiableList(Stream.concat(
             extensionFiles.stream()
                 .map(file -> {
                   try {
@@ -240,7 +240,7 @@ public Map<String, Object> asMap() {
                   }
                 }),
             extensions.stream()
-        ).collect(toUnmodifiableList()));
+        ).collect(toList())));
 
     toReturn.put(CAPABILITY, unmodifiableMap(options));
 

File: java/client/src/org/openqa/selenium/ie/InternetExplorerOptions.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.ie;
 
-import static java.util.stream.Collectors.toUnmodifiableList;
+import static java.util.stream.Collectors.toList;
 import static org.openqa.selenium.ie.InternetExplorerDriver.BROWSER_ATTACH_TIMEOUT;
 import static org.openqa.selenium.ie.InternetExplorerDriver.ELEMENT_SCROLL_BEHAVIOR;
 import static org.openqa.selenium.ie.InternetExplorerDriver.ENABLE_PERSISTENT_HOVERING;
@@ -163,7 +163,7 @@ public InternetExplorerOptions addCommandSwitches(String... switches) {
         Streams.concat((Stream<?>) List.class.cast(raw).stream(), Stream.of(switches))
             .filter(i -> i instanceof String)
             .map(String.class::cast)
-            .collect(toUnmodifiableList()));
+            .collect(toList()));
   }
 
   /**

File: java/client/test/org/openqa/selenium/environment/webserver/JreAppServer.java
Patch:
@@ -38,12 +38,12 @@
 import java.net.MalformedURLException;
 import java.net.URL;
 import java.nio.file.Path;
-import java.util.Map;
 import java.util.Objects;
 
 import static com.google.common.net.HttpHeaders.CONTENT_TYPE;
 import static com.google.common.net.MediaType.JSON_UTF_8;
 import static java.nio.charset.StandardCharsets.UTF_8;
+import static java.util.Collections.singletonMap;
 import static org.openqa.selenium.build.InProject.locate;
 import static org.openqa.selenium.remote.http.Contents.bytes;
 import static org.openqa.selenium.remote.http.Contents.string;
@@ -64,7 +64,7 @@ public JreAppServer(HttpHandler handler) {
 
     int port = PortProber.findFreePort();
     server = new JreServer(
-      new BaseServerOptions(new MapConfig(Map.of("server", Map.of("port", port)))),
+      new BaseServerOptions(new MapConfig(singletonMap("server", singletonMap("port", port)))),
       handler);
   }
 

File: java/client/test/org/openqa/selenium/remote/http/UrlPathTest.java
Patch:
@@ -19,8 +19,7 @@
 
 import org.junit.Test;
 
-import java.util.List;
-
+import static java.util.Collections.singletonList;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.openqa.selenium.remote.http.HttpMethod.GET;
 import static org.openqa.selenium.remote.http.UrlPath.ROUTE_PREFIX_KEY;
@@ -41,7 +40,7 @@ public void shouldAssumeARegularHttpRequestHasNoPrefix() {
   @Test
   public void shouldRedirectARequestWithAPrefixAttribute() {
     HttpRequest req = new HttpRequest(GET, "/cake");
-    req.setAttribute(ROUTE_PREFIX_KEY, List.of("/cheese"));
+    req.setAttribute(ROUTE_PREFIX_KEY, singletonList("/cheese"));
 
     String absolute = UrlPath.relativeToServer(req, "/cake");
     assertThat(absolute).isEqualTo("/cake");

File: java/server/src/org/openqa/selenium/grid/node/local/LocalNode.java
Patch:
@@ -190,7 +190,7 @@ public Optional<CreateSessionResponse> newSession(CreateSessionRequest sessionRe
         }
       }
 
-      if (possibleSession.isEmpty()) {
+      if (!possibleSession.isPresent()) {
         span.setAttribute("error", true);
         span.setStatus(Status.NOT_FOUND.withDescription(
             "No slots available for capabilities " + sessionRequest.getCapabilities()));

File: java/server/test/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumHandlerTest.java
Patch:
@@ -37,8 +37,8 @@
 import org.openqa.selenium.testing.Pages;
 
 import java.net.MalformedURLException;
-import java.util.Map;
 
+import static java.util.Collections.emptyMap;
 import static java.util.concurrent.TimeUnit.MINUTES;
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.testing.Safely.safelyCall;
@@ -58,7 +58,7 @@ public void setUpServer() throws MalformedURLException {
     ActiveSessions sessions = new ActiveSessions(3, MINUTES);
 
     server = new JreServer(
-      new BaseServerOptions(new MapConfig(Map.of())),
+      new BaseServerOptions(new MapConfig(emptyMap())),
       new WebDriverBackedSeleniumHandler(tracer, sessions));
 
     // Wait until the server is actually started.

File: java/server/test/org/openqa/selenium/grid/node/NodeTest.java
Patch:
@@ -405,7 +405,7 @@ public void canUploadAFile() throws IOException {
     assertThat(baseDir.listFiles()).hasSize(1);
     File uploadDir = baseDir.listFiles()[0];
     assertThat(uploadDir.listFiles()).hasSize(1);
-    assertThat(Files.readString(uploadDir.listFiles()[0].toPath())).isEqualTo(hello);
+    assertThat(new String(Files.readAllBytes(uploadDir.listFiles()[0].toPath()))).isEqualTo(hello);
 
     node.stop(session.getId());
     assertThat(baseDir).doesNotExist();

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -240,9 +240,9 @@ public void testShouldFireFocusKeyEventsInTheRightOrder() {
   }
 
   private static void checkRecordedKeySequence(WebElement element, int expectedKeyCode) {
-    assertThat(element.getText().trim()).isIn(
-        String.format("down: %1$d press: %1$d up: %1$d", expectedKeyCode),
-        String.format("down: %1$d up: %1$d", expectedKeyCode));
+    assertThat(element.getText().trim()).contains(
+        String.format("down: %1$d", expectedKeyCode),
+        String.format("up: %1$d", expectedKeyCode));
   }
 
   @Test

File: java/client/src/org/openqa/selenium/chrome/ChromeOptions.java
Patch:
@@ -36,7 +36,7 @@
  *
  * // For use with RemoteWebDriver:
  * RemoteWebDriver driver = new RemoteWebDriver(
- *     new URL("http://localhost:4444/wd/hub"),
+ *     new URL("http://localhost:4444/"),
  *     new ChromeOptions());
  * </code></pre>
  *

File: java/client/src/org/openqa/selenium/chromium/ChromiumOptions.java
Patch:
@@ -55,7 +55,7 @@
  *
  * // For use with RemoteWebDriver:
  * RemoteWebDriver driver = new RemoteWebDriver(
- *     new URL("http://localhost:4444/wd/hub"),
+ *     new URL("http://localhost:4444/"),
  *     new ChromeOptions());
  * </code></pre>
  *

File: java/client/src/org/openqa/selenium/edge/EdgeOptions.java
Patch:
@@ -35,7 +35,7 @@
  *
  * // For use with RemoteWebDriver:
  * RemoteWebDriver driver = new RemoteWebDriver(
- *     new URL("http://localhost:4444/wd/hub"),
+ *     new URL("http://localhost:4444/"),
  *     new EdgeOptions());
  * </code></pre>
  *

File: java/client/src/org/openqa/selenium/opera/OperaOptions.java
Patch:
@@ -54,7 +54,7 @@
  * // For use with RemoteWebDriver:
  * OperaOptions options = new OperaOptions();
  * RemoteWebDriver driver = new RemoteWebDriver(
- *     new URL("http://localhost:4444/wd/hub"), options);
+ *     new URL("http://localhost:4444/"), options);
  * </code></pre>
  */
 public class OperaOptions extends AbstractDriverOptions<OperaOptions> {

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -79,7 +79,7 @@ public HttpCommandExecutor(
       HttpClient.Factory httpClientFactory) {
     try {
       remoteServer = addressOfRemoteServer == null
-          ? new URL(System.getProperty("webdriver.remote.server", "http://localhost:4444/wd/hub"))
+          ? new URL(System.getProperty("webdriver.remote.server", "http://localhost:4444/"))
           : addressOfRemoteServer;
     } catch (MalformedURLException e) {
       throw new WebDriverException(e);

File: java/client/src/org/openqa/selenium/safari/SafariOptions.java
Patch:
@@ -44,7 +44,7 @@
  *
  * // For use with RemoteWebDriver:
  * RemoteWebDriver driver = new RemoteWebDriver(
- *     new URL("http://localhost:4444/wd/hub"),
+ *     new URL("http://localhost:4444/"),
  *     options);
  * </code></pre>
  */

File: java/server/src/org/openqa/selenium/grid/commands/MessageBusCommand.java
Patch:
@@ -69,7 +69,6 @@ protected Set<Object> getFlagObjects() {
     return ImmutableSet.of(
       new BaseServerFlags(),
       new EventBusFlags());
-
   }
 
   @Override

File: java/server/src/org/openqa/selenium/grid/data/NodeAddedEvent.java
Patch:
@@ -26,7 +26,7 @@ public class NodeAddedEvent extends Event {
 
   public static final Type NODE_ADDED = new Type("node-added");
 
-    public NodeAddedEvent(UUID nodeId) {
+  public NodeAddedEvent(UUID nodeId) {
     super(NODE_ADDED, nodeId);
   }
 }

File: java/client/src/org/openqa/selenium/DeviceRotation.java
Patch:
@@ -52,7 +52,7 @@ public DeviceRotation(int x, int y, int z) {
   public DeviceRotation(Map<String, Number> map) {
     if (map == null || !map.containsKey("x") || !map.containsKey("y") || !map.containsKey("z")) {
       throw new IllegalArgumentException(
-          "Could not initialize DeviceRotation with map given: " + map.toString());
+          "Could not initialize DeviceRotation with map given: " + String.valueOf(map));
     }
     this.x = map.get("x").intValue();
     this.y = map.get("y").intValue();

File: java/server/test/org/openqa/selenium/grid/node/config/NodeOptionsTest.java
Patch:
@@ -76,6 +76,7 @@ public void canConfigureNodeWithDriverDetection() {
     assumeFalse("We don't have driver servers in PATH when we run unit tests",
                 Boolean.getBoolean("TRAVIS"));
     System.out.println("Wonder why assumeFalse did not work, TRAVIS = " + Boolean.getBoolean("TRAVIS"));
+    System.getenv().forEach((k, v) -> System.out.println(String.format("%s=%s", k, v)));
 
     Config config = new MapConfig(ImmutableMap.of(
         "node", ImmutableMap.of("detect-drivers", "true")));

File: java/server/test/org/openqa/selenium/grid/node/config/NodeOptionsTest.java
Patch:
@@ -75,6 +75,7 @@ public void setUp() throws URISyntaxException {
   public void canConfigureNodeWithDriverDetection() {
     assumeFalse("We don't have driver servers in PATH when we run unit tests",
                 Boolean.getBoolean("TRAVIS"));
+    System.out.println("Wonder why assumeFalse did not work, TRAVIS = " + Boolean.getBoolean("TRAVIS"));
 
     Config config = new MapConfig(ImmutableMap.of(
         "node", ImmutableMap.of("detect-drivers", "true")));

File: java/server/src/org/openqa/selenium/grid/node/httpd/NodeFlags.java
Patch:
@@ -24,7 +24,7 @@
 class NodeFlags {
 
   @Parameter(
-      names = {"--detect-drivers"},
+      names = {"--detect-drivers"}, arity = 1,
       description = "Autodetect which drivers are available on the current system, and add them to the node.")
   @ConfigValue(section = "node", name = "detect-drivers")
   public boolean autoconfigure = true;

File: java/client/src/org/openqa/selenium/interactions/Actions.java
Patch:
@@ -351,7 +351,7 @@ public Actions doubleClick() {
 
   /**
    * Moves the mouse to the middle of the element. The element is scrolled into view and its
-   * location is calculated using getBoundingClientRect.
+   * location is calculated using getClientRects.
    * @param target element to move to.
    * @return A self reference.
    */
@@ -365,7 +365,7 @@ public Actions moveToElement(WebElement target) {
 
   /**
    * Moves the mouse to an offset from the center of the element.
-   * The element is scrolled into view and its location is calculated using getBoundingClientRect.
+   * The element is scrolled into view and its location is calculated using getClientRects.
    * @param target element to move to.
    * @param xOffset Offset from the center. A negative value means coordinates left from
    * the element.

File: java/server/src/org/openqa/selenium/grid/TemplateGridCommand.java
Patch:
@@ -68,7 +68,7 @@ public final Executable configure(String... args) {
       allConfigs.add(configFlags.readConfigFiles());
       allConfigs.add(getDefaultConfig());
 
-      Config config = new CompoundConfig(allConfigs.toArray(Config[]::new));
+      Config config = new CompoundConfig(allConfigs.toArray(new Config[0]));
 
       if (helpFlags.dumpConfig(config, System.out)) {
         return;

File: java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java
Patch:
@@ -1346,7 +1346,7 @@ public String toString() {
   private static boolean isInvisible(final WebElement element) {
     try {
       return !element.isDisplayed();
-    } catch (StaleElementReferenceException ignored) {
+    } catch (StaleElementReferenceException | NoSuchElementException ignored) {
       // We can assume a stale element isn't displayed.
       return true;
     }

File: java/client/src/com/thoughtworks/selenium/SeleneseTestBase.java
Patch:
@@ -129,7 +129,6 @@ protected int getDefaultPort() {
    * @param url the baseUrl for your tests
    * @param browserString the browser to use, e.g. *firefox
    * @param port the port that you want to run your tests on
-   * @throws Exception exception all the things!
    */
   public void setUp(String url, String browserString, int port) {
     if (url == null) {

File: java/client/src/com/thoughtworks/selenium/SeleneseTestCase.java
Patch:
@@ -120,7 +120,6 @@ public void setUp(String url, String browserString) throws Exception {
    * @param url the baseUrl for your tests
    * @param browserString the browser to use, e.g. *firefox
    * @param port the port of Selenium RC
-   * @throws Exception yep, generic Exception
    */
   public void setUp(String url, String browserString, int port) {
     stb.setUp(url, browserString, port);

File: java/client/src/org/openqa/selenium/virtualauthenticator/Credential.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * A credential stored in a virtual authenticator.
- * @see https://w3c.github.io/webauthn/#credential-parameters
+ * @see <a href="https://w3c.github.io/webauthn/#credential-parameters">https://w3c.github.io/webauthn/#credential-parameters</a>
  */
 public class Credential {
 

File: java/client/src/org/openqa/selenium/virtualauthenticator/VirtualAuthenticatorOptions.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Options for the creation of virtual authenticators.
- * @see https://w3c.github.io/webauthn/#sctn-automation
+ * @see <a href="https://w3c.github.io/webauthn/#sctn-automation">https://w3c.github.io/webauthn/#sctn-automation</a>
  */
 public class VirtualAuthenticatorOptions {
 

File: java/server/test/org/openqa/selenium/remote/server/ActiveSessionFactoryTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.openqa.selenium.grid.session.SessionFactory;
 import org.openqa.selenium.remote.Dialect;
 
-import io.opentelemetry.trace.DefaultTracerFactory;
+import io.opentelemetry.OpenTelemetry;
 
 import java.util.Optional;
 
@@ -45,7 +45,7 @@ public void factoriesFoundViaServiceLoadersAreUsedFirst() {
     Capabilities caps = new ImmutableCapabilities("browserName", "chrome");
     DriverProvider provider = new StubbedProvider(caps, driver);
 
-    ActiveSessionFactory sessionFactory = new ActiveSessionFactory(DefaultTracerFactory.getInstance().get(ActiveSessionFactoryTest.class.getName())) {
+    ActiveSessionFactory sessionFactory = new ActiveSessionFactory(OpenTelemetry.getTracerProvider().get("default")) {
       @Override
       protected Iterable<DriverProvider> loadDriverProviders() {
         return ImmutableSet.of(provider);
@@ -62,7 +62,7 @@ protected Iterable<DriverProvider> loadDriverProviders() {
   public void canBindNewFactoriesAtRunTime() {
     ActiveSession session = Mockito.mock(ActiveSession.class);
 
-    ActiveSessionFactory sessionFactory = new ActiveSessionFactory(DefaultTracerFactory.getInstance().get(ActiveSessionFactoryTest.class.getName()))
+    ActiveSessionFactory sessionFactory = new ActiveSessionFactory(OpenTelemetry.getTracerProvider().get("default"))
         .bind(caps ->
                   "cheese".equals(caps.getBrowserName()),
               new SessionFactory() {

File: java/server/test/org/openqa/selenium/docker/v1_40/ListImagesTest.java
Patch:
@@ -46,9 +46,6 @@ public void shouldReturnImageIfTagIsPresent() {
         String decoded = URLDecoder.decode(filters, "UTF-8");
         Map<String, Object> raw = new Json().toType(decoded, MAP_TYPE);
 
-        System.out.println(decoded);
-        System.out.println(raw);
-
         Map<?, ?> rawRef = (Map<?, ?>) raw.get("reference");
         assertThat(rawRef.get("selenium/standalone-firefox:latest")).isEqualTo(true);
 

File: java/client/src/org/openqa/selenium/remote/RemoteWebElement.java
Patch:
@@ -106,7 +106,7 @@ public void sendKeys(CharSequence... keysToSend) {
     List<File> files = Arrays.stream(allKeysToSend.split("\n"))
         .map(fileDetector::getLocalFile)
         .collect(Collectors.toList());
-    if (! files.contains(null)) {
+    if (!files.isEmpty() && !files.contains(null)) {
       allKeysToSend = files.stream()
           .map(this::upload)
           .collect(Collectors.joining("\n"));

File: java/server/src/org/openqa/selenium/docker/v1_40/V140Docker.java
Patch:
@@ -25,7 +25,6 @@
 import org.openqa.selenium.docker.Image;
 import org.openqa.selenium.docker.internal.Reference;
 import org.openqa.selenium.remote.http.HttpHandler;
-import org.openqa.selenium.remote.http.HttpRequest;
 
 import java.time.Duration;
 import java.util.Objects;

File: java/server/src/org/openqa/selenium/grid/web/RoutableHttpClientFactory.java
Patch:
@@ -24,6 +24,7 @@
 import org.openqa.selenium.remote.http.WebSocket;
 
 import java.io.UncheckedIOException;
+import java.net.URI;
 import java.net.URL;
 import java.util.Objects;
 
@@ -45,9 +46,9 @@ public RoutableHttpClientFactory(URL self, CombinedHandler handler, HttpClient.F
   public HttpClient createClient(ClientConfig config) {
     Objects.requireNonNull(config, "Client config to use must be set.");
 
-    URL url = config.baseUrl();
+    URI url = config.baseUri();
 
-    if (self.getProtocol().equals(url.getProtocol()) &&
+    if (self.getProtocol().equals(url.getScheme()) &&
       self.getHost().equals(url.getHost()) &&
       self.getPort() == url.getPort()) {
 

File: java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java
Patch:
@@ -277,7 +277,7 @@ private void refresh(NodeStatus status) {
     LOG.fine("Refreshing: " + status.getUri());
 
     // check registrationSecret and stop processing if it doesn't match
-    if (! Objects.equals(status.getRegistrationSecret(), registrationSecret)) {
+    if (!Objects.equals(status.getRegistrationSecret(), registrationSecret)) {
       LOG.severe(String.format("Node at %s failed to send correct registration secret. Node NOT registered.", status.getUri()));
       bus.fire(new NodeRejectedEvent(status.getUri()));
       return;

File: java/server/test/org/openqa/selenium/grid/distributor/AddingNodesTest.java
Patch:
@@ -175,7 +175,7 @@ public void distributorShouldUpdateStateOfExistingNodeWhenNodePublishesStateChan
         status.getMaxSessionCount(),
         status.getStereotypes(),
         ImmutableSet.of(new NodeStatus.Active(CAPS, new SessionId(UUID.randomUUID()), CAPS)),
-        "cheese");
+        null);
 
     bus.fire(new NodeStatusEvent(crafted));
 

File: java/server/test/org/openqa/selenium/grid/distributor/DistributorTest.java
Patch:
@@ -255,7 +255,7 @@ public void registeringTheCorrectRegistrationSecretWorks()
 
     latch.await(1, SECONDS);
 
-    assertThat(latch.getCount()).isEqualTo(1);
+    assertThat(latch.getCount()).isEqualTo(0);
   }
 
 

File: java/server/src/org/openqa/selenium/grid/node/config/DriverServiceSessionFactory.java
Patch:
@@ -99,7 +99,7 @@ public Optional<ActiveSession> apply(CreateSessionRequest sessionRequest) {
               new ImmutableCapabilities((Map<?, ?>)response.getValue())) {
             @Override
             public void stop() {
-              // no-op
+              service.stop();
             }
           });
     } catch (Exception e) {

File: java/client/src/org/openqa/selenium/remote/http/netty/NettyHttpHandler.java
Patch:
@@ -31,12 +31,12 @@
 
 public class NettyHttpHandler extends RemoteCall {
 
-  private final AsyncHttpClient client;
   private final HttpHandler handler;
+  private final AsyncHttpClient client;
 
-  public NettyHttpHandler(ClientConfig config) {
+  public NettyHttpHandler(ClientConfig config, AsyncHttpClient client) {
     super(config);
-    this.client = new CreateNettyClient().apply(config);
+    this.client = client;
     this.handler = config.filter().andFinally(this::makeCall);
   }
 

File: java/client/src/org/openqa/selenium/remote/http/netty/NettyWebSocket.java
Patch:
@@ -48,7 +48,7 @@ class NettyWebSocket implements WebSocket {
 
   private static final Logger log = Logger.getLogger(NettyWebSocket.class.getName());
 
-  private org.asynchttpclient.ws.WebSocket socket;
+  private final org.asynchttpclient.ws.WebSocket socket;
 
   private NettyWebSocket(AsyncHttpClient client, org.asynchttpclient.Request request, Listener listener) {
     Objects.requireNonNull(client, "HTTP client to use must be set.");
@@ -97,7 +97,7 @@ public void onTextFrame(String payload, boolean finalFragment, int rsv) {
     }
   }
 
-  static BiFunction<HttpRequest, Listener, WebSocket> create(ClientConfig config) {
+  static BiFunction<HttpRequest, Listener, WebSocket> create(ClientConfig config, AsyncHttpClient client) {
     Filter filter = config.filter();
 
     Function<HttpRequest, HttpRequest> filterRequest = req -> {
@@ -109,7 +109,6 @@ static BiFunction<HttpRequest, Listener, WebSocket> create(ClientConfig config)
       return ref.get();
     };
 
-    AsyncHttpClient client = new CreateNettyClient().apply(config);
     return (req, listener) -> {
       HttpRequest filtered = filterRequest.apply(req);
 

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/AlertOverride.java
Patch:
@@ -88,7 +88,7 @@ public void replaceAlertMethod(WebDriver driver) {
         "  window.__webdriverPrompts = []; " +
         "  window.__webdriverNextPrompts = true; " +
         "  window.prompt = function(msg, def) { " +
-        "    window.__webdriverPrompt.push(msg || def); " +
+        "    window.__webdriverPrompts.push(msg || def); " +
         "    var res = window.__webdriverNextPrompt; " +
         "    window.__webdriverNextPrompt = true; " +
         "    return res; " +

File: java/server/src/org/openqa/selenium/events/zeromq/BoundZmqEventBus.java
Patch:
@@ -46,10 +46,12 @@ class BoundZmqEventBus implements EventBus {
     LOG.info(String.format("XPUB binding to %s, XSUB binding to %s", xpubAddr, xsubAddr));
 
     xpub = context.createSocket(SocketType.XPUB);
+    xpub.setIPv6(true);
     xpub.setImmediate(true);
     xpub.bind(xpubAddr.bindTo);
 
     xsub = context.createSocket(SocketType.XSUB);
+    xsub.setIPv6(true);
     xsub.setImmediate(true);
     xsub.bind(xsubAddr.bindTo);
 

File: java/server/src/org/openqa/selenium/events/zeromq/UnboundEventBus.java
Patch:
@@ -64,10 +64,12 @@ class UnboundZmqEventBus implements EventBus {
     LOG.info(String.format("Connecting to %s and %s", publishConnection, subscribeConnection));
 
     sub = context.createSocket(SocketType.SUB);
+    sub.setIPv6(true);
     sub.connect(publishConnection);
     sub.subscribe(new byte[0]);
 
     pub = context.createSocket(SocketType.PUB);
+    pub.setIPv6(true);
     pub.connect(subscribeConnection);
 
     ZMQ.Poller poller = context.createPoller(1);

File: java/server/src/org/openqa/selenium/grid/node/httpd/NodeFlags.java
Patch:
@@ -27,5 +27,5 @@ class NodeFlags {
       names = {"--detect-drivers"},
       description = "Autodetect which drivers are available on the current system, and add them to the node.")
   @ConfigValue(section = "node", name = "detect-drivers")
-  public boolean autoconfigure;
+  public boolean autoconfigure = true;
 }

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -580,7 +580,7 @@ Response execute(CommandPayload payload) {
     try {
       log(sessionId, command.getName(), command, When.BEFORE);
       response = executor.execute(command);
-      log(sessionId, command.getName(), command, When.AFTER);
+      log(sessionId, command.getName(), response, When.AFTER);
 
       if (response == null) {
         return null;

File: java/client/src/org/openqa/selenium/remote/http/HttpClient.java
Patch:
@@ -36,7 +36,7 @@ interface Factory {
      * {@link HttpClient} should be used.
      */
     static Factory createDefault() {
-      String defaultFactory = System.getProperty("webdriver.http.factory", "okhttp");
+      String defaultFactory = System.getProperty("webdriver.http.factory", "netty");
       switch (defaultFactory) {
         case "netty":
           try {

File: java/client/src/org/openqa/selenium/virtualauthenticator/VirtualAuthenticatorOptions.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class VirtualAuthenticatorOptions {
 
-  enum Protocol {
+  public enum Protocol {
     CTAP2("ctap2"),
     U2F("ctap1/u2f");
 
@@ -38,7 +38,7 @@ private Protocol(String id) {
     }
   }
 
-  enum Transport {
+  public enum Transport {
     BLE("ble"),
     INTERNAL("internal"),
     NFC("nfc"),

File: java/server/src/org/openqa/selenium/jre/server/JreMessages.java
Patch:
@@ -31,7 +31,7 @@ class JreMessages {
   static HttpRequest asRequest(HttpExchange exchange) {
     HttpRequest request = new HttpRequest(
       HttpMethod.valueOf(exchange.getRequestMethod()),
-      exchange.getRequestURI().toString());
+      exchange.getRequestURI().getPath());
 
     String query = exchange.getRequestURI().getQuery();
     if (query != null) {

File: java/client/test/org/openqa/selenium/ClearTest.java
Patch:
@@ -128,7 +128,7 @@ public void shouldBeAbleToClearTextInput() {
 
   @Test
   public void shouldBeAbleToClearUrlInput() {
-    shouldBeAbleToClearInput(By.name("url_input"), "http://selenium.dev/");
+    shouldBeAbleToClearInput(By.name("url_input"), "https://selenium.dev/");
   }
 
   @Test

File: java/client/src/org/openqa/selenium/devtools/CdpClientGenerator.java
Patch:
@@ -84,7 +84,7 @@ public static void main(String[] args) throws IOException {
       Files.walkFileTree(target, new SimpleFileVisitor<Path>() {
         @Override
         public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {
-          String relative = target.relativize(dir).toString();
+          String relative = target.relativize(dir).toString().replace('\\', '/');
           JarEntry entry = new JarEntry(devtoolsDir + relative + "/");
           jos.putNextEntry(entry);
           jos.closeEntry();
@@ -94,7 +94,7 @@ public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) th
 
         @Override
         public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
-          String relative = target.relativize(file).toString();
+          String relative = target.relativize(file).toString().replace('\\', '/');
           JarEntry entry = new JarEntry(devtoolsDir + relative);
           jos.putNextEntry(entry);
           try (InputStream is = Files.newInputStream(file)) {

File: java/client/src/org/openqa/selenium/remote/Augmenter.java
Patch:
@@ -147,7 +147,7 @@ protected <X> X performAugmentation(CompoundHandler handler, X from) {
           .asSubclass(from.getClass());
 
       try {
-        return (X) loaded.newInstance();
+        return (X) loaded.getDeclaredConstructor().newInstance();
       } catch (ReflectiveOperationException e) {
         throw new RuntimeException("Unable to create subclass", e);
       }

File: java/client/src/org/openqa/selenium/support/PageFactory.java
Patch:
@@ -125,7 +125,7 @@ private static <T> T instantiatePage(WebDriver driver, Class<T> pageClassToProxy
         Constructor<T> constructor = pageClassToProxy.getConstructor(WebDriver.class);
         return constructor.newInstance(driver);
       } catch (NoSuchMethodException e) {
-        return pageClassToProxy.newInstance();
+        return pageClassToProxy.getDeclaredConstructor().newInstance();
       }
     } catch (ReflectiveOperationException e) {
       throw new RuntimeException(e);

File: java/client/src/org/openqa/selenium/support/pagefactory/Annotations.java
Patch:
@@ -70,7 +70,7 @@ public By buildBy() {
         try {
           builder = annotation.annotationType()
               .getAnnotation(PageFactoryFinder.class).value()
-              .newInstance();
+              .getDeclaredConstructor().newInstance();
         } catch (ReflectiveOperationException e) {
           // Fall through.
         }

File: java/client/test/org/openqa/selenium/ContentEditableTest.java
Patch:
@@ -61,7 +61,8 @@ public void testTypingIntoAnIFrameWithContentEditableOrDesignModeSet() {
   public void testNonPrintableCharactersShouldWorkWithContentEditableOrDesignModeSet() {
     assumeFalse("FIXME: Fails in Firefox on Linux with synthesized events",
                 isFirefox(driver) &&
-                (getEffectivePlatform().is(Platform.LINUX) || getEffectivePlatform().is(Platform.MAC)));
+                (getEffectivePlatform(driver).is(Platform.LINUX) ||
+                 getEffectivePlatform(driver).is(Platform.MAC)));
 
     driver.get(pages.richTextPage);
 

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -563,7 +563,7 @@ private static void assertEventNotFired(String eventName, WebDriver driver) {
 
   private static boolean browserNeedsFocusOnThisOs(WebDriver driver) {
     // No browser yet demands focus on windows
-    if (TestUtilities.getEffectivePlatform().is(Platform.WINDOWS))
+    if (TestUtilities.getEffectivePlatform(driver).is(Platform.WINDOWS))
       return false;
 
     if (Boolean.getBoolean("webdriver.focus.override")) {

File: java/client/test/org/openqa/selenium/I18nTest.java
Patch:
@@ -129,7 +129,7 @@ public void testShouldBeAbleToReturnTheTextInAPage() {
   @NotYetImplemented(HTMLUNIT)
   public void testShouldBeAbleToActivateIMEEngine() throws InterruptedException {
     assumeTrue("IME is supported on Linux only.",
-               TestUtilities.getEffectivePlatform().is(Platform.LINUX));
+               TestUtilities.getEffectivePlatform(driver).is(Platform.LINUX));
 
     driver.get(pages.formPage);
 
@@ -179,7 +179,7 @@ public void testShouldBeAbleToActivateIMEEngine() throws InterruptedException {
   @Ignore(FIREFOX)
   public void testShouldBeAbleToInputJapanese() {
     assumeTrue("IME is supported on Linux only.",
-               TestUtilities.getEffectivePlatform().is(Platform.LINUX));
+               TestUtilities.getEffectivePlatform(driver).is(Platform.LINUX));
 
     driver.get(pages.formPage);
 

File: java/client/test/org/openqa/selenium/interactions/BasicKeyboardInterfaceTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
 import static org.junit.Assume.assumeFalse;
+import static org.openqa.selenium.testing.TestUtilities.getEffectivePlatform;
 import static org.openqa.selenium.testing.drivers.Browser.CHROME;
 import static org.openqa.selenium.testing.drivers.Browser.EDGE;
 import static org.openqa.selenium.testing.drivers.Browser.HTMLUNIT;
@@ -251,7 +252,7 @@ public void testSelectionSelectBySymbol() {
   public void testSelectionSelectByWord() {
     assumeFalse(
         "MacOS has alternative keyboard",
-        TestUtilities.getEffectivePlatform().is(Platform.MAC));
+        getEffectivePlatform(driver).is(Platform.MAC));
 
     driver.get(appServer.whereIs("single_text_input.html"));
 
@@ -276,7 +277,7 @@ public void testSelectionSelectByWord() {
   public void testSelectionSelectAll() {
     assumeFalse(
         "MacOS has alternative keyboard",
-        TestUtilities.getEffectivePlatform().is(Platform.MAC));
+        getEffectivePlatform(driver).is(Platform.MAC));
 
     driver.get(appServer.whereIs("single_text_input.html"));
 

File: java/client/test/org/openqa/selenium/interactions/DragAndDropTest.java
Patch:
@@ -50,7 +50,7 @@ public class DragAndDropTest extends JUnit4TestBase {
   @Test
   public void testDragAndDropRelative() {
     assumeFalse(Browser.detect() == Browser.OPERA &&
-                TestUtilities.getEffectivePlatform().is(Platform.WINDOWS));
+                TestUtilities.getEffectivePlatform(driver).is(Platform.WINDOWS));
 
     driver.get(pages.dragAndDropPage);
     WebElement img = driver.findElement(By.id("test1"));

File: java/client/src/org/openqa/selenium/devtools/network/Network.java
Patch:
@@ -561,7 +561,8 @@ public static Event<RequestWillBeSent> requestWillBeSent() {
   @Beta
   public static Event<RequestIntercepted> requestIntercepted() {
     return new Event<>(DOMAIN_NAME + ".requestIntercepted",
-                       map("interceptionId", RequestIntercepted.class));
+                       input -> input.read(RequestIntercepted.class)
+    );
   }
 
   /**

File: java/client/test/org/openqa/selenium/devtools/ChromeDevToolsFetchTest.java
Patch:
@@ -91,7 +91,7 @@ public void testContinueRequest() {
     chromeDriver.get(appServer.whereIs("simpleTest.html"));
   }
 
-  //@Test
+  @Test
   public void testFailRequest() {
     devTools.addListener(
         requestPaused(),

File: java/client/src/org/openqa/selenium/devtools/DevTools.java
Patch:
@@ -27,9 +27,9 @@
 
 import java.io.Closeable;
 import java.time.Duration;
+import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
-import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.TimeoutException;
@@ -71,7 +71,7 @@ public void createSessionIfThereIsNotOne() {
 
   public void createSession() {
     // Figure out the targets.
-    Set<TargetInfo> infos = connection.sendAndWait(cdpSession, Target.getTargets(), timeout);
+    List<TargetInfo> infos = connection.sendAndWait(cdpSession, Target.getTargets(), timeout);
 
     // Grab the first "page" type, and glom on to that.
     // TODO: Find out which one might be the current one

File: java/client/src/org/openqa/selenium/devtools/target/Target.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
-import java.util.Set;
 
 import static org.openqa.selenium.devtools.ConverterFunctions.map;
 
@@ -178,11 +177,11 @@ public static Command<TargetInfo> getTargetInfo(Optional<TargetID> targetId) {
   /**
    * Retrieves a list of available targets.
    */
-  public static Command<Set<TargetInfo>> getTargets() {
+  public static Command<List<TargetInfo>> getTargets() {
     return new Command<>(
         "Target.getTargets",
         ImmutableMap.of(),
-        ConverterFunctions.map("targetInfos", new TypeToken<Set<TargetInfo>>() {
+        ConverterFunctions.map("targetInfos", new TypeToken<List<TargetInfo>>() {
         }.getType()));
   }
 

File: java/client/test/org/openqa/selenium/devtools/ChromeDevToolsInspectorTest.java
Patch:
@@ -22,8 +22,8 @@
 import org.openqa.selenium.devtools.target.model.SessionID;
 import org.openqa.selenium.devtools.target.model.TargetInfo;
 
+import java.util.List;
 import java.util.Optional;
-import java.util.Set;
 
 import static org.openqa.selenium.devtools.inspector.Inspector.detached;
 import static org.openqa.selenium.devtools.inspector.Inspector.disable;
@@ -35,7 +35,7 @@ public class ChromeDevToolsInspectorTest extends DevToolsTestBase {
   public void inspectDetached() {
     devTools.addListener(detached(), Assert::assertNotNull);
     devTools.send(enable());
-    Set<TargetInfo> targetInfos = devTools.send(Target.getTargets());
+    List<TargetInfo> targetInfos = devTools.send(Target.getTargets());
     targetInfos.forEach(
             targetInfo -> {
               SessionID sessionId =

File: java/server/src/org/openqa/selenium/netty/server/SeleniumHttpInitializer.java
Patch:
@@ -17,13 +17,13 @@
 
 package org.openqa.selenium.netty.server;
 
-import org.openqa.selenium.remote.http.HttpHandler;
-
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.socket.SocketChannel;
+import io.netty.handler.codec.http.HttpObjectAggregator;
 import io.netty.handler.codec.http.HttpServerCodec;
 import io.netty.handler.codec.http.HttpServerKeepAliveHandler;
 import io.netty.handler.stream.ChunkedWriteHandler;
+import org.openqa.selenium.remote.http.HttpHandler;
 
 import java.util.Objects;
 
@@ -36,7 +36,7 @@ class SeleniumHttpInitializer extends ChannelInitializer<SocketChannel> {
   }
 
   @Override
-  protected void initChannel(SocketChannel ch) throws Exception {
+  protected void initChannel(SocketChannel ch) {
     ch.pipeline().addLast("codec", new HttpServerCodec());
     ch.pipeline().addLast("keep-alive", new HttpServerKeepAliveHandler());
     ch.pipeline().addLast("chunked-write", new ChunkedWriteHandler());

File: java/server/src/org/openqa/selenium/docker/Container.java
Patch:
@@ -50,7 +50,7 @@ public ContainerId getId() {
   public void start() {
     LOG.info("Starting " + getId());
     HttpResponse res = client.execute(new HttpRequest(POST, String.format("/containers/%s/start", id)));
-    if (res.getStatus() != HTTP_OK) {
+    if (!res.isSuccessful()) {
       throw new WebDriverException("Unable to start container: " + Contents.string(res));
     }
   }
@@ -66,7 +66,7 @@ public void stop(Duration timeout) {
       .addQueryParameter("t", seconds);
 
     HttpResponse res = client.execute(request);
-    if (res.getStatus() != HTTP_OK) {
+    if (!res.isSuccessful()) {
       throw new WebDriverException("Unable to stop container: " + Contents.string(res));
     }
   }

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -59,7 +59,7 @@
 @AutoService(CliCommand.class)
 public class Standalone implements CliCommand {
 
-  public static final Logger LOG = Logger.getLogger("selenium");
+  private static final Logger LOG = Logger.getLogger("selenium");
 
   @Override
   public String getName() {

File: java/client/test/org/openqa/selenium/remote/W3CRemoteDriverTest.java
Patch:
@@ -25,6 +25,7 @@
 import static org.junit.Assume.assumeNotNull;
 import static org.openqa.selenium.json.Json.MAP_TYPE;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
@@ -274,6 +275,7 @@ public void shouldDetectDriverServicesAndUseThoseIfNoOtherChoiceMade() {
   }
 
   @Test
+  @Ignore
   public void shouldPreferMarionette() {
     // Make sure we have at least one of the services available
     Capabilities caps = new FirefoxOptions();

File: java/client/test/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -196,10 +196,10 @@ public void testAddCookiesWithDifferentPathsThatAreRelatedToOurs() {
 
   @SwitchToTopAfterTest
   @Test
-  @NotYetImplemented(CHROME)
-  @NotYetImplemented(CHROMIUMEDGE)
+  @NotYetImplemented(value = CHROME, reason = "https://bugs.chromium.org/p/chromedriver/issues/detail?id=3153")
+  @NotYetImplemented(value = CHROMIUMEDGE, reason = "https://bugs.chromium.org/p/chromedriver/issues/detail?id=3153")
   @Ignore(SAFARI)
-  @NotYetImplemented(MARIONETTE)
+  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/1104")
   public void testGetCookiesInAFrame() {
     driver.get(domainHelper.getUrlForFirstValidHostname("/common/animals"));
     Cookie cookie1 = new Cookie.Builder("fish", "cod").path("/common/animals").build();

File: java/client/src/org/openqa/selenium/remote/ErrorHandler.java
Patch:
@@ -220,7 +220,7 @@ private <T extends Throwable> T createThrowable(
 
   private Throwable rebuildServerError(Map<String, Object> rawErrorData, int responseStatus) {
 
-    if (!rawErrorData.containsKey(CLASS) && !rawErrorData.containsKey(STACK_TRACE)) {
+    if (rawErrorData.get(CLASS) == null || rawErrorData.get(STACK_TRACE) == null) {
       // Not enough information for us to try to rebuild an error.
       return null;
     }

File: java/client/src/org/openqa/selenium/support/locators/RelativeLocator.java
Patch:
@@ -59,7 +59,7 @@ private RelativeBy(Object rootLocator) {
     private RelativeBy(Object rootLocator, List<Map<String, Object>> filters) {
       if (rootLocator instanceof By) {
         assertLocatorCanBeSerialized(rootLocator);
-        rootLocator = asAtomLocatorParameter((By) rootLocator);
+        rootLocator = asAtomLocatorParameter(rootLocator);
       } else if (rootLocator instanceof Map) {
         if (((Map<?, ?>) rootLocator).keySet().size() != 1) {
           throw new IllegalArgumentException(
@@ -158,7 +158,6 @@ public List<WebElement> findElements(SearchContext context) {
 
       @SuppressWarnings("unchecked")
       List<WebElement> elements = (List<WebElement>) js.executeScript(FIND_ELEMENTS, this.toJson());
-      System.out.println(elements);
       return elements;
     }
 
@@ -215,7 +214,7 @@ private static Object asAtomLocatorParameter(Object object) {
       throw new IllegalArgumentException("Expected locator to be either an element or a By: " + object);
     }
 
-    assertLocatorCanBeSerialized((By) object);
+    assertLocatorCanBeSerialized(object);
 
     Map<String, Object> raw = JSON.toType(JSON.toJson(object), MAP_TYPE);
 

File: java/client/test/org/openqa/selenium/ProxyTest.java
Patch:
@@ -207,7 +207,7 @@ public void longSocksVersionFromMap() {
     proxyData.put("sslProxy", "ssl.proxy");
     proxyData.put("noProxy", "localhost,127.0.0.*");
     proxyData.put("socksProxy", "socks.proxy:65555");
-    proxyData.put("socksVersion", new Long(l));
+    proxyData.put("socksVersion", l);
     proxyData.put("socksUsername", "test1");
     proxyData.put("socksPassword", "test2");
 

File: java/client/test/org/openqa/selenium/environment/GlobalTestEnvironment.java
Patch:
@@ -41,7 +41,7 @@ public static synchronized <T extends TestEnvironment> T get(
       Class<T> startThisIfNothingIsAlreadyRunning) {
     if (environment == null) {
       try {
-        environment = startThisIfNothingIsAlreadyRunning.newInstance();
+        environment = startThisIfNothingIsAlreadyRunning.getConstructor().newInstance();
       } catch (Exception e) {
         throw new RuntimeException(e);
       }

File: java/client/test/org/openqa/selenium/interactions/touch/TouchLongPressTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 import static org.mockito.Mockito.when;
 
 import org.junit.Before;
@@ -52,6 +52,6 @@ public void testCanLongPress() {
 
     verify(mockTouch).longPress(mockCoordinates);
     verifyNoMoreInteractions(mockTouch);
-    verifyZeroInteractions(mockCoordinates);
+    verifyNoInteractions(mockCoordinates);
   }
 }

File: java/client/test/org/openqa/selenium/support/pagefactory/internal/LocatingElementListHandlerTest.java
Patch:
@@ -22,7 +22,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 import static org.mockito.Mockito.when;
 
 import org.junit.Test;
@@ -62,7 +62,7 @@ public void shouldAlwaysLocateTheElementPerCall() {
     verify(locator, times(2)).findElements();
     verify(element2, times(1)).sendKeys("Fishy");
     verifyNoMoreInteractions(locator, element2);
-    verifyZeroInteractions(element1);
+    verifyNoInteractions(element1);
   }
 
   @Test

File: java/server/test/org/openqa/selenium/remote/server/NewSessionPipelineTest.java
Patch:
@@ -23,7 +23,7 @@
 import static org.mockito.Mockito.atLeast;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
-import static org.mockito.Mockito.verifyZeroInteractions;
+import static org.mockito.Mockito.verifyNoInteractions;
 import static org.mockito.Mockito.when;
 
 import com.google.common.collect.ImmutableMap;
@@ -57,7 +57,7 @@ public void shouldCallSessionFactory() {
 
     pipeline.createNewSession(NewSessionPayload.create(caps));
     verify(factory).apply(argThat(req -> req.getCapabilities().getCapability("browserName").equals("firefox")));
-    verifyZeroInteractions(fallback);
+    verifyNoInteractions(fallback);
   }
 
   @Test

File: java/client/test/com/thoughtworks/selenium/TestLargeHtml.java
Patch:
@@ -23,9 +23,9 @@
 public class TestLargeHtml extends InternalSelenseTestBase {
   @Test
   public void testLargeHtml() {
-    selenium.open("/selenium-server/tests/html/test_large_html.html");
+    selenium.open("test_large_html.html");
     String source = selenium.getHtmlSource().trim();
-    String expectedEndsWith = "</body>";
+    String expectedEndsWith = "</html>";
     int index = source.length() - expectedEndsWith.length();
     String actualEndsWith = source.substring(index).toLowerCase();
     Assert.assertEquals("source doesn't end correctly", actualEndsWith, expectedEndsWith);

File: java/client/test/com/thoughtworks/selenium/TestNativeKeys.java
Patch:
@@ -25,7 +25,7 @@
 public class TestNativeKeys extends InternalSelenseTestBase {
   @Test
   public void testKeyPressNative() {
-    selenium.open("/selenium-server/tests/html/test_type_page1.html");
+    selenium.open("test_type_page1.html");
     selenium.focus("username");
     selenium.keyPressNative(Integer.toString(KeyEvent.VK_H));
     Assert.assertEquals(selenium.getValue("username"), "h");

File: java/client/test/com/thoughtworks/selenium/WebDriverSeleniumTestSuite.java
Patch:
@@ -136,6 +136,7 @@
     TestImplicitLocators.class,
     TestJavaScriptAttributes.class,
 //    TestJavascriptParameters.class,
+    TestLargeHtml.class,
     TestLocators.class,
     TestMultiSelect.class,
 //    TestModalDialog.class,
@@ -168,7 +169,8 @@
     TestWaitForNot.class,
     TestWaitInPopupWindow.class,
 //    TestXPathLocatorInXHtml.class,
-    TestXPathLocators.class
+    TestXPathLocators.class,
+    RealDealIntegrationTest.class
 })
 public class WebDriverSeleniumTestSuite extends BaseSuite {
   // Empty

File: java/server/test/org/openqa/selenium/remote/server/SessionLogsTest.java
Patch:
@@ -65,7 +65,7 @@ public class SessionLogsTest extends JUnit4TestBase {
   public static void startUpServer() throws IOException {
     server = new OutOfProcessSeleniumServer();
     server.enableLogCapture();
-    server.start();
+    server.start("standalone");
   }
 
   @AfterClass

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -183,7 +183,6 @@ protected ImmutableList<String> createArgs() {
     protected GeckoDriverService createDriverService(File exe, int port,
                                                      ImmutableList<String> args,
                                                      ImmutableMap<String, String> environment) {
-      System.err.println("Starting GeckoDriverService on port " + port);
       try {
         GeckoDriverService service = new GeckoDriverService(exe, port, args, environment);
         String firefoxLogFile = System.getProperty(FirefoxDriver.SystemProperty.BROWSER_LOGFILE);

File: java/client/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -183,7 +183,6 @@ public void start() throws IOException {
       }
       process = new CommandLine(this.executable, args.toArray(new String[] {}));
       process.setEnvironmentVariables(environment);
-      System.out.println("Starting " + process);
       process.copyOutputTo(getOutputStream());
       process.executeAsync();
 

File: java/client/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -183,6 +183,7 @@ public void start() throws IOException {
       }
       process = new CommandLine(this.executable, args.toArray(new String[] {}));
       process.setEnvironmentVariables(environment);
+      System.out.println("Starting " + process);
       process.copyOutputTo(getOutputStream());
       process.executeAsync();
 

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -91,7 +91,7 @@ static GeckoDriverService createDefaultService(Capabilities caps) {
       builder.usingFirefoxBinary(actualBinary);
     }
 
-    return new Builder().build();
+    return builder.build();
   }
 
   @Override
@@ -183,6 +183,7 @@ protected ImmutableList<String> createArgs() {
     protected GeckoDriverService createDriverService(File exe, int port,
                                                      ImmutableList<String> args,
                                                      ImmutableMap<String, String> environment) {
+      System.err.println("Starting GeckoDriverService on port " + port);
       try {
         GeckoDriverService service = new GeckoDriverService(exe, port, args, environment);
         String firefoxLogFile = System.getProperty(FirefoxDriver.SystemProperty.BROWSER_LOGFILE);

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -523,7 +523,6 @@ public void testCanQuitWhenAnAlertIsPresent() {
 
   @Test
   @NotYetImplemented(SAFARI)
-  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1487705")
   public void shouldHandleAlertOnFormSubmit() {
     driver.get(appServer.create(new Page().withTitle("Testing Alerts").withBody(
         "<form id='theForm' action='javascript:alert(\"Tasty cheese\");'>",

File: java/client/test/org/openqa/selenium/devtools/ChromeDevToolsFetchTests.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.List;
 import java.util.Optional;
 
+// TODO: Add some checks, the tests does not ensure a listener is actually invoked
 public class ChromeDevToolsFetchTests extends ChromeDevToolsTestBase {
 
   @Test

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -523,7 +523,7 @@ public void testCanQuitWhenAnAlertIsPresent() {
 
   @Test
   @NotYetImplemented(SAFARI)
-  //@Ignore(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1487705")
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1487705")
   public void shouldHandleAlertOnFormSubmit() {
     driver.get(appServer.create(new Page().withTitle("Testing Alerts").withBody(
         "<form id='theForm' action='javascript:alert(\"Tasty cheese\");'>",

File: java/client/src/org/openqa/selenium/chromium/ChromiumDriverCommand.java
Patch:
@@ -34,5 +34,7 @@ private ChromiumDriverCommand() {}
   static final String SET_CAST_SINK_TO_USE = "selectCastSink";
   static final String START_CAST_TAB_MIRRORING = "startCastTabMirroring";
   static final String GET_CAST_ISSUE_MESSAGE = "getCastIssueMessage";  
-  static final String STOP_CASTING = "stopCasting";     
+  static final String STOP_CASTING = "stopCasting";
+
+  static final String SET_PERMISSION = "setPermission";
 }

File: java/client/src/org/openqa/selenium/chromium/ChromiumDriverCommandExecutor.java
Patch:
@@ -57,6 +57,9 @@ public class ChromiumDriverCommandExecutor extends DriverCommandExecutor {
       new CommandInfo("/session/:sessionId/goog/cast/get_issue_message", HttpMethod.GET));
     CHROME_COMMAND_NAME_TO_URL.put(ChromiumDriverCommand.STOP_CASTING,
       new CommandInfo("/session/:sessionId/goog/cast/stop_casting", HttpMethod.POST));
+
+    CHROME_COMMAND_NAME_TO_URL.put(ChromiumDriverCommand.SET_PERMISSION,
+      new CommandInfo("/session/:sessionId/permissions", HttpMethod.POST));
   }
 
   public ChromiumDriverCommandExecutor(DriverService service) {

File: java/client/src/org/openqa/selenium/devtools/Connection.java
Patch:
@@ -25,9 +25,9 @@
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Multimap;
 
-import org.openqa.selenium.devtools.target.model.SessionId;
 import org.openqa.selenium.json.Json;
 import org.openqa.selenium.json.JsonInput;
+import org.openqa.selenium.remote.SessionId;
 import org.openqa.selenium.remote.http.HttpClient;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.WebSocket;

File: java/client/src/org/openqa/selenium/devtools/profiler/model/Profile.java
Patch:
@@ -82,7 +82,7 @@ private static Profile fromJson(JsonInput input) {
           nodes = new ArrayList<>();
           input.beginArray();
           while (input.hasNext()) {
-            nodes.add(ProfileNode.fromJson(input));
+            nodes.add(input.read(ProfileNode.class));
           }
           input.endArray();
           break;

File: java/client/src/org/openqa/selenium/devtools/profiler/model/ProfileNode.java
Patch:
@@ -67,7 +67,7 @@ public ProfileNode(int id, CallFrame callFrame, Integer hitCount,
     this.positionTicks = positionTicks;
   }
 
-  public static ProfileNode fromJson(JsonInput input) {
+  private static ProfileNode fromJson(JsonInput input) {
     int id = -1;
     CallFrame callFrame = null;
     Integer hitCount = null;

File: java/client/src/org/openqa/selenium/devtools/network/model/Response.java
Patch:
@@ -449,10 +449,10 @@ private static Response fromJson(JsonInput input) {
           remotePort = input.read(Integer.class);
           break;
         case "fromDiskCache":
-          fromServiceWorker = input.nextBoolean();
+          fromDiskCache = input.nextBoolean();
           break;
         case "fromServiceWorker":
-          fromDiskCache = input.nextBoolean();
+          fromServiceWorker = input.nextBoolean();
           break;
         case "encodedDataLength":
           encodedDataLength = input.read(Double.class);

File: java/client/test/org/openqa/selenium/interactions/CombinedInputActionsTest.java
Patch:
@@ -37,6 +37,7 @@
 
 import org.junit.Test;
 import org.openqa.selenium.By;
+import org.openqa.selenium.Dimension;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.Keys;
 import org.openqa.selenium.Platform;
@@ -223,15 +224,15 @@ public void testCanClickOnLinksWithAnOffset() {
   @NotYetImplemented(HTMLUNIT)
   @NotYetImplemented(SAFARI)
   @NotYetImplemented(EDGE)
-  @NotYetImplemented(CHROME)
   public void testClickAfterMoveToAnElementWithAnOffsetShouldUseLastMousePosition() {
     driver.get(pages.clickEventPage);
 
     WebElement element = driver.findElement(By.id("eventish"));
+    Dimension size = element.getSize();
     Point location = element.getLocation();
 
     new Actions(driver)
-        .moveToElement(element, 20, 10)
+        .moveToElement(element, 20 - size.getWidth() / 2, 10 - size.getHeight() / 2)
         .click()
         .perform();
 

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -494,8 +494,6 @@ public void testShouldHandleAlertOnWindowClose() {
   }
 
   @Test
-  @NotYetImplemented(CHROME)
-  @NotYetImplemented(CHROMIUMEDGE)
   @Ignore(value = HTMLUNIT, reason = "https://github.com/SeleniumHQ/htmlunit-driver/issues/57")
   @NotYetImplemented(value = MARIONETTE,
       reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1279211")

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -493,8 +493,6 @@ public void testShouldThrowAnExceptionWhenArgumentsWithStaleElementPassed() {
   }
 
   @Test
-  @NotYetImplemented(CHROME)
-  @NotYetImplemented(CHROMIUMEDGE)
   @Ignore(IE)
   public void testShouldBeAbleToReturnADateObject() {
     driver.get(pages.simpleTestPage);

File: java/client/src/org/openqa/selenium/tools/jar/MergeJars.java
Patch:
@@ -164,7 +164,7 @@ public static void main(String[] args) throws IOException {
 
       allPaths.forEach((dir, entries) -> {
         try {
-          String name = dir.toString() + "/";
+          String name = dir.toString().replace('\\', '/') + "/";
           if (seen.add(name)) {
             JarEntry je = new JarEntry(name);
             je = resetTime(je);
@@ -173,7 +173,7 @@ public static void main(String[] args) throws IOException {
           }
 
           for (Map.Entry<Path, Path> me : entries.entrySet()) {
-            name = me.getKey().toString();
+            name = me.getKey().toString().replace('\\', '/');
 
             if (seen.add(name)) {
               JarEntry je = new JarEntry(name);

File: java/client/src/org/openqa/selenium/interactions/Actions.java
Patch:
@@ -364,12 +364,12 @@ public Actions moveToElement(WebElement target) {
   }
 
   /**
-   * Moves the mouse to an offset from the top-left corner of the element.
+   * Moves the mouse to an offset from the center of the element.
    * The element is scrolled into view and its location is calculated using getBoundingClientRect.
    * @param target element to move to.
-   * @param xOffset Offset from the top-left corner. A negative value means coordinates left from
+   * @param xOffset Offset from the center. A negative value means coordinates left from
    * the element.
-   * @param yOffset Offset from the top-left corner. A negative value means coordinates above
+   * @param yOffset Offset from the center. A negative value means coordinates above
    * the element.
    * @return A self reference.
    */

File: java/client/src/org/openqa/selenium/support/friendly/ByFriendlyLocator.java
Patch:
@@ -23,18 +23,18 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static org.openqa.selenium.json.Json.MAP_TYPE;
 
-public class ByFriendyLocator {
+public class ByFriendlyLocator {
 
   private static final Json JSON = new Json();
   private static final String FIND_ELEMENTS;
   static {
     try {
       String location = String.format(
         "/%s/%s",
-        ByFriendyLocator.class.getPackage().getName().replace(".", "/"),
+        ByFriendlyLocator.class.getPackage().getName().replace(".", "/"),
         "findElements.js");
 
-      URL url = ByFriendyLocator.class.getResource(location);
+      URL url = ByFriendlyLocator.class.getResource(location);
 
       String rawFunction = Resources.toString(url, StandardCharsets.UTF_8);
       FIND_ELEMENTS = String.format("return (%s).apply(null, arguments);", rawFunction);

File: java/client/test/org/openqa/selenium/support/friendly/ByFriendlyLocatorTest.java
Patch:
@@ -10,9 +10,9 @@
 import java.util.stream.Collectors;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.openqa.selenium.support.friendly.ByFriendyLocator.withTagName;
+import static org.openqa.selenium.support.friendly.ByFriendlyLocator.withTagName;
 
-public class ByFriendyLocatorTest extends JUnit4TestBase {
+public class ByFriendlyLocatorTest extends JUnit4TestBase {
 
   @Test
   public void shouldBeAbleToFindElementsAboveAnother() {

File: java/client/src/org/openqa/selenium/json/JsonTypeCoercer.java
Patch:
@@ -77,8 +77,9 @@ private JsonTypeCoercer(Stream<TypeCoercer<?>> coercers) {
         new NumberCoercer<>(
             Number.class,
             num -> {
-              if (num.doubleValue() % 1 != 0) {
-                return num.doubleValue();
+              Double doubleValue = num.doubleValue();
+              if (doubleValue % 1 != 0 || doubleValue > Long.MAX_VALUE) {
+                return doubleValue;
               }
               return num.longValue();
             }));

File: java/client/test/org/openqa/selenium/chrome/ChromeOptionsFunctionalTest.java
Patch:
@@ -18,7 +18,7 @@
 package org.openqa.selenium.chrome;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.openqa.selenium.remote.CapabilityType.ACCEPT_SSL_CERTS;
+import static org.openqa.selenium.remote.CapabilityType.ACCEPT_INSECURE_CERTS;
 import static org.openqa.selenium.support.ui.ExpectedConditions.titleIs;
 import static org.openqa.selenium.testing.drivers.Browser.CHROME;
 
@@ -74,13 +74,12 @@ public void optionsStayEqualAfterSerialization() {
 
   @NeedsLocalEnvironment
   @Test
-  @NotYetImplemented(value = CHROME, reason = "Broken in Chrome 75")
   public void canSetAcceptInsecureCerts() {
     ChromeOptions options = new ChromeOptions();
     options.setAcceptInsecureCerts(true);
     driver = new ChromeDriver(options);
 
-    assertThat(driver.getCapabilities().getCapability(ACCEPT_SSL_CERTS)).isEqualTo(true);
+    assertThat(driver.getCapabilities().getCapability(ACCEPT_INSECURE_CERTS)).isEqualTo(true);
   }
 
   @NeedsLocalEnvironment

File: java/client/src/org/openqa/selenium/chromium/ChromiumDriver.java
Patch:
@@ -69,6 +69,7 @@ public class ChromiumDriver extends RemoteWebDriver
   private final TouchScreen touchScreen;
   private final RemoteNetworkConnection networkConnection;
   private final Optional<Connection> connection;
+  private final Optional<DevTools> devTools;
 
   protected ChromiumDriver(CommandExecutor commandExecutor, Capabilities capabilities, String capabilityKey) {
     super(commandExecutor, capabilities);
@@ -82,6 +83,7 @@ protected ChromiumDriver(CommandExecutor commandExecutor, Capabilities capabilit
         factory,
         getCapabilities(),
         capabilityKey);
+    devTools = connection.map(DevTools::new);
   }
 
   @Override
@@ -155,8 +157,7 @@ public Map<String, Object> executeCdpCommand(String commandName, Map<String, Obj
 
   @Override
   public DevTools getDevTools() {
-    return connection.map(DevTools::new)
-        .orElseThrow(() -> new WebDriverException("Unable to create DevTools connection"));
+    return devTools.orElseThrow(() -> new WebDriverException("Unable to create DevTools connection"));
   }
 
   public String getCastSinks() {

File: java/client/test/org/openqa/selenium/logging/AvailableLogsTest.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.logging;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assume.assumeFalse;
 import static org.junit.Assume.assumeTrue;
 import static org.openqa.selenium.remote.CapabilityType.ENABLE_PROFILING_CAPABILITY;
 import static org.openqa.selenium.testing.TestUtilities.getChromeVersion;

File: java/client/src/org/openqa/selenium/net/LinuxEphemeralPortRangeDetector.java
Patch:
@@ -46,7 +46,7 @@ public static LinuxEphemeralPortRangeDetector getInstance() {
     int lowPort = defaultRange.getLowestEphemeralPort();
     int highPort = defaultRange.getHighestEphemeralPort();
     try (BufferedReader in = new BufferedReader(inputFil)) {
-      String[] split = in.readLine().split("\\s");
+      String[] split = in.readLine().split("\\s+");
       lowPort = Integer.parseInt(split[0]);
       highPort = Integer.parseInt(split[1]);
     } catch (IOException ignore) {

File: java/client/src/org/openqa/selenium/safari/SafariDriverService.java
Patch:
@@ -59,7 +59,7 @@ public static SafariDriverService createDefaultService() {
   }
 
   static SafariDriverService createDefaultService(SafariOptions options) {
-    return new Builder().build();
+    return new Builder().usingTechnologyPreview(options.getUseTechnologyPreview()).build();
   }
 
   static SafariDriverService createDefaultService(Capabilities caps) {
@@ -128,7 +128,7 @@ protected File findDefaultExecutable() {
         throw new WebDriverException(message.toString());
       }
 
-      return SAFARI_DRIVER_EXECUTABLE;
+      return exe;
     }
 
     private boolean isElCapitanOrLater() {

File: java/client/src/org/openqa/selenium/safari/SafariOptions.java
Patch:
@@ -110,7 +110,7 @@ public static SafariOptions fromCapabilities(Capabilities capabilities)
     } else if (cap instanceof Map) {
       return new SafariOptions(new MutableCapabilities(((Map<String, ?>) cap)));
     } else {
-      return new SafariOptions();
+      return new SafariOptions(capabilities);
     }
   }
 

File: java/client/test/org/openqa/selenium/testing/drivers/DefaultDriverSupplier.java
Patch:
@@ -52,7 +52,7 @@ public class DefaultDriverSupplier implements Supplier<WebDriver> {
   private Capabilities capabilities;
 
   DefaultDriverSupplier(Capabilities capabilities) {
-    this.capabilities = new ImmutableCapabilities(capabilities);
+    this.capabilities = capabilities;
   }
 
   @Override

File: java/client/src/org/openqa/selenium/WebElement.java
Patch:
@@ -77,7 +77,7 @@ public interface WebElement extends SearchContext, TakesScreenshot {
    * If this element is a form entry element, this will reset its value.
    * <p>
    * See <a href="https://w3c.github.io/webdriver/#element-clear">W3C WebDriver specification</a>
-   * and <a href="https://html.spec.whatwg.org/#concept-form-reset-control">HTML specification<a/>
+   * and <a href="https://html.spec.whatwg.org/#concept-form-reset-control">HTML specification</a>
    * for more details.
    */
   void clear();
@@ -97,7 +97,7 @@ public interface WebElement extends SearchContext, TakesScreenshot {
    * Get the value of the given attribute of the element. Will return the current value, even if
    * this has been modified after the page has been loaded.
    * <p>
-   * <p>More exactly, this method will return the value of the property with the given name, if it
+   * More exactly, this method will return the value of the property with the given name, if it
    * exists. If it does not, then the value of the attribute with the given name is returned. If
    * neither exists, null is returned.
    * <p>

File: java/client/src/org/openqa/selenium/remote/http/Filter.java
Patch:
@@ -46,6 +46,6 @@ default Filter andThen(Filter next) {
   }
 
   default HttpHandler andFinally(HttpHandler end) {
-    return request -> Filter.this.apply(end).apply(request);
+    return request -> Filter.this.apply(end).execute(request);
   }
 }

File: java/client/src/org/openqa/selenium/remote/http/HttpHandler.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.openqa.selenium.remote.http;
 
-import java.util.function.Function;
-
 @FunctionalInterface
-public interface HttpHandler extends Function<HttpRequest, HttpResponse> {
+public interface HttpHandler {
+
+  HttpResponse execute(HttpRequest req);
 
   default HttpHandler with(Filter filter) {
     return filter.andFinally(this);

File: java/server/src/org/openqa/selenium/grid/router/GridStatusHandler.java
Patch:
@@ -94,7 +94,7 @@ public void execute(HttpRequest req, HttpResponse resp) {
     }
 
     boolean ready = status.hasCapacity();
-    String message = ready ? "Selenium Grid ready." : "Selenium Grid not ready";
+    String message = ready ? "Selenium Grid ready." : "Selenium Grid not ready.";
 
     long remaining = System.currentTimeMillis() + 2000 - start;
     List<Future<Map<String, Object>>> nodeResults = status.getNodes().stream()

File: java/client/src/org/openqa/selenium/devtools/target/Target.java
Patch:
@@ -77,7 +77,7 @@ public static Command<Boolean> closeTarget(TargetId targetId) {
    * nject object to the target's main frame that provides a communication channel with browser
    * target. Injected object will be available as window[bindingName]. The object has the follwing
    * API: binding.send(json) - a method to send messages over the remote debugging protocol
-   * binding.onmessage = json => handleMessage(json) - a callback that will be called for the
+   * binding.onmessage = json =&gt; handleMessage(json) - a callback that will be called for the
    * protocol notifications and command responses.
    */
   @Beta

File: java/client/test/org/openqa/selenium/ClickScrollingTest.java
Patch:
@@ -136,7 +136,7 @@ public void testShouldNotScrollOverflowElementsWhichAreVisible() {
   @Test
   @Ignore(CHROME)
   @Ignore(CHROMIUMEDGE)
-  @Ignore(MARIONETTE)
+  @NotYetImplemented(MARIONETTE)
   @NotYetImplemented(EDGE)
   public void testShouldNotScrollIfAlreadyScrolledAndElementIsInView() {
     driver.get(appServer.whereIs("scroll3.html"));
@@ -166,7 +166,7 @@ public void testShouldScrollOverflowElementsIfClickPointIsOutOfViewButElementIsI
   @SwitchToTopAfterTest
   @Test
   @NotYetImplemented(SAFARI)
-  @Ignore(MARIONETTE)
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1314462")
   public void testShouldBeAbleToClickElementInAFrameThatIsOutOfView() {
     driver.get(appServer.whereIs("scrolling_tests/page_with_frame_out_of_view.html"));
     driver.switchTo().frame("frame");
@@ -262,7 +262,7 @@ private long getScrollTop() {
   @SwitchToTopAfterTest
   @Test
   @NotYetImplemented(SAFARI)
-  @Ignore(MARIONETTE)
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1314462")
   public void testShouldBeAbleToClickElementInATallFrame() {
     driver.get(appServer.whereIs("scrolling_tests/page_with_tall_frame.html"));
     driver.switchTo().frame("tall_frame");

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -195,7 +195,7 @@ public void testShouldBeAbleToGetAFragmentOnTheCurrentPage() {
   }
 
   @Test
-  @Ignore(MARIONETTE)
+  @NotYetImplemented(MARIONETTE)
   public void testShouldReturnWhenGettingAUrlThatDoesNotResolve() {
     assertThatCode(
         () -> driver.get("http://www.thisurldoesnotexist.comx/"))
@@ -219,7 +219,7 @@ public void testShouldThrowIfUrlIsMalformedInPortPart() {
   }
 
   @Test
-  @Ignore(MARIONETTE)
+  @NotYetImplemented(MARIONETTE)
   public void testShouldReturnWhenGettingAUrlThatDoesNotConnect() {
     // Here's hoping that there's nothing here. There shouldn't be
     driver.get("http://localhost:3001");

File: java/client/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -347,9 +347,6 @@ public void testFindingASingleElementByCompoundClassNameShouldThrow() {
   }
 
   @Test
-  @NotYetImplemented(MARIONETTE)
-  @NotYetImplemented(SAFARI)
-  @NotYetImplemented(EDGE)
   public void testFindingMultipleElementsByCompoundClassNameShouldThrow() {
     driver.get(pages.xhtmlTestPage);
     assertThatExceptionOfType(NoSuchElementException.class)

File: java/client/src/org/openqa/selenium/edge/EdgeDriverService.java
Patch:
@@ -18,7 +18,6 @@
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
-
 import org.openqa.selenium.remote.service.DriverService;
 
 import java.io.File;

File: java/server/src/org/openqa/selenium/grid/session/remote/ServicedSession.java
Patch:
@@ -109,7 +109,7 @@ public Factory(Predicate<Capabilities> key, String serviceClassName) {
 
         if (factory == null) {
           throw new IllegalArgumentException(
-              "DriverService has no mechanism to create a default instance");
+              "DriverService has no mechanism to create a default instance: " + serviceClassName);
         }
 
         this.createService = factory;

File: java/server/src/org/openqa/selenium/remote/server/ActiveSessionFactory.java
Patch:
@@ -85,8 +85,8 @@ public ActiveSessionFactory() {
              "org.openqa.selenium.firefox.xpi.XpiDriverService")
         .put(browserName(CHROME), "org.openqa.selenium.chrome.ChromeDriverService")
         .put(containsKey("chromeOptions"), "org.openqa.selenium.chrome.ChromeDriverService")
-        .put(browserName(EDGE), "org.openqa.selenium.edge.EdgeDriverService")
-        .put(containsKey("edgeOptions"), "org.openqa.selenium.edge.EdgeDriverService")
+        .put(browserName(EDGE), "org.openqa.selenium.edge.ChromiumEdgeDriverService")
+        .put(containsKey("edgeOptions"), "org.openqa.selenium.edge.ChromiumEdgeDriverService")
         .put(browserName(FIREFOX), "org.openqa.selenium.firefox.GeckoDriverService")
         .put(containsKey(Pattern.compile("^moz:.*")), "org.openqa.selenium.firefox.GeckoDriverService")
         .put(browserName(IE), "org.openqa.selenium.ie.InternetExplorerDriverService")

File: java/server/src/org/openqa/selenium/remote/server/DefaultDriverFactory.java
Patch:
@@ -71,7 +71,7 @@ public class DefaultDriverFactory implements DriverFactory {
         Stream.of(
             createProvider(new ImmutableCapabilities(BROWSER_NAME, IE, PLATFORM_NAME, WINDOWS),
                            "org.openqa.selenium.ie.InternetExplorerDriver"),
-            createProvider(new ImmutableCapabilities(BROWSER_NAME, EDGE, PLATFORM_NAME, WINDOWS),
+            createProvider(new ImmutableCapabilities(BROWSER_NAME, EDGE),
                            "org.openqa.selenium.edge.EdgeDriver"),
             createProvider(new ImmutableCapabilities(BROWSER_NAME, SAFARI, PLATFORM_NAME, MAC),
                            "org.openqa.selenium.safari.SafariDriver"))

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -66,7 +66,6 @@
 import org.openqa.selenium.logging.LoggingPreferences;
 import org.openqa.selenium.logging.Logs;
 import org.openqa.selenium.logging.NeedsLocalLogs;
-import org.openqa.selenium.remote.internal.JsonToWebElementConverter;
 import org.openqa.selenium.remote.internal.WebElementToJsonConverter;
 
 import java.net.URL;

File: java/server/src/org/openqa/selenium/grid/web/ProtocolConverter.java
Patch:
@@ -32,7 +32,7 @@
 import org.openqa.selenium.remote.http.HttpClient;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;
-import org.openqa.selenium.remote.internal.JsonToWebElementConverter;
+import org.openqa.selenium.remote.JsonToWebElementConverter;
 
 import java.io.IOException;
 import java.util.Map;

File: java/client/src/org/openqa/selenium/devtools/network/model/CallFrame.java
Patch:
@@ -19,7 +19,6 @@
 
 import static java.util.Objects.requireNonNull;
 
-import org.openqa.selenium.json.JsonInputConverter;
 import org.openqa.selenium.json.JsonInput;
 
 /**
@@ -135,10 +134,10 @@ public static CallFrame parseCallFrame(JsonInput input) {
           callFrameUrl = input.nextString();
           break;
         case "lineNumber":
-          callFrameLineNumber = JsonInputConverter.extractInt(input);
+          callFrameLineNumber = input.read(Integer.class);
           break;
         case "columnNumber":
-          columnNumber = JsonInputConverter.extractInt(input);
+          columnNumber = input.read(Integer.class);
           break;
         default:
           input.skipValue();

File: java/client/src/org/openqa/selenium/devtools/network/model/Cookie.java
Patch:
@@ -92,7 +92,7 @@ public static Cookie fromSeleniumCookie(org.openqa.selenium.Cookie cookie) {
                       cookie.isHttpOnly(), cookie.isSecure());
   }
 
-  public static Cookie parseCookie(JsonInput input) {
+  private static Cookie fromJson(JsonInput input) {
 
     String name = null;
 

File: java/client/src/org/openqa/selenium/devtools/network/model/Initiator.java
Patch:
@@ -19,7 +19,6 @@
 
 import static java.util.Objects.requireNonNull;
 
-import org.openqa.selenium.json.JsonInputConverter;
 import org.openqa.selenium.json.JsonInput;
 
 /**
@@ -116,13 +115,13 @@ public static Initiator parseInitiator(JsonInput input) {
           initiatorType = InitiatorType.valueOf(input.nextString());
           break;
         case "stack":
-          stack = StackTrace.parseStackTrace(input);
+          stack = input.read(StackTrace.class);
           break;
         case "url":
           initiatorUrl = input.nextString();
           break;
         case "lineNumber":
-          lineNumber = JsonInputConverter.extractDouble(input);
+          lineNumber = input.read(Double.class);
           break;
         default:
           input.skipValue();

File: java/client/src/org/openqa/selenium/devtools/network/model/Request.java
Patch:
@@ -19,8 +19,8 @@
 
 import static java.util.Objects.requireNonNull;
 
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.json.JsonInput;
-import org.openqa.selenium.json.JsonInputConverter;
 
 import java.util.Map;
 
@@ -211,7 +211,7 @@ public void setIsLinkPreload(Boolean isLinkPreload) {
     this.isLinkPreload = isLinkPreload;
   }
 
-  public static Request parseRequest(JsonInput input) {
+  private static Request fromJson(JsonInput input) {
     input.beginObject();
     String url = null;
     String method = null;
@@ -237,7 +237,7 @@ public static Request parseRequest(JsonInput input) {
           break;
 
         case "headers":
-          headers = JsonInputConverter.extractMap(input);
+          headers = input.read(Json.MAP_TYPE);
           break;
 
         case "postData":

File: java/client/src/org/openqa/selenium/devtools/network/model/RequestWillBeSent.java
Patch:
@@ -130,7 +130,7 @@ private static RequestWillBeSent fromJson(JsonInput input) {
           break;
 
         case "request":
-          request = Request.parseRequest(input);
+          request = input.read(Request.class);
           break;
 
         case "timestamp":
@@ -146,7 +146,7 @@ private static RequestWillBeSent fromJson(JsonInput input) {
           break;
 
         case "redirectResponse":
-          redirectResponse = Response.parseResponse(input);
+          redirectResponse = input.read(Response.class);
           break;
 
         case "type":

File: java/client/src/org/openqa/selenium/devtools/network/model/ResponseReceived.java
Patch:
@@ -85,7 +85,7 @@ public static ResponseReceived fromJson(JsonInput input) {
           timestamp = MonotonicTime.parse(input.nextNumber());
           break;
         case "response":
-          response = Response.parseResponse(input);
+          response = input.read(Response.class);
           break;
         case "type":
           type = ResourceType.valueOf(input.nextString());

File: java/client/src/org/openqa/selenium/devtools/network/model/SignedCertificateTimestamp.java
Patch:
@@ -174,7 +174,7 @@ public void setSignatureData(String signatureData) {
     this.signatureData = signatureData;
   }
 
-  public static SignedCertificateTimestamp parseSignedCertificateTimestamp(JsonInput input) {
+  private static SignedCertificateTimestamp fromJson(JsonInput input) {
 
     String status = null;
 

File: java/client/src/org/openqa/selenium/devtools/network/model/SignedExchangeError.java
Patch:
@@ -81,7 +81,7 @@ public void setErrorField(SignedExchangeErrorField errorField) {
     this.errorField = errorField;
   }
 
-  public static SignedExchangeError parseSignedExchangeError(JsonInput input) {
+  private static SignedExchangeError fromJson(JsonInput input) {
 
     String message = null;
     Number signatureIndex = null;

File: java/client/src/org/openqa/selenium/devtools/network/model/SignedExchangeSignature.java
Patch:
@@ -191,7 +191,7 @@ public void setCertificates(List<String> certificates) {
     this.certificates = certificates;
   }
 
-  public static SignedExchangeSignature parseSignedExchangeSignature(JsonInput input) {
+  private static SignedExchangeSignature fromJson(JsonInput input) {
 
     String label = null;
 

File: java/client/src/org/openqa/selenium/devtools/network/model/StackTrace.java
Patch:
@@ -105,7 +105,7 @@ public void setParentId(StackTraceId parentId) {
     this.parentId = parentId;
   }
 
-  public static StackTrace parseStackTrace(JsonInput input) {
+  private static StackTrace fromJson(JsonInput input) {
     input.beginObject();
     String description = null;
     List<CallFrame> callFrames = null;

File: java/client/src/org/openqa/selenium/devtools/network/model/WebSocketClosed.java
Patch:
@@ -46,7 +46,7 @@ public MonotonicTime getTimestamp() {
     return timestamp;
   }
 
-  public static WebSocketClosed fromJson(JsonInput input){
+  private static WebSocketClosed fromJson(JsonInput input){
     RequestId requestId = new RequestId(input.nextString());
     MonotonicTime timestamp = null;
     while (input.hasNext()){

File: java/client/src/org/openqa/selenium/devtools/network/model/WebSocketCreated.java
Patch:
@@ -59,7 +59,7 @@ private WebSocketCreated(RequestId requestId, String url,
     this.initiator = initiator;
   }
 
-  public static WebSocketCreated fromJson(JsonInput input) {
+  private static WebSocketCreated fromJson(JsonInput input) {
     RequestId requestId = new RequestId(input.nextString());
     String url = null;
     Initiator initiator = null;

File: java/client/src/org/openqa/selenium/devtools/network/model/WebSocketFrame.java
Patch:
@@ -46,7 +46,7 @@ private WebSocketFrame(Number opcode, boolean mask, String payloadData) {
     this.payloadData = requireNonNull(payloadData, "'payloadData' is required for WebSocketFrame");
   }
 
-  public static WebSocketFrame parse(JsonInput input) {
+  private static WebSocketFrame fromJson(JsonInput input) {
 
     Number opcode = null;
     boolean mask = false;

File: java/client/src/org/openqa/selenium/devtools/network/model/WebSocketFrameError.java
Patch:
@@ -49,7 +49,7 @@ private WebSocketFrameError(RequestId requestId,
         requireNonNull(errorMessage, "'errorMessage' is required for WebSocketFrameError");
   }
 
-  public static WebSocketFrameError fromJson(JsonInput input) {
+  private static WebSocketFrameError fromJson(JsonInput input) {
     RequestId requestId = new RequestId(input.nextString());
     MonotonicTime monotonicTime = null;
     String errorMessage = null;

File: java/client/test/org/openqa/selenium/devtools/DevToolsTests.java
Patch:
@@ -23,7 +23,9 @@
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     ChromeDevToolsNetworkTest.class,
-    ChromeDevToolsPerformanceTest.class
+    ChromeDevToolsPerformanceTest.class,
+    ChromeDevToolsConsoleTest.class,
+    ChromeDevToolsLogTest.class
 })
 public class DevToolsTests {
 

File: java/client/src/org/openqa/selenium/devtools/network/model/RequestPattern.java
Patch:
@@ -37,15 +37,15 @@ public RequestPattern(String urlPattern,
   }
 
   /**
-   * Wildcards ('*' -&gt; zero or more, '?' -> exactly one) are allowed. Escape character is backslash.
+   * Wildcards ('*' -&gt; zero or more, '?' -&gt; exactly one) are allowed. Escape character is backslash.
    * Omitting is equivalent to "*".
    */
   public String getUrlPattern() {
     return urlPattern;
   }
 
   /**
-   * Wildcards ('*' -&gt; zero or more, '?' -> exactly one) are allowed. Escape character is backslash.
+   * Wildcards ('*' -&gt; zero or more, '?' -&gt; exactly one) are allowed. Escape character is backslash.
    * Omitting is equivalent to "*".
    */
   public void setUrlPattern(String urlPattern) {

File: java/client/src/org/openqa/selenium/devtools/network/model/RequestPattern.java
Patch:
@@ -37,15 +37,15 @@ public RequestPattern(String urlPattern,
   }
 
   /**
-   * Wildcards ('*' -> zero or more, '?' -> exactly one) are allowed. Escape character is backslash.
+   * Wildcards ('*' -&gt; zero or more, '?' -> exactly one) are allowed. Escape character is backslash.
    * Omitting is equivalent to "*".
    */
   public String getUrlPattern() {
     return urlPattern;
   }
 
   /**
-   * Wildcards ('*' -> zero or more, '?' -> exactly one) are allowed. Escape character is backslash.
+   * Wildcards ('*' -&gt; zero or more, '?' -> exactly one) are allowed. Escape character is backslash.
    * Omitting is equivalent to "*".
    */
   public void setUrlPattern(String urlPattern) {

File: java/client/src/org/openqa/selenium/support/ui/WebDriverWait.java
Patch:
@@ -88,8 +88,8 @@ public WebDriverWait(WebDriver driver, long timeoutInSeconds, long sleepInMillis
    * list by calling ignoring(exceptions to add).
    *
    * @param driver The WebDriver instance to pass to the expected conditions
-   * @param timeoutInSeconds The timeout in seconds when an expectation is called
-   * @param sleepInMillis The duration in milliseconds to sleep between polls.
+   * @param timeout The timeout in seconds when an expectation is called
+   * @param sleep The duration in milliseconds to sleep between polls.
    * @see WebDriverWait#ignoring(java.lang.Class)
    */
   public WebDriverWait(WebDriver driver, Duration timeout, Duration sleep) {

File: java/client/src/org/openqa/selenium/chrome/ChromeDriverService.java
Patch:
@@ -130,7 +130,7 @@ public int score(Capabilities capabilities) {
     /**
      * Configures the driver server appending to log file.
      *
-     * @param verbose True for appending to log file, false otherwise.
+     * @param appendLog True for appending to log file, false otherwise.
      * @return A self reference.
      */
     public Builder withAppendLog(boolean appendLog) {

File: java/client/test/org/openqa/selenium/support/ui/WebDriverWaitTest.java
Patch:
@@ -82,7 +82,7 @@ public void shouldIncludeRemoteInfoForWrappedDriverTimeout() throws IOException
   public void shouldThrowAnExceptionIfTheTimerRunsOut() {
     TickingClock clock = new TickingClock();
     WebDriverWait wait =
-        new WebDriverWait(testDriver, Duration.ofSeconds(1), Duration.ofMillis(200), clock, clock);
+        new WebDriverWait(mockDriver, Duration.ofSeconds(1), Duration.ofMillis(200), clock, clock);
 
     assertThatExceptionOfType(TimeoutException.class)
         .isThrownBy(() -> wait.until((d) -> false));

File: java/client/test/org/openqa/selenium/ExecutingAsyncJavascriptTest.java
Patch:
@@ -49,7 +49,7 @@ public class ExecutingAsyncJavascriptTest extends JUnit4TestBase {
   public void setUp() {
     assumeTrue(driver instanceof JavascriptExecutor);
     executor = (JavascriptExecutor) driver;
-    driver.manage().timeouts().setScriptTimeout(0, TimeUnit.MILLISECONDS);
+    driver.manage().timeouts().setScriptTimeout(5000, TimeUnit.MILLISECONDS);
   }
 
   @Test
@@ -202,7 +202,6 @@ public void shouldCatchErrorsWhenExecutingInitialScript() {
   @Test
   public void shouldNotTimeoutWithMultipleCallsTheFirstOneBeingSynchronous() {
     driver.get(pages.ajaxyPage);
-    driver.manage().timeouts().setScriptTimeout(10, TimeUnit.MILLISECONDS);
     assertThat((Boolean) executor.executeAsyncScript("arguments[arguments.length - 1](true);"))
         .isTrue();
     assertThat((Boolean) executor.executeAsyncScript(

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -431,7 +431,7 @@ public void testShouldHandleAlertOnPageUnload() {
                 isFirefox(driver) && getFirefoxVersion(driver) >= 27);
 
     String pageWithOnBeforeUnload = appServer.create(new Page()
-        .withOnBeforeUnload("javascript:alert(\"onbeforeunload\")")
+        .withOnBeforeUnload("return \"onbeforeunload\"")
         .withBody("<p>Page with onbeforeunload event handler</p>"));
     driver.get(appServer.create(new Page()
         .withBody(String.format("<a id='link' href='%s'>open new page</a>", pageWithOnBeforeUnload))));
@@ -469,13 +469,14 @@ public void testShouldImplicitlyHandleAlertOnPageBeforeUnload() {
   @Ignore(value = CHROME, reason = "Chrome does not trigger alerts on unload")
   @NotYetImplemented(HTMLUNIT)
   @Ignore(SAFARI)
+  @Ignore(value = IE, reason = "IE driver automatically dismisses alerts on window close")
   @NotYetImplemented(EDGE)
   public void testShouldHandleAlertOnWindowClose() {
     assumeFalse("Firefox 27 does not trigger alerts on unload",
         isFirefox(driver) && getFirefoxVersion(driver) >= 27);
 
     String pageWithOnBeforeUnload = appServer.create(new Page()
-        .withOnBeforeUnload("javascript:alert(\"onbeforeunload\")")
+        .withOnBeforeUnload("return \"onbeforeunload\"")
         .withBody("<p>Page with onbeforeunload event handler</p>"));
     driver.get(appServer.create(new Page()
         .withBody(String.format(

File: java/server/test/org/openqa/selenium/grid/node/NodeTest.java
Patch:
@@ -309,7 +309,7 @@ public void eachSessionShouldReportTheNodesUrl() throws URISyntaxException {
   }
 
   @Test
-  public void quitingASessionShouldCauseASessionClosedEventToBeFired() {
+  public void quittingASessionShouldCauseASessionClosedEventToBeFired() {
     AtomicReference<Object> obj = new AtomicReference<>();
     bus.addListener(SESSION_CLOSED, event -> obj.set(event.getData(Object.class)));
 

File: java/server/src/org/openqa/selenium/events/zeromq/BoundZmqEventBus.java
Patch:
@@ -45,7 +45,7 @@ class BoundZmqEventBus implements EventBus {
 
     LOG.info(String.format("XPUB binding to %s, XSUB binding to %s", xpubAddr, xsubAddr));
 
-    xpub = context.createSocket(SocketType.PUB);
+    xpub = context.createSocket(SocketType.XPUB);
     xpub.setImmediate(true);
     xpub.bind(xpubAddr.bindTo);
 

File: java/client/test/com/thoughtworks/selenium/StartTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.HasCapabilities;
 import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.firefox.FirefoxOptions;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.RemoteWebDriver;
 
@@ -80,7 +81,7 @@ public void shouldBeAbleToPassCapabilitiesWithoutDetonating() {
   @Test
   public void shouldBeAbleToCreateAWebDriverBackedSeleniumInstance() throws MalformedURLException {
     URL wdServer = new URL(String.format("http://%s:%d/wd/hub", url.getHost(), url.getPort()));
-    WebDriver driver = new RemoteWebDriver(wdServer, DesiredCapabilities.firefox());
+    WebDriver driver = new RemoteWebDriver(wdServer, new FirefoxOptions());
     Capabilities capabilities = ((HasCapabilities) driver).getCapabilities();
 
     DefaultSelenium selenium = new DefaultSelenium(

File: java/client/test/org/openqa/selenium/ie/InternetExplorerOptionsTest.java
Patch:
@@ -102,7 +102,7 @@ public void shouldSetIeOptionsCapabilityWhenConstructedFromExistingCapabilities(
     InternetExplorerOptions expected = new InternetExplorerOptions();
     expected.setCapability("requireWindowFocus", true);
 
-    DesiredCapabilities desiredCapabilities = new DesiredCapabilities().internetExplorer();
+    DesiredCapabilities desiredCapabilities = new DesiredCapabilities();
     desiredCapabilities.setPlatform(Platform.WINDOWS);
     InternetExplorerOptions seen = new InternetExplorerOptions(desiredCapabilities);
     seen.setCapability("requireWindowFocus", true);

File: java/client/test/org/openqa/selenium/remote/BaseAugmenterTest.java
Patch:
@@ -33,6 +33,7 @@
 import org.openqa.selenium.TakesScreenshot;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;
+import org.openqa.selenium.firefox.FirefoxOptions;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -304,7 +305,7 @@ public static class ChildRemoteDriver extends RemoteWebDriver implements MagicNu
 
     @Override
     public Capabilities getCapabilities() {
-      return DesiredCapabilities.firefox();
+      return new FirefoxOptions();
     }
 
     @Override

File: java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.firefox.FirefoxOptions;
 import org.openqa.selenium.logging.LoggingPreferences;
 
 import java.util.Map;
@@ -38,8 +39,8 @@ public void testAddingTheSameCapabilityToAMapTwiceShouldResultInOneEntry() {
     Map<org.openqa.selenium.Capabilities, Class<? extends WebDriver>> capabilitiesToDriver =
         new ConcurrentHashMap<>();
 
-    capabilitiesToDriver.put(DesiredCapabilities.firefox(), WebDriver.class);
-    capabilitiesToDriver.put(DesiredCapabilities.firefox(), WebDriver.class);
+    capabilitiesToDriver.put(new FirefoxOptions(), WebDriver.class);
+    capabilitiesToDriver.put(new FirefoxOptions(), WebDriver.class);
 
     assertThat(capabilitiesToDriver).hasSize(1);
   }

File: java/client/test/org/openqa/selenium/testing/drivers/GridSupplier.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.firefox.FirefoxOptions;
 import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.LocalFileDetector;
@@ -105,7 +106,7 @@ private synchronized void startServers() {
 
   public static void main(String[] args) {
     System.setProperty("selenium.browser.grid", "true");
-    WebDriver driver = new GridSupplier(DesiredCapabilities.firefox()).get();
+    WebDriver driver = new GridSupplier(new FirefoxOptions()).get();
     driver.get("http://www.google.com");
   }
 }

File: java/client/test/org/openqa/selenium/testing/drivers/WebDriverBuilder.java
Patch:
@@ -21,12 +21,14 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
+import org.openqa.selenium.Platform;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.chrome.ChromeOptions;
 import org.openqa.selenium.edge.EdgeOptions;
 import org.openqa.selenium.firefox.FirefoxOptions;
 import org.openqa.selenium.ie.InternetExplorerOptions;
 import org.openqa.selenium.opera.OperaOptions;
+import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.safari.SafariOptions;
 
@@ -74,7 +76,7 @@ static void addShutdownAction(Runnable action) {
         return options;
       })
       .put(Browser.EDGE, EdgeOptions::new)
-      .put(Browser.HTMLUNIT, DesiredCapabilities::htmlUnit)
+      .put(Browser.HTMLUNIT, () -> new DesiredCapabilities(BrowserType.HTMLUNIT, "", Platform.ANY))
       .put(Browser.OPERABLINK, OperaOptions::new)
       .put(Browser.SAFARI, () -> {
         SafariOptions options = new SafariOptions();

File: java/server/test/org/openqa/grid/common/RegistrationRequestTest.java
Patch:
@@ -161,7 +161,7 @@ public void testBuildWithConfiguration() {
     actualConfig.timeout = 10;
     actualConfig.host = "dummyhost";
     actualConfig.port = 1234;
-    actualConfig.capabilities.set(0, DesiredCapabilities.operaBlink());
+    actualConfig.capabilities.set(0, new DesiredCapabilities(BrowserType.FIREFOX, "10", Platform.ANY));
     actualConfig.nodeConfigFile = GridNodeConfiguration.DEFAULT_NODE_CONFIG_FILE;
 
     RegistrationRequest req = RegistrationRequest.build(actualConfig);
@@ -176,7 +176,7 @@ public void testBuildWithConfiguration() {
     assertNull(actualConfig.nodeConfigFile);
 
     // make sure the first capability is for operaBlink
-    assertEquals(DesiredCapabilities.operaBlink().getBrowserName(),
+    assertEquals(BrowserType.FIREFOX,
                  actualConfig.capabilities.get(0).getBrowserName());
 
     // make sure this merge protected value was preserved, then reset it for the final assert

File: java/server/test/org/openqa/grid/e2e/node/CrashWhenStartingBrowserTest.java
Patch:
@@ -63,7 +63,7 @@ public void prepareANodePointingToANonExistingFirefox() throws Exception {
 
     remote = GridTestHelper.getRemoteWithoutCapabilities(hub.getUrl(), GridRole.NODE);
 
-    remote.addBrowser(DesiredCapabilities.firefox(), 1);
+    remote.addBrowser(new DesiredCapabilities(new FirefoxOptions()), 1);
 
     remote.setRemoteServer(new SeleniumServer(remote.getConfiguration()));
     remote.startRemoteServer();

File: java/server/test/org/openqa/grid/e2e/node/DefaultProxyInjectsConfigurationUuidTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.openqa.grid.web.servlet.handler.RequestType;
 import org.openqa.grid.web.servlet.handler.SeleniumBasedRequest;
 import org.openqa.selenium.firefox.FirefoxDriver;
+import org.openqa.selenium.firefox.FirefoxOptions;
 import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
@@ -65,7 +66,7 @@ public void prepare() throws Exception {
     remote = GridTestHelper.getRemoteWithoutCapabilities(hub.getUrl(), GridRole.NODE);
     remote.setMaxConcurrent(100);
 
-    ff20_caps = DesiredCapabilities.firefox();
+    ff20_caps = new DesiredCapabilities(new FirefoxOptions());
     ff20_caps.setCapability(FirefoxDriver.BINARY, "should be overwritten");
     ff20_caps.setVersion("20");
     remote.addBrowser(ff20_caps, 1);

File: java/server/test/org/openqa/grid/e2e/utils/GridTestHelper.java
Patch:
@@ -32,7 +32,9 @@
 import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;
 import org.openqa.grid.web.Hub;
 import org.openqa.selenium.Capabilities;
+import org.openqa.selenium.Platform;
 import org.openqa.selenium.net.PortProber;
+import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.remote.server.SeleniumServer;
@@ -74,7 +76,7 @@ public static DesiredCapabilities getDefaultBrowserCapability() {
       caps.setBrowserName(browser);
       return caps;
     }
-    return DesiredCapabilities.htmlUnit();
+    return new DesiredCapabilities(BrowserType.HTMLUNIT, "", Platform.ANY);
   }
 
   public static Hub getHub() {

File: java/server/test/org/openqa/selenium/remote/server/handler/ConfigureTimeoutTest.java
Patch:
@@ -31,9 +31,11 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.openqa.selenium.Capabilities;
+import org.openqa.selenium.Platform;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.io.TemporaryFilesystem;
+import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.server.DefaultSession;
 import org.openqa.selenium.remote.server.DriverFactory;
@@ -63,7 +65,7 @@ public void setUp() throws Exception {
     when(driver.manage().timeouts()).thenReturn(timeouts);
     tempDir = Files.createTempDir();
     tempFs = TemporaryFilesystem.getTmpFsBasedOn(tempDir);
-    DesiredCapabilities caps = DesiredCapabilities.firefox();
+    Capabilities caps = new DesiredCapabilities(BrowserType.FIREFOX, "10", Platform.ANY);
     session = DefaultSession.createSession(driverFactory, tempFs, caps);
   }
 

File: java/client/src/com/thoughtworks/selenium/SeleneseTestBase.java
Patch:
@@ -236,7 +236,7 @@ public static void assertEquals(String expected, String[] actual) {
    * Compares two strings, but handles "regexp:" strings like HTML Selenese
    *
    * @param expectedPattern expression of expected
-   * @param actual expresssion of actual
+   * @param actual expression of actual
    * @return true if actual matches the expectedPattern, or false otherwise
    */
   public static boolean seleniumEquals(String expectedPattern, String actual) {
@@ -498,7 +498,7 @@ protected boolean isCaptureScreenShotOnFailure() {
     return captureScreenShotOnFailure;
   }
 
-  protected void setCaptureScreenShotOnFailure(boolean captureScreetShotOnFailure) {
-    this.captureScreenShotOnFailure = captureScreetShotOnFailure;
+  protected void setCaptureScreenShotOnFailure(boolean captureScreenShotOnFailure) {
+    this.captureScreenShotOnFailure = captureScreenShotOnFailure;
   }
 }

File: java/client/src/org/openqa/selenium/chrome/ChromeDriverService.java
Patch:
@@ -106,14 +106,14 @@ public static class Builder extends DriverService.Builder<
     private String whitelistedIps = System.getProperty(CHROME_DRIVER_WHITELISTED_IPS_PROPERTY);
 
     @Override
-    public int score(Capabilities capabilites) {
+    public int score(Capabilities capabilities) {
       int score = 0;
 
-      if (BrowserType.CHROME.equals(capabilites.getBrowserName())) {
+      if (BrowserType.CHROME.equals(capabilities.getBrowserName())) {
         score++;
       }
 
-      if (capabilites.getCapability(ChromeOptions.CAPABILITY) != null) {
+      if (capabilities.getCapability(ChromeOptions.CAPABILITY) != null) {
         score++;
       }
 

File: java/client/src/org/openqa/selenium/chrome/ChromeOptions.java
Patch:
@@ -128,7 +128,7 @@ public ChromeOptions addArguments(String... arguments) {
    * </code></pre>
    *
    * <p>Each argument may contain an option "--" prefix: "--foo" or "foo".
-   * Arguments with an associated value should be delimitted with an "=":
+   * Arguments with an associated value should be delimited with an "=":
    * "foo=bar".
    *
    * @param arguments The arguments to use when starting Chrome.

File: java/client/src/org/openqa/selenium/edge/EdgeDriverService.java
Patch:
@@ -75,10 +75,10 @@ public static class Builder extends DriverService.Builder<
      EdgeDriverService, EdgeDriverService.Builder> {
 
     @Override
-    public int score(Capabilities capabilites) {
+    public int score(Capabilities capabilities) {
       int score = 0;
 
-      if (BrowserType.EDGE.equals(capabilites.getBrowserName())) {
+      if (BrowserType.EDGE.equals(capabilities.getBrowserName())) {
         score++;
       }
 

File: java/client/src/org/openqa/selenium/firefox/FirefoxBinary.java
Patch:
@@ -301,7 +301,7 @@ public void waitFor() {
   }
 
   /**
-   * @deprecated DriverSerrice is responsible for process management
+   * @deprecated DriverService is responsible for process management
    */
   @Deprecated
   public void waitFor(long timeout) {

File: java/client/src/org/openqa/selenium/ie/InternetExplorerDriverService.java
Patch:
@@ -112,14 +112,14 @@ public static class Builder extends DriverService.Builder<
     private Boolean silent = null;
 
     @Override
-    public int score(Capabilities capabilites) {
+    public int score(Capabilities capabilities) {
       int score = 0;
 
-      if (BrowserType.IE.equals(capabilites.getBrowserName())) {
+      if (BrowserType.IE.equals(capabilities.getBrowserName())) {
         score++;
       }
 
-      if (capabilites.getCapability(InternetExplorerOptions.IE_OPTIONS) != null) {
+      if (capabilities.getCapability(InternetExplorerOptions.IE_OPTIONS) != null) {
         score++;
       }
 

File: java/client/src/org/openqa/selenium/interactions/InvalidCoordinatesException.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Indicates that the coordinates provided to an interactions operation are invalid. This, most
  * likely, means that a move operation was provided with invalid coordinates or that an action that
- * depends on mouse position (like click) was not preceeded by a move operation.
+ * depends on mouse position (like click) was not preceded by a move operation.
  */
 public class InvalidCoordinatesException extends WebDriverException {
 

File: java/client/src/org/openqa/selenium/interactions/TouchScreen.java
Patch:
@@ -68,7 +68,7 @@ public interface TouchScreen {
   void scroll(Coordinates where, int xOffset, int yOffset);
 
   /**
-   * Allows the execution of double tapon the screen, analogous to double click using a Mouse.
+   * Allows the execution of double tap on the screen, analogous to double click using a Mouse.
    *
    * @param where The coordinates of the element to double tap
    */

File: java/client/src/org/openqa/selenium/interactions/touch/TouchActions.java
Patch:
@@ -108,7 +108,7 @@ public TouchActions scroll(WebElement onElement, int xOffset, int yOffset) {
   }
 
   /**
-   * Allows the execution of double tapon the screen, analogous to double click using a Mouse.
+   * Allows the execution of double tap on the screen, analogous to double click using a Mouse.
    *
    * @param onElement The {@link WebElement} to double tap
    * @return self

File: java/client/src/org/openqa/selenium/net/NetworkInterfaceProvider.java
Patch:
@@ -28,6 +28,6 @@ public interface NetworkInterfaceProvider {
   Iterable<NetworkInterface> getNetworkInterfaces();
 
   // TODO: Remove this whole method
-  // This method should only return an iterface if it's named exactly "lo"
+  // This method should only return an interface if it's named exactly "lo"
   NetworkInterface getLoInterface();
 }

File: java/client/src/org/openqa/selenium/net/NetworkUtils.java
Patch:
@@ -113,7 +113,7 @@ public InetAddress getIp4NonLoopbackAddressOfThisMachine() {
 
   /**
    * Returns a single address that is guaranteed to resolve to an ipv4 representation of localhost
-   * This may either be a hostname or an ip address, dependending if we can guarantee what that the
+   * This may either be a hostname or an ip address, depending if we can guarantee what that the
    * hostname will resolve to ip4.
    *
    * @return The address part og such an address

File: java/client/src/org/openqa/selenium/opera/OperaOptions.java
Patch:
@@ -124,7 +124,7 @@ public OperaOptions addArguments(String... arguments) {
    * </code></pre>
    *
    * <p>Each argument may contain an option "--" prefix: "--foo" or "foo".
-   * Arguments with an associated value should be delimitted with an "=":
+   * Arguments with an associated value should be delimited with an "=":
    * "foo=bar".
    *
    * @param arguments The arguments to use when starting Opera.

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -97,7 +97,7 @@ public class ErrorCodes {
   public static final int INVALID_XPATH_SELECTOR_RETURN_TYPER = 52;
 
   // json wire protocol doesn't have analogous status codes for
-  // these new W3C status repsonse 'codes', so making some up!
+  // these new W3C status response 'codes', so making some up!
   public static final int ELEMENT_NOT_INTERACTABLE = 60;
   public static final int INVALID_ARGUMENT = 61;
   public static final int NO_SUCH_COOKIE = 62;

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriverBuilder.java
Patch:
@@ -67,7 +67,7 @@
  *     .addAlternative(new FirefoxOptions())
  *     .addAlternative(new ChromeOptions())
  *     .addMetadata("cloud:key", "hunter2")
- *     .setCapabilitiy("proxy", new Proxy())
+ *     .setCapability("proxy", new Proxy())
  *     .build();
  * </pre>
  * In this example, we ask for a session where the browser will be either Firefox or Chrome (we
@@ -138,7 +138,7 @@ public RemoteWebDriverBuilder addMetadata(String key, Object value) {
 
   /**
    * Sets a capability for every single alternative when the session is created. These capabilities
-   * are only set once the session is created, so this will be set on capabiltiies added via
+   * are only set once the session is created, so this will be set on capabilities added via
    * {@link #addAlternative(Capabilities)} or {@link #oneOf(Capabilities, Capabilities...)} even
    * after this method call.
    */

File: java/client/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -275,7 +275,7 @@ public static abstract class Builder<DS extends DriverService, B extends Builder
      * service directly supports that are unique to the driver service (that is, things like
      * "{@code proxy}" don't tend to count to the score).
      */
-    public abstract int score(Capabilities capabilites);
+    public abstract int score(Capabilities capabilities);
 
     /**
      * Sets which driver executable the builder will use.

File: java/client/src/org/openqa/selenium/remote/session/CapabilitiesFilter.java
Patch:
@@ -27,7 +27,7 @@
 public interface CapabilitiesFilter extends Function<Map<String, Object>, Map<String, Object>> {
 
   /**
-   * Take a map of capabilties and extract those specific to a browser.
+   * Take a map of capabilities and extract those specific to a browser.
    * @return a {@link Map} of capabilities if any match, or {@code null} otherwise.
    */
   @Override

File: java/client/src/org/openqa/selenium/remote/tracing/Span.java
Patch:
@@ -29,7 +29,7 @@ public interface Span extends Closeable {
 
   /**
    * Add a piece of metadata to the span, which allows high cardinality data to
-   * be added to the span. This data will not be propogated to other spans.
+   * be added to the span. This data will not be propagated to other spans.
    */
   Span addTag(String key, Object value);
 

File: java/client/src/org/openqa/selenium/safari/SafariOptions.java
Patch:
@@ -94,7 +94,7 @@ public SafariOptions merge(Capabilities extraCapabilities) {
   }
 
   /**
-   * Construct a {@link SafariOptions} instance from given capabilites.
+   * Construct a {@link SafariOptions} instance from given capabilities.
    * When the {@link #CAPABILITY} capability is set, all other capabilities will be ignored!
    *
    * @param capabilities Desired capabilities from which the options are derived.

File: java/client/src/org/openqa/selenium/support/pagefactory/DefaultElementLocator.java
Patch:
@@ -47,7 +47,7 @@ public DefaultElementLocator(SearchContext searchContext, Field field) {
   }
 
   /**
-   * Use this constructor in order to process custom annotaions.
+   * Use this constructor in order to process custom annotations.
    *
    * @param searchContext The context to use when finding the element
    * @param annotations AbstractAnnotations class implementation

File: java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java
Patch:
@@ -1438,7 +1438,7 @@ public String toString() {
   /**
    * An expectation to check if js executable.
    *
-   * Useful whenyou know that there should be a Javascript value or something at the stage.
+   * Useful when you know that there should be a Javascript value or something at the stage.
    *
    * @param javaScript used as executable script
    * @return true once javaScript executed without errors

File: java/client/src/org/openqa/selenium/support/ui/SlowLoadableComponent.java
Patch:
@@ -75,7 +75,7 @@ public T get() {
 
   /**
    * Check for well known error cases, which would mean that loading has finished, but an error
-   * condition was seen. If an error has occured throw an Error, possibly by using JUnit's
+   * condition was seen. If an error has occurred throw an Error, possibly by using JUnit's
    * Assert.assert* methods
    *
    * @throws Error When a well-known error condition has caused the load to fail

File: java/client/test/com/thoughtworks/selenium/InternalSelenseTestBase.java
Patch:
@@ -19,6 +19,7 @@
 
 import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
 import static org.openqa.selenium.UnexpectedAlertBehaviour.IGNORE;
+import static org.openqa.selenium.build.DevMode.isInDevMode;
 import static org.openqa.selenium.remote.CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR;
 
 import com.google.common.base.Throwables;
@@ -95,7 +96,7 @@ public static void buildJavascriptLibraries() throws IOException {
       InProject.locate("java/client/build/production/com/thoughtworks/selenium/webdriven");
     Files.createDirectories(dir);
     for (String target : ATOM_TARGETS) {
-      Path atom = new BuckBuild().of("//javascript/selenium-atoms:" + target).go();
+      Path atom = new BuckBuild().of("//javascript/selenium-atoms:" + target).go(isInDevMode());
       Files.copy(atom, dir.resolve(atom.getFileName()), REPLACE_EXISTING);
     }
     Path sizzle = InProject.locate("third_party/js/sizzle/sizzle.js");

File: java/client/test/com/thoughtworks/selenium/testing/SeleniumTestEnvironment.java
Patch:
@@ -17,6 +17,8 @@
 
 package com.thoughtworks.selenium.testing;
 
+import static org.openqa.selenium.build.DevMode.isInDevMode;
+
 import org.openqa.selenium.build.BuckBuild;
 import org.openqa.selenium.environment.TestEnvironment;
 import org.openqa.selenium.environment.webserver.AppServer;
@@ -41,7 +43,7 @@ public class SeleniumTestEnvironment implements TestEnvironment {
   public SeleniumTestEnvironment(int port, String... extraArgs) {
     try {
       Path serverJar = new BuckBuild()
-        .of("//java/server/test/org/openqa/selenium:server-with-tests").go();
+        .of("//java/server/test/org/openqa/selenium:server-with-tests").go(isInDevMode());
 
       List<Object> args = new ArrayList<>();
       if (Boolean.getBoolean("webdriver.debug")) {

File: java/client/test/org/openqa/selenium/build/BuckBuild.java
Patch:
@@ -46,10 +46,10 @@ public BuckBuild of(String target) {
     return this;
   }
 
-  public Path go() throws IOException {
+  public Path go(boolean inDevMode) throws IOException {
     Path projectRoot = InProject.locate("Rakefile").getParent();
 
-    if (!isInDevMode()) {
+    if (!inDevMode) {
       // we should only need to do this when we're in dev mode
       // when running in a test suite, our dependencies should already
       // be listed.

File: java/client/test/org/openqa/selenium/testing/StaticResources.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.openqa.selenium.testing;
 
+import static org.openqa.selenium.build.DevMode.isInDevMode;
+
 import org.openqa.selenium.build.BuckBuild;
 import org.openqa.selenium.build.DevMode;
 import org.openqa.selenium.build.InProject;
@@ -61,7 +63,7 @@ private static void copy(String buildTarget, String copyTo) {
         return;
       }
 
-      Path source = new BuckBuild().of(buildTarget).go();
+      Path source = new BuckBuild().of(buildTarget).go(isInDevMode());
 
       Files.createDirectories(dest.getParent());
       Files.copy(source, dest);

File: java/client/test/org/openqa/selenium/testing/drivers/OutOfProcessSeleniumServer.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.testing.drivers;
 
 import static java.util.concurrent.TimeUnit.SECONDS;
+import static org.openqa.selenium.build.DevMode.isInDevMode;
 
 import org.openqa.selenium.build.BuckBuild;
 import org.openqa.selenium.net.NetworkUtils;
@@ -114,7 +115,7 @@ public void stop() {
   }
 
   private String buildServerAndClasspath() throws IOException {
-    Path serverJar = new BuckBuild().of("//java/server/src/org/openqa/grid/selenium:selenium").go();
+    Path serverJar = new BuckBuild().of("//java/server/src/org/openqa/grid/selenium:selenium").go(true);
     return serverJar.toAbsolutePath().toString();
   }
 

File: java/client/src/org/openqa/selenium/tools/ModuleMaker.java
Patch:
@@ -111,7 +111,7 @@ public static void main(String[] args) throws IOException {
       dir.setLastModifiedTime(FileTime.fromMillis(DOS_EPOCH));
       jos.putNextEntry(dir);
 
-      dir = new ZipEntry("META-INF/versions/9");
+      dir = new ZipEntry("META-INF/versions/9/");
       dir.setTime(DOS_EPOCH);
       dir.setCreationTime(FileTime.fromMillis(DOS_EPOCH));
       dir.setLastModifiedTime(FileTime.fromMillis(DOS_EPOCH));

File: java/server/test/org/openqa/selenium/remote/server/CapabilitiesComparatorTest.java
Patch:
@@ -152,7 +152,7 @@ public void shouldPickMostSpecificOperatingSystem() {
     Capabilities vista = capabilities(BrowserType.IE, "", Platform.VISTA, true);
 
     List<Capabilities> list = asList(any, windows, xp, vista);
-    assertThat(getBestMatch(any, list)).isEqualTo(any);
+    assertThat(getBestMatch(any, list, Platform.LINUX)).isEqualTo(any);
     assertThat(getBestMatch(windows, list)).isEqualTo(windows);
     assertThat(getBestMatch(xp, list)).isEqualTo(xp);
     assertThat(getBestMatch(vista, list)).isEqualTo(vista);

File: java/client/test/org/openqa/selenium/UploadTest.java
Patch:
@@ -144,7 +144,7 @@ public void testUploadingWithInvisibleFileInput() {
   @Ignore(HTMLUNIT)
   @NotYetImplemented(EDGE)
   @NoDriverBeforeTest
-  public void testUploadingWithInvisibleFileInputWhenStringFileInteractabilityIsOn() {
+  public void testUploadingWithInvisibleFileInputWhenStrictFileInteractabilityIsOn() {
     createNewDriver(new ImmutableCapabilities(CapabilityType.STRICT_FILE_INTERACTABILITY, true));
 
     driver.get(appServer.whereIs("upload_invisible.html"));

File: java/server/src/org/openqa/selenium/grid/commands/DefaultStandaloneConfig.java
Patch:
@@ -28,9 +28,9 @@ class DefaultStandaloneConfig extends MapConfig {
         "events", ImmutableMap.of(
             "publish", "inproc://standalone-pub",
             "subscribe", "inproc://standalone-sub",
-            "bind", true),
-        "node", ImmutableMap.of(
-            "detect-drivers", true)));
+            "bind", true)));
+//        "node", ImmutableMap.of(
+//            "detect-drivers", true)));
   }
 
 }

File: java/server/src/org/openqa/selenium/grid/docker/DockerFlags.java
Patch:
@@ -35,10 +35,9 @@ public class DockerFlags {
 
   @Parameter(
       names = {"--docker"},
-      description = "Whether docker integration is enabled",
-      arity = 1)
+      description = "Whether docker integration is enabled")
   @ConfigValue(section = "docker", name = "enabled")
-  private boolean isEnabled = true;
+  private boolean isEnabled;
 
   public DockerFlags() {
     try {

File: java/client/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -121,8 +121,8 @@ private Optional<Result> createSession(HttpClient client, InputStream newSession
         blob);
 
     return Stream.of(
-        new JsonWireProtocolResponse().getResponseFunction(),
-        new W3CHandshakeResponse().getResponseFunction())
+        new W3CHandshakeResponse().getResponseFunction(),
+        new JsonWireProtocolResponse().getResponseFunction())
         .map(func -> func.apply(initialResponse))
         .filter(Objects::nonNull)
         .findFirst();

File: java/server/src/org/openqa/selenium/grid/router/GridStatusHandler.java
Patch:
@@ -80,7 +80,9 @@ public GridStatusHandler(Json json, HttpClient.Factory clientFactory, Distributo
 
   @Override
   public void execute(HttpRequest req, HttpResponse resp) throws IOException {
-    DistributorStatus status = null;
+    long start = System.currentTimeMillis();
+
+    DistributorStatus status;
     try {
       status = EXECUTOR_SERVICE.submit(distributor::getStatus).get(2, SECONDS);
     } catch (ExecutionException | InterruptedException | TimeoutException e) {
@@ -91,7 +93,6 @@ public void execute(HttpRequest req, HttpResponse resp) throws IOException {
       return;
     }
 
-    long start = System.currentTimeMillis();
     boolean ready = status.hasCapacity();
     String message = ready ? "Selenium Grid ready." : "Selenium Grid not ready";
 

File: java/server/src/org/openqa/selenium/grid/router/GridStatusHandler.java
Patch:
@@ -98,7 +98,6 @@ public void execute(HttpRequest req, HttpResponse resp) throws IOException {
     long remaining = System.currentTimeMillis() + 2000 - start;
     List<Future<Map<String, Object>>> nodeResults = status.getNodes().stream()
         .map(summary -> {
-          System.out.println("Creating node summary for: " + summary.getUri());
           ImmutableMap<String, Object> defaultResponse = ImmutableMap.of(
               "id", summary.getNodeId(),
               "uri", summary.getUri(),
@@ -114,7 +113,6 @@ public void execute(HttpRequest req, HttpResponse resp) throws IOException {
                   HttpClient client = clientFactory.createClient(summary.getUri().toURL());
                   HttpResponse res = client.execute(new HttpRequest(GET, "/se/grid/node/status"));
 
-                  System.out.println("Read: " + res.getContentString());
                   if (res.getStatus() == 200) {
                     toReturn.complete(json.toType(res.getContentString(), MAP_TYPE));
                   } else {

File: java/client/src/org/openqa/selenium/remote/CapabilityType.java
Patch:
@@ -47,6 +47,7 @@ public interface CapabilityType {
   String ELEMENT_SCROLL_BEHAVIOR = "elementScrollBehavior";
   String HAS_TOUCHSCREEN = "hasTouchScreen";
   String OVERLAPPING_CHECK_DISABLED = "overlappingCheckDisabled";
+  String STRICT_FILE_INTERACTABILITY = "strictFileInteractability";
 
   String LOGGING_PREFS = "loggingPrefs";
 

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -96,7 +96,7 @@ static GeckoDriverService createDefaultService(Capabilities caps) {
   }
 
   @Override
-  protected void waitUntilAvailable() throws MalformedURLException {
+  protected void waitUntilAvailable() {
     PortProber.waitForPortUp(getUrl().getPort(), 20, SECONDS);
   }
 
@@ -205,12 +205,10 @@ protected GeckoDriverService createDriverService(File exe, int port,
           } else if ("/dev/null".equals(firefoxLogFile)) {
             service.sendOutputTo(ByteStreams.nullOutputStream());
           } else {
-            // TODO: The stream is leaked.
             service.sendOutputTo(new FileOutputStream(firefoxLogFile));
           }
         } else {
           if (getLogFile() != null) {
-            // TODO: This stream is leaked.
             service.sendOutputTo(new FileOutputStream(getLogFile()));
           } else {
             service.sendOutputTo(System.err);

File: java/server/src/org/openqa/selenium/grid/node/local/SessionFactory.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.function.Predicate;
 
 class SessionFactory
-    implements Predicate<Capabilities>, Function<Capabilities, Optional<SessionAndHandler>> {
+    implements Predicate<Capabilities>, Function<Capabilities, Optional<TrackedSession>> {
 
   private final HttpClient.Factory httpClientFactory;
   private final Capabilities capabilities;
@@ -70,7 +70,7 @@ public boolean test(Capabilities capabilities) {
   }
 
   @Override
-  public Optional<SessionAndHandler> apply(Capabilities capabilities) {
+  public Optional<TrackedSession> apply(Capabilities capabilities) {
     if (!test(capabilities)) {
       return Optional.empty();
     }
@@ -100,6 +100,6 @@ public Optional<SessionAndHandler> apply(Capabilities capabilities) {
       }
     };
 
-    return Optional.of(new SessionAndHandler(session, killingHandler));
+    return Optional.of(new TrackedSession(this, session, killingHandler));
   }
 }

File: java/server/test/org/openqa/selenium/grid/distributor/DistributorTest.java
Patch:
@@ -280,9 +280,9 @@ public void shouldUseLastSessionCreatedTimeAsTieBreaker() {
     }
 
     // All the nodes should be equally loaded.
-    Map<Capabilities, Integer> expected = mostRecent.getStatus().getAvailable();
-    assertThat(leastRecent.getStatus().getAvailable()).isEqualTo(expected);
-    assertThat(middle.getStatus().getAvailable()).isEqualTo(expected);
+    Map<Capabilities, Integer> expected = mostRecent.getStatus().getStereotypes();
+    assertThat(leastRecent.getStatus().getStereotypes()).isEqualTo(expected);
+    assertThat(middle.getStatus().getStereotypes()).isEqualTo(expected);
 
     // All nodes are now equally loaded. We should be going in time order now
     try (NewSessionPayload payload = NewSessionPayload.create(caps)) {

File: java/server/src/org/openqa/selenium/grid/data/NodeStatus.java
Patch:
@@ -145,9 +145,8 @@ private static Map<Capabilities, Integer> readCapacityNamed(
     ImmutableMap.Builder<Capabilities, Integer> capacity = ImmutableMap.builder();
     kind.forEach(obj -> {
       Map<?, ?> cap = (Map<?, ?>) obj;
-      //noinspection unchecked
       capacity.put(
-          new ImmutableCapabilities((Map<String, Object>) cap.get("capabilities")),
+          new ImmutableCapabilities((Map<?, ?>) cap.get("capabilities")),
           ((Number) cap.get("count")).intValue());
     });
 

File: java/server/src/org/openqa/selenium/grid/data/Session.java
Patch:
@@ -70,9 +70,7 @@ private Map<String, Object> toJson() {
   private static Session fromJson(Map<String, Object> raw) throws URISyntaxException {
     SessionId id = new SessionId((String) raw.get("sessionId"));
     URI uri = new URI((String) raw.get("uri"));
-    @SuppressWarnings("unchecked")
-    Map<String, Object> rawCaps = (Map<String, Object>) raw.get("capabilities");
-    Capabilities caps = new ImmutableCapabilities(rawCaps);
+    Capabilities caps = new ImmutableCapabilities((Map<?, ?>) raw.get("capabilities"));
 
     return new Session(id, uri, caps);
   }

File: java/client/src/org/openqa/selenium/firefox/xpi/XpiDriverService.java
Patch:
@@ -314,7 +314,8 @@ static XpiDriverService createDefaultService(Capabilities caps) {
         } catch (IOException ex) {
           throw new RuntimeException(ex);
         }},
-        ((FirefoxOptions) caps)::getProfile,
+        // Don't believe IDEA, this lambda can't be replaced with a method reference!
+        () -> ((FirefoxOptions) caps).getProfile(),
         () -> (FirefoxProfile) ((Map<String, Object>) caps.getCapability(FIREFOX_OPTIONS)).get("profile"),
         () -> { try {
           return FirefoxProfile.fromJson(

File: java/server/src/org/openqa/selenium/grid/commands/DefaultHubConfig.java
Patch:
@@ -26,7 +26,8 @@ class DefaultHubConfig extends MapConfig {
   DefaultHubConfig() {
     super(ImmutableMap.of(
         "events", ImmutableMap.of(
-            "address", "tcp://*:4443",
+            "publish", "tcp://*:4442",
+            "subscribe", "tcp://*:4443",
             "bind", true)));
   }
 }

File: java/server/src/org/openqa/selenium/events/zeromq/UnboundEventBus.java
Patch:
@@ -143,7 +143,7 @@ public void fire(Event event) {
 
     pub.sendMore(event.getType().getName().getBytes(UTF_8));
     pub.sendMore(event.getId().toString().getBytes(UTF_8));
-    pub.send(JSON.toJson(event.getData()).getBytes(UTF_8));
+    pub.send(event.getRawData().getBytes(UTF_8));
   }
 
   @Override

File: java/server/src/org/openqa/selenium/grid/commands/DefaultStandaloneConfig.java
Patch:
@@ -27,7 +27,9 @@ class DefaultStandaloneConfig extends MapConfig {
     super(ImmutableMap.of(
         "events", ImmutableMap.of(
             "address", "inproc://standalone",
-            "bind", true)));
+            "bind", true),
+        "node", ImmutableMap.of(
+            "detect-drivers", true)));
   }
 
 }

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -145,7 +145,7 @@ public Executable configure(String... args) {
           localhost,
           sessions)
           .maximumConcurrentSessions(Runtime.getRuntime().availableProcessors() * 3);
-      nodeFlags.configure(clientFactory, node);
+      nodeFlags.configure(config, clientFactory, node);
 
       distributor.add(node.build());
 

File: java/server/src/org/openqa/selenium/grid/node/httpd/NodeServer.java
Patch:
@@ -133,7 +133,7 @@ public Executable configure(String... args) {
           httpClientFactory,
           serverOptions.getExternalUri(),
           sessions);
-      nodeFlags.configure(httpClientFactory, builder);
+      nodeFlags.configure(config, httpClientFactory, builder);
       LocalNode node = builder.build();
 
       DistributorOptions distributorOptions = new DistributorOptions(config);

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -73,7 +73,7 @@ public String getDescription() {
   public Executable configure(String... args) {
     HelpFlags help = new HelpFlags();
     BaseServerFlags baseFlags = new BaseServerFlags(4444);
-    EventBusFlags eventFlags = new EventBusFlags(4443);
+    EventBusFlags eventFlags = new EventBusFlags();
     NodeFlags nodeFlags = new NodeFlags();
 
     JCommander commander = JCommander.newBuilder()
@@ -102,7 +102,8 @@ public Executable configure(String... args) {
           new ConcatenatingConfig("selenium", '.', System.getProperties()),
           new AnnotatedConfig(help),
           new AnnotatedConfig(baseFlags),
-          new AnnotatedConfig(eventFlags));
+          new AnnotatedConfig(eventFlags),
+          new DefaultStandaloneConfig());
 
       LoggingOptions loggingOptions = new LoggingOptions(config);
       loggingOptions.configureLogging();

File: java/server/src/org/openqa/selenium/grid/commands/Hub.java
Patch:
@@ -86,10 +86,10 @@ public Executable configure(String... args) {
       }
 
       Config config = new CompoundConfig(
-          new AnnotatedConfig(help),
-          new AnnotatedConfig(baseFlags),
           new EnvConfig(),
-          new ConcatenatingConfig("selenium", '.', System.getProperties()));
+          new ConcatenatingConfig("selenium", '.', System.getProperties()),
+          new AnnotatedConfig(help),
+          new AnnotatedConfig(baseFlags));
 
       LoggingOptions loggingOptions = new LoggingOptions(config);
       loggingOptions.configureLogging();

File: java/server/src/org/openqa/selenium/grid/commands/Standalone.java
Patch:
@@ -93,10 +93,10 @@ public Executable configure(String... args) {
       }
 
       Config config = new CompoundConfig(
-          new AnnotatedConfig(help),
-          new AnnotatedConfig(baseFlags),
           new EnvConfig(),
-          new ConcatenatingConfig("selenium", '.', System.getProperties()));
+          new ConcatenatingConfig("selenium", '.', System.getProperties()),
+          new AnnotatedConfig(help),
+          new AnnotatedConfig(baseFlags));
 
       LoggingOptions loggingOptions = new LoggingOptions(config);
       loggingOptions.configureLogging();

File: java/server/src/org/openqa/selenium/grid/distributor/httpd/DistributorServer.java
Patch:
@@ -82,10 +82,10 @@ public Executable configure(String... args) {
       }
 
       Config config = new CompoundConfig(
-          new AnnotatedConfig(help),
-          new AnnotatedConfig(serverFlags),
           new EnvConfig(),
-          new ConcatenatingConfig("distributor", '.', System.getProperties()));
+          new ConcatenatingConfig("distributor", '.', System.getProperties()),
+          new AnnotatedConfig(help),
+          new AnnotatedConfig(serverFlags));
 
       LoggingOptions loggingOptions = new LoggingOptions(config);
       loggingOptions.configureLogging();

File: java/server/src/org/openqa/selenium/grid/node/httpd/NodeServer.java
Patch:
@@ -97,11 +97,11 @@ public Executable configure(String... args) {
       }
 
       Config config = new CompoundConfig(
+          new EnvConfig(),
+          new ConcatenatingConfig("node", '.', System.getProperties()),
           new AnnotatedConfig(help),
           new AnnotatedConfig(serverFlags),
-          new AnnotatedConfig(nodeFlags),
-          new EnvConfig(),
-          new ConcatenatingConfig("node", '.', System.getProperties()));
+          new AnnotatedConfig(nodeFlags));
 
       LoggingOptions loggingOptions = new LoggingOptions(config);
       loggingOptions.configureLogging();

File: java/server/src/org/openqa/selenium/grid/router/httpd/RouterServer.java
Patch:
@@ -91,11 +91,11 @@ public Executable configure(String... args) {
       }
 
       Config config = new CompoundConfig(
+          new EnvConfig(),
+          new ConcatenatingConfig("router", '.', System.getProperties()),
           new AnnotatedConfig(help),
           new AnnotatedConfig(serverFlags),
-          new AnnotatedConfig(nodeFlags),
-          new EnvConfig(),
-          new ConcatenatingConfig("router", '.', System.getProperties()));
+          new AnnotatedConfig(nodeFlags));
 
       LoggingOptions loggingOptions = new LoggingOptions(config);
       loggingOptions.configureLogging();

File: java/server/src/org/openqa/selenium/grid/sessionmap/httpd/SessionMapServer.java
Patch:
@@ -81,10 +81,10 @@ public Executable configure(String... args) {
       }
 
       Config config = new CompoundConfig(
-          new AnnotatedConfig(help),
-          new AnnotatedConfig(serverFlags),
           new EnvConfig(),
-          new ConcatenatingConfig("sessions", '.', System.getProperties()));
+          new ConcatenatingConfig("sessions", '.', System.getProperties()),
+          new AnnotatedConfig(help),
+          new AnnotatedConfig(serverFlags));
 
       LoggingOptions loggingOptions = new LoggingOptions(config);
       loggingOptions.configureLogging();

File: java/client/test/org/openqa/selenium/ie/InternetExplorerOptionsTest.java
Patch:
@@ -88,7 +88,6 @@ public void shouldSurviveASerializationRoundTrip() {
         .addCommandSwitches("--cake");
 
     String json = new Json().toJson(options);
-    System.out.println("json = " + json);
     Capabilities capabilities = new Json().toType(json, Capabilities.class);
 
     assertThat(capabilities).isEqualTo(options);

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -373,6 +373,7 @@ public void testShouldGetTextWhichIsAValidComplexJSONObject() {
 
   @Test
   @NotYetImplemented(HTMLUNIT)
+  @NotYetImplemented(SAFARI)
   public void testShouldNotReturnLtrMarks() {
     driver.get(pages.unicodeLtrPage);
     WebElement element = driver.findElement(By.id("EH")).findElement(By.tagName("nobr"));

File: java/client/test/org/openqa/selenium/testing/drivers/WebDriverBuilder.java
Patch:
@@ -72,10 +72,9 @@ static void addShutdownAction(Runnable action) {
         }
         return options;
       })
-      .put(Browser.SAFARI, SafariOptions::new)
       .put(Browser.HTMLUNIT, DesiredCapabilities::htmlUnit)
       .put(Browser.OPERABLINK, OperaOptions::new)
-      .put(Browser.OPERA, () -> {
+      .put(Browser.SAFARI, () -> {
         SafariOptions options = new SafariOptions();
         if (Boolean.getBoolean("selenium.safari.tp")) {
           options.setUseTechnologyPreview(true);

File: java/client/src/com/thoughtworks/selenium/DefaultSelenium.java
Patch:
@@ -177,7 +177,7 @@ public void showContextualBanner(String className, String methodName) {
     int len = methodName.length();
     for (int i = 0; i < len; i++) {
       char ch = methodName.charAt(i);
-      nextOneIsUpperCase = i < len - 1 ? Character.isUpperCase(methodName.charAt(i + 1)) : true;
+      nextOneIsUpperCase = i >= len - 1 || Character.isUpperCase(methodName.charAt(i + 1));
 
       if ((Character.isUpperCase(ch) && (!lastOneWasUpperCase || !nextOneIsUpperCase))) {
         context.append(" ");

File: java/client/src/com/thoughtworks/selenium/SeleneseTestBase.java
Patch:
@@ -111,7 +111,7 @@ public void setUp(String url, String browserString) throws Exception {
   protected int getDefaultPort() {
     try {
       Class<?> c = Class.forName("org.openqa.selenium.server.RemoteControlConfiguration");
-      Method getDefaultPort = c.getMethod("getDefaultPort", new Class[0]);
+      Method getDefaultPort = c.getMethod("getDefaultPort");
       Integer portNumber = (Integer) getDefaultPort.invoke(null);
       return portNumber.intValue();
     } catch (Exception e) {

File: java/client/src/com/thoughtworks/selenium/Selenium.java
Patch:
@@ -175,7 +175,7 @@ public interface Selenium {
   /** Starts a new Selenium testing session with a String, representing a configuration
    * @param optionsString option string
    */
-  public void start(String optionsString);
+  void start(String optionsString);
 
   /** Starts a new Selenium testing session with a configuration options object
    * @param optionsObject options object

File: java/client/src/com/thoughtworks/selenium/condition/ConditionRunner.java
Patch:
@@ -58,7 +58,7 @@ public interface ConditionRunner {
    * Used by implementations of {@link ConditionRunner#waitFor(Condition)} to provide context to the
    * {@link Condition isTrue(com.google.testing.selenium.condition.ConditionRunner.Context)} method
    */
-  public interface Context {
+  interface Context {
 
     /**
      * @return the condition runner inside which this condition is being run.

File: java/client/src/com/thoughtworks/selenium/webdriven/CompoundMutator.java
Patch:
@@ -86,7 +86,7 @@ public void mutate(String script, StringBuilder outputTo) {
     for (ScriptMutator mutator : mutators) {
       mutator.mutate(script, nested);
     }
-    nested.append("").append(script);
+    nested.append(script);
 
     outputTo.append("return eval('");
     outputTo.append(escape(nested.toString()));

File: java/client/src/com/thoughtworks/selenium/webdriven/Windows.java
Patch:
@@ -103,9 +103,7 @@ public void selectFrame(WebDriver driver, String locator) {
         lastFrame.put(driver.getWindowHandle(), locator);
         driver.switchTo().frame(index);
         return;
-      } catch (NumberFormatException e) {
-        throw new SeleniumException(e.getMessage(), e);
-      } catch (NoSuchFrameException e) {
+      } catch (NumberFormatException | NoSuchFrameException e) {
         throw new SeleniumException(e.getMessage(), e);
       }
     }

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/IsCookiePresent.java
Patch:
@@ -24,6 +24,6 @@
 public class IsCookiePresent extends SeleneseCommand<Boolean> {
   @Override
   protected Boolean handleSeleneseCommand(WebDriver driver, String name, String ignored) {
-    return driver.manage().getCookieNamed(name) == null ? false : true;
+    return driver.manage().getCookieNamed(name) != null;
   }
 }

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/SeleniumSelect.java
Patch:
@@ -110,8 +110,7 @@ private void assertSupportsMultipleSelections() {
 
   private boolean isMultiple() {
     String multipleValue = select.getAttribute("multiple");
-    boolean multiple = "true".equals(multipleValue) || "multiple".equals(multipleValue);
-    return multiple;
+    return "true".equals(multipleValue) || "multiple".equals(multipleValue);
   }
 
   public List<WebElement> getAllOptions() {

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/UseXPathLibrary.java
Patch:
@@ -26,7 +26,7 @@ public class UseXPathLibrary extends SeleneseCommand<Void> {
 
   @Override
   protected Void handleSeleneseCommand(WebDriver driver, String locator, String value) {
-    if (locator == null || !"javascript-xpath".equals(locator)) {
+    if (!"javascript-xpath".equals(locator)) {
       throw new SeleniumException("XPath library to use must be 'javascript-xpath'");
     }
 

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/WaitForPageToLoad.java
Patch:
@@ -98,7 +98,7 @@ public boolean until() {
           Object result = ((JavascriptExecutor) driver).executeScript(
               "return 'complete' == document.readyState;");
 
-          if (result != null && result instanceof Boolean && (Boolean) result) {
+          if (result instanceof Boolean && (Boolean) result) {
             return true;
           }
         } catch (Exception e) {
@@ -132,8 +132,7 @@ public boolean until() {
           }
 
           return System.currentTimeMillis() - seenAt > 1000;
-        } catch (NoSuchElementException ignored) {
-        } catch (NullPointerException ignored) {
+        } catch (NoSuchElementException | NullPointerException ignored) {
         }
 
         return false;

File: java/client/src/org/openqa/selenium/AbstractCapabilities.java
Patch:
@@ -176,7 +176,7 @@ private String abbreviate(Map<Object, String> seen, Object stringify) {
     } else {
       String s = String.valueOf(stringify);
       if (s.length() > 30) {
-        value.append(s.substring(0, 27)).append("...");
+        value.append(s, 0, 27).append("...");
       } else {
         value.append(s);
       }

File: java/client/src/org/openqa/selenium/PageLoadStrategy.java
Patch:
@@ -26,7 +26,7 @@ public enum PageLoadStrategy {
 
   private String text;
 
-  private PageLoadStrategy(String text) {
+  PageLoadStrategy(String text) {
     this.text = text;
   }
 

File: java/client/src/org/openqa/selenium/ScreenOrientation.java
Patch:
@@ -26,7 +26,7 @@ public enum ScreenOrientation {
 
   private final String value;
 
-  private ScreenOrientation(String value) {
+  ScreenOrientation(String value) {
     this.value = value;
   }
 

File: java/client/src/org/openqa/selenium/UnexpectedAlertBehaviour.java
Patch:
@@ -28,7 +28,7 @@ public enum UnexpectedAlertBehaviour {
 
   private String text;
 
-  private UnexpectedAlertBehaviour(String text) {
+  UnexpectedAlertBehaviour(String text) {
     this.text = text;
   }
 

File: java/client/src/org/openqa/selenium/firefox/ProfilesIni.java
Patch:
@@ -99,8 +99,7 @@ protected Map<String, File> readProfiles(File appData) {
 
   protected File newProfile(String name, File appData, String path, boolean isRelative) {
     if (name != null && path != null) {
-      File profileDir = isRelative ? new File(appData, path) : new File(path);
-      return profileDir;
+      return isRelative ? new File(appData, path) : new File(path);
     }
     return null;
   }

File: java/client/src/org/openqa/selenium/html5/AppCacheStatus.java
Patch:
@@ -30,7 +30,7 @@ public enum AppCacheStatus {
 
   private final int value;
 
-  private AppCacheStatus(int value) {
+  AppCacheStatus(int value) {
     this.value = value;
   }
 

File: java/client/src/org/openqa/selenium/ie/ElementScrollBehavior.java
Patch:
@@ -25,7 +25,7 @@ public enum ElementScrollBehavior {
 
   private int value;
 
-  private ElementScrollBehavior(int value) {
+  ElementScrollBehavior(int value) {
     this.value = value;
   }
 

File: java/client/src/org/openqa/selenium/interactions/ContextClickAction.java
Patch:
@@ -29,6 +29,7 @@
  *
  * @deprecated Use {@link Actions#contextClick(WebElement)}
  */
+@Deprecated
 public class ContextClickAction extends MouseAction implements Action {
   public ContextClickAction(Mouse mouse, Locatable where) {
     super(mouse, where);
@@ -45,9 +46,8 @@ public void perform() {
 
   @Override
   public List<Interaction> asInteractions(PointerInput mouse, KeyInput keyboard) {
-    List<Interaction> interactions = new ArrayList<>();
 
-    interactions.addAll(moveToLocation(mouse));
+    List<Interaction> interactions = new ArrayList<>(moveToLocation(mouse));
     interactions.add(mouse.createPointerDown(Button.RIGHT.asArg()));
     interactions.add(mouse.createPointerUp(Button.RIGHT.asArg()));
 

File: java/client/src/org/openqa/selenium/interactions/KeyDownAction.java
Patch:
@@ -48,9 +48,8 @@ public void perform() {
 
   @Override
   public List<Interaction> asInteractions(PointerInput mouse, KeyInput keyboard) {
-    ArrayList<Interaction> interactions = new ArrayList<>();
 
-    interactions.addAll(optionallyClickElement(mouse));
+    ArrayList<Interaction> interactions = new ArrayList<>(optionallyClickElement(mouse));
     interactions.add(keyboard.createKeyDown(key.getCodePoint()));
 
     return Collections.unmodifiableList(interactions);

File: java/client/src/org/openqa/selenium/internal/WrapsDriver.java
Patch:
@@ -20,6 +20,7 @@
 /**
  * @deprecated Use {@link org.openqa.selenium.WrapsDriver} instead.
  */
+@Deprecated
 public interface WrapsDriver extends org.openqa.selenium.WrapsDriver {
 
 }

File: java/client/src/org/openqa/selenium/mobile/NetworkConnection.java
Patch:
@@ -45,7 +45,7 @@ public interface NetworkConnection {
    * <p>Giving "Data" the first bit positions in order to give room for the future of enabling
    * specific types of data (Edge / 2G, 3G, 4G, LTE, etc) if the device allows it.
    */
-  public class ConnectionType {
+  class ConnectionType {
 
     public static final ConnectionType WIFI = new ConnectionType(2);
     public static final ConnectionType DATA = new ConnectionType(4);
@@ -120,7 +120,7 @@ public Integer toJson() {
    * @return {@link org.openqa.selenium.mobile.NetworkConnection.ConnectionType} indicating if the
    * device is in Airplane Mode
    */
-  public ConnectionType getNetworkConnection();
+  ConnectionType getNetworkConnection();
 
   /**
    * Set the Connection type Not all connection type combinations are valid for an individual type
@@ -130,6 +130,6 @@ public Integer toJson() {
    * @return {@link org.openqa.selenium.mobile.NetworkConnection.ConnectionType} of what the
    * device's network connection is
    */
-  public ConnectionType setNetworkConnection(ConnectionType type);
+  ConnectionType setNetworkConnection(ConnectionType type);
 
 }

File: java/client/src/org/openqa/selenium/net/EphemeralPortRangeDetector.java
Patch:
@@ -35,11 +35,11 @@ public interface EphemeralPortRangeDetector
    * Returns the first port in the ephemeral range
    * @return The first ephemeral port
    */
-  public int getLowestEphemeralPort();
+  int getLowestEphemeralPort();
   /**
    * Returns the last port that could be searched for free ports
    * @return The first port that may be free
    */
-  public int getHighestEphemeralPort();
+  int getHighestEphemeralPort();
 
 }

File: java/client/src/org/openqa/selenium/remote/BaseAugmenter.java
Patch:
@@ -17,15 +17,12 @@
 
 package org.openqa.selenium.remote;
 
-import static org.openqa.selenium.remote.CapabilityType.HAS_TOUCHSCREEN;
 import static org.openqa.selenium.remote.CapabilityType.ROTATABLE;
 import static org.openqa.selenium.remote.CapabilityType.SUPPORTS_APPLICATION_CACHE;
-import static org.openqa.selenium.remote.CapabilityType.SUPPORTS_FINDING_BY_CSS;
 import static org.openqa.selenium.remote.CapabilityType.SUPPORTS_LOCATION_CONTEXT;
 import static org.openqa.selenium.remote.CapabilityType.SUPPORTS_NETWORK_CONNECTION;
 import static org.openqa.selenium.remote.CapabilityType.SUPPORTS_WEB_STORAGE;
 
-import org.openqa.selenium.Beta;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.remote.html5.AddApplicationCache;

File: java/client/src/org/openqa/selenium/remote/JdkAugmenter.java
Patch:
@@ -106,11 +106,10 @@ protected <X> X create(RemoteWebDriver driver, Map<String, AugmenterProvider> au
 
     InvocationHandler proxyHandler = new JdkHandler<>(driver,
         objectToAugment, augmentationHandlers);
-    X augmentedProxy = (X) Proxy.newProxyInstance(
+    return (X) Proxy.newProxyInstance(
         getClass().getClassLoader(),
         proxiedInterfaces.toArray(new Class<?>[proxiedInterfaces.size()]),
         proxyHandler);
-    return augmentedProxy;
   }
 
   private static class JdkHandler<X> extends AbstractInvocationHandler

File: java/client/src/org/openqa/selenium/remote/http/AbstractHttpCommandCodec.java
Patch:
@@ -343,9 +343,8 @@ private String getParameter(
     SessionId sessionId,
     Map<String, ?> parameters) {
     if ("sessionId".equals(parameterName)) {
-      SessionId id = sessionId;
-      checkArgument(id != null, "Session ID may not be null for command %s", commandName);
-      return id.toString();
+      checkArgument(sessionId != null, "Session ID may not be null for command %s", commandName);
+      return sessionId.toString();
     }
 
     Object value = parameters.get(parameterName);

File: java/client/src/org/openqa/selenium/support/Colors.java
Patch:
@@ -173,7 +173,7 @@ public enum Colors {
 
     private final Color colorValue;
 
-    private Colors(Color colorValue) {
+    Colors(Color colorValue) {
         this.colorValue = colorValue;
     }
 

File: java/client/src/org/openqa/selenium/support/FindAll.java
Patch:
@@ -46,7 +46,7 @@
 public @interface FindAll {
   FindBy[] value();
 
-  public static class FindByBuilder extends AbstractFindByBuilder {
+  class FindByBuilder extends AbstractFindByBuilder {
     public By buildIt(Object annotation, Field field) {
       FindAll findBys = (FindAll) annotation;
       assertValidFindAll(findBys);

File: java/client/src/org/openqa/selenium/support/FindBy.java
Patch:
@@ -76,7 +76,7 @@
 
   String xpath() default "";
 
-  public static class FindByBuilder extends AbstractFindByBuilder {
+  class FindByBuilder extends AbstractFindByBuilder {
     public By buildIt(Object annotation, Field field) {
       FindBy findBy = (FindBy) annotation;
       assertValidFindBy(findBy);

File: java/client/src/org/openqa/selenium/support/FindBys.java
Patch:
@@ -45,7 +45,7 @@
 public @interface FindBys {
   FindBy[] value();
 
-  public static class FindByBuilder extends AbstractFindByBuilder {
+  class FindByBuilder extends AbstractFindByBuilder {
     public By buildIt(Object annotation, Field field) {
       FindBys findBys = (FindBys) annotation;
       assertValidFindBys(findBys);

File: java/client/test/com/thoughtworks/selenium/I18nTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.junit.Test;
 
 import java.io.UnsupportedEncodingException;
+import java.nio.charset.StandardCharsets;
 
 public class I18nTest extends InternalSelenseTestBase {
 
@@ -78,7 +79,7 @@ public void testDangerousLabels() {
   private void verifyText(String expected, String id) throws UnsupportedEncodingException {
     assertTrue(selenium.isTextPresent(expected));
     String actual = selenium.getText(id);
-    byte[] result = actual.getBytes("UTF-8");
+    byte[] result = actual.getBytes(StandardCharsets.UTF_8);
     for (int i = 0; i < result.length; i++) {
       Byte b = new Byte(result[i]);
     }

File: java/client/test/com/thoughtworks/selenium/InternalSelenseTestBase.java
Patch:
@@ -190,7 +190,7 @@ private Capabilities createCapabilities() {
   public ExternalResource addNecessaryJavascriptCommands = new ExternalResource() {
     @Override
     protected void before() {
-      if (selenium == null || !(selenium instanceof WebDriverBackedSelenium)) {
+      if (!(selenium instanceof WebDriverBackedSelenium)) {
         return;
       }
 

File: java/client/test/com/thoughtworks/selenium/corebased/TestCssLocators.java
Patch:
@@ -174,9 +174,7 @@ private boolean isCapableOfAdvancedSelectors(Selenium selenium, boolean isIe) {
     }
 
     if (Boolean.valueOf(isFirefox)) {
-      if (version != null && version.startsWith("3.0")) {
-        return false;
-      }
+      return version == null || !version.startsWith("3.0");
     }
 
     return true;

File: java/client/test/com/thoughtworks/selenium/corebased/TestModalDialog.java
Patch:
@@ -31,7 +31,6 @@ public void testModalDialog() {
     verifyEquals(selenium.getText("changeText"), "before modal dialog");
 
     // TODO(simon): re-enable this test
-    return;
 
     // selenium.click("modal");
     // // selenium.waitForPopup("Modal Dialog Popup", "5000");

File: java/client/test/com/thoughtworks/selenium/webdriven/FastWebDriverBackedSeleniumTest.java
Patch:
@@ -70,7 +70,7 @@ public void openDoesNotPrefixAURLIncludingHttpsProtocol() {
     verify(driver).get("https://a.url/with/protocol.info");
   }
 
-  public static interface WebDriverWithJs extends WebDriver, JavascriptExecutor {
+  public interface WebDriverWithJs extends WebDriver, JavascriptExecutor {
     // empty
   }
 }

File: java/client/test/org/openqa/selenium/ParallelTestRunner.java
Patch:
@@ -24,7 +24,7 @@
  * Utility class for concurrency tests.
  */
 public class ParallelTestRunner {
-  public static interface Worker {
+  public interface Worker {
     void run() throws Exception;
   }
 

File: java/client/test/org/openqa/selenium/environment/webserver/CookieServlet.java
Patch:
@@ -96,7 +96,6 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)
     } else {
       response.getOutputStream().println(
           String.format(RESPONSE_STRING, "Unrecognized action", action));
-      return;
     }
   }
 }

File: java/client/test/org/openqa/selenium/json/JsonTest.java
Patch:
@@ -367,7 +367,7 @@ public void shouldParseCapabilitiesWithLoggingPreferences() {
         "\"server\": \"OFF\"}}",
         CapabilityType.LOGGING_PREFS);
 
-    Capabilities converted = new Json().toType(caps.toString(), Capabilities.class);
+    Capabilities converted = new Json().toType(caps, Capabilities.class);
 
     LoggingPreferences lp =
         (LoggingPreferences) converted.getCapability(CapabilityType.LOGGING_PREFS);

File: java/client/test/org/openqa/selenium/lift/HamcrestWebdriverTestCaseTest.java
Patch:
@@ -83,14 +83,13 @@ public void providesSyntacticSugarMethodNamedInto() {
   }
 
   private HamcrestWebDriverTestCase createTestCase() {
-    HamcrestWebDriverTestCase testcase = new HamcrestWebDriverTestCase() {
+    return new HamcrestWebDriverTestCase() {
 
       @Override
       protected WebDriver createDriver() {
         return mock(WebDriver.class);
       }
     };
-    return testcase;
   }
 
 }

File: java/client/test/org/openqa/selenium/remote/BaseAugmenterTest.java
Patch:
@@ -290,8 +290,8 @@ public WebElement findElementById(String id) {
   }
 
   public interface MagicNumberHolder {
-    public int getMagicNumber();
-    public void setMagicNumber(int number);
+    int getMagicNumber();
+    void setMagicNumber(int number);
   }
 
   public static class ChildRemoteDriver extends RemoteWebDriver implements MagicNumberHolder {

File: java/client/test/org/openqa/selenium/support/pagefactory/AnnotationsTest.java
Patch:
@@ -102,7 +102,7 @@ public class AnnotationsTest {
   @PageFactoryFinder(FindByXXXX.FindByXXXXBuilder.class)
   public @interface FindByXXXX {
 
-    public static class FindByXXXXBuilder extends AbstractFindByBuilder {
+    class FindByXXXXBuilder extends AbstractFindByBuilder {
 
       @Override
       public By buildIt(Object annotation, Field field) {

File: java/client/test/org/openqa/selenium/testing/drivers/WebDriverBuilder.java
Patch:
@@ -133,7 +133,6 @@ private void modifyLogLevel(WebDriver driver) {
       LogLevel level = LogLevel.valueOf(value);
       setLogLevel.invoke(driver, level.getLevel());
     } catch (NoSuchMethodException e) {
-      return;
     } catch (IllegalAccessException | InvocationTargetException e) {
       throw new RuntimeException(e);
     }

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriverBuilder.java
Patch:
@@ -298,7 +298,6 @@ DriverService getDriverService() {
                 try {
                   return bs.build();
                 } catch (Throwable e) {
-                  e.printStackTrace();
                   return null;
                 }
               })

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriverBuilder.java
Patch:
@@ -298,6 +298,7 @@ DriverService getDriverService() {
                 try {
                   return bs.build();
                 } catch (Throwable e) {
+                  e.printStackTrace();
                   return null;
                 }
               })

File: java/server/src/org/openqa/selenium/grid/distributor/local/LocalDistributor.java
Patch:
@@ -121,6 +121,7 @@ public LocalDistributor add(Node node) {
       out.setPrettyPrint(false).write(node);
       span.addTag("node", sb.toString());
 
+      // TODO: We should check to see what happens for duplicate nodes.
       Host host = new Host(node);
       hosts.add(host);
       LOG.info(String.format("Added node %s.", node.getId()));

File: java/client/test/org/openqa/selenium/interactions/BasicKeyboardInterfaceTest.java
Patch:
@@ -169,7 +169,7 @@ public void testThrowsIllegalArgumentExceptionWithNoParameters() {
   public void testThrowsIllegalArgumentExceptionWithNullParameter() {
     driver.get(pages.javascriptPage);
     assertThatExceptionOfType(IllegalArgumentException.class)
-        .isThrownBy(() -> driver.findElement(By.id("keyReporter")).sendKeys(null));
+        .isThrownBy(() -> driver.findElement(By.id("keyReporter")).sendKeys((CharSequence) null));
   }
 
   @Test
@@ -185,7 +185,7 @@ public void testThrowsIllegalArgumentExceptionWithNullInParameters() {
   public void testThrowsIllegalArgumentExceptionWithCharSequenceThatContainsNull() {
     driver.get(pages.javascriptPage);
     assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(
-        () -> driver.findElement(By.id("keyReporter")).sendKeys(new CharSequence[]{"x", null, "y"}));
+        () -> driver.findElement(By.id("keyReporter")).sendKeys("x", null, "y"));
   }
 
   @Test

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -139,7 +139,7 @@ public int score(Capabilities capabilites) {
         return 0;
       }
 
-      int score = 1;
+      int score = 0;
 
       if (BrowserType.FIREFOX.equals(capabilites.getBrowserName())) {
         score++;

File: java/server/src/org/openqa/selenium/grid/server/CommandHandlerServlet.java
Patch:
@@ -57,6 +57,8 @@ protected void service(HttpServletRequest req, HttpServletResponse resp) throws
     HttpRequest request = new ServletRequestWrappingHttpRequest(req);
     HttpResponse response = new ServletResponseWrappingHttpResponse(resp);
 
+    log(String.format("(%s) %s", req.getMethod(), req.getPathInfo()));
+
     Optional<CommandHandler> possibleMatch = routes.match(injector, request);
     if (possibleMatch.isPresent()) {
       possibleMatch.get().execute(request, response);

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -591,7 +591,7 @@ public void testGenerateKeyPressEventEvenWhenElementPreventsDefault() {
     WebElement result = driver.findElement(By.id("result"));
 
     silent.sendKeys("s");
-    assertThat(result.getText().trim()).isEqualTo("");
+    assertThat(result.getText().trim()).isIn("", "mouseover");
   }
 
   @Test

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -107,7 +107,7 @@ protected boolean hasShutdownEndpoint() {
   /**
    * Builder used to configure new {@link GeckoDriverService} instances.
    */
-  @AutoService(GeckoDriverService.Builder.class)
+  @AutoService(FirefoxDriverService.Builder.class)
   public static class Builder extends FirefoxDriverService.Builder<
         GeckoDriverService, GeckoDriverService.Builder> {
 

File: java/client/src/org/openqa/selenium/firefox/xpi/XpiDriverService.java
Patch:
@@ -360,7 +360,7 @@ public static Builder builder() {
     return new Builder();
   }
 
-  @AutoService(XpiDriverService.Builder.class)
+  @AutoService(FirefoxDriverService.Builder.class)
   public static class Builder extends FirefoxDriverService.Builder<XpiDriverService, XpiDriverService.Builder> {
 
     private FirefoxBinary binary = null;

File: java/server/test/org/openqa/selenium/remote/server/CapabilitiesComparatorTest.java
Patch:
@@ -122,7 +122,7 @@ public void shouldPickCorrectBrowser() {
     desired.setBrowserName(BrowserType.FIREFOX);
     assertThat(getBestMatch(desired, list)).isEqualTo(firefox);
 
-    desired.setBrowserName(BrowserType.OPERA);
+    desired.setBrowserName(BrowserType.OPERA_BLINK);
     assertThat(getBestMatch(desired, list)).isEqualTo(opera);
   }
 

File: java/client/test/org/openqa/selenium/chrome/ChromeOptionsFunctionalTest.java
Patch:
@@ -34,9 +34,6 @@
 import java.nio.file.Files;
 import java.util.Base64;
 
-/**
- * Functional tests for {@link ChromeOptions}.
- */
 public class ChromeOptionsFunctionalTest extends JUnit4TestBase {
 
   private static final String EXT_PATH = "third_party/chrome_ext/backspace.crx";

File: java/client/test/org/openqa/selenium/testing/StaticResources.java
Patch:
@@ -48,8 +48,8 @@ static void ensureAvailable() {
         "//javascript/firefox-driver:webdriver_prefs",
         "org/openqa/selenium/firefox/webdriver_prefs.json");
     copy(
-        "//java/client/src/org/openqa/selenium/firefox:webdriver.xpi",
-        "org/openqa/selenium/firefox/webdriver.xpi");
+        "//java/client/src/org/openqa/selenium/firefox/xpi:webdriver.xpi",
+        "org/openqa/selenium/firefox/xpi/webdriver.xpi");
   }
 
   private static void copy(String buildTarget, String copyTo) {

File: java/client/test/org/openqa/selenium/build/InProject.java
Patch:
@@ -45,8 +45,8 @@ public static Path locate(String path) {
     Path dir = Paths.get(".").toAbsolutePath();
     Path pwd = dir;
     while (dir != null && !dir.equals(dir.getParent())) {
-      Path rakefile = dir.resolve("third_party");
-      if (Files.exists(rakefile)) {
+      Path versionFile = dir.resolve("java/version.bzl");
+      if (Files.exists(versionFile)) {
         break;
       }
       dir = dir.getParent();

File: java/client/test/org/openqa/selenium/testing/drivers/WebDriverBuilder.java
Patch:
@@ -85,7 +85,6 @@ static void addShutdownAction(Runnable action) {
       .build();
 
   public static Capabilities getStandardCapabilitiesFor(Browser toBuild) {
-    System.out.println("***** " + toBuild);
     return capabilitySuppliers.getOrDefault(toBuild, ImmutableCapabilities::new).get();
   }
 

File: java/client/test/org/openqa/selenium/testing/InProject.java
Patch:
@@ -38,7 +38,7 @@ public class InProject {
   public static Path locate(String path) {
     Path actualPath = Paths.get(path);
     if (Files.exists(actualPath)) {
-      return actualPath;
+      return actualPath.toAbsolutePath();
     }
 
     // Find the rakefile first

File: java/client/src/org/openqa/selenium/firefox/xpi/XpiDriverService.java
Patch:
@@ -284,7 +284,7 @@ private Optional<Extension> loadCustomExtension() {
   private static Extension loadDefaultExtension() {
     return new ClasspathExtension(
         FirefoxProfile.class,
-        "/" + FirefoxProfile.class.getPackage().getName().replace(".", "/") + "/webdriver.xpi");
+        "/" + XpiDriverService.class.getPackage().getName().replace(".", "/") + "/webdriver.xpi");
   }
 
   /**

File: java/client/test/org/openqa/selenium/testing/DevMode.java
Patch:
@@ -19,7 +19,7 @@
 
 public class DevMode {
   public static boolean isInDevMode() {
-    return isInDevMode("/org/openqa/selenium/firefox/webdriver.xpi");
+    return isInDevMode("/org/openqa/selenium/remote/isDisplayed.js");
   }
 
   public static boolean isInDevMode(String nameOfRequiredResource) {

File: java/client/test/org/openqa/selenium/environment/webserver/JettyAppServer.java
Patch:
@@ -110,8 +110,9 @@ public JettyAppServer(String hostName, int httpPort, int httpsPort) {
 
     handlers = new ContextHandlerCollection();
 
+    Path webSrc = locate("common/src/web");
     ServletContextHandler defaultContext = addResourceHandler(
-        DEFAULT_CONTEXT_PATH, locate("common/src/web"));
+        DEFAULT_CONTEXT_PATH, webSrc);
     ServletContextHandler jsContext = addResourceHandler(
         JS_SRC_CONTEXT_PATH, locate("javascript"));
     addResourceHandler(CLOSURE_CONTEXT_PATH, locate("third_party/closure/goog"));
@@ -124,6 +125,7 @@ public JettyAppServer(String hostName, int httpPort, int httpsPort) {
     defaultContext.setInitParameter("hostname", hostName);
     defaultContext.setInitParameter("port", ""+port);
     defaultContext.setInitParameter("path", TEMP_SRC_CONTEXT_PATH);
+    defaultContext.setInitParameter("webSrc", webSrc.toAbsolutePath().toString());
 
     server.setHandler(handlers);
 

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -204,7 +204,7 @@ public void testCanClickOnALinkThatContainsTextWrappedInASpan() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, travis = true) // TODO: why???
+  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/653")
   public void testCanClickOnALinkThatContainsEmbeddedBlockElements() {
     driver.findElement(By.id("embeddedBlock")).click();
     wait.until(titleIs("XHTML Test Page"));

File: java/client/src/org/openqa/selenium/edge/EdgeDriver.java
Patch:
@@ -22,7 +22,7 @@
 import org.openqa.selenium.remote.service.DriverCommandExecutor;
 
 /**
- * A {@link WebDriver} implementation that controls a Edge browser running on the local machine.
+ * A {@link WebDriver} implementation that controls an Edge browser running on the local machine.
  * This class is provided as a convenience for easily testing the Edge browser. The control server
  * which each instance communicates with will live and die with the instance.
  *
@@ -109,7 +109,7 @@ public EdgeDriver(EdgeDriverService service) {
 
 	  /**
 	   * Creates a new EdgeDriver instance. The {@code capabilities} will be passed to the
-	   * edgedriver service.
+	   * EdgeDriver service.
 	   *
 	   * @param capabilities The capabilities required from the EdgeDriver.
 	   * @see #EdgeDriver(EdgeDriverService, Capabilities)

File: java/server/src/org/openqa/selenium/grid/server/CommandHandlerServlet.java
Patch:
@@ -54,10 +54,11 @@ public CommandHandlerServlet(Routes routes) {
 
   @Override
   protected void service(HttpServletRequest req, HttpServletResponse resp) throws IOException {
-
     HttpRequest request = new ServletRequestWrappingHttpRequest(req);
     HttpResponse response = new ServletResponseWrappingHttpResponse(resp);
 
+    System.out.println(String.format("(%s) %s", request.getMethod(), request.getUri()));
+
     Optional<CommandHandler> possibleMatch = routes.match(injector, request);
     if (possibleMatch.isPresent()) {
       possibleMatch.get().execute(request, response);

File: java/client/src/org/openqa/selenium/remote/JdkAugmenter.java
Patch:
@@ -131,7 +131,6 @@ private JdkHandler(RemoteWebDriver driver, X realInstance,
     public Object handleInvocation(Object proxy, Method method, Object[] args) throws Throwable {
       InterfaceImplementation handler = handlers.get(method);
       try {
-        System.out.println("Method: " + method + "all handlers: " + handlers.keySet());
         if (null == handler) {
           return method.invoke(realInstance, args);
         }

File: java/client/src/org/openqa/selenium/chrome/ChromeDriver.java
Patch:
@@ -136,7 +136,7 @@ public ChromeDriver(ChromeDriverService service) {
 
   /**
    * Creates a new ChromeDriver instance. The {@code capabilities} will be passed to the
-   * chromedriver service.
+   * ChromeDriver service.
    *
    * @param capabilities The capabilities required from the ChromeDriver.
    * @see #ChromeDriver(ChromeDriverService, Capabilities)
@@ -230,7 +230,7 @@ public ConnectionType setNetworkConnection(ConnectionType type) {
   /**
    * Launches Chrome app specified by id.
    *
-   * @param id chrome app id
+   * @param id Chrome app id.
    */
   public void launchApp(String id) {
     execute(ChromeDriverCommand.LAUNCH_APP, ImmutableMap.of("id", id));

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -237,7 +237,7 @@ public void testClicksASurroundingStrongTag() {
 
   @Test
   @Ignore(IE)
-  @Ignore(MARIONETTE)
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1502636")
   @NotYetImplemented(SAFARI)
   public void testCanClickAnImageMapArea() {
     driver.get(appServer.whereIs("click_tests/google_map.html"));

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -499,7 +499,7 @@ public void testShouldBeAbleToReturnADateObject() {
   @Ignore(CHROME)
   @Ignore(IE)
   @NotYetImplemented(SAFARI)
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/904")
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1502656")
   public void shouldReturnDocumentElementIfDocumentIsReturned() {
     driver.get(pages.simpleTestPage);
 

File: java/client/test/org/openqa/selenium/testing/drivers/WebDriverBuilder.java
Patch:
@@ -63,8 +63,8 @@ static void addShutdownAction(Runnable action) {
           .setHeadless(Boolean.parseBoolean(System.getProperty("webdriver.firefox.headless", "false"))))
       .put(Browser.ie, () -> {
         InternetExplorerOptions options = new InternetExplorerOptions();
-        if (Boolean.getBoolean("selenium.browser.native_events")) {
-          options.enableNativeEvents();
+        if (Boolean.getBoolean("selenium.ie.disable_native_events")) {
+          options.disableNativeEvents();
         }
         return options;
       })

File: java/client/src/org/openqa/selenium/io/TemporaryFilesystem.java
Patch:
@@ -53,6 +53,7 @@ public static TemporaryFilesystem getDefaultTmpFS() {
 
   public static void setTemporaryDirectory(File directory) {
     Lock writeLock = lock.writeLock();
+    writeLock.lock();
     try {
       instance = new TemporaryFilesystem(directory);
     } finally {

File: java/client/src/org/openqa/selenium/json/Json.java
Patch:
@@ -64,7 +64,7 @@ public <T> T toType(String source, Type typeOfT, PropertySetting setter) {
   }
 
   public JsonInput newInput(Reader from) throws UncheckedIOException {
-    return new JsonInput(from, fromJson);
+    return new JsonInput(from, fromJson, PropertySetting.BY_NAME);
   }
 
   public JsonOutput newOutput(Appendable to) throws UncheckedIOException {

File: java/client/src/org/openqa/selenium/json/JsonInput.java
Patch:
@@ -39,10 +39,11 @@ public class JsonInput implements Closeable {
   // figuring out whether we're expecting a NAME properly.
   private Deque<Container> stack = new ArrayDeque<>();
 
-  JsonInput(Readable source, JsonTypeCoercer coercer) {
+  JsonInput(Readable source, JsonTypeCoercer coercer, PropertySetting setter) {
     this.source = Objects.requireNonNull(source);
     this.coercer = Objects.requireNonNull(coercer);
     this.input = new Input(source);
+    this.setter = Objects.requireNonNull(setter);
   }
 
   public JsonInput propertySetting(PropertySetting setter) {

File: java/client/test/org/openqa/selenium/json/JsonInputTest.java
Patch:
@@ -29,6 +29,7 @@
 import static org.openqa.selenium.json.JsonType.START_COLLECTION;
 import static org.openqa.selenium.json.JsonType.START_MAP;
 import static org.openqa.selenium.json.JsonType.STRING;
+import static org.openqa.selenium.json.PropertySetting.BY_NAME;
 
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.ImmutableMap;
@@ -201,7 +202,7 @@ public void nestedMapIsFine() {
   public void shouldDecodeUnicodeEscapesProperly() {
     String raw = "{\"text\": \"\\u003Chtml\"}";
 
-    try (JsonInput in = new JsonInput(new StringReader(raw), new JsonTypeCoercer())) {
+    try (JsonInput in = new JsonInput(new StringReader(raw), new JsonTypeCoercer(), BY_NAME)) {
       Map<String, Object> map = in.read(MAP_TYPE);
 
       assertThat(map.get("text")).isEqualTo("<html");
@@ -211,6 +212,6 @@ public void shouldDecodeUnicodeEscapesProperly() {
   private JsonInput newInput(Object toParse) {
     String raw = new Gson().toJson(toParse);
     StringReader reader = new StringReader(raw);
-    return new JsonInput(reader, new JsonTypeCoercer());
+    return new JsonInput(reader, new JsonTypeCoercer(), BY_NAME);
   }
 }

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -317,7 +317,7 @@ public void testSwitchingToMissingAlertInAClosedWindowThrows() {
   public void testPromptShouldUseDefaultValueIfNoKeysSent() {
     driver.get(promptPage("This is a default value"));
 
-    driver.findElement(By.id("prompt")).click();
+    wait.until(presenceOfElementLocated(By.id("prompt"))).click();
     Alert alert = wait.until(alertIsPresent());
     alert.accept();
 

File: java/client/src/org/openqa/selenium/ie/InternetExplorerOptions.java
Patch:
@@ -102,7 +102,7 @@ public InternetExplorerOptions() {
   }
 
   public InternetExplorerOptions(Capabilities source) {
-    super();
+    this();
 
     merge(source);
   }

File: java/client/test/org/openqa/selenium/ChildrenFindingTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
-import static org.openqa.selenium.testing.Driver.CHROME;
 import static org.openqa.selenium.testing.Driver.SAFARI;
 
 import org.junit.Test;
@@ -180,7 +179,6 @@ public void testShouldFindChildElementsById() {
   }
 
   @Test
-  @NotYetImplemented(value = CHROME, reason = "Need to release atoms fix from #4351")
   public void testShouldNotReturnRootElementWhenFindingChildrenById() {
     driver.get(pages.nestedPage);
     WebElement parent = driver.findElement(By.id("test_id"));

File: java/server/src/org/openqa/selenium/grid/distributor/Distributor.java
Patch:
@@ -41,7 +41,7 @@
  * are determined.
  * <p>
  * This class responds to the following URLs:
- * <table>
+ * <table summary="HTTP commands the Distributor understands">
  * <tr>
  *   <th>Verb</th>
  *   <th>URL Template</th>

File: java/server/src/org/openqa/selenium/grid/node/Node.java
Patch:
@@ -41,7 +41,7 @@
  * only reachable via localhost and a network. Or they could be something else entirely.
  * <p>
  * This class responds to the following URLs:
- * <table>
+ * <table summary="HTTP commands the Node understands">
  * <tr>
  *   <th>Verb</th>
  *   <th>URL Template</th>

File: java/server/src/org/openqa/selenium/grid/sessionmap/SessionMap.java
Patch:
@@ -38,7 +38,7 @@
  * running.
  * <p>
  * This class responds to the following URLs:
- * <table>
+ * <table summary="HTTP commands the SessionMap understands">
  * <tr>
  *   <th>Verb</th>
  *   <th>URL Template</th>

File: java/server/src/org/openqa/selenium/remote/server/jmx/MBean.java
Patch:
@@ -200,7 +200,7 @@ private ObjectName generateObjectName(Object bean) {
         try {
           return (ObjectName) bean.getClass().getMethod("getObjectName").invoke(bean);
         } catch (IllegalAccessException|InvocationTargetException|NoSuchMethodException e) {
-          return new ObjectName(String.format("%s:%s",
+          return new ObjectName(String.format("%s:type=%s",
                                               bean.getClass().getPackage().getName(),
                                               bean.getClass().getSimpleName()));
         }

File: java/server/src/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumServlet.java
Patch:
@@ -75,6 +75,7 @@ public void onStop(ActiveSession session) {
         PROCESSORS.remove(session.getId());
       }
     };
+    sessions.addListener(listener);
 
     this.pipeline = NewSessionPipeline.builder().add(new ActiveSessionFactory()).create();
   }

File: java/server/src/org/openqa/selenium/remote/server/handler/ChangeUrl.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.openqa.selenium.remote.server.handler;
 
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;
 
-public class ChangeUrl extends WebDriverHandler<Void> implements JsonParametersAware {
+public class ChangeUrl extends WebDriverHandler<Void> {
 
   private volatile String url;
 
@@ -32,6 +31,7 @@ public ChangeUrl(Session session) {
 
   @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     url = (String) allParameters.get("url");
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/ConfigureTimeout.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.remote.server.handler;
 
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Arrays;
@@ -28,7 +27,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
-public class ConfigureTimeout extends WebDriverHandler<Void> implements JsonParametersAware {
+public class ConfigureTimeout extends WebDriverHandler<Void> {
 
   private static final String IMPLICIT = "implicit";
   private static final String PAGE_LOAD = "page load";
@@ -41,7 +40,9 @@ public ConfigureTimeout(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     String type = (String) allParameters.get("type");
 
     if (type != null) {

File: java/server/src/org/openqa/selenium/remote/server/handler/ExecuteAsyncScript.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.remote.server.handler;
 
 import org.openqa.selenium.JavascriptExecutor;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.internal.ArgumentConverter;
 import org.openqa.selenium.remote.server.handler.internal.ResultConverter;
@@ -27,16 +26,17 @@
 import java.util.List;
 import java.util.Map;
 
-public class ExecuteAsyncScript extends WebDriverHandler<Object>
-    implements JsonParametersAware {
+public class ExecuteAsyncScript extends WebDriverHandler<Object> {
   private volatile String script;
   private final List<Object> args = new ArrayList<>();
 
   public ExecuteAsyncScript(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     script = (String) allParameters.get("script");
 
     List<?> params = (List<?>) allParameters.get("args");

File: java/server/src/org/openqa/selenium/remote/server/handler/ExecuteScript.java
Patch:
@@ -21,7 +21,6 @@
 import com.google.common.collect.Lists;
 
 import org.openqa.selenium.JavascriptExecutor;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.internal.ArgumentConverter;
 import org.openqa.selenium.remote.server.handler.internal.ResultConverter;
@@ -30,15 +29,17 @@
 import java.util.List;
 import java.util.Map;
 
-public class ExecuteScript extends WebDriverHandler<Object> implements JsonParametersAware {
+public class ExecuteScript extends WebDriverHandler<Object> {
   private volatile String script;
   private volatile List<Object> args = new ArrayList<>();
 
   public ExecuteScript(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     script = (String) allParameters.get("script");
 
     List<?> params = (List<?>) allParameters.get("args");

File: java/server/src/org/openqa/selenium/remote/server/handler/FindChildElement.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.openqa.selenium.By;
 import org.openqa.selenium.WebElement;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;

File: java/server/src/org/openqa/selenium/remote/server/handler/FindChildElements.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.openqa.selenium.By;
 import org.openqa.selenium.WebElement;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.LinkedHashSet;

File: java/server/src/org/openqa/selenium/remote/server/handler/FindElement.java
Patch:
@@ -24,21 +24,22 @@
 import org.openqa.selenium.By;
 import org.openqa.selenium.NoSuchElementException;
 import org.openqa.selenium.WebElement;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;
 import java.util.logging.Logger;
 
-public class FindElement extends WebDriverHandler<Map<String, String>> implements JsonParametersAware {
+public class FindElement extends WebDriverHandler<Map<String, String>> {
   private static Logger log = Logger.getLogger(FindElement.class.getName());
   private volatile By by;
 
   public FindElement(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     by = newBySelector().pickFromJsonParameters(allParameters);
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/FindElements.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.openqa.selenium.By;
 import org.openqa.selenium.WebElement;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.LinkedHashSet;
@@ -30,16 +29,17 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-public class FindElements extends WebDriverHandler<Set<Map<String, String>>>
-    implements JsonParametersAware {
+public class FindElements extends WebDriverHandler<Set<Map<String, String>>> {
 
   private volatile By by;
 
   public FindElements(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     by = newBySelector().pickFromJsonParameters(allParameters);
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/GetCurrentUrl.java
Patch:
@@ -21,7 +21,6 @@
 
 public class GetCurrentUrl extends WebDriverHandler<String> {
 
-
   public GetCurrentUrl(Session session) {
     super(session);
   }

File: java/server/src/org/openqa/selenium/remote/server/handler/GetElementRect.java
Patch:
@@ -33,7 +33,6 @@ public Rectangle call() throws Exception {
     return element.getRect();
   }
 
-
   @Override
   public String toString() {
     return String.format("[get element rect: %s]", getElementAsString());

File: java/server/src/org/openqa/selenium/remote/server/handler/GetElementSize.java
Patch:
@@ -33,7 +33,6 @@ public Dimension call() throws Exception {
     return element.getSize();
   }
 
-
   @Override
   public String toString() {
     return String.format("[get element size: %s]", getElementAsString());

File: java/server/src/org/openqa/selenium/remote/server/handler/ImeActivateEngine.java
Patch:
@@ -17,13 +17,11 @@
 
 package org.openqa.selenium.remote.server.handler;
 
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;
 
-
-public class ImeActivateEngine extends WebDriverHandler<Void> implements JsonParametersAware {
+public class ImeActivateEngine extends WebDriverHandler<Void> {
   private String engine = null;
 
   public ImeActivateEngine(Session session) {
@@ -32,6 +30,7 @@ public ImeActivateEngine(Session session) {
 
   @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     engine = (String) allParameters.get("engine");
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/ImplicitlyWait.java
Patch:
@@ -18,21 +18,22 @@
 package org.openqa.selenium.remote.server.handler;
 
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
-public class ImplicitlyWait extends WebDriverHandler<Void> implements JsonParametersAware {
+public class ImplicitlyWait extends WebDriverHandler<Void> {
 
   private volatile long millis;
 
   public ImplicitlyWait(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     try {
       millis = ((Number) allParameters.get("ms")).longValue();
     } catch (ClassCastException ex) {

File: java/server/src/org/openqa/selenium/remote/server/handler/SetAlertText.java
Patch:
@@ -17,19 +17,20 @@
 
 package org.openqa.selenium.remote.server.handler;
 
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;
 
-public class SetAlertText extends WebDriverHandler<Void> implements JsonParametersAware {
+public class SetAlertText extends WebDriverHandler<Void> {
   private String text;
 
   public SetAlertText(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     if (allParameters.containsKey("text")) {
       text = (String) allParameters.get("text");
     } else {

File: java/server/src/org/openqa/selenium/remote/server/handler/SetScriptTimeout.java
Patch:
@@ -18,21 +18,22 @@
 package org.openqa.selenium.remote.server.handler;
 
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
-public class SetScriptTimeout extends WebDriverHandler<Void> implements JsonParametersAware {
+public class SetScriptTimeout extends WebDriverHandler<Void> {
 
   private volatile long millis;
 
   public SetScriptTimeout(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     try {
       millis = ((Number) allParameters.get("ms")).longValue();
     } catch (ClassCastException ex) {

File: java/server/src/org/openqa/selenium/remote/server/handler/SetWindowPosition.java
Patch:
@@ -19,20 +19,21 @@
 
 import org.openqa.selenium.Point;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;
 
-public class SetWindowPosition extends WebDriverHandler<Void> implements JsonParametersAware {
+public class SetWindowPosition extends WebDriverHandler<Void> {
 
   private Point position;
 
   public SetWindowPosition(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     int x, y;
     try {
       x = ((Number) allParameters.get("x")).intValue();

File: java/server/src/org/openqa/selenium/remote/server/handler/SetWindowSize.java
Patch:
@@ -19,20 +19,21 @@
 
 import org.openqa.selenium.Dimension;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;
 
-public class SetWindowSize extends WebDriverHandler<Void> implements JsonParametersAware {
+public class SetWindowSize extends WebDriverHandler<Void> {
 
   private Dimension size;
 
   public SetWindowSize(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     int width, height;
     try {
       width = ((Number) allParameters.get("width")).intValue();

File: java/server/src/org/openqa/selenium/remote/server/handler/W3CActions.java
Patch:
@@ -24,13 +24,11 @@
 import org.openqa.selenium.remote.ErrorHandler;
 import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.remote.Response;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;
 
-
-public class W3CActions extends WebDriverHandler<Void> implements JsonParametersAware {
+public class W3CActions extends WebDriverHandler<Void> {
 
   private Map<String, Object> allParameters;
 
@@ -40,6 +38,7 @@ public W3CActions(Session session) {
 
   @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     this.allParameters = allParameters;
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/WebElementHandler.java
Patch:
@@ -18,12 +18,11 @@
 package org.openqa.selenium.remote.server.handler;
 
 import org.openqa.selenium.WebElement;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Map;
 
-public abstract class WebElementHandler<T> extends WebDriverHandler<T> implements JsonParametersAware {
+public abstract class WebElementHandler<T> extends WebDriverHandler<T> {
   private volatile String elementId;
 
   protected WebElementHandler(Session session) {
@@ -32,6 +31,7 @@ protected WebElementHandler(Session session) {
 
   @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     elementId = (String) allParameters.get("id");
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/interactions/SendKeyToActiveElement.java
Patch:
@@ -19,15 +19,14 @@
 
 import org.openqa.selenium.interactions.HasInputDevices;
 import org.openqa.selenium.interactions.Keyboard;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.WebDriverHandler;
 
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
-public class SendKeyToActiveElement extends WebDriverHandler<Void> implements JsonParametersAware {
+public class SendKeyToActiveElement extends WebDriverHandler<Void> {
 
   private final List<String> keys = new ArrayList<>();
 
@@ -38,6 +37,7 @@ public SendKeyToActiveElement(Session session) {
   @SuppressWarnings({"unchecked"})
   @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     // TODO: merge this code with the code in the SendKeys handler.
     List<String> rawKeys = (List<String>) allParameters.get("value");
     keys.addAll(rawKeys);

File: java/server/src/org/openqa/selenium/remote/server/handler/mobile/SetNetworkConnection.java
Patch:
@@ -18,14 +18,13 @@
 package org.openqa.selenium.remote.server.handler.mobile;
 
 import org.openqa.selenium.mobile.NetworkConnection.ConnectionType;
-import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.WebDriverHandler;
 import org.openqa.selenium.remote.server.handler.html5.Utils;
 
 import java.util.Map;
 
-public class SetNetworkConnection extends WebDriverHandler<Number> implements JsonParametersAware {
+public class SetNetworkConnection extends WebDriverHandler<Number> {
   private volatile ConnectionType type;
 
   public SetNetworkConnection(Session session) {
@@ -35,6 +34,7 @@ public SetNetworkConnection(Session session) {
   @SuppressWarnings("unchecked")
   @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
+    super.setJsonParameters(allParameters);
     Map<String, Object> parameters = (Map<String, Object>)allParameters.get("parameters");
     Number bitmask = (Number) parameters.get("type");
     type = new ConnectionType(bitmask.intValue());

File: java/client/test/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -84,7 +84,7 @@ public void testShouldGetCookieByName() {
   public void testShouldBeAbleToAddCookie() {
     String key = generateUniqueKey();
     String value = "foo";
-    Cookie cookie = new Cookie.Builder(key, value).domain("comp1").build();
+    Cookie cookie = new Cookie.Builder(key, value).domain(domainHelper.getHostName()).build();
     assertCookieIsNotPresentWithName(key);
 
     driver.manage().addCookie(cookie);

File: java/client/test/org/openqa/selenium/firefox/FirefoxProfileTest.java
Patch:
@@ -187,7 +187,7 @@ public void shouldInstallWebExtensionFromDirectory() throws IOException {
   public void shouldInstallExtensionUsingClasspath() {
     profile.addExtension(SynthesizedFirefoxDriver.class, FIREBUG_RESOURCE_PATH);
     File profileDir = profile.layoutOnDisk();
-    File extensionDir = new File(profileDir, "extensions/firebug@software.joehewitt.com");
+    File extensionDir = new File(profileDir, "extensions/firebug@software.joehewitt.com.xpi");
     assertThat(extensionDir).exists();
   }
 

File: java/client/test/org/openqa/selenium/BuckBuild.java
Patch:
@@ -67,6 +67,7 @@ public Path go() throws IOException {
 
     ImmutableList<String> command = builder.build();
     CommandLine commandLine = new CommandLine(command.toArray(new String[0]));
+    commandLine.setWorkingDirectory(projectRoot.toAbsolutePath().toString());
     commandLine.copyOutputTo(System.err);
     commandLine.execute();
 
@@ -84,6 +85,7 @@ private Path findOutput(Path projectRoot) throws IOException {
 
     ImmutableList<String> command = builder.build();
     CommandLine commandLine = new CommandLine(command.toArray(new String[command.size()]));
+    commandLine.setWorkingDirectory(projectRoot.toAbsolutePath().toString());
     commandLine.copyOutputTo(System.err);
     commandLine.execute();
 

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -97,7 +97,7 @@ private void addExtraServlets() {
     if (extraServlets != null && extraServlets.size() > 0) {
       for (String path : extraServlets.keySet()) {
         // This ugly hack allows people to keep adding the display help servlet.
-        if (DisplayHelpServlet.class.equals(extraServlets.get(path))) {
+        if ("/*".equals(path) && DisplayHelpServlet.class.equals(extraServlets.get(path))) {
           continue;
         }
 

File: java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java
Patch:
@@ -82,7 +82,7 @@ public void testSetExtraServlets() throws Exception {
 
     // there should be three servlets on the remote's map -- The resource servlet, the
     // help servlet, and the one we added above.
-    assertEquals(5, remote.getNodeServlets().size());
+    assertEquals(4, remote.getNodeServlets().size());
     assertEquals(ResourceServlet.class, remote.getNodeServlets().get("/resources/*"));
     assertEquals(DisplayHelpServlet.class,
                  remote.getNodeServlets().get("/extra/DisplayHelpServlet/*"));
@@ -92,7 +92,7 @@ public void testSetExtraServlets() throws Exception {
     remote.startRemoteServer(); // does not actually start anything.
 
     // verify the expected extra servlets also made it to the server instance
-    assertEquals(5, ((DummyGridNodeServer) server).extraServlets.size());
+    assertEquals(4, ((DummyGridNodeServer) server).extraServlets.size());
     assertEquals(ResourceServlet.class,
                  ((DummyGridNodeServer) server).extraServlets.get("/resources/*"));
     assertEquals(DisplayHelpServlet.class,

File: java/client/src/org/openqa/selenium/json/Json.java
Patch:
@@ -58,6 +58,8 @@ public <T> T toType(String source, Type typeOfT, PropertySetting setter) {
     try (StringReader reader = new StringReader(source);
          JsonInput json = newInput(reader)) {
       return fromJson.coerce(json, typeOfT, setter);
+    } catch (JsonException e) {
+      throw new JsonException("Unable to parse: " + source, e);
     }
   }
 

File: java/server/src/org/openqa/selenium/grid/session/remote/ActiveSessionCommandExecutor.java
Patch:
@@ -53,7 +53,9 @@ public Response execute(Command command) throws IOException {
       return response;
     }
 
-    HttpRequest request = session.getUpstreamDialect().getCommandCodec().encode(command);
+    // The command is about to be sent to the session, which expects it to be
+    // encoded as if it has come from the downstream end, not the upstream end.
+    HttpRequest request = session.getDownstreamDialect().getCommandCodec().encode(command);
 
     HttpResponse httpResponse = new HttpResponse();
     session.execute(request, httpResponse);

File: java/client/test/org/openqa/selenium/remote/RemoteClientTests.java
Patch:
@@ -30,6 +30,7 @@
     ProtocolHandshakeTest.class,
     RemoteLogsTest.class,
     RemoteWebDriverInitializationTest.class,
+    RemoteWebDriverUnitTest.class,
     W3CHandshakeResponseTest.class
 })
 public class RemoteClientTests {

File: java/client/test/org/openqa/selenium/testing/drivers/WebDriverBuilder.java
Patch:
@@ -100,7 +100,6 @@ public WebDriver get(Capabilities desiredCapabilities) {
             new GridSupplier(desiredCaps),
             new RemoteSupplier(desiredCaps),
             new TestInternetExplorerSupplier(desiredCaps),
-            new ReflectionBackedDriverSupplier(desiredCaps),
             new DefaultDriverSupplier(desiredCaps))
         .map(Supplier::get)
         .filter(Objects::nonNull)

File: java/client/test/org/openqa/selenium/SessionHandlingTest.java
Patch:
@@ -52,7 +52,6 @@ public void callingQuitAfterClosingTheLastWindowIsANoOp() {
   @NoDriverAfterTest
   @Test
   @Ignore(value = FIREFOX)
-  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/689")
   public void callingAnyOperationAfterClosingTheLastWindowShouldThrowAnException() {
     driver.close();
     sleepTight(3000);

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -213,7 +213,7 @@ public boolean isMappableError(Throwable rootCause) {
   // exception to a W3C state, this KnownError provides the default exception and Json Wire Protocol
   // status to send.
   private static final ImmutableSet<KnownError> KNOWN_ERRORS = ImmutableSet.<KnownError>builder()
-    .add(new KnownError(ASYNC_SCRIPT_TIMEOUT, "script timeout", 408, ScriptTimeoutException.class, true, true))
+    .add(new KnownError(ASYNC_SCRIPT_TIMEOUT, "script timeout", 500, ScriptTimeoutException.class, true, true))
     .add(new KnownError(ELEMENT_CLICK_INTERCEPTED, "element click intercepted", 400, ElementClickInterceptedException.class, true, true))
     .add(new KnownError(ELEMENT_NOT_SELECTABLE, "element not selectable", 400, ElementNotSelectableException.class, true, true))
     .add(new KnownError(ELEMENT_NOT_INTERACTABLE, "element not interactable", 400, ElementNotInteractableException.class, true, true))
@@ -239,7 +239,7 @@ public boolean isMappableError(Throwable rootCause) {
     .add(new KnownError(NO_SUCH_WINDOW, "no such window", 404, NoSuchWindowException.class, true, true))
     .add(new KnownError(SESSION_NOT_CREATED, "session not created", 500, SessionNotCreatedException.class ,true, true))
     .add(new KnownError(STALE_ELEMENT_REFERENCE, "stale element reference", 404, StaleElementReferenceException.class, true, true))
-    .add(new KnownError(TIMEOUT, "timeout", 408, TimeoutException.class, true, true))
+    .add(new KnownError(TIMEOUT, "timeout", 500, TimeoutException.class, true, true))
     .add(new KnownError(XPATH_LOOKUP_ERROR, "invalid selector", 400, InvalidSelectorException.class, false, false))
     .add(new KnownError(UNABLE_TO_CAPTURE_SCREEN, "unable to capture screen", 500, ScreenshotException.class, true, true))
     .add(new KnownError(UNABLE_TO_SET_COOKIE, "unable to set cookie", 500, UnableToSetCookieException.class, true, true))

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -168,8 +168,8 @@ public GridNodeConfiguration() {
   public GridNodeConfiguration(NodeJsonConfiguration jsonConfig) {
     super(jsonConfig);
     role = ROLE;
-    capabilities = ofNullable(jsonConfig.getCapabilities())
-        .orElse(new ArrayList<>(DEFAULT_CONFIG_FROM_JSON.getCapabilities()));
+    capabilities = new ArrayList<>(ofNullable(jsonConfig.getCapabilities())
+                                       .orElse(DEFAULT_CONFIG_FROM_JSON.getCapabilities()));
     maxSession = ofNullable(jsonConfig.getMaxSession())
         .orElse(DEFAULT_CONFIG_FROM_JSON.getMaxSession());
     register = ofNullable(jsonConfig.getRegister())

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -169,7 +169,7 @@ public GridNodeConfiguration(NodeJsonConfiguration jsonConfig) {
     super(jsonConfig);
     role = ROLE;
     capabilities = ofNullable(jsonConfig.getCapabilities())
-        .orElse(DEFAULT_CONFIG_FROM_JSON.getCapabilities());
+        .orElse(new ArrayList<>(DEFAULT_CONFIG_FROM_JSON.getCapabilities()));
     maxSession = ofNullable(jsonConfig.getMaxSession())
         .orElse(DEFAULT_CONFIG_FROM_JSON.getMaxSession());
     register = ofNullable(jsonConfig.getRegister())

File: java/client/src/org/openqa/selenium/json/StaticInitializerCoercer.java
Patch:
@@ -43,7 +43,7 @@ public BiFunction<JsonInput, PropertySetting, Object> apply(Type type) {
     fromJson.setAccessible(true);
 
     return (jsonInput, setting) -> {
-      Object obj = jsonInput.read(fromJson.getParameterTypes()[0]);
+      Object obj = jsonInput.read(fromJson.getGenericParameterTypes()[0]);
       if (obj == null) {
         throw new JsonException("Unable to read value to convert for " + type);
       }

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -118,11 +118,10 @@ public Map<String, Object> toJson() {
   /**
    * Create an object from a registration request formatted as a json string.
    */
-  public static RegistrationRequest fromJson(String jsonString) throws JsonException {
+  public static RegistrationRequest fromJson(Map<String, Object> raw) throws JsonException {
     // If we could, we'd just get Json to coerce this for us, but that would lead to endless
     // recursion as the first thing it would do would be to call this very method. *sigh*
     Json json = new Json();
-    Map<String, Object> raw = json.toType(jsonString, MAP_TYPE);
     RegistrationRequest request = new RegistrationRequest();
 
     if (raw.get("name") instanceof String) {

File: java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java
Patch:
@@ -97,7 +97,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
       considerV2Json(registrationRequest.getConfiguration(), json);
     } else {
       // Se3 compatible request.
-      registrationRequest = RegistrationRequest.fromJson(requestJsonString);
+      registrationRequest = RegistrationRequest.fromJson(json);
     }
 
     final RemoteProxy proxy = BaseRemoteProxy.getNewInstance(registrationRequest, getRegistry());

File: java/server/test/org/openqa/grid/common/RegistrationRequestTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.junit.Assert.assertNotSame;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertSame;
+import static org.openqa.selenium.json.Json.MAP_TYPE;
 
 import org.junit.Assume;
 import org.junit.Test;
@@ -70,7 +71,7 @@ public void testToJson() {
 
     String json = new Json().toJson(req.toJson());
 
-    RegistrationRequest req2 = RegistrationRequest.fromJson(json);
+    RegistrationRequest req2 = RegistrationRequest.fromJson(new Json().toType(json, MAP_TYPE));
 
     assertEquals(req.getName(), req2.getName());
     assertEquals(req.getDescription(), req2.getDescription());

File: java/client/test/org/openqa/selenium/html5/SessionStorageTest.java
Patch:
@@ -72,6 +72,8 @@ public void testSessionStorageKeySet() {
 
   @Test
   public void testClearSessionStorage() {
+    driver.get(pages.html5Page);
+
     SessionStorage session = ((WebStorage) driver).getSessionStorage();
     session.setItem("FOO1", "BAR1");
     session.setItem("FOO2", "BAR2");

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -46,7 +46,6 @@
 
 import java.util.Set;
 
-@Ignore(value = CHROME, reason = "https://bugs.chromium.org/p/chromedriver/issues/detail?id=1500")
 public class AlertsTest extends JUnit4TestBase {
 
   @After

File: java/client/src/org/openqa/selenium/WebDriverInfo.java
Patch:
@@ -4,7 +4,7 @@
 
 /**
  * Describes, in general terms, a webdriver instance. This allows services to query the system at
- * run time and offer instances of particular {@link WebDriver} subclasses should they be availble.
+ * run time and offer instances of particular {@link WebDriver} subclasses should they be available.
  */
 @Beta
 public interface WebDriverInfo {

File: java/client/src/org/openqa/selenium/Keys.java
Patch:
@@ -147,8 +147,6 @@ public String toString() {
    * Note: When the low-level webdriver key handlers see Keys.NULL, active modifier keys
    * (CTRL/ALT/SHIFT/etc) release via a keyup event.
    *
-   * Issue: http://code.google.com/p/webdriver/issues/detail?id=79
-   *
    * @param value characters to send
    * @return String representation of the char sequence
    */

File: java/client/test/com/thoughtworks/selenium/corebased/TestTable.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 
 public class TestTable extends InternalSelenseTestBase {
-  /* See http://code.google.com/p/selenium/issues/detail?id=2286 */
+  /* See https://github.com/SeleniumHQ/selenium-google-code-issue-archive/issues/2255 */
   @Test @Ignore
   public void getValueFramTableTwiceInARowShouldWork() {
     selenium.open("../tests/html/test_table.html");

File: java/client/test/org/openqa/selenium/ByTest.java
Patch:
@@ -152,7 +152,7 @@ public void innerClassesArePublicSoThatTheyCanBeReusedElsewhere() {
     assertThat(new ByPartialLinkText("a").toString()).isEqualTo("By.partialLinkText: a");
   }
 
-  // See http://code.google.com/p/selenium/issues/detail?id=2917
+  // See https://github.com/SeleniumHQ/selenium-google-code-issue-archive/issues/2917
   @Test
   public void testHashCodeDoesNotFallIntoEndlessRecursion() {
     By locator = new By() {

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -212,7 +212,7 @@ public void testCanClickOnALinkThatContainsTextWrappedInASpan() {
   @Ignore(value = MARIONETTE, travis = true) // TODO: why???
   public void testCanClickOnALinkThatContainsEmbeddedBlockElements() {
     assumeFalse(
-        "Fails on Android phones: https://code.google.com/p/chromedriver/issues/detail?id=1022",
+        "Fails on Android phones: https://bugs.chromium.org/p/chromedriver/issues/detail?id=1022",
         isChrome(driver) && getEffectivePlatform(driver).is(ANDROID));
     driver.findElement(By.id("embeddedBlock")).click();
     wait.until(titleIs("XHTML Test Page"));
@@ -225,7 +225,7 @@ public void testCanClickOnAnElementEnclosedInALink() {
     wait.until(titleIs("XHTML Test Page"));
   }
 
-  // See http://code.google.com/p/selenium/issues/attachmentText?id=2700
+  // See https://github.com/SeleniumHQ/selenium-google-code-issue-archive/issues/2700
   @Test
   public void testShouldBeAbleToClickOnAnElementInTheViewport() {
     String url = appServer.whereIs("click_out_of_bounds.html");

File: java/client/test/org/openqa/selenium/ErrorsTest.java
Patch:
@@ -27,9 +27,6 @@
 public class ErrorsTest extends JUnit4TestBase {
 
   /**
-   * Regression test for Selenium RC issue 363.
-   * http://code.google.com/p/selenium/issues/detail?id=363
-   * <p/>
    * This will trivially pass on browsers that do not support the onerror handler (e.g. Internet
    * Explorer).
    */

File: java/client/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -517,7 +517,7 @@ public void testShouldNotSwitchMagicallyToTheTopWindow() {
   @NoDriverAfterTest // Subsequent tests sometimes fail on Firefox.
   @Test
   public void testGetShouldSwitchToDefaultContext() {
-    // Fails on Chrome 44 (and higher?) https://code.google.com/p/chromedriver/issues/detail?id=1106
+    // Fails on Chrome 44 (and higher?) https://bugs.chromium.org/p/chromedriver/issues/detail?id=1106
     assumeFalse(
         "chrome".equals(((HasCapabilities) driver).getCapabilities().getBrowserName())
         && "44".compareTo(((HasCapabilities) driver).getCapabilities().getVersion()) <= 0);

File: java/client/test/org/openqa/selenium/PositionAndSizeTest.java
Patch:
@@ -89,7 +89,7 @@ public void testShouldGetCoordinatesOfAnInvisibleElement() {
   public void testShouldScrollPageAndGetCoordinatesOfAnElementThatIsOutOfViewPort() {
     assumeFalse(
         "window().getSize() is not implemented for Chrome for Android. "
-        + "https://code.google.com/p/chromedriver/issues/detail?id=1005",
+        + "https://bugs.chromium.org/p/chromedriver/issues/detail?id=1005",
         TestUtilities.isChrome(driver) && TestUtilities.getEffectivePlatform(driver).is(ANDROID));
     driver.get(appServer.whereIs("coordinates_tests/page_with_element_out_of_view.html"));
     int windowHeight = driver.manage().window().getSize().getHeight();

File: java/client/test/org/openqa/selenium/VisibilityTest.java
Patch:
@@ -261,8 +261,7 @@ public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute()
   }
 
   /**
-   * @see <a href="http://code.google.com/p/selenium/issues/detail?id=1610">
-   *      http://code.google.com/p/selenium/issues/detail?id=1610</a>
+   * See https://github.com/SeleniumHQ/selenium-google-code-issue-archive/issues/1610
    */
   @Test
   @Ignore(IE)

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -200,7 +200,7 @@ public void testClickingOnAButtonThatClosesAnOpenWindowDoesNotCauseTheBrowserToH
 
     driver.switchTo().window("result");
 
-    // TODO Remove sleep when https://code.google.com/p/chromedriver/issues/detail?id=1044 is fixed.
+    // TODO Remove sleep when https://bugs.chromium.org/p/chromedriver/issues/detail?id=1044 is fixed.
     if (TestUtilities.isChrome(driver) && TestUtilities.getEffectivePlatform(driver).is(ANDROID)) {
       Thread.sleep(1000);
     }
@@ -232,7 +232,7 @@ public void testCanCallGetWindowHandlesAfterClosingAWindow() throws Exception {
     driver.switchTo().window("result");
     int allWindowHandles = driver.getWindowHandles().size();
 
-    // TODO Remove sleep when https://code.google.com/p/chromedriver/issues/detail?id=1044 is fixed.
+    // TODO Remove sleep when https://bugs.chromium.org/p/chromedriver/issues/detail?id=1044 is fixed.
     if (TestUtilities.isChrome(driver) && TestUtilities.getEffectivePlatform(driver).is(ANDROID)) {
       Thread.sleep(1000);
     }

File: java/client/test/org/openqa/selenium/atoms/CompiledAtomsNotLeakingTest.java
Patch:
@@ -70,7 +70,7 @@ public void prepareGlobalObject() {
     });
   }
 
-  /** http://code.google.com/p/selenium/issues/detail?id=1333 */
+  /** https://github.com/SeleniumHQ/selenium-google-code-issue-archive/issues/1333 */
   @Test
   public void fragmentWillNotLeakVariablesToEnclosingScopes() {
     ContextFactory.getGlobal().call(context -> {

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -470,7 +470,7 @@ public void shouldBeAbleToUseTheSameProfileMoreThanOnce() {
     }
   }
 
-  // See http://code.google.com/p/selenium/issues/detail?id=1774
+  // See https://github.com/SeleniumHQ/selenium-google-code-issue-archive/issues/1774
   @Test
   public void canStartFirefoxDriverWithSubclassOfFirefoxProfile() {
     new FirefoxDriver(new FirefoxOptions().setProfile(new CustomFirefoxProfile())).quit();

File: java/server/src/org/openqa/grid/internal/cli/CommonCliOptions.java
Patch:
@@ -88,7 +88,7 @@ public abstract class CommonCliOptions {
    */
   @Parameter(
       names = {"-timeout", "-sessionTimeout"},
-      description = "<Integer> in seconds : Specifies the timeout before the server automatically kills a session that hasn't had any activity in the last X seconds. The test slot will then be released for another test to use. This is typically used to take care of client crashes. For grid hub/node roles, cleanUpCycle must also be set."
+      description = "<Integer> in seconds : Specifies the timeout before the server automatically kills a session that hasn't had any activity in the last X seconds. The test slot will then be released for another test to use. This is typically used to take care of client crashes. For grid hub/node roles, cleanUpCycle must also be set. If a node does not specify it, the hub value will be used."
   )
   private Integer timeout;
 
@@ -97,7 +97,7 @@ public abstract class CommonCliOptions {
    */
   @Parameter(
       names = "-browserTimeout",
-      description = "<Integer> in seconds : number of seconds a browser session is allowed to hang while a WebDriver command is running (example: driver.get(url)). If the timeout is reached while a WebDriver command is still processing, the session will quit. Minimum value is 60. An unspecified, zero, or negative value means wait indefinitely."
+      description = "<Integer> in seconds : number of seconds a browser session is allowed to hang while a WebDriver command is running (example: driver.get(url)). If the timeout is reached while a WebDriver command is still processing, the session will quit. Minimum value is 60. An unspecified, zero, or negative value means wait indefinitely. If a node does not specify it, the hub value will be used."
   )
   private Integer browserTimeout;
 

File: java/server/test/org/openqa/grid/e2e/misc/GridViaCommandLineTest.java
Patch:
@@ -238,7 +238,7 @@ public void testRegisterNodeToHub() throws Exception {
     This test checks that the flag value makes it all the way to the ProxySet. Default is "true".
    */
   @Test
-  public void testThrowOnCapabilityNotPresentFlagIsUsed() throws Exception {
+  public void testThrowOnCapabilityNotPresentFlagIsUsed() {
     Integer hubPort = PortProber.findFreePort();
     String[] hubArgs = {"-role", "hub", "-host", "localhost", "-port", hubPort.toString(),
                         "-throwOnCapabilityNotPresent", "true"};

File: java/client/test/org/openqa/selenium/os/WindowsUtilsUnitTest.java
Patch:
@@ -30,7 +30,7 @@ public void testLoadEnvironment() {
     Assume.assumeTrue(WindowsUtils.thisIsWindows());
 
     String osVersion = System.getProperty("os.version");
-    assertThat(osVersion.matches("^(\\d)+\\.(\\d)+$"));
+    assertThat(osVersion).matches("^(\\d)+\\.(\\d)+$");
 
     Properties p = WindowsUtils.loadEnvironment();
     assertThat(p).isNotEmpty();

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -93,6 +93,7 @@ public Hub(GridHubConfiguration gridHubConfiguration) {
     try {
       registry = (GridRegistry) Class.forName(config.registry).newInstance();
       registry.setHub(this);
+      registry.setThrowOnCapabilityNotPresent(config.throwOnCapabilityNotPresent);
     } catch (Throwable e) {
       throw new GridConfigurationException("Error creating class with " + config.registry +
                                            " : " + e.getMessage(), e);

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -317,7 +317,7 @@ public void testShouldGetTextFromTableCells() {
     WebElement tr = driver.findElement(By.id("hidden_text"));
     String text = tr.getText();
 
-    assertThat(text).contains("some text", "some more text");
+    assertThat(text).contains("some text").doesNotContain("some more text");
   }
 
   @Test

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -532,7 +532,7 @@ public void testIncludesAlertTextInUnhandledAlertException() {
 
     assertThatExceptionOfType(UnhandledAlertException.class)
         .isThrownBy(driver::getTitle)
-        .withMessage("cheese")
+        .withMessageContaining("cheese")
         .satisfies(ex -> assertThat(ex.getAlertText()).isEqualTo("cheese"));
   }
 

File: java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java
Patch:
@@ -115,7 +115,7 @@ public HtmlRenderer getHtmlRender() {
   private volatile boolean down = false;
   private volatile boolean poll = true;
 
-  private List<RemoteException> errors = Collections.synchronizedList(new ArrayList<>());
+  private final List<RemoteException> errors = Collections.synchronizedList(new ArrayList<>());
   private Thread pollingThread = null;
 
   @ManagedAttribute
@@ -177,7 +177,7 @@ public void stopPolling() {
   public void addNewEvent(RemoteException event) {
     synchronized (errors) {
       errors.add(event);
-      onEvent(errors, event);
+      onEvent(new ArrayList<>(errors), event);
     }
   }
 

File: java/server/src/org/openqa/grid/internal/DefaultGridRegistry.java
Patch:
@@ -28,7 +28,7 @@
 
 import java.util.List;
 import java.util.Set;
-import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.Condition;
 import java.util.concurrent.locks.ReentrantLock;
@@ -58,7 +58,7 @@ public void uncaughtException(Thread t, Throwable e) {
 
   private final NewSessionRequestQueue newSessionQueue;
   private final Matcher matcherThread = new Matcher();
-  private final List<RemoteProxy> registeringProxies = new CopyOnWriteArrayList<>();
+  private final Set<RemoteProxy> registeringProxies = ConcurrentHashMap.newKeySet();
 
   private volatile boolean stop = false;
 
@@ -303,7 +303,6 @@ public void add(RemoteProxy proxy) {
 
       if (registeringProxies.contains(proxy)) {
         LOG.warning(String.format("Proxy '%s' is already queued for registration.", proxy));
-
         return;
       }
 

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -552,6 +552,7 @@ public void testCanQuitWhenAnAlertIsPresent() {
 
   @Test
   @NotYetImplemented(SAFARI)
+  @Ignore(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1487705")
   public void shouldHandleAlertOnFormSubmit() {
     driver.get(appServer.create(new Page().withTitle("Testing Alerts").withBody(
         "<form id='theForm' action='javascript:alert(\"Tasty cheese\");'>",

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -352,7 +352,6 @@ public void testPromptShouldHaveNullValueIfDismissed() {
   }
 
   @Test
-  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1477977")
   public void testHandlesTwoAlertsFromOneInteraction() {
     driver.get(appServer.create(new Page()
         .withScripts(

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -352,6 +352,7 @@ public void testPromptShouldHaveNullValueIfDismissed() {
   }
 
   @Test
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1477977")
   public void testHandlesTwoAlertsFromOneInteraction() {
     driver.get(appServer.create(new Page()
         .withScripts(

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java
Patch:
@@ -26,7 +26,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Optional;
 
 import javax.servlet.Servlet;
 
@@ -71,6 +70,9 @@ public class GridConfiguration extends StandaloneConfiguration {
 
   public GridConfiguration(GridJsonConfiguration jsonConfig) {
     super(jsonConfig);
+    ofNullable(jsonConfig.getCustom()).ifPresent(v -> custom = new HashMap<>(v));
+    ofNullable(jsonConfig.getServlets()).ifPresent(v -> servlets = new ArrayList<>(v));
+    ofNullable(jsonConfig.getWithoutServlets()).ifPresent(v -> withoutServlets = new ArrayList<>(v));
   }
 
   void merge(CommonGridCliOptions cliConfig) {

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -20,7 +20,6 @@
 import static java.util.Optional.ofNullable;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.ImmutableList;
 
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.common.SeleniumProtocol;

File: java/server/src/org/openqa/selenium/grid/config/ConcatenatingConfig.java
Patch:
@@ -31,7 +31,7 @@ public class ConcatenatingConfig implements Config {
   private final Map<String, String> values;
 
   public ConcatenatingConfig(String prefix, char separator, Map<?, ?> values) {
-    this.prefix = prefix == null ? "" : prefix + separator;
+    this.prefix = prefix == null || "".equals(prefix) ? "" : (prefix + separator);
     this.separator = separator;
 
     this.values = Objects.requireNonNull(values).entrySet().stream()

File: java/server/test/org/openqa/selenium/grid/config/ConfigTest.java
Patch:
@@ -47,7 +47,7 @@ public void shouldReturnEmptyIfConfigValueIsMissing() {
   public void shouldReadSystemProperties() {
     Config config = new CompoundConfig(
         new MapConfig(ImmutableMap.of()),
-        new ConcatenatingConfig("", ',', System.getProperties()));
+        new ConcatenatingConfig("", '.', System.getProperties()));
 
     assertEquals(System.getProperty("user.home"), config.get("user", "home").get());
   }

File: java/server/test/org/openqa/selenium/grid/config/ConfigTest.java
Patch:
@@ -47,8 +47,8 @@ public void shouldReturnEmptyIfConfigValueIsMissing() {
   public void shouldReadSystemProperties() {
     Config config = new CompoundConfig(
         new MapConfig(ImmutableMap.of()),
-        new ConcatenatingConfig(System.getProperties()));
+        new ConcatenatingConfig("", ',', System.getProperties()));
 
     assertEquals(System.getProperty("user.home"), config.get("user", "home").get());
   }
-}
\ No newline at end of file
+}

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -200,6 +200,7 @@ public GridNodeConfiguration(GridNodeCliOptions cliConfig) {
     ofNullable(cliConfig.getDownPollingLimit()).ifPresent(v -> downPollingLimit = v);
     ofNullable(cliConfig.getProxy()).ifPresent(v -> proxy = v);
     ofNullable(cliConfig.getEnablePlatformVerification()).ifPresent(v -> enablePlatformVerification = v);
+    ofNullable(cliConfig.getId()).ifPresent(v -> id = v);
     if (cliConfig.getHub() != null) {
       hub = cliConfig.getHub();
     } else if (cliConfig.getHubHost() != null || cliConfig.getHubPort() != null) {

File: java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java
Patch:
@@ -124,7 +124,7 @@ public StandaloneConfiguration(CommonJsonConfiguration jsonConfig) {
     this.role = ROLE;
     this.debug = jsonConfig.getDebug();
     this.log = jsonConfig.getLog();
-    this.host = jsonConfig.getHost();
+    this.host = jsonConfig.getHost() != null ? jsonConfig.getHost() : "0.0.0.0";
     this.port = jsonConfig.getPort();
     this.timeout = jsonConfig.getTimeout();
     this.browserTimeout = jsonConfig.getBrowserTimeout();

File: java/client/src/org/openqa/selenium/mobile/NetworkConnection.java
Patch:
@@ -109,8 +109,8 @@ public String toString() {
       return Integer.toString(mask);
     }
 
-    public String toJson() {
-      return toString();
+    public Integer toJson() {
+      return mask;
     }
   }
 

File: java/server/test/org/openqa/grid/internal/utils/DefaultCapabilityMatcherTest.java
Patch:
@@ -277,7 +277,7 @@ public void shouldMatchSafariTechnologyPreviewOnlyWithDeprecatedPlatformCapabili
     Map<String, Object> requested = new SafariOptions().setUseTechnologyPreview(true).asMap();
 
     Map<String, Object> tpNode = new HashMap<>();
-    tpNode.put(CapabilityType.BROWSER_NAME, BrowserType.SAFARI);
+    tpNode.put(CapabilityType.BROWSER_NAME, "Safari Technology Preview");
     tpNode.put(CapabilityType.PLATFORM, Platform.MAC);
     tpNode.put("technologyPreview", true);
 
@@ -294,7 +294,7 @@ public void shouldMatchSafariTechnologyPreviewOnly() {
     Map<String, Object> requested = new SafariOptions().setUseTechnologyPreview(true).asMap();
 
     Map<String, Object> tpNode = new HashMap<>();
-    tpNode.put(CapabilityType.BROWSER_NAME, BrowserType.SAFARI);
+    tpNode.put(CapabilityType.BROWSER_NAME, "Safari Technology Preview");
     tpNode.put(CapabilityType.PLATFORM_NAME, Platform.MAC);
     tpNode.put("technologyPreview", true);
 

File: java/client/src/org/openqa/selenium/json/InstanceCoercer.java
Patch:
@@ -162,7 +162,7 @@ private Constructor<?> getConstructor(Type type) {
     Class target = getClss(type);
 
     try {
-      @SuppressWarnings("unchecked") Constructor<?> constructor = target.getConstructor();
+      @SuppressWarnings("unchecked") Constructor<?> constructor = target.getDeclaredConstructor();
       constructor.setAccessible(true);
       return constructor;
     } catch (ReflectiveOperationException e) {

File: java/client/test/org/openqa/selenium/remote/BaseAugmenterTest.java
Patch:
@@ -298,7 +298,7 @@ public WebElement findElementById(String id) {
     }
   }
 
-  private interface MagicNumberHolder {
+  public interface MagicNumberHolder {
     public int getMagicNumber();
     public void setMagicNumber(int number);
   }

File: java/client/src/org/openqa/selenium/remote/internal/OkHttpClient.java
Patch:
@@ -137,7 +137,6 @@ public HttpClient createClient(URL url) {
           .connectionPool(pool)
           .followRedirects(true)
           .followSslRedirects(true)
-          .retryOnConnectionFailure(false)
           .readTimeout(readTimeout, MILLISECONDS)
           .connectTimeout(connectionTimeout, MILLISECONDS);
 

File: java/client/src/org/openqa/selenium/json/JsonOutput.java
Patch:
@@ -114,7 +114,7 @@ public class JsonOutput implements Closeable {
         .put(Enum.class::isAssignableFrom, (obj, depth) -> append(asString(obj)))
         .put(File.class::isAssignableFrom, (obj, depth) -> append(((File) obj).getAbsolutePath()))
         .put(URL.class::isAssignableFrom, (obj, depth) -> append(asString(((URL) obj).toExternalForm())))
-        .put(Level.class::isAssignableFrom, (obj, depth) -> append(LogLevelMapping.getName((Level) obj)))
+        .put(Level.class::isAssignableFrom, (obj, depth) -> append(asString(LogLevelMapping.getName((Level) obj))))
         .put(
             SessionId.class::isAssignableFrom,
             (obj, depth) -> {

File: java/client/src/org/openqa/selenium/json/JsonInput.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.io.Closeable;
 import java.io.IOException;
-import java.io.StringReader;
 import java.io.UncheckedIOException;
 import java.lang.reflect.Type;
 import java.math.BigDecimal;
@@ -388,7 +387,7 @@ private void readEscape(StringBuilder builder) {
           result += digit * multiplier;
           multiplier /= 16;
         }
-        builder.append(result);
+        builder.append((char) result);
         break;
 
       case '/':

File: java/server/src/org/openqa/selenium/remote/server/ActiveSessionFactory.java
Patch:
@@ -90,7 +90,7 @@ public ActiveSessionFactory() {
         .put(browserName(IE), "org.openqa.selenium.ie.InternetExplorerDriverService")
         .put(containsKey("se:ieOptions"), "org.openqa.selenium.ie.InternetExplorerDriverService")
         .put(browserName(OPERA), "org.openqa.selenium.opera.OperaDriverService")
-        .put(browserName(OPERA_BLINK), "org.openqa.selenium.ie.OperaDriverService")
+        .put(browserName(OPERA_BLINK), "org.openqa.selenium.opera.OperaDriverService")
         .put(browserName(PHANTOMJS), "org.openqa.selenium.phantomjs.PhantomJSDriverService")
         .put(browserName(SAFARI), "org.openqa.selenium.safari.SafariDriverService")
         .put(containsKey(Pattern.compile("^safari\\..*")), "org.openqa.selenium.safari.SafariDriverService")

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridHubConfigurationTest.java
Patch:
@@ -102,7 +102,7 @@ public void testLoadFromJson() throws IOException {
 
     try (Reader reader = new StringReader("{ \"host\": \"dummyhost\", \"port\": 1234 }");
         JsonInput jsonInput = new Json().newInput(reader)) {
-          ghc = GridHubConfiguration.loadFromJson(jsonInput, GridHubConfiguration.class);
+          ghc = GridHubConfiguration.loadFromJSON(jsonInput);
     }
 
     assertEquals("hub", ghc.role);

File: java/client/src/org/openqa/selenium/MutableCapabilities.java
Patch:
@@ -57,12 +57,12 @@ public MutableCapabilities(Map<String, ?> capabilities) {
   }
 
   /**
-   * Merges the extra capabilities provided into this DesiredCapabilities instance. If capabilities
+   * Merge the extra capabilities provided into this DesiredCapabilities instance. If capabilities
    * with the same name exist in this instance, they will be overridden by the values from the
    * extraCapabilities object.
    *
    * @param extraCapabilities Additional capabilities to be added.
-   * @return DesiredCapabilities after the merge
+   * @return The DesiredCapabilities instance after the merge.
    */
   @Override
   public MutableCapabilities merge(Capabilities extraCapabilities) {
@@ -89,7 +89,7 @@ public void setCapability(String capabilityName, Platform value) {
 
   public void setCapability(String key, Object value) {
     // We have to special-case some keys and values because of the popular idiom of calling
-    // something like "capabilities.setCapability(SafariOptions.CAPABILITY, new SafariOptions());
+    // something like "capabilities.setCapability(SafariOptions.CAPABILITY, new SafariOptions());"
     // and this is no longer needed as options are capabilities. There will be a large amount of
     // legacy code that will always try and follow this pattern, however.
     if (OPTION_KEYS.contains(key) && value instanceof Capabilities) {

File: java/server/src/org/openqa/grid/internal/cli/CommonGridCliOptions.java
Patch:
@@ -119,7 +119,7 @@ String builtIn(String resource) {
     }
   }
 
-  String fromConfigFile(String file) {
+  static String fromConfigFile(String file) {
     try(BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(file)))) {
       return br.lines().collect(Collectors.joining("\n"));
     } catch (IOException e) {

File: java/server/src/org/openqa/grid/selenium/GridLauncherV3.java
Patch:
@@ -72,7 +72,6 @@ default void printUsage(PrintStream out) {
       StringBuilder sb = new StringBuilder();
       new JCommander(getOptions()).usage(sb);
       out.print(sb);
-
     }
   }
 
@@ -276,7 +275,7 @@ public Stoppable launch() {
 
         })
         .put(GridRole.HUB.toString(), (args) -> new GridItemLauncher() {
-          GridHubCliOptions options = new GridHubCliOptions().parse(args);
+          GridHubCliOptions options = new GridHubCliOptions.Parser().parse(args);
 
           @Override
           public CommonCliOptions getOptions() {
@@ -294,7 +293,7 @@ public Stoppable launch() throws Exception {
           }
         })
         .put(GridRole.NODE.toString(), (args) -> new GridItemLauncher() {
-          GridNodeCliOptions options = new GridNodeCliOptions().parse(args);
+          GridNodeCliOptions options = new GridNodeCliOptions.Parser().parse(args);
 
           @Override
           public CommonCliOptions getOptions() {

File: java/server/test/org/openqa/grid/common/RegistrationRequestTest.java
Patch:
@@ -376,6 +376,6 @@ private void assertConstruction(RegistrationRequest req) {
   }
 
   private GridNodeConfiguration parseCliOptions(String... args) {
-    return new GridNodeCliOptions().parse(args).toConfiguration();
+    return new GridNodeCliOptions.Parser().parse(args).toConfiguration();
   }
 }

File: java/server/test/org/openqa/grid/e2e/utils/GridTestHelper.java
Patch:
@@ -42,7 +42,7 @@ public static SelfRegisteringRemote getRemoteWithoutCapabilities(URL hub, GridRo
                      "-host","localhost",
                      "-hub",hub.toString(),
                      "-port",String.valueOf(PortProber.findFreePort())};
-    GridNodeConfiguration config = new GridNodeCliOptions().parse(args).toConfiguration();
+    GridNodeConfiguration config = new GridNodeCliOptions.Parser().parse(args).toConfiguration();
     RegistrationRequest req = RegistrationRequest.build(config);
     SelfRegisteringRemote remote = new SelfRegisteringRemote(req);
     remote.deleteAllBrowsers();

File: java/server/test/org/openqa/grid/internal/BaseRemoteProxyTest.java
Patch:
@@ -189,6 +189,6 @@ public void teardown() {
   }
 
   private GridNodeConfiguration parseCliOptions(String... args) {
-    return new GridNodeCliOptions().parse(args).toConfiguration();
+    return new GridNodeCliOptions.Parser().parse(args).toConfiguration();
   }
 }

File: java/server/test/org/openqa/grid/internal/UserDefinedCapabilityMatcherTests.java
Patch:
@@ -33,7 +33,7 @@ public class UserDefinedCapabilityMatcherTests {
   public void defaultsToDefaultMatcher() {
     GridRegistry registry = DefaultGridRegistry.newInstance(new Hub(new GridHubConfiguration()));
     String[] args = new String[]{"-role", "webdriver","-id", "abc","-host","localhost"};
-    GridNodeConfiguration nodeConfiguration = new GridNodeCliOptions().parse(args).toConfiguration();
+    GridNodeConfiguration nodeConfiguration = new GridNodeCliOptions.Parser().parse(args).toConfiguration();
     RegistrationRequest req = RegistrationRequest.build(nodeConfiguration);
     req.getConfiguration().proxy = null;
     RemoteProxy p = BaseRemoteProxy.getNewInstance(req, registry);
@@ -49,7 +49,7 @@ public void capabilityMatcherCanBeSpecified() {
     hubConfig.capabilityMatcher = new MyCapabilityMatcher();
     Hub hub = new Hub(hubConfig);
     String[] args = new String[]{"-role", "webdriver","-id", "abc","-host","localhost"};
-    GridNodeConfiguration nodeConfiguration = new GridNodeCliOptions().parse(args).toConfiguration();
+    GridNodeConfiguration nodeConfiguration = new GridNodeCliOptions.Parser().parse(args).toConfiguration();
     RegistrationRequest req = RegistrationRequest.build(nodeConfiguration);
     req.getConfiguration().proxy = null;
     RemoteProxy p = BaseRemoteProxy.getNewInstance(req, hub.getRegistry());

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridHubConfigurationTest.java
Patch:
@@ -173,7 +173,7 @@ public void testToString() {
     ghc = new GridHubConfiguration();
     String[] args = ("-servlet com.foo.bar.ServletA -servlet com.foo.bar.ServletB"
                      + " -custom foo=bar,bar=baz").split(" ");
-    ghc = new GridHubCliOptions().parse(args).toConfiguration();
+    ghc = new GridHubCliOptions.Parser().parse(args).toConfiguration();
 
     assertTrue(ghc.toString().contains("-servlets com.foo.bar.ServletA"
                                        + " -servlets com.foo.bar.ServletB"));
@@ -186,7 +186,7 @@ public void testToString() {
   public void testJcommanderConverterCapabilityMatcher() {
     String[] hubArgs = {"-capabilityMatcher", "org.openqa.grid.internal.utils.DefaultCapabilityMatcher",
                         "-prioritizer", "org.openqa.grid.internal.utils.configuration.PlaceHolderTestingPrioritizer"};
-    GridHubConfiguration ghc = new GridHubCliOptions().parse(hubArgs).toConfiguration();
+    GridHubConfiguration ghc = new GridHubCliOptions.Parser().parse(hubArgs).toConfiguration();
     assertEquals("org.openqa.grid.internal.utils.DefaultCapabilityMatcher",
                  ghc.capabilityMatcher.getClass().getCanonicalName());
     assertEquals("org.openqa.grid.internal.utils.configuration.PlaceHolderTestingPrioritizer",

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java
Patch:
@@ -207,7 +207,7 @@ public void testAsJson() {
   public void testWithCapabilitiesArgs() {
     final String[] args = new String[] { "-capabilities",
                                        "browserName=chrome,platform=linux,maxInstances=10,boolean=false" };
-    GridNodeConfiguration gnc = new GridNodeCliOptions().parse(args).toConfiguration();
+    GridNodeConfiguration gnc = new GridNodeCliOptions.Parser().parse(args).toConfiguration();
     assertTrue(gnc.capabilities.size() == 1);
     assertEquals("chrome", gnc.capabilities.get(0).getBrowserName());
     assertEquals(10L, gnc.capabilities.get(0).getCapability("maxInstances"));
@@ -372,6 +372,6 @@ public void hubOptionHasPrecedenceOverNodeConfig() throws IOException {
   }
 
   private GridNodeConfiguration parseCliOptions(String... args) {
-    return new GridNodeCliOptions().parse(args).toConfiguration();
+    return new GridNodeCliOptions.Parser().parse(args).toConfiguration();
   }
 }

File: java/server/test/org/openqa/grid/selenium/proxy/DefaultRemoteProxyTest.java
Patch:
@@ -75,7 +75,7 @@ private static BaseRemoteProxy createProxyAndSimulateTimeout(int cleanupCycle)
     registry.getHub().getConfiguration().timeout = 1;
     registry.getHub().getConfiguration().cleanUpCycle = cleanupCycle;
     String[] args = new String[]{"-role", "webdriver"};
-    GridNodeConfiguration nodeConfiguration = new GridNodeCliOptions().parse(args).toConfiguration();
+    GridNodeConfiguration nodeConfiguration = new GridNodeCliOptions.Parser().parse(args).toConfiguration();
     nodeConfiguration.port = new Random().nextInt(100);
     nodeConfiguration.timeout = 1;
     RegistrationRequest req = RegistrationRequest.build(nodeConfiguration);

File: java/client/test/org/openqa/selenium/json/JsonOutputTest.java
Patch:
@@ -609,7 +609,6 @@ public void whenConvertingObjectsContainingClassesDoNotBeNoisy() {
     String json = convert(ImmutableMap.of("thing", SimpleBean.class));
 
     JsonObject converted = new JsonParser().parse(json).getAsJsonObject();
-    System.out.println("converted = " + converted);
 
     assertEquals(1, converted.size());
     assertEquals(SimpleBean.class.getName(), converted.getAsJsonPrimitive("thing").getAsString());
@@ -629,7 +628,6 @@ public void canDisablePrettyPrintingToGetSingleLineOutput() {
       out.write(toEncode);
     }
 
-    System.out.println(json.toString());
     assertEquals(-1, json.indexOf("\n"));
   }
 

File: java/client/src/org/openqa/selenium/json/JsonType.java
Patch:
@@ -26,6 +26,7 @@ public enum JsonType {
   END_MAP,
   START_COLLECTION,
   END_COLLECTION,
-  STRING
+  STRING,
+  END
   ;
 }

File: java/server/src/org/openqa/selenium/remote/server/ActiveSessionFactory.java
Patch:
@@ -35,6 +35,7 @@
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.Dialect;
 
 import java.util.List;
@@ -169,7 +170,7 @@ public boolean isSupporting(Capabilities capabilities) {
 
   @Override
   public Optional<ActiveSession> apply(Set<Dialect> downstreamDialects, Capabilities caps) {
-    LOG.info("Capabilities are: " + caps);
+    LOG.info("Capabilities are: " + new Json().toJson(caps));
     return factories.stream()
         .filter(factory -> factory.isSupporting(caps))
         .peek(factory -> LOG.info(String.format("Matched factory %s", factory)))

File: java/client/src/org/openqa/selenium/remote/session/W3CPlatformNameNormaliser.java
Patch:
@@ -33,7 +33,7 @@ public Collection<Map.Entry<String, Object>> apply(Map.Entry<String, Object> ent
       return singleton(entry);
     }
 
-    return singleton(new AbstractMap.SimpleImmutableEntry<String, Object>(
+    return singleton(new AbstractMap.SimpleImmutableEntry<>(
         entry.getKey(),
         String.valueOf(entry.getValue()).toLowerCase(ENGLISH)));
   }

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -85,7 +85,7 @@ public class TestSession {
   private volatile long sessionCreatedAt;
   private volatile long lastActivity;
   private final Map<String, Object> requestedCapabilities;
-  private Map<String, Object> objects = Collections.synchronizedMap(new HashMap<String, Object>());
+  private Map<String, Object> objects = Collections.synchronizedMap(new HashMap<>());
   private volatile boolean ignoreTimeout = false;
   private final Clock clock;
   private volatile boolean forwardingRequest;

File: java/server/test/org/openqa/grid/internal/ConcurrencyLockTest.java
Patch:
@@ -65,7 +65,7 @@ public void setup() throws Exception {
 
   }
 
-  private List<String> results = Collections.synchronizedList(new ArrayList<String>());
+  private List<String> results = Collections.synchronizedList(new ArrayList<>());
 
   @Test(timeout = 10000)
   public void runTest() throws InterruptedException {

File: java/server/test/org/openqa/grid/internal/ProxySetTest.java
Patch:
@@ -45,7 +45,7 @@ public void removeIfPresent() throws Exception {
 
       set.add(p1);
 
-      p1.getTestSlots().get(0).getNewSession(new HashMap<String, Object>());
+      p1.getTestSlots().get(0).getNewSession(new HashMap<>());
 
       // Make sure the proxy and its test session show up in the registry.
       assertEquals(1, set.size());

File: java/server/test/org/openqa/testing/TestSession.java
Patch:
@@ -50,7 +50,7 @@ public TestSession(SessionId sessionId, WebDriver driver, Capabilities capabilit
     this.capabilities = (Map<String, Object>) capabilities.asMap();
     this.knownElements = new KnownElements();
     this.executor = new ThreadPoolExecutor(1, 1, 600L, TimeUnit.SECONDS,
-        new LinkedBlockingQueue<Runnable>());
+        new LinkedBlockingQueue<>());
   }
 
   public void close() {

File: java/client/src/org/openqa/selenium/remote/http/HttpRequest.java
Patch:
@@ -42,7 +42,7 @@ public HttpMethod getMethod() {
   }
 
   /**
-   * Get a query parameter. The implementation will take care of decoding the from percent encoding.
+   * Get a query parameter. The implementation will take care of decoding from the percent encoding.
    */
   public String getQueryParameter(String name) {
     return queryParameters.get(name).stream().findFirst().orElse(null);

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -98,7 +98,7 @@ public Hub(GridHubConfiguration gridHubConfiguration) {
     }
 
     if (config.host == null) {
-      updateHostToNonLoopBackAddressOfThisMachine();
+      config.host = "0.0.0.0"; //default to all adapters
     }
 
     if (config.port == null) {

File: java/client/src/org/openqa/selenium/remote/NewSessionPayload.java
Patch:
@@ -225,6 +225,7 @@ public void writeTo(Appendable appendable) throws IOException {
           if (rawData instanceof List) {
             proxyMap.put("noProxy", ((List<String>) rawData).stream().collect(Collectors.joining(",")));
           }
+          first.put(CapabilityType.PROXY, proxyMap);
         }
       }
 

File: java/client/test/org/openqa/selenium/ProxySettingTest.java
Patch:
@@ -91,7 +91,6 @@ public void canConfigureManualHttpProxy() {
 
   @Test
   @Ignore(SAFARI)
-  @NotYetImplemented(CHROME)
   @NeedsLocalEnvironment
   public void canConfigureNoProxy() {
     Proxy proxyToUse = proxyServer.asProxy();

File: java/client/test/org/openqa/selenium/ProxySettingTest.java
Patch:
@@ -92,7 +92,7 @@ public void canConfigureManualHttpProxy() {
   @NeedsLocalEnvironment
   public void canConfigureNoProxy() {
     Proxy proxyToUse = proxyServer.asProxy();
-    proxyToUse.setNoProxy("localhost, 127.0.0.*");
+    proxyToUse.setNoProxy("localhost, 127.0.0.1, " + appServer.getHostName());
     Capabilities caps = new ImmutableCapabilities(PROXY, proxyToUse);
 
     WebDriver driver = new WebDriverBuilder().get(caps);

File: java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java
Patch:
@@ -1010,11 +1010,11 @@ public String toString() {
   }
 
   /**
-   * An expectation for checking number of WebElements with given locator
+   * An expectation for checking number of WebElements with given locator being more than defined number
    *
    * @param locator used to find the element
-   * @param number  used to define exact number of elements
-   * @return Boolean true when size of elements list is equal to defined
+   * @param number  used to define minimum number of elements
+   * @return Boolean true when size of elements list is more than defined
    */
   public static ExpectedCondition<List<WebElement>> numberOfElementsToBeMoreThan(final By locator,
                                                                                  final Integer number) {

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -55,9 +55,9 @@ public class GridNodeConfiguration extends GridConfiguration {
   static final String DEFAULT_ROLE = "node";
 
   /**
-   * Default hub port
+   * Default node port, -1 means random free port
    */
-  static final Integer DEFAULT_PORT = 5555;
+  static final Integer DEFAULT_PORT = -1;
 
   /**
    * Default node polling

File: java/client/src/org/openqa/selenium/json/BooleanCoercer.java
Patch:
@@ -24,7 +24,7 @@ public class BooleanCoercer extends TypeCoercer<Boolean> {
 
   @Override
   public boolean test(Class<?> aClass) {
-    return Boolean.class.isAssignableFrom(aClass);
+    return Boolean.class.isAssignableFrom(aClass) || boolean.class.isAssignableFrom(aClass);
   }
 
   @Override

File: java/client/src/org/openqa/selenium/json/NumberCoercer.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.openqa.selenium.json;
 
+import com.google.common.primitives.Primitives;
+
 import java.lang.reflect.Type;
 import java.util.Objects;
 import java.util.function.BiFunction;
@@ -34,7 +36,7 @@ class NumberCoercer<T extends Number> extends TypeCoercer<T> {
 
   @Override
   public boolean test(Class<?> type) {
-    return stereotype.isAssignableFrom(type);
+    return stereotype.isAssignableFrom(Primitives.wrap(type));
   }
 
   @Override

File: java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java
Patch:
@@ -97,7 +97,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
       considerV2Json(registrationRequest.getConfiguration(), json);
     } else {
       // Se3 compatible request.
-      registrationRequest = RegistrationRequest.fromJson(json);
+      registrationRequest = RegistrationRequest.fromJson(requestJsonString);
     }
 
     final RemoteProxy proxy = BaseRemoteProxy.getNewInstance(registrationRequest, getRegistry());
@@ -128,7 +128,7 @@ private GridNodeConfiguration mapV2Configuration(JsonObject json) {
 
     // if a JsonSyntaxException happens here, so be it. We won't be able to map the request
     // to a grid node configuration anyhow.
-    GridNodeConfiguration pendingConfiguration = GridNodeConfiguration.loadFromJSON(json);
+    GridNodeConfiguration pendingConfiguration = GridNodeConfiguration.loadFromJSON(json.toString());
 
     // add the servlets that were saved off
     if (servlets != null && servlets.isJsonPrimitive() &&

File: java/server/test/org/openqa/grid/internal/StatusServletTests.java
Patch:
@@ -73,6 +73,7 @@ public void setup() throws Exception {
     c.timeout = 12345;
     c.port = PortProber.findFreePort();
     c.host = "localhost";
+
     hub = new Hub(c);
     GridRegistry registry = hub.getRegistry();
     client = HttpClient.Factory.createDefault().createClient(hub.getUrl());
@@ -225,7 +226,6 @@ public void testSessionGet() throws IOException {
   @Test
   public void testHubGetSpecifiedConfig() throws IOException {
     String url = hubApi.toExternalForm();
-    System.out.println("url = " + url);
     HttpRequest r = new HttpRequest(POST, url);
 
     Map<String, Object> j = ImmutableMap.of(
@@ -331,7 +331,7 @@ public void testHubGetNewSessionRequestCount() throws IOException {
   @Test
   public void testHubGetSlotCounts() throws IOException {
     String url = hubApi.toExternalForm();
-    HttpRequest r = new HttpRequest(GET, url);
+    HttpRequest r = new HttpRequest(POST, url);
 
     Map<String, Object> j = ImmutableMap.of("configuration", ImmutableList.of("slotCounts"));
 
@@ -370,7 +370,6 @@ public void teardown() {
   }
 
   private Map<String, Object> extractObject(HttpResponse resp) {
-    System.out.println("resp = " + resp.getContentString());
     return new Json().toType(resp.getContentString(), MAP_TYPE);
   }
 

File: java/client/src/org/openqa/selenium/json/TypeCoercer.java
Patch:
@@ -22,7 +22,8 @@
 import java.util.function.Function;
 import java.util.function.Predicate;
 
-abstract class TypeCoercer<T> implements Predicate<Class<?>>, Function<Type, BiFunction<JsonInput, PropertySetting, T>> {
+public abstract class TypeCoercer<T>
+    implements Predicate<Class<?>>, Function<Type, BiFunction<JsonInput, PropertySetting, T>> {
 
   @Override
   public abstract boolean test(Class<?> aClass);

File: java/client/src/org/openqa/selenium/json/Json.java
Patch:
@@ -68,7 +68,7 @@ public JsonElement toJsonElement(Object toConvert) {
     return toJson.convertObject(toConvert);
   }
 
-  public <T> T toType(Object source, Type typeOfT) {
+  public <T> T toType(String source, Type typeOfT) {
     Class<?> type;
     if (typeOfT instanceof ParameterizedType) {
       type = (Class<?>) ((ParameterizedType) typeOfT).getRawType();

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -120,7 +120,7 @@ static List<MutableCapabilities> getCapabilities() {
       JsonObject defaults = loadJSONFromResourceOrFile(DEFAULT_NODE_CONFIG_FILE);
       List<MutableCapabilities> caps = new ArrayList<>();
       for (JsonElement el : defaults.getAsJsonArray("capabilities")) {
-        caps.add(new Json().toType(el, DesiredCapabilities.class));
+        caps.add(new Json().toType(el.toString(), DesiredCapabilities.class));
       }
       return caps;
     }
@@ -451,7 +451,7 @@ public List<MutableCapabilities> deserialize(JsonElement jsonElement, Type type,
         List<MutableCapabilities> desiredCapabilities = new ArrayList<>();
         Json json = new Json();
         for (JsonElement arrayElement : jsonElement.getAsJsonArray()) {
-          desiredCapabilities.add(json.toType(arrayElement, DesiredCapabilities.class));
+          desiredCapabilities.add(json.toType(arrayElement.toString(), DesiredCapabilities.class));
         }
         return desiredCapabilities;
       }

File: java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java
Patch:
@@ -39,7 +39,6 @@
 import java.io.InputStreamReader;
 import java.util.logging.Logger;
 
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
@@ -174,7 +173,7 @@ private void considerV2Json(GridNodeConfiguration configuration, JsonObject json
       JsonArray capabilities = json.get("capabilities").getAsJsonArray();
       Json converter = new Json();
       for (int i = 0; i < capabilities.size(); i++) {
-        MutableCapabilities cap = converter.toType(capabilities.get(i), DesiredCapabilities.class);
+        MutableCapabilities cap = converter.toType(capabilities.get(i).toString(), DesiredCapabilities.class);
         configuration.capabilities.add(cap);
       }
       configuration.fixUpCapabilities();

File: java/client/test/org/openqa/selenium/testing/drivers/ReflectionBackedDriverSupplier.java
Patch:
@@ -47,7 +47,7 @@ public WebDriver get() {
 
       try {
         return driverClass.getConstructor(desiredCapabilities.getClass()).newInstance(desiredCapabilities);
-      } catch (InvocationTargetException e) {
+      } catch (NoSuchMethodException | InvocationTargetException e) {
       }
 
       return driverClass.getConstructor(Capabilities.class).newInstance(desiredCapabilities);

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -176,6 +176,7 @@ private void initServer() {
       httpConfig.setSecurePort(config.port);
 
       ServerConnector http = new ServerConnector(server, new HttpConnectionFactory(httpConfig));
+      http.setHost(config.host);
       http.setPort(config.port);
 
       server.addConnector(http);

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -184,6 +184,9 @@ public boolean boot() {
     if (configuration.port == null) {
       configuration.port = 4444;
     }
+    if (configuration.host != null) {
+      http.setHost(configuration.host);
+    }
     http.setPort(configuration.port);
     http.setIdleTimeout(500000);
 

File: java/server/test/org/openqa/selenium/remote/server/commandhandler/UploadFileTest.java
Patch:
@@ -82,9 +82,8 @@ public void shouldWriteABase64EncodedZippedFileToDiskAndKeepName() throws Except
     HttpResponse response = new HttpResponse();
     uploadFile.execute(request, response);
 
-    String path = (String) new Json()
-        .toType(response.getContentString(), Response.class)
-        .getValue();
+    Response res = new Json().toType(response.getContentString(), Response.class);
+    String path = (String) res.getValue();
     assertTrue(new File(path).exists());
     assertTrue(path.endsWith(tempFile.getName()));
   }

File: java/client/src/org/openqa/selenium/chrome/ChromeDriverService.java
Patch:
@@ -85,7 +85,7 @@ public ChromeDriverService(File executable, int port, ImmutableList<String> args
    * @return A new ChromeDriverService using the default configuration.
    */
   public static ChromeDriverService createDefaultService() {
-    return new Builder().usingAnyFreePort().build();
+    return new Builder().build();
   }
 
   /**

File: java/client/src/org/openqa/selenium/edge/EdgeDriverService.java
Patch:
@@ -64,7 +64,7 @@ public EdgeDriverService(File executable, int port, ImmutableList<String> args,
   * @return A new EdgeDriverService using the default configuration.
   */
   public static EdgeDriverService createDefaultService() {
-    return new Builder().usingAnyFreePort().build();
+    return new Builder().build();
   }
 
   public static class Builder extends DriverService.Builder<

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -68,11 +68,11 @@ public GeckoDriverService(File executable, int port, ImmutableList<String> args,
    * @return A new GeckoDriverService using the default configuration.
    */
   public static GeckoDriverService createDefaultService() {
-    return new Builder().usingAnyFreePort().build();
+    return new Builder().build();
   }
 
   static GeckoDriverService createDefaultService(Capabilities caps) {
-    Builder builder = new Builder().usingAnyFreePort();
+    Builder builder = new Builder();
 
     Object binary = caps.getCapability(FirefoxDriver.BINARY);
     if (binary != null) {

File: java/client/src/org/openqa/selenium/firefox/XpiDriverService.java
Patch:
@@ -175,7 +175,7 @@ private static Extension loadDefaultExtension() {
    */
   public static XpiDriverService createDefaultService() {
     try {
-      return new XpiDriverService.Builder().usingAnyFreePort().build();
+      return new Builder().build();
     } catch (WebDriverException e) {
       throw new IllegalStateException(e.getMessage(), e.getCause());
     }
@@ -244,6 +244,7 @@ public static class Builder extends DriverService.Builder<XpiDriverService, XpiD
     private FirefoxBinary binary = null;
     private FirefoxProfile profile = null;
 
+
     private Builder() {
       // Only available through the static factory method in the XpiDriverService
     }

File: java/client/src/org/openqa/selenium/ie/InternetExplorerDriverService.java
Patch:
@@ -90,7 +90,7 @@ private InternetExplorerDriverService(File executable, int port, ImmutableList<S
    * @return A new InternetExplorerDriverService using the default configuration.
    */
   public static InternetExplorerDriverService createDefaultService() {
-    return new Builder().usingAnyFreePort().build();
+    return new Builder().build();
   }
 
   /**

File: java/client/src/org/openqa/selenium/opera/OperaDriverService.java
Patch:
@@ -79,7 +79,7 @@ public OperaDriverService(File executable, int port, ImmutableList<String> args,
    * @return A new OperaDriverService using the default configuration.
    */
   public static OperaDriverService createDefaultService() {
-    return new Builder().usingAnyFreePort().build();
+    return new Builder().build();
   }
 
   /**

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -29,7 +29,6 @@
 import static org.openqa.selenium.WaitingConditions.windowToBeSwitchedToWithName;
 import static org.openqa.selenium.remote.CapabilityType.SUPPORTS_JAVASCRIPT;
 import static org.openqa.selenium.support.ui.ExpectedConditions.titleIs;
-import static org.openqa.selenium.testing.Driver.MARIONETTE;
 import static org.openqa.selenium.testing.Driver.SAFARI;
 
 import org.hamcrest.Matchers;
@@ -53,7 +52,6 @@ public void testDocumentShouldReflectLatestTitle() {
   }
 
   @Test
-  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1381519")
   @NotYetImplemented(SAFARI)
   public void testDocumentShouldReflectLatestDom() {
     driver.get(pages.javascriptPage);

File: java/client/src/org/openqa/selenium/json/Json.java
Patch:
@@ -18,13 +18,13 @@
 package org.openqa.selenium.json;
 
 import com.google.common.io.CharStreams;
+import com.google.common.reflect.TypeToken;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonParseException;
 import com.google.gson.TypeAdapter;
 import com.google.gson.TypeAdapterFactory;
-import com.google.gson.reflect.TypeToken;
 import com.google.gson.stream.JsonReader;
 import com.google.gson.stream.JsonToken;
 import com.google.gson.stream.JsonWriter;
@@ -127,7 +127,7 @@ private static class MapAdapter extends TypeAdapter<Map<?, ?>> {
     private final static TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       @Override
-      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
+      public <T> TypeAdapter<T> create(Gson gson, com.google.gson.reflect.TypeToken<T> type) {
         if (type.getRawType() == Map.class) {
           return (TypeAdapter<T>) new MapAdapter(gson);
         }
@@ -183,7 +183,7 @@ private static class ListAdapter extends TypeAdapter<List<?>> {
     private final static TypeAdapterFactory FACTORY = new TypeAdapterFactory() {
       @SuppressWarnings("unchecked")
       @Override
-      public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
+      public <T> TypeAdapter<T> create(Gson gson, com.google.gson.reflect.TypeToken<T> type) {
         if (type.getRawType() == List.class) {
           return (TypeAdapter<T>) new ListAdapter(gson);
         }

File: java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java
Patch:
@@ -35,6 +35,7 @@
 import org.openqa.grid.web.servlet.ResourceServlet;
 import org.openqa.grid.web.utils.ExtraServletUtil;
 import org.openqa.selenium.Platform;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.http.HttpClient;
 import org.openqa.selenium.remote.http.HttpRequest;
@@ -252,7 +253,7 @@ private void registerToHub(boolean checkPresenceFirst) {
 
         HttpRequest request = new HttpRequest(POST, registration.toExternalForm());
         updateConfigWithRealPort();
-        String json = registrationRequest.toJson().toString();
+        String json = new Json().toJson(registrationRequest);
         request.setContent(json.getBytes(UTF_8));
 
         HttpClient client = httpClientFactory.createClient(registration);

File: java/server/src/org/openqa/grid/internal/cli/GridHubCliOptions.java
Patch:
@@ -49,7 +49,7 @@ private IDefaultProvider defaults(String json) {
     map.remove("custom");
     return optionName -> {
       String option = optionName.replaceAll("-", "");
-      return map.containsKey(option) ? map.get(option).toString() : null;
+      return map.containsKey(option) && map.get(option) != null ? map.get(option).toString() : null;
     };
   }
 

File: java/server/test/org/openqa/grid/e2e/misc/GridViaCommandLineTest.java
Patch:
@@ -250,6 +250,7 @@ public void canStartHubUsingConfigFile() throws Exception {
         + " \"servlets\" : [],\n"
         + " \"withoutServlets\": [],\n"
         + " \"custom\": {},\n"
+        + " \"prioritizer\": null,\n"
         + " \"capabilityMatcher\": \"org.openqa.grid.internal.utils.DefaultCapabilityMatcher\",\n"
         + " \"registry\": \"org.openqa.grid.internal.DefaultGridRegistry\",\n"
         + " \"throwOnCapabilityNotPresent\": true,\n"

File: java/server/src/org/openqa/grid/internal/BaseGridRegistry.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.openqa.grid.web.Hub;
 import org.openqa.selenium.remote.http.HttpClient;
-import org.openqa.selenium.remote.internal.OkHttpClient;
 
 import java.net.URL;
 
@@ -30,7 +29,7 @@ public abstract class BaseGridRegistry implements GridRegistry {
   protected volatile Hub hub;
 
   public BaseGridRegistry(Hub hub) {
-    this.httpClientFactory = new OkHttpClient.Factory();
+    this.httpClientFactory = HttpClient.Factory.createDefault();
     this.hub = hub;
   }
 

File: java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java
Patch:
@@ -39,7 +39,6 @@
 import org.openqa.selenium.remote.http.HttpClient;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;
-import org.openqa.selenium.remote.internal.OkHttpClient;
 import org.openqa.selenium.remote.server.log.LoggingManager;
 
 import java.net.MalformedURLException;
@@ -65,12 +64,12 @@ public class SelfRegisteringRemote {
   private boolean hasId;
 
   public SelfRegisteringRemote(GridNodeConfiguration configuration) {
-    this(RegistrationRequest.build(configuration));
+    this(RegistrationRequest.build(configuration, null, null));
   }
 
   public SelfRegisteringRemote(RegistrationRequest request) {
     this.registrationRequest = request;
-    this.httpClientFactory = new OkHttpClient.Factory();
+    this.httpClientFactory = HttpClient.Factory.createDefault();
     this.nodeServlets = new HashMap<>();
 
     registrationRequest.validate();

File: java/server/test/org/openqa/grid/internal/AddingProxyAgainFreesResources.java
Patch:
@@ -25,6 +25,8 @@
 import org.junit.Test;
 import org.openqa.grid.common.exception.GridException;
 import org.openqa.grid.internal.mock.GridHelper;
+import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
+import org.openqa.grid.web.Hub;
 import org.openqa.grid.web.servlet.handler.RequestHandler;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.support.ui.FluentWait;
@@ -52,7 +54,7 @@ public class AddingProxyAgainFreesResources {
    */
   @Before
   public void setup() throws Exception {
-    registry = DefaultGridRegistry.newInstance();
+    registry = DefaultGridRegistry.newInstance(new Hub(new GridHubConfiguration()));
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);
     registry.add(p1);

File: java/server/test/org/openqa/grid/internal/ConcurrencyLockTest.java
Patch:
@@ -24,6 +24,8 @@
 import org.junit.Test;
 import org.openqa.grid.internal.mock.GridHelper;
 import org.openqa.grid.internal.mock.MockedRequestHandler;
+import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
+import org.openqa.grid.web.Hub;
 import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.ArrayList;
@@ -52,7 +54,7 @@ public class ConcurrencyLockTest {
    */
   @Before
   public void setup() throws Exception {
-    registry = DefaultGridRegistry.newInstance();
+    registry = DefaultGridRegistry.newInstance(new Hub(new GridHubConfiguration()));
     ie.put(CapabilityType.APPLICATION_NAME, "IE");
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
 

File: java/server/test/org/openqa/grid/internal/NewRequestCrashesDuringNewSessionTest.java
Patch:
@@ -26,6 +26,8 @@
 import org.openqa.grid.common.SeleniumProtocol;
 import org.openqa.grid.internal.mock.GridHelper;
 import org.openqa.grid.internal.mock.MockedRequestHandler;
+import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
+import org.openqa.grid.web.Hub;
 import org.openqa.grid.web.servlet.handler.SeleniumBasedRequest;
 import org.openqa.selenium.remote.CapabilityType;
 
@@ -45,7 +47,7 @@ public class NewRequestCrashesDuringNewSessionTest {
    */
   @Before
   public void setup() throws Exception {
-    registry = DefaultGridRegistry.newInstance();
+    registry = DefaultGridRegistry.newInstance(new Hub(new GridHubConfiguration()));
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
 
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);

File: java/server/test/org/openqa/grid/internal/NewSessionRequestTimeout.java
Patch:
@@ -22,6 +22,8 @@
 import org.junit.Test;
 import org.openqa.grid.internal.mock.GridHelper;
 import org.openqa.grid.internal.mock.MockedRequestHandler;
+import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
+import org.openqa.grid.web.Hub;
 import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.HashMap;
@@ -38,7 +40,7 @@ public class NewSessionRequestTimeout {
    */
   @Before
   public void setup() throws Exception {
-    registry = DefaultGridRegistry.newInstance();
+    registry = DefaultGridRegistry.newInstance(new Hub(new GridHubConfiguration()));
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
 
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);

File: java/server/test/org/openqa/grid/internal/RemoteProxySlowSetup.java
Patch:
@@ -25,7 +25,9 @@
 import org.junit.Test;
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.internal.listeners.RegistrationListener;
+import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
 import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;
+import org.openqa.grid.web.Hub;
 
 public class RemoteProxySlowSetup {
 
@@ -36,7 +38,7 @@ public class RemoteProxySlowSetup {
 
   @Before
   public void setup() {
-    registry = DefaultGridRegistry.newInstance();
+    registry = DefaultGridRegistry.newInstance(new Hub(new GridHubConfiguration()));
     // create 2 proxy that are equal and have a slow onRegistration
     // p1.equals(p2) = true
     GridNodeConfiguration config1 = new GridNodeConfiguration();

File: java/server/test/org/openqa/grid/internal/SmokeTest.java
Patch:
@@ -23,6 +23,8 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.openqa.grid.internal.mock.GridHelper;
+import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
+import org.openqa.grid.web.Hub;
 import org.openqa.grid.web.servlet.handler.RequestHandler;
 import org.openqa.selenium.remote.CapabilityType;
 
@@ -47,7 +49,7 @@ public class SmokeTest {
    */
   @Before
   public void setup() throws Exception {
-    registry = DefaultGridRegistry.newInstance();
+    registry = DefaultGridRegistry.newInstance(new Hub(new GridHubConfiguration()));
     ie.put(CapabilityType.APPLICATION_NAME, "IE");
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
 

File: java/server/test/org/openqa/grid/internal/UserDefinedCapabilityMatcherTests.java
Patch:
@@ -31,7 +31,7 @@ public class UserDefinedCapabilityMatcherTests {
 
   @Test
   public void defaultsToDefaultMatcher() {
-    GridRegistry registry = DefaultGridRegistry.newInstance();
+    GridRegistry registry = DefaultGridRegistry.newInstance(new Hub(new GridHubConfiguration()));
     String[] args = new String[]{"-role", "webdriver","-id", "abc","-host","localhost"};
     GridNodeConfiguration nodeConfiguration = new GridNodeCliOptions().parse(args).toConfiguration();
     RegistrationRequest req = RegistrationRequest.build(nodeConfiguration);

File: java/server/test/org/openqa/grid/internal/listener/CommandListenerTest.java
Patch:
@@ -42,7 +42,9 @@
 import org.openqa.grid.internal.TestSession;
 import org.openqa.grid.internal.listeners.CommandListener;
 import org.openqa.grid.internal.mock.GridHelper;
+import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
 import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;
+import org.openqa.grid.web.Hub;
 import org.openqa.grid.web.servlet.handler.RequestHandler;
 import org.openqa.grid.web.servlet.handler.SeleniumBasedRequest;
 import org.openqa.grid.web.servlet.handler.SeleniumBasedResponse;
@@ -152,7 +154,7 @@ public void prepare() {
 
   @Test
   public void canModifyResponseWithListener() throws IOException {
-    GridRegistry registry = DefaultGridRegistry.newInstance();
+    GridRegistry registry = DefaultGridRegistry.newInstance(new Hub(new GridHubConfiguration()));
     registry.add(new MyRemoteProxy(req, registry));
 
     RequestHandler req = GridHelper.createNewSessionHandler(registry, app1);

File: java/client/src/org/openqa/selenium/support/ui/Sleeper.java
Patch:
@@ -37,7 +37,7 @@ public interface Sleeper {
    */
   @Deprecated
   default void sleep(Duration duration) throws InterruptedException {
-    sleep(java.time.Duration.of(duration.in(TimeUnit.MILLISECONDS), ChronoUnit.MICROS));
+    sleep(java.time.Duration.of(duration.in(TimeUnit.MILLISECONDS), ChronoUnit.MILLIS));
   }
 
   /**

File: java/client/src/org/openqa/selenium/firefox/Preferences.java
Patch:
@@ -84,7 +84,7 @@ public Preferences(Reader defaults, Reader reader) {
     } finally {
       try {
         Closeables.close(reader, true);
-      } catch (IOException ignoted) {
+      } catch (IOException ignored) {
       }
     }
   }

File: java/client/test/org/openqa/selenium/environment/webserver/AppServerTest.java
Patch:
@@ -49,12 +49,12 @@ public class AppServerTest {
   private static WebDriver driver;
 
   @BeforeClass
-  public static void startDriver() throws Throwable {
+  public static void startDriver() {
     driver = new WebDriverBuilder().get();
   }
 
   @Before
-  public void startServer() throws Throwable {
+  public void startServer() {
     server = new JettyAppServer();
     server.start();
   }
@@ -132,7 +132,7 @@ public void uploadsFile() throws Throwable {
     String FILE_CONTENTS = "Uploaded file";
     File testFile = File.createTempFile("webdriver", "tmp");
     testFile.deleteOnExit();
-    Files.write(FILE_CONTENTS, testFile, StandardCharsets.UTF_8);
+    Files.asCharSink(testFile, StandardCharsets.UTF_8).write(FILE_CONTENTS);
 
     driver.get(server.whereIs("upload.html"));
     driver.findElement(By.id("upload")).sendKeys(testFile.getAbsolutePath());

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -314,11 +314,10 @@ public void testSendingKeysToAnotherElementShouldCauseTheBlurEventToFire() {
 
   @Test
   @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/906")
-  @NotYetImplemented(SAFARI)
+  @Ignore(value = SAFARI, reason = "Allows only one instance")
   public void testSendingKeysToAnotherElementShouldCauseTheBlurEventToFireInNonTopmostWindow() {
     assumeFalse(browserNeedsFocusOnThisOs(driver));
 
-    removeDriver();
     WebDriver driver2 = new WebDriverBuilder().get();
     try {
       // topmost

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -50,7 +50,7 @@
 
 public class GridNodeConfiguration extends GridConfiguration {
   public static final String DEFAULT_NODE_CONFIG_FILE = "org/openqa/grid/common/defaults/DefaultNodeWebDriver.json";
-  public static final String CONFIG_UUID_CAPABILITY = "se:CONFIG_UUID";
+  public static final String CONFIG_UUID_CAPABILITY = "server:CONFIG_UUID";
 
   /*
    * IMPORTANT - Keep these constant values in sync with the ones specified in

File: java/server/src/org/openqa/grid/selenium/node/ChromeMutator.java
Patch:
@@ -29,7 +29,7 @@
 
 public class ChromeMutator implements Function<Capabilities, Capabilities> {
 
-  private static final String CONFIG_UUID_CAPABILITY = "se:CONFIG_UUID";
+  private static final String CONFIG_UUID_CAPABILITY = "server:CONFIG_UUID";
 
   private final Capabilities config;
 

File: java/server/src/org/openqa/grid/selenium/node/FirefoxMutator.java
Patch:
@@ -31,7 +31,7 @@
 
 public class FirefoxMutator implements Function<Capabilities, Capabilities> {
 
-  private static final String CONFIG_UUID_CAPABILITY = "se:CONFIG_UUID";
+  private static final String CONFIG_UUID_CAPABILITY = "server:CONFIG_UUID";
 
   private final Capabilities config;
 

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -218,7 +218,7 @@ private NewSessionPipeline createPipeline(StandaloneConfiguration configuration)
             builder.addCapabilitiesMutator(new ChromeMutator(caps));
             builder.addCapabilitiesMutator(new FirefoxMutator(caps));
             builder.addCapabilitiesMutator(c -> new ImmutableCapabilities(c.asMap().entrySet().stream()
-                .filter(e -> ! e.getKey().startsWith("se:"))
+                .filter(e -> ! e.getKey().startsWith("server:"))
                 .filter(e -> e.getValue() != null)
                 .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue))));
           }

File: java/client/test/org/openqa/selenium/safari/CrossDomainTest.java
Patch:
@@ -45,7 +45,7 @@ public class CrossDomainTest extends JUnit4TestBase {
 
   @AfterClass
   public static void quitDriver() {
-    JUnit4TestBase.removeDriver();
+    removeDriver();
   }
 
 

File: java/client/test/org/openqa/selenium/safari/SafariDriverTests.java
Patch:
@@ -28,8 +28,8 @@
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
-    StandardSeleniumTests.class,
-    AlertsTest.class,
+    //StandardSeleniumTests.class,
+    //AlertsTest.class,
     CleanSessionTest.class,
     CrossDomainTest.class,
     SafariOptionsTest.class,

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -234,7 +234,6 @@ public void testWillSimulateAKeyPressWhenEnteringTextIntoTextAreas() {
   }
 
   @Test
-  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1433463")
   @NotYetImplemented(value = SAFARI, reason = "getText does not normalize spaces")
   public void testShouldFireFocusKeyEventsInTheRightOrder() {
     driver.get(pages.javascriptPage);

File: java/client/test/org/openqa/selenium/firefox/FirefoxProfileTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.openqa.selenium.io.FileHandler;
 import org.openqa.selenium.io.Zip;
 import org.openqa.selenium.testing.InProject;
-import org.openqa.selenium.testing.drivers.Firebug;
+import org.openqa.selenium.testing.drivers.SynthesizedFirefoxDriver;
 
 import java.io.BufferedReader;
 import java.io.File;
@@ -190,7 +190,7 @@ public void shouldInstallWebExtensionFromDirectory() throws IOException {
 
   @Test
   public void shouldInstallExtensionUsingClasspath() throws IOException {
-    profile.addExtension(Firebug.class, FIREBUG_RESOURCE_PATH);
+    profile.addExtension(SynthesizedFirefoxDriver.class, FIREBUG_RESOURCE_PATH);
     File profileDir = profile.layoutOnDisk();
     File extensionDir = new File(profileDir, "extensions/firebug@software.joehewitt.com");
     assertTrue(extensionDir.exists());

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -85,7 +85,7 @@ public SeleniumServer(StandaloneConfiguration configuration) {
 
   public int getRealPort() {
     if (server.isStarted()) {
-      ServerConnector socket = (ServerConnector)server.getConnectors()[0];
+      ServerConnector socket = (ServerConnector) server.getConnectors()[0];
       return socket.getPort();
     }
     return configuration.port;

File: java/server/src/org/openqa/grid/internal/RemoteProxy.java
Patch:
@@ -172,7 +172,7 @@ default TestSlot createTestSlot(SeleniumProtocol protocol, Map<String, Object> c
    * @deprecated Use {@link #getProxyStatus()}.
    */
   @Deprecated
-  JsonObject getStatus() ;
+  JsonObject getStatus();
 
   Map<String, Object> getProxyStatus();
 

File: java/server/src/org/openqa/grid/internal/ActiveTestSessions.java
Patch:
@@ -32,7 +32,6 @@
 import java.util.logging.Logger;
 
 import javax.management.MalformedObjectNameException;
-import javax.management.ObjectName;
 
 /**
  * The set of active test sessions.

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -34,6 +34,7 @@
 import org.openqa.grid.web.servlet.handler.SeleniumBasedResponse;
 import org.openqa.grid.web.servlet.handler.WebDriverRequest;
 import org.openqa.selenium.json.Json;
+import org.openqa.selenium.json.JsonException;
 import org.openqa.selenium.remote.ErrorCodes;
 import org.openqa.selenium.remote.http.HttpClient;
 import org.openqa.selenium.remote.http.HttpMethod;
@@ -326,7 +327,7 @@ private byte[] closeSessionIfNecessary(
 
     try (InputStream in = new ByteArrayInputStream(consumed);
          Reader reader = new InputStreamReader(in, proxyResponse.getContentEncoding())) {
-      Object body = new Json().newInput(reader).read(Object.class);new GsonBuilder().setLenient().create().fromJson(reader, Object.class);
+      Object body = new Json().newInput(reader).read(Object.class);
       if (body instanceof Map) {
         Map<?, ?> json = (Map<?, ?>) body;
         Object raw = json.get("status");
@@ -344,7 +345,7 @@ private byte[] closeSessionIfNecessary(
           }
         }
       }
-    } catch (JsonParseException e) {
+    } catch (JsonException e) {
       // Nothing to do --- poorly formed payload.
     }
 

File: java/client/src/org/openqa/selenium/remote/internal/ApacheHttpClient.java
Patch:
@@ -220,10 +220,8 @@ private HttpHost getHost(HttpUriRequest method) {
     synchronized (cachedHosts) {
       Map.Entry<String, Integer> entry =
           new AbstractMap.SimpleImmutableEntry<>(host, port);
-      HttpHost
-          httpHost =
+      HttpHost httpHost =
           cachedHosts.computeIfAbsent(entry, e -> new HttpHost(e.getKey(), e.getValue()));
-      System.out.println("cachedHosts = " + cachedHosts);
       return httpHost;
     }
   }

File: java/server/test/org/openqa/grid/e2e/misc/Grid1HeartbeatTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.openqa.selenium.remote.http.HttpClient;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;
-import org.openqa.selenium.remote.internal.OkHttpClient;
 import org.openqa.selenium.remote.server.SeleniumServer;
 
 import java.net.URL;
@@ -55,7 +54,7 @@ public void testIsNotRegistered() throws Exception {
 
     HttpRequest request = new HttpRequest(GET, heartbeatUrl.toString());
 
-    HttpClient client = new OkHttpClient.Factory().createClient(hub.getUrl());
+    HttpClient client = HttpClient.Factory.createDefault().createClient(hub.getUrl());
     HttpResponse response = client.execute(request);
 
     assertEquals(200, response.getStatus());
@@ -83,7 +82,7 @@ public void testIsRegistered() throws Exception {
 
     HttpRequest request = new HttpRequest(GET, heartbeatUrl.toString());
 
-    HttpClient client = new OkHttpClient.Factory().createClient(hub.getUrl());
+    HttpClient client = HttpClient.Factory.createDefault().createClient(hub.getUrl());
     HttpResponse response = client.execute(request);
 
     assertEquals(200, response.getStatus());

File: java/server/test/org/openqa/grid/internal/StatusServletTests.java
Patch:
@@ -45,7 +45,6 @@
 import org.openqa.selenium.remote.http.HttpClient;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;
-import org.openqa.selenium.remote.internal.OkHttpClient;
 
 import java.io.IOException;
 import java.net.URL;
@@ -76,7 +75,7 @@ public void setup() throws Exception {
     c.host = "localhost";
     hub = new Hub(c);
     GridRegistry registry = hub.getRegistry();
-    client = new OkHttpClient.Factory().createClient(hub.getUrl());
+    client = HttpClient.Factory.createDefault().createClient(hub.getUrl());
     hubApi = hub.getUrl("/grid/api/hub");
     proxyApi = hub.getUrl("/grid/api/proxy");
     testSessionApi = hub.getUrl("/grid/api/testsession");

File: java/client/src/org/openqa/selenium/remote/internal/OkHttpClient.java
Patch:
@@ -96,7 +96,7 @@ public HttpResponse execute(HttpRequest request, boolean followRedirects) throws
         break;
 
       case POST:
-        String rawType = Optional.of(request.getHeader("Content-Type"))
+        String rawType = Optional.ofNullable(request.getHeader("Content-Type"))
             .orElse("application/json; charset=utf-8");
         MediaType type = MediaType.parse(rawType);
         RequestBody body = RequestBody.create(type, request.getContent());

File: java/server/src/org/openqa/selenium/remote/server/Passthrough.java
Patch:
@@ -105,7 +105,7 @@ public void handle(HttpRequest req, HttpResponse resp) throws IOException {
           Writer out = new OutputStreamWriter(os, UTF_8)) {
         CharStreams.copy(in, out);
       }
-      LOG.info("To upstream: " + logWriter.toString());
+      LOG.fine("To upstream: " + logWriter.toString());
     }
 
     resp.setStatus(connection.getResponseCode());
@@ -129,7 +129,7 @@ public void handle(HttpRequest req, HttpResponse resp) throws IOException {
     String charSet = connection.getContentEncoding() != null ? connection.getContentEncoding() : UTF_8.name();
      try (Reader reader = new InputStreamReader(in, charSet)) {
       String content = CharStreams.toString(reader);
-      LOG.info("To downstream: " + content);
+      LOG.fine("To downstream: " + content);
       resp.setContent(content.getBytes(charSet));
     } finally {
       in.close();

File: java/server/src/org/openqa/selenium/remote/server/WebDriverServlet.java
Patch:
@@ -201,7 +201,7 @@ public ServletInputStream getInputStream() throws IOException {
   private void handle(HttpServletRequest req, HttpServletResponse resp) {
     CommandHandler handler = handlers.match(req);
 
-    LOG.info("Found handler: " + handler);
+    LOG.fine("Found handler: " + handler);
 
     boolean invalidateSession =
         handler instanceof ActiveSession &&
@@ -233,7 +233,7 @@ private void handle(HttpServletRequest req, HttpServletResponse resp) {
 
           Thread.currentThread().setName(pathInfo);
         }
-        LOG.info(String.format(
+        LOG.fine(String.format(
             "%s: Executing %s on %s (handler: %s)",
             Thread.currentThread().getName(),
             req.getMethod(),

File: java/client/src/org/openqa/selenium/ContextAware.java
Patch:
@@ -37,17 +37,17 @@ public interface ContextAware {
 
   /**
    * Return a set of context handles which can be used to iterate over all contexts of this
-   * WebDriver instance
+   * WebDriver instance.
    *
    * @return A set of context handles which can be used to iterate over available contexts.
    */
   Set<String> getContextHandles();
 
   /**
    * Return an opaque handle to this context that uniquely identifies it within this driver
-   * instance. This can be used to switch to this context at a later date
+   * instance. This can be used to switch to this context at a later date.
    *
-   * @return The current context handle
+   * @return The current context handle.
    */
   String getContext();
 }

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java
Patch:
@@ -337,8 +337,8 @@ public void testMergeWithRealValues() {
     assertSame(other.capabilities, gnc.capabilities);
     assertEquals(other.id, gnc.id);
     assertEquals(other.downPollingLimit, gnc.downPollingLimit);
-    assertEquals(other.hub, gnc.hub);
-    assertEquals(other.hubHost, gnc.hubHost);
+    assertEquals(other.getHubHost(), gnc.getHubHost());
+    assertEquals(other.getHubPort(), gnc.getHubPort());
     assertEquals(other.nodePolling, gnc.nodePolling);
     assertEquals(other.nodeStatusCheckTimeout, gnc.nodeStatusCheckTimeout);
     assertEquals(other.proxy, gnc.proxy);

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -394,8 +394,8 @@ public void merge(GridNodeConfiguration other) {
     if (isMergeAble(other.downPollingLimit, downPollingLimit)) {
       downPollingLimit = other.downPollingLimit;
     }
-    if (isMergeAble(other.hub, hub)) {
-      hub = other.hub;
+    if (isMergeAble(other.hubOption, hubOption)) {
+      hubOption = other.hubOption;
     }
     if (isMergeAble(other.hubHost, hubHost)) {
       hubHost = other.hubHost;

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -49,7 +49,7 @@
 public class ClickTest extends JUnit4TestBase {
 
   @Before
-  public void setUp() throws Exception {
+  public void setUp() {
     driver.get(pages.clicksPage);
   }
 
@@ -365,7 +365,6 @@ public void testShouldBeAbleToClickOnAPartiallyOverlappedLinkThatWrapsToTheNextL
   }
 
   @Test
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/615")
   public void clickingOnADisabledElementIsANoOp() {
     driver.get(appServer.whereIs("click_tests/disabled_element.html"));
 

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium;
 
+import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.instanceOf;
@@ -469,7 +470,6 @@ public void testClickEventsShouldBubble() {
 
   @Test
   @Ignore(IE)
-  @Ignore(MARIONETTE)
   @Ignore(SAFARI)
   @Ignore(HTMLUNIT)
   public void testClickOverlappingElements() {
@@ -478,7 +478,8 @@ public void testClickOverlappingElements() {
     WebElement element = driver.findElement(By.id("under"));
     Throwable t = catchThrowable(element::click);
     assertThat(t, instanceOf(WebDriverException.class));
-    assertThat(t.getMessage(), containsString("Other element would receive the click"));
+    assertThat(t.getMessage(), anyOf(containsString("Other element would receive the click"),
+                                     containsString("is not clickable at point")));
   }
 
   @Test
@@ -528,7 +529,6 @@ public void testNativelyClickOverlappingElements() {
   @Test
   @Ignore(SAFARI)
   @Ignore(HTMLUNIT)
-  @Ignore(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1417821")
   public void testClickAnElementThatDisappear() {
     assumeFalse(isOldIe(driver));
     driver.get(appServer.whereIs("click_tests/disappearing_element.html"));

File: java/client/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -787,7 +787,6 @@ public void testShouldNotBeAbleToLocateASingleElementOnABlankPage() {
 
   @SwitchToTopAfterTest
   @Test
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/934")
   public void testAnElementFoundInADifferentFrameIsStale() {
     driver.get(pages.missedJsReferencePage);
     driver.switchTo().frame("inner");

File: java/client/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -50,7 +50,7 @@
 public class FrameSwitchingTest extends JUnit4TestBase {
 
   @After
-  public void tearDown() throws Exception {
+  public void tearDown() {
     try {
       driver.switchTo().defaultContent();
     } catch (Exception e) {
@@ -299,8 +299,7 @@ public void testShouldContinueToReferToTheSameFrameOnceItHasBeenSelected() {
 
   @Test
   @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/614")
-  public void testShouldFocusOnTheReplacementWhenAFrameFollowsALinkToA_TopTargetedPage()
-      throws Exception {
+  public void testShouldFocusOnTheReplacementWhenAFrameFollowsALinkToA_TopTargetedPage() {
     driver.get(pages.framesetPage);
 
     driver.switchTo().frame(0);

File: java/client/test/org/openqa/selenium/StaleElementReferenceTest.java
Patch:
@@ -24,14 +24,11 @@
 import static org.openqa.selenium.testing.TestUtilities.catchThrowable;
 
 import org.junit.Test;
-import org.openqa.selenium.testing.Driver;
-import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 
 public class StaleElementReferenceTest extends JUnit4TestBase {
 
   @Test
-  @Ignore(value = Driver.MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1410799")
   public void testOldPage() {
     driver.get(pages.simpleTestPage);
     WebElement elem = driver.findElement(By.id("links"));

File: java/client/test/org/openqa/selenium/UploadTest.java
Patch:
@@ -95,11 +95,10 @@ public void testCleanFileInput() throws Exception {
 
   @Test
   @Ignore(IE)
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/1011")
   @Ignore(CHROME)
   @Ignore(SAFARI)
   @Ignore(HTMLUNIT)
-  public void testClickFileInput() throws Exception {
+  public void testClickFileInput() {
     driver.get(pages.uploadPage);
     WebElement element = driver.findElement(By.id("upload"));
     Throwable ex = catchThrowable(element::click);

File: java/client/test/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -229,7 +229,6 @@ public void testSendingKeyboardEventsShouldAppendTextInInputs() {
   }
 
   @Test
-  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1433422")
   public void testSendingKeyboardEventsShouldAppendTextInInputsWithExistingValue() {
     driver.get(pages.formPage);
     WebElement element = driver.findElement(By.id("inputWithText"));

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -196,6 +196,7 @@ public void testShouldFollowMetaRedirects() throws Exception {
   }
 
   @Test
+  @Ignore(value = CHROME, issue = "https://bugs.chromium.org/p/chromedriver/issues/detail?id=2239")
   public void testShouldBeAbleToGetAFragmentOnTheCurrentPage() {
     driver.get(pages.xhtmlTestPage);
     driver.get(pages.xhtmlTestPage + "#text");

File: java/client/test/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -229,6 +229,7 @@ public void testSendingKeyboardEventsShouldAppendTextInInputs() {
   }
 
   @Test
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1433422")
   public void testSendingKeyboardEventsShouldAppendTextInInputsWithExistingValue() {
     driver.get(pages.formPage);
     WebElement element = driver.findElement(By.id("inputWithText"));

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -228,6 +228,7 @@ public void testWillSimulateAKeyPressWhenEnteringTextIntoTextAreas() {
   }
 
   @Test
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1433463")
   public void testShouldFireFocusKeyEventsInTheRightOrder() {
     driver.get(pages.javascriptPage);
 

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -277,7 +277,6 @@ public void testShouldFireTwoClickEventsWhenClickingOnALabel() {
   }
 
   @Test
-  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1430571")
   public void testClearingAnElementShouldCauseTheOnChangeHandlerToFire() {
     driver.get(pages.javascriptPage);
 

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java
Patch:
@@ -187,8 +187,7 @@ public void testAsJson() {
                  + "\"debug\":false,"
                  + "\"port\":5555,"
                  + "\"role\":\"node\","
-                 + "\"timeout\":1800,"
-                 + "\"enablePassThrough\":true}", gnc.toJson().toString());
+                 + "\"timeout\":1800}", gnc.toJson().toString());
   }
 
   @Test

File: java/client/src/org/openqa/selenium/remote/internal/OkHttpClient.java
Patch:
@@ -57,7 +57,8 @@ public HttpResponse execute(HttpRequest request, boolean followRedirects) throws
 
     HttpUrl.Builder url;
     try {
-      url = HttpUrl.parse(baseUrl.toString() + request.getUri()).newBuilder();
+      String rawUrl = baseUrl.toExternalForm().replaceAll("/$", "") + request.getUri();
+      url = HttpUrl.parse(rawUrl).newBuilder();
     } catch (NullPointerException e) {
       throw new IOException("Unable to parse URL: " + baseUrl.toString() + request.getUri());
     }

File: java/client/test/org/openqa/selenium/environment/webserver/JettyAppServer.java
Patch:
@@ -33,7 +33,6 @@
 import org.openqa.selenium.remote.http.HttpMethod;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;
-import org.openqa.selenium.remote.internal.ApacheHttpClient;
 import org.openqa.selenium.testing.InProject;
 import org.seleniumhq.jetty9.http.HttpVersion;
 import org.seleniumhq.jetty9.http.MimeTypes;
@@ -206,7 +205,7 @@ public String create(Page page) {
       converted.addProperty("content", page.toString());
       byte[] data = converted.toString().getBytes(UTF_8);
 
-      HttpClient client = new ApacheHttpClient.Factory().createClient(new URL(whereIs("/")));
+      HttpClient client = HttpClient.Factory.createDefault().createClient(new URL(whereIs("/")));
       HttpRequest request = new HttpRequest(HttpMethod.POST, "/common/createPage");
       request.setHeader(CONTENT_TYPE, JSON_UTF_8.toString());
       request.setContent(data);

File: java/client/test/org/openqa/selenium/testing/drivers/GridSupplier.java
Patch:
@@ -27,7 +27,6 @@
 import org.openqa.selenium.remote.http.HttpMethod;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;
-import org.openqa.selenium.remote.internal.ApacheHttpClient;
 import org.openqa.selenium.support.ui.FluentWait;
 import org.openqa.selenium.support.ui.Wait;
 
@@ -82,7 +81,7 @@ private synchronized void startServers() {
     }
 
     // Keep polling the status page of the hub until it claims to be ready
-    HttpClient client = new ApacheHttpClient.Factory().createClient(hub.getWebDriverUrl());
+    HttpClient client = HttpClient.Factory.createDefault().createClient(hub.getWebDriverUrl());
     Json json = new Json();
     Wait<HttpClient> wait = new FluentWait<>(client)
         .ignoring(RuntimeException.class)

File: java/server/src/org/openqa/selenium/remote/server/RemoteSession.java
Patch:
@@ -45,7 +45,6 @@
 import org.openqa.selenium.remote.http.JsonHttpResponseCodec;
 import org.openqa.selenium.remote.http.W3CHttpCommandCodec;
 import org.openqa.selenium.remote.http.W3CHttpResponseCodec;
-import org.openqa.selenium.remote.internal.ApacheHttpClient;
 
 import java.io.File;
 import java.io.IOException;
@@ -136,7 +135,7 @@ protected Optional<ActiveSession> performHandshake(
         Set<Dialect> downstreamDialects,
         Capabilities capabilities) {
       try {
-        HttpClient client = new ApacheHttpClient.Factory().createClient(url);
+        HttpClient client = HttpClient.Factory.createDefault().createClient(url);
 
         Command command = new Command(
             null,

File: java/client/src/org/openqa/selenium/json/Json.java
Patch:
@@ -46,6 +46,7 @@ public class Json {
       .registerTypeAdapterFactory(MapAdapter.FACTORY)
       .setLenient()
       .serializeNulls()
+      .disableHtmlEscaping()
       .create();
 
   public static final Type LIST_OF_MAPS_TYPE = new TypeToken<List<Map<String, Object>>>() {}.getType();

File: java/client/src/org/openqa/selenium/AbstractCapabilities.java
Patch:
@@ -104,7 +104,6 @@ public Map<String, Object> asMap() {
 
   /**
    * Subclasses can use this to add information that isn't always in the capabilities map.
-   * @return
    */
   protected int amendHashCode() {
     return 0;

File: java/client/src/org/openqa/selenium/Rotatable.java
Patch:
@@ -39,8 +39,6 @@ public interface Rotatable {
   
   /**
    * Changes the rotation of the browser window.
-   * 
-   * @param rotation
    */
   void rotate(DeviceRotation rotation);
   

File: java/client/src/org/openqa/selenium/edge/EdgeDriver.java
Patch:
@@ -147,7 +147,7 @@ public EdgeDriver(EdgeDriverService service, EdgeOptions options) {
 	   *
 	   * @param service The service to use.
 	   * @param capabilities The capabilities required from the EdgeDriver.
-     * @deprecated Use {@link EdgeDriver(EdgeDriverService, EdgeOptions)}
+     * @deprecated Use {@link #EdgeDriver(EdgeDriverService, EdgeOptions)}
 	   */
 		@Deprecated
 	  public EdgeDriver(EdgeDriverService service, Capabilities capabilities) {

File: java/client/src/org/openqa/selenium/firefox/FirefoxBinary.java
Patch:
@@ -148,8 +148,6 @@ public FirefoxBinary(File pathToFirefoxBinary) {
    *     .usingFirefoxBinary(new FirefoxBinary(new File("path/to/firefox.exe")))
    *     .withEnvironment(ImmutableMap.of("DISPLAY", "0:0"))
    *     .build());
-   * @param propertyName
-   * @param value
    */
   @Deprecated
   public void setEnvironmentProperty(String propertyName, String value) {

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -99,15 +99,15 @@ public FirefoxDriver() {
   }
 
   /**
-   * @deprecated Use {@link FirefoxDriver(FirefoxOptions)}.
+   * @deprecated Use {@link #FirefoxDriver(FirefoxOptions)}.
    */
   @Deprecated
   public FirefoxDriver(Capabilities desiredCapabilities) {
     this(new FirefoxOptions(Objects.requireNonNull(desiredCapabilities, "No capabilities seen")));
   }
 
   /**
-   * @deprecated Use {@link FirefoxDriver(GeckoDriverService, FirefoxOptions)}.
+   * @deprecated Use {@link #FirefoxDriver(GeckoDriverService, FirefoxOptions)}.
    */
   @Deprecated
   public FirefoxDriver(GeckoDriverService service, Capabilities desiredCapabilities) {

File: java/client/src/org/openqa/selenium/ie/InternetExplorerDriver.java
Patch:
@@ -153,7 +153,7 @@ public InternetExplorerDriver() {
   }
 
   /**
-   * @deprecated Use {@link InternetExplorerDriver(InternetExplorerOptions)}
+   * @deprecated Use {@link #InternetExplorerDriver(InternetExplorerOptions)}
    */
   @Deprecated
   public InternetExplorerDriver(Capabilities capabilities) {
@@ -179,7 +179,7 @@ public InternetExplorerDriver(InternetExplorerDriverService service) {
   }
 
   /**
-   * @deprecated Use {@link InternetExplorerDriver(InternetExplorerDriverService, InternetExplorerOptions)}
+   * @deprecated Use {@link #InternetExplorerDriver(InternetExplorerDriverService, InternetExplorerOptions)}
    */
   @Deprecated
   public InternetExplorerDriver(InternetExplorerDriverService service, Capabilities capabilities) {

File: java/client/src/org/openqa/selenium/opera/OperaDriver.java
Patch:
@@ -132,7 +132,7 @@ public OperaDriver(OperaDriverService service) {
    *
    * @param capabilities The capabilities required from the OperaDriver.
    * @see #OperaDriver(OperaDriverService, Capabilities)
-   * @deprecated Use {@link OperaDriver(OperaOptions)} instead.
+   * @deprecated Use {@link #OperaDriver(OperaOptions)} instead.
    */
   @Deprecated
   public OperaDriver(Capabilities capabilities) {
@@ -166,7 +166,7 @@ public OperaDriver(OperaDriverService service, OperaOptions options) {
    *
    * @param service The service to use.
    * @param capabilities The capabilities required from the OperaDriver.
-   * @deprecated Use {@link OperaDriver(OperaDriverService, OperaOptions)} instead.
+   * @deprecated Use {@link #OperaDriver(OperaDriverService, OperaOptions)} instead.
    */
   @Deprecated
   public OperaDriver(OperaDriverService service, Capabilities capabilities) {

File: java/client/src/org/openqa/selenium/remote/http/HttpClient.java
Patch:
@@ -33,7 +33,7 @@ public interface HttpClient {
    * @return the final response.
    * @throws IOException if an I/O error occurs.
    * @deprecated All call sites found set {@code followRedirects} to {@code true}. Use
-   *   @{link {@link #execute(HttpRequest)}}.
+   *   {@link #execute(HttpRequest)}.
    */
   @Deprecated
   HttpResponse execute(HttpRequest request, boolean followRedirects) throws IOException;

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -654,7 +654,6 @@ public void canSafelyTypeOnElementThatIsRemovedFromTheDomOnKeyPress() {
   }
 
   @Test
-  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1430575")
   public void canClearNumberInputAfterTypingInvalidInput() {
     driver.get(pages.formPage);
     WebElement input = driver.findElement(By.id("age"));

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -37,6 +37,7 @@
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;
 import org.openqa.selenium.remote.internal.ApacheHttpClient;
+import org.openqa.selenium.remote.internal.OkHttpClient;
 
 import java.io.IOException;
 import java.net.MalformedURLException;
@@ -92,7 +93,7 @@ public HttpCommandExecutor(
 
   private static synchronized HttpClient.Factory getDefaultClientFactory() {
     if (defaultClientFactory == null) {
-      defaultClientFactory = new ApacheHttpClient.Factory();
+      defaultClientFactory = new OkHttpClient.Factory();
     }
     return defaultClientFactory;
   }

File: java/client/test/org/openqa/selenium/SelectElementHandlingTest.java
Patch:
@@ -21,7 +21,6 @@
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.testing.Driver.HTMLUNIT;
-import static org.openqa.selenium.testing.Driver.MARIONETTE;
 
 import org.junit.Test;
 import org.openqa.selenium.testing.JUnit4TestBase;
@@ -131,7 +130,6 @@ public void testCanSelectFromMultipleSelectWhereValueIsBelowVisibleRange() {
   }
 
   @Test
-  @NotYetImplemented(MARIONETTE)
   public void testCannotSetDisabledOption() {
     driver.get(pages.selectPage);
     WebElement element = driver.findElement(By.cssSelector("#visibility .disabled"));

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -541,6 +541,7 @@ public void testShouldHandleAlertOnWindowClose() {
 
   @Test
   @Ignore(CHROME)
+  @Ignore(value = HTMLUNIT, reason = "https://github.com/SeleniumHQ/htmlunit-driver/issues/57")
   @NotYetImplemented(value = MARIONETTE,
       reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1279211")
   public void testIncludesAlertTextInUnhandledAlertException() {

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -201,7 +201,7 @@ public boolean boot() {
   }
 
   private NewSessionPipeline createPipeline(StandaloneConfiguration configuration) {
-    NewSessionPipeline.Builder builder = DefaultPipeline.createPipelineWithDefaultFallbacks();
+    NewSessionPipeline.Builder builder = DefaultPipeline.createDefaultPipeline();
 
     if (configuration instanceof GridNodeConfiguration) {
       ((GridNodeConfiguration) configuration).capabilities.forEach(

File: java/server/src/org/openqa/selenium/remote/server/SessionFactory.java
Patch:
@@ -25,5 +25,7 @@
 import java.util.Set;
 
 public interface SessionFactory {
+  boolean isSupporting(Capabilities capabilities);
+
   Optional<ActiveSession> apply(Set<Dialect> downstreamDialects, Capabilities capabilities);
 }

File: java/server/src/org/openqa/selenium/remote/server/WebDriverServlet.java
Patch:
@@ -86,7 +86,7 @@ public void init() {
     NewSessionPipeline pipeline =
         (NewSessionPipeline) getServletContext().getAttribute(NEW_SESSION_PIPELINE_KEY);
     if (pipeline == null) {
-      pipeline = DefaultPipeline.createPipelineWithDefaultFallbacks().create();
+      pipeline = DefaultPipeline.createDefaultPipeline().create();
       getServletContext().setAttribute(NEW_SESSION_PIPELINE_KEY, pipeline);
     }
 

File: java/server/test/org/openqa/selenium/remote/server/RemoteServerTests.java
Patch:
@@ -35,7 +35,6 @@
     CrossDomainRpcLoaderTest.class,
     DefaultSessionTest.class,
     DriverFactoryTest.class,
-    WebDriverServletTest.class,
     NewSessionPayloadTest.class,
     NewSessionPipelineTest.class,
     PassthroughTest.class,
@@ -49,7 +48,8 @@
     org.openqa.selenium.remote.server.commandhandler.UploadFileTest.class,
     ConfigureTimeoutTest.class,
     UrlTemplateTest.class,
-    UtilsTest.class
+    UtilsTest.class,
+    WebDriverServletTest.class
 })
 public class RemoteServerTests {
 }

File: java/server/test/org/openqa/selenium/remote/server/UrlTemplateTest.java
Patch:
@@ -61,7 +61,7 @@ public void itIsFineForTheFirstCharacterToBeAPattern() {
   @Test
   public void aNullMatchDoesNotCauseANullPointerExceptionToBeThrown() {
     try {
-      assertNull(new UrlTemplate("").match(null));
+      assertNull(new UrlTemplate("/").match(null));
     } catch (NullPointerException e) {
       fail("Did not expect an NPE to be thrown");
     }

File: java/server/test/org/openqa/selenium/remote/server/RemoteServerTests.java
Patch:
@@ -36,7 +36,6 @@
     DefaultSessionTest.class,
     DriverFactoryTest.class,
     WebDriverServletTest.class,
-    DriverSessionTest.class,
     NewSessionPayloadTest.class,
     NewSessionPipelineTest.class,
     PassthroughTest.class,

File: java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java
Patch:
@@ -208,7 +208,8 @@ public class StandaloneConfiguration {
   @Parameter(
       names = "-enablePassThrough",
       arity = 1,
-      description = "<Boolean>: Whether or not to use the experimental passthrough mode. Defaults to true."
+      hidden = true,
+      description = "<Boolean> (deprecated): Always true, and value is ignored."
   )
   public boolean enablePassThrough = true;
 

File: java/server/src/org/openqa/selenium/remote/server/InMemorySession.java
Patch:
@@ -138,7 +138,7 @@ public Optional<ActiveSession> apply(Set<Dialect> downstreamDialects, Capabiliti
         WebDriver driver = provider.newInstance(caps);
 
         // Prefer the OSS dialect.
-        Dialect downstream = downstreamDialects.contains(Dialect.OSS) ?
+        Dialect downstream = downstreamDialects.contains(Dialect.OSS) || downstreamDialects.isEmpty() ?
                              Dialect.OSS :
                              downstreamDialects.iterator().next();
         return Optional.of(new InMemorySession(driver, caps, downstream));

File: java/server/test/org/openqa/selenium/remote/server/RemoteServerTests.java
Patch:
@@ -35,7 +35,7 @@
     CrossDomainRpcLoaderTest.class,
     DefaultSessionTest.class,
     DriverFactoryTest.class,
-    DriverServletTest.class,
+    WebDriverServletTest.class,
     DriverSessionTest.class,
     NewSessionPayloadTest.class,
     NewSessionPipelineTest.class,

File: java/server/test/org/openqa/testing/FakeHttpServletResponse.java
Patch:
@@ -157,7 +157,7 @@ public boolean isCommitted() {
   }
 
   public void reset() {
-    throw new UnsupportedOperationException();
+    getHeaders().clear();
   }
 
   public void setLocale(Locale locale) {

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java
Patch:
@@ -180,6 +180,7 @@ public void testAsJson() {
                  + "\"register\":true,"
                  + "\"registerCycle\":5000,"
                  + "\"unregisterIfStillDownAfter\":60000,"
+                 + "\"enablePlatformVerification\":true,"
                  + "\"custom\":{},"
                  + "\"maxSession\":5,"
                  + "\"servlets\":[],"

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -234,7 +234,7 @@ public static RegistrationRequest build(GridNodeConfiguration configuration, Str
     pendingRequest.configuration.fixUpHost();
     // make sure the capabilities are updated with required fields
     pendingRequest.configuration.fixUpCapabilities();
-    pendingRequest.configuration.dropCapabilitiesThatDoenNotMatchCurrentPlatform();
+    pendingRequest.configuration.dropCapabilitiesThatDoesNotMatchCurrentPlatform();
 
     return pendingRequest;
   }

File: java/server/src/org/openqa/selenium/remote/server/DefaultDriverProvider.java
Patch:
@@ -17,9 +17,9 @@
 package org.openqa.selenium.remote.server;
 
 import org.openqa.selenium.Capabilities;
+import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.DesiredCapabilities;
 
 import java.lang.reflect.Constructor;
 import java.util.logging.Level;
@@ -37,7 +37,7 @@ public class DefaultDriverProvider implements DriverProvider {
   private Class<? extends WebDriver> driverClass;
 
   public DefaultDriverProvider(Capabilities capabilities, Class<? extends WebDriver> driverClass) {
-    this.capabilities = new DesiredCapabilities(capabilities);
+    this.capabilities = new ImmutableCapabilities(capabilities);
     this.driverClass = driverClass;
   }
 

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -234,6 +234,7 @@ public static RegistrationRequest build(GridNodeConfiguration configuration, Str
     pendingRequest.configuration.fixUpHost();
     // make sure the capabilities are updated with required fields
     pendingRequest.configuration.fixUpCapabilities();
+    pendingRequest.configuration.dropCapabilitiesThatDoenNotMatchCurrentPlatform();
 
     return pendingRequest;
   }

File: java/server/test/org/openqa/grid/common/RegistrationRequestTest.java
Patch:
@@ -86,7 +86,7 @@ public void testToJson() {
   @Test
   public void basicCommandLineParam() {
     GridNodeConfiguration config = new GridNodeConfiguration();
-    new JCommander(config, "-role", "wd", "-hubHost", "ABC", "-hubPort", "1234","-host","localhost");
+    new JCommander(config, "-role", "wd", "-hubHost", "ABC", "-hubPort", "1234", "-host","localhost");
     RegistrationRequest req = RegistrationRequest.build(config);
 
     assertEquals(GridRole.NODE, GridRole.get(req.getConfiguration().role));
@@ -111,7 +111,7 @@ public void commandLineParamDefault() {
   @Test
   public void commandLineParamDefaultCapabilities() {
     GridNodeConfiguration config = new GridNodeConfiguration();
-    new JCommander(config, "-role", "wd", "-hubHost", "ABC", "-host","localhost");
+    new JCommander(config, "-role", "wd", "-hubHost", "ABC", "-hubPort", "1234", "-host","localhost");
     RegistrationRequest req = RegistrationRequest.build(config);
     assertEquals("ABC", req.getConfiguration().getHubHost());
     assertEquals(config.capabilities.size(), req.getConfiguration().capabilities.size());

File: java/server/src/org/openqa/selenium/remote/server/ServicedSession.java
Patch:
@@ -258,7 +258,8 @@ public Optional<ActiveSession> apply(Set<Dialect> downstreamDialects, Capabiliti
             new SessionId(response.getSessionId()),
             (Map<String, Object>) response.getValue()));
       } catch (IOException | IllegalStateException | NullPointerException e) {
-        throw new SessionNotCreatedException("Cannot establish new session", e);
+        e.printStackTrace();
+        throw new SessionNotCreatedException("Cannot establish new session: " + e.getMessage(), e);
       }
     }
 

File: java/server/src/org/openqa/grid/internal/utils/DefaultCapabilityMatcher.java
Patch:
@@ -115,8 +115,8 @@ public Boolean apply(Map<String, Object> providedCapabilities, Map<String, Objec
       if (! "firefox".equals(requestedCapabilities.get(CapabilityType.BROWSER_NAME))) {
         return true;
       }
-      FirefoxOptions requestedOptions = new FirefoxOptions(new ImmutableCapabilities(requestedCapabilities));
-      if (requestedOptions.isLegacy()) {
+      if (requestedCapabilities.get("marionette") != null
+          && !Boolean.valueOf(requestedCapabilities.get("marionette").toString())) {
         return providedCapabilities.get("marionette") != null
                && !Boolean.valueOf(providedCapabilities.get("marionette").toString());
       } else {

File: java/client/src/org/openqa/selenium/remote/http/AbstractHttpCommandCodec.java
Patch:
@@ -153,7 +153,7 @@ public AbstractHttpCommandCodec() {
 
     defineCommand(UPLOAD_FILE, post("/session/:sessionId/file"));
     defineCommand(SCREENSHOT, get("/session/:sessionId/screenshot"));
-    defineCommand(ELEMENT_SCREENSHOT, get("/session/:sessionId/screenshot/:id"));
+    defineCommand(ELEMENT_SCREENSHOT, get("/session/:sessionId/element/:id/screenshot"));
     defineCommand(GET_TITLE, get("/session/:sessionId/title"));
 
     defineCommand(FIND_ELEMENT, post("/session/:sessionId/element"));

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -32,7 +32,6 @@
 import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeTrue;
 import static org.openqa.selenium.testing.Driver.CHROME;
-import static org.openqa.selenium.testing.Driver.FIREFOX;
 import static org.openqa.selenium.testing.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Driver.IE;
 import static org.openqa.selenium.testing.Driver.MARIONETTE;
@@ -566,7 +565,6 @@ public void shouldHandleObjectThatThatHaveToJSONMethod() {
   @Ignore(CHROME)
   @Ignore(value = IE, issue = "540")
   @Ignore(SAFARI)
-  @Ignore(value = FIREFOX, issue = "540")
   @Ignore(HTMLUNIT)
   public void shouldHandleRecursiveStructures() {
     driver.get(pages.simpleTestPage);

File: java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java
Patch:
@@ -71,6 +71,7 @@ public DefaultRemoteProxy(RegistrationRequest request, GridRegistry registry) {
     unregisterDelay = config.unregisterIfStillDownAfter != null ? config.unregisterIfStillDownAfter : DEFAULT_UNREGISTER_DELAY;
     downPollingLimit = config.downPollingLimit != null ? config.downPollingLimit : DEFAULT_DOWN_POLLING_LIMIT;
 
+    new JMXHelper().unregister(this.getObjectName());
     new JMXHelper().register(this);
   }
 

File: java/server/src/org/openqa/selenium/remote/server/jmx/JMXHelper.java
Patch:
@@ -41,8 +41,7 @@ public void unregister(ObjectName objectName) {
       MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
       try {
         mbs.unregisterMBean(objectName);
-      } catch (Throwable t) {
-        t.printStackTrace();
+      } catch (Throwable ignore) {
       }
     }
   }

File: java/client/test/org/openqa/selenium/SvgElementTest.java
Patch:
@@ -71,7 +71,6 @@ private static WebElement findAppleElement(List<WebElement> textElements) {
 
   @Test
   @Ignore(value = HTMLUNIT, reason="test should enable JavaScript")
-  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1415068")
   public void testShouldClickOnGraphTextElements() {
     assumeFalse("IE version < 9 doesn't support SVG", isOldIe(driver));
 

File: java/client/test/org/openqa/selenium/interactions/BasicKeyboardInterfaceTest.java
Patch:
@@ -38,6 +38,7 @@
 import org.openqa.selenium.support.ui.ExpectedConditions;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.TestUtilities;
 
 /**
@@ -191,6 +192,7 @@ public void canGenerateKeyboardShortcuts() {
   }
 
   @Test
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1422583")
   public void testSelectionSelectBySymbol() {
     driver.get(appServer.whereIs("single_text_input.html"));
 
@@ -213,6 +215,7 @@ public void testSelectionSelectBySymbol() {
 
   @Test
   @Ignore(IE)
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1422583")
   public void testSelectionSelectByWord() {
     assumeFalse(
         "MacOS has alternative keyboard",

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.NoDriverAfterTest;
+import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.SwitchToTopAfterTest;
 
 import java.util.Set;
@@ -261,7 +262,7 @@ public void testCanClickAnImageMapArea() {
 
   @Test
   @Ignore(FIREFOX)
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/901")
+  @NotYetImplemented(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1422272")
   public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {
     String url = appServer.whereIs("click_too_big.html");
     driver.get(url);

File: java/client/src/org/openqa/selenium/interactions/KeyInput.java
Patch:
@@ -50,7 +50,7 @@ public Interaction createKeyUp(int codePoint) {
   public Map<String, Object> encode() {
     Map<String, Object> toReturn = new HashMap<>();
 
-    toReturn.put("type", "key");
+    toReturn.put("type", getInputType().getType());
     toReturn.put("id", name);
 
     return toReturn;

File: java/client/src/org/openqa/selenium/interactions/PointerInput.java
Patch:
@@ -51,7 +51,7 @@ public SourceType getInputType() {
   public Map<String, Object> encode() {
     Map<String, Object> toReturn = new HashMap<>();
 
-    toReturn.put("type", "pointer");
+    toReturn.put("type", getInputType().getType());
     toReturn.put("id", name);
 
     Map<String, Object> parameters = new HashMap<>();

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java
Patch:
@@ -94,7 +94,7 @@ public void testDefaults() {
     assertEquals(GridNodeConfiguration.DEFAULT_HUB, gnc.hub);
     assertEquals(GridNodeConfiguration.DEFAULT_MAX_SESSION, gnc.maxSession);
     assertFalse(gnc.capabilities.isEmpty());
-    assertEquals(3, gnc.capabilities.size());
+    assertEquals(4, gnc.capabilities.size());
     assertNull(gnc.id);
     assertEquals(GridNodeConfiguration.DEFAULT_DOWN_POLLING_LIMIT, gnc.downPollingLimit);
     assertNull(gnc.hubHost);

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -57,7 +57,7 @@
 
 public class GridNodeConfiguration extends GridConfiguration {
   public static final String DEFAULT_NODE_CONFIG_FILE = "defaults/DefaultNodeWebDriver.json";
-  public static final String CONFIG_UUID_CAPABILITY = "_CONFIG_UUID";
+  public static final String CONFIG_UUID_CAPABILITY = "se:CONFIG_UUID";
 
   /*
    * IMPORTANT - Keep these constant values in sync with the ones specified in

File: java/server/src/org/openqa/grid/selenium/node/ChromeMutator.java
Patch:
@@ -29,7 +29,7 @@
 
 public class ChromeMutator implements Function<ImmutableCapabilities, ImmutableCapabilities> {
 
-  private static final String CONFIG_UUID_CAPABILITY = "_CONFIG_UUID";
+  private static final String CONFIG_UUID_CAPABILITY = "se:CONFIG_UUID";
 
   private final Capabilities config;
 

File: java/server/src/org/openqa/grid/selenium/node/FirefoxMutator.java
Patch:
@@ -31,7 +31,7 @@
 
 public class FirefoxMutator implements Function<ImmutableCapabilities, ImmutableCapabilities> {
 
-  private static final String CONFIG_UUID_CAPABILITY = "_CONFIG_UUID";
+  private static final String CONFIG_UUID_CAPABILITY = "se:CONFIG_UUID";
 
   private final Capabilities config;
 

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -45,9 +45,7 @@
 import org.openqa.grid.web.servlet.handler.SeleniumBasedResponse;
 import org.openqa.grid.web.servlet.handler.WebDriverRequest;
 import org.openqa.selenium.remote.ErrorCodes;
-import org.openqa.selenium.remote.server.jmx.JMXHelper;
 import org.openqa.selenium.remote.server.jmx.ManagedAttribute;
-import org.openqa.selenium.remote.server.jmx.ManagedOperation;
 import org.openqa.selenium.remote.server.jmx.ManagedService;
 
 import java.io.BufferedReader;
@@ -682,7 +680,7 @@ public boolean isForwardingRequest() {
 
   public ObjectName getObjectName() throws MalformedObjectNameException {
     return new ObjectName(
-        String.format("org.seleniumhq.qrid:type=TestSession,node=\"%s\",browser=\"%s\",id=%s",
+        String.format("org.seleniumhq.grid:type=TestSession,node=\"%s\",browser=\"%s\",id=%s",
                       getSlot().getRemoteURL(), getRequestedCapabilities().get("browserName"),
                       getInternalKey()));
   }

File: java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java
Patch:
@@ -239,7 +239,7 @@ public void teardown() {
   public ObjectName getObjectName() {
     try {
       return new ObjectName(
-          String.format("org.seleniumhq.qrid:type=RemoteProxy,node=\"%s\"", getRemoteHost()));
+          String.format("org.seleniumhq.grid:type=RemoteProxy,node=\"%s\"", getRemoteHost()));
     } catch (MalformedObjectNameException e) {
       e.printStackTrace();
       return null;

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -58,7 +58,7 @@
  * Jetty server. Main entry point for everything about the grid. <p> Except for unit tests, this
  * should be a singleton.
  */
-@ManagedService(objectName = "org.seleniumhq.qrid:type=Hub", description = "Selenium Grid Hub")
+@ManagedService(objectName = "org.seleniumhq.grid:type=Hub", description = "Selenium Grid Hub")
 public class Hub {
 
   private static final Logger log = Logger.getLogger(Hub.class.getName());

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -528,6 +528,7 @@ public void testNativelyClickOverlappingElements() {
   @Test
   @Ignore(SAFARI)
   @Ignore(HTMLUNIT)
+  @Ignore(value = MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1417821")
   public void testClickAnElementThatDisappear() {
     assumeFalse(isOldIe(driver));
     driver.get(appServer.whereIs("click_tests/disappearing_element.html"));

File: java/client/src/org/openqa/selenium/safari/SafariDriverService.java
Patch:
@@ -60,7 +60,7 @@ public static SafariDriverService createDefaultService(SafariOptions options) {
   }
 
   static SafariDriverService createDefaultService(Capabilities caps) {
-    return createDefaultService(new SafariOptions());
+    return createDefaultService(new SafariOptions(caps));
   }
 
   @Override

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -683,9 +683,9 @@ public boolean isForwardingRequest() {
   public ObjectName getObjectName() {
     try {
       return new ObjectName(
-          String.format("org.seleniumhq.qrid:type=TestSession,nodeHost=%s,nodePort=%s,browser=%s,id=%s",
-                        getSlot().getRemoteURL().getHost(), getSlot().getRemoteURL().getPort(),
-                        getRequestedCapabilities().get("browserName"), getInternalKey()));
+          String.format("org.seleniumhq.qrid:type=TestSession,node=\"%s\",browser=\"%s\",id=%s",
+                        getSlot().getRemoteURL(), getRequestedCapabilities().get("browserName"),
+                        getInternalKey()));
     } catch (MalformedObjectNameException e) {
       e.printStackTrace();
       return null;

File: java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java
Patch:
@@ -239,8 +239,7 @@ public void teardown() {
   public ObjectName getObjectName() {
     try {
       return new ObjectName(
-          String.format("org.seleniumhq.qrid:type=RemoteProxy,nodeHost=%s,nodePort=%s",
-                        getRemoteHost().getHost(), getRemoteHost().getPort()));
+          String.format("org.seleniumhq.qrid:type=RemoteProxy,node=\"%s\"", getRemoteHost()));
     } catch (MalformedObjectNameException e) {
       e.printStackTrace();
       return null;

File: java/client/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -215,7 +215,7 @@ public FirefoxOptions setBinary(String path) {
    * useful when actually starting firefox.
    */
   public FirefoxBinary getBinary() {
-    return getBinaryOrNull().orElse(new FirefoxBinary());
+    return getBinaryOrNull().orElseGet(FirefoxBinary::new);
   }
 
   public Optional<FirefoxBinary> getBinaryOrNull() {

File: java/client/test/org/openqa/selenium/support/pagefactory/DefaultFieldDecoratorTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.interactions.Actions;
 import org.openqa.selenium.interactions.HasInputDevices;
+import org.openqa.selenium.interactions.Interactive;
 import org.openqa.selenium.interactions.Mouse;
 import org.openqa.selenium.interactions.internal.Coordinates;
 import org.openqa.selenium.internal.FindsById;
@@ -182,6 +183,7 @@ public void testDecoratingProxyImplementsRequiredInterfaces() throws Exception {
     final Mouse mouse = mock(Mouse.class);
 
     when(driver.getMouse()).thenReturn(mouse);
+    when(element.getCoordinates()).thenReturn(mock(Coordinates.class));
     when(driver.findElement(By.id("foo"))).thenReturn(element);
 
     Page page = new Page();
@@ -200,7 +202,7 @@ private static class Page {
   }
 
   private interface AllDriver extends WebDriver, FindsById, FindsByLinkText, FindsByName,
-      FindsByXPath, HasInputDevices {
+                                      FindsByXPath, HasInputDevices {
     // Place holder
   }
 

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -234,9 +234,9 @@ public static RegistrationRequest build(GridNodeConfiguration configuration, Str
     }
 
     // make sure we have a valid host
-    pendingRequest.fixUpHost();
+    pendingRequest.configuration.fixUpHost();
     // make sure the capabilities are updated with required fields
-    pendingRequest.fixUpCapabilities();
+    pendingRequest.configuration.fixUpCapabilities();
 
     return pendingRequest;
   }

File: java/server/src/org/openqa/grid/internal/utils/DefaultCapabilityMatcher.java
Patch:
@@ -42,7 +42,6 @@ public DefaultCapabilityMatcher() {
     toConsider.add(CapabilityType.VERSION);
     toConsider.add(CapabilityType.BROWSER_VERSION);
     toConsider.add(CapabilityType.APPLICATION_NAME);
-
   }
 
   /**
@@ -100,7 +99,7 @@ public boolean matches(Map<String, Object> nodeCapability, Map<String, Object> r
     return true;
   }
 
-  Platform extractPlatform(Object o) {
+  private Platform extractPlatform(Object o) {
     if (o == null) {
       return null;
     }

File: java/server/src/org/openqa/grid/internal/Registry.java
Patch:
@@ -80,7 +80,7 @@ public static Registry newInstance() {
   @Deprecated
   public static Registry newInstance(Hub hub, GridHubConfiguration config) {
     Registry registry = new Registry(hub);
-    if (hub.getConfiguration() != config) {
+    if (registry.getHub() != null && registry.getHub().getConfiguration() != config) {
       registry.setConfiguration(config);
     }
     registry.start();

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -510,6 +510,7 @@ public void testClickPartiallyOverlappingElements() {
   @Ignore(FIREFOX)
   @Ignore(SAFARI)
   @Ignore(HTMLUNIT)
+  @Ignore(value = MARIONETTE, reason = "Checks overlapping by default")
   public void testNativelyClickOverlappingElements() {
     assumeFalse(isOldIe(driver));
     driver.get(appServer.whereIs("click_tests/overlapping_elements.html"));

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -178,7 +178,7 @@ protected GeckoDriverService createDriverService(File exe, int port,
             // TODO: This stream is leaked.
             service.sendOutputTo(new FileOutputStream(getLogFile()));
           } else {
-            service.sendOutputTo(ByteStreams.nullOutputStream());
+            service.sendOutputTo(System.err);
           }
         }
         return service;

File: java/server/src/org/openqa/grid/internal/ActiveTestSessions.java
Patch:
@@ -34,7 +34,7 @@
  * The set of active test sessions.
  */
 @ThreadSafe
-class ActiveTestSessions {
+public class ActiveTestSessions {
 
   private static final Logger log = Logger.getLogger(ActiveTestSessions.class.getName());
 

File: java/server/src/org/openqa/grid/internal/NewSessionRequestQueue.java
Patch:
@@ -33,10 +33,10 @@
  * The queue of all incoming "new session" requests to the grid.
  *
  * Currently still uses the readerwriterlock/condition model that is used in the
- * Registry and is tightly coupled to the registry
+ * GridRegistry and is tightly coupled to the registry
  */
 @ThreadSafe
-class NewSessionRequestQueue {
+public class NewSessionRequestQueue {
 
   private static final Logger log = Logger.getLogger(NewSessionRequestQueue.class.getName());
 

File: java/server/src/org/openqa/grid/internal/RemoteProxy.java
Patch:
@@ -65,7 +65,7 @@ default TestSlot createTestSlot(SeleniumProtocol protocol, Map<String, Object> c
    *
    * @return the registry.
    */
-  Registry getRegistry();
+  <T extends GridRegistry> T getRegistry();
 
   /**
    * Returns the capability matcher that will be used to by the remote proxy

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -200,7 +200,7 @@ public String toString() {
 
 
   private HttpClient getClient() {
-    Registry reg = slot.getProxy().getRegistry();
+    GridRegistry reg = slot.getProxy().getRegistry();
     long browserTimeout = TimeUnit.SECONDS.toMillis(reg.getConfiguration().browserTimeout);
     if (browserTimeout > 0) {
       final long selenium_server_cleanup_cycle = browserTimeout / 10;

File: java/server/src/org/openqa/grid/internal/listeners/RegistrationListener.java
Patch:
@@ -23,7 +23,7 @@
 public interface RegistrationListener {
 
   /**
-   * Will be run before the proxy you register is added to the Registry, letting you run the
+   * Will be run before the proxy you register is added to the GridRegistry, letting you run the
    * configuration / validation necessary before the proxy becomes accessible to the clients.
    * <p>
    * If an exception is thrown, the proxy won't be registered.

File: java/server/src/org/openqa/grid/internal/listeners/SelfHealingProxy.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Defines of how the proxy tries to mitigate system errors like network issues etc. When a proxy
  * implements this interface, the polling will start when the proxy is fully registered to the
- * Registry, ie after the Registration.beforeRegistration() is done.
+ * GridRegistry, ie after the Registration.beforeRegistration() is done.
  */
 public interface SelfHealingProxy {
 

File: java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java
Patch:
@@ -22,7 +22,7 @@
 import org.openqa.grid.common.exception.RemoteNotReachableException;
 import org.openqa.grid.common.exception.RemoteUnregisterException;
 import org.openqa.grid.internal.BaseRemoteProxy;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.TestSession;
 import org.openqa.grid.internal.listeners.CommandListener;
 import org.openqa.grid.internal.listeners.SelfHealingProxy;
@@ -58,7 +58,7 @@ public class DefaultRemoteProxy extends BaseRemoteProxy
   private volatile int unregisterDelay = DEFAULT_UNREGISTER_DELAY;
   private volatile int downPollingLimit = DEFAULT_DOWN_POLLING_LIMIT;
 
-  public DefaultRemoteProxy(RegistrationRequest request, Registry registry) {
+  public DefaultRemoteProxy(RegistrationRequest request, GridRegistry registry) {
     super(request, registry);
 
     pollingInterval = config.nodePolling != null ? config.nodePolling : DEFAULT_POLLING_INTERVAL;
@@ -174,7 +174,7 @@ public void onEvent(List<RemoteException> events, RemoteException lastInserted)
       }
       if (e instanceof RemoteUnregisterException) {
         LOG.info(e.getMessage());
-        Registry registry = this.getRegistry();
+        GridRegistry registry = this.getRegistry();
         registry.removeIfPresent(this);
       }
     }

File: java/server/src/org/openqa/grid/web/servlet/DriverServlet.java
Patch:
@@ -24,7 +24,7 @@
 import com.google.gson.JsonObject;
 
 import org.openqa.grid.internal.ExternalSessionKey;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.web.servlet.handler.RequestHandler;
 import org.openqa.grid.web.servlet.handler.SeleniumBasedRequest;
 import org.openqa.grid.web.servlet.handler.WebDriverRequest;
@@ -52,7 +52,7 @@ public DriverServlet() {
     this(null);
   }
 
-  public DriverServlet(Registry registry) {
+  public DriverServlet(GridRegistry registry) {
     super(registry);
   }
 

File: java/server/src/org/openqa/grid/web/servlet/Grid1HeartbeatServlet.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.grid.web.servlet;
 
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 
 import java.io.IOException;
@@ -39,7 +39,7 @@ public Grid1HeartbeatServlet() {
     this(null);
   }
 
-  public Grid1HeartbeatServlet(Registry registry) {
+  public Grid1HeartbeatServlet(GridRegistry registry) {
     super(registry);
   }
 

File: java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java
Patch:
@@ -25,7 +25,7 @@
 import com.google.gson.JsonSyntaxException;
 
 import org.openqa.grid.common.exception.GridException;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 
 import java.io.BufferedReader;
@@ -66,7 +66,7 @@ public HubStatusServlet() {
     super(null);
   }
 
-  public HubStatusServlet(Registry registry) {
+  public HubStatusServlet(GridRegistry registry) {
     super(registry);
   }
 
@@ -108,7 +108,7 @@ private JsonObject getResponse(HttpServletRequest request) throws IOException {
           keysToReturn = new Gson().fromJson(requestJSON.getAsJsonArray("configuration"), ArrayList.class);
         }
 
-        Registry registry = getRegistry();
+        GridRegistry registry = getRegistry();
         JsonElement config = registry.getConfiguration().toJson();
         for (Map.Entry<String, JsonElement> entry : config.getAsJsonObject().entrySet()) {
           if (keysToReturn == null || keysToReturn.isEmpty() || keysToReturn.contains(entry.getKey())) {

File: java/server/src/org/openqa/grid/web/servlet/HubW3CStatusServlet.java
Patch:
@@ -24,7 +24,7 @@
 
 import com.google.common.collect.ImmutableMap;
 
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.selenium.internal.BuildInfo;
 import org.openqa.selenium.json.Json;
@@ -46,9 +46,9 @@
  */
 public class HubW3CStatusServlet extends HttpServlet {
 
-  private final Registry registry;
+  private final GridRegistry registry;
 
-  public HubW3CStatusServlet(Registry registry) {
+  public HubW3CStatusServlet(GridRegistry registry) {
     this.registry = Objects.requireNonNull(registry);
   }
 

File: java/server/src/org/openqa/grid/web/servlet/ProxyStatusServlet.java
Patch:
@@ -24,7 +24,7 @@
 import com.google.gson.JsonSyntaxException;
 
 import org.openqa.grid.common.exception.GridException;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 
 import java.io.BufferedReader;
@@ -49,7 +49,7 @@ public ProxyStatusServlet() {
     this(null);
   }
 
-  public ProxyStatusServlet(Registry registry) {
+  public ProxyStatusServlet(GridRegistry registry) {
     super(registry);
   }
 

File: java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java
Patch:
@@ -27,7 +27,7 @@
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.common.exception.GridConfigurationException;
 import org.openqa.grid.internal.BaseRemoteProxy;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;
 import org.openqa.selenium.MutableCapabilities;
@@ -55,7 +55,7 @@ public RegistrationServlet() {
     this(null);
   }
 
-  public RegistrationServlet(Registry registry) {
+  public RegistrationServlet(GridRegistry registry) {
     super(registry);
   }
 

File: java/server/src/org/openqa/grid/web/servlet/TestSessionStatusServlet.java
Patch:
@@ -24,7 +24,7 @@
 
 import org.openqa.grid.common.exception.GridException;
 import org.openqa.grid.internal.ExternalSessionKey;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.grid.internal.TestSession;
 
@@ -45,7 +45,7 @@ public TestSessionStatusServlet() {
     super(null);
   }
 
-  public TestSessionStatusServlet(Registry registry) {
+  public TestSessionStatusServlet(GridRegistry registry) {
     super(registry);
   }
 

File: java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.common.io.ByteStreams;
 
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.grid.internal.utils.HtmlRenderer;
 import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
@@ -50,7 +50,7 @@ public ConsoleServlet() {
     this(null);
   }
 
-  public ConsoleServlet(Registry registry) {
+  public ConsoleServlet(GridRegistry registry) {
     super(registry);
     coreVersion = new BuildInfo().getReleaseLabel();
   }

File: java/server/src/org/openqa/grid/web/servlet/handler/LegacySeleniumRequest.java
Patch:
@@ -18,7 +18,7 @@
 package org.openqa.grid.web.servlet.handler;
 
 import org.openqa.grid.internal.ExternalSessionKey;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.web.utils.BrowserNameUtils;
 
 import java.io.UnsupportedEncodingException;
@@ -30,7 +30,7 @@
 
 public class LegacySeleniumRequest extends SeleniumBasedRequest {
 
-  public LegacySeleniumRequest(HttpServletRequest httpServletRequest, Registry registry) {
+  public LegacySeleniumRequest(HttpServletRequest httpServletRequest, GridRegistry registry) {
     super(httpServletRequest, registry);
 
   }

File: java/server/src/org/openqa/grid/web/servlet/handler/LegacySeleniumRequestFactory.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.openqa.grid.web.servlet.handler;
 
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 
 import javax.servlet.http.HttpServletRequest;
 
 public class LegacySeleniumRequestFactory implements SeleniumBasedRequestFactory {
-  public SeleniumBasedRequest createFromRequest(HttpServletRequest request, Registry registry) {
+  public SeleniumBasedRequest createFromRequest(HttpServletRequest request, GridRegistry registry) {
     if (! "/selenium-server/driver".equals(request.getServletPath())) {
       return null;
     }

File: java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedRequestFactory.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.openqa.grid.web.servlet.handler;
 
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 
 import javax.servlet.http.HttpServletRequest;
 
 public interface SeleniumBasedRequestFactory {
-  SeleniumBasedRequest createFromRequest(HttpServletRequest request, Registry registry);
+  SeleniumBasedRequest createFromRequest(HttpServletRequest request, GridRegistry registry);
 }

File: java/server/src/org/openqa/grid/web/servlet/handler/WebDriverRequest.java
Patch:
@@ -19,7 +19,7 @@
 
 import org.openqa.grid.common.exception.GridException;
 import org.openqa.grid.internal.ExternalSessionKey;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.remote.NewSessionPayload;
 
@@ -32,7 +32,7 @@
 
 public class WebDriverRequest extends SeleniumBasedRequest {
 
-  public WebDriverRequest(HttpServletRequest httpServletRequest, Registry registry) {
+  public WebDriverRequest(HttpServletRequest httpServletRequest, GridRegistry registry) {
     super(httpServletRequest, registry);
   }
 

File: java/server/src/org/openqa/grid/web/servlet/handler/WebDriverRequestFactory.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.openqa.grid.web.servlet.handler;
 
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 
 import javax.servlet.http.HttpServletRequest;
 
 public class WebDriverRequestFactory implements SeleniumBasedRequestFactory {
-  public SeleniumBasedRequest createFromRequest(HttpServletRequest request, Registry registry) {
+  public SeleniumBasedRequest createFromRequest(HttpServletRequest request, GridRegistry registry) {
     String path = request.getServletPath();
     if (!"/wd/hub".equals(path)) {
       return null;

File: java/server/test/org/openqa/grid/e2e/misc/HubRestart.java
Patch:
@@ -25,7 +25,7 @@
 import org.openqa.grid.common.GridRole;
 import org.openqa.grid.e2e.utils.GridTestHelper;
 import org.openqa.grid.e2e.utils.RegistryTestHelper;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.utils.SelfRegisteringRemote;
 import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
 import org.openqa.grid.web.Hub;
@@ -42,7 +42,7 @@
 public class HubRestart {
 
   private Hub hub;
-  private Registry registry;
+  private GridRegistry registry;
   private SelfRegisteringRemote remote;
   private GridHubConfiguration config = new GridHubConfiguration();
 

File: java/server/test/org/openqa/grid/e2e/misc/HubRestartNeg.java
Patch:
@@ -25,7 +25,7 @@
 import org.openqa.grid.common.GridRole;
 import org.openqa.grid.e2e.utils.GridTestHelper;
 import org.openqa.grid.e2e.utils.RegistryTestHelper;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.utils.SelfRegisteringRemote;
 import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
 import org.openqa.grid.web.Hub;
@@ -42,7 +42,7 @@
  */
 public class HubRestartNeg {
   private Hub hub;
-  private Registry registry;
+  private GridRegistry registry;
   private SelfRegisteringRemote remote;
   private GridHubConfiguration config = new GridHubConfiguration();
 

File: java/server/test/org/openqa/grid/e2e/node/CrashWhenStartingBrowserTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.openqa.grid.common.GridRole;
 import org.openqa.grid.e2e.utils.GridTestHelper;
 import org.openqa.grid.e2e.utils.RegistryTestHelper;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.grid.internal.utils.SelfRegisteringRemote;
 import org.openqa.grid.selenium.proxy.DefaultRemoteProxy;
@@ -50,7 +50,7 @@ public class CrashWhenStartingBrowserTest {
 
   private Hub hub;
   private SelfRegisteringRemote remote;
-  private Registry registry;
+  private GridRegistry registry;
   private Wait<Object> wait = new FluentWait<Object>("").withTimeout(30, SECONDS);
 
   private String proxyId;

File: java/server/test/org/openqa/grid/e2e/node/DefaultProxyFindsFirefoxLocationsTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.openqa.grid.e2e.utils.GridTestHelper;
 import org.openqa.grid.e2e.utils.RegistryTestHelper;
 import org.openqa.grid.internal.ExternalSessionKey;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.TestSession;
 import org.openqa.grid.internal.exception.NewSessionException;
 import org.openqa.grid.internal.utils.SelfRegisteringRemote;
@@ -58,7 +58,7 @@ public class DefaultProxyFindsFirefoxLocationsTest {
   private static final String LOCATION_CHROME_29 = "c:\\program files\\Chrome29.exe";
 
   private Hub hub;
-  private Registry registry;
+  private GridRegistry registry;
   private SelfRegisteringRemote remote;
 
   @Before

File: java/server/test/org/openqa/grid/e2e/node/DefaultProxyIsUnregisteredIfDownForTooLongTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.openqa.grid.common.GridRole;
 import org.openqa.grid.e2e.utils.GridTestHelper;
 import org.openqa.grid.e2e.utils.RegistryTestHelper;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.grid.internal.utils.SelfRegisteringRemote;
 import org.openqa.grid.selenium.proxy.DefaultRemoteProxy;
@@ -43,7 +43,7 @@
 public class DefaultProxyIsUnregisteredIfDownForTooLongTest {
 
   private Hub hub;
-  private Registry registry;
+  private GridRegistry registry;
   private SelfRegisteringRemote remote;
 
   private String proxyId;

File: java/server/test/org/openqa/grid/e2e/node/NodeGoingDownAndUpTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.openqa.grid.common.GridRole;
 import org.openqa.grid.e2e.utils.GridTestHelper;
 import org.openqa.grid.e2e.utils.RegistryTestHelper;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.grid.internal.utils.SelfRegisteringRemote;
 import org.openqa.grid.selenium.proxy.DefaultRemoteProxy;
@@ -39,7 +39,7 @@
 public class NodeGoingDownAndUpTest {
 
   private Hub hub;
-  private Registry registry;
+  private GridRegistry registry;
   private SelfRegisteringRemote remote;
   private Wait<Object> wait = new FluentWait<Object>("").withTimeout(30, SECONDS);
 

File: java/server/test/org/openqa/grid/e2e/node/SlowServlet.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.grid.e2e.node;
 
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.web.servlet.RegistryBasedServlet;
 
 import java.io.IOException;
@@ -36,7 +36,7 @@ public SlowServlet() {
     this(null);
   }
 
-  public SlowServlet(Registry registry) {
+  public SlowServlet(GridRegistry registry) {
     super(registry);
   }
 

File: java/server/test/org/openqa/grid/internal/AddingProxyAgainFreesResources.java
Patch:
@@ -41,7 +41,7 @@
  */
 public class AddingProxyAgainFreesResources {
 
-  private Registry registry;
+  private GridRegistry registry;
 
   private Map<String, Object> ff = new HashMap<>();
   private RemoteProxy p1;
@@ -56,7 +56,7 @@ public class AddingProxyAgainFreesResources {
    */
   @Before
   public void setup() throws Exception {
-    registry = Registry.newInstance();
+    registry = DefaultGridRegistry.newInstance();
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);
     registry.add(p1);

File: java/server/test/org/openqa/grid/internal/DetachedRemoteProxy.java
Patch:
@@ -23,7 +23,7 @@
 import org.openqa.grid.common.exception.GridException;
 
 public class DetachedRemoteProxy extends BaseRemoteProxy {
-  public DetachedRemoteProxy(RegistrationRequest request, Registry registry) {
+  public DetachedRemoteProxy(RegistrationRequest request, GridRegistry registry) {
     super(request, registry);
   }
 

File: java/server/test/org/openqa/grid/internal/GridShutdownTest.java
Patch:
@@ -43,7 +43,7 @@ public void shutdown() throws Exception {
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
     ff.put(MAX_INSTANCES, 1);
 
-    final Registry registry = Registry.newInstance();
+    final GridRegistry registry = DefaultGridRegistry.newInstance();
 
     RemoteProxy p1 =
         RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);

File: java/server/test/org/openqa/grid/internal/MyCustomProxy.java
Patch:
@@ -30,7 +30,7 @@ public class MyCustomProxy extends BaseRemoteProxy {
   public static URL MY_URL;
   public static boolean MY_BOOLEAN = true;
 
-  public MyCustomProxy(RegistrationRequest request, Registry registry) {
+  public MyCustomProxy(RegistrationRequest request, GridRegistry registry) {
 
     super(request, registry);
     try {

File: java/server/test/org/openqa/grid/internal/NewRequestCrashesDuringNewSessionTest.java
Patch:
@@ -36,7 +36,7 @@
 
 public class NewRequestCrashesDuringNewSessionTest {
 
-  private Registry registry;
+  private GridRegistry registry;
   private Map<String, Object> ff = new HashMap<>();
   private RemoteProxy p1;
 
@@ -45,7 +45,7 @@ public class NewRequestCrashesDuringNewSessionTest {
    */
   @Before
   public void setup() throws Exception {
-    registry = Registry.newInstance();
+    registry = DefaultGridRegistry.newInstance();
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
 
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);
@@ -95,7 +95,7 @@ class MockedBuggyNewSessionRequestHandler extends MockedRequestHandler {
 
 
     public MockedBuggyNewSessionRequestHandler(SeleniumBasedRequest request,
-        HttpServletResponse response, Registry registry) {
+        HttpServletResponse response, GridRegistry registry) {
       super(request, response, registry);
     }
 

File: java/server/test/org/openqa/grid/internal/NewSessionRequestTimeout.java
Patch:
@@ -29,7 +29,7 @@
 
 public class NewSessionRequestTimeout {
 
-  private Registry registry;
+  private GridRegistry registry;
   private Map<String, Object> ff = new HashMap<>();
   private RemoteProxy p1;
 
@@ -38,7 +38,7 @@ public class NewSessionRequestTimeout {
    */
   @Before
   public void setup() throws Exception {
-    registry = Registry.newInstance();
+    registry = DefaultGridRegistry.newInstance();
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
 
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);

File: java/server/test/org/openqa/grid/internal/PriorityTest.java
Patch:
@@ -35,7 +35,7 @@
 
 public class PriorityTest {
 
-  private Registry registry;
+  private GridRegistry registry;
 
   // priority rule : the request with the highest priority goes first.
   private static Prioritizer highestNumberHasPriority = new Prioritizer() {
@@ -64,7 +64,7 @@ public int compareTo(Map<String, Object> a, Map<String, Object> b) {
    */
   @Before
   public void setup() throws Exception {
-    registry = Registry.newInstance();
+    registry = DefaultGridRegistry.newInstance();
     registry.getConfiguration().prioritizer = highestNumberHasPriority;
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);
@@ -123,7 +123,7 @@ public void run() {
 
     // free the grid : the queue is consumed, and the test with the highest
     // priority should be processed.
-    registry.terminateSynchronousFOR_TEST_ONLY(session);
+    ((DefaultGridRegistry) registry).terminateSynchronousFOR_TEST_ONLY(session);
 
   }
 

File: java/server/test/org/openqa/grid/internal/PriorityTestLoad.java
Patch:
@@ -41,7 +41,7 @@ public class PriorityTestLoad {
 
   private final static int MAX = 100;
 
-  private Registry registry;
+  private GridRegistry registry;
 
   // priority rule : the request with the highest priority goes first.
   private Prioritizer highestNumberHasPriority = new Prioritizer() {
@@ -64,7 +64,7 @@ public int compareTo(Map<String, Object> a, Map<String, Object> b) {
    */
   @Before
   public void setup() throws Exception {
-    registry = Registry.newInstance();
+    registry = DefaultGridRegistry.newInstance();
     registry.getConfiguration().prioritizer = highestNumberHasPriority;
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
     RemoteProxy
@@ -102,7 +102,7 @@ public void run() {
     }
 
     // release the initial request.
-    registry.terminateSynchronousFOR_TEST_ONLY(session);
+    ((DefaultGridRegistry) registry).terminateSynchronousFOR_TEST_ONLY(session);
   }
 
   // validate that the one with priority MAX has been assigned a proxy

File: java/server/test/org/openqa/grid/internal/RemoteProxySlowSetup.java
Patch:
@@ -32,11 +32,11 @@ public class RemoteProxySlowSetup {
   private RemoteProxy p1;
   private RemoteProxy p2;
 
-  private Registry registry;
+  private GridRegistry registry;
 
   @Before
   public void setup() {
-    registry = Registry.newInstance();
+    registry = DefaultGridRegistry.newInstance();
     // create 2 proxy that are equal and have a slow onRegistration
     // p1.equals(p2) = true
     GridNodeConfiguration config1 = new GridNodeConfiguration();
@@ -89,7 +89,7 @@ private synchronized void updateFlag() {
       flag = true;
     }
 
-    public SlowRemoteSetup(RegistrationRequest req,Registry registry) {
+    public SlowRemoteSetup(RegistrationRequest req,GridRegistry registry) {
       super(req, registry);
     }
 

File: java/server/test/org/openqa/grid/internal/SmokeTest.java
Patch:
@@ -33,7 +33,7 @@
 
 
 public class SmokeTest {
-  private Registry registry;
+  private GridRegistry registry;
 
   private Map<String, Object> ie = new HashMap<>();
   private Map<String, Object> ff = new HashMap<>();
@@ -47,7 +47,7 @@ public class SmokeTest {
    */
   @Before
   public void setup() throws Exception {
-    registry = Registry.newInstance();
+    registry = DefaultGridRegistry.newInstance();
     ie.put(CapabilityType.APPLICATION_NAME, "IE");
     ff.put(CapabilityType.APPLICATION_NAME, "FF");
 

File: java/server/test/org/openqa/grid/internal/StatusServletTests.java
Patch:
@@ -76,7 +76,7 @@ public void setup() throws Exception {
     c.port = PortProber.findFreePort();
     c.host = "localhost";
     hub = new Hub(c);
-    Registry registry = hub.getRegistry();
+    GridRegistry registry = hub.getRegistry();
     httpClientFactory = new HttpClientFactory();
     hubApi = hub.getUrl("/grid/api/hub");
     proxyApi = hub.getUrl("/grid/api/proxy");

File: java/server/test/org/openqa/grid/internal/TestSessionTest.java
Patch:
@@ -35,7 +35,7 @@ public class TestSessionTest {
   @Test
   public void testIsOrphanedSe1() throws Exception {
 
-    Registry registry = Registry.newInstance();
+    GridRegistry registry = DefaultGridRegistry.newInstance();
     try {
       Map<String, Object> ff = new HashMap<>();
       ff.put(CapabilityType.APPLICATION_NAME, "FF");
@@ -60,7 +60,7 @@ public void testIsOrphanedSe1() throws Exception {
   @Test
   public void testIsOrphanedWebDriver() throws Exception {
 
-    Registry registry = Registry.newInstance();
+    GridRegistry registry = DefaultGridRegistry.newInstance();
     try {
       Map<String, Object> ff = new HashMap<>();
       ff.put(CapabilityType.APPLICATION_NAME, "FF");

File: java/server/test/org/openqa/grid/internal/UserDefinedCapabilityMatcherTests.java
Patch:
@@ -32,7 +32,7 @@ public class UserDefinedCapabilityMatcherTests {
 
   @Test
   public void defaultsToDefaultMatcher() {
-    Registry registry = Registry.newInstance();
+    GridRegistry registry = DefaultGridRegistry.newInstance();
     GridNodeConfiguration nodeConfiguration = new GridNodeConfiguration();
     new JCommander(nodeConfiguration, "-role", "webdriver","-id", "abc","-host","localhost");
     RegistrationRequest req = RegistrationRequest.build(nodeConfiguration);
@@ -48,12 +48,12 @@ public void defaultsToDefaultMatcher() {
   public void capabilityMatcherCanBeSpecified() {
     GridHubConfiguration hubConfig = new GridHubConfiguration();
     hubConfig.capabilityMatcher = new MyCapabilityMatcher();
-    Registry registry = Registry.newInstance((Hub)null,hubConfig);
+    Hub hub = new Hub(hubConfig);
     GridNodeConfiguration nodeConfiguration = new GridNodeConfiguration();
     new JCommander(nodeConfiguration, "-role", "webdriver","-id", "abc","-host","localhost");
     RegistrationRequest req = RegistrationRequest.build(nodeConfiguration);
     req.getConfiguration().proxy = null;
-    RemoteProxy p = BaseRemoteProxy.getNewInstance(req, registry);
+    RemoteProxy p = BaseRemoteProxy.getNewInstance(req, hub.getRegistry());
 
     assertEquals(MyCapabilityMatcher.class, p.getCapabilityHelper().getClass());
   }

File: java/server/test/org/openqa/grid/internal/mock/MockedRequestHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.grid.internal.mock;
 
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.TestSession;
 import org.openqa.grid.internal.exception.NewSessionException;
 import org.openqa.grid.web.servlet.handler.RequestHandler;
@@ -32,7 +32,7 @@ public class MockedRequestHandler extends RequestHandler {
   public MockedRequestHandler(
     SeleniumBasedRequest request,
     HttpServletResponse response,
-    Registry registry) {
+    GridRegistry registry) {
     super(request, response, registry);
   }
 

File: java/server/test/org/openqa/grid/plugin/MyRemoteProxy.java
Patch:
@@ -19,14 +19,14 @@
 
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.internal.BaseRemoteProxy;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.GridRegistry;
 
 
 public class MyRemoteProxy extends BaseRemoteProxy {
   private String custom1;
   private String custom2;
 
-  public MyRemoteProxy(RegistrationRequest request, Registry registry) {
+  public MyRemoteProxy(RegistrationRequest request, GridRegistry registry) {
     super(request, registry);
     custom1 = request.getConfiguration().custom.get("Custom1");
     custom2 = request.getConfiguration().custom.get("Custom2");

File: java/server/test/org/openqa/grid/plugin/RemoteProxyInheritanceTest.java
Patch:
@@ -23,7 +23,8 @@
 import org.junit.Test;
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.internal.BaseRemoteProxy;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.DefaultGridRegistry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;
 import org.openqa.selenium.remote.CapabilityType;
@@ -34,7 +35,7 @@
 import java.util.Map;
 
 public class RemoteProxyInheritanceTest {
-  private Registry registry = Registry.newInstance();
+  private GridRegistry registry = DefaultGridRegistry.newInstance();
 
   @Test
   public void defaultToRemoteProxy() {

File: java/server/test/org/openqa/grid/selenium/proxy/DefaultRemoteProxyTest.java
Patch:
@@ -25,7 +25,8 @@
 import org.junit.Test;
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.internal.BaseRemoteProxy;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.DefaultGridRegistry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.TestSession;
 import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;
 
@@ -36,7 +37,7 @@ public class DefaultRemoteProxyTest {
 
   @Test
   public void proxyTimeout() throws InterruptedException {
-    Registry registry = Registry.newInstance();
+    GridRegistry registry = DefaultGridRegistry.newInstance();
     registry.getConfiguration().timeout = 1;
     GridNodeConfiguration nodeConfiguration = new GridNodeConfiguration();
     new JCommander(nodeConfiguration, "-role", "webdriver");

File: java/server/test/org/openqa/grid/web/servlet/ConsoleServletTest.java
Patch:
@@ -25,7 +25,8 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.DefaultGridRegistry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.web.servlet.beta.ConsoleServlet;
 import org.openqa.testing.FakeHttpServletResponse;
 import org.seleniumhq.jetty9.server.handler.ContextHandler;
@@ -44,7 +45,7 @@ public void setUp() throws ServletException {
       @Override
       public ServletContext getServletContext() {
         final ContextHandler.Context servletContext = new ContextHandler().getServletContext();
-        servletContext.setAttribute(Registry.KEY, Registry.newInstance());
+        servletContext.setAttribute(GridRegistry.KEY, DefaultGridRegistry.newInstance());
         return servletContext;
       }
     };

File: java/server/test/org/openqa/grid/web/servlet/RegistrationServletTest.java
Patch:
@@ -28,7 +28,8 @@
 import org.junit.Test;
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.common.exception.GridConfigurationException;
-import org.openqa.grid.internal.Registry;
+import org.openqa.grid.internal.DefaultGridRegistry;
+import org.openqa.grid.internal.GridRegistry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;
 import org.openqa.selenium.remote.DesiredCapabilities;
@@ -73,7 +74,7 @@ public void setUp() throws ServletException {
       @Override
       public ServletContext getServletContext() {
         final ContextHandler.Context servletContext = new ContextHandler().getServletContext();
-        servletContext.setAttribute(Registry.KEY, Registry.newInstance());
+        servletContext.setAttribute(GridRegistry.KEY, DefaultGridRegistry.newInstance());
         return servletContext;
       }
     };

File: java/client/src/org/openqa/selenium/AbstractCapabilities.java
Patch:
@@ -98,7 +98,7 @@ protected void setCapability(String key, Object value) {
   }
 
   @Override
-  public Map<String, ?> asMap() {
+  public Map<String, Object> asMap() {
     return Collections.unmodifiableMap(caps);
   }
 

File: java/client/src/org/openqa/selenium/chrome/ChromeOptions.java
Patch:
@@ -272,7 +272,7 @@ protected int amendHashCode() {
   }
 
   @Override
-  public Map<String, ?> asMap() {
+  public Map<String, Object> asMap() {
     Map<String, Object> toReturn = new TreeMap<>();
     toReturn.putAll(super.asMap());
 

File: java/client/src/org/openqa/selenium/edge/EdgeOptions.java
Patch:
@@ -94,7 +94,7 @@ MutableCapabilities toCapabilities() {
   }
 
   @Override
-  public Map<String, ?> asMap() {
+  public Map<String, Object> asMap() {
     return ImmutableMap.of(CAPABILITY, super.asMap());
   }
 }

File: java/client/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -338,7 +338,7 @@ public void setCapability(String key, Object value) {
   }
 
   @Override
-  public Map<String, ?> asMap() {
+  public Map<String, Object> asMap() {
     TreeMap<String, Object> toReturn = new TreeMap<>();
     toReturn.putAll(super.asMap());
 

File: java/client/src/org/openqa/selenium/opera/OperaOptions.java
Patch:
@@ -207,7 +207,7 @@ public OperaOptions setProxy(Proxy proxy) {
   }
 
   @Override
-  public Map<String, ?> asMap() {
+  public Map<String, Object> asMap() {
     Map<String, Object> toReturn = new TreeMap<>();
     toReturn.putAll(super.asMap());
 

File: java/client/src/org/openqa/selenium/safari/SafariOptions.java
Patch:
@@ -257,7 +257,7 @@ protected int amendHashCode() {
   }
 
   @Override
-  public Map<String, ?> asMap() {
+  public Map<String, Object> asMap() {
     return ImmutableSortedMap.<String, Object>naturalOrder()
         .putAll(super.asMap())
         .put(CAPABILITY, options)

File: java/client/src/org/openqa/selenium/Keys.java
Patch:
@@ -23,7 +23,7 @@
  * Representations of pressable keys that aren't text.  These are stored in the Unicode PUA (Private
  * Use Area) code points, 0xE000-0xF8FF.
  *
- * @see <a href="http://www.google.com.au/search?&amp;q=unicode+pua&amp;btnG=Search">http://www.google.com.au/search?&amp;q=unicode+pua&amp;btnG=Search</a>
+ * @see <a href="http://www.google.com.au/search?&amp;q=unicode+pua&amp;btnK=Search">http://www.google.com.au/search?&amp;q=unicode+pua&amp;btnK=Search</a>
  */
 public enum Keys implements CharSequence {
 

File: java/client/test/com/thoughtworks/selenium/corebased/TestProxy.java
Patch:
@@ -33,7 +33,7 @@ public void testProxy() throws Exception {
     // // TODO(simon): Re-enable this test
     // selenium.open("http://www.google.com/");
     // selenium.type("q", "Selenium");
-    // selenium.click("btnG");
+    // selenium.click("btnK");
     // selenium.waitForPageToLoad("30000");
   }
 }

File: java/server/test/org/openqa/grid/e2e/node/CrashWhenStartingBrowserTest.java
Patch:
@@ -87,8 +87,7 @@ public void serverCrashesStartingFirefox() throws MalformedURLException {
 
     try {
       Capabilities ff = new FirefoxOptions()
-          .setBinary(WRONG_PATH)
-          .addTo(DesiredCapabilities.firefox());
+          .setBinary(WRONG_PATH);
       new RemoteWebDriver(hub.getWebDriverHubRequestURL(), ff);
       fail("Expected WebDriverException to be thrown");
     } catch (SessionNotCreatedException expected) {

File: java/server/src/org/openqa/grid/web/servlet/handler/WebDriverRequest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.grid.web.servlet.handler;
 
-import static java.nio.charset.StandardCharsets.UTF_8;
-
 import org.openqa.grid.common.exception.GridException;
 import org.openqa.grid.internal.ExternalSessionKey;
 import org.openqa.grid.internal.Registry;
@@ -65,7 +63,7 @@ public Map<String, Object> extractDesiredCapability() {
     String json = getBody();
 
     try (Reader in = new StringReader(json);
-         NewSessionPayload payload = NewSessionPayload.create(json.getBytes(UTF_8).length, in)) {
+         NewSessionPayload payload = NewSessionPayload.create(in)) {
       Capabilities caps = payload.stream()
           .findFirst()
           .orElseThrow(() -> new GridException("No capabilities found in request: " + json));

File: java/server/src/org/openqa/selenium/remote/server/commandhandler/BeginSession.java
Patch:
@@ -73,7 +73,7 @@ public void execute(HttpRequest req, HttpResponse resp) throws IOException {
     try (Reader reader = new InputStreamReader(
         req.consumeContentStream(),
         req.getContentEncoding());
-         NewSessionPayload payload = NewSessionPayload.create(contentLength, reader)) {
+         NewSessionPayload payload = NewSessionPayload.create(reader)) {
       session = pipeline.createNewSession(payload);
       allSessions.put(session);
     }

File: java/client/src/org/openqa/selenium/support/Color.java
Patch:
@@ -53,7 +53,7 @@ public static Color fromString(String value) {
     );
   }
 
-  Color(int red, int green, int blue, double alpha) {
+  public Color(int red, int green, int blue, double alpha) {
     this.red = red;
     this.green = green;
     this.blue = blue;

File: java/server/src/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumServlet.java
Patch:
@@ -32,7 +32,7 @@
 import org.openqa.selenium.remote.server.ActiveSessionFactory;
 import org.openqa.selenium.remote.server.ActiveSessionListener;
 import org.openqa.selenium.remote.server.ActiveSessions;
-import org.openqa.selenium.remote.server.NewSessionPayload;
+import org.openqa.selenium.remote.NewSessionPayload;
 import org.openqa.selenium.remote.server.NewSessionPipeline;
 import org.openqa.selenium.remote.server.WebDriverServlet;
 
@@ -215,8 +215,7 @@ private void startNewSession(
           return;
       }
 
-      try (NewSessionPayload payload = new NewSessionPayload(
-          ImmutableMap.of("desiredCapabilities", caps.asMap()))) {
+      try (NewSessionPayload payload = NewSessionPayload.create(caps)) {
         ActiveSession session = pipeline.createNewSession(payload);
         sessions.put(session);
         sessionId = session.getId();

File: java/server/src/org/openqa/grid/web/servlet/handler/WebDriverRequest.java
Patch:
@@ -23,7 +23,7 @@
 import org.openqa.grid.internal.ExternalSessionKey;
 import org.openqa.grid.internal.Registry;
 import org.openqa.selenium.Capabilities;
-import org.openqa.selenium.remote.server.NewSessionPayload;
+import org.openqa.selenium.remote.NewSessionPayload;
 
 import java.io.Reader;
 import java.io.StringReader;
@@ -65,7 +65,7 @@ public Map<String, Object> extractDesiredCapability() {
     String json = getBody();
 
     try (Reader in = new StringReader(json);
-         NewSessionPayload payload = new NewSessionPayload(json.getBytes(UTF_8).length, in)) {
+         NewSessionPayload payload = NewSessionPayload.create(json.getBytes(UTF_8).length, in)) {
       Capabilities caps = payload.stream()
           .findFirst()
           .orElseThrow(() -> new GridException("No capabilities found in request: " + json));

File: java/server/src/org/openqa/selenium/remote/server/NewSessionPipeline.java
Patch:
@@ -4,6 +4,7 @@
 
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
+import org.openqa.selenium.remote.NewSessionPayload;
 
 import java.io.IOException;
 import java.util.LinkedList;

File: java/server/src/org/openqa/selenium/remote/server/commandhandler/BeginSession.java
Patch:
@@ -28,12 +28,12 @@
 import org.openqa.selenium.logging.LogType;
 import org.openqa.selenium.logging.LoggingPreferences;
 import org.openqa.selenium.remote.CapabilityType;
+import org.openqa.selenium.remote.NewSessionPayload;
 import org.openqa.selenium.remote.http.HttpRequest;
 import org.openqa.selenium.remote.http.HttpResponse;
 import org.openqa.selenium.remote.server.ActiveSession;
 import org.openqa.selenium.remote.server.ActiveSessions;
 import org.openqa.selenium.remote.server.CommandHandler;
-import org.openqa.selenium.remote.server.NewSessionPayload;
 import org.openqa.selenium.remote.server.NewSessionPipeline;
 import org.openqa.selenium.remote.server.log.LoggingManager;
 
@@ -73,7 +73,7 @@ public void execute(HttpRequest req, HttpResponse resp) throws IOException {
     try (Reader reader = new InputStreamReader(
         req.consumeContentStream(),
         req.getContentEncoding());
-         NewSessionPayload payload = new NewSessionPayload(contentLength, reader)) {
+         NewSessionPayload payload = NewSessionPayload.create(contentLength, reader)) {
       session = pipeline.createNewSession(payload);
       allSessions.put(session);
     }

File: java/server/src/org/openqa/selenium/remote/server/ServicedSession.java
Patch:
@@ -22,6 +22,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.StandardSystemProperty;
+import com.google.common.collect.ImmutableMap;
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.ImmutableCapabilities;
@@ -211,7 +212,8 @@ public Optional<ActiveSession> apply(Set<Dialect> downstreamDialects, Capabiliti
 
         HttpClient client = new ApacheHttpClient.Factory().createClient(url);
 
-        Command command = new Command(null, DriverCommand.NEW_SESSION, capabilities.asMap());
+        Command command = new Command(null, DriverCommand.NEW_SESSION,
+                                      ImmutableMap.of("desiredCapabilities", capabilities));
 
         ProtocolHandshake.Result result = new ProtocolHandshake().createSession(client, command);
 

File: java/client/src/org/openqa/selenium/firefox/Preferences.java
Patch:
@@ -27,7 +27,7 @@
 import com.google.common.io.LineReader;
 
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.JsonToBeanConverter;
+import org.openqa.selenium.json.Json;
 
 import java.io.File;
 import java.io.FileReader;
@@ -92,7 +92,7 @@ public Preferences(Reader defaults, Reader reader) {
   private void readDefaultPreferences(Reader defaultsReader) {
     try {
       String rawJson = CharStreams.toString(defaultsReader);
-      Map<String, Object> map = new JsonToBeanConverter().convert(Map.class, rawJson);
+      Map<String, Object> map = new Json().toType(rawJson, Map.class);
 
       Map<String, Object> frozen = (Map<String, Object>) map.get("frozen");
       for (Map.Entry<String, Object> entry : frozen.entrySet()) {

File: java/client/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -228,7 +228,7 @@ public Optional<Result> createSession(HttpClient client, InputStream newSessionB
     // W3C spec properly. Oh well.
     Map<?, ?> blob;
     try {
-      blob = new JsonToBeanConverter().convert(Map.class, response.getContentString());
+      blob = new Json().toType(response.getContentString(), Map.class);
     } catch (JsonException e) {
       throw new WebDriverException(
           "Unable to parse remote response: " + response.getContentString());

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -58,6 +58,7 @@
 import org.openqa.selenium.internal.FindsByName;
 import org.openqa.selenium.internal.FindsByTagName;
 import org.openqa.selenium.internal.FindsByXPath;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.logging.LocalLogs;
 import org.openqa.selenium.logging.LogType;
 import org.openqa.selenium.logging.LoggingHandler;
@@ -748,7 +749,7 @@ public Set<Cookie> getCookies() {
       Set<Cookie> toReturn = new HashSet<>();
 
       List<Map<String, Object>> cookies =
-          new JsonToBeanConverter().convert(List.class, returned);
+          new Json().toType(returned, List.class);
       if (cookies == null) {
         return toReturn;
       }

File: java/client/test/org/openqa/selenium/interactions/PointerInputTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.openqa.selenium.WrappedWebElement;
 import org.openqa.selenium.interactions.PointerInput.Kind;
 import org.openqa.selenium.interactions.PointerInput.Origin;
-import org.openqa.selenium.remote.BeanToJsonConverter;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.RemoteWebElement;
 
 /**
@@ -53,7 +53,7 @@ public void encodesWrappedElementInMoveOrigin() {
         Duration.ofMillis(100), Origin.fromElement(element), 0, 0);
     Sequence sequence = new Sequence(move.getSource(), 0).addAction(move);
 
-    String rawJson = new BeanToJsonConverter().convert(sequence);
+    String rawJson = new Json().toJson(sequence);
     ActionSequenceJson json = new Gson().fromJson(rawJson, ActionSequenceJson.class);
 
     assertEquals(json.actions.size(), 1);

File: java/client/test/org/openqa/selenium/remote/ErrorHandlerTest.java
Patch:
@@ -57,6 +57,7 @@
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.interactions.InvalidCoordinatesException;
 import org.openqa.selenium.interactions.MoveTargetOutOfBoundsException;
+import org.openqa.selenium.json.Json;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -520,7 +521,7 @@ private static void assertStackTracesEqual(StackTraceElement[] expected,
 
   @SuppressWarnings({"unchecked"})
   private static Map<String, Object> toMap(Object o) throws Exception {
-    String rawJson = new BeanToJsonConverter().convert(o);
-    return new JsonToBeanConverter().convert(Map.class, rawJson);
+    String rawJson = new Json().toJson(o);
+    return new Json().toType(rawJson, Map.class);
   }
 }

File: java/client/test/org/openqa/selenium/remote/HttpRequest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.util.EntityUtils;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.internal.HttpClientFactory;
 
 import java.io.IOException;
@@ -95,7 +96,7 @@ public HttpUriRequest prepare(String url, Object payload) {
         post.addHeader("Content-Type", "application/json; charset=utf8");
 
         if (payload != null) {
-          String content = new BeanToJsonConverter().convert(payload);
+          String content = new Json().toJson(payload);
           post.setEntity(new StringEntity(content, "UTF-8"));
         }
         return post;

File: java/client/test/org/openqa/selenium/remote/JsonWireProtocolResponseTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
 import org.openqa.selenium.WebDriverException;
+import org.openqa.selenium.json.Json;
 
 import java.net.MalformedURLException;
 import java.util.Map;
@@ -108,7 +109,7 @@ public void shouldProperlyPopulateAnError() {
     WebDriverException exception = new SessionNotCreatedException("me no likey");
 
     ImmutableMap<String, ?> payload = ImmutableMap.of(
-            "value", new Gson().fromJson(new BeanToJsonConverter().convert(exception), Map.class),
+            "value", new Gson().fromJson(new Json().toJson(exception), Map.class),
             "status", ErrorCodes.SESSION_NOT_CREATED);
 
     InitialHandshakeResponse initialResponse = new InitialHandshakeResponse(

File: java/client/test/org/openqa/selenium/testing/drivers/GridSupplier.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.DesiredCapabilities;
-import org.openqa.selenium.remote.JsonToBeanConverter;
 import org.openqa.selenium.remote.LocalFileDetector;
 import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.remote.http.HttpClient;
@@ -83,7 +83,7 @@ private synchronized void startServers() {
 
     // Keep polling the status page of the hub until it claims to be ready
     HttpClient client = new ApacheHttpClient.Factory().createClient(hub.getWebDriverUrl());
-    JsonToBeanConverter toBean = new JsonToBeanConverter();
+    Json json = new Json();
     Wait<HttpClient> wait = new FluentWait<>(client)
         .ignoring(RuntimeException.class)
         .withTimeout(30, TimeUnit.SECONDS);
@@ -95,7 +95,7 @@ private synchronized void startServers() {
       } catch (IOException e) {
         throw new RuntimeException(e);
       }
-      Map<?, ?> value = toBean.convert(Map.class, response.getContentString());
+      Map<?, ?> value = json.toType(response.getContentString(), Map.class);
 
       return ((Map<?, ?>) value.get("value")).get("ready") == Boolean.TRUE;
     });

File: java/server/src/org/openqa/grid/web/servlet/HubW3CStatusServlet.java
Patch:
@@ -27,7 +27,7 @@
 import org.openqa.grid.internal.Registry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.selenium.internal.BuildInfo;
-import org.openqa.selenium.remote.BeanToJsonConverter;
+import org.openqa.selenium.json.Json;
 
 import java.io.IOException;
 import java.util.List;
@@ -86,7 +86,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         "value", value.build());
 
     // Write out a minimal W3C status response.
-    byte[] payload = new BeanToJsonConverter().convert(payloadObj).getBytes(UTF_8);
+    byte[] payload = new Json().toJson(payloadObj).getBytes(UTF_8);
 
     resp.setStatus(HTTP_OK);
     resp.setHeader("Content-Type", JSON_UTF_8.toString());

File: java/server/src/org/openqa/grid/web/servlet/NodeW3CStatusServlet.java
Patch:
@@ -25,7 +25,7 @@
 import com.google.common.collect.ImmutableMap;
 
 import org.openqa.selenium.internal.BuildInfo;
-import org.openqa.selenium.remote.BeanToJsonConverter;
+import org.openqa.selenium.json.Json;
 
 import java.io.IOException;
 import java.util.Map;
@@ -67,7 +67,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         "value", value.build());
 
     // Write out a minimal W3C status response.
-    byte[] payload = new BeanToJsonConverter().convert(payloadObj).getBytes(UTF_8);
+    byte[] payload = new Json().toJson(payloadObj).getBytes(UTF_8);
 
     resp.setStatus(HTTP_OK);
     resp.setHeader("Content-Type", JSON_UTF_8.toString());

File: java/server/src/org/openqa/selenium/remote/server/DriverServlet.java
Patch:
@@ -30,8 +30,8 @@
 import com.google.common.net.MediaType;
 
 import org.openqa.selenium.Platform;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.logging.LoggingHandler;
-import org.openqa.selenium.remote.BeanToJsonConverter;
 import org.openqa.selenium.remote.ErrorCodes;
 import org.openqa.selenium.remote.SessionId;
 import org.openqa.selenium.remote.server.log.LoggingManager;
@@ -302,7 +302,7 @@ private void writeThrowable(HttpServletResponse resp, Throwable e) {
                     "lineNumber", element.getLineNumber()))
                 .collect(ImmutableList.toImmutableList())));
 
-    byte[] bytes = new BeanToJsonConverter().convert(value).getBytes(UTF_8);
+    byte[] bytes = new Json().toJson(value).getBytes(UTF_8);
 
     try {
       resp.setStatus(HTTP_INTERNAL_ERROR);

File: java/server/src/org/openqa/selenium/remote/server/rest/Responses.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.gson.JsonObject;
 
-import org.openqa.selenium.remote.BeanToJsonConverter;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.ErrorCodes;
 import org.openqa.selenium.remote.Response;
 import org.openqa.selenium.remote.SessionId;
@@ -83,7 +83,7 @@ public static Response failure(
     response.setState(ERROR_CODES.toState(response.getStatus()));
 
     if (reason != null) {
-      JsonObject json = new BeanToJsonConverter().convertObject(reason).getAsJsonObject();
+      JsonObject json = new Json().toJsonElement(reason).getAsJsonObject();
       json.addProperty("screen", screenshot.orElse(null));
       response.setValue(json);
     }

File: java/server/test/org/openqa/selenium/remote/server/DriverServletTest.java
Patch:
@@ -31,10 +31,10 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.ErrorCodes;
-import org.openqa.selenium.remote.JsonToBeanConverter;
 import org.openqa.selenium.remote.Response;
 import org.openqa.selenium.remote.SessionId;
 import org.openqa.testing.FakeHttpServletRequest;
@@ -186,8 +186,7 @@ private SessionId createSession() throws IOException, ServletException {
 
     assertEquals(HttpServletResponse.SC_OK, response.getStatus());
 
-    Response resp = new JsonToBeanConverter().convert(
-      Response.class, response.getBody());
+    Response resp = new Json().toType(response.getBody(), Response.class);
 
     String sessionId = resp.getSessionId();
     assertNotNull(sessionId);

File: java/server/test/org/openqa/selenium/remote/server/ProtocolConverterTest.java
Patch:
@@ -37,7 +37,7 @@
 
 import org.junit.Test;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.BeanToJsonConverter;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.Command;
 import org.openqa.selenium.remote.DriverCommand;
 import org.openqa.selenium.remote.SessionId;
@@ -180,7 +180,7 @@ protected HttpResponse makeRequest(HttpRequest request) throws IOException {
         response.setHeader("Content-Type", MediaType.JSON_UTF_8.toString());
         response.setHeader("Cache-Control", "none");
 
-       String payload = new BeanToJsonConverter().convert(
+       String payload = new Json().toJson(
            ImmutableMap.of(
                "sessionId", sessionId.toString(),
                "status", UNHANDLED_ERROR,

File: java/client/src/org/openqa/selenium/firefox/Preferences.java
Patch:
@@ -27,7 +27,7 @@
 import com.google.common.io.LineReader;
 
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.json.Json;
+import org.openqa.selenium.remote.JsonToBeanConverter;
 
 import java.io.File;
 import java.io.FileReader;
@@ -92,7 +92,7 @@ public Preferences(Reader defaults, Reader reader) {
   private void readDefaultPreferences(Reader defaultsReader) {
     try {
       String rawJson = CharStreams.toString(defaultsReader);
-      Map<String, Object> map = new Json().toType(rawJson, Map.class);
+      Map<String, Object> map = new JsonToBeanConverter().convert(Map.class, rawJson);
 
       Map<String, Object> frozen = (Map<String, Object>) map.get("frozen");
       for (Map.Entry<String, Object> entry : frozen.entrySet()) {

File: java/client/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -228,7 +228,7 @@ public Optional<Result> createSession(HttpClient client, InputStream newSessionB
     // W3C spec properly. Oh well.
     Map<?, ?> blob;
     try {
-      blob = new Json().toType(response.getContentString(), Map.class);
+      blob = new JsonToBeanConverter().convert(Map.class, response.getContentString());
     } catch (JsonException e) {
       throw new WebDriverException(
           "Unable to parse remote response: " + response.getContentString());

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -58,7 +58,6 @@
 import org.openqa.selenium.internal.FindsByName;
 import org.openqa.selenium.internal.FindsByTagName;
 import org.openqa.selenium.internal.FindsByXPath;
-import org.openqa.selenium.json.Json;
 import org.openqa.selenium.logging.LocalLogs;
 import org.openqa.selenium.logging.LogType;
 import org.openqa.selenium.logging.LoggingHandler;
@@ -749,7 +748,7 @@ public Set<Cookie> getCookies() {
       Set<Cookie> toReturn = new HashSet<>();
 
       List<Map<String, Object>> cookies =
-          new Json().toType(returned, List.class);
+          new JsonToBeanConverter().convert(List.class, returned);
       if (cookies == null) {
         return toReturn;
       }

File: java/client/test/org/openqa/selenium/interactions/PointerInputTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.openqa.selenium.WrappedWebElement;
 import org.openqa.selenium.interactions.PointerInput.Kind;
 import org.openqa.selenium.interactions.PointerInput.Origin;
-import org.openqa.selenium.json.Json;
+import org.openqa.selenium.remote.BeanToJsonConverter;
 import org.openqa.selenium.remote.RemoteWebElement;
 
 /**
@@ -53,7 +53,7 @@ public void encodesWrappedElementInMoveOrigin() {
         Duration.ofMillis(100), Origin.fromElement(element), 0, 0);
     Sequence sequence = new Sequence(move.getSource(), 0).addAction(move);
 
-    String rawJson = new Json().toJson(sequence);
+    String rawJson = new BeanToJsonConverter().convert(sequence);
     ActionSequenceJson json = new Gson().fromJson(rawJson, ActionSequenceJson.class);
 
     assertEquals(json.actions.size(), 1);

File: java/client/test/org/openqa/selenium/remote/ErrorHandlerTest.java
Patch:
@@ -57,7 +57,6 @@
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.interactions.InvalidCoordinatesException;
 import org.openqa.selenium.interactions.MoveTargetOutOfBoundsException;
-import org.openqa.selenium.json.Json;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -521,7 +520,7 @@ private static void assertStackTracesEqual(StackTraceElement[] expected,
 
   @SuppressWarnings({"unchecked"})
   private static Map<String, Object> toMap(Object o) throws Exception {
-    String rawJson = new Json().toJson(o);
-    return new Json().toType(rawJson, Map.class);
+    String rawJson = new BeanToJsonConverter().convert(o);
+    return new JsonToBeanConverter().convert(Map.class, rawJson);
   }
 }

File: java/client/test/org/openqa/selenium/remote/HttpRequest.java
Patch:
@@ -27,7 +27,6 @@
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.util.EntityUtils;
-import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.internal.HttpClientFactory;
 
 import java.io.IOException;
@@ -96,7 +95,7 @@ public HttpUriRequest prepare(String url, Object payload) {
         post.addHeader("Content-Type", "application/json; charset=utf8");
 
         if (payload != null) {
-          String content = new Json().toJson(payload);
+          String content = new BeanToJsonConverter().convert(payload);
           post.setEntity(new StringEntity(content, "UTF-8"));
         }
         return post;

File: java/client/test/org/openqa/selenium/remote/JsonWireProtocolResponseTest.java
Patch:
@@ -31,7 +31,6 @@
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.json.Json;
 
 import java.net.MalformedURLException;
 import java.util.Map;
@@ -109,7 +108,7 @@ public void shouldProperlyPopulateAnError() {
     WebDriverException exception = new SessionNotCreatedException("me no likey");
 
     ImmutableMap<String, ?> payload = ImmutableMap.of(
-            "value", new Gson().fromJson(new Json().toJson(exception), Map.class),
+            "value", new Gson().fromJson(new BeanToJsonConverter().convert(exception), Map.class),
             "status", ErrorCodes.SESSION_NOT_CREATED);
 
     InitialHandshakeResponse initialResponse = new InitialHandshakeResponse(

File: java/client/test/org/openqa/selenium/testing/drivers/GridSupplier.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.DesiredCapabilities;
+import org.openqa.selenium.remote.JsonToBeanConverter;
 import org.openqa.selenium.remote.LocalFileDetector;
 import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.remote.http.HttpClient;
@@ -83,7 +83,7 @@ private synchronized void startServers() {
 
     // Keep polling the status page of the hub until it claims to be ready
     HttpClient client = new ApacheHttpClient.Factory().createClient(hub.getWebDriverUrl());
-    Json json = new Json();
+    JsonToBeanConverter toBean = new JsonToBeanConverter();
     Wait<HttpClient> wait = new FluentWait<>(client)
         .ignoring(RuntimeException.class)
         .withTimeout(30, TimeUnit.SECONDS);
@@ -95,7 +95,7 @@ private synchronized void startServers() {
       } catch (IOException e) {
         throw new RuntimeException(e);
       }
-      Map<?, ?> value = json.toType(response.getContentString(), Map.class);
+      Map<?, ?> value = toBean.convert(Map.class, response.getContentString());
 
       return ((Map<?, ?>) value.get("value")).get("ready") == Boolean.TRUE;
     });

File: java/server/src/org/openqa/grid/web/servlet/HubW3CStatusServlet.java
Patch:
@@ -27,7 +27,7 @@
 import org.openqa.grid.internal.Registry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.selenium.internal.BuildInfo;
-import org.openqa.selenium.json.Json;
+import org.openqa.selenium.remote.BeanToJsonConverter;
 
 import java.io.IOException;
 import java.util.List;
@@ -86,7 +86,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         "value", value.build());
 
     // Write out a minimal W3C status response.
-    byte[] payload = new Json().toJson(payloadObj).getBytes(UTF_8);
+    byte[] payload = new BeanToJsonConverter().convert(payloadObj).getBytes(UTF_8);
 
     resp.setStatus(HTTP_OK);
     resp.setHeader("Content-Type", JSON_UTF_8.toString());

File: java/server/src/org/openqa/grid/web/servlet/NodeW3CStatusServlet.java
Patch:
@@ -25,7 +25,7 @@
 import com.google.common.collect.ImmutableMap;
 
 import org.openqa.selenium.internal.BuildInfo;
-import org.openqa.selenium.json.Json;
+import org.openqa.selenium.remote.BeanToJsonConverter;
 
 import java.io.IOException;
 import java.util.Map;
@@ -67,7 +67,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         "value", value.build());
 
     // Write out a minimal W3C status response.
-    byte[] payload = new Json().toJson(payloadObj).getBytes(UTF_8);
+    byte[] payload = new BeanToJsonConverter().convert(payloadObj).getBytes(UTF_8);
 
     resp.setStatus(HTTP_OK);
     resp.setHeader("Content-Type", JSON_UTF_8.toString());

File: java/server/src/org/openqa/selenium/remote/server/DriverServlet.java
Patch:
@@ -30,8 +30,8 @@
 import com.google.common.net.MediaType;
 
 import org.openqa.selenium.Platform;
-import org.openqa.selenium.json.Json;
 import org.openqa.selenium.logging.LoggingHandler;
+import org.openqa.selenium.remote.BeanToJsonConverter;
 import org.openqa.selenium.remote.ErrorCodes;
 import org.openqa.selenium.remote.SessionId;
 import org.openqa.selenium.remote.server.log.LoggingManager;
@@ -302,7 +302,7 @@ private void writeThrowable(HttpServletResponse resp, Throwable e) {
                     "lineNumber", element.getLineNumber()))
                 .collect(ImmutableList.toImmutableList())));
 
-    byte[] bytes = new Json().toJson(value).getBytes(UTF_8);
+    byte[] bytes = new BeanToJsonConverter().convert(value).getBytes(UTF_8);
 
     try {
       resp.setStatus(HTTP_INTERNAL_ERROR);

File: java/server/src/org/openqa/selenium/remote/server/rest/Responses.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.gson.JsonObject;
 
-import org.openqa.selenium.json.Json;
+import org.openqa.selenium.remote.BeanToJsonConverter;
 import org.openqa.selenium.remote.ErrorCodes;
 import org.openqa.selenium.remote.Response;
 import org.openqa.selenium.remote.SessionId;
@@ -83,7 +83,7 @@ public static Response failure(
     response.setState(ERROR_CODES.toState(response.getStatus()));
 
     if (reason != null) {
-      JsonObject json = new Json().toJsonElement(reason).getAsJsonObject();
+      JsonObject json = new BeanToJsonConverter().convertObject(reason).getAsJsonObject();
       json.addProperty("screen", screenshot.orElse(null));
       response.setValue(json);
     }

File: java/server/test/org/openqa/selenium/remote/server/DriverServletTest.java
Patch:
@@ -31,10 +31,10 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.ErrorCodes;
+import org.openqa.selenium.remote.JsonToBeanConverter;
 import org.openqa.selenium.remote.Response;
 import org.openqa.selenium.remote.SessionId;
 import org.openqa.testing.FakeHttpServletRequest;
@@ -186,7 +186,8 @@ private SessionId createSession() throws IOException, ServletException {
 
     assertEquals(HttpServletResponse.SC_OK, response.getStatus());
 
-    Response resp = new Json().toType(response.getBody(), Response.class);
+    Response resp = new JsonToBeanConverter().convert(
+      Response.class, response.getBody());
 
     String sessionId = resp.getSessionId();
     assertNotNull(sessionId);

File: java/server/test/org/openqa/selenium/remote/server/ProtocolConverterTest.java
Patch:
@@ -37,7 +37,7 @@
 
 import org.junit.Test;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.json.Json;
+import org.openqa.selenium.remote.BeanToJsonConverter;
 import org.openqa.selenium.remote.Command;
 import org.openqa.selenium.remote.DriverCommand;
 import org.openqa.selenium.remote.SessionId;
@@ -180,7 +180,7 @@ protected HttpResponse makeRequest(HttpRequest request) throws IOException {
         response.setHeader("Content-Type", MediaType.JSON_UTF_8.toString());
         response.setHeader("Cache-Control", "none");
 
-       String payload = new Json().toJson(
+       String payload = new BeanToJsonConverter().convert(
            ImmutableMap.of(
                "sessionId", sessionId.toString(),
                "status", UNHANDLED_ERROR,

File: java/client/src/org/openqa/selenium/firefox/Preferences.java
Patch:
@@ -27,7 +27,7 @@
 import com.google.common.io.LineReader;
 
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.JsonToBeanConverter;
+import org.openqa.selenium.json.Json;
 
 import java.io.File;
 import java.io.FileReader;
@@ -92,7 +92,7 @@ public Preferences(Reader defaults, Reader reader) {
   private void readDefaultPreferences(Reader defaultsReader) {
     try {
       String rawJson = CharStreams.toString(defaultsReader);
-      Map<String, Object> map = new JsonToBeanConverter().convert(Map.class, rawJson);
+      Map<String, Object> map = new Json().toType(rawJson, Map.class);
 
       Map<String, Object> frozen = (Map<String, Object>) map.get("frozen");
       for (Map.Entry<String, Object> entry : frozen.entrySet()) {

File: java/client/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -228,7 +228,7 @@ public Optional<Result> createSession(HttpClient client, InputStream newSessionB
     // W3C spec properly. Oh well.
     Map<?, ?> blob;
     try {
-      blob = new JsonToBeanConverter().convert(Map.class, response.getContentString());
+      blob = new Json().toType(response.getContentString(), Map.class);
     } catch (JsonException e) {
       throw new WebDriverException(
           "Unable to parse remote response: " + response.getContentString());

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -58,6 +58,7 @@
 import org.openqa.selenium.internal.FindsByName;
 import org.openqa.selenium.internal.FindsByTagName;
 import org.openqa.selenium.internal.FindsByXPath;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.logging.LocalLogs;
 import org.openqa.selenium.logging.LogType;
 import org.openqa.selenium.logging.LoggingHandler;
@@ -748,7 +749,7 @@ public Set<Cookie> getCookies() {
       Set<Cookie> toReturn = new HashSet<>();
 
       List<Map<String, Object>> cookies =
-          new JsonToBeanConverter().convert(List.class, returned);
+          new Json().toType(returned, List.class);
       if (cookies == null) {
         return toReturn;
       }

File: java/client/test/org/openqa/selenium/interactions/PointerInputTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.openqa.selenium.WrappedWebElement;
 import org.openqa.selenium.interactions.PointerInput.Kind;
 import org.openqa.selenium.interactions.PointerInput.Origin;
-import org.openqa.selenium.remote.BeanToJsonConverter;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.RemoteWebElement;
 
 /**
@@ -53,7 +53,7 @@ public void encodesWrappedElementInMoveOrigin() {
         Duration.ofMillis(100), Origin.fromElement(element), 0, 0);
     Sequence sequence = new Sequence(move.getSource(), 0).addAction(move);
 
-    String rawJson = new BeanToJsonConverter().convert(sequence);
+    String rawJson = new Json().toJson(sequence);
     ActionSequenceJson json = new Gson().fromJson(rawJson, ActionSequenceJson.class);
 
     assertEquals(json.actions.size(), 1);

File: java/client/test/org/openqa/selenium/remote/ErrorHandlerTest.java
Patch:
@@ -57,6 +57,7 @@
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.interactions.InvalidCoordinatesException;
 import org.openqa.selenium.interactions.MoveTargetOutOfBoundsException;
+import org.openqa.selenium.json.Json;
 
 import java.util.HashMap;
 import java.util.HashSet;
@@ -520,7 +521,7 @@ private static void assertStackTracesEqual(StackTraceElement[] expected,
 
   @SuppressWarnings({"unchecked"})
   private static Map<String, Object> toMap(Object o) throws Exception {
-    String rawJson = new BeanToJsonConverter().convert(o);
-    return new JsonToBeanConverter().convert(Map.class, rawJson);
+    String rawJson = new Json().toJson(o);
+    return new Json().toType(rawJson, Map.class);
   }
 }

File: java/client/test/org/openqa/selenium/remote/HttpRequest.java
Patch:
@@ -27,6 +27,7 @@
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.util.EntityUtils;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.internal.HttpClientFactory;
 
 import java.io.IOException;
@@ -95,7 +96,7 @@ public HttpUriRequest prepare(String url, Object payload) {
         post.addHeader("Content-Type", "application/json; charset=utf8");
 
         if (payload != null) {
-          String content = new BeanToJsonConverter().convert(payload);
+          String content = new Json().toJson(payload);
           post.setEntity(new StringEntity(content, "UTF-8"));
         }
         return post;

File: java/client/test/org/openqa/selenium/remote/JsonWireProtocolResponseTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.openqa.selenium.ImmutableCapabilities;
 import org.openqa.selenium.SessionNotCreatedException;
 import org.openqa.selenium.WebDriverException;
+import org.openqa.selenium.json.Json;
 
 import java.net.MalformedURLException;
 import java.util.Map;
@@ -108,7 +109,7 @@ public void shouldProperlyPopulateAnError() {
     WebDriverException exception = new SessionNotCreatedException("me no likey");
 
     ImmutableMap<String, ?> payload = ImmutableMap.of(
-            "value", new Gson().fromJson(new BeanToJsonConverter().convert(exception), Map.class),
+            "value", new Gson().fromJson(new Json().toJson(exception), Map.class),
             "status", ErrorCodes.SESSION_NOT_CREATED);
 
     InitialHandshakeResponse initialResponse = new InitialHandshakeResponse(

File: java/client/test/org/openqa/selenium/testing/drivers/GridSupplier.java
Patch:
@@ -19,8 +19,8 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.DesiredCapabilities;
-import org.openqa.selenium.remote.JsonToBeanConverter;
 import org.openqa.selenium.remote.LocalFileDetector;
 import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.remote.http.HttpClient;
@@ -83,7 +83,7 @@ private synchronized void startServers() {
 
     // Keep polling the status page of the hub until it claims to be ready
     HttpClient client = new ApacheHttpClient.Factory().createClient(hub.getWebDriverUrl());
-    JsonToBeanConverter toBean = new JsonToBeanConverter();
+    Json json = new Json();
     Wait<HttpClient> wait = new FluentWait<>(client)
         .ignoring(RuntimeException.class)
         .withTimeout(30, TimeUnit.SECONDS);
@@ -95,7 +95,7 @@ private synchronized void startServers() {
       } catch (IOException e) {
         throw new RuntimeException(e);
       }
-      Map<?, ?> value = toBean.convert(Map.class, response.getContentString());
+      Map<?, ?> value = json.toType(response.getContentString(), Map.class);
 
       return ((Map<?, ?>) value.get("value")).get("ready") == Boolean.TRUE;
     });

File: java/server/src/org/openqa/grid/web/servlet/HubW3CStatusServlet.java
Patch:
@@ -27,7 +27,7 @@
 import org.openqa.grid.internal.Registry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.selenium.internal.BuildInfo;
-import org.openqa.selenium.remote.BeanToJsonConverter;
+import org.openqa.selenium.json.Json;
 
 import java.io.IOException;
 import java.util.List;
@@ -86,7 +86,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         "value", value.build());
 
     // Write out a minimal W3C status response.
-    byte[] payload = new BeanToJsonConverter().convert(payloadObj).getBytes(UTF_8);
+    byte[] payload = new Json().toJson(payloadObj).getBytes(UTF_8);
 
     resp.setStatus(HTTP_OK);
     resp.setHeader("Content-Type", JSON_UTF_8.toString());

File: java/server/src/org/openqa/grid/web/servlet/NodeW3CStatusServlet.java
Patch:
@@ -25,7 +25,7 @@
 import com.google.common.collect.ImmutableMap;
 
 import org.openqa.selenium.internal.BuildInfo;
-import org.openqa.selenium.remote.BeanToJsonConverter;
+import org.openqa.selenium.json.Json;
 
 import java.io.IOException;
 import java.util.Map;
@@ -67,7 +67,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
         "value", value.build());
 
     // Write out a minimal W3C status response.
-    byte[] payload = new BeanToJsonConverter().convert(payloadObj).getBytes(UTF_8);
+    byte[] payload = new Json().toJson(payloadObj).getBytes(UTF_8);
 
     resp.setStatus(HTTP_OK);
     resp.setHeader("Content-Type", JSON_UTF_8.toString());

File: java/server/src/org/openqa/selenium/remote/server/DriverServlet.java
Patch:
@@ -30,8 +30,8 @@
 import com.google.common.net.MediaType;
 
 import org.openqa.selenium.Platform;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.logging.LoggingHandler;
-import org.openqa.selenium.remote.BeanToJsonConverter;
 import org.openqa.selenium.remote.ErrorCodes;
 import org.openqa.selenium.remote.SessionId;
 import org.openqa.selenium.remote.server.log.LoggingManager;
@@ -302,7 +302,7 @@ private void writeThrowable(HttpServletResponse resp, Throwable e) {
                     "lineNumber", element.getLineNumber()))
                 .collect(ImmutableList.toImmutableList())));
 
-    byte[] bytes = new BeanToJsonConverter().convert(value).getBytes(UTF_8);
+    byte[] bytes = new Json().toJson(value).getBytes(UTF_8);
 
     try {
       resp.setStatus(HTTP_INTERNAL_ERROR);

File: java/server/src/org/openqa/selenium/remote/server/rest/Responses.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.google.gson.JsonObject;
 
-import org.openqa.selenium.remote.BeanToJsonConverter;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.ErrorCodes;
 import org.openqa.selenium.remote.Response;
 import org.openqa.selenium.remote.SessionId;
@@ -83,7 +83,7 @@ public static Response failure(
     response.setState(ERROR_CODES.toState(response.getStatus()));
 
     if (reason != null) {
-      JsonObject json = new BeanToJsonConverter().convertObject(reason).getAsJsonObject();
+      JsonObject json = new Json().toJsonElement(reason).getAsJsonObject();
       json.addProperty("screen", screenshot.orElse(null));
       response.setValue(json);
     }

File: java/server/test/org/openqa/selenium/remote/server/DriverServletTest.java
Patch:
@@ -31,10 +31,10 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
 import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.ErrorCodes;
-import org.openqa.selenium.remote.JsonToBeanConverter;
 import org.openqa.selenium.remote.Response;
 import org.openqa.selenium.remote.SessionId;
 import org.openqa.testing.FakeHttpServletRequest;
@@ -186,8 +186,7 @@ private SessionId createSession() throws IOException, ServletException {
 
     assertEquals(HttpServletResponse.SC_OK, response.getStatus());
 
-    Response resp = new JsonToBeanConverter().convert(
-      Response.class, response.getBody());
+    Response resp = new Json().toType(response.getBody(), Response.class);
 
     String sessionId = resp.getSessionId();
     assertNotNull(sessionId);

File: java/server/test/org/openqa/selenium/remote/server/ProtocolConverterTest.java
Patch:
@@ -37,7 +37,7 @@
 
 import org.junit.Test;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.remote.BeanToJsonConverter;
+import org.openqa.selenium.json.Json;
 import org.openqa.selenium.remote.Command;
 import org.openqa.selenium.remote.DriverCommand;
 import org.openqa.selenium.remote.SessionId;
@@ -180,7 +180,7 @@ protected HttpResponse makeRequest(HttpRequest request) throws IOException {
         response.setHeader("Content-Type", MediaType.JSON_UTF_8.toString());
         response.setHeader("Cache-Control", "none");
 
-       String payload = new BeanToJsonConverter().convert(
+       String payload = new Json().toJson(
            ImmutableMap.of(
                "sessionId", sessionId.toString(),
                "status", UNHANDLED_ERROR,

File: java/client/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -201,7 +201,6 @@ private void streamW3CProtocolParameters(
     Map<String, Object> alwaysMatch = applyTransforms(des).entrySet().stream()
         .filter(entry -> !excludedKeys.contains(entry.getKey()))
         .filter(entry -> entry.getValue() != null)
-        .peek(entry -> System.out.println(String.format("%s -> %s", entry.getKey(), entry.getValue())))
         .collect(ImmutableSortedMap.toImmutableSortedMap(
             Ordering.natural(),
             Map.Entry::getKey,

File: java/client/test/org/openqa/selenium/UnexpectedAlertBehaviorTest.java
Patch:
@@ -85,7 +85,7 @@ public void canSilentlyDismissUnhandledAlert() {
 
   @Test
   @Ignore(value = CHROME, reason = "Chrome uses IGNORE mode by default")
-  public void canSilentlyDismissUnhandledAlertsByDefault() {
+  public void canDismissUnhandledAlertsByDefault() {
     runScenarioWithUnhandledAlert(null, "null", false);
   }
 

File: java/client/test/org/openqa/selenium/StaleElementReferenceTest.java
Patch:
@@ -24,11 +24,14 @@
 import static org.openqa.selenium.testing.TestUtilities.catchThrowable;
 
 import org.junit.Test;
+import org.openqa.selenium.testing.Driver;
+import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 
 public class StaleElementReferenceTest extends JUnit4TestBase {
 
   @Test
+  @Ignore(value = Driver.MARIONETTE, reason = "https://bugzilla.mozilla.org/show_bug.cgi?id=1410799")
   public void testOldPage() {
     driver.get(pages.simpleTestPage);
     WebElement elem = driver.findElement(By.id("links"));

File: java/client/test/org/openqa/selenium/UploadTest.java
Patch:
@@ -98,7 +98,7 @@ public void testCleanFileInput() throws Exception {
 
   @Test
   @Ignore(IE)
-  @Ignore(MARIONETTE)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/1011")
   @Ignore(CHROME)
   @Ignore(PHANTOMJS)
   @Ignore(SAFARI)

File: java/client/src/org/openqa/selenium/json/JsonToBeanConverter.java
Patch:
@@ -45,7 +45,7 @@
 import java.util.function.Function;
 
 /**
- * @deprecated Visibility will be reduced. Use {@link Json#toType(String, Type)}.
+ * @deprecated Visibility will be reduced. Use {@link Json#toType(Object, Type)}.
  */
 @Deprecated
 public class JsonToBeanConverter {

File: java/client/test/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -31,7 +31,6 @@
 import static org.openqa.selenium.testing.Driver.CHROME;
 import static org.openqa.selenium.testing.Driver.FIREFOX;
 import static org.openqa.selenium.testing.Driver.IE;
-import static org.openqa.selenium.testing.Driver.MARIONETTE;
 import static org.openqa.selenium.testing.Driver.PHANTOMJS;
 import static org.openqa.selenium.testing.Driver.SAFARI;
 
@@ -364,7 +363,6 @@ public void testCookieEqualityAfterSetAndGet() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/463")
   public void testRetainsCookieExpiry() {
     Cookie addedCookie =
         new Cookie.Builder("fish", "cod")

File: java/client/test/org/openqa/selenium/remote/RemoteCommonTests.java
Patch:
@@ -19,8 +19,6 @@
 
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
-import org.openqa.selenium.json.BeanToJsonConverterTest;
-import org.openqa.selenium.json.JsonToBeanConverterTest;
 import org.openqa.selenium.remote.http.JsonHttpCommandCodecTest;
 import org.openqa.selenium.remote.http.JsonHttpResponseCodecTest;
 import org.openqa.selenium.remote.http.W3CHttpResponseCodecTest;

File: java/client/src/org/openqa/selenium/json/BeanToJsonConverter.java
Patch:
@@ -218,7 +218,9 @@ private JsonElement convertObject(Object toConvert, int maxDepth) throws Excepti
 
   private Method getMethod(Object toConvert, String methodName) {
     try {
-      return toConvert.getClass().getMethod(methodName);
+      Method method = toConvert.getClass().getMethod(methodName);
+      method.setAccessible(true);
+      return method;
     } catch (NoSuchMethodException | SecurityException e) {
       // fall through
     }

File: java/client/src/org/openqa/selenium/interactions/SendKeysAction.java
Patch:
@@ -42,7 +42,7 @@ public SendKeysAction(
       CharSequence... keysToSend) {
     super(keyboard, mouse, locationProvider);
 
-    if (keysToSend == null) {
+    if (keysToSend == null || keysToSend.length == 0) {
       throw new IllegalArgumentException("Keys should be a not null CharSequence");
     }
     this.keysToSend = keysToSend;

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -234,7 +234,7 @@ protected void startSession(Capabilities desiredCapabilities) {
       } else {
         platform = Platform.fromString(platformString);
       }
-    } catch (IllegalArgumentException e) {
+    } catch (WebDriverException e) {
       // The server probably responded with a name matching the os.name
       // system property. Try to recover and parse this.
       platform = Platform.extractFromSysProperty(platformString);

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/Open.java
Patch:
@@ -39,9 +39,7 @@ public Open(String baseUrl) {
   @Override
   protected Void handleSeleneseCommand(final WebDriver driver, String url, String ignored) {
     try {
-      final String urlToOpen = url.indexOf("://") == -1 ?
-          new URL(baseUrl, url).toString() :
-          url;
+      final String urlToOpen = url.contains("://") ? url : new URL(baseUrl, url).toString();
 
       driver.get(urlToOpen);
     } catch (MalformedURLException e) {

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/OpenWindow.java
Patch:
@@ -42,9 +42,7 @@ public OpenWindow(String baseUrl, GetEval opener) {
   protected Void handleSeleneseCommand(final WebDriver driver, final String url,
       final String windowID) {
     try {
-      final String urlToOpen = url.indexOf("://") == -1 ?
-          new URL(baseUrl, url).toString() :
-          url;
+      final String urlToOpen = url.contains("://") ? url : new URL(baseUrl, url).toString();
 
       String[] args = {String.format("window.open('%s', '%s'); null;", urlToOpen, windowID)};
 

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -34,6 +34,7 @@
 import org.openqa.selenium.remote.service.DriverService;
 
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Set;
 import java.util.logging.Logger;
 
@@ -133,7 +134,7 @@ private static CommandExecutor toExecutor(FirefoxOptions options) {
     if (options.isLegacy()) {
       builder = XpiDriverService.builder()
           .withBinary(options.getBinary())
-          .withProfile(options.getProfile());
+          .withProfile(Optional.ofNullable(options.getProfile()).orElse(new FirefoxProfile()));
     } else {
       builder = new GeckoDriverService.Builder()
           .usingFirefoxBinary(options.getBinary());

File: java/client/src/org/openqa/selenium/opera/OperaDriver.java
Patch:
@@ -132,7 +132,7 @@ public OperaDriver(OperaDriverService service) {
    *
    * @param capabilities The capabilities required from the OperaDriver.
    * @see #OperaDriver(OperaDriverService, Capabilities)
-   * @deprecated Use {@link OperaDriver(OperaOptions}) instead.
+   * @deprecated Use {@link OperaDriver(OperaOptions)} instead.
    */
   @Deprecated
   public OperaDriver(Capabilities capabilities) {

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -233,7 +233,7 @@ protected void startSession(Capabilities desiredCapabilities) {
       if (platformString == null || "".equals(platformString)) {
         platform = Platform.ANY;
       } else {
-        platform = Platform.valueOf(platformString);
+        platform = Platform.fromString(platformString);
       }
     } catch (IllegalArgumentException e) {
       // The server probably responded with a name matching the os.name

File: java/client/src/org/openqa/selenium/ImmutableCapabilities.java
Patch:
@@ -145,7 +145,7 @@ private void abbreviate(
       Map<?, ?> m = (Map<?, ?>) stringify;
       int length = m.size();
       int i = 0;
-      for (Map.Entry entry : m.entrySet()) {
+      for (Map.Entry<?, ?> entry : m.entrySet()) {
         abbreviate(seen, value, entry.getKey());
         value.append("=");
         abbreviate(seen, value, entry.getValue());

File: java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java
Patch:
@@ -275,10 +275,10 @@ private Object wrapResult(Object result) {
       return new EventFiringWebElement((WebElement) result);
     }
     if (result instanceof List) {
-      return ((List) result).stream().map(this::wrapResult).collect(Collectors.toList());
+      return ((List<?>) result).stream().map(this::wrapResult).collect(Collectors.toList());
     }
     if (result instanceof Map) {
-      return ((Map<String, Object>) result).entrySet().stream().collect(
+      return ((Map<?, ?>) result).entrySet().stream().collect(
           HashMap::new,
           (m, e) -> m.put(e.getKey(), e.getValue()),
           Map::putAll);

File: java/client/test/org/openqa/selenium/testing/drivers/ExternalDriverSupplier.java
Patch:
@@ -101,7 +101,7 @@ private static Optional<Supplier<WebDriver>> createForExternalServer(
   private static Optional<Supplier<WebDriver>> createDelegate(Capabilities desiredCapabilities) {
     Optional<Class<? extends Supplier<WebDriver>>> supplierClass = getDelegateClass();
     if (supplierClass.isPresent()) {
-      Class<? extends Supplier> clazz = supplierClass.get();
+      Class<? extends Supplier<WebDriver>> clazz = supplierClass.get();
       logger.info("Using delegate supplier: " + clazz.getName());
       try {
         @SuppressWarnings("unchecked")

File: java/client/src/org/openqa/selenium/remote/internal/HttpClientFactory.java
Patch:
@@ -99,8 +99,8 @@ public CloseableHttpClient createHttpClient(Credentials credentials, int connect
 
     HttpClientBuilder builder = HttpClientBuilder.create()
         .setConnectionManager(getClientConnectionManager())
-        .setDefaultSocketConfig(createSocketConfig(socketTimeout))
-        .setDefaultRequestConfig(createRequestConfig(connectionTimeout, socketTimeout))
+        .setDefaultSocketConfig(socketConfig)
+        .setDefaultRequestConfig(requestConfig)
         .setRoutePlanner(createRoutePlanner());
 
     if (credentials != null) {

File: java/client/src/org/openqa/selenium/remote/http/W3CHttpCommandCodec.java
Patch:
@@ -294,7 +294,7 @@ public W3CHttpCommandCodec() {
           "if (!form.ownerDocument) { throw Error('Unable to find owning document'); }\n" +
           "var e = form.ownerDocument.createEvent('Event');\n" +
           "e.initEvent('submit', true, true);\n" +
-          "if (form.dispatchEvent(e)) { form.submit() }\n",
+          "if (form.dispatchEvent(e)) { HTMLFormElement.prototype.submit.call(form) }\n",
           asElement(parameters.get("id")));
 
       default:

File: java/client/test/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -308,7 +308,6 @@ public void testCanClickOnAnExternalImplicitSubmitButton() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, issue = "3398")
   public void canSubmitFormWithSubmitButtonIdEqualToSubmit() {
     String blank = appServer.create(new Page().withTitle("Submitted Successfully!"));
     driver.get(appServer.create(new Page().withBody(
@@ -321,7 +320,6 @@ public void canSubmitFormWithSubmitButtonIdEqualToSubmit() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, issue = "3398")
   public void canSubmitFormWithSubmitButtonNameEqualToSubmit() {
     String blank = appServer.create(new Page().withTitle("Submitted Successfully!"));
     driver.get(appServer.create(new Page().withBody(

File: java/client/src/org/openqa/selenium/WebDriver.java
Patch:
@@ -457,7 +457,7 @@ interface ImeHandler {
     /**
      * Make an engines that is available (appears on the list returned by getAvailableEngines)
      * active. After this call, the only loaded engine on the IME daemon will be this one and the
-     * input sent using sendKeys will be converted by the engine. Noteh that this is a
+     * input sent using sendKeys will be converted by the engine. Note that this is a
      * platform-independent method of activating IME (the platform-specific way being using keyboard
      * shortcuts).
      *

File: java/client/src/org/openqa/selenium/support/ui/Clock.java
Patch:
@@ -40,7 +40,7 @@ public interface Clock {
   /**
    * Tests if a point in time occurs before the {@link #now() current time}.
    *
-   * @param endInMillis The timestamnp to check.
+   * @param endInMillis The timestamp to check.
    * @return Whether the given timestamp represents a point in time before the current time.
    */
   boolean isNowBefore(long endInMillis);

File: java/client/src/org/openqa/selenium/support/ui/Duration.java
Patch:
@@ -64,10 +64,10 @@ public String toString() {
   }
 
   /**
-   * Converts this durtation to the given unit of time.
+   * Converts this duration to the given unit of time.
    *
    * @param unit The time unit to convert to.
-   * @return The value ofthis duration in the specified unit of time.
+   * @return The value of this duration in the specified unit of time.
    */
   public long in(TimeUnit unit) {
     return unit.convert(time, this.unit);

File: java/client/src/org/openqa/selenium/support/ui/ISelect.java
Patch:
@@ -30,7 +30,7 @@
 public interface ISelect {
 
   /**
-   * @return Whether this select element support selecting multiple options at the same time? This
+   * @return Whether this select element supports selecting multiple options at the same time? This
    * is done by checking the value of the "multiple" attribute.
    */
   public boolean isMultiple();

File: java/client/src/org/openqa/selenium/support/ui/Sleeper.java
Patch:
@@ -34,7 +34,7 @@ public void sleep(Duration duration) throws InterruptedException {
    * Sleeps for the specified duration of time.
    *
    * @param duration How long to sleep.
-   * @throws InterruptedException If hte thread is interrupted while sleeping.
+   * @throws InterruptedException If the thread is interrupted while sleeping.
    */
   void sleep(Duration duration) throws InterruptedException;
 }

File: java/client/src/org/openqa/selenium/support/ui/Wait.java
Patch:
@@ -35,7 +35,7 @@ public interface Wait<F> {
    * If the condition does not become true within a certain time (as defined by the implementing
    * class), this method will throw a non-specified {@link Throwable}. This is so that an
    * implementor may throw whatever is idiomatic for a given test infrastructure (e.g. JUnit4 would
-   * throw {@link AssertionError}.
+   * throw {@link AssertionError}).
    *
    * @param <T> the return type of the method, which must not be Void
    * @param isTrue the parameter to pass to the {@link ExpectedCondition}

File: java/client/src/com/thoughtworks/selenium/SeleneseTestCase.java
Patch:
@@ -310,7 +310,7 @@ public void runBare() throws Throwable {
   }
 
   public String join(String[] array, char c) {
-    return stb.join(array, c);
+    return SeleneseTestBase.join(array, c);
   }
 
 }

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -32,7 +32,6 @@
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
-import java.io.OutputStream;
 import java.net.MalformedURLException;
 
 /**

File: java/client/src/org/openqa/selenium/firefox/Preferences.java
Patch:
@@ -38,7 +38,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
-
 class Preferences {
 
   /**

File: java/client/test/org/openqa/selenium/environment/webserver/JettyAppServer.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.environment.webserver;
 
 import static com.google.common.base.Charsets.UTF_8;
-import static com.google.common.net.HttpHeaders.CONTENT_LENGTH;
 import static com.google.common.net.HttpHeaders.CONTENT_TYPE;
 import static com.google.common.net.MediaType.JSON_UTF_8;
 import static org.openqa.selenium.net.PortProber.findFreePort;
@@ -54,9 +53,7 @@
 import org.seleniumhq.jetty9.util.ssl.SslContextFactory;
 
 import java.io.File;
-import java.io.FileWriter;
 import java.io.IOException;
-import java.io.Writer;
 import java.net.URL;
 import java.nio.file.Files;
 import java.nio.file.Path;

File: java/client/test/org/openqa/selenium/testing/drivers/IgnoreComparatorUnitTest.java
Patch:
@@ -15,7 +15,6 @@
 // specific language governing permissions and limitations
 // under the License.
 
-
 package org.openqa.selenium.testing.drivers;
 
 import static org.junit.Assert.assertFalse;

File: java/client/test/org/openqa/selenium/testing/drivers/SauceBackedDriverSupplier.java
Patch:
@@ -15,7 +15,6 @@
 // specific language governing permissions and limitations
 // under the License.
 
-
 package org.openqa.selenium.testing.drivers;
 
 import org.openqa.selenium.Capabilities;

File: java/client/test/org/openqa/selenium/testing/drivers/TestInternetExplorerSupplier.java
Patch:
@@ -15,7 +15,6 @@
 // specific language governing permissions and limitations
 // under the License.
 
-
 package org.openqa.selenium.testing.drivers;
 
 import org.openqa.selenium.Capabilities;

File: java/server/src/org/openqa/selenium/server/htmlrunner/ReflectivelyDiscoveredSteps.java
Patch:
@@ -182,7 +182,7 @@ private static ImmutableMap<String, CoreStepFactory> discover() {
         factories.put(
           "waitFor" + shortName,
           (loc, val) -> (selenium, state) -> {
-            String[] args = buildArgs(method, state.expand(loc), state.expand(val));
+            Object[] args = buildArgs(method, state.expand(loc), state.expand(val));
 
             try {
               new Wait() {
@@ -211,7 +211,7 @@ public boolean until() {
         factories.put(
           "waitFor" + negateName(shortName),
           (loc, val) -> (selenium, state) -> {
-            String[] args = buildArgs(method, state.expand(loc), state.expand(val));
+            Object[] args = buildArgs(method, state.expand(loc), state.expand(val));
 
             try {
               new Wait() {
@@ -306,7 +306,7 @@ private static NextStepDecorator invokeMethod(
     String locator,
     String value,
     OnSuccess onSuccess) {
-    String[] args = buildArgs(method, locator, value);
+    Object[] args = buildArgs(method, locator, value);
     try {
       Object result = method.invoke(selenium, args);
       return onSuccess.handle(result);

File: java/client/src/org/openqa/selenium/os/CommandLine.java
Patch:
@@ -85,7 +85,7 @@ public void setDynamicLibraryPath(String newLibraryPath) {
   public void updateDynamicLibraryPath(String extraPath) {
     if (extraPath != null) {
       String existing = System.getenv(getLibraryPathPropertyName());
-      String ldPath = existing != null ? existing + File.separator + extraPath : extraPath;
+      String ldPath = existing != null ? existing + File.pathSeparator + extraPath : extraPath;
       setEnvironmentVariable(getLibraryPathPropertyName(), ldPath);
     }
   }

File: java/client/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -787,6 +787,7 @@ public void testShouldNotBeAbleToLocateASingleElementOnABlankPage() {
 
   @SwitchToTopAfterTest
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/934")
   public void testAnElementFoundInADifferentFrameIsStale() {
     driver.get(pages.missedJsReferencePage);
     driver.switchTo().frame("inner");

File: java/client/src/org/openqa/selenium/logging/StoringLocalLogs.java
Patch:
@@ -61,7 +61,9 @@ public void addEntry(String logType, LogEntry entry) {
     }
 
     if (!localLogs.containsKey(logType)) {
-      localLogs.put(logType, new ArrayList<>());
+      List<LogEntry> entries = new ArrayList<>();
+      entries.add(entry);
+      localLogs.put(logType, entries);
     } else {
       localLogs.get(logType).add(entry);
     }

File: java/client/test/org/openqa/selenium/ClickScrollingTest.java
Patch:
@@ -107,9 +107,9 @@ public void testShouldBeAbleToClickOnAnElementHiddenByYOverflow() {
   }
 
   @Test
-  @Ignore(IE)
-  @Ignore(FIREFOX)
-  @Ignore(MARIONETTE)
+  @Ignore(value = IE, issue = "716")
+  @Ignore(value = FIREFOX, issue = "716")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/915")
   @Ignore(value = SAFARI, reason = "not tested")
   public void testShouldBeAbleToClickOnAnElementPartiallyHiddenByOverflow() {
     driver.get(appServer.whereIs("scrolling_tests/page_with_partially_hidden_element.html"));

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -570,12 +570,12 @@ public void shouldHandleObjectThatThatHaveToJSONMethod() {
 
   @Test(timeout = 10000)
   @Ignore(CHROME)
-  @Ignore(IE)
+  @Ignore(value = IE, issue = "540")
   @Ignore(PHANTOMJS)
   @Ignore(SAFARI)
-  @Ignore(FIREFOX)
+  @Ignore(value = FIREFOX, issue = "540")
   @Ignore(HTMLUNIT)
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/904")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/914")
   public void shouldHandleRecursiveStructures() {
     driver.get(pages.simpleTestPage);
 

File: java/client/test/org/openqa/selenium/firefox/MarionetteTest.java
Patch:
@@ -77,7 +77,7 @@ public void canStartDriverWithSpecifiedProfile() {
     profile.setPreference("browser.startup.page", 1);
     profile.setPreference("browser.startup.homepage", pages.xhtmlTestPage);
 
-    localDriver = new FirefoxDriver(profile);
+    localDriver = new FirefoxDriver(new FirefoxOptions().setProfile(profile));
     wait.until($ -> "XHTML Test Page".equals(localDriver.getTitle()));
 
     verifyItIsMarionette(localDriver);

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -544,7 +544,7 @@ public void testShouldBeAbleToReturnADateObject() {
   @Ignore(IE)
   @Ignore(PHANTOMJS)
   @Ignore(SAFARI)
-  @Ignore(MARIONETTE)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/904")
   public void shouldReturnDocumentElementIfDocumentIsReturned() {
     driver.get(pages.simpleTestPage);
 

File: java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java
Patch:
@@ -97,7 +97,7 @@ public void testSetExtraServlets() throws Exception {
     remote.startRemoteServer(); // does not actually start anything.
 
     // verify the expected extra servlets also made it to the server instance
-    assertEquals(3, ((DummyGridNodeServer) server).extraServlets.size());
+    assertEquals(5, ((DummyGridNodeServer) server).extraServlets.size());
     assertEquals(ResourceServlet.class,
                  ((DummyGridNodeServer) server).extraServlets.get("/resources/*"));
     assertEquals(DisplayHelpServlet.class,

File: java/server/test/org/openqa/grid/internal/utils/SelfRegisteringRemoteTest.java
Patch:
@@ -87,7 +87,7 @@ public void testSetExtraServlets() throws Exception {
 
     // there should be three servlets on the remote's map -- The resource servlet, the
     // help servlet, and the one we added above.
-    assertEquals(3, remote.getNodeServlets().size());
+    assertEquals(5, remote.getNodeServlets().size());
     assertEquals(ResourceServlet.class, remote.getNodeServlets().get("/resources/*"));
     assertEquals(DisplayHelpServlet.class,
                  remote.getNodeServlets().get("/extra/DisplayHelpServlet/*"));

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -261,7 +261,7 @@ public void testCanClickAnImageMapArea() {
 
   @Test
   @Ignore(FIREFOX)
-  @Ignore(MARIONETTE)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/901")
   public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {
     String url = appServer.whereIs("click_too_big.html");
     driver.get(url);
@@ -275,7 +275,7 @@ public void testShouldBeAbleToClickOnAnElementGreaterThanTwoViewports() {
 
   @SwitchToTopAfterTest
   @Test
-  @Ignore(MARIONETTE)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/901")
   public void testShouldBeAbleToClickOnAnElementInFrameGreaterThanTwoViewports() {
     String url = appServer.whereIs("click_too_big_in_frame.html");
     driver.get(url);

File: java/client/test/org/openqa/selenium/I18nTest.java
Patch:
@@ -85,7 +85,6 @@ public void testEnteringHebrewTextFromRightToLeft() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, reason = "Doesn't handle first codepoint correctly.")
   @Ignore(value = CHROME, reason = "ChromeDriver only supports characters in the BMP")
   public void testEnteringSupplementaryCharacters() {
     assumeFalse("IE: versions less thank 10 have issue 5069",

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -471,7 +471,6 @@ public void testShiftSelectionDeletes() {
   }
 
   @Test
-  @Ignore(MARIONETTE)
   @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/646")
   public void testChordControlHomeShiftEndDelete() {
     assumeFalse("FIXME: macs don't have HOME keys, would PGUP work?",

File: java/client/test/org/openqa/selenium/UploadTest.java
Patch:
@@ -24,7 +24,6 @@
 import static org.openqa.selenium.support.ui.ExpectedConditions.not;
 import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOf;
 import static org.openqa.selenium.testing.Driver.IE;
-import static org.openqa.selenium.testing.Driver.MARIONETTE;
 import static org.openqa.selenium.testing.Driver.PHANTOMJS;
 import static org.openqa.selenium.testing.Driver.SAFARI;
 
@@ -35,7 +34,6 @@
 import org.junit.Test;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
-import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.SwitchToTopAfterTest;
 import org.openqa.selenium.testing.TestUtilities;
 

File: java/client/src/org/openqa/selenium/interactions/TouchScreen.java
Patch:
@@ -102,7 +102,7 @@ public interface TouchScreen {
    * @param where The coordinate of the element to flick on
    * @param xOffset The x offset relative to the viewport
    * @param yOffset The y offset relative to the viewport
-   * @param speed speed to flick, 0 = normal, 1 = fast, 2 = slow
+   * @param speed speed in pixels/second
    */
   void flick(Coordinates where, int xOffset, int yOffset, int speed);
 }

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -223,7 +223,6 @@ public void testShouldBeAbleToGetTheLocationOfAnElement() {
   @NeedsFreshDriver
   @Test
   @Ignore(value = SAFARI, reason = "issue 3693")
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/611")
   public void testShouldBeAbleToClickALinkThatClosesAWindow() throws Exception {
     driver.get(pages.javascriptPage);
 

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -188,7 +188,6 @@ public void testShouldBeAbleToIterateOverAllOpenWindows() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/611")
   public void testClickingOnAButtonThatClosesAnOpenWindowDoesNotCauseTheBrowserToHang()
       throws Exception {
     assumeFalse(Browser.detect() == Browser.opera &&
@@ -221,7 +220,6 @@ public void testClickingOnAButtonThatClosesAnOpenWindowDoesNotCauseTheBrowserToH
   }
 
   @Test
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/611")
   public void testCanCallGetWindowHandlesAfterClosingAWindow() throws Exception {
     assumeFalse(Browser.detect() == Browser.opera &&
                 TestUtilities.getEffectivePlatform().is(Platform.WINDOWS));

File: java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedRequest.java
Patch:
@@ -31,6 +31,7 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
+import java.io.UnsupportedEncodingException;
 import java.nio.ByteBuffer;
 import java.nio.CharBuffer;
 import java.nio.charset.CharacterCodingException;
@@ -165,8 +166,8 @@ public String getBody() {
     return null;
   }
 
-  public void setBody(String content) {
-    setBody(content.getBytes());
+  public void setBody(String content) throws UnsupportedEncodingException {
+    setBody(content.getBytes(encoding));
   }
 
   public void setBody(byte[] content) {

File: java/client/test/org/openqa/selenium/ProxySettingTest.java
Patch:
@@ -57,7 +57,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-@Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/669")
+@Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/764")
 public class ProxySettingTest extends JUnit4TestBase {
 
   @Rule

File: java/client/src/org/openqa/selenium/remote/internal/WebElementToJsonConverter.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 
+import org.openqa.selenium.internal.HasIdentity;
 import org.openqa.selenium.internal.WrapsElement;
 import org.openqa.selenium.remote.Dialect;
 import org.openqa.selenium.remote.RemoteWebElement;
@@ -50,7 +51,7 @@ public Object apply(Object arg) {
       arg = ((WrapsElement) arg).getWrappedElement();
     }
 
-    if (arg instanceof RemoteWebElement) {
+    if (arg instanceof HasIdentity) {
       return ImmutableMap.of(
         Dialect.OSS.getEncodedElementKey(), ((RemoteWebElement) arg).getId(),
         Dialect.W3C.getEncodedElementKey(), ((RemoteWebElement) arg).getId());

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -66,7 +66,6 @@
 import org.openqa.selenium.testing.NeedsFreshDriver;
 import org.openqa.selenium.testing.NeedsLocalEnvironment;
 import org.openqa.selenium.testing.NoDriverAfterTest;
-import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.drivers.SauceDriver;
 import org.openqa.selenium.testing.drivers.SynthesizedFirefoxDriver;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
@@ -119,7 +118,6 @@ public void canStartDriverWithSpecifiedProfile() {
   }
 
   @Test
-  @NotYetImplemented(MARIONETTE)
   public void canPassCapabilities() {
     DesiredCapabilities capabilities = new DesiredCapabilities();
     capabilities.setCapability(CapabilityType.PAGE_LOAD_STRATEGY, "none");

File: java/client/test/org/openqa/selenium/firefox/MarionetteTest.java
Patch:
@@ -102,7 +102,6 @@ public void canStartDriverWithSpecifiedBinaryAndProfile() throws IOException {
   }
 
   @Test
-  @NotYetImplemented(MARIONETTE)
   public void canPassCapabilities() {
     DesiredCapabilities capabilities = new DesiredCapabilities();
     capabilities.setCapability(CapabilityType.PAGE_LOAD_STRATEGY, "none");

File: java/client/test/org/openqa/selenium/SessionHandlingTest.java
Patch:
@@ -43,7 +43,7 @@ public void callingQuitMoreThanOnceOnASessionIsANoOp() {
 
   @NoDriverAfterTest
   @Test
-  @Ignore(value = FIREFOX, issue = "https://github.com/SeleniumHQ/selenium/issues/3792")
+  @Ignore(value = FIREFOX)
   @Ignore(PHANTOMJS)
   @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/689")
   public void callingQuitAfterClosingTheLastWindowIsANoOp() {
@@ -54,7 +54,7 @@ public void callingQuitAfterClosingTheLastWindowIsANoOp() {
 
   @NoDriverAfterTest
   @Test
-  @Ignore(value = FIREFOX, issue = "3792")
+  @Ignore(value = FIREFOX)
   @Ignore(value = PHANTOMJS, reason = "throws NoSuchWindowException")
   @Ignore(value = SAFARI, reason = "throws NullPointerException")
   @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/689")

File: java/client/src/org/openqa/selenium/os/WindowsUtils.java
Patch:
@@ -87,7 +87,7 @@ public static synchronized Properties loadEnvironment() {
    * @return the path to the Windows Program Files
    */
   public static String getProgramFilesPath() {
-    return getEnvVarPath("ProgramFiles", "C:\\Program Files");
+    return getEnvVarPath("ProgramFiles", "C:\\Program Files").replace(" (x86)", "");
   }
 
   public static String getProgramFiles86Path() {

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -41,7 +41,6 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.NoDriverAfterTest;
-import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.SwitchToTopAfterTest;
 
 import java.util.Set;

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -35,7 +35,6 @@
 
 import org.junit.Test;
 import org.openqa.selenium.support.ui.ExpectedConditions;
-import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.TestUtilities;

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -39,7 +39,6 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.NeedsFreshDriver;
-import org.openqa.selenium.testing.NotYetImplemented;
 
 public class JavascriptEnabledDriverTest extends JUnit4TestBase {
 

File: java/client/test/org/openqa/selenium/SessionHandlingTest.java
Patch:
@@ -26,13 +26,10 @@
 import static org.openqa.selenium.testing.TestUtilities.catchThrowable;
 
 import org.junit.Test;
-import org.junit.runner.RunWith;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.NoDriverAfterTest;
 import org.openqa.selenium.testing.NotYetImplemented;
-import org.openqa.selenium.testing.SeleniumTestRunner;
-import org.openqa.selenium.testing.drivers.WebDriverBuilder;
 
 public class SessionHandlingTest extends JUnit4TestBase {
 

File: java/client/test/org/openqa/selenium/SvgDocumentTest.java
Patch:
@@ -29,7 +29,6 @@
 import org.junit.Test;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
-import org.openqa.selenium.testing.NotYetImplemented;
 
 @Ignore(value = SAFARI, reason = "SafariDriver cannot manipulate SVG documents")
 public class SvgDocumentTest extends JUnit4TestBase {

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -621,7 +621,7 @@ public void testShouldBeAbleToTypeOnANumberInputField() {
   public void testShouldThrowIllegalArgumentException() {
     driver.get(pages.formPage);
     WebElement email = driver.findElement(By.id("age"));
-    email.sendKeys(null);
+    email.sendKeys((CharSequence[]) null);
   }
 
   @Test

File: java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java
Patch:
@@ -859,7 +859,7 @@ public static ExpectedCondition<Boolean> not(final ExpectedCondition<?> conditio
       @Override
       public Boolean apply(WebDriver driver) {
         Object result = condition.apply(driver);
-        return result == null || result == Boolean.FALSE;
+        return result == null || result.equals(Boolean.FALSE);
       }
 
       @Override

File: java/client/test/org/openqa/selenium/support/ui/ExpectedConditionsTest.java
Patch:
@@ -234,7 +234,7 @@ public void waitingForVisibilityOfElementInverse_elementStaysVisible()
 
   @Test
   public void invertingAConditionThatReturnsFalse() {
-    when(mockCondition.apply(mockDriver)).thenReturn(false);
+    when(mockCondition.apply(mockDriver)).thenReturn(new Boolean(false));
 
     assertTrue(wait.until(not(mockCondition)));
     verifyZeroInteractions(mockSleeper);
@@ -252,7 +252,7 @@ public void invertingAConditionThatReturnsNull() {
   public void invertingAConditionThatAlwaysReturnsTrueTimesout() throws InterruptedException {
     when(mockClock.laterBy(1000L)).thenReturn(3000L);
     when(mockClock.isNowBefore(3000L)).thenReturn(true, false);
-    when(mockCondition.apply(mockDriver)).thenReturn(true);
+    when(mockCondition.apply(mockDriver)).thenReturn(new Boolean(true));
 
     try {
       wait.until(not(mockCondition));

File: java/client/src/org/openqa/selenium/Proxy.java
Patch:
@@ -469,6 +469,7 @@ public boolean equals(Object o) {
            Objects.equals(getNoProxy(), proxy.getNoProxy()) &&
            Objects.equals(getSslProxy(), proxy.getSslProxy()) &&
            Objects.equals(getSocksProxy(), proxy.getSocksProxy()) &&
+           Objects.equals(getSocksVersion(), proxy.getSocksVersion()) &&
            Objects.equals(getSocksUsername(), proxy.getSocksUsername()) &&
            Objects.equals(getSocksPassword(), proxy.getSocksPassword()) &&
            Objects.equals(getProxyAutoconfigUrl(), proxy.getProxyAutoconfigUrl());
@@ -484,6 +485,7 @@ public int hashCode() {
         getNoProxy(),
         getSslProxy(),
         getSocksProxy(),
+        getSocksVersion(),
         getSocksUsername(),
         getSocksPassword(),
         getProxyAutoconfigUrl());

File: java/client/test/org/openqa/selenium/ProxySettingTest.java
Patch:
@@ -57,7 +57,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-@Ignore(MARIONETTE)
+@Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/669")
 public class ProxySettingTest extends JUnit4TestBase {
 
   @Rule

File: java/client/src/org/openqa/selenium/net/UrlChecker.java
Patch:
@@ -34,6 +34,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Logger;
 
@@ -97,7 +98,7 @@ public void waitUntilAvailable(long timeout, TimeUnit unit, final URL... urls)
           sleepMillis = (sleepMillis >= MAX_POLL_INTERVAL_MS) ? sleepMillis : sleepMillis * 2;
         }
       }, timeout, unit);
-    } catch (UncheckedTimeoutException e) {
+    } catch (UncheckedTimeoutException | java.util.concurrent.TimeoutException e) {
       throw new TimeoutException(String.format(
           "Timed out waiting for %s to be available after %d ms",
           Arrays.toString(urls), MILLISECONDS.convert(System.nanoTime() - start, NANOSECONDS)), e);

File: java/client/src/org/openqa/selenium/Platform.java
Patch:
@@ -38,7 +38,7 @@ public enum Platform {
    * For versions of Windows that "feel like" Windows XP. These are ones that store files in
    * "\Program Files\" and documents under "\\documents and settings\\username"
    */
-  XP("Windows Server 2003", "xp", "windows", "winnt") {
+  XP("Windows Server 2003", "xp", "windows", "winnt", "windows_nt") {
     @Override
     public Platform family() {
       return WINDOWS;

File: java/client/src/org/openqa/selenium/WebDriver.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * The main interface to use for testing, which represents an idealised web browser. The methods in
- * this class fall into three categories:
+ * this interface fall into three categories:
  * <ul>
  * <li>Control of the browser itself</li>
  * <li>Selection of {@link WebElement}s</li>
@@ -39,8 +39,8 @@
  * various methods similar to {@link WebDriver#findElement(By)}, which is used to find
  * {@link WebElement}s.
  * <p>
- * Currently, you will need to instantiate implementations of this class directly. It is hoped that
- * you write your tests against this interface so that you may "swap in" a more fully featured
+ * Currently, you will need to instantiate implementations of this interface directly. It is hoped
+ * that you write your tests against this interface so that you may "swap in" a more fully featured
  * browser when there is a requirement for one.
  * <p>
  * Note that all methods that use XPath to locate elements will throw a {@link RuntimeException}

File: java/client/src/org/openqa/selenium/TakesScreenshot.java
Patch:
@@ -51,6 +51,8 @@ public interface TakesScreenshot {
    * @param target target type, @see OutputType
    * @return Object in which is stored information about the screenshot.
    * @throws WebDriverException on failure.
+   * @throws UnsupportedOperationException if the underlying implementation does not support
+   * screenshot capturing.
    */
   <X> X getScreenshotAs(OutputType<X> target) throws WebDriverException;
 }

File: java/server/test/org/openqa/selenium/remote/server/RemoteServerTests.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
+import org.openqa.selenium.remote.server.handler.ConfigureTimeoutTest;
 import org.openqa.selenium.remote.server.handler.UploadFileTest;
 import org.openqa.selenium.remote.server.handler.html5.UtilsTest;
 import org.openqa.selenium.remote.server.handler.interactions.SendKeyToActiveElementTest;
@@ -43,6 +44,7 @@
     SessionLogsTest.class,
     TeeReaderTest.class,
     UploadFileTest.class,
+    ConfigureTimeoutTest.class,
     UrlTemplateTest.class,
     UtilsTest.class
 })

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -122,7 +122,6 @@ protected File findDefaultExecutable() {
     protected ImmutableList<String> createArgs() {
       ImmutableList.Builder<String> argsBuilder = ImmutableList.builder();
       argsBuilder.add(String.format("--port=%d", getPort()));
-      argsBuilder.add("-vv");
       if (firefoxBinary != null) {
         argsBuilder.add("-b");
         argsBuilder.add(firefoxBinary.getPath());

File: java/client/test/org/openqa/selenium/ChildrenFindingTest.java
Patch:
@@ -122,7 +122,6 @@ public void testFindElementByIdWhenMultipleMatchesExist() {
   @Test
   @Ignore(value = CHROME,
       reason = "Need to recompile drivers with atoms from 6c55320d3f0eb23de56270a55c74602fc8d63c8a")
-  @Ignore(IE)
   public void testFindElementByIdWhenIdContainsNonAlphanumericCharacters() {
     driver.get(pages.nestedPage);
     WebElement element = driver.findElement(By.id("test_special_chars"));
@@ -151,7 +150,6 @@ public void testFindElementsById() {
   @Test
   @Ignore(value = CHROME,
       reason = "Need to recompile drivers with atoms from 6c55320d3f0eb23de56270a55c74602fc8d63c8a")
-  @Ignore(IE)
   public void testFindElementsByIdWithNonAlphanumericCharacters() {
     driver.get(pages.nestedPage);
     WebElement element = driver.findElement(By.id("test_special_chars"));

File: java/server/src/org/openqa/selenium/remote/server/AllHandlers.java
Patch:
@@ -29,6 +29,7 @@
 import org.openqa.selenium.remote.SessionId;
 import org.openqa.selenium.remote.http.HttpMethod;
 import org.openqa.selenium.remote.server.commandhandler.GetLogTypes;
+import org.openqa.selenium.remote.server.commandhandler.GetLogsOfType;
 import org.openqa.selenium.remote.server.commandhandler.NoHandler;
 import org.openqa.selenium.remote.server.commandhandler.NoSessionHandler;
 import org.openqa.selenium.remote.server.commandhandler.Status;
@@ -63,7 +64,8 @@ public AllHandlers(ActiveSessions allSessions) {
             handler("/status", Status.class)
         ),
         HttpMethod.POST, ImmutableList.of(
-            handler("/session", BeginSession.class)
+            handler("/session", BeginSession.class),
+            handler("/session/{sessionId}/log", GetLogsOfType.class)
         ));
   }
 

File: java/client/src/org/openqa/selenium/chrome/ChromeOptions.java
Patch:
@@ -20,6 +20,7 @@
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
 import static org.openqa.selenium.remote.CapabilityType.PAGE_LOAD_STRATEGY;
+import static org.openqa.selenium.remote.CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR;
 import static org.openqa.selenium.remote.CapabilityType.UNHANDLED_PROMPT_BEHAVIOUR;
 
 import com.google.common.base.Objects;
@@ -205,6 +206,7 @@ public void setPageLoadStrategy(PageLoadStrategy strategy) {
 
   public void setUnhandledPromptBehaviour(UnexpectedAlertBehaviour behaviour) {
     capabilities.setCapability(UNHANDLED_PROMPT_BEHAVIOUR, behaviour);
+    capabilities.setCapability(UNEXPECTED_ALERT_BEHAVIOUR, behaviour);
   }
 
   /**

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java
Patch:
@@ -186,7 +186,7 @@ public void testAsJson() {
                  + "\"port\":5555,"
                  + "\"role\":\"node\","
                  + "\"timeout\":1800,"
-                 + "\"enablePassThrough\":false}", gnc.toJson().toString());
+                 + "\"enablePassThrough\":true}", gnc.toJson().toString());
   }
 
   @Test

File: java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java
Patch:
@@ -209,8 +209,7 @@ public class StandaloneConfiguration {
       names = "-enablePassThrough",
       description = "<Boolean>: Whether or not to use the experimental passthrough mode. Defaults to false."
   )
-  // initially defaults to false from boolean primitive type
-  public boolean enablePassThrough;
+  public boolean enablePassThrough = true;
 
 
   /**

File: java/client/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -28,6 +28,7 @@
 import static org.openqa.selenium.support.ui.ExpectedConditions.frameToBeAvailableAndSwitchToIt;
 import static org.openqa.selenium.support.ui.ExpectedConditions.not;
 import static org.openqa.selenium.support.ui.ExpectedConditions.presenceOfElementLocated;
+import static org.openqa.selenium.support.ui.ExpectedConditions.textToBe;
 import static org.openqa.selenium.support.ui.ExpectedConditions.titleIs;
 import static org.openqa.selenium.testing.Driver.CHROME;
 import static org.openqa.selenium.testing.Driver.HTMLUNIT;
@@ -298,7 +299,7 @@ public void testShouldContinueToReferToTheSameFrameOnceItHasBeenSelected() {
     // TODO(simon): this should not be needed, and is only here because IE's submit returns too
     // soon.
 
-    wait.until(WaitingConditions.elementTextToEqual(By.xpath("//p"), "Success!"));
+    wait.until(textToBe(By.xpath("//p"), "Success!"));
   }
 
   @Test

File: java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
Patch:
@@ -152,6 +152,7 @@ public void setCapability(String key, Object value) {
         capabilities.put(key, value);
       }
     } else if (UNEXPECTED_ALERT_BEHAVIOUR.equals(key)) {
+      capabilities.put(UNEXPECTED_ALERT_BEHAVIOUR, value);
       capabilities.put(UNHANDLED_PROMPT_BEHAVIOUR, value);
     } else {
       capabilities.put(key, value);

File: java/client/test/org/openqa/selenium/UnexpectedAlertBehaviorTest.java
Patch:
@@ -23,7 +23,6 @@
 import static org.openqa.selenium.WaitingConditions.elementTextToEqual;
 import static org.openqa.selenium.remote.CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR;
 import static org.openqa.selenium.testing.Driver.CHROME;
-import static org.openqa.selenium.testing.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Driver.IE;
 import static org.openqa.selenium.testing.Driver.MARIONETTE;
 import static org.openqa.selenium.testing.Driver.PHANTOMJS;

File: java/client/test/org/openqa/selenium/environment/webserver/GeneratedJsTestServlet.java
Patch:
@@ -49,7 +49,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)
          + "    var path = '../../.." + req.getPathInfo() + "';\n"
          + "    goog.addDependency(path, ['" + symbol + "'],\n"
          + "        goog.dependencies_.requires['../../.." + req.getPathInfo() + "'] || [],\n"
-         + "        !!goog.dependencies_.pathIsModule[path]);\n"
+         + "        !!goog.dependencies_.loadFlags[path]);\n"
          + "    goog.require('" + symbol + "');\n"
          + "  })()\n"
          + "</script></head><body></body></html>").getBytes(Charsets.UTF_8);

File: java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedRequest.java
Patch:
@@ -136,6 +136,7 @@ public RequestType getRequestType() {
 
   @Override
   public ServletInputStream getInputStream() throws IOException {
+    setBody(getBody());
     return new ServletInputStreamImpl(new ByteArrayInputStream(body));
   }
 

File: java/server/src/org/openqa/grid/web/servlet/handler/WebDriverRequest.java
Patch:
@@ -63,19 +63,16 @@ public Map<String, Object> extractDesiredCapability() {
     String json = getBody();
     try {
       JsonObject map = new JsonParser().parse(json).getAsJsonObject();
-      System.out.println("map = " + map);
       // Current W3C has required / desired capabilities wrapped in a 'capabilities' object.
       // This will need to be updated if/when https://github.com/w3c/webdriver/pull/327 gets merged
       if (map.has("capabilities")) {
         JsonObject outerCapabilities = map.getAsJsonObject("capabilities");
         if (outerCapabilities.has("desiredCapabilities")) {
           JsonObject desiredCapabilities = outerCapabilities.getAsJsonObject("desiredCapabilities");
-          System.out.println("desiredCapabilities = " + desiredCapabilities);
           return new JsonToBeanConverter().convert(Map.class, desiredCapabilities);
         }
       }
       JsonObject dc = map.get("desiredCapabilities").getAsJsonObject();
-      System.out.println("dc = " + dc);
       return new JsonToBeanConverter().convert(Map.class, dc);
     } catch (Exception e) {
       throw new GridException("Cannot extract a capabilities from the request: " + json, e);

File: java/server/test/org/openqa/selenium/remote/server/RemoteServerTests.java
Patch:
@@ -38,7 +38,6 @@
     ProtocolConverterTest.class,
     ResultConfigTest.class,
     SendKeyToActiveElementTest.class,
-    SessionCleanerTest.class,
     SessionLogsTest.class,
     TeeReaderTest.class,
     UploadFileTest.class,

File: java/server/src/org/openqa/selenium/remote/server/DriverServlet.java
Patch:
@@ -346,7 +346,8 @@ public DriverSessions get() {
       if (attribute == null) {
         attribute = new DefaultDriverSessions(
             new DefaultDriverFactory(Platform.getCurrent()),
-            new SystemClock());
+            new SystemClock(),
+            getInactiveSessionTimeout());
       }
       return (DriverSessions) attribute;
     }

File: java/server/test/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumServletTest.java
Patch:
@@ -60,7 +60,8 @@ public void setUpServer() throws Exception {
 
     DefaultDriverSessions webdriverSessions = new DefaultDriverSessions(
         new DefaultDriverFactory(Platform.getCurrent()),
-        new SystemClock());
+        new SystemClock(),
+        18000);
     handler.setAttribute(DriverServlet.SESSIONS_KEY, webdriverSessions);
     handler.setContextPath("/");
     handler.addServlet(WebDriverBackedSeleniumServlet.class, "/selenium-server/driver/");

File: java/server/test/org/openqa/selenium/Main.java
Patch:
@@ -66,7 +66,8 @@ public static void main(String[] args) throws Exception {
     ServletContextHandler driverContext = new ServletContextHandler();
     DriverSessions driverSessions = new DefaultDriverSessions(
         new DefaultDriverFactory(Platform.getCurrent()),
-        new SystemClock());
+        new SystemClock(),
+        18000);
     driverContext.setAttribute(DriverServlet.SESSIONS_KEY, driverSessions);
     driverContext.setContextPath("/");
     driverContext.addServlet(DriverServlet.class, "/wd/hub/*");

File: java/server/test/org/openqa/selenium/remote/server/SessionCleanerTest.java
Patch:
@@ -120,6 +120,6 @@ public void testCleanupWithSessionExtension() throws Exception {
   private DriverSessions getDriverSessions(Clock clock) {
     DriverFactory factory = mock(DriverFactory.class);
     when(factory.newInstance(any(Capabilities.class))).thenReturn(mock(WebDriver.class));
-    return new DefaultDriverSessions(factory, clock);
+    return new DefaultDriverSessions(factory, clock, 18000);
   }
 }

File: java/server/test/org/openqa/selenium/remote/server/auth/AuthenticatedWebDriverServer.java
Patch:
@@ -76,7 +76,8 @@ public static void main(String[] args) throws Exception {
         DriverServlet.SESSIONS_KEY,
         new DefaultDriverSessions(
             new DefaultDriverFactory(Platform.getCurrent()),
-            new SystemClock()));
+            new SystemClock(),
+            18000));
     context.addServlet(new ServletHolder(DriverServlet.class), "/*");
     context.setSecurityHandler(securityHandler);
 

File: java/server/src/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumServlet.java
Patch:
@@ -227,8 +227,8 @@ private void startNewSession(
 
     Session session = sessionsSupplier.get().get(sessionId);
     if (session == null) {
-      getServletContext().log("Attempt to use non-existant session: " + sessionId);
-      sendError(resp, "Attempt to use non-existant session: " + sessionId);
+      getServletContext().log("Attempt to use non-existent session: " + sessionId);
+      sendError(resp, "Attempt to use non-existent session: " + sessionId);
       return;
     }
     WebDriver driver = session.getDriver();

File: java/client/src/org/openqa/selenium/io/CircularOutputStream.java
Patch:
@@ -39,7 +39,7 @@ public CircularOutputStream() {
   }
 
   @Override
-  public void write(int b) throws IOException {
+  public synchronized void write(int b) throws IOException {
     if (end == buffer.length) {
       filled = true;
       end = 0;

File: java/client/test/org/openqa/selenium/SmallTests.java
Patch:
@@ -21,6 +21,7 @@
 import org.openqa.selenium.interactions.CompositeActionTest;
 import org.openqa.selenium.interactions.IndividualKeyboardActionsTest;
 import org.openqa.selenium.interactions.IndividualMouseActionsTest;
+import org.openqa.selenium.interactions.PointerInputTest;
 import org.openqa.selenium.io.FileHandlerTest;
 import org.openqa.selenium.io.TemporaryFilesystemTest;
 import org.openqa.selenium.io.ZipTest;
@@ -51,6 +52,7 @@
     PerformanceLoggingMockTest.class,
     PlatformTest.class,
     PointTest.class,
+    PointerInputTest.class,
     ProxyTest.class,
     TemporaryFilesystemTest.class,
     WebDriverExceptionTest.class,

File: java/server/src/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumServlet.java
Patch:
@@ -78,8 +78,7 @@ public WebDriverBackedSeleniumServlet() {
       Object attribute = getServletContext().getAttribute(SESSIONS_KEY);
       if (attribute == null) {
         attribute = new DefaultDriverSessions(
-            Platform.getCurrent(),
-            new DefaultDriverFactory(),
+            new DefaultDriverFactory(Platform.getCurrent()),
             new SystemClock());
       }
       return (DriverSessions) attribute;

File: java/server/src/org/openqa/selenium/remote/server/DriverServlet.java
Patch:
@@ -228,8 +228,7 @@ public DriverSessions get() {
       Object attribute = getServletContext().getAttribute(SESSIONS_KEY);
       if (attribute == null) {
         attribute = new DefaultDriverSessions(
-            Platform.getCurrent(),
-            new DefaultDriverFactory(),
+            new DefaultDriverFactory(Platform.getCurrent()),
             new SystemClock());
       }
       return (DriverSessions) attribute;

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -123,8 +123,7 @@ public void boot() {
     }
 
     driverSessions = new DefaultDriverSessions(
-        Platform.getCurrent(),
-        new DefaultDriverFactory(),
+        new DefaultDriverFactory(Platform.getCurrent()),
         new SystemClock());
     handler.setAttribute(DriverServlet.SESSIONS_KEY, driverSessions);
     handler.setContextPath("/");

File: java/server/src/org/openqa/selenium/remote/server/WebDriverServlet.java
Patch:
@@ -61,8 +61,7 @@ public void init() throws ServletException {
     legacyDriverSessions = (DriverSessions) getServletContext().getAttribute(SESSIONS_KEY);
     if (legacyDriverSessions == null) {
       legacyDriverSessions = new DefaultDriverSessions(
-          Platform.getCurrent(),
-          new DefaultDriverFactory(),
+          new DefaultDriverFactory(Platform.getCurrent()),
           new SystemClock());
       getServletContext().setAttribute(SESSIONS_KEY, legacyDriverSessions);
     }

File: java/server/test/com/thoughtworks/selenium/webdriven/WebDriverBackedSeleniumServletTest.java
Patch:
@@ -59,8 +59,7 @@ public void setUpServer() throws Exception {
     ServletContextHandler handler = new ServletContextHandler();
 
     DefaultDriverSessions webdriverSessions = new DefaultDriverSessions(
-        Platform.getCurrent(),
-        new DefaultDriverFactory(),
+        new DefaultDriverFactory(Platform.getCurrent()),
         new SystemClock());
     handler.setAttribute(DriverServlet.SESSIONS_KEY, webdriverSessions);
     handler.setContextPath("/");

File: java/server/test/org/openqa/selenium/Main.java
Patch:
@@ -65,8 +65,7 @@ public static void main(String[] args) throws Exception {
 
     ServletContextHandler driverContext = new ServletContextHandler();
     DriverSessions driverSessions = new DefaultDriverSessions(
-        Platform.getCurrent(),
-        new DefaultDriverFactory(),
+        new DefaultDriverFactory(Platform.getCurrent()),
         new SystemClock());
     driverContext.setAttribute(DriverServlet.SESSIONS_KEY, driverSessions);
     driverContext.setContextPath("/");

File: java/server/test/org/openqa/selenium/remote/server/SessionCleanerTest.java
Patch:
@@ -167,6 +167,6 @@ public void testCleanupWithSessionExtension() throws Exception {
   private DriverSessions getDriverSessions(Clock clock) {
     DriverFactory factory = mock(DriverFactory.class);
     when(factory.newInstance(any(Capabilities.class))).thenReturn(mock(WebDriver.class));
-    return new DefaultDriverSessions(Platform.LINUX, factory, clock);
+    return new DefaultDriverSessions(factory, clock);
   }
 }

File: java/server/test/org/openqa/selenium/remote/server/auth/AuthenticatedWebDriverServer.java
Patch:
@@ -75,8 +75,7 @@ public static void main(String[] args) throws Exception {
     context.setAttribute(
         DriverServlet.SESSIONS_KEY,
         new DefaultDriverSessions(
-            Platform.getCurrent(),
-            new DefaultDriverFactory(),
+            new DefaultDriverFactory(Platform.getCurrent()),
             new SystemClock()));
     context.addServlet(new ServletHolder(DriverServlet.class), "/*");
     context.setSecurityHandler(securityHandler);

File: java/server/src/org/openqa/selenium/remote/server/BeginSession.java
Patch:
@@ -18,7 +18,7 @@
 package org.openqa.selenium.remote.server;
 
 import static com.google.common.net.HttpHeaders.CONTENT_TYPE;
-import static com.google.common.net.MediaType.JAVASCRIPT_UTF_8;
+import static com.google.common.net.MediaType.JSON_UTF_8;
 import static java.net.HttpURLConnection.HTTP_OK;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.openqa.selenium.remote.BrowserType.CHROME;
@@ -150,7 +150,7 @@ public void execute(HttpRequest req, HttpResponse resp) throws IOException {
       resp.setStatus(HTTP_OK);
       resp.setHeader("Cache-Control", "no-cache");
 
-      resp.setHeader("Content-Type", JAVASCRIPT_UTF_8.toString());
+      resp.setHeader("Content-Type", JSON_UTF_8.toString());
       resp.setHeader("Content-Length", String.valueOf(payload.length));
 
       resp.setContent(payload);

File: java/server/src/org/openqa/selenium/remote/server/ExceptionHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 package org.openqa.selenium.remote.server;
 
-import static com.google.common.net.MediaType.JAVASCRIPT_UTF_8;
+import static com.google.common.net.MediaType.JSON_UTF_8;
 import static java.net.HttpURLConnection.HTTP_INTERNAL_ERROR;
 import static java.nio.charset.StandardCharsets.UTF_8;
 
@@ -56,7 +56,7 @@ public void execute(HttpRequest req, HttpResponse resp) {
     byte[] bytes = new Gson().toJson(value).getBytes(UTF_8);
     resp.setStatus(HTTP_INTERNAL_ERROR);
 
-    resp.setHeader("Content-Type", JAVASCRIPT_UTF_8.toString());
+    resp.setHeader("Content-Type", JSON_UTF_8.toString());
     resp.setHeader("Content-Length", String.valueOf(bytes.length));
 
     resp.setContent(bytes);

File: java/server/src/org/openqa/selenium/remote/server/Passthrough.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.remote.server;
 
+import static com.google.common.net.MediaType.JSON_UTF_8;
 import static java.nio.charset.StandardCharsets.UTF_8;
 import static org.openqa.selenium.remote.http.HttpMethod.POST;
 
@@ -91,7 +92,7 @@ public void handle(HttpRequest req, HttpResponse resp) throws IOException {
     if (POST == req.getMethod()) {
       // We always transform to UTF-8 on the way up.
       String contentType = req.getHeader("Content-Type");
-      contentType = contentType == null ? MediaType.JAVASCRIPT_UTF_8.toString() : contentType;
+      contentType = contentType == null ? JSON_UTF_8.toString() : contentType;
 
       MediaType type = MediaType.parse(contentType);
       connection.setRequestProperty("Content-Type", type.withCharset(UTF_8).toString());

File: java/server/test/org/openqa/selenium/remote/server/PassthroughTest.java
Patch:
@@ -97,7 +97,7 @@ private static class Server {
     public Server() throws IOException {
       int port = PortProber.findFreePort();
       String address = new NetworkUtils().getPrivateLocalAddress();
-      url = new URL(String.format("http://%s:%d/ok", address, port));
+      url = new URL("http", address, port, "/ok");
 
       server = HttpServer.create(new InetSocketAddress(address, port), 0);
       server.createContext("/ok", ex -> {

File: java/client/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -304,7 +304,6 @@ private void streamW3CProtocolParameters(
 
     // Now, hopefully we're left with just the browser-specific pieces. Skip the empty ones.
     JsonArray firstMatch = Stream.of(chrome, edge, firefox, ie, opera, safari)
-        .filter(map -> !map.isEmpty())
         .map(map -> {
           JsonObject json = new JsonObject();
           for (Map.Entry<String, ?> entry : map.entrySet()) {
@@ -314,6 +313,7 @@ private void streamW3CProtocolParameters(
           }
           return json;
         })
+        .filter(obj -> !obj.entrySet().isEmpty())
         .collect(Collector.of(
             JsonArray::new,
             JsonArray::add,

File: java/server/src/org/openqa/selenium/remote/server/BeginSession.java
Patch:
@@ -140,9 +140,9 @@ public void execute(HttpRequest req, HttpResponse resp) throws IOException {
                   "capabilities", session.getCapabilities()));
           break;
 
-          default:
-            throw new SessionNotCreatedException(
-                "Unrecognized downstream dialect: " + session.getDownstreamDialect());
+        default:
+          throw new SessionNotCreatedException(
+              "Unrecognized downstream dialect: " + session.getDownstreamDialect());
       }
 
       byte[] payload = new BeanToJsonConverter().convert(toConvert).getBytes(UTF_8);

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -104,7 +104,7 @@ private void addDefaultServlets(ServletContextHandler handler) {
     // add mandatory default servlets
     handler.addServlet(RegistrationServlet.class.getName(), "/grid/register/*");
 
-    if (config.newHandler) {
+    if (config.enablePassThrough) {
       log.info("Using the experimental passthrough mode");
       handler.addServlet(DriverServlet.class.getName(), "/wd/hub/*");
       handler.addServlet(DriverServlet.class.getName(), "/selenium-server/driver/*");

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -128,7 +128,7 @@ public void boot() {
         new SystemClock());
     handler.setAttribute(DriverServlet.SESSIONS_KEY, driverSessions);
     handler.setContextPath("/");
-    if (configuration.newHandler) {
+    if (configuration.enablePassThrough) {
       LOG.info("Using the experimental passthrough mode handler");
       handler.addServlet(WebDriverServlet.class, "/wd/hub/*");
       handler.addServlet(WebDriverServlet.class, "/webdriver/*");

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java
Patch:
@@ -186,7 +186,7 @@ public void testAsJson() {
                  + "\"port\":5555,"
                  + "\"role\":\"node\","
                  + "\"timeout\":1800,"
-                 + "\"newHandler\":false}", gnc.toJson().toString());
+                 + "\"enablePassThrough\":false}", gnc.toJson().toString());
   }
 
   @Test

File: java/client/test/org/openqa/selenium/testing/drivers/IgnoreComparatorUnitTest.java
Patch:
@@ -31,6 +31,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
+import org.mockito.Mockito;
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.testing.Driver;
 import org.openqa.selenium.testing.Ignore;
@@ -127,9 +128,9 @@ public void shouldIgnoreDisabledNativeEventsIfIgnoringAll() {
 
   private IgnoreList ignoreForDriver(final Set<Driver> drivers,
                                     final Set<Platform> platforms) {
-    final IgnoreList ignore = mock(IgnoreList.class);
+    final IgnoreList ignore = mock(IgnoreList.class, Mockito.RETURNS_SMART_NULLS);
     final Ignore[] list = drivers.stream().map(driver -> {
-      Ignore ig = mock(Ignore.class);
+      Ignore ig = mock(Ignore.class, Mockito.RETURNS_SMART_NULLS);
       when(ig.value()).thenReturn(driver);
       return ig;
     }).collect(Collectors.toList()).toArray(new Ignore[drivers.size()]);

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java
Patch:
@@ -185,7 +185,8 @@ public void testAsJson() {
                  + "\"debug\":false,"
                  + "\"port\":5555,"
                  + "\"role\":\"node\","
-                 + "\"timeout\":1800}", gnc.toJson().toString());
+                 + "\"timeout\":1800,"
+                 + "\"newHandler\":false}", gnc.toJson().toString());
   }
 
   @Test

File: java/client/test/org/openqa/selenium/testing/JUnit4TestBase.java
Patch:
@@ -310,9 +310,9 @@ private static boolean matches(Browser browser, Driver[] drivers) {
           }
           if (System.getProperty("webdriver.firefox.marionette") == null ||
               Boolean.getBoolean("webdriver.firefox.marionette")) {
-          return true;
-        }
-        break;
+            return true;
+          }
+          break;
 
         case PHANTOMJS:
           if (browser == Browser.phantomjs) {

File: java/server/src/org/openqa/selenium/remote/server/Passthrough.java
Patch:
@@ -41,7 +41,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-public class Passthrough implements SessionCodec {
+class Passthrough implements SessionCodec {
 
   private final static Logger LOG = Logger.getLogger(Passthrough.class.getName());
 

File: java/server/src/org/openqa/selenium/remote/server/ProtocolConverter.java
Patch:
@@ -43,7 +43,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-public class ProtocolConverter implements SessionCodec {
+class ProtocolConverter implements SessionCodec {
 
   private final static ImmutableSet<String> IGNORED_REQ_HEADERS = ImmutableSet.<String>builder()
       .add("connection")

File: java/server/src/org/openqa/selenium/remote/server/SessionFactory.java
Patch:
@@ -23,6 +23,6 @@
 import java.nio.file.Path;
 import java.util.Set;
 
-public interface SessionFactory {
+interface SessionFactory {
   ActiveSession apply(Path capabilitiesBlob, Set<Dialect> downstreamDialects);
 }

File: java/server/src/org/openqa/selenium/remote/server/TeeReader.java
Patch:
@@ -21,7 +21,7 @@
 import java.io.Reader;
 import java.io.Writer;
 
-public class TeeReader extends Reader {
+class TeeReader extends Reader {
 
   private final Reader source;
   private final Writer[] sinks;

File: java/server/src/org/openqa/selenium/remote/server/DefaultSession.java
Patch:
@@ -148,6 +148,7 @@ public void close() {
     if (tempFs != null) {
       tempFs.deleteTemporaryFiles();
       tempFs.deleteBaseDir();
+      tempFs = null;
     }
   }
 

File: java/client/src/org/openqa/selenium/Proxy.java
Patch:
@@ -98,7 +98,7 @@ public Map<String, Object> toJson() {
     Map<String, Object> m = new HashMap<>();
 
     if (proxyType != ProxyType.UNSPECIFIED) {
-      m.put("proxyType", proxyType.toString().toLowerCase());
+      m.put("proxyType", proxyType.toString());
     }
     if (ftpProxy != null) {
       m.put("ftpProxy", ftpProxy);

File: java/client/src/org/openqa/selenium/remote/http/W3CHttpCommandCodec.java
Patch:
@@ -187,7 +187,7 @@ public W3CHttpCommandCodec() {
 
       case GET_ELEMENT_LOCATION_ONCE_SCROLLED_INTO_VIEW:
         return toScript(
-          "var e = arguments[0]; e.scrollIntoView(behavior: 'instant', block: 'end', inline: 'nearest'); var rect = e.getBoundingClientRect(); return {'x': rect.left, 'y': rect.top};",
+          "var e = arguments[0]; e.scrollIntoView({behavior: 'instant', block: 'end', inline: 'nearest'}); var rect = e.getBoundingClientRect(); return {'x': rect.left, 'y': rect.top};",
           asElement(parameters.get("id")));
 
       case GET_PAGE_SOURCE:

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -878,7 +878,7 @@ public Timeouts setScriptTimeout(long time, TimeUnit unit) {
 
       public Timeouts pageLoadTimeout(long time, TimeUnit unit) {
         execute(DriverCommand.SET_TIMEOUT, ImmutableMap.of(
-            "page load", TimeUnit.MILLISECONDS.convert(time, unit)));
+            "pageLoad", TimeUnit.MILLISECONDS.convert(time, unit)));
         return this;
       }
     } // timeouts class.

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -364,8 +364,8 @@ public void testShouldBeAbleToClickOnAPartiallyOverlappedLinkThatWrapsToTheNextL
     wait.until(titleIs("Submitted Successfully!"));
   }
 
-  @NotYetImplemented(MARIONETTE)
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/615")
   public void clickingOnADisabledElementIsANoOp() {
     driver.get(appServer.whereIs("click_tests/disabled_element.html"));
 

File: java/client/test/org/openqa/selenium/SessionHandlingTest.java
Patch:
@@ -46,6 +46,7 @@ public void callingQuitMoreThanOnceOnASessionIsANoOp() {
   @Test
   @Ignore(value = FIREFOX, issue = "https://github.com/SeleniumHQ/selenium/issues/3792")
   @Ignore(PHANTOMJS)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/689")
   public void callingQuitAfterClosingTheLastWindowIsANoOp() {
     WebDriver driver = new WebDriverBuilder().get();
 

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -31,7 +31,6 @@
 import static org.junit.Assume.assumeFalse;
 import static org.openqa.selenium.testing.Driver.ALL;
 import static org.openqa.selenium.testing.Driver.IE;
-import static org.openqa.selenium.testing.Driver.MARIONETTE;
 
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
@@ -40,7 +39,6 @@
 import org.openqa.selenium.environment.webserver.Page;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
-import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.TestUtilities;
 
 import java.util.regex.Pattern;

File: java/client/test/org/openqa/selenium/TextPagesTest.java
Patch:
@@ -19,11 +19,9 @@
 
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.instanceOf;
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.openqa.selenium.testing.Driver.CHROME;
 import static org.openqa.selenium.testing.Driver.IE;
-import static org.openqa.selenium.testing.Driver.MARIONETTE;
 import static org.openqa.selenium.testing.Driver.PHANTOMJS;
 import static org.openqa.selenium.testing.Driver.SAFARI;
 import static org.openqa.selenium.testing.TestUtilities.catchThrowable;

File: java/client/test/org/openqa/selenium/SessionHandlingTest.java
Patch:
@@ -58,7 +58,7 @@ public void callingQuitAfterClosingTheLastWindowIsANoOp() {
   @Ignore(value = FIREFOX, issue = "3792")
   @Ignore(value = PHANTOMJS, reason = "throws NoSuchWindowException")
   @Ignore(value = SAFARI, reason = "throws NullPointerException")
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/613")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/689")
   public void callingAnyOperationAfterClosingTheLastWindowShouldThrowAnException() {
     WebDriver driver = new WebDriverBuilder().get();
 

File: java/client/test/org/openqa/selenium/VisibilityTest.java
Patch:
@@ -30,7 +30,6 @@
 import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOf;
 import static org.openqa.selenium.testing.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Driver.IE;
-import static org.openqa.selenium.testing.Driver.MARIONETTE;
 import static org.openqa.selenium.testing.Driver.PHANTOMJS;
 import static org.openqa.selenium.testing.Driver.SAFARI;
 import static org.openqa.selenium.testing.TestUtilities.catchThrowable;

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -345,7 +345,7 @@ public void testSubmittingFormFromFormInputTextElementShouldFireOnSubmitForThatF
 
   @Test
   @Ignore(value = SAFARI, reason = "Does not yet support file uploads, issue 4220")
-  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/594")
+  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/644")
   public void testUploadingFileShouldFireOnChangeEvent() throws IOException {
     driver.get(pages.formPage);
     WebElement uploadElement = driver.findElement(By.id("upload"));

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -128,7 +128,7 @@ public void testElementsShouldBeDisabledIfTheyAreDisabledUsingRandomDisabledStri
   }
 
   @Test
-  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/594")
+  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/668")
   public void testShouldThrowExceptionIfSendingKeysToElementDisabledUsingRandomDisabledStrings() {
     driver.get(pages.formPage);
     WebElement disabledTextElement1 = driver.findElement(By.id("disabledTextElement1"));

File: java/client/test/org/openqa/selenium/I18nTest.java
Patch:
@@ -174,7 +174,6 @@ public void testShouldBeAbleToActivateIMEEngine() throws InterruptedException {
   @Ignore(IE)
   @Ignore(CHROME)
   @Ignore(FIREFOX)
-  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/594")
   public void testShouldBeAbleToInputJapanese() {
     assumeTrue("IME is supported on Linux only.",
                TestUtilities.getEffectivePlatform().is(Platform.LINUX));

File: java/client/test/org/openqa/selenium/UploadTest.java
Patch:
@@ -60,7 +60,7 @@ public void setUp() throws Exception {
 
   @SwitchToTopAfterTest
   @Test
-  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/594")
+  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/644")
   public void testFileUploading() throws Exception {
     assumeFalse(
         "This test as written assumes a file on local disk is accessible to the browser. "
@@ -84,7 +84,7 @@ public void testFileUploading() throws Exception {
   @Ignore(IE)
   @Ignore(PHANTOMJS)
   @Ignore(SAFARI)
-  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/594")
+  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/644")
   public void testCleanFileInput() throws Exception {
     driver.get(pages.uploadPage);
     WebElement element = driver.findElement(By.id("upload"));

File: java/client/test/org/openqa/selenium/testing/drivers/TestIgnorance.java
Patch:
@@ -181,7 +181,8 @@ private void addIgnoresForBrowser(Browser browser, IgnoreComparator comparator)
         break;
 
       case ff:
-        if (Boolean.getBoolean("webdriver.firefox.marionette")) {
+        if (System.getProperty("webdriver.firefox.marionette") == null ||
+            Boolean.getBoolean("webdriver.firefox.marionette")) {
           comparator.addDriver(MARIONETTE);
         } else {
           comparator.addDriver(FIREFOX);

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -129,7 +129,7 @@ public void testElementsShouldBeDisabledIfTheyAreDisabledUsingRandomDisabledStri
   }
 
   @Test
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/579")
+  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/594")
   public void testShouldThrowExceptionIfSendingKeysToElementDisabledUsingRandomDisabledStrings() {
     driver.get(pages.formPage);
     WebElement disabledTextElement1 = driver.findElement(By.id("disabledTextElement1"));

File: java/client/test/org/openqa/selenium/VisibilityTest.java
Patch:
@@ -102,7 +102,7 @@ public void testHiddenInputElementsAreNeverVisible() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/579")
+  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/579")
   public void testShouldNotBeAbleToClickOnAnElementThatIsNotDisplayed() {
     driver.get(pages.javascriptPage);
     WebElement element = driver.findElement(By.id("unclickable"));
@@ -112,7 +112,7 @@ public void testShouldNotBeAbleToClickOnAnElementThatIsNotDisplayed() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/579")
+  @NotYetImplemented(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/594")
   public void testShouldNotBeAbleToTypeToAnElementThatIsNotDisplayed() {
     driver.get(pages.javascriptPage);
     WebElement element = driver.findElement(By.id("unclickable"));

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -193,7 +193,7 @@ private FirefoxDriver(
   }
 
   private static CommandExecutor toExecutor(FirefoxOptions options) {
-    DriverService.Builder builder;
+    DriverService.Builder<?, ?> builder;
 
     if (options.isLegacy()) {
       builder = XpiDriverService.builder()

File: java/client/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -96,7 +96,7 @@ static FirefoxOptions fromJsonMap(Map<String, Object> map) throws IOException {
 
     if (map.containsKey("args")) {
       @SuppressWarnings("unchecked")  // #YOLO
-      List<String> list = (List) getOption(map, "args", List.class);
+      List<String> list = (List<String>) getOption(map, "args", List.class);
       options.addArguments(list);
     }
 
@@ -114,7 +114,7 @@ static FirefoxOptions fromJsonMap(Map<String, Object> map) throws IOException {
 
     if (map.containsKey("prefs")) {
       @SuppressWarnings("unchecked")  // #YOLO
-      Map<String, Object> prefs = (Map) getOption(map, "prefs", Map.class);
+      Map<String, Object> prefs = (Map<String, Object>) getOption(map, "prefs", Map.class);
       prefs.forEach((key, value) -> {
         if (value instanceof Boolean) {
           options.addPreference(key, (Boolean) value);

File: java/client/src/org/openqa/selenium/remote/JdkAugmenter.java
Patch:
@@ -56,7 +56,7 @@ protected RemoteWebDriver extractRemoteWebDriver(WebDriver driver) {
     } else if (Proxy.isProxyClass(driver.getClass())) {
       InvocationHandler handler = Proxy.getInvocationHandler(driver);
       if (handler instanceof JdkHandler) {
-        return ((JdkHandler) handler).driver;
+        return ((JdkHandler<?>) handler).driver;
       }
     }
     return null;

File: java/client/src/org/openqa/selenium/remote/http/AbstractHttpCommandCodec.java
Patch:
@@ -119,7 +119,7 @@ public abstract class AbstractHttpCommandCodec implements CommandCodec<HttpReque
   private static final Splitter PATH_SPLITTER = Splitter.on('/').omitEmptyStrings();
   private static final String SESSION_ID_PARAM = "sessionId";
 
-  private final ConcurrentHashMap<String, CommandSpec> nameToSpec = new ConcurrentHashMap();
+  private final ConcurrentHashMap<String, CommandSpec> nameToSpec = new ConcurrentHashMap<>();
   private final Map<String, String> aliases = new HashMap<>();
   private final BeanToJsonConverter beanToJsonConverter = new BeanToJsonConverter();
   private final JsonToBeanConverter jsonToBeanConverter = new JsonToBeanConverter();

File: java/client/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -237,7 +237,7 @@ protected OutputStream getOutputStream() {
     return outputStream;
   }
 
-  public static abstract class Builder<DS extends DriverService, B extends Builder> {
+  public static abstract class Builder<DS extends DriverService, B extends Builder<?, ?>> {
 
     private int port = 0;
     private File exe = null;
@@ -250,6 +250,7 @@ public static abstract class Builder<DS extends DriverService, B extends Builder
      * @param file The executable to use.
      * @return A self reference.
      */
+    @SuppressWarnings("unchecked")
     public B usingDriverExecutable(File file) {
       checkNotNull(file);
       checkExecutable(file);

File: java/client/src/org/openqa/selenium/safari/SafariOptions.java
Patch:
@@ -90,7 +90,7 @@ public static SafariOptions fromCapabilities(Capabilities capabilities)
       return (SafariOptions) cap;
     } else if (cap instanceof Map) {
       try {
-        return SafariOptions.fromJsonMap((Map) cap);
+        return SafariOptions.fromJsonMap((Map<?, ?>) cap);
       } catch (IOException e) {
         throw new WebDriverException(e);
       }

File: java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java
Patch:
@@ -1509,7 +1509,7 @@ public Object apply(WebDriver driver) {
           Object value = ((JavascriptExecutor) driver).executeScript(javaScript);
 
           if (value instanceof List) {
-            return ((List) value).isEmpty() ? null : value;
+            return ((List<?>) value).isEmpty() ? null : value;
           }
           if (value instanceof String) {
             return ((String) value).isEmpty() ? null : value;

File: java/client/test/org/openqa/selenium/remote/ErrorHandlerTest.java
Patch:
@@ -441,7 +441,7 @@ public void testShouldStillIncludeScreenshotEvenIfServerSideExceptionsAreDisable
 
   @Test
   public void testStatusCodesRaisedBackToStatusMatches() {
-    Map<Integer, Class> exceptions = new HashMap<>();
+    Map<Integer, Class<?>> exceptions = new HashMap<>();
     exceptions.put(ErrorCodes.NO_SUCH_SESSION, NoSuchSessionException.class);
     exceptions.put(ErrorCodes.NO_SUCH_ELEMENT, NoSuchElementException.class);
     exceptions.put(ErrorCodes.NO_SUCH_FRAME, NoSuchFrameException.class);
@@ -470,7 +470,7 @@ public void testStatusCodesRaisedBackToStatusMatches() {
     exceptions.put(ErrorCodes.INVALID_XPATH_SELECTOR_RETURN_TYPER, InvalidSelectorException.class);
 
     Set<String> collectedFailures = new HashSet<>();
-    for (Map.Entry<Integer, Class> exception : exceptions.entrySet()) {
+    for (Map.Entry<Integer, Class<?>> exception : exceptions.entrySet()) {
       try {
         handler.throwIfResponseFailed(createResponse(exception.getKey()), 123);
         fail("Should have thrown an Exception");

File: java/client/test/org/openqa/selenium/remote/ProtocolHandshakeTest.java
Patch:
@@ -221,11 +221,11 @@ public void shouldNotIncludeNonProtocolExtensionKeys() throws IOException {
 
     Map<?, ?> capabilities = (Map<?, ?>) rawCaps;
 
-    Map<?, ?> always = (Map<?, ?>) capabilities.get("alwaysMatch");
+    Map<String, ?> always = (Map<String, ?>) capabilities.get("alwaysMatch");
     List<Map<?, ?>> first = (List<Map<?, ?>>) capabilities.get("firstMatch");
 
     // We don't care where they are, but we want to see "se:option" and not "option"
-    Set<String> keys = new HashSet(always.keySet());
+    Set<String> keys = new HashSet<>(always.keySet());
     keys.addAll(first.stream()
                     .map(Map::keySet)
                     .flatMap(Collection::stream)

File: java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java
Patch:
@@ -223,7 +223,7 @@ private HandlerFactory getHandlerFactory(Class<? extends RestishHandler<?>> hand
   }
 
   private static Constructor<? extends RestishHandler<?>> getConstructor(
-      Class<? extends RestishHandler<?>> handlerClazz, Class... types) {
+      Class<? extends RestishHandler<?>> handlerClazz, Class<?>... types) {
     try {
       return handlerClazz.getConstructor(types);
     } catch (NoSuchMethodException e) {

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java
Patch:
@@ -262,7 +262,7 @@ public void testMergeWithRealValues() {
     GridNodeConfiguration other = new GridNodeConfiguration();
     other.id = "myid";
     DesiredCapabilities dc =
-      new DesiredCapabilities(new ImmutableMap.Builder().put("chrome", "foo").build());
+      new DesiredCapabilities(new ImmutableMap.Builder<String, String>().put("chrome", "foo").build());
     other.capabilities = Arrays.asList(dc);
     other.downPollingLimit = 50;
     other.hub = "http://dummyhost";

File: java/server/test/org/openqa/testing/FakeHttpServletRequest.java
Patch:
@@ -213,7 +213,7 @@ public Object getAttribute(String s) {
     return attributes.get(s);
   }
 
-  public Enumeration getAttributeNames() {
+  public Enumeration<String> getAttributeNames() {
     return Collections.enumeration(attributes.keySet());
   }
 
@@ -258,6 +258,7 @@ public String[] getParameterValues(String s) {
     return values.toArray(new String[values.size()]);
   }
 
+  @SuppressWarnings({"unchecked", "rawtypes"})
   public Map getParameterMap() {
     return Collections.unmodifiableMap(parameters);
   }
@@ -308,7 +309,7 @@ public Locale getLocale() {
     throw new UnsupportedOperationException();
   }
 
-  public Enumeration getLocales() {
+  public Enumeration<Locale> getLocales() {
     throw new UnsupportedOperationException();
   }
 

File: java/client/src/org/openqa/selenium/Capabilities.java
Patch:
@@ -95,7 +95,9 @@ default boolean is(String capabilityName) {
   default Capabilities merge(Capabilities other) {
     HashMap<String, Object> map = new HashMap<>();
     map.putAll(asMap());
-    map.putAll(other.asMap());
+    if (other != null) {
+      map.putAll(other.asMap());
+    }
     return new ImmutableCapabilities(map);
   }
 }

File: java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
Patch:
@@ -139,9 +139,9 @@ public Object getCapability(String capabilityName) {
   public DesiredCapabilities merge(Capabilities extraCapabilities) {
     if (extraCapabilities != null) {
       capabilities.putAll(extraCapabilities.asMap());
-    }
-    if (extraCapabilities.getCapability(UNEXPECTED_ALERT_BEHAVIOUR) != null) {
-      capabilities.put(UNHANDLED_PROMPT_BEHAVIOUR, extraCapabilities.getCapability(UNEXPECTED_ALERT_BEHAVIOUR));
+      if (extraCapabilities.getCapability(UNEXPECTED_ALERT_BEHAVIOUR) != null) {
+        capabilities.put(UNHANDLED_PROMPT_BEHAVIOUR, extraCapabilities.getCapability(UNEXPECTED_ALERT_BEHAVIOUR));
+      }
     }
     return this;
   }

File: java/client/test/org/openqa/selenium/UnexpectedAlertBehaviorTest.java
Patch:
@@ -45,7 +45,7 @@
 @NeedsLocalEnvironment(reason = "Requires local browser launching environment")
 @Ignore(PHANTOMJS)
 @Ignore(value = SAFARI, reason = "issue 3862")
-@Ignore(MARIONETTE)
+@Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/617")
 public class UnexpectedAlertBehaviorTest extends JUnit4TestBase {
 
   private WebDriver driver2;

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -370,7 +370,7 @@ public void testSubmittingFormFromFormInputTextElementShouldFireOnSubmitForThatF
   @JavascriptEnabled
   @Test
   @Ignore(value = SAFARI, reason = "Does not yet support file uploads, issue 4220")
-  @Ignore(MARIONETTE)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testUploadingFileShouldFireOnChangeEvent() throws IOException {
     driver.get(pages.formPage);
     WebElement uploadElement = driver.findElement(By.id("upload"));

File: java/client/test/org/openqa/selenium/CssValueTest.java
Patch:
@@ -32,7 +32,7 @@ public class CssValueTest extends JUnit4TestBase {
 
   @JavascriptEnabled
   @Test
-  @Ignore(MARIONETTE)
+  @Ignore(value = MARIONETTE, issue = "3795")
   public void testShouldPickUpStyleOfAnElement() {
     driver.get(pages.javascriptPage);
 
@@ -49,7 +49,7 @@ public void testShouldPickUpStyleOfAnElement() {
 
   @JavascriptEnabled
   @Test
-  @Ignore(MARIONETTE)
+  @Ignore(value = MARIONETTE, issue = "3795")
   public void testGetCssValueShouldReturnStandardizedColour() {
     driver.get(pages.colorPage);
 

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -76,7 +76,6 @@ public void testDocumentShouldReflectLatestDom() throws Exception {
 
   @JavascriptEnabled
   @Test
-  @Ignore(MARIONETTE)
   public void testShouldWaitForLoadsToCompleteAfterJavascriptCausesANewPageToLoad() {
     driver.get(pages.formPage);
 
@@ -88,7 +87,6 @@ public void testShouldWaitForLoadsToCompleteAfterJavascriptCausesANewPageToLoad(
 
   @JavascriptEnabled
   @Test
-  @Ignore(MARIONETTE)
   public void testShouldBeAbleToFindElementAfterJavascriptCausesANewPageToLoad() {
     driver.get(pages.formPage);
 

File: java/client/test/org/openqa/selenium/PositionAndSizeTest.java
Patch:
@@ -39,6 +39,7 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.JavascriptEnabled;
+import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.SwitchToTopAfterTest;
 import org.openqa.selenium.testing.TestUtilities;
 
@@ -95,7 +96,7 @@ public void testShouldGetCoordinatesOfAnInvisibleElement() {
 
   @Test
   @Ignore(SAFARI)
-  @Ignore(MARIONETTE)
+  @NotYetImplemented(value = MARIONETTE, reason = "/window/rect")
   public void testShouldScrollPageAndGetCoordinatesOfAnElementThatIsOutOfViewPort() {
     assumeFalse(
         "window().getSize() is not implemented for Chrome for Android. "

File: java/client/test/org/openqa/selenium/SessionHandlingTest.java
Patch:
@@ -28,7 +28,6 @@
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
-import org.openqa.selenium.support.ui.WebDriverWait;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.SeleniumTestRunner;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
@@ -61,7 +60,7 @@ public void callingQuitAfterClosingTheLastWindowIsANoOp() {
   @Ignore(value = FIREFOX, issue = "3792")
   @Ignore(value = PHANTOMJS, reason = "throws NoSuchWindowException")
   @Ignore(value = SAFARI, reason = "throws NullPointerException")
-  @Ignore(MARIONETTE)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/613")
   public void callingAnyOperationAfterClosingTheLastWindowShouldThrowAnException() {
     WebDriver driver = new WebDriverBuilder().get();
 

File: java/client/test/org/openqa/selenium/UploadTest.java
Patch:
@@ -23,7 +23,6 @@
 import static org.openqa.selenium.WaitingConditions.elementTextToEqual;
 import static org.openqa.selenium.support.ui.ExpectedConditions.not;
 import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOf;
-import static org.openqa.selenium.testing.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Driver.IE;
 import static org.openqa.selenium.testing.Driver.MARIONETTE;
 import static org.openqa.selenium.testing.Driver.PHANTOMJS;
@@ -62,7 +61,7 @@ public void setUp() throws Exception {
   @JavascriptEnabled
   @SwitchToTopAfterTest
   @Test
-  @Ignore(MARIONETTE)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testFileUploading() throws Exception {
     assumeFalse(
         "This test as written assumes a file on local disk is accessible to the browser. "
@@ -86,7 +85,7 @@ public void testFileUploading() throws Exception {
   @Ignore(IE)
   @Ignore(PHANTOMJS)
   @Ignore(SAFARI)
-  @Ignore(MARIONETTE)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testCleanFileInput() throws Exception {
     driver.get(pages.uploadPage);
     WebElement element = driver.findElement(By.id("upload"));

File: java/client/test/org/openqa/selenium/VisibilityTest.java
Patch:
@@ -285,7 +285,6 @@ public void testShouldShowElementNotVisibleWhenParentElementHasHiddenAttribute()
   @JavascriptEnabled // element.getCssValue() requires Javascript in HtmlUnit
   @Test
   @Ignore(IE)
-  @Ignore(MARIONETTE)
   public void testShouldBeAbleToClickOnElementsWithOpacityZero() {
     driver.get(pages.clickJacker);
 
@@ -297,7 +296,6 @@ public void testShouldBeAbleToClickOnElementsWithOpacityZero() {
   }
 
   @Test
-  @Ignore(MARIONETTE)
   public void testShouldBeAbleToSelectOptionsFromAnInvisibleSelect() {
     driver.get(pages.formPage);
 

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -65,9 +65,8 @@ protected void starting(Description description) {
     @Override
     protected void finished(Description description) {
       try {
-        if (! mainWindow.equals(driver.getWindowHandle())) {
-          driver.close();
-        }
+        driver.getWindowHandles().stream().filter(handle -> ! mainWindow.equals(handle))
+            .forEach(handle -> driver.switchTo().window(handle).close());
       } catch (Exception ignore) {
       }
       try {

File: java/client/src/org/openqa/selenium/remote/http/W3CHttpCommandCodec.java
Patch:
@@ -260,7 +260,7 @@ public W3CHttpCommandCodec() {
 
       case SET_ALERT_VALUE:
         return ImmutableMap.<String, Object>builder()
-          .put("text", stringToUtf8Array((String) parameters.get("text")))
+          .put("text", parameters.get("text"))
           .put("value", stringToUtf8Array((String) parameters.get("text")))
           .build();
 

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -156,6 +156,7 @@ public void testShouldAllowAUserToDismissAPrompt() {
 
   @JavascriptEnabled
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/607")
   @NotYetImplemented(value = {HTMLUNIT},
     reason = "HtmlUnit: click()/prompt need to run in different threads")
   public void testShouldAllowAUserToSetTheValueOfAPrompt() {
@@ -307,6 +308,7 @@ public void testPromptShouldHaveNullValueIfDismissed() {
 
   @JavascriptEnabled
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/607")
   @NotYetImplemented(value = HTMLUNIT,
     reason = "HtmlUnit: click()/prompt need to run in different threads.")
   public void testHandlesTwoAlertsFromOneInteraction() {

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -125,6 +125,7 @@ public void testJsLocatedElementsCanUpdateFramesIfFoundSomehowElse() {
 
   @JavascriptEnabled
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testCanClickOnAnElementWithTopSetToANegativeNumber() {
     String page = appServer.whereIs("styledPage.html");
     driver.get(page);
@@ -214,6 +215,7 @@ public void testCanClickOnALinkThatContainsTextWrappedInASpan() {
   }
 
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testCanClickOnALinkThatContainsEmbeddedBlockElements() {
     assumeFalse(
         "Fails on Android phones: https://code.google.com/p/chromedriver/issues/detail?id=1022",

File: java/client/test/org/openqa/selenium/ContentEditableTest.java
Patch:
@@ -88,6 +88,7 @@ public void testNonPrintableCharactersShouldWorkWithContentEditableOrDesignModeS
   @Test
   @Ignore(value = SAFARI, reason = "cannot type on contentEditable with synthetic events, issue 3127")
   @Ignore(HTMLUNIT)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testShouldBeAbleToTypeIntoEmptyContentEditableElement() {
     driver.get(pages.readOnlyPage);
     WebElement editable = driver.findElement(By.id("content-editable-blank"));
@@ -117,6 +118,7 @@ public void testShouldBeAbleToTypeIntoContentEditableElementWithExistingValue()
   @Ignore(IE)
   @Ignore(value = SAFARI, reason = "cannot type on contentEditable with synthetic events, issue 3127")
   @Ignore(HTMLUNIT)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testShouldBeAbleToTypeIntoTinyMCE() {
     driver.get(appServer.whereIs("tinymce.html"));
     driver.switchTo().frame("mce_0_ifr");

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -320,6 +320,7 @@ public void testGetAttributeDoesNotReturnAnObjectForSvgProperties() {
 
   @Test
   @Ignore(value = HTMLUNIT, reason = "Possible bug in getAttribute?")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testCanRetrieveTheCurrentValueOfATextFormField_textInput() {
     driver.get(pages.formPage);
     WebElement element = driver.findElement(By.id("working"));
@@ -330,6 +331,7 @@ public void testCanRetrieveTheCurrentValueOfATextFormField_textInput() {
 
   @Test
   @Ignore(value = HTMLUNIT, reason = "Possible bug in getAttribute?")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testCanRetrieveTheCurrentValueOfATextFormField_emailInput() {
     driver.get(pages.formPage);
     WebElement element = driver.findElement(By.id("email"));
@@ -340,6 +342,7 @@ public void testCanRetrieveTheCurrentValueOfATextFormField_emailInput() {
 
   @Test
   @Ignore(value = HTMLUNIT, reason = "Possible bug in getAttribute?")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testCanRetrieveTheCurrentValueOfATextFormField_textArea() {
     driver.get(pages.formPage);
     WebElement element = driver.findElement(By.id("emptyTextArea"));

File: java/client/test/org/openqa/selenium/ExecutingAsyncJavascriptTest.java
Patch:
@@ -262,6 +262,7 @@ public void shouldCatchErrorsWithMessageAndStacktraceWhenExecutingInitialScript(
 
   @JavascriptEnabled
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void shouldBeAbleToExecuteAsynchronousScripts() {
     driver.get(pages.ajaxyPage);
 

File: java/client/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -521,6 +521,7 @@ public void testJavaScriptShouldExecuteInTheContextOfTheCurrentFrame() {
 
   @JavascriptEnabled
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testShouldNotSwitchMagicallyToTheTopWindow() {
     String baseUrl = appServer.whereIs("frame_switching_tests/");
     driver.get(baseUrl + "bug4876.html");

File: java/client/test/org/openqa/selenium/I18nTest.java
Patch:
@@ -67,6 +67,7 @@ public void testCn() {
 
   @Test
   @Ignore(value = HTMLUNIT, reason = "Possible bug in getAttribute?")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testEnteringHebrewTextFromLeftToRight() {
     driver.get(pages.chinesePage);
     WebElement input = driver.findElement(By.name("i18n"));
@@ -78,6 +79,7 @@ public void testEnteringHebrewTextFromLeftToRight() {
 
   @Test
   @Ignore(value = HTMLUNIT, reason = "Possible bug in getAttribute?")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testEnteringHebrewTextFromRightToLeft() {
     driver.get(pages.chinesePage);
     WebElement input = driver.findElement(By.name("i18n"));
@@ -179,6 +181,7 @@ public void testShouldBeAbleToActivateIMEEngine() throws InterruptedException {
   @Ignore(CHROME)
   @Ignore(FIREFOX)
   @Ignore(HTMLUNIT)
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testShouldBeAbleToInputJapanese() {
     assumeTrue("IME is supported on Linux only.",
                TestUtilities.getEffectivePlatform().is(Platform.LINUX));

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -100,6 +100,7 @@ public void testShouldBeAbleToFindElementAfterJavascriptCausesANewPageToLoad() {
 
   @JavascriptEnabled
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testShouldFireOnChangeEventWhenSettingAnElementsValue() {
     driver.get(pages.javascriptPage);
     driver.findElement(By.id("change")).sendKeys("foo");
@@ -174,6 +175,7 @@ public void testIfNoElementHasFocusTheActiveElementIsTheBody() {
   @JavascriptEnabled
   @Test
   @Ignore(value = SAFARI, reason = "issue 4061")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void testChangeEventIsFiredAppropriatelyWhenFocusIsLost() {
     driver.get(pages.javascriptPage);
 

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -159,6 +159,7 @@ public void testEagerStrategyShouldNotWaitForResources() {
   @Ignore(CHROME)
   @Ignore(SAFARI)
   @Ignore(PHANTOMJS)
+  @Ignore(MARIONETTE)
   @NeedsLocalEnvironment
   public void testEagerStrategyShouldNotWaitForResourcesOnRefresh() {
     initLocalDriver("eager");

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -43,6 +43,7 @@
 import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.drivers.Browser;
 
+@Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
 public class TypingTest extends JUnit4TestBase {
 
   @JavascriptEnabled

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -232,6 +232,7 @@ public void shouldGetMeaningfulExceptionOnBrowserDeath() throws Exception {
   @NeedsFreshDriver
   @NoDriverAfterTest
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void shouldWaitUntilBrowserHasClosedProperly() throws Exception {
     driver.get(pages.simpleTestPage);
     driver.quit();
@@ -345,6 +346,7 @@ public void shouldBeAbleToStartANewInstanceEvenWithVerboseLogging() {
   }
 
   @Test
+  @NotYetImplemented(value = MARIONETTE, reason = "/window/rect")
   public void shouldBeAbleToPassCommandLineOptions() {
     FirefoxBinary binary = new FirefoxBinary();
     binary.addCommandLineOptions("-width", "800", "-height", "600");
@@ -474,6 +476,7 @@ private static String randomString() {
   }
 
   @Test
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/594")
   public void multipleFirefoxDriversRunningConcurrently() throws Exception {
     int numThreads;
     if (!SauceDriver.shouldUseSauce()) {

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -171,7 +171,7 @@ public void testShouldAllowAUserToSetTheValueOfAPrompt() {
   @JavascriptEnabled
   @Test
   @Ignore(CHROME)
-  @Ignore(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/274")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/274")
   public void testSettingTheValueOfAnAlertThrows() {
     driver.findElement(By.id("alert")).click();
 

File: java/client/test/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -371,7 +371,7 @@ public void testCookieEqualityAfterSetAndGet() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/463")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/463")
   public void testRetainsCookieExpiry() {
     Cookie addedCookie =
         new Cookie.Builder("fish", "cod")

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -129,7 +129,7 @@ public void testElementsShouldBeDisabledIfTheyAreDisabledUsingRandomDisabledStri
   }
 
   @Test
-  @Ignore(value = MARIONETTE, reason = "sendKeys does not determine whether the element is disabled")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/579")
   public void testShouldThrowExceptionIfSendingKeysToElementDisabledUsingRandomDisabledStrings() {
     driver.get(pages.formPage);
     WebElement disabledTextElement1 = driver.findElement(By.id("disabledTextElement1"));

File: java/client/test/org/openqa/selenium/VisibilityTest.java
Patch:
@@ -102,7 +102,7 @@ public void testHiddenInputElementsAreNeverVisible() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/579")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/579")
   public void testShouldNotBeAbleToClickOnAnElementThatIsNotDisplayed() {
     driver.get(pages.javascriptPage);
     WebElement element = driver.findElement(By.id("unclickable"));
@@ -112,7 +112,7 @@ public void testShouldNotBeAbleToClickOnAnElementThatIsNotDisplayed() {
   }
 
   @Test
-  @Ignore(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/579")
+  @Ignore(value = MARIONETTE, issue = "https://github.com/mozilla/geckodriver/issues/579")
   public void testShouldNotBeAbleToTypeToAnElementThatIsNotDisplayed() {
     driver.get(pages.javascriptPage);
     WebElement element = driver.findElement(By.id("unclickable"));

File: java/client/src/org/openqa/selenium/support/pagefactory/Annotations.java
Patch:
@@ -51,7 +51,7 @@ public boolean isLookupCached() {
    * Looks for one of {@link org.openqa.selenium.support.FindBy},
    * {@link org.openqa.selenium.support.FindBys} or
    * {@link org.openqa.selenium.support.FindAll} field annotations. In case
-   * no annotaions provided for field, uses field name as 'id' or 'name'.
+   * no annotations provided for field, uses field name as 'id' or 'name'.
    * @throws IllegalArgumentException when more than one annotation on a field provided
    */
   public By buildBy() {

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -177,7 +177,7 @@ public void testSettingTheValueOfAnAlertThrows() {
     try {
       alert.sendKeys("cheese");
       fail("Expected exception");
-    } catch (ElementNotVisibleException expected) {
+    } catch (ElementNotInteractableException expected) {
     } finally {
       alert.accept();
     }

File: java/client/test/org/openqa/selenium/VisibilityTest.java
Patch:
@@ -110,7 +110,7 @@ public void testShouldNotBeAbleToClickOnAnElementThatIsNotDisplayed() {
     try {
       element.click();
       fail("You should not be able to click on an invisible element");
-    } catch (ElementNotVisibleException e) {
+    } catch (ElementNotInteractableException e) {
       // This is expected
     }
   }
@@ -124,7 +124,7 @@ public void testShouldNotBeAbleToTypeToAnElementThatIsNotDisplayed() {
     try {
       element.sendKeys("You don't see me");
       fail("You should not be able to send keyboard input to an invisible element");
-    } catch (ElementNotVisibleException e) {
+    } catch (ElementNotInteractableException e) {
       // This is expected
     }
 

File: java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.openqa.selenium.testing.Driver.CHROME;
 import static org.openqa.selenium.testing.Driver.FIREFOX;
 import static org.openqa.selenium.testing.Driver.HTMLUNIT;
+import static org.openqa.selenium.testing.Driver.IE;
 import static org.openqa.selenium.testing.Driver.MARIONETTE;
 import static org.openqa.selenium.testing.Driver.PHANTOMJS;
 import static org.openqa.selenium.testing.Driver.SAFARI;

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -308,18 +308,18 @@ public void deleteExtensionsCacheIfItExists(File profileDir) {
     }
   }
 
-  @Deprecated
   /**
    * @deprecated "Native" events are not supported in FirefoxDriver anymore
    */
+  @Deprecated
   public boolean areNativeEventsEnabled() {
     return false;
   }
 
-  @Deprecated
   /**
    * @deprecated "Native" events are not supported in FirefoxDriver anymore
    */
+  @Deprecated
   public void setEnableNativeEvents(boolean enableNativeEvents) {
   }
 

File: java/client/src/org/openqa/selenium/interactions/Actions.java
Patch:
@@ -478,7 +478,7 @@ public Actions dragAndDrop(WebElement source, WebElement target) {
 
     return moveInTicks(source, 0, 0)
         .tick(defaultMouse.createPointerDown(LEFT.asArg()))
-        .moveInTicks(source, 0, 0)
+        .moveInTicks(target, 0, 0)
         .tick(defaultMouse.createPointerUp(LEFT.asArg()));
   }
 

File: java/client/test/org/openqa/selenium/VisibilityTest.java
Patch:
@@ -102,6 +102,7 @@ public void testHiddenInputElementsAreNeverVisible() {
   }
 
   @Test
+  @Ignore(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/579")
   public void testShouldNotBeAbleToClickOnAnElementThatIsNotDisplayed() {
     driver.get(pages.javascriptPage);
     WebElement element = driver.findElement(By.id("unclickable"));
@@ -115,6 +116,7 @@ public void testShouldNotBeAbleToClickOnAnElementThatIsNotDisplayed() {
   }
 
   @Test
+  @Ignore(value = MARIONETTE, reason = "https://github.com/mozilla/geckodriver/issues/579")
   public void testShouldNotBeAbleToTypeToAnElementThatIsNotDisplayed() {
     driver.get(pages.javascriptPage);
     WebElement element = driver.findElement(By.id("unclickable"));

File: java/client/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -458,7 +458,7 @@ public Capabilities toCapabilities() {
   }
 
   private Capabilities toCapabilities(Capabilities source) {
-    HashMap<String, Object> caps = new HashMap<>();
+    HashMap<String, Object> caps = new HashMap<>(source.asMap());
 
     if (isLegacy()) {
       caps.put(FirefoxDriver.MARIONETTE, false);

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -56,7 +56,7 @@ public class HttpCommandExecutor implements CommandExecutor, NeedsLocalLogs {
   private LocalLogs logs = LocalLogs.getNullLogger();
 
   public HttpCommandExecutor(URL addressOfRemoteServer) {
-    this(ImmutableMap.<String, CommandInfo>of(), addressOfRemoteServer);
+    this(ImmutableMap.of(), addressOfRemoteServer);
   }
 
   /**
@@ -67,7 +67,8 @@ public HttpCommandExecutor(URL addressOfRemoteServer) {
    * @param addressOfRemoteServer URL of remote end Selenium server
    */
   public HttpCommandExecutor(
-      Map<String, CommandInfo> additionalCommands, URL addressOfRemoteServer) {
+      Map<String, CommandInfo> additionalCommands,
+      URL addressOfRemoteServer) {
     this(additionalCommands, addressOfRemoteServer, getDefaultClientFactory());
   }
 

File: java/client/src/org/openqa/selenium/remote/CapabilityType.java
Patch:
@@ -39,6 +39,7 @@ public interface CapabilityType {
   String APPLICATION_NAME = "applicationName";
   // Enable this capability to accept all SSL certs by defaults.
   String ACCEPT_SSL_CERTS = "acceptSslCerts";
+  String ACCEPT_INSECURE_CERTS = "acceptInsecureCerts";
   String HAS_NATIVE_EVENTS = "nativeEvents";
   String UNEXPECTED_ALERT_BEHAVIOUR = "unexpectedAlertBehaviour";
   String ELEMENT_SCROLL_BEHAVIOR = "elementScrollBehavior";

File: java/client/test/org/openqa/selenium/testing/drivers/TestIgnorance.java
Patch:
@@ -167,7 +167,9 @@ private boolean isIgnoredDueToEnvironmentVariables(Description method) {
   }
 
   public void setBrowser(Browser browser) {
-    this.browser = checkNotNull(browser, "Browser to use must be set");
+    this.browser = checkNotNull(
+        browser,
+        "Browser to use must be set. Do this by setting the 'selenium.browser' system property");
     addIgnoresForBrowser(browser, ignoreComparator);
   }
 

File: java/client/src/org/openqa/selenium/chrome/ChromeDriver.java
Patch:
@@ -130,7 +130,7 @@ public ChromeDriver() {
    * and shutdown upon calling {@link #quit()}.
    *
    * @param service The service to use.
-   * @see {@link RemoteWebDriver#RemoteWebDriver(CommandExecutor, Capabilities)}
+   * @see RemoteWebDriver#RemoteWebDriver(CommandExecutor, Capabilities)
    * @deprecated Use {@link RemoteWebDriver#RemoteWebDriver(CommandExecutor, Capabilities)}
    */
   @Deprecated

File: java/client/src/org/openqa/selenium/firefox/FirefoxOptions.java
Patch:
@@ -26,6 +26,7 @@
 import static org.openqa.selenium.remote.CapabilityType.SUPPORTS_WEB_STORAGE;
 import static org.openqa.selenium.remote.CapabilityType.VERSION;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
@@ -276,7 +277,8 @@ public FirefoxProfile getProfile() {
     return getProfileOrNull().orElseGet(() -> fullyPopulateProfile(new FirefoxProfile()));
   }
 
-  private Optional<FirefoxProfile> getProfileOrNull() {
+  @VisibleForTesting
+  Optional<FirefoxProfile> getProfileOrNull() {
     FirefoxProfile profileToUse = profile;
     if (profileToUse == null) {
       profileToUse = extractProfile(requiredCapabilities);

File: java/client/test/org/openqa/selenium/remote/StartingFirefoxRemotelyTest.java
Patch:
@@ -51,7 +51,7 @@ public void getRemoteServerUrl() {
   }
 
   @After
-  public void quiteDriver() {
+  public void quitDriver() {
     if (localDriver != null) {
       localDriver.quit();
     }

File: java/client/test/org/openqa/selenium/remote/RemoteWebDriverTests.java
Patch:
@@ -24,7 +24,7 @@
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     StandardSeleniumTests.class,
-    RemoteWebDriverScreenshotTest.class
+    RemoteSpecificTests.class
 })
 public class RemoteWebDriverTests {
 }

File: java/client/test/com/thoughtworks/selenium/corebased/TestClickAt.java
Patch:
@@ -28,7 +28,7 @@
 import org.openqa.selenium.remote.CapabilityType;
 
 public class TestClickAt extends InternalSelenseTestBase {
-  @Test
+  @Test(timeout = 60000)
   public void testClickAt() throws Exception {
     selenium.open("../tests/html/test_click_page1.html");
     verifyEquals(selenium.getText("link"), "Click here for next page");

File: java/client/test/org/openqa/selenium/firefox/MarionetteTest.java
Patch:
@@ -167,7 +167,7 @@ public void canUseSameProfileInCapabilitiesAndDirectly() {
 
     verifyItIsMarionette(localDriver);
   }
-  
+
   @Test
   public void canPassCapabilitiesBinaryAndProfileSeparately() throws IOException {
     FirefoxBinary binary = spy(new FirefoxBinary());

File: java/client/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -353,9 +353,7 @@ private Optional<Result> createSession(HttpClient client, InputStream newSession
       tempResponse = new Response(null);
       tempResponse.setStatus(ErrorCodes.SESSION_NOT_CREATED);
       tempResponse.setValue(jsonBlob);
-    } else if (
-      ossStatus instanceof Number &&
-      ((Number) ossStatus).intValue() == ErrorCodes.SESSION_NOT_CREATED) {
+    } else if (ossStatus instanceof Number) {
       tempResponse = new Response(null);
       tempResponse.setStatus(ErrorCodes.SESSION_NOT_CREATED);
       tempResponse.setValue(jsonBlob);

File: java/client/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -141,8 +141,7 @@ private void amendW3cParameters(
         .flatMap(Collection::stream)
         .filter(entry ->
                     ("browserName".equals(entry.getKey()) && FIREFOX.equals(entry.getValue())) ||
-                    "firefox_binary".equals(entry.getKey()) ||
-                    "firefox_profile".equals(entry.getKey()) ||
+                    entry.getKey().startsWith("firefox_") ||
                     entry.getKey().startsWith("moz:"))
         .distinct()
         .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -128,7 +128,7 @@ private static CommandExecutor toExecutor(FirefoxOptions options) {
     } else {
       GeckoDriverService.Builder builder = new GeckoDriverService.Builder().usingPort(0);
       Optional<FirefoxBinary> binary = options.getBinaryOrNull();
-      if (binary != null) {
+      if (binary.isPresent()) {
         builder.usingFirefoxBinary(binary.get());
       }
       return new DriverCommandExecutor(builder.build());

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -116,7 +116,6 @@ public static final class SystemProperty {
 
   protected FirefoxBinary binary;
 
-  // TODO: make it public as soon as it's fully implemented
   public FirefoxDriver(FirefoxOptions options) {
     this(toExecutor(options), options.toDesiredCapabilities(), options.toRequiredCapabilities());
   }

File: java/client/test/org/openqa/selenium/firefox/MarionetteTest.java
Patch:
@@ -18,14 +18,14 @@
 package org.openqa.selenium.firefox;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Mockito.atLeastOnce;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.spy;
 import static org.mockito.Mockito.verify;
 import static org.openqa.selenium.testing.Driver.FIREFOX;
-import static org.testng.Assert.assertNotNull;
-import static org.testng.Assert.fail;
 
 import org.junit.After;
 import org.junit.Test;

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -321,7 +321,6 @@ public void testShouldReturnValueOfOnClickAttribute() {
   }
 
   @Test
-  @NotYetImplemented(HTMLUNIT)
   public void testGetAttributeDoesNotReturnAnObjectForSvgProperties() {
     assumeFalse("IE before 9 doesn't support SVG", TestUtilities.isOldIe(driver));
 

File: java/client/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -26,6 +26,7 @@
 import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeFalse;
 import static org.openqa.selenium.testing.Driver.CHROME;
+import static org.openqa.selenium.testing.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Driver.IE;
 import static org.openqa.selenium.testing.Driver.MARIONETTE;
 import static org.openqa.selenium.testing.Driver.REMOTE;
@@ -37,6 +38,7 @@
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.JavascriptEnabled;
 import org.openqa.selenium.testing.NeedsFreshDriver;
+import org.openqa.selenium.testing.NotYetImplemented;
 import org.openqa.selenium.testing.SwitchToTopAfterTest;
 import org.openqa.selenium.testing.TestUtilities;
 
@@ -399,6 +401,7 @@ public void testShouldBeAbleToFindElementByXPathWithNamespace() {
   }
 
   @Ignore({IE, SAFARI, CHROME})
+  @NotYetImplemented(value = HTMLUNIT, reason = "This used to work in HtmlUnit 2.23")
   @Test
   public void testShouldBeAbleToFindElementByXPathInXmlDocument() {
     driver.get(pages.simpleXmlDocument);

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -259,7 +259,6 @@ public void testShouldHandleSiblingBlockLevelElements() {
     assertThat(text, is("Some text" + newLine + "Some more text"));
   }
 
-  @NotYetImplemented(HTMLUNIT)
   @Test
   public void testShouldHandleNestedBlockLevelElements() {
     driver.get(pages.simpleTestPage);

File: java/client/src/org/openqa/selenium/interactions/KeyDownAction.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Emulates key press only, without the release.
  *
- * @deprecated Use {@link Actions#keyDown(WebElement, Keys)}
+ * @deprecated Use {@link Actions#keyDown(WebElement, CharSequence)}
  */
 @Deprecated
 public class KeyDownAction extends SingleKeyAction implements Action {

File: java/client/src/org/openqa/selenium/interactions/KeyUpAction.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Emulates key release only, without the press.
  *
- * @deprecated Use {@link Actions#keyUp(Keys)}
+ * @deprecated Use {@link Actions#keyUp(CharSequence)}
  */
 @Deprecated
 public class KeyUpAction extends SingleKeyAction implements Action {

File: java/server/test/org/openqa/grid/common/CommonTests.java
Patch:
@@ -21,5 +21,5 @@
 import org.junit.runners.Suite;
 
 @RunWith(Suite.class)
-@Suite.SuiteClasses(RegistrationRequestTest.class)
+@Suite.SuiteClasses( {RegistrationRequestTest.class,SeleniumProtocolTest.class})
 public class CommonTests {}

File: java/client/src/org/openqa/selenium/safari/SafariOptions.java
Patch:
@@ -102,10 +102,10 @@ public static SafariOptions fromCapabilities(Capabilities capabilities)
   // Setters
 
   /**
-   * Set the port the {@link SafariDriverServer} should be started on. Defaults to 0, in which case
+   * Set the port the {@link SafariDriverService} should be started on. Defaults to 0, in which case
    * the server selects a free port.
    *
-   * @param port The port the {@link SafariDriverServer} should be started on,
+   * @param port The port the {@link SafariDriverService} should be started on,
    *    or 0 if the server should select a free port.
    */
   public void setPort(int port) {
@@ -140,7 +140,7 @@ public void setUseTechnologyPreview(boolean useTechnologyPreview) {
   // Getters
 
   /**
-   * @return The port the {@link SafariDriverServer} should be started on.
+   * @return The port the {@link SafariDriverService} should be started on.
    *    If 0, the server should select a free port.
    * @see #setPort(int)
    */

File: java/client/src/org/openqa/selenium/support/ui/FluentWait.java
Patch:
@@ -50,12 +50,12 @@
  * Sample usage: <pre>
  *   // Waiting 30 seconds for an element to be present on the page, checking
  *   // for its presence once every 5 seconds.
- *   Wait&lt;WebDriver> wait = new FluentWait&lt;WebDriver>(driver)
+ *   Wait&lt;WebDriver&gt; wait = new FluentWait&lt;WebDriver&gt;(driver)
  *       .withTimeout(30, SECONDS)
  *       .pollingEvery(5, SECONDS)
  *       .ignoring(NoSuchElementException.class);
  *
- *   WebElement foo = wait.until(new Function&lt;WebDriver, WebElement>() {
+ *   WebElement foo = wait.until(new Function&lt;WebDriver, WebElement&gt;() {
  *     public WebElement apply(WebDriver driver) {
  *       return driver.findElement(By.id("foo"));
  *     }

File: java/client/src/com/thoughtworks/selenium/webdriven/WebDriverCommandProcessor.java
Patch:
@@ -319,7 +319,6 @@ private void setUpMethodMap() {
     seleneseMethods.put("selectFrame", new SelectFrame(windows));
     seleneseMethods.put("selectPopUp", new SelectPopUp(windows));
     seleneseMethods.put("selectWindow", new SelectWindow(windows));
-    seleneseMethods.put("sendKeys", new SendKeys(alertOverride, elementFinder));
     seleneseMethods.put("setBrowserLogLevel", new NoOp(null));
     seleneseMethods.put("setContext", new NoOp(null));
     seleneseMethods.put(

File: java/server/test/org/openqa/grid/internal/AddingProxyAgainFreesResources.java
Patch:
@@ -91,7 +91,7 @@ public void validateRequest2isNowRunningOnTheNode() throws InterruptedException
     FluentWait<RequestHandler> wait = new FluentWait<>(handler2);
     wait.withTimeout(1, TimeUnit.SECONDS).pollingEvery(100, TimeUnit.MILLISECONDS)
       .ignoring(GridException.class)
-      .until((RequestHandler input) -> input.getSession() != null);
+      .until((RequestHandler input) -> input.getSession());
     assertNotNull(handler2.getSession());
   }
 

File: java/client/src/org/openqa/selenium/support/Color.java
Patch:
@@ -89,7 +89,7 @@ public String asHex() {
    * @return a java.awt.Color class instance
    */
   public java.awt.Color getColor() {
-    return new java.awt.Color((float)red, (float)green, (float)blue, (float)alpha);
+    return new java.awt.Color(red, green, blue, (int)(alpha*255));
   }
 
   @Override

File: java/client/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -158,7 +158,7 @@ private Optional<Result> createSession(HttpClient client, StringBuilder params)
     }
 
     if (tempResponse != null) {
-      new ErrorHandler(true).throwIfResponseFailed(tempResponse, 0);
+      new ErrorHandler().throwIfResponseFailed(tempResponse, 0);
     }
 
     // Otherwise, just return empty.

File: java/client/test/org/openqa/selenium/UnexpectedAlertBehaviorTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
 
 @NeedsLocalEnvironment(reason = "Requires local browser launching environment")
-@Ignore(value = {CHROME, PHANTOMJS, SAFARI, MARIONETTE},
+@Ignore(value = {PHANTOMJS, SAFARI, MARIONETTE},
         issues = {3862})
 public class UnexpectedAlertBehaviorTest extends JUnit4TestBase {
 
@@ -66,7 +66,7 @@ public void canDismissUnhandledAlert() {
     runScenarioWithUnhandledAlert(UnexpectedAlertBehaviour.DISMISS, "null");
   }
 
-  @Ignore(value = HTMLUNIT, reason = "inconsistent test case")
+  @Ignore(value = {CHROME, HTMLUNIT}, reason = "Chrome uses IGNORE mode by default")
   @Test
   public void dismissUnhandledAlertsByDefault() {
     runScenarioWithUnhandledAlert(null, "null");
@@ -94,7 +94,7 @@ public void canSpecifyUnhandledAlertBehaviourUsingCapabilities() {
   }
 
   @Test
-  @Ignore(value = {IE}, reason = "IE: required capabilities not implemented")
+  @Ignore(value = {IE, CHROME}, reason = "IE, Chrome: required capabilities not implemented")
   @NotYetImplemented(HTMLUNIT)
   public void requiredUnhandledAlertCapabilityHasPriorityOverDesired() {
     // TODO: Resolve why this test doesn't work on the remote server

File: java/client/test/org/openqa/selenium/support/ui/ExpectedConditionsTest.java
Patch:
@@ -793,11 +793,11 @@ public void waitingForPresenseOfNestedElementsWhenElementsPresent() {
     String testSelector = "testSelector";
     String testNestedSelector = "testNestedSelector";
     when(mockDriver.findElement(By.cssSelector(testSelector))).thenReturn(mockElement);
-    when(mockElement.findElement(By.cssSelector(testSelector))).thenReturn(mockNestedElement);
-    when(mockElement.findElements(By.cssSelector(testSelector)))
+    when(mockElement.findElements(By.cssSelector(testNestedSelector)))
       .thenReturn(Arrays.asList(mockNestedElement));
-    wait.until(presenceOfNestedElementsLocatedBy(By.cssSelector(testSelector),
+    List<WebElement> elements = wait.until(presenceOfNestedElementsLocatedBy(By.cssSelector(testSelector),
                                                  By.cssSelector(testNestedSelector)));
+    assertEquals(elements.get(0), mockNestedElement);
   }
 
   @Test

File: java/client/src/org/openqa/selenium/firefox/internal/Executable.java
Patch:
@@ -124,7 +124,7 @@ private static File locateFirefoxBinaryFromSystemProperty() {
       return null;
 
     File binary = new File(binaryName);
-    if (binary.exists())
+    if (binary.exists() && !binary.isDirectory())
       return binary;
 
     Platform current = Platform.getCurrent();

File: java/client/src/org/openqa/selenium/remote/ProtocolHandshake.java
Patch:
@@ -60,15 +60,15 @@ public Result createSession(HttpClient client, Command command)
     parameters.append(",");
     amendOssParamters(parameters, des, req);
     parameters.append("}");
-    LOG.info("Attempting bi-dialect session, assuming Postel's Law holds true on the remote end");
+    LOG.fine("Attempting bi-dialect session, assuming Postel's Law holds true on the remote end");
     Optional<Result> result = createSession(client, parameters);
 
     // Assume a fragile OSS webdriver implementation
     if (!result.isPresent()) {
       parameters = new StringBuilder("{");
       amendOssParamters(parameters, des, req);
       parameters.append("}");
-      LOG.info("Falling back to original OSS JSON Wire Protocol.");
+      LOG.fine("Falling back to original OSS JSON Wire Protocol.");
       result = createSession(client, parameters);
     }
 
@@ -77,7 +77,7 @@ public Result createSession(HttpClient client, Command command)
       parameters = new StringBuilder("{");
       amendW3CParameters(parameters, des, req);
       parameters.append("}");
-      LOG.info("Falling back to straight W3C remote end connection");
+      LOG.fine("Falling back to straight W3C remote end connection");
       result = createSession(client, parameters);
     }
 

File: java/client/src/org/openqa/selenium/mobile/NetworkConnection.java
Patch:
@@ -109,6 +109,9 @@ public String toString() {
       return Integer.toString(mask);
     }
 
+    public String toJson() {
+      return toString();
+    }
   }
 
   /**

File: java/server/src/org/openqa/grid/selenium/GridLauncherV3.java
Patch:
@@ -273,7 +273,7 @@ public void launch() throws Exception {
               c =
               RegistrationRequest.build((GridNodeConfiguration) configuration);
             SelfRegisteringRemote remote = new SelfRegisteringRemote(c);
-            remote.setRemoteServer(new SeleniumServer(configuration));
+            remote.setRemoteServer(new SeleniumServer(c.getConfiguration()));
             remote.startRemoteServer();
             log.info("Selenium Grid node is up and ready to register to the hub");
             remote.startRegistrationProcess();

File: java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java
Patch:
@@ -67,7 +67,7 @@ public class DefaultRemoteProxy extends BaseRemoteProxy
   public DefaultRemoteProxy(RegistrationRequest request, Registry registry) {
     super(request, registry);
 
-    pollingInterval = config.nodePolling != null? config.nodePolling : DEFAULT_POLLING_INTERVAL;
+    pollingInterval = config.nodePolling != null ? config.nodePolling : DEFAULT_POLLING_INTERVAL;
     unregisterDelay = config.unregisterIfStillDownAfter != null ? config.unregisterIfStillDownAfter : DEFAULT_UNREGISTER_DELAY;
     downPollingLimit = config.downPollingLimit != null ? config.downPollingLimit : DEFAULT_DOWN_POLLING_LIMIT;
   }

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -117,11 +117,11 @@ public void boot() {
 
     handler.setInitParameter(DisplayHelpServlet.HELPER_TYPE_PARAMETER, configuration.role);
 
-    if (configuration.browserTimeout != null) {
+    if (configuration.browserTimeout != null && configuration.browserTimeout >= 0) {
       handler.setInitParameter(DriverServlet.BROWSER_TIMEOUT_PARAMETER,
                                String.valueOf(configuration.browserTimeout));
     }
-    if (configuration.timeout != null) {
+    if (configuration.timeout != null && configuration.timeout >= 0) {
       handler.setInitParameter(DriverServlet.SESSION_TIMEOUT_PARAMETER,
                                String.valueOf(configuration.timeout));
     }

File: java/server/src/org/openqa/selenium/remote/server/SessionCleaner.java
Patch:
@@ -54,7 +54,7 @@ class SessionCleaner extends Thread {   // Thread safety reviewed
     }
     if (insideBrowserTimeout > 0 && insideBrowserTimeout < 60000) {
       log.warning("The specified browser timeout is TOO LOW for safe operations and may have " +
-                  "other side-effects\n. Please specify a slightly higher browserTimeout.");
+                  "other side-effects.\n Please specify a slightly higher browserTimeout.");
     }
     long lowestNonZero = Math.min((insideBrowserTimeout > 0) ? insideBrowserTimeout : clientGoneTimeout,
                                   clientGoneTimeout > 0 ? clientGoneTimeout : insideBrowserTimeout);

File: java/server/test/org/openqa/grid/internal/StatusServletTests.java
Patch:
@@ -95,6 +95,7 @@ public void setup() throws Exception {
         RemoteProxyFactory.getNewBasicRemoteProxy("app1", "http://machine4:4444", registry);
 
     RegistrationRequest req = new RegistrationRequest();
+    req.getConfiguration().capabilities.clear();
     Map<String, Object> capability = new HashMap<>();
     capability.put(CapabilityType.BROWSER_NAME, "custom app");
     req.getConfiguration().capabilities.add(new DesiredCapabilities(capability));
@@ -116,7 +117,6 @@ public void setup() throws Exception {
     newSessionRequest.process();
     session = newSessionRequest.getSession();
     session.setExternalKey(ExternalSessionKey.fromString("ext. key"));
-
   }
 
   @Test
@@ -269,7 +269,6 @@ public void testHubGetSpecifiedConfig() throws IOException {
     assertNull(o.get("I'm not a valid key"));
     assertTrue(o.getAsJsonArray("servlets").size() == 0);
     assertFalse(o.has("capabilityMatcher"));
-
   }
 
   /**

File: java/server/test/org/openqa/grid/plugin/RemoteProxyInheritanceTest.java
Patch:
@@ -41,6 +41,8 @@ public void defaultToRemoteProxy() {
     Map<String, Object> app1 = new HashMap<>();
     app1.put(CapabilityType.APPLICATION_NAME, "app1");
     GridNodeConfiguration config = new GridNodeConfiguration();
+    config.capabilities.clear();
+    config.proxy = null;
     config.capabilities.add(new DesiredCapabilities(app1));
 
     RemoteProxy p = BaseRemoteProxy.getNewInstance(new RegistrationRequest(config), registry);

File: java/server/src/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium.server.htmlrunner;
 
+import static java.util.concurrent.TimeUnit.SECONDS;
 import static org.openqa.selenium.firefox.FirefoxDriver.MARIONETTE;
 
 import com.beust.jcommander.JCommander;
@@ -171,7 +172,7 @@ private URL determineSuiteUrl(String browserUrl, String suiteURL) throws IOExcep
         server.setHandler(context);
         server.start();
 
-        PortProber.pollPort(port);
+        PortProber.waitForPortUp(port, 15, SECONDS);
 
         URL serverUrl = server.getURI().toURL();
         return new URL(serverUrl.getProtocol(), serverUrl.getHost(), serverUrl.getPort(),

File: java/server/test/org/openqa/grid/web/servlet/GridServletTests.java
Patch:
@@ -24,7 +24,8 @@
 @Suite.SuiteClasses({
   DisplayHelpServletTest.class,
   ResourceServletTest.class,
-  ConsoleServletTest.class
+  ConsoleServletTest.class,
+  RegistrationServletTest.class
 })
 public class GridServletTests {
 }

File: java/server/test/org/openqa/testing/FakeHttpServletResponse.java
Patch:
@@ -34,6 +34,7 @@ public class FakeHttpServletResponse extends HeaderContainer
   private final StringWriter stringWriter = new StringWriter();
   private final ServletOutputStream servletOutputStream =
       new StringServletOutputStream(stringWriter);
+  private final PrintWriter printWriter = new PrintWriter(servletOutputStream);
   private int status = HttpServletResponse.SC_OK;
 
   public int getStatus() {
@@ -114,7 +115,7 @@ public ServletOutputStream getOutputStream() throws IOException {
   }
 
   public PrintWriter getWriter() throws IOException {
-    throw new UnsupportedOperationException();
+    return printWriter;
   }
 
   public void setCharacterEncoding(String s) {

File: java/client/src/org/openqa/selenium/remote/CapabilityType.java
Patch:
@@ -26,6 +26,7 @@ public interface CapabilityType {
   String SUPPORTS_JAVASCRIPT = "javascriptEnabled";
   String TAKES_SCREENSHOT = "takesScreenshot";
   String VERSION = "version";
+  String BROWSER_VERSION = "browserVersion";
   String SUPPORTS_ALERTS = "handlesAlerts";
   String SUPPORTS_SQL_DATABASE = "databaseEnabled";
   String SUPPORTS_LOCATION_CONTEXT = "locationContextEnabled";

File: java/client/src/org/openqa/selenium/JavascriptExecutor.java
Patch:
@@ -59,7 +59,7 @@ public interface JavascriptExecutor {
    *
    * @param script The JavaScript to execute
    * @param args The arguments to the script. May be empty
-   * @return One of Boolean, Long, String, List or WebElement. Or null.
+   * @return One of Boolean, Long, Double, String, List or WebElement. Or null.
    */
   Object executeScript(String script, Object... args);
 

File: java/client/test/org/openqa/selenium/testing/SeleniumTestRunner.java
Patch:
@@ -39,7 +39,7 @@ public SeleniumTestRunner(Class<?> klass) throws InitializationError {
     super(klass);
     Browser browser = Browser.detect();
     if (browser == null && DevMode.isInDevMode()) {
-      browser = Browser.ff;
+      browser = Browser.chrome;
     }
     ignorance = new TestIgnorance(browser);
   }

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -384,8 +384,8 @@ protected Lock obtainLock(FirefoxProfile profile) {
   }
 
   @Override
-  protected void stopClient(Capabilities desiredCapabilities, Capabilities requiredCapabilities) {
-    if (isLegacy(desiredCapabilities)) {
+  protected void stopClient() {
+    if (this.getCommandExecutor() instanceof LazyCommandExecutor) {
       ((LazyCommandExecutor) this.getCommandExecutor()).quit();
     }
   }

File: java/client/test/org/openqa/selenium/remote/ErrorHandlerTest.java
Patch:
@@ -479,7 +479,7 @@ public void testStatusCodesRaisedBackToStatusMatches() {
         int expected = exception.getKey();
         if (e instanceof InvalidSelectorException) {
           // all of the special invalid selector exceptions are just mapped to the generic invalid selector
-          expected = 32;
+          expected = ErrorCodes.INVALID_SELECTOR_ERROR;
         }
         int seenStatusCode = new ErrorCodes().toStatusCode(e);
         if (seenStatusCode != expected) {

File: java/server/test/org/openqa/selenium/remote/server/DriverServletTest.java
Patch:
@@ -182,7 +182,7 @@ public void handlesInvalidCommandsToRootOfDriverService()
     assertEquals(500, response.getStatus());
 
     JsonObject jsonResponse = new JsonParser().parse(response.getBody()).getAsJsonObject();
-    assertEquals(ErrorCodes.UNHANDLED_ERROR, jsonResponse.get("status").getAsInt());
+    assertEquals(ErrorCodes.UNKNOWN_COMMAND, jsonResponse.get("status").getAsInt());
 
     JsonObject value = jsonResponse.get("value").getAsJsonObject();
     assertTrue(value.get("message").getAsString().startsWith("POST /"));

File: java/server/test/org/openqa/grid/internal/SessionTimesOutTest.java
Patch:
@@ -25,14 +25,14 @@
 import static org.junit.Assert.assertTrue;
 
 import org.junit.Before;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.internal.listeners.TimeoutListener;
 import org.openqa.grid.internal.mock.GridHelper;
 import org.openqa.grid.web.servlet.handler.RequestHandler;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
-import org.openqa.selenium.testing.Ignore;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -112,7 +112,7 @@ public void beforeRelease(TestSession session) {
     }
   }
 
-  @Ignore(reason = "flaky in travis CI")
+  @Ignore(value = "flaky in travis CI")
   @Test(timeout = 20000)
   public void testTimeoutSlow() throws InterruptedException {
     Registry registry = Registry.newInstance();

File: java/server/test/org/openqa/grid/internal/SessionTimesOutTest.java
Patch:
@@ -32,6 +32,7 @@
 import org.openqa.grid.web.servlet.handler.RequestHandler;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
+import org.openqa.selenium.testing.Ignore;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -111,6 +112,7 @@ public void beforeRelease(TestSession session) {
     }
   }
 
+  @Ignore(reason = "flaky in travis CI")
   @Test(timeout = 20000)
   public void testTimeoutSlow() throws InterruptedException {
     Registry registry = Registry.newInstance();

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -108,8 +108,8 @@ public class ErrorCodes {
       .put(400,
            ImmutableSortedSet.<StatusTuple>naturalOrder()
              .add(new StatusTuple("element not selectable", ELEMENT_NOT_SELECTABLE, ElementNotSelectableException.class))
-             .add(new StatusTuple("element not interactable", INVALID_ELEMENT_STATE, ElementNotInteractableException.class, INVALID_ELEMENT_STATE))
-             .add(new StatusTuple("element not interactable", ELEMENT_NOT_VISIBLE, ElementNotVisibleException.class, INVALID_ELEMENT_STATE))
+             .add(new StatusTuple("element not interactable", INVALID_ELEMENT_STATE, ElementNotInteractableException.class))
+             .add(new StatusTuple("element not interactable", ELEMENT_NOT_VISIBLE, ElementNotVisibleException.class))
              .add(new StatusTuple("element not visible", ELEMENT_NOT_VISIBLE, ElementNotVisibleException.class))
              .add(new StatusTuple("invalid argument", UNHANDLED_ERROR, InvalidArgumentException.class))
              .add(new StatusTuple("invalid cookie domain", INVALID_COOKIE_DOMAIN, InvalidCookieDomainException.class))
@@ -177,7 +177,6 @@ public class ErrorCodes {
     ALL_CODES.values().stream()
       .flatMap(Collection::stream)
       .filter(tuple -> tuple.getException() != null)
-      .filter(tuple -> tuple.jsonStatus == tuple.seleniumExceptionToResponseCode)
       .collect(Collectors.toMap(StatusTuple::asState, StatusTuple::getException, (key1, key2) -> key1));
 
   public String toState(Integer status) {

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -108,8 +108,8 @@ public class ErrorCodes {
       .put(400,
            ImmutableSortedSet.<StatusTuple>naturalOrder()
              .add(new StatusTuple("element not selectable", ELEMENT_NOT_SELECTABLE, ElementNotSelectableException.class))
-             .add(new StatusTuple("element not interactable", INVALID_ELEMENT_STATE, ElementNotInteractableException.class))
-             .add(new StatusTuple("element not interactable", ELEMENT_NOT_VISIBLE, ElementNotVisibleException.class))
+             .add(new StatusTuple("element not interactable", INVALID_ELEMENT_STATE, ElementNotInteractableException.class, INVALID_ELEMENT_STATE))
+             .add(new StatusTuple("element not interactable", ELEMENT_NOT_VISIBLE, ElementNotVisibleException.class, INVALID_ELEMENT_STATE))
              .add(new StatusTuple("element not visible", ELEMENT_NOT_VISIBLE, ElementNotVisibleException.class))
              .add(new StatusTuple("invalid argument", UNHANDLED_ERROR, InvalidArgumentException.class))
              .add(new StatusTuple("invalid cookie domain", INVALID_COOKIE_DOMAIN, InvalidCookieDomainException.class))
@@ -177,6 +177,7 @@ public class ErrorCodes {
     ALL_CODES.values().stream()
       .flatMap(Collection::stream)
       .filter(tuple -> tuple.getException() != null)
+      .filter(tuple -> tuple.jsonStatus == tuple.seleniumExceptionToResponseCode)
       .collect(Collectors.toMap(StatusTuple::asState, StatusTuple::getException, (key1, key2) -> key1));
 
   public String toState(Integer status) {

File: java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java
Patch:
@@ -177,6 +177,9 @@ public void startRegistrationProcess() {
     LOG.fine("Using the json request : " + registrationRequest.toJson());
 
     Boolean register = registrationRequest.getConfiguration().register;
+    if (register == null) {
+      register = false;
+    }
 
     if (!register) {
       LOG.info("No registration sent ( register = false )");

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -110,6 +110,7 @@ public class ErrorCodes {
              .add(new StatusTuple("element not selectable", ELEMENT_NOT_SELECTABLE, ElementNotSelectableException.class))
              .add(new StatusTuple("element not interactable", INVALID_ELEMENT_STATE, ElementNotInteractableException.class))
              .add(new StatusTuple("element not interactable", ELEMENT_NOT_VISIBLE, ElementNotVisibleException.class))
+             .add(new StatusTuple("element not visible", ELEMENT_NOT_VISIBLE, ElementNotVisibleException.class))
              .add(new StatusTuple("invalid argument", UNHANDLED_ERROR, InvalidArgumentException.class))
              .add(new StatusTuple("invalid cookie domain", INVALID_COOKIE_DOMAIN, InvalidCookieDomainException.class))
              .add(new StatusTuple("invalid element coordinates", INVALID_ELEMENT_COORDINATES, InvalidCoordinatesException.class))

File: java/server/src/org/openqa/selenium/remote/server/handler/UploadFile.java
Patch:
@@ -51,6 +51,6 @@ public String call() throws Exception {
   }
 
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
-    file = ((String) allParameters.get("file")).replaceAll("\\n", "");
+    file = (String) allParameters.get("file");
   }
 }

File: java/server/src/org/openqa/selenium/remote/server/handler/UploadFile.java
Patch:
@@ -51,6 +51,6 @@ public String call() throws Exception {
   }
 
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
-    file = (String) allParameters.get("file");
+    file = ((String) allParameters.get("file")).replaceAll("\\n", "");
   }
 }

File: java/client/test/org/openqa/selenium/environment/webserver/BasicAuth.java
Patch:
@@ -43,7 +43,7 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws Se
 
   private boolean isAuthorized(String auth) {
     if (auth != null) {
-      final int index = auth.indexOf(' ');
+      final int index = auth.indexOf(' ') + 1;
 
       if (index > 0) {
         final String credentials = new String(decoder.decode(auth.substring(index)));

File: java/client/test/org/openqa/selenium/I18nTest.java
Patch:
@@ -90,7 +90,8 @@ public void testEnteringHebrewTextFromRightToLeft() {
   @Test
   @Ignore(
       value = {MARIONETTE, HTMLUNIT, CHROME},
-      reason = "CHROME: ChromeDriver only supports characters in the BMP")
+      reason = "CHROME: ChromeDriver only supports characters in the BMP" +
+               "MARIONETTE: Doesn't handle first codepoint correctly.")
   public void testEnteringSupplementaryCharacters() {
     assumeFalse("IE: versions less thank 10 have issue 5069",
                 TestUtilities.isInternetExplorer(driver) &&

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -119,10 +119,12 @@ private void addDefaultServlets(ServletContextHandler handler) {
 
     if (!config.isWithOutServlet(DisplayHelpServlet.class)) {
       handler.addServlet(DisplayHelpServlet.class.getName(), "/*");
+      handler.setInitParameter(DisplayHelpServlet.HELPER_TYPE_PARAMETER, config.role);
     }
 
     if (!config.isWithOutServlet(ConsoleServlet.class)) {
       handler.addServlet(ConsoleServlet.class.getName(), "/grid/console/*");
+      handler.setInitParameter(ConsoleServlet.CONSOLE_PATH_PARAMETER, "/grid/console");
     }
 
     if (!config.isWithOutServlet(LifecycleServlet.class)) {

File: java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java
Patch:
@@ -45,6 +45,8 @@ public class ConsoleServlet extends RegistryBasedServlet {
   private static final Logger log = Logger.getLogger(ConsoleServlet.class.getName());
   private static String coreVersion;
 
+  public static final String CONSOLE_PATH_PARAMETER = "webdriver.server.consoleservlet.path";
+
   public ConsoleServlet() {
     this(null);
   }

File: java/server/test/org/openqa/grid/internal/GridInternalTests.java
Patch:
@@ -59,7 +59,7 @@
     SmokeTest.class,
     StandaloneConfigurationTest.class,
     StatusServletTests.class,
-    UserDefinedCapabilityMatcherTests.class,
+    UserDefinedCapabilityMatcherTests.class
 })
 public class GridInternalTests {
 }

File: java/server/test/org/openqa/grid/internal/utils/configuration/GridNodeConfigurationTest.java
Patch:
@@ -93,7 +93,7 @@ public void testDefaults() {
     assertNull(gnc.nodePolling);
     assertNull(gnc.proxy);
     assertNull(gnc.register);
-    assertNull(gnc.registerCycle);
+    assertEquals(5000, gnc.registerCycle.intValue());
     assertNull(gnc.unregisterIfStillDownAfter);
 
     //not a @Parameter
@@ -108,6 +108,7 @@ public void testAsJson() {
 
     assertEquals("{\"capabilities\":[{\"browserName\":\"chrome\",\"platform\":\"LINUX\"}],"
                + "\"nodeStatusCheckTimeout\":5000,"
+               + "\"registerCycle\":5000,"
                + "\"custom\":{},"
                + "\"maxSession\":1,"
                + "\"debug\":false,"

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -155,7 +155,7 @@ public class GridNodeConfiguration extends GridConfiguration {
     names = "-registerCycle",
     description = "<Integer> in ms : specifies how often the node will try to register itself again. Allows administrator to restart the hub without restarting (or risk orphaning) registered nodes. Must be specified with the \"-register\" option"
   )
-  public Integer registerCycle;
+  public Integer registerCycle = 5000;
 
   @Expose
   @Parameter(

File: java/server/src/org/openqa/grid/web/servlet/handler/WebDriverRequest.java
Patch:
@@ -70,8 +70,8 @@ public Map<String, Object> extractDesiredCapability() {
       JsonObject dc = map.get("desiredCapabilities").getAsJsonObject();
       return new JsonToBeanConverter().convert(Map.class, dc);
 
-    } catch (JsonSyntaxException e) {
-      throw new GridException("Cannot extract a capabilities from the request " + json);
+    } catch (Exception e) {
+      throw new GridException("Cannot extract a capabilities from the request: " + json, e);
     }
   }
 

File: java/client/src/org/openqa/selenium/InvalidArgumentException.java
Patch:
@@ -21,4 +21,7 @@ public class InvalidArgumentException extends WebDriverException {
   public InvalidArgumentException(String message) {
     super(message);
   }
+  public InvalidArgumentException(String message, Throwable cause) {
+    super(message, cause);
+  }
 }

File: java/client/test/org/openqa/selenium/remote/http/JsonHttpResponseCodecTest.java
Patch:
@@ -104,7 +104,7 @@ public void decodeNonJsonResponse_200() {
     response.setContent("{\"foobar\"}".getBytes(UTF_8));
 
     Response decoded = codec.decode(response);
-    assertNull(decoded.getStatus());
+    assertEquals(0, decoded.getStatus().longValue());
     assertEquals("{\"foobar\"}", decoded.getValue());
   }
 

File: java/server/test/org/openqa/grid/internal/GridInternalTests.java
Patch:
@@ -40,7 +40,8 @@
     RegistryStateTest.class,
     PriorityTestLoad.class,
     PriorityTest.class,
-    ParallelTest.class,
+// ParallelTests fail when run via command line with buck
+//    ParallelTest.class,
     LoadBalancedTests.class,
     ConcurrencyLockTest.class,
     AddingProxyAgainFreesResources.class,

File: java/client/test/org/openqa/selenium/ExecutingAsyncJavascriptTest.java
Patch:
@@ -168,7 +168,7 @@ public void shouldTimeoutIfScriptDoesNotInvokeCallback() {
       // Script is expected to be async and explicitly callback, so this should timeout.
       executor.executeAsyncScript("return 1 + 2;");
       fail("Should have thrown a TimeOutException!");
-    } catch (TimeoutException exception) {
+    } catch (ScriptTimeoutException exception) {
       // Do nothing.
     }
   }
@@ -181,7 +181,7 @@ public void shouldTimeoutIfScriptDoesNotInvokeCallbackWithAZeroTimeout() {
     try {
       executor.executeAsyncScript("window.setTimeout(function() {}, 0);");
       fail("Should have thrown a TimeOutException!");
-    } catch (TimeoutException exception) {
+    } catch (ScriptTimeoutException exception) {
       // Do nothing.
     }
   }
@@ -207,7 +207,7 @@ public void shouldTimeoutIfScriptDoesNotInvokeCallbackWithLongTimeout() {
           "var callback = arguments[arguments.length - 1];" +
           "window.setTimeout(callback, 1500);");
       fail("Should have thrown a TimeOutException!");
-    } catch (TimeoutException exception) {
+    } catch (ScriptTimeoutException exception) {
       // Do nothing.
     }
   }

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -41,6 +41,7 @@
 import org.openqa.selenium.NoSuchFrameException;
 import org.openqa.selenium.NoSuchSessionException;
 import org.openqa.selenium.NoSuchWindowException;
+import org.openqa.selenium.ScriptTimeoutException;
 import org.openqa.selenium.SessionNotCreatedException;
 import org.openqa.selenium.StaleElementReferenceException;
 import org.openqa.selenium.TimeoutException;
@@ -135,8 +136,8 @@ public class ErrorCodes {
              .build())
       .put(408,
            ImmutableSortedSet.<StatusTuple>naturalOrder()
-             .add(new StatusTuple("script timeout", ASYNC_SCRIPT_TIMEOUT, TimeoutException.class, TIMEOUT))
-             .add(new StatusTuple("timeout", TIMEOUT, TimeoutException.class, TIMEOUT))
+             .add(new StatusTuple("script timeout", ASYNC_SCRIPT_TIMEOUT, ScriptTimeoutException.class))
+             .add(new StatusTuple("timeout", TIMEOUT, TimeoutException.class))
              .build())
   .put(500,
        ImmutableSortedSet.<StatusTuple>naturalOrder()

File: java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java
Patch:
@@ -138,7 +138,7 @@ public BaseRemoteProxy(RegistrationRequest request, Registry registry) {
       this.id = remoteHost.toExternalForm();
     }
 
-    List<DesiredCapabilities> capabilities = request.getCapabilities();
+    List<DesiredCapabilities> capabilities = request.getConfiguration().capabilities;
 
     List<TestSlot> slots = new ArrayList<>();
     for (DesiredCapabilities capability : capabilities) {
@@ -391,7 +391,7 @@ public boolean isBusy() {
   public static <T extends RemoteProxy> T getNewInstance(
       RegistrationRequest request, Registry registry) {
     try {
-      String proxyClass = request.getRemoteProxyClass();
+      String proxyClass = request.getConfiguration().proxy;
       if (proxyClass == null) {
         log.fine("No proxy class. Using default");
         proxyClass = BaseRemoteProxy.class.getCanonicalName();

File: java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java
Patch:
@@ -246,8 +246,7 @@ public void beforeSession(TestSession session) {
   }
 
   public void afterSession(TestSession session) {
-    // TODO Auto-generated method stub
-
+    // nothing to do here in this default implementation
   }
 
   @Override

File: java/server/test/org/openqa/grid/internal/MyCapabilityMatcher.java
Patch:
@@ -26,7 +26,6 @@ public class MyCapabilityMatcher implements CapabilityMatcher{
 
   public boolean matches(Map<String, Object> currentCapability,
       Map<String, Object> requestedCapability) {
-    // TODO Auto-generated method stub
     return false;
   }
 

File: java/server/test/org/openqa/grid/internal/ProxySetTest.java
Patch:
@@ -29,7 +29,6 @@
 
 import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 public class ProxySetTest {
 
@@ -100,11 +99,11 @@ public StubbedRemoteProxy buildStubbedRemoteProxy(Registry registry, int totalUs
     config.port = totalUsed;
     config.role = "webdriver";
     RegistrationRequest req = RegistrationRequest.build(config);
-    req.getCapabilities().clear();
+    req.getConfiguration().capabilities.clear();
 
     DesiredCapabilities capability = new DesiredCapabilities();
     capability.setBrowserName(BrowserType.CHROME);
-    req.addDesiredCapability(capability);
+    req.getConfiguration().capabilities.add(capability);
 
     StubbedRemoteProxy tempProxy = new StubbedRemoteProxy(req, registry);
     tempProxy.setTotalUsed(totalUsed);

File: java/server/test/org/openqa/grid/internal/RegistryTest.java
Patch:
@@ -30,6 +30,7 @@
 import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;
 import org.openqa.grid.web.servlet.handler.RequestHandler;
 import org.openqa.selenium.remote.CapabilityType;
+import org.openqa.selenium.remote.DesiredCapabilities;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -100,9 +101,8 @@ public void prepareReqRequest() {
     config.host = "machine1";
     config.port = 4444;
     config.maxSession = 5;
-    req = new RegistrationRequest();
-    req.addDesiredCapability(app1);
-    req.setConfiguration(config);
+    config.capabilities.add(new DesiredCapabilities(app1));
+    req = new RegistrationRequest(config);
   }
 
   @Test

File: java/server/test/org/openqa/grid/internal/listener/CommandListenerTest.java
Patch:
@@ -45,6 +45,7 @@
 import org.openqa.grid.web.servlet.handler.SeleniumBasedRequest;
 import org.openqa.grid.web.servlet.handler.SeleniumBasedResponse;
 import org.openqa.selenium.remote.CapabilityType;
+import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.internal.HttpClientFactory;
 
 import java.io.IOException;
@@ -140,9 +141,8 @@ public Integer answer(InvocationOnMock invocation) {
   public static void prepare() {
     app1.put(CapabilityType.APPLICATION_NAME, "app1");
     GridNodeConfiguration config = new GridNodeConfiguration();
-    req = new RegistrationRequest();
-    req.addDesiredCapability(app1);
-    req.setConfiguration(config);
+    config.capabilities.add(new DesiredCapabilities(app1));
+    req = new RegistrationRequest(config);
   }
 
   @Test

File: java/server/test/org/openqa/grid/internal/mock/GridHelper.java
Patch:
@@ -68,13 +68,11 @@ public String getNewSessionRequestedCapability(TestSession session) {
 
       @Override
       public ExternalSessionKey extractSession() {
-        // TODO Auto-generated method stub
         return null;
       }
 
       @Override
       public RequestType extractRequestType() {
-        // TODO Auto-generated method stub
         return null;
       }
 

File: java/client/src/org/openqa/selenium/remote/http/W3CHttpCommandCodec.java
Patch:
@@ -130,7 +130,7 @@ public W3CHttpCommandCodec() {
 
           case "tag name":
             toReturn.put("using", "css selector");
-            toReturn.put("value", "#" + cssEscape(value));
+            toReturn.put("value", cssEscape(value));
             break;
 
           case "xpath":

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -140,8 +140,11 @@ public static RegistrationRequest getNewInstance(String json) throws JsonSyntaxE
     GridNodeConfiguration configuration = GridNodeConfiguration.loadFromJSON(config);
     request.setConfiguration(configuration);
 
+    // make sure 'id' has a value
     if (o.has("id")) {
       request.configuration.id = o.get("id").getAsString();
+    } else {
+      request.configuration.id = request.configuration.getRemoteHost();
     }
 
     JsonArray capabilities = o.get("capabilities").getAsJsonArray();

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -140,7 +140,7 @@ private void addDefaultServlets(ServletContextHandler handler) {
 
   private void initServer() {
     try {
-      if (config.jettyMaxThreads>0) {
+      if (config.jettyMaxThreads != null && config.jettyMaxThreads > 0) {
         QueuedThreadPool pool = new QueuedThreadPool();
         pool.setMaxThreads(config.jettyMaxThreads);
         server = new Server(pool);

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -99,8 +99,8 @@ public void setExtraServlets(Map<String, Class<? extends Servlet>> extraServlets
   }
 
   public void boot() {
-    if (configuration.jettyThreads != null && configuration.jettyThreads > 0) {
-      server = new Server(new QueuedThreadPool(configuration.jettyThreads));
+    if (configuration.jettyMaxThreads != null && configuration.jettyMaxThreads > 0) {
+      server = new Server(new QueuedThreadPool(configuration.jettyMaxThreads));
     } else {
       server = new Server();
     }

File: java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java
Patch:
@@ -261,7 +261,7 @@ private void getVersion() {
     }
     try {
       Manifest manifest = new Manifest(stream);
-      coreVersion = manifest.getEntries().get("Build-Info").getValue("Selenium-Version");
+      coreVersion = manifest.getEntries().get("Build-Info").getValue("Selenium-Version").trim();
     } catch (IOException e) {
       log.severe("Cannot load version from VERSION.txt" + e.getMessage());
     }

File: java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java
Patch:
@@ -84,7 +84,9 @@ public SelfRegisteringRemote(RegistrationRequest config) {
     }
 
     // add the resource servlet for nodes
-    nodeServlets.put("/resources/*", ResourceServlet.class);
+    if (!nodeConfig.getConfiguration().isWithOutServlet(ResourceServlet.class)) {
+      nodeServlets.put("/resources/*", ResourceServlet.class);
+    }
 
     // add the user supplied servlet(s) for nodes
     addExtraServlets(nodeConfig.getConfiguration().servlets);

File: java/server/src/org/openqa/grid/selenium/GridLauncherV3.java
Patch:
@@ -22,7 +22,6 @@
 import com.beust.jcommander.JCommander;
 
 import org.openqa.grid.common.GridRole;
-import org.openqa.grid.common.JSONConfigurationUtils;
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.internal.utils.SelfRegisteringRemote;
 import org.openqa.grid.internal.utils.configuration.CoreRunnerConfiguration;
@@ -227,8 +226,8 @@ public void setConfiguration(String[] args) {
             //re-parse the args using any -hubConfig specified to init
             if (pending.hubConfig != null) {
               configuration = GridHubConfiguration.loadFromJSON(pending.hubConfig);
+              new JCommander(configuration, args); //args take precedence
             }
-            new JCommander(configuration, args); //args take precedence
             helpRequested = configuration.help;
           }
 
@@ -248,8 +247,8 @@ public void setConfiguration(String[] args) {
             //re-parse the args using any -nodeConfig specified to init
             if (pending.nodeConfigFile != null) {
               configuration = GridNodeConfiguration.loadFromJSON(pending.nodeConfigFile);
+              new JCommander(configuration, args); //args take precedence
             }
-            new JCommander(configuration, args); //args take precedence
             helpRequested = configuration.help;
             if (configuration.port == null) {
               configuration.port = 5555;

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridConfiguration.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.openqa.grid.internal.utils.configuration;
 
-import com.beust.jcommander.IStringConverter;
 import com.beust.jcommander.Parameter;
 
 import org.openqa.grid.internal.utils.configuration.converters.CustomConverter;
@@ -58,6 +57,7 @@ public class GridConfiguration extends StandaloneConfiguration {
     description = "<String> : list of extra servlets this hub will display. Allows to present custom view of the hub for monitoring and management purposes. Specify multiple on the command line: -servlet tld.company.ServletA -servlet tld.company.ServletB. The servlet must exist in the path: /grid/admin/ServletA /grid/admin/ServletB"
   )
   public List<String> servlets;
+
   /**
    * replaces this instance of configuration value with the 'other' value if it's set.
    * @param other

File: java/server/src/org/openqa/grid/internal/utils/configuration/StandaloneConfiguration.java
Patch:
@@ -85,7 +85,8 @@ public class StandaloneConfiguration {
 
   @Parameter(
     names = {"-avoidProxy"},
-    description = "DO NOT USE. Hack to allow selenium 3.0 server run in SauceLabs"
+    description = "DO NOT USE. Hack to allow selenium 3.0 server run in SauceLabs",
+    hidden = true
   )
   private Boolean avoidProxy;
 

File: java/client/src/org/openqa/selenium/remote/http/AbstractHttpCommandCodec.java
Patch:
@@ -78,9 +78,7 @@ public AbstractHttpCommandCodec() {
     defineCommand(CLOSE, delete("/session/:sessionId/window"));
     defineCommand(SWITCH_TO_WINDOW, post("/session/:sessionId/window"));
 
-    defineCommand(GET_WINDOW_HANDLES, get("/session/:sessionId/window/handles"));
     defineCommand(GET_WINDOW_POSITION, get("/session/:sessionId/window/:windowHandle/position"));
-    defineCommand(GET_CURRENT_WINDOW_HANDLE, get("/session/:sessionId/window"));
     defineCommand(FULLSCREEN_CURRENT_WINDOW, post("/session/:sessionId/window/fullscreen"));
 
     defineCommand(GET_CURRENT_URL, get("/session/:sessionId/url"));

File: java/client/src/org/openqa/selenium/remote/RemoteWebElement.java
Patch:
@@ -163,7 +163,7 @@ public String getAttribute(String name) {
       String script = String.format(
         "function() { return (%s).apply(null, arguments);}",
         rawFunction);
-      return (String) parent.executeScript(script, this);
+      return (String) parent.executeScript(script, this, name);
 
     } catch (IOException | NullPointerException e) {
       throw new WebDriverException(e);

File: java/client/src/org/openqa/selenium/remote/DriverCommand.java
Patch:
@@ -89,6 +89,7 @@ public interface DriverCommand {
   String GET_ELEMENT_LOCATION_ONCE_SCROLLED_INTO_VIEW = "getElementLocationOnceScrolledIntoView";
   String GET_ELEMENT_SIZE = "getElementSize";
   String GET_ELEMENT_ATTRIBUTE = "getElementAttribute";
+  String GET_ELEMENT_PROPERTY = "getElementProperty";
   String GET_ELEMENT_VALUE_OF_CSS_PROPERTY = "getElementValueOfCssProperty";
   String ELEMENT_EQUALS = "elementEquals";
 

File: java/client/src/org/openqa/selenium/remote/http/JsonHttpCommandCodec.java
Patch:
@@ -128,6 +128,7 @@ public JsonHttpCommandCodec() {
     defineCommand(FIND_ELEMENTS, post("/session/:sessionId/elements"));
     defineCommand(GET_ACTIVE_ELEMENT, post("/session/:sessionId/element/active"));
     defineCommand(GET_ELEMENT_ATTRIBUTE, get("/session/:sessionId/element/:id/attribute/:name"));
+    defineCommand(GET_ELEMENT_PROPERTY, get("/session/:sessionId/element/:id/property/:name"));
     defineCommand(CLICK_ELEMENT, post("/session/:sessionId/element/:id/click"));
     defineCommand(CLEAR_ELEMENT, post("/session/:sessionId/element/:id/clear"));
     defineCommand(

File: java/client/src/org/openqa/selenium/firefox/GeckoDriverService.java
Patch:
@@ -97,7 +97,7 @@ protected File findDefaultExecutable() {
     @Override
     protected ImmutableList<String> createArgs() {
       ImmutableList.Builder<String> argsBuilder = ImmutableList.builder();
-      argsBuilder.add(String.format("--webdriver-port=%d", getPort()));
+      argsBuilder.add(String.format("--port=%d", getPort()));
       if (getLogFile() != null) {
         argsBuilder.add(String.format("--log-file=\"%s\"", getLogFile().getAbsolutePath()));
       }

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -100,7 +100,7 @@ public class GridNodeConfiguration extends GridConfiguration {
     names = "-nodeStatusCheckTimeout",
     description = "<Integer> in ms : connection/socket timeout, used for node \"nodePolling\" check"
   )
-  public Integer nodeStatusCheckTimeout;
+  public Integer nodeStatusCheckTimeout = 5000;
 
   @Parameter(
     names = "-proxy",

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -35,6 +35,7 @@
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -57,7 +58,7 @@ public class GridNodeConfiguration extends GridConfiguration {
     converter = BrowserDesiredCapabilityConverter.class,
     splitter = NoOpParameterSplitter.class
   )
-  public List<DesiredCapabilities> browser;
+  public List<DesiredCapabilities> browser = Arrays.asList();
 
   @Parameter(
     names = "-downPollingLimit",

File: java/client/src/org/openqa/selenium/DeviceRotation.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Defines an object which represents the three dimensional plane and how a device can be rotated about it.
- * Each of the axis is in positive degrees on the real number scale (0 <= deg <= 360).
+ * Each of the axis is in positive degrees on the real number scale (0 &lt;= deg &lt;= 360).
  *
  * Example Instantiation to rotate device to "Landscape Right":
  * DeviceRotation(0, 0, 90);

File: java/server/src/org/openqa/grid/selenium/GridLauncherV3.java
Patch:
@@ -230,6 +230,9 @@ public void setConfiguration(String[] args) {
             configuration = new GridNodeConfiguration();
             new JCommander(configuration, args);
             helpRequested = configuration.help;
+            if (configuration.port == null) {
+              configuration.port = 5555;
+            }
           }
 
           public void launch() throws Exception {

File: java/server/test/org/openqa/grid/e2e/GridE2ETests.java
Patch:
@@ -27,6 +27,7 @@
 import org.openqa.grid.e2e.misc.ConfigInheritanceTest;
 import org.openqa.grid.e2e.misc.Grid1HeartbeatTest;
 import org.openqa.grid.e2e.misc.GridSerializeExceptionTest;
+import org.openqa.grid.e2e.misc.GridViaCommandLineTest;
 import org.openqa.grid.e2e.misc.HubRestart;
 import org.openqa.grid.e2e.misc.HubRestartNeg;
 import org.openqa.grid.e2e.misc.WebDriverPriorityDemo;
@@ -58,6 +59,7 @@
     NodeTimeOutTest.class,
     SmokeTest.class, // slow
     ExtraServletUtilTest.class,
+    GridViaCommandLineTest.class,
 })
 public class GridE2ETests {
 }

File: java/server/test/org/openqa/grid/e2e/utils/GridTestHelper.java
Patch:
@@ -68,7 +68,7 @@ public static DesiredCapabilities getDefaultBrowserCapability() {
       caps.setBrowserName(browser);
       return caps;
     }
-    return DesiredCapabilities.htmlUnit();
+    return DesiredCapabilities.chrome();
   }
 
   public static Hub getHub() throws Exception {

File: java/client/src/org/openqa/selenium/OutputType.java
Patch:
@@ -24,8 +24,7 @@
 import java.util.Base64;
 
 /**
- * Defines the output type for a screenshot. See org.openqa.selenium.Screenshot for usage and
- * examples.
+ * Defines the output type for a screenshot.
  *
  * @see TakesScreenshot
  * @param <T> Type for the screenshot output.

File: java/client/test/org/openqa/selenium/testing/drivers/ReflectionBackedDriverSupplier.java
Patch:
@@ -75,12 +75,10 @@ public WebDriver get() {
         }
 
         try {
-          System.out.println("try 2 arg");
           return driverClass.getConstructor(Capabilities.class,
                                             Capabilities.class)
             .newInstance(desiredCapsToUse, requiredCapabilities);
         } catch (NoSuchMethodException ex) {
-          System.out.println("try 1 arg");
           return driverClass.getConstructor(Capabilities.class).newInstance(desiredCapsToUse);
         }
       }

File: java/server/src/org/openqa/grid/selenium/GridLauncherV3.java
Patch:
@@ -115,7 +115,7 @@ private static GridItemLauncher buildLauncher(String[] args) {
       return null;
     }
 
-    Supplier<GridItemLauncher> supplier = LAUNCHERS.get(gridRole);
+    Supplier<GridItemLauncher> supplier = LAUNCHERS.get(gridRole.toString());
     if (supplier == null) {
       System.err.println("Unknown role: " + gridRole);
       return null;

File: java/client/src/org/openqa/selenium/interactions/CompositeAction.java
Patch:
@@ -63,7 +63,7 @@ int getNumberOfActions() {
   }
 
   public List<Action> asList() {
-    ImmutableList.Builder<Action> builder = new ImmutableList.Builder<Action>();
+    ImmutableList.Builder<Action> builder = new ImmutableList.Builder<>();
     for (Action action : actionsList) {
       if (action instanceof MultiAction) {
         builder.addAll(((MultiAction) action).getActions());

File: java/client/src/org/openqa/selenium/io/TemporaryFilesystem.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class TemporaryFilesystem {
 
-  private final Set<File> temporaryFiles = new CopyOnWriteArraySet<File>();
+  private final Set<File> temporaryFiles = new CopyOnWriteArraySet<>();
   private final File baseDir;
   private final Thread shutdownHook = new Thread() {  // Thread safety reviewed
     @Override

File: java/client/src/org/openqa/selenium/os/ExecutableFinder.java
Patch:
@@ -39,7 +39,7 @@ class ExecutableFinder {
   private static final Method JDK6_CAN_EXECUTE = findJdk6CanExecuteMethod();
 
   private final ImmutableSet.Builder<String> pathSegmentBuilder =
-      new ImmutableSet.Builder<String>();
+      new ImmutableSet.Builder<>();
 
   /**
    * Find the executable by scanning the file system and the PATH. In the case of Windows this

File: java/client/src/org/openqa/selenium/remote/RemoteLogs.java
Patch:
@@ -103,7 +103,7 @@ public Set<String> getAvailableLogTypes() {
     Object raw = executeMethod.execute(DriverCommand.GET_AVAILABLE_LOG_TYPES, null);
     @SuppressWarnings("unchecked")
     List<String> rawList = (List<String>) raw;
-    ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<String>();
+    ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<>();
     for (String logType : rawList) {
       builder.add(logType);
     }

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -169,7 +169,7 @@ private void init(Capabilities desiredCapabilities, Capabilities requiredCapabil
     keyboard = new RemoteKeyboard(executeMethod);
     mouse = new RemoteMouse(executeMethod);
 
-    ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<String>();
+    ImmutableSet.Builder<String> builder = new ImmutableSet.Builder<>();
 
     boolean isProfilingEnabled = desiredCapabilities != null &&
         desiredCapabilities.is(CapabilityType.ENABLE_PROFILING_CAPABILITY);
@@ -237,7 +237,7 @@ protected void startSession(Capabilities desiredCapabilities) {
   protected void startSession(Capabilities desiredCapabilities,
       Capabilities requiredCapabilities) {
     ImmutableMap.Builder<String, Capabilities> paramBuilder =
-        new ImmutableMap.Builder<String, Capabilities>();
+        new ImmutableMap.Builder<>();
     paramBuilder.put("desiredCapabilities", desiredCapabilities);
     if (requiredCapabilities != null) {
       paramBuilder.put("requiredCapabilities", requiredCapabilities);
@@ -546,7 +546,7 @@ public Set<String> getWindowHandles() {
     Object value = response.getValue();
     try {
       List<String> returnedValues = (List<String>) value;
-      return new LinkedHashSet<String>(returnedValues);
+      return new LinkedHashSet<>(returnedValues);
     } catch (ClassCastException ex) {
       throw new WebDriverException(
         "Returned value cannot be converted to List<String>: " + value, ex);

File: java/client/src/org/openqa/selenium/safari/SafariDriverServer.java
Patch:
@@ -47,7 +47,7 @@ class SafariDriverServer {
   private final int port;
 
   private final BlockingQueue<WebSocketConnection> connections =
-      new SynchronousQueue<WebSocketConnection>();
+      new SynchronousQueue<>();
 
   private ServerBootstrap bootstrap;
   private Channel serverChannel;

File: java/client/src/org/openqa/selenium/safari/WebSocketConnection.java
Patch:
@@ -50,7 +50,7 @@ class WebSocketConnection {
   private final Channel channel;
 
   private final AtomicReference<SettableFuture<String>> pendingResponse =
-      new AtomicReference<SettableFuture<String>>();
+      new AtomicReference<>();
 
   public WebSocketConnection(Channel channel) {
     this.channel = channel;

File: java/client/test/org/openqa/selenium/support/ui/ExpectedConditionsTest.java
Patch:
@@ -100,7 +100,7 @@ public class ExpectedConditionsTest {
   public void setUpMocks() {
     MockitoAnnotations.initMocks(this);
 
-    wait = new FluentWait<WebDriver>(mockDriver, mockClock, mockSleeper)
+    wait = new FluentWait<>(mockDriver, mockClock, mockSleeper)
       .withTimeout(1, TimeUnit.SECONDS)
       .pollingEvery(250, TimeUnit.MILLISECONDS);
   }

File: java/client/test/org/openqa/selenium/testing/drivers/OutOfProcessSeleniumServer.java
Patch:
@@ -69,7 +69,7 @@ public OutOfProcessSeleniumServer start() {
     String localAddress = new NetworkUtils().getPrivateLocalAddress();
     baseUrl = String.format("http://%s:%d", localAddress, port);
 
-    List<String> cmdLine = new LinkedList<String>();
+    List<String> cmdLine = new LinkedList<>();
     cmdLine.add("java");
     cmdLine.add("-cp");
     cmdLine.add(classPath);

File: java/server/src/org/openqa/grid/internal/ProxySet.java
Patch:
@@ -41,7 +41,7 @@
 @ThreadSafe
 public class ProxySet implements Iterable<RemoteProxy> {
 
-  private final Set<RemoteProxy> proxies = new CopyOnWriteArraySet<RemoteProxy>();
+  private final Set<RemoteProxy> proxies = new CopyOnWriteArraySet<>();
 
   private static final Logger log = Logger.getLogger(ProxySet.class.getName());
   private volatile boolean throwOnCapabilityNotPresent = true;

File: java/server/src/org/openqa/grid/internal/Registry.java
Patch:
@@ -59,7 +59,7 @@ public class Registry {
   private final HttpClientFactory httpClientFactory;
   private final NewSessionRequestQueue newSessionQueue;
   private final Matcher matcherThread = new Matcher();
-  private final List<RemoteProxy> registeringProxies = new CopyOnWriteArrayList<RemoteProxy>();
+  private final List<RemoteProxy> registeringProxies = new CopyOnWriteArrayList<>();
 
   private volatile boolean stop = false;
   // The following three variables need to be volatile because we expose a public setters

File: java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java
Patch:
@@ -107,7 +107,7 @@ public HtmlRenderer getHtmlRender() {
   private volatile boolean poll = true;
 
   // TODO freynaud
-  private List<RemoteException> errors = new CopyOnWriteArrayList<RemoteException>();
+  private List<RemoteException> errors = new CopyOnWriteArrayList<>();
   private Thread pollingThread = null;
 
   public boolean isAlive() {

File: java/server/src/org/openqa/selenium/remote/server/CapabilitiesComparator.java
Patch:
@@ -156,7 +156,7 @@ public int score(T value) {
     }
 
     static <T> CapabilityScorer<T> scoreAgainst(T value) {
-      return new CapabilityScorer<T>(value);
+      return new CapabilityScorer<>(value);
     }
   }
 

File: java/server/src/org/openqa/selenium/remote/server/DefaultSession.java
Patch:
@@ -110,7 +110,7 @@ private DefaultSession(final DriverFactory factory, TemporaryFilesystem tempFs,
     this.clock = clock;
     final BrowserCreator browserCreator = new BrowserCreator(factory, capabilities);
     final FutureTask<EventFiringWebDriver> webDriverFutureTask =
-        new FutureTask<EventFiringWebDriver>(browserCreator);
+        new FutureTask<>(browserCreator);
     executor = new ThreadPoolExecutor(1, 1,
                                       600L, TimeUnit.SECONDS,
                                       new LinkedBlockingQueue<Runnable>());

File: java/server/src/org/openqa/selenium/remote/server/JsonHttpCommandHandler.java
Patch:
@@ -48,7 +48,7 @@ public class JsonHttpCommandHandler {
   private final Logger log;
   private final JsonHttpCommandCodec commandCodec;
   private final JsonHttpResponseCodec responseCodec;
-  private final Map<String, ResultConfig> configs = new LinkedHashMap<String, ResultConfig>();
+  private final Map<String, ResultConfig> configs = new LinkedHashMap<>();
   private final ErrorCodes errorCodes = new ErrorCodes();
 
   public JsonHttpCommandHandler(DriverSessions sessions, Logger log) {

File: java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java
Patch:
@@ -28,7 +28,7 @@
 
 public class SendKeys extends WebElementHandler<Void> implements JsonParametersAware {
 
-  private final List<CharSequence> keys = new CopyOnWriteArrayList<CharSequence>();
+  private final List<CharSequence> keys = new CopyOnWriteArrayList<>();
 
   public SendKeys(Session session) {
     super(session);

File: java/server/src/org/openqa/selenium/remote/server/handler/WebDriverHandler.java
Patch:
@@ -40,7 +40,7 @@ protected WebDriverHandler(Session session) {
 
   @Override
   public final T handle() throws Exception {
-    FutureTask<T> future = new FutureTask<T>(this);
+    FutureTask<T> future = new FutureTask<>(this);
     try {
       return getSession().execute(future);
     } catch (ExecutionException e) {

File: java/server/src/org/openqa/selenium/remote/server/handler/interactions/SendKeyToActiveElement.java
Patch:
@@ -30,7 +30,7 @@
 
 public class SendKeyToActiveElement extends WebDriverHandler<Void> implements JsonParametersAware {
 
-  private final List<CharSequence> keys = new CopyOnWriteArrayList<CharSequence>();
+  private final List<CharSequence> keys = new CopyOnWriteArrayList<>();
 
   public SendKeyToActiveElement(Session session) {
     super(session);

File: java/server/src/org/openqa/selenium/remote/server/log/DefaultPerSessionLogHandler.java
Patch:
@@ -276,7 +276,7 @@ public synchronized LogEntries getSessionLog(SessionId sessionId) throws IOExcep
   public synchronized List<SessionId> getLoggedSessions() {
     // TODO: Find a solution that can handle large numbers of sessions, maybe by
     // reading them from disc.
-    ImmutableList.Builder<SessionId> builder = new ImmutableList.Builder<SessionId>();
+    ImmutableList.Builder<SessionId> builder = new ImmutableList.Builder<>();
     builder.addAll(perSessionDriverEntries.keySet());
     return builder.build();
   }

File: java/server/src/org/openqa/selenium/server/htmlrunner/HTMLTestResults.java
Patch:
@@ -240,7 +240,7 @@ public String decode(String string) {
     }
 
     public List decodeListOfStrings(List list) {
-      List<String> decodedList = new LinkedList<String>();
+      List<String> decodedList = new LinkedList<>();
 
       for (Object o : list) {
         decodedList.add(decode((String) o));

File: java/server/test/org/openqa/selenium/remote/server/SessionCleanerTest.java
Patch:
@@ -89,7 +89,7 @@ private Runnable getRunnableThatMakesSessionBusy(final Session session,
     return new Runnable() {
       public void run() {
         try {
-          session.execute(new FutureTask<Object>(new Callable<Object>()
+          session.execute(new FutureTask<>(new Callable<Object>()
          {
           public Object call() {
             try {

File: java/client/src/org/openqa/selenium/io/FileHandler.java
Patch:
@@ -191,7 +191,7 @@ private static void copyFile(File from, File to, Filter onlyCopy) throws IOExcep
       final long copied = Files.copy(from.toPath(), out);
       final long length = from.length();
       if (copied != length) {
-        throw new IOException("Could not transfer all bytes.");
+        throw new IOException("Could not transfer all bytes from " + from + " to " + to);
       }
     }
   }

File: java/client/test/org/openqa/selenium/BuckBuild.java
Patch:
@@ -118,12 +118,13 @@ private void findBuck(Path projectRoot, ImmutableList.Builder<String> builder) t
 
   private void downloadBuckPexIfNecessary(ImmutableList.Builder<String> builder)
     throws IOException {
-    String buckVersion = new String(Files.readAllBytes(Paths.get(".buckversion"))).trim();
+    Path projectRoot = InProject.locate("Rakefile").getParentFile().toPath();
+    String buckVersion = new String(Files.readAllBytes(projectRoot.resolve(".buckversion"))).trim();
 
     Path pex = Paths.get(
       StandardSystemProperty.USER_HOME.value(), ".crazyfun", "buck", buckVersion, "buck.pex");
 
-    String expectedHash = new String(Files.readAllBytes(Paths.get(".buckhash"))).trim();
+    String expectedHash = new String(Files.readAllBytes(projectRoot.resolve(".buckhash"))).trim();
     HashCode md5 = Files.exists(pex) ?
                    Hashing.md5().hashBytes(Files.readAllBytes(pex)) :
                    HashCode.fromString("aa");  // So we have a non-null value

File: java/server/src/org/openqa/selenium/remote/server/SessionCleaner.java
Patch:
@@ -25,6 +25,7 @@
 import org.openqa.selenium.remote.server.log.PerSessionLogHandler;
 import org.openqa.selenium.support.events.EventFiringWebDriver;
 
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 class SessionCleaner extends Thread {   // Thread safety reviewed
@@ -115,7 +116,8 @@ void checkExpiry() {
           try {
             deleteSession.call();
           } catch (Exception e) {
-            throw new RuntimeException(e);
+            log.log(Level.WARNING, "Could not delete session " + session.getSessionId(), e);
+            continue;
           }
         }
 

File: java/client/test/org/openqa/selenium/support/ui/SlowLoadableComponentTest.java
Patch:
@@ -58,10 +58,11 @@ public void testShouldThrowAnErrorIfCallingLoadDoesNotCauseTheComponentToLoadBef
     FakeClock clock = new FakeClock();
     try {
       new BasicSlowLoader(clock, 2).get();
-      fail();
     } catch (Error e) {
       // We expect to time out
+      return;
     }
+    fail();
   }
 
   @Test

File: java/client/src/org/openqa/selenium/firefox/MarionetteDriver.java
Patch:
@@ -27,8 +27,11 @@
 
 /**
  * An implementation of the {#link WebDriver} interface that drives Firefox using Marionette interface.
+ *
+ * @deprecated One should use FirefoxDriver with capability marionette = true or false respectively.
  */
 @Beta
+@Deprecated
 public class MarionetteDriver extends RemoteWebDriver {
 
   /**

File: java/client/src/com/thoughtworks/selenium/webdriven/JavascriptLibrary.java
Patch:
@@ -18,7 +18,6 @@
 package com.thoughtworks.selenium.webdriven;
 
 import com.google.common.base.Charsets;
-import com.google.common.base.Throwables;
 import com.google.common.io.Resources;
 
 import org.openqa.selenium.JavascriptExecutor;
@@ -111,7 +110,7 @@ String readScriptImpl(String script) {
     try {
       return Resources.toString(url, Charsets.UTF_8);
     } catch (IOException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
   }
 }

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/WaitForPageToLoad.java
Patch:
@@ -17,8 +17,6 @@
 
 package com.thoughtworks.selenium.webdriven.commands;
 
-import com.google.common.base.Throwables;
-
 import com.thoughtworks.selenium.Wait;
 import com.thoughtworks.selenium.webdriven.SeleneseCommand;
 
@@ -88,7 +86,7 @@ private void hesitate(long duration) {
     try {
       Thread.sleep(duration);
     } catch (InterruptedException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
   }
 

File: java/client/src/org/openqa/selenium/remote/Augmenter.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.remote;
 
 
-import com.google.common.base.Throwables;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Sets;
 
@@ -102,7 +101,7 @@ private void copyField(Object source, Object target, Field field) {
       Object value = field.get(source);
       field.set(target, value);
     } catch (IllegalAccessException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
   }
 

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.openqa.selenium.remote;
 
-import com.google.common.base.Throwables;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Iterables;
@@ -692,7 +691,7 @@ protected Response execute(String driverCommand, Map<String, ?> parameters) {
       if (getCapabilities() != null) {
         ex.addInfo("Capabilities", getCapabilities().toString());
       }
-      Throwables.propagate(ex);
+      throw ex;
     }
     return response;
   }

File: java/client/src/org/openqa/selenium/remote/html5/AddApplicationCache.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.remote.html5;
 
-import com.google.common.base.Throwables;
-
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.html5.ApplicationCache;
 import org.openqa.selenium.remote.AugmenterProvider;
@@ -47,7 +45,7 @@ public Object invoke(ExecuteMethod executeMethod, Object self, Method method, Ob
         } catch (IllegalAccessException e) {
           throw new WebDriverException(e);
         } catch (InvocationTargetException e) {
-          throw Throwables.propagate(e.getCause());
+          throw new RuntimeException(e.getCause());
         }
       }
     };

File: java/client/src/org/openqa/selenium/remote/html5/AddLocationContext.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.remote.html5;
 
-import com.google.common.base.Throwables;
-
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.html5.LocationContext;
 import org.openqa.selenium.remote.AugmenterProvider;
@@ -47,7 +45,7 @@ public Object invoke(ExecuteMethod executeMethod, Object self, Method method, Ob
         } catch (IllegalAccessException e) {
           throw new WebDriverException(e);
         } catch (InvocationTargetException e) {
-          throw Throwables.propagate(e.getCause());
+          throw new RuntimeException(e.getCause());
         }
       }
     };

File: java/client/src/org/openqa/selenium/remote/html5/AddWebStorage.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.remote.html5;
 
-import com.google.common.base.Throwables;
-
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.AugmenterProvider;
@@ -47,7 +45,7 @@ public Object invoke(ExecuteMethod executeMethod, Object self, Method method, Ob
         } catch (IllegalAccessException e) {
           throw new WebDriverException(e);
         } catch (InvocationTargetException e) {
-          throw Throwables.propagate(e.getCause());
+          throw new RuntimeException(e.getCause());
         }
       }
     };

File: java/client/src/org/openqa/selenium/remote/mobile/AddNetworkConnection.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.remote.mobile;
 
-import com.google.common.base.Throwables;
-
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.mobile.NetworkConnection;
 import org.openqa.selenium.remote.AugmenterProvider;
@@ -48,7 +46,7 @@ public Object invoke(ExecuteMethod executeMethod, Object self, Method method,
         } catch (IllegalAccessException e) {
           throw new WebDriverException(e);
         } catch (InvocationTargetException e) {
-          throw Throwables.propagate(e.getCause());
+          throw new RuntimeException(e.getCause());
         }
       }
     };

File: java/client/test/org/openqa/selenium/remote/AugmenterTest.java
Patch:
@@ -96,7 +96,7 @@ public Object invoke(ExecuteMethod executeMethod, Object self,
             try {
               return method.invoke(driver, args);
             } catch (IllegalAccessException e) {
-              throw Throwables.propagate(e);
+              throw new RuntimeException(e);
             } catch (InvocationTargetException e) {
               throw Throwables.propagate(e.getTargetException());
             }

File: java/client/test/org/openqa/selenium/remote/HttpRequest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.remote;
 
-import com.google.common.base.Throwables;
-
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
@@ -62,7 +60,7 @@ private void execute(HttpUriRequest method) {
         httpClientFactory.close();
       }
     } catch (IOException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
   }
 

File: java/client/test/org/openqa/selenium/testing/ParallelSuite.java
Patch:
@@ -28,7 +28,6 @@
 import org.junit.runners.model.RunnerBuilder;
 
 import com.google.common.base.Preconditions;
-import com.google.common.base.Throwables;
 
 public class ParallelSuite extends Suite {
   public static final String PARALLELIZATION_ENV_VAR_NAME = "PARALLEL_DRIVER_COUNT";
@@ -61,7 +60,7 @@ public void run() {
     try {
       threadPool.shutdownAndWait();
     } catch (InterruptedException e) {
-      Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
   }
 

File: java/client/test/org/openqa/selenium/testing/drivers/DefaultDriverSupplier.java
Patch:
@@ -60,11 +60,11 @@ public WebDriver get() {
       return driverClass.getConstructor(Capabilities.class, Capabilities.class).
           newInstance(desiredCapabilities, requiredCapabilities);
     } catch (InstantiationException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     } catch (IllegalAccessException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     } catch (NoSuchMethodException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     } catch (InvocationTargetException e) {
       throw Throwables.propagate(e.getTargetException());
     }

File: java/client/test/org/openqa/selenium/testing/drivers/ReflectionBackedDriverSupplier.java
Patch:
@@ -138,7 +138,7 @@ private Class<? extends WebDriver> mapToClass(Capabilities caps) {
     try {
       return Class.forName(className).asSubclass(WebDriver.class);
     } catch (ClassNotFoundException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
   }
 

File: java/client/test/org/openqa/selenium/testing/drivers/SauceDriver.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Strings;
-import com.google.common.base.Throwables;
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.OutputType;
@@ -93,9 +92,8 @@ private static URL getSauceEndpoint() {
     try {
       return new URL(String.format("http://%s:%s@%s/wd/hub", sauceUsername, sauceKey, sauceUrl));
     } catch (MalformedURLException e) {
-      Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
-    throw new IllegalStateException("Should have returned or thrown");
   }
 
   private static Capabilities munge(Capabilities desiredCapabilities, String seleniumVersion, String browserVersion, Platform platform) {

File: java/client/test/org/openqa/selenium/testing/drivers/SynthesizedFirefoxDriver.java
Patch:
@@ -89,7 +89,7 @@ private static FirefoxProfile createTemporaryProfile() {
         try {
           Firebug.addTo(profile);
         } catch (IOException e) {
-          throw Throwables.propagate(e);
+          throw new RuntimeException(e);
         }
       }
 

File: java/client/test/org/openqa/selenium/testing/drivers/TestChromeDriver.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.testing.drivers;
 
-import com.google.common.base.Throwables;
-
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.OutputType;
 import org.openqa.selenium.chrome.ChromeDriverService;
@@ -53,7 +51,7 @@ private static URL getServiceUrl() {
       try {
         service.start();
       } catch (IOException e) {
-        throw Throwables.propagate(e);
+        throw new RuntimeException(e);
       }
 
       // Fugly.

File: java/client/test/org/openqa/selenium/testing/drivers/TestOperaBlinkDriver.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.testing.drivers;
 
-import com.google.common.base.Throwables;
-
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.OutputType;
 import org.openqa.selenium.opera.OperaDriverService;
@@ -53,7 +51,7 @@ private static URL getServiceUrl() {
       try {
         service.start();
       } catch (IOException e) {
-        throw Throwables.propagate(e);
+        throw new RuntimeException(e);
       }
 
       // Fugly.

File: java/client/test/org/openqa/selenium/testing/drivers/WebDriverBuilder.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.testing.drivers;
 
 import com.google.common.base.Supplier;
-import com.google.common.base.Throwables;
 import com.google.common.collect.Lists;
 
 import org.openqa.selenium.Capabilities;
@@ -74,9 +73,9 @@ private void modifyLogLevel(WebDriver driver) {
     } catch (NoSuchMethodException e) {
       return;
     } catch (InvocationTargetException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     } catch (IllegalAccessException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
   }
 

File: java/server/src/org/openqa/selenium/server/browserlaunchers/DrivenSeleniumLauncher.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.server.browserlaunchers;
 
 import com.google.common.annotations.VisibleForTesting;
-import com.google.common.base.Throwables;
 
 import com.thoughtworks.selenium.CommandProcessor;
 import com.thoughtworks.selenium.SeleniumException;
@@ -116,7 +115,7 @@ public void close() {
       try {
         serverThread.join();
       } catch (InterruptedException e) {
-        Throwables.propagate(e);
+        throw new RuntimeException(e);
       }
     }
   }

File: java/server/src/org/openqa/selenium/server/browserlaunchers/InternetExplorerCustomProxyLauncher.java
Patch:
@@ -16,8 +16,6 @@
 // under the License.
 package org.openqa.selenium.server.browserlaunchers;
 
-import com.google.common.base.Throwables;
-
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.browserlaunchers.locators.BrowserInstallation;
 import org.openqa.selenium.browserlaunchers.locators.InternetExplorerLocator;
@@ -69,7 +67,7 @@ public void launch(String url) {
     try {
       setupSystem(url);
     } catch (IOException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
     log.info("Launching Internet Explorer...");
 

File: java/server/src/org/openqa/selenium/server/browserlaunchers/ServerHttpChannel.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.server.browserlaunchers;
 
 import com.google.common.base.Charsets;
-import com.google.common.base.Throwables;
 import com.google.common.collect.Maps;
 import com.google.common.io.ByteStreams;
 import com.google.gson.JsonElement;
@@ -77,7 +76,7 @@ public void run() {
       // And fall out the bottom of the run method. Don't clean up, just in
       // case.
     } catch (IOException e) {
-      Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
   }
 

File: java/server/test/org/openqa/selenium/server/SeleniumServerProxyTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.net.PortProber.pollPort;
 
-import com.google.common.base.Throwables;
 import com.google.common.io.ByteStreams;
 
 import org.junit.AfterClass;
@@ -87,7 +86,7 @@ private String getResponseAsString(URLConnection client) {
       byte[] bytes = ByteStreams.toByteArray(client.getInputStream());
       return new String(bytes);
     } catch (IOException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
   }
 }

File: java/server/test/org/openqa/selenium/server/browserlaunchers/LauncherUtilsUnitTest.java
Patch:
@@ -18,7 +18,6 @@
 
 package org.openqa.selenium.server.browserlaunchers;
 
-import com.google.common.base.Throwables;
 import com.google.common.io.Files;
 
 import org.junit.Test;
@@ -446,7 +445,7 @@ private String getFileContent(String path) {
     try {
       return Files.toString(new File(path), Charset.defaultCharset());
     } catch (IOException e) {
-      throw Throwables.propagate(e);
+      throw new RuntimeException(e);
     }
   }
 }

File: java/server/test/org/openqa/grid/common/RegistrationRequestTest.java
Patch:
@@ -125,7 +125,9 @@ public void registerParam() {
 
 
     config = new GridNodeConfiguration();
-    new JCommander(config, "-role", "wd", "-hubHost", "ABC", "-hubPort", "1234","-host","localhost","-register","false");
+    // TODO allow one to set a boolean command line arg to false explicitly
+    new JCommander(config, "-role", "wd", "-hubHost", "ABC", "-hubPort", "1234","-host","localhost"/*,"-register","false"*/);
+    config.register = false;
     RegistrationRequest req2 = RegistrationRequest.build(config);
     assertEquals(false, req2.getConfiguration().register);
 

File: java/server/test/org/openqa/grid/e2e/node/BrowserTimeOutTest.java
Patch:
@@ -51,7 +51,7 @@ public static void setup() throws Exception {
     gridHubConfiguration.port = PortProber.findFreePort();
     gridHubConfiguration.host = "localhost";
 
-    gridHubConfiguration.browserTimeout = 10000;
+    gridHubConfiguration.browserTimeout = 5;
     gridHubConfiguration.servlets = Arrays.asList("org.openqa.grid.e2e.node.SlowServlet");
     hub = GridTestHelper.getHub(gridHubConfiguration);
 

File: java/server/test/org/openqa/grid/e2e/node/SmokeTest.java
Patch:
@@ -76,8 +76,8 @@ public void firefoxOnWebDriver() throws MalformedURLException {
     try {
       DesiredCapabilities caps = GridTestHelper.getDefaultBrowserCapability();
       driver = new RemoteWebDriver(new URL(hub.getUrl() + "/wd/hub"), caps);
-      driver.get(hub.getUrl() + "/grid/old/console");
-      assertEquals(driver.getTitle(), "Grid overview");
+      driver.get(hub.getUrl() + "/grid/console");
+      assertEquals(driver.getTitle(), "Grid Console");
     } finally {
       if (driver != null) {
         driver.quit();

File: java/server/test/org/openqa/grid/e2e/node/NodeTimeOutTest.java
Patch:
@@ -62,7 +62,7 @@ public static void setup() throws Exception {
     node = GridTestHelper.getRemoteWithoutCapabilities(hub.getUrl(), GridRole.NODE);
     node.addBrowser(GridTestHelper.getSelenium1FirefoxCapability(), 1);
     node.addBrowser(GridTestHelper.getDefaultBrowserCapability(), 1);
-    node.setTimeout(5000, 2000);
+    node.setTimeout(1, 100);
     node.setRemoteServer(new SeleniumServer(node.getConfiguration()));
     node.startRemoteServer();
     node.sendRegistrationRequest();
@@ -76,7 +76,7 @@ public void webDriverTimesOut() throws InterruptedException, MalformedURLExcepti
     DesiredCapabilities caps = GridTestHelper.getDefaultBrowserCapability();
     WebDriver driver = new RemoteWebDriver(new URL(hub.getUrl() + "/wd/hub"), caps);
     driver.get(url);
-    assertEquals(driver.getTitle(), "Grid overview");
+    assertEquals(driver.getTitle(), "Grid Console");
     wait.until(new Function<Object, Integer>() {
       @Override
       public Integer apply(Object input) {

File: java/server/test/org/openqa/grid/e2e/misc/WebDriverPriorityDemo.java
Patch:
@@ -68,7 +68,7 @@ public static void prepare() throws Exception {
 
     hubURL = hub.getUrl();
     driverURL = new URL(hubURL + "/grid/driver");
-    consoleURL = new URL(hubURL + "/grid/old/console");
+    consoleURL = new URL(hubURL + "/grid/console");
 
     // assigning a priority rule where requests with the flag "important" go first.
     registry.getConfiguration().prioritizer = new Prioritizer() {
@@ -209,7 +209,7 @@ public void test5ValidateStateAndPickTheImportantOne() throws InterruptedExcepti
   // simple helper
   static private void visitHubConsole(WebDriver driver) {
     driver.get(consoleURL.toString());
-    assertEquals(driver.getTitle(), "Grid overview");
+    assertEquals(driver.getTitle(), "Grid Console");
   }
 
   @AfterClass

File: java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java
Patch:
@@ -80,6 +80,8 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
     GridNodeConfiguration nodeConfig = new GridNodeConfiguration();
     nodeConfig.merge(hubConfig);
     nodeConfig.merge(server.getConfiguration());
+    nodeConfig.host = server.getConfiguration().host;
+    nodeConfig.port = server.getConfiguration().port;
     server.setConfiguration(nodeConfig);
 
     final RemoteProxy proxy = BaseRemoteProxy.getNewInstance(server, getRegistry());

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -138,7 +138,7 @@ public static RegistrationRequest getNewInstance(String json) throws JsonSyntaxE
     JsonObject config = o.get("configuration").getAsJsonObject();
     GridNodeConfiguration
       configuration =
-      new JsonToBeanConverter().convert(GridNodeConfiguration.class, config);
+      new Gson().fromJson(config, GridNodeConfiguration.class);
     request.setConfiguration(configuration);
 
     if (o.has("id")) {

File: java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java
Patch:
@@ -110,6 +110,8 @@ public BaseRemoteProxy(RegistrationRequest request, Registry registry) {
     this.config.merge(registry.getConfiguration());
     this.config.host = request.getConfiguration().host;
     this.config.port = request.getConfiguration().port;
+    // custom configurations from the remote need to 'override' the hub
+    this.config.custom.putAll(request.getConfiguration().custom);
 
     String url = config.getRemoteHost();
     String id = config.id;

File: java/server/src/org/openqa/grid/internal/utils/configuration/GridNodeConfiguration.java
Patch:
@@ -173,6 +173,9 @@ public void merge(GridNodeConfiguration other) {
     if (other.downPollingLimit != null) {
       downPollingLimit = other.downPollingLimit;
     }
+    if (other.hub != null) {
+      hub = other.hub;
+    }
     if (other.hubHost != null) {
       hubHost = other.hubHost;
     }

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -83,7 +83,7 @@ public void setConfiguration(StandaloneConfiguration configuration) {
   }
 
   public void boot() {
-    if (configuration.jettyThreads > 0) {
+    if (configuration.jettyThreads != null && configuration.jettyThreads > 0) {
       server = new Server(new QueuedThreadPool(configuration.jettyThreads));
     } else {
       server = new Server();

File: java/server/src/org/openqa/selenium/remote/server/SeleniumServer.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.openqa.grid.internal.utils.configuration.StandaloneConfiguration;
 import org.openqa.grid.shared.GridNodeServer;
-import org.openqa.jetty.http.SocketListener;
 import org.openqa.selenium.remote.SessionId;
 import org.openqa.selenium.remote.server.handler.DeleteSession;
 import org.seleniumhq.jetty9.server.Connector;
@@ -62,7 +61,7 @@ public int getRealPort() {
       ServerConnector socket = (ServerConnector)server.getConnectors()[0];
       return socket.getPort();
     }
-    return this.port;
+    return configuration.port;
   }
 
 

File: java/client/src/org/openqa/selenium/remote/CapabilityType.java
Patch:
@@ -35,6 +35,7 @@ public interface CapabilityType {
   String PROXY = "proxy";
   String SUPPORTS_WEB_STORAGE = "webStorageEnabled";
   String ROTATABLE = "rotatable";
+  String APPLICATION_NAME = "applicationName";
   // Enable this capability to accept all SSL certs by defaults.
   String ACCEPT_SSL_CERTS = "acceptSslCerts";
   String HAS_NATIVE_EVENTS = "nativeEvents";

File: java/client/test/org/openqa/selenium/testing/drivers/ReflectionBackedDriverSupplier.java
Patch:
@@ -60,7 +60,7 @@ public WebDriver get() {
       }
 
       if (DesiredCapabilities.firefox().getBrowserName().equals(desiredCapsToUse.getBrowserName())) {
-        boolean isMarionette = Boolean.getBoolean("webdriver.firefox.marionette");
+        boolean isMarionette = Boolean.getBoolean(FirefoxDriver.SystemProperty.DRIVER_USE_MARIONETTE);
         if (!isMarionette) {
           if (isInDevMode()) {
             copyFirefoxDriverDefaultsToOutputDir();

File: java/server/src/org/openqa/grid/internal/RemoteProxy.java
Patch:
@@ -23,6 +23,7 @@
 import org.openqa.grid.common.exception.GridException;
 import org.openqa.grid.internal.utils.CapabilityMatcher;
 import org.openqa.grid.internal.utils.HtmlRenderer;
+import org.openqa.grid.internal.utils.configuration.GridNodeConfiguration;
 import org.openqa.selenium.remote.internal.HttpClientFactory;
 
 import java.net.URL;
@@ -86,7 +87,7 @@ public interface RemoteProxy extends Comparable<RemoteProxy> {
    *
    * @return the node configuration.
    */
-  Map<String, Object> getConfig();
+  GridNodeConfiguration getConfig();
 
   /**
    * Returns the request sent from the node to the hub to register the proxy.

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -195,7 +195,7 @@ public String toString() {
 
   private HttpClient getClient() {
     Registry reg = slot.getProxy().getRegistry();
-    int browserTimeout = reg.getConfiguration().getBrowserTimeout();
+    int browserTimeout = reg.getConfiguration().browserTimeout;
     if (browserTimeout > 0){
       final int selenium_server_cleanup_cycle = browserTimeout / 10;
       browserTimeout += (selenium_server_cleanup_cycle + MAX_NETWORK_LATENCY);
@@ -495,8 +495,7 @@ private void processResponseHeaders(HttpServletRequest request, HttpServletRespo
         String wrongPath = returnedLocation.getPath();
         String correctPath = wrongPath.replace(driverPath, "");
         Hub hub = slot.getProxy().getRegistry().getHub();
-        String location = "http://" + hub.getHost() + ":" + hub.getPort() + pathSpec + correctPath;
-        response.setHeader(name, location);
+        response.setHeader(name, hub.getUrl(pathSpec + correctPath).toString());
       } else {
         response.setHeader(name, value);
       }

File: java/server/src/org/openqa/grid/internal/TestSlot.java
Patch:
@@ -22,8 +22,7 @@
 import org.openqa.grid.common.exception.GridException;
 import org.openqa.grid.internal.listeners.TestSessionListener;
 import org.openqa.grid.internal.utils.CapabilityMatcher;
-import org.openqa.grid.internal.utils.GridHubConfiguration;
-import org.openqa.selenium.remote.server.SystemClock;
+import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
 
 import java.net.MalformedURLException;
 import java.net.URL;

File: java/server/src/org/openqa/grid/internal/utils/CapabilityMatcher.java
Patch:
@@ -17,13 +17,15 @@
 
 package org.openqa.grid.internal.utils;
 
+import org.openqa.grid.internal.utils.configuration.GridHubConfiguration;
+
 import java.util.Map;
 
 /**
  * Used to find out if a capabilities requested by the client matches something on the remote and
  * should be forwarded by the grid.
  *
- * {@link GridHubConfiguration#setCapabilityMatcher(CapabilityMatcher)}
+ * {@link GridHubConfiguration#capabilityMatcher}
  */
 public interface CapabilityMatcher {
   public boolean matches(Map<String, Object> currentCapability,

File: java/server/src/org/openqa/grid/internal/utils/DefaultCapabilityMatcher.java
Patch:
@@ -42,7 +42,7 @@ public DefaultCapabilityMatcher() {
     toConsider.add(CapabilityType.PLATFORM);
     toConsider.add(CapabilityType.BROWSER_NAME);
     toConsider.add(CapabilityType.VERSION);
-    toConsider.add("applicationName");
+    toConsider.add(CapabilityType.APPLICATION_NAME);
 
   }
 

File: java/server/src/org/openqa/grid/web/servlet/DisplayHelpServlet.java
Patch:
@@ -32,7 +32,7 @@
 
 public class DisplayHelpServlet extends HttpServlet {
   private static final long serialVersionUID = 8484071790930378855L;
-  private static final Logger log = Logger.getLogger(ConsoleServlet.class.getName());
+  private static final Logger log = Logger.getLogger(DisplayHelpServlet.class.getName());
   private static String coreVersion;
   private static String coreRevision;
 

File: java/server/src/org/openqa/selenium/remote/server/SessionCleaner.java
Patch:
@@ -58,6 +58,8 @@ class SessionCleaner extends Thread {   // Thread safety reviewed
     long lowestNonZero = Math.min((insideBrowserTimeout > 0) ? insideBrowserTimeout : clientGoneTimeout,
                                   clientGoneTimeout > 0 ? clientGoneTimeout : insideBrowserTimeout);
     this.sleepInterval = lowestNonZero / 10;
+
+    log.info(String.format("SessionCleaner initialized with insideBrowserTimeout %d and clientGoneTimeout %d polling every %d", this.insideBrowserTimeout, this.clientGoneTimeout, sleepInterval));
   }
 
 

File: java/server/test/org/openqa/grid/e2e/misc/GridDistributionTest.java
Patch:
@@ -32,7 +32,7 @@
 import org.openqa.grid.web.Hub;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.remote.DesiredCapabilities;
-import org.openqa.selenium.server.SeleniumServer;
+import org.openqa.selenium.remote.server.SeleniumServer;
 
 import java.util.ArrayList;
 import java.util.HashSet;

File: java/server/test/org/openqa/grid/e2e/misc/GridSerializeExceptionTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.openqa.grid.internal.utils.SelfRegisteringRemote;
 import org.openqa.grid.web.Hub;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.server.SeleniumServer;
+import org.openqa.selenium.remote.server.SeleniumServer;
 
 public class GridSerializeExceptionTest {
 

File: java/server/test/org/openqa/grid/e2e/misc/Issue1586.java
Patch:
@@ -29,7 +29,7 @@
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.remote.RemoteWebDriver;
-import org.openqa.selenium.server.SeleniumServer;
+import org.openqa.selenium.remote.server.SeleniumServer;
 
 import java.net.MalformedURLException;
 import java.net.URL;

File: java/server/test/org/openqa/grid/e2e/misc/WebDriverPriorityDemo.java
Patch:
@@ -32,7 +32,7 @@
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.RemoteWebDriver;
-import org.openqa.selenium.server.SeleniumServer;
+import org.openqa.selenium.remote.server.SeleniumServer;
 
 import java.net.URL;
 import java.util.Map;
@@ -71,7 +71,7 @@ public static void prepare() throws Exception {
     consoleURL = new URL(hubURL + "/grid/old/console");
 
     // assigning a priority rule where requests with the flag "important" go first.
-    registry.setPrioritizer(new Prioritizer() {
+    registry.getConfiguration().prioritizer = new Prioritizer() {
       public int compareTo(Map<String, Object> a, Map<String, Object> b) {
         boolean aImportant =
             a.get("_important") == null ? false : Boolean.parseBoolean(a.get("_important")
@@ -88,7 +88,7 @@ public int compareTo(Map<String, Object> a, Map<String, Object> b) {
           return 1;
         }
       }
-    });
+    };
 
     // initialize node
 

File: java/server/test/org/openqa/grid/e2e/node/CrashWhenStartingBrowserTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.openqa.selenium.firefox.FirefoxDriver;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.RemoteWebDriver;
-import org.openqa.selenium.server.SeleniumServer;
+import org.openqa.selenium.remote.server.SeleniumServer;
 import org.openqa.selenium.support.ui.FluentWait;
 import org.openqa.selenium.support.ui.Wait;
 

File: java/server/test/org/openqa/grid/e2e/node/DefaultProxyFindsFirefoxLocationsTest.java
Patch:
@@ -40,7 +40,7 @@
 import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
-import org.openqa.selenium.server.SeleniumServer;
+import org.openqa.selenium.remote.server.SeleniumServer;
 
 import java.io.IOException;
 import java.net.MalformedURLException;

File: java/server/test/org/openqa/grid/internal/AddingProxyAgainFreesResources.java
Patch:
@@ -19,13 +19,13 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.openqa.grid.common.RegistrationRequest.APP;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.openqa.grid.internal.mock.GridHelper;
 import org.openqa.grid.web.servlet.handler.RequestHandler;
+import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -52,9 +52,9 @@ public class AddingProxyAgainFreesResources {
    * @throws InterruptedException
    */
   @BeforeClass
-  public static void setup() throws InterruptedException {
+  public static void setup() throws Exception {
     registry = Registry.newInstance();
-    ff.put(APP, "FF");
+    ff.put(CapabilityType.APPLICATION_NAME, "FF");
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);
     registry.add(p1);
 

File: java/server/test/org/openqa/grid/internal/GridInternalTests.java
Patch:
@@ -19,7 +19,6 @@
 
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
-import org.openqa.grid.internal.configuration.Grid1ConfigurationLoaderTest;
 import org.openqa.grid.internal.listener.RegistrationListenerTest;
 import org.openqa.grid.internal.listener.SessionListenerTest;
 import org.openqa.grid.internal.utils.DefaultCapabilityMatcherTest;
@@ -39,14 +38,12 @@
     PriorityTest.class,
     ParallelTest.class,
     LoadBalancedTests.class,
-    DefaultToFIFOPriorityTest.class,
     ConcurrencyLockTest.class,
     AddingProxyAgainFreesResources.class,
     DefaultCapabilityMatcherTest.class,
     SessionListenerTest.class,
     RegistrationListenerTest.class,
     StatusServletTests.class,
-    Grid1ConfigurationLoaderTest.class,
     UserDefinedCapabilityMatcherTests.class,
     GridShutdownTest.class,
     SelfRegisteringRemoteTest.class

File: java/server/test/org/openqa/grid/internal/GridShutdownTest.java
Patch:
@@ -20,13 +20,13 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
-import static org.openqa.grid.common.RegistrationRequest.APP;
 import static org.openqa.grid.common.RegistrationRequest.MAX_INSTANCES;
 
 import org.junit.Test;
 import org.openqa.grid.internal.mock.GridHelper;
 import org.openqa.grid.internal.mock.MockedRequestHandler;
 import org.openqa.grid.web.servlet.handler.RequestHandler;
+import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -37,10 +37,10 @@
 public class GridShutdownTest {
 
   @Test(timeout = 5000)
-  public void shutdown() throws InterruptedException {
+  public void shutdown() throws Exception {
 
     final Map<String, Object> ff = new HashMap<>();
-    ff.put(APP, "FF");
+    ff.put(CapabilityType.APPLICATION_NAME, "FF");
     ff.put(MAX_INSTANCES, 1);
 
     final Registry registry = Registry.newInstance();

File: java/server/test/org/openqa/grid/internal/NewRequestCrashesDuringNewSessionTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
-import static org.openqa.grid.common.RegistrationRequest.APP;
 
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
@@ -28,6 +27,7 @@
 import org.openqa.grid.internal.mock.GridHelper;
 import org.openqa.grid.internal.mock.MockedRequestHandler;
 import org.openqa.grid.web.servlet.handler.SeleniumBasedRequest;
+import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -44,9 +44,9 @@ public class NewRequestCrashesDuringNewSessionTest {
    * create a hub with 1 IE and 1 FF
    */
   @BeforeClass
-  public static void setup() {
+  public static void setup() throws Exception {
     registry = Registry.newInstance();
-    ff.put(APP, "FF");
+    ff.put(CapabilityType.APPLICATION_NAME, "FF");
 
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);
     registry.add(p1);

File: java/server/test/org/openqa/grid/internal/TestSessionTest.java
Patch:
@@ -19,10 +19,10 @@
 
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
-import static org.openqa.grid.common.RegistrationRequest.APP;
 
 import org.junit.Test;
 import org.openqa.grid.common.SeleniumProtocol;
+import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -35,7 +35,7 @@ public void testIsOrphanedSe1() throws Exception {
     Registry registry = Registry.newInstance();
     try {
       Map<String, Object> ff = new HashMap<>();
-      ff.put(APP, "FF");
+      ff.put(CapabilityType.APPLICATION_NAME, "FF");
       RemoteProxy p1 =
           RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);
       registry.add(p1);
@@ -60,7 +60,7 @@ public void testIsOrphanedWebDriver() throws Exception {
     Registry registry = Registry.newInstance();
     try {
       Map<String, Object> ff = new HashMap<>();
-      ff.put(APP, "FF");
+      ff.put(CapabilityType.APPLICATION_NAME, "FF");
       RemoteProxy p1 =
           RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);
       registry.add(p1);

File: java/server/test/org/openqa/grid/plugin/MyRemoteProxy.java
Patch:
@@ -28,8 +28,8 @@ public class MyRemoteProxy extends BaseRemoteProxy {
 
   public MyRemoteProxy(RegistrationRequest request, Registry registry) {
     super(request, registry);
-    custom1 = request.getConfiguration().get("Custom1").toString();
-    custom2 = request.getConfiguration().get("Custom2").toString();
+    custom1 = request.getConfiguration().custom.get("Custom1");
+    custom2 = request.getConfiguration().custom.get("Custom2");
   }
 
   public String getCustom1() {

File: java/server/src/org/openqa/grid/shared/GridNodeServer.java
Patch:
@@ -20,4 +20,5 @@
 public interface GridNodeServer {
   void boot() throws Exception;
   void stop();
+  int getRealPort();
 }

File: java/server/test/org/openqa/grid/internal/GridInternalTests.java
Patch:
@@ -23,6 +23,7 @@
 import org.openqa.grid.internal.listener.RegistrationListenerTest;
 import org.openqa.grid.internal.listener.SessionListenerTest;
 import org.openqa.grid.internal.utils.DefaultCapabilityMatcherTest;
+import org.openqa.grid.internal.utils.SelfRegisteringRemoteTest;
 import org.openqa.grid.plugin.RemoteProxyInheritanceTest;
 
 @RunWith(Suite.class)
@@ -47,7 +48,8 @@
     StatusServletTests.class,
     Grid1ConfigurationLoaderTest.class,
     UserDefinedCapabilityMatcherTests.class,
-    GridShutdownTest.class
+    GridShutdownTest.class,
+    SelfRegisteringRemoteTest.class
 })
 public class GridInternalTests {
 }

File: java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java
Patch:
@@ -92,7 +92,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
     builder.append("<html>");
     builder.append("<head>");
     builder
-        .append("<script src='http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js'></script>");
+        .append("<script src='//ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js'></script>");
 
     builder.append("<script src='/grid/resources/org/openqa/grid/images/console-beta.js'></script>");
 

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -125,6 +125,7 @@ public class ErrorCodes {
         builder.put(pair.getValue(), pair.getKey());
       }
     }
+    builder.put("invalid session id", NO_SUCH_SESSION); // for W3C compatibility
     stateToStatus = builder.build();
   }
 

File: java/client/src/org/openqa/selenium/support/ui/FluentWait.java
Patch:
@@ -244,7 +244,7 @@ public <V> V until(Function<? super T, V> isTrue) {
           return value;
         }
       } catch (Throwable e) {
-        lastException = propagateIfNotIngored(e);
+        lastException = propagateIfNotIgnored(e);
       }
 
       // Check the timeout after evaluating the function to ensure conditions
@@ -270,7 +270,7 @@ public <V> V until(Function<? super T, V> isTrue) {
     }
   }
 
-  private Throwable propagateIfNotIngored(Throwable e) {
+  private Throwable propagateIfNotIgnored(Throwable e) {
     for (Class<? extends Throwable> ignoredException : ignoredExceptions) {
       if (ignoredException.isInstance(e)) {
         return e;

File: java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java
Patch:
@@ -495,7 +495,9 @@ public void forward() {
     }
 
     public void refresh() {
+      dispatcher.beforeNavigateRefresh(driver);
       navigation.refresh();
+      dispatcher.afterNavigateRefresh(driver);
     }
   }
 

File: java/client/test/org/openqa/selenium/environment/webserver/AppServerTest.java
Patch:
@@ -60,7 +60,7 @@ public static void startDriver() throws Throwable {
 
   @Before
   public void startServer() throws Throwable {
-    server = new WebbitAppServer();
+    server = new JettyAppServer();
     server.start();
   }
 

File: java/client/test/org/openqa/selenium/support/LargeTests.java
Patch:
@@ -20,13 +20,15 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.openqa.selenium.support.pagefactory.UsingPageFactoryTest;
+import org.openqa.selenium.support.ui.SelectElementTest;
 import org.openqa.selenium.support.ui.SelectLargeTest;
 import org.openqa.selenium.testing.JUnit4TestBase;
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     SelectLargeTest.class,
-    UsingPageFactoryTest.class
+    UsingPageFactoryTest.class,
+    SelectElementTest.class
 })
 public class LargeTests {
 

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -1592,6 +1592,7 @@ public org.openqa.selenium.Cookie apply(com.gargoylesoftware.htmlunit.util.Cooki
                 .path(c.getPath())
                 .expiresOn(c.getExpires())
                 .isSecure(c.isSecure())
+                .isHttpOnly(c.isHttpOnly())
                 .build();
           }
         };

File: java/client/test/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -436,7 +436,7 @@ public void canHandleHttpOnlyCookie() {
     assertNotNull(retrieved);
   }
 
-  @Ignore(SAFARI)
+  @Ignore({CHROME, SAFARI})
   @Test
   public void testRetainsHttpOnlyFlag() {
     Cookie addedCookie =

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -147,6 +147,9 @@ public Response execute(Command command) throws IOException {
         String sessionId = HttpSessionId.getSessionId(httpResponse.getTargetHost());
         response.setSessionId(sessionId);
       }
+      if (QUIT.equals(command.getName())) {
+    	  client.close();
+      }
       return response;
     } catch (UnsupportedCommandException e) {
       if (e.getMessage() == null || "".equals(e.getMessage())) {

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -51,11 +51,8 @@
 @Ignore({PHANTOMJS, SAFARI})
 public class AlertsTest extends JUnit4TestBase {
 
-  private WebDriverWait wait;
-
   @Before
   public void setUp() throws Exception {
-    wait = new WebDriverWait(driver, 5);
     driver.get(pages.alertsPage);
   }
 

File: java/client/src/org/openqa/selenium/support/PageFactory.java
Patch:
@@ -81,7 +81,7 @@ public static void initElements(WebDriver driver, Object page) {
 
   /**
    * Similar to the other "initElements" methods, but takes an {@link ElementLocatorFactory} which
-   * is used for providing the mechanism for fniding elements. If the ElementLocatorFactory returns
+   * is used for providing the mechanism for finding elements. If the ElementLocatorFactory returns
    * null then the field won't be decorated.
    *
    * @param factory The factory to use

File: java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java
Patch:
@@ -63,7 +63,7 @@ public SelfRegisteringRemote(RegistrationRequest config) {
     try {
       JsonObject hubParameters = getHubConfiguration();
       if (hubParameters.has(RegistrationRequest.TIME_OUT)){
-        int timeout = hubParameters.get(RegistrationRequest.TIME_OUT).getAsInt() / 1000;
+        int timeout = hubParameters.get(RegistrationRequest.TIME_OUT).getAsInt();
         nodeConfig.getConfiguration().put(RegistrationRequest.TIME_OUT, timeout);
       }
       if (hubParameters.has(RegistrationRequest.BROWSER_TIME_OUT)) {

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -253,6 +253,7 @@ public static String toState(Integer status) {
   }
 
   public static int toStatus(String state) {
-    return stateToStatus.get(state);
+    Integer status = stateToStatus.get(state);
+    return status != null ? status : UNHANDLED_ERROR;
   }
 }

File: java/client/src/org/openqa/selenium/os/UnixProcess.java
Patch:
@@ -31,9 +31,9 @@
 import org.apache.commons.exec.Executor;
 import org.apache.commons.exec.PumpStreamHandler;
 import org.openqa.selenium.WebDriverException;
+import org.openqa.selenium.io.CircularOutputStream;
 
 import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
@@ -46,7 +46,7 @@
 class UnixProcess implements OsProcess {
   private static final Logger log = Logger.getLogger(UnixProcess.class.getName());
 
-  private final ByteArrayOutputStream inputOut = new ByteArrayOutputStream();
+  private final CircularOutputStream inputOut = new CircularOutputStream(null);
   private volatile String allInput;
   private final DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();
   private final Executor executor = new DaemonExecutor();
@@ -178,7 +178,7 @@ public String getStdOut() {
       throw new IllegalStateException(
           "Cannot get output before executing command line: " + cl);
     }
-    return new String(inputOut.toByteArray());
+    return inputOut.toString();
   }
 
   public void setInput(String allInput) {

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -695,7 +695,7 @@ public void canSafelyTypeOnElementThatIsRemovedFromTheDomOnKeyPress() {
   }
 
   @Test
-  @NotYetImplemented({CHROME})
+  @NotYetImplemented({CHROME, HTMLUNIT})
   public void canClearNumberInputAfterTypingInvalidInput() {
     driver.get(pages.formPage);
     WebElement input = driver.findElement(By.id("age"));

File: java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java
Patch:
@@ -144,7 +144,7 @@ public BaseRemoteProxy(RegistrationRequest request, Registry registry) {
 
     maxConcurrentSession = getConfigInteger(RegistrationRequest.MAX_SESSION);
     cleanUpCycle = getConfigInteger(RegistrationRequest.CLEAN_UP_CYCLE);
-    timeOutMs = getConfigInteger(RegistrationRequest.TIME_OUT);
+    timeOutMs = getConfigInteger(RegistrationRequest.TIME_OUT) * 1000;
     statusCheckTimeout = getConfigInteger(RegistrationRequest.STATUS_CHECK_TIMEOUT);
 
     List<DesiredCapabilities> capabilities = request.getCapabilities();

File: java/server/src/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -1022,6 +1022,8 @@ public static RemoteControlConfiguration parseLauncherOptions(String[] args) {
         configuration.setDebugURL(getArg(args, ++i));
       } else if ("-timeout".equalsIgnoreCase(arg)) {
         configuration.setTimeoutInSeconds(Integer.parseInt(getArg(args, ++i)));
+      } else if ("-browserTimeout".equalsIgnoreCase(arg)) {
+        configuration.setBrowserTimeoutInMs(Integer.parseInt(getArg(args, ++i)));
       } else if ("-jettyThreads".equalsIgnoreCase(arg)) {
         int jettyThreadsCount = Integer.parseInt(getArg(args, ++i));
 

File: java/server/src/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -281,6 +281,7 @@ public static void generatePacAndPrefJs(File customProfileDir, int port, String
       // for Firefox 2.0
       out.println("user_pref('browser.startup.homepage', '" + homePage + "');");
       out.println("user_pref('startup.homepage_welcome_url', '');");
+      out.println("user_pref('startup.homepage_welcome_url.additional', '');");
 
       // This handles known RC problems when the startup page is a blank page or when the previous
       // session has been restored
@@ -305,6 +306,7 @@ public static void generatePacAndPrefJs(File customProfileDir, int port, String
 
     //Allow extensions to be installed into the profile and still work
     out.println("user_pref('extensions.autoDisableScopes', 10);");
+    out.println("user_pref('xpinstall.signatures.required', false);");
 
     // Disable "do you want to remember this password?"
     out.println("user_pref('signon.rememberSignons', false);");

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -253,7 +253,7 @@ public void testShouldTreatReadonlyAsAValue() {
 
   @Test
   public void testShouldReturnHiddenTextForTextContentAttribute() {
-    assumeFalse("IE before 9 doesn't handle textContent attribute", TestUtilities.isOldIe(driver));
+    assumeFalse("IE before 9 doesn't handle textContent attribute; IE9 loads page in quirks mode, so no textContent attribute", TestUtilities.getIEVersion(driver) < 10);
 
     driver.get(pages.simpleTestPage);
 

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -229,6 +229,7 @@ public void testShouldReturnTheContentsOfATextAreaAsItsValue() {
 
   @Test
   public void testShouldReturnInnerHtml() {
+    assumeFalse("IE before 10 returns innerHTML with uppercase tag names", TestUtilities.getIEVersion(driver) < 10);
     driver.get(pages.simpleTestPage);
 
     String html = driver.findElement(By.id("wrappingtext")).getAttribute("innerHTML");
@@ -317,9 +318,10 @@ public void testShouldReturnValueOfOnClickAttribute() {
     assertEquals(null, mousedownDiv.getAttribute("onclick"));
   }
 
-  @Ignore(value = {IE}, reason = "IE7 Does not support SVG")
   @Test
   public void testGetAttributeDoesNotReturnAnObjectForSvgProperties() {
+    assumeFalse("IE before 9 doesn't support SVG", TestUtilities.isOldIe(driver));
+
     driver.get(pages.svgPage);
     WebElement svgElement = driver.findElement(By.id("rotate"));
     assertEquals("rotate(30)", svgElement.getAttribute("transform"));

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -232,6 +232,8 @@ public void testShouldReturnWhenGettingAUrlThatDoesNotConnect() {
   }
 
   @Test
+  @Ignore(value = {IE},
+          reason = "IE: change in test web server causes IE to return resource 404 page instead of custom HTML")
   public void testShouldReturnURLOnNotExistedPage() {
     String url = appServer.whereIs("not_existed_page.html");
     driver.get(url);

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -248,7 +248,7 @@ public boolean isMappableError(Throwable thrown) {
     return statusCode != SUCCESS && statusCode != UNHANDLED_ERROR;
   }
 
-  public static String toState(int status) {
+  public static String toState(Integer status) {
     return statusToState.get(status);
   }
 

File: java/client/src/org/openqa/selenium/remote/Response.java
Patch:
@@ -21,7 +21,7 @@ public class Response {
 
   private volatile Object value;
   private volatile String sessionId;
-  private volatile int status;
+  private volatile Integer status;
   private volatile String state;
 
   public Response() {
@@ -31,11 +31,11 @@ public Response(SessionId sessionId) {
     this.sessionId = String.valueOf(sessionId);
   }
 
-  public int getStatus() {
+  public Integer getStatus() {
     return status;
   }
 
-  public void setStatus(int status) {
+  public void setStatus(Integer status) {
     this.status = status;
   }
 

File: java/client/src/org/openqa/selenium/remote/RemoteMouse.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Executes wire commands for mouse interaction.
  */
-class RemoteMouse implements Mouse {
+public class RemoteMouse implements Mouse {
   protected final ExecuteMethod executor;
 
   public RemoteMouse(ExecuteMethod executor) {

File: java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
Patch:
@@ -252,7 +252,7 @@ public static DesiredCapabilities operaBlink() {
   }
 
   public static DesiredCapabilities safari() {
-    return new DesiredCapabilities(BrowserType.SAFARI, "", Platform.ANY);
+    return new DesiredCapabilities(BrowserType.SAFARI, "", Platform.MAC);
   }
 
   public static DesiredCapabilities phantomjs() {

File: java/client/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -232,7 +232,7 @@ public B usingDriverExecutable(File file) {
      * @return A self reference.
      */
     public B usingPort(int port) {
-      checkArgument(port >= 0, "Invalid port number: %d", port);
+      checkArgument(port >= 0, "Invalid port number: %s", port);
       this.port = port;
       return (B) this;
     }

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -713,10 +713,9 @@ public void testShouldBeAbleToTypeOnANumberInputField() {
   @Test
   public void testShouldBeAbleToTypeIntoEmptyContentEditableElement() {
     driver.get(pages.readOnlyPage);
-    WebElement editable = driver.findElement(By.id("content-editable"));
+    WebElement editable = driver.findElement(By.id("content-editable-blank"));
 
-    editable.clear();
-    editable.sendKeys("cheese"); // requires focus on OS X
+    editable.sendKeys("cheese");
 
     assertThat(editable.getText(), equalTo("cheese"));
   }

File: java/client/test/org/openqa/selenium/remote/JsonToBeanConverterTest.java
Patch:
@@ -171,7 +171,7 @@ public void testShouldUseAMapToRepresentComplexObjects() throws Exception {
   @Test
   public void testShouldConvertAResponseWithAnElementInIt() throws Exception {
     String json =
-        "{\"value\":{\"value\":\"\",\"text\":\"\",\"selected\":false,\"enabled\":true,\"id\":\"three\"},\"context\":\"con\",\"sessionId\":\"sess\",\"error\":false}";
+        "{\"value\":{\"value\":\"\",\"text\":\"\",\"selected\":false,\"enabled\":true,\"id\":\"three\"},\"context\":\"con\",\"sessionId\":\"sess\"}";
     Response converted = new JsonToBeanConverter().convert(Response.class, json);
 
     Map<?,?> value = (Map<?,?>) converted.getValue();
@@ -188,7 +188,7 @@ public void testConvertABlankStringAsAStringEvenWhenAskedToReturnAnObject() thro
   @Test
   public void testShouldBeAbleToCopeWithStringsThatLookLikeBooleans() throws Exception {
     String json =
-        "{\"value\":\"false\",\"context\":\"foo\",\"sessionId\":\"1210083863107\",\"error\":false}";
+        "{\"value\":\"false\",\"context\":\"foo\",\"sessionId\":\"1210083863107\"}";
 
     try {
       new JsonToBeanConverter().convert(Response.class, json);
@@ -201,7 +201,7 @@ public void testShouldBeAbleToCopeWithStringsThatLookLikeBooleans() throws Excep
   @Test
   public void testShouldBeAbleToSetAnObjectToABoolean() throws Exception {
     String json =
-        "{\"value\":true,\"context\":\"foo\",\"sessionId\":\"1210084658750\",\"error\":false}";
+        "{\"value\":true,\"context\":\"foo\",\"sessionId\":\"1210084658750\"}";
 
     Response response = new JsonToBeanConverter().convert(Response.class, json);
 

File: java/client/src/org/openqa/selenium/firefox/MarionetteDriver.java
Patch:
@@ -64,11 +64,11 @@ public MarionetteDriver(GeckoDriverService service, Capabilities capabilities) {
   public MarionetteDriver(GeckoDriverService service, Capabilities capabilities,
                                 int port) {
     if (capabilities == null) {
-      capabilities = DesiredCapabilities.internetExplorer();
+      capabilities = DesiredCapabilities.firefox();
     }
 
     if (service == null) {
-      service = setupService(capabilities, port);
+      service = setupService(port);
     }
     run(service, capabilities);
   }
@@ -91,7 +91,7 @@ public void setFileDetector(FileDetector detector) {
       "via RemoteWebDriver");
   }
 
-  private GeckoDriverService setupService(Capabilities caps, int port) {
+  private GeckoDriverService setupService(int port) {
     try {
       GeckoDriverService.Builder builder = new GeckoDriverService.Builder();
       builder.usingPort(port);

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -632,7 +632,7 @@ public void testShouldNotTypeIntoElementsThatPreventKeyDownEvents() {
   }
 
   @JavascriptEnabled
-  @Ignore(value = {PHANTOMJS})
+  @Ignore(value = {PHANTOMJS, MARIONETTE})
   @NotYetImplemented(HTMLUNIT)
   @Test
   public void testGenerateKeyPressEventEvenWhenElementPreventsDefault() {

File: java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedRequest.java
Patch:
@@ -222,17 +222,14 @@ public synchronized void reset() throws IOException {
       throw new RuntimeException("not implemented");
     }
 
-    @Override
     public boolean isFinished() {
       return false;
     }
 
-    @Override
     public boolean isReady() {
       return true;
     }
 
-    @Override
     public void setReadListener(ReadListener readListener) {
       throw new RuntimeException("setReadListener");
     }

File: java/client/test/org/openqa/selenium/environment/webserver/JettyAppServer.java
Patch:
@@ -117,7 +117,7 @@ public JettyAppServer(String hostName) {
     addServlet(defaultContext, "/basicAuth", BasicAuth.class);
     addServlet(defaultContext, "/generated/*", GeneratedJsTestServlet.class);
 
-    addFilter(defaultContext, MultiPartFilter.class, "/upload", DispatcherType.REQUEST);
+    //addFilter(defaultContext, MultiPartFilter.class, "/upload", DispatcherType.REQUEST);
 
     listenOn(getHttpPort());
     listenSecurelyOn(getHttpsPort());

File: java/server/src/org/openqa/selenium/server/InjectionHelper.java
Patch:
@@ -296,8 +296,6 @@ private static int getBOMLength(byte[] buf) {
       // (int) 187
       // (int)(new String(buf)).charAt(2)
       // (int) 191
-      // (new String(buf)).charAt(2)
-      // (char) ¿
       // (int)(new String(buf)).charAt(3)
       // (int) 10
       //

File: java/server/src/cybervillains/ca/CertificateCreator.java
Patch:
@@ -46,6 +46,7 @@ public class CertificateCreator {
    * @throws NoSuchProviderException provider is invalid
    * @throws NoSuchAlgorithmException algorithm exception
    * @throws CertificateException a problem with the certificate
+   * @throws SignatureException signature exception
    * @param keyPair keyPair for the certificate
    * @return a X509 Certificate
    */

File: java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java
Patch:
@@ -103,10 +103,10 @@ public CapabilityMatcher getCapabilityHelper() {
 
 
   /**
-   * Create the proxy from the info sent by the remote. <p/> If maxSession is not specified, default
-   * to 1 = max number of tests running at a given time will be 1. <p/> For each capability,
+   * Create the proxy from the info sent by the remote. <p> If maxSession is not specified, default
+   * to 1 = max number of tests running at a given time will be 1. <p> For each capability,
    * maxInstances is defaulted to 1 if not specified = max number of test of each capability running
-   * at a time will be 1. maxInstances for firefox can be > 1. IE won't support it.
+   * at a time will be 1. maxInstances for firefox can be &gt; 1. IE won't support it.
    *
    * @param request  The request
    * @param registry The registry to use

File: java/server/src/org/openqa/grid/internal/Registry.java
Patch:
@@ -186,6 +186,8 @@ public void removeIfPresent(RemoteProxy proxy) {
 
   /**
    * Releases the test slot, WITHOUT running any listener.
+   * @param testSlot test slot to be released
+   * @param reason reason for termination
    */
   public void forceRelease(TestSlot testSlot, SessionTerminationReason reason) {
     if (testSlot.getSession() == null) {
@@ -378,7 +380,7 @@ public void add(RemoteProxy proxy) {
   /**
    * If throwOnCapabilityNotPresent is set to true, the hub will reject test request for a
    * capability that is not on the grid. No exception will be thrown if the capability is present
-   * but busy. <p/> If set to false, the test will be queued hoping a new proxy will register later
+   * but busy. <p> If set to false, the test will be queued hoping a new proxy will register later
    * offering that capability.
    *
    * @param throwOnCapabilityNotPresent true to throw if capability not present

File: java/server/src/org/openqa/grid/internal/RemoteProxy.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.Map;
 
 /**
- * Proxy to a remote server executing the tests. <p/> The proxy keeps a state of what is happening
+ * Proxy to a remote server executing the tests. <p> The proxy keeps a state of what is happening
  * on the remote server and knows if a new test can be run on the remote server. There are several
  * reasons why a test could not be run on the specified remote server, for instance: if the
  * RemoteProxy decides the remote server has reached the maximum number of concurrent sessions, or
@@ -163,9 +163,9 @@ public interface RemoteProxy extends Comparable<RemoteProxy> {
 
   /**
    * Checks if the node has the capability requested.
-   * <br /><br />
+   * <br>
    * The definition of "has" is defined by {@link CapabilityMatcher#matches(Map, Map)}
-   * <br /><br />
+   * <br>
    * <code>hasCapability = true</code> doesn't mean the test cast start just now, only that the proxy will be
    * able to run a test requiring that capability at some point.
    *

File: java/server/src/org/openqa/grid/internal/TestSlot.java
Patch:
@@ -37,7 +37,7 @@
  * The entity on a proxy that can host a test session. A test slot has only 1 desired capabilities (
  * firefox or chrome for instance, but if a remoteproxy needs to support both, the remoteproxy will
  * need 2 TestSlots ) A TestSlot can host 1 TestSession max at a time.
- * <p/>
+ * <p>
  * The listener ({@link TestSessionListener} attached to the test session of this test slot is
  * thread safe. If 2 threads are trying to execute the before / after session, only 1 will be
  * executed.The other one will be discarded.
@@ -93,7 +93,7 @@ public RemoteProxy getProxy() {
    * Try to get a new session for the test slot for the desired capability. To define if the
    * test slot can host the desired capabilities, {@link CapabilityMatcher#matches(Map, Map)} is
    * invoked.
-   * <p/>
+   * <p>
    * Use {@link GridHubConfiguration#setCapabilityMatcher(CapabilityMatcher)}
    * on the proxy hosting the test slot to modify the definition of match
    *
@@ -164,7 +164,7 @@ public TestSession getSession() {
    * Starts the release process for the TestSlot. Once the release process has started, the clients
    * can't access the test slot any more, but the slot can't be reserved for another test until
    * finishReleaseProcess is called.
-   * <p/>
+   * <p>
    * That gives time to run exactly once the cleanup operation needed using @see
    * {@link TestSessionListener#afterSession(TestSession)}
    *

File: java/server/src/org/openqa/grid/internal/listeners/CommandListener.java
Patch:
@@ -30,7 +30,7 @@ public interface CommandListener {
   /**
    * Executed before the hub forwards the request. reading the content of the request stream will
    * prevent the content from being forwarded.
-   * <p/>
+   * <p>
    * Throwing an exception will prevent the forward to the remote.
    *
    * @param session session
@@ -42,7 +42,7 @@ public void beforeCommand(TestSession session, HttpServletRequest request,
 
   /**
    * Executed just before the forwards returns.
-   * <p/>
+   * <p>
    * Throwing an exception will result in an error for the client.
    *
    * @param session session

File: java/server/src/org/openqa/grid/internal/listeners/RegistrationListener.java
Patch:
@@ -25,8 +25,7 @@ public interface RegistrationListener {
   /**
    * Will be run before the proxy you register is added to the Registry, letting you run the
    * configuration / validation necessary before the proxy becomes accessible to the clients.
-   * <p/>
-   * <p/>
+   * <p>
    * If an exception is thrown, the proxy won't be registered.
    */
   public void beforeRegistration();

File: java/server/src/org/openqa/grid/internal/listeners/TimeoutListener.java
Patch:
@@ -22,10 +22,10 @@ public interface TimeoutListener {
 
   /**
    * Gives a chance to clean the resources on the remote when the session has timed out.
-   * <p/>
+   * <p>
    * Is executed before the session is released to the hub. If an exception is thrown, the slot that
    * was associated with the session is considered corrupted and won't be released for future use.
-   * <p/>
+   * <p>
    * You can check session.getInternalKey before timing out. internalkey==null usually means the
    * initial POST /session hasn't been completed yet.For instance if you use web driver, that means
    * the browser is in the process of being started. During that state, you can't really clean the

File: java/server/src/org/openqa/grid/internal/utils/CapabilityMatcher.java
Patch:
@@ -23,7 +23,7 @@
  * Used to find out if a capabilities requested by the client matches something on the remote and
  * should be forwarded by the grid.
  *
- * @link {@link GridHubConfiguration#setCapabilityMatcher(CapabilityMatcher)}
+ * {@link GridHubConfiguration#setCapabilityMatcher(CapabilityMatcher)}
  */
 public interface CapabilityMatcher {
   public boolean matches(Map<String, Object> currentCapability,

File: java/server/src/org/openqa/grid/internal/utils/DefaultCapabilityMatcher.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * Default (naive) implementation of the capability matcher.
- * <p/>
+ * <p>
  * The default capability matcher will look at all the key from the request do not start with _ and
  * will try to find a node that has at least those capabilities.
  */

File: java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java
Patch:
@@ -180,9 +180,9 @@ public void sendRegistrationRequest() {
 
   /**
    * register the hub following the configuration :
-   * <p/>
+   * <p>
    * - check if the proxy is already registered before sending a reg request.
-   * <p/>
+   * <p>
    * - register again every X ms is specified in the config of the node.
    */
   public void startRegistrationProcess() {

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -46,7 +46,7 @@
 import javax.servlet.Servlet;
 
 /**
- * Jetty server. Main entry point for everything about the grid. <p/> Except for unit tests, this
+ * Jetty server. Main entry point for everything about the grid. <p> Except for unit tests, this
  * should be a singleton.
  */
 public class Hub {

File: java/server/src/org/openqa/grid/web/servlet/beta/WebProxyHtmlRendererBeta.java
Patch:
@@ -196,6 +196,7 @@ private String nodeTabs() {
 
   /**
    * return the platform for the proxy. It should be the same for all slots of the proxy, so checking that.
+   * @param proxy remote proxy
    * @return Either the platform name, "Unknown", "mixed OS", or "not specified".
    */
   public static String getPlatform(RemoteProxy proxy) {

File: java/server/src/org/openqa/grid/web/utils/ExtraServletUtil.java
Patch:
@@ -30,7 +30,7 @@ public class ExtraServletUtil {
    * instantiated.
    *
    * @param className class name to be created
-   * @return Class object for passed className argument, or <i/null</i> if no
+   * @return Class object for passed className argument, or <i>null</i> if no
    *         matching class name can be found.
    */
   public static Class<? extends Servlet> createServlet(String className) {

File: java/server/src/org/openqa/selenium/server/ApplicationRegistry.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Application Registry. Global object to find common objects and services.
- * <p/>
+ * <p>
  * See http://martinfowler.com/eaaCatalog/registry.html
  */
 public class ApplicationRegistry {

File: java/server/src/org/openqa/selenium/server/ClassPathResource.java
Patch:
@@ -40,6 +40,7 @@ public class ClassPathResource extends Resource {
 
   /**
    * Specifies the classpath path containing the resource
+   * @param path resource location
    */
   public ClassPathResource(String path) {
     this.path = path;

File: java/server/src/org/openqa/selenium/server/CommandQueue.java
Patch:
@@ -167,9 +167,6 @@ protected void doCommandWithoutWaitingForAResponse(String command, String field,
     }
   }
 
-  /**
-   * Get, and remove from the command holder, the next command to run
-   */
   protected String getResult() {
     return resultHolder.getResult();
   }
@@ -252,6 +249,7 @@ protected void handleCommandResultWithoutWaitingForACommand(String commandResult
 
   /**
    * Get, and remove from the command holder, the next command to run
+   * @return next command to run
    */
   protected RemoteCommand getNextCommand() {
     return commandHolder.getCommand();

File: java/server/src/org/openqa/selenium/server/DefaultRemoteCommand.java
Patch:
@@ -155,6 +155,9 @@ public int hashCode() {
 
   /**
    * Factory method to create a RemoteCommand from a wiki-style input string
+   *
+   * @param inputLine wiki-style input string
+   * @return RemoteCommand based on the input
    */
   public static RemoteCommand parse(String inputLine) {
     if (inputLine == null) throw new NullPointerException("inputLine must not be null");

File: java/server/src/org/openqa/selenium/server/FutureFileResource.java
Patch:
@@ -38,16 +38,16 @@
 
 /**
  * Future File Resource.
- * <p/>
+ * <p>
  * DGF This is as per the standard Jetty FileResource, but its constructor is private, so I've
  * copied-and-pasted it rather than extending it. It's just like the regular FileResource, but it
  * always claims its lastModified date is in the future, to prevent caching.
- * <p/>
+ * <p>
  * Handle resources of implied or explicit file type. This class can check for aliasing in the
  * filesystem (eg case insensitivity). By default this is turned on if the platform does not have
  * the "/" path separator, or it can be controlled with the
  * "org.openqa.jetty.util.FileResource.checkAliases" system parameter.
- * <p/>
+ * <p>
  * If alias checking is turned on, then aliased resources are treated as if they do not exist, nor
  * can they be created.
  *

File: java/server/src/org/openqa/selenium/server/RemoteCommandException.java
Patch:
@@ -40,7 +40,7 @@ public RemoteCommandException(String message, String result, Throwable throwable
   }
 
   /**
-   * Get the result of the remote command that caused the exception.
+   * @return the result of the remote command that caused the exception.
    */
   public String getResult() {
     return result;

File: java/server/src/org/openqa/selenium/server/SeleniumCommandTimedOutException.java
Patch:
@@ -21,12 +21,10 @@
  * <p>
  * Thrown to indicate that the remote process failed to respond within a specified timeout.
  * </p>
- * <p/>
  * <p>
  * This typically happens when the browser fails to call us back, but if the driver is using a proxy
  * or a CommandBridge, the remote driver may have failed to give us a new command in time.
  * </p>
- * <p/>
  * <p>
  * When a SeleniumCommandTimedOutException is thrown, we have to assume that the command queue is
  * out-of-sync with the remote process (e.g. browser). When this happens, the browser should be

File: java/server/src/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -76,7 +76,7 @@
 
 /**
  * A Jetty handler that takes care of remote Selenium requests.
- * <p/>
+ * <p>
  * Remote Selenium requests are described in detail in the class description for
  * <code>SeleniumServer</code>
  *
@@ -863,7 +863,7 @@ private void hackRemoveConnectionCloseHeader(HttpResponse res) {
 
   /**
    * Registers the given browser session among the active sessions to handle.
-   * <p/>
+   * <p>
    * Usually externally created browser sessions are managed themselves, but registering them allows
    * the shutdown procedures to be simpler.
    *
@@ -875,7 +875,7 @@ public void registerBrowserSession(BrowserSessionInfo sessionInfo) {
 
   /**
    * De-registers the given browser session from among the active sessions.
-   * <p/>
+   * <p>
    * When an externally managed but registered session is closed, this method should be called to
    * keep the set of active sessions up to date.
    *

File: java/server/src/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -572,13 +572,15 @@ public InputStream getResourceAsStream(String path) throws IOException {
 
   /**
    * Registers a running browser session
+   * @param sessionInfo session info
    */
   public void registerBrowserSession(BrowserSessionInfo sessionInfo) {
     driver.registerBrowserSession(sessionInfo);
   }
 
   /**
    * De-registers a previously registered running browser session
+   * @param sessionInfo session info
    */
   public void deregisterBrowserSession(BrowserSessionInfo sessionInfo) {
     driver.deregisterBrowserSession(sessionInfo);

File: java/server/src/org/openqa/selenium/server/SingleEntryAsyncQueue.java
Patch:
@@ -27,8 +27,7 @@
 /**
  * <p>
  * Holds the command to be next run in the browser
- * </p>
- * <p/>
+ * <p>
  * This class uses reentrant locks in order to allow the same thread to populate the queue as is
  * waiting for it, which is what currently happens on during browser startup.
  *

File: java/server/src/org/openqa/selenium/server/browserlaunchers/BrowserLauncher.java
Patch:
@@ -26,6 +26,7 @@ public interface BrowserLauncher {
   /**
    * Start the browser and navigate directly to the specified URL using the supplied browser
    * configurations
+   * @param url URL
    */
   void launchRemoteSession(String url);
 

File: java/server/src/org/openqa/selenium/server/browserlaunchers/BrowserLauncherFactory.java
Patch:
@@ -77,6 +77,7 @@ public BrowserLauncherFactory(DriverSessions webdriverSessions) {
    * @param browser a browser string like "*firefox"
    * @param sessionId the sessionId to launch
    * @param browserOptions TODO
+   * @param configuration remote control configuration
    * @return the BrowserLauncher ready to launch
    */
   public BrowserLauncher getBrowserLauncher(String browser, String sessionId,

File: java/server/src/org/openqa/selenium/server/browserlaunchers/CustomBrowserLauncher.java
Patch:
@@ -33,7 +33,7 @@ public class CustomBrowserLauncher extends AbstractBrowserLauncher {
   protected CommandLine process;
   protected String commandPath;
 
-  /** Specifies a command path to run */
+  /* Specifies a command path to run */
   public CustomBrowserLauncher(String commandPath, String sessionId,
       RemoteControlConfiguration configuration, Capabilities browserOptions) {
     super(sessionId, configuration, browserOptions);

File: java/server/src/org/openqa/selenium/server/browserlaunchers/MacProxyManager.java
Patch:
@@ -294,7 +294,7 @@ private String getPrimaryNetworkServiceName() {
 
   }
 
-  /** Execute scutil and quit, returning the output */
+  /* Execute scutil and quit, returning the output */
   protected String runScutil(String arg) {
     CommandLine command = new CommandLine(findScutilBin());
     command.setInput(arg + "\nquit\n");
@@ -306,7 +306,7 @@ protected String runScutil(String arg) {
     return output;
   }
 
-  /** Execute networksetup, returning the output */
+  /* Execute networksetup, returning the output */
   protected String runNetworkSetup(String... args) {
     CommandLine command = new CommandLine(findNetworkSetupBin(), args);
     command.execute();

File: java/server/src/org/openqa/selenium/server/browserlaunchers/ProxyInjectionFirefoxCustomProfileLauncher.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * launcher for Firefox under proxy injection mode
- * <p/>
+ * <p>
  * In proxy injection mode, the selenium server is a proxy for all traffic from the browser, not
  * just traffic going to selenium-server URLs. The incoming HTML is modified to include selenium's
  * JavaScript, which then controls the test page from within (as opposed to controlling the test

File: java/server/src/org/openqa/selenium/server/browserlaunchers/ProxyInjectionInternetExplorerCustomProxyLauncher.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * launcher for IE under proxy injection mode
- * <p/>
+ * <p>
  * In proxy injection mode, the selenium server is a proxy for all traffic from the browser, not
  * just traffic going to selenium-server URLs. The incoming HTML is modified to include selenium's
  * JavaScript, which then controls the test page from within (as opposed to controlling the test

File: java/server/src/org/openqa/selenium/server/browserlaunchers/ProxyInjectionSafariCustomProfileLauncher.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * launcher for Safari under proxy injection mode
- * <p/>
+ * <p>
  * In proxy injection mode, the selenium server is a proxy for all traffic from the browser, not
  * just traffic going to selenium-server URLs. The incoming HTML is modified to include selenium's
  * JavaScript, which then controls the test page from within (as opposed to controlling the test

File: java/server/src/org/openqa/selenium/server/browserlaunchers/WindowsProxyManager.java
Patch:
@@ -319,7 +319,7 @@ private static void hidePreexistingCookies() {
     }
   }
 
-  /**
+  /*
    * Hides all previously existing user cookies, found in the WinXP directory structure, by moving
    * them to a different directory.
    */
@@ -360,7 +360,7 @@ private static void restorePreexistingCookies() {
     }
   }
 
-  /**
+  /*
    * Restores previously hidden user cookies, if any.
    */
   protected static boolean restoreCookies(File cookieDir,

File: java/client/src/com/thoughtworks/selenium/BrowserConfigurationOptions.java
Patch:
@@ -185,7 +185,7 @@ protected int getTimeoutInSeconds() {
    * Note that absolutely no publication nor synchronization of these hard-coded strings such as
    * "HTA" has yet been done. Use at your own risk until this is rectified.
    *
-   * @param mode
+   * @param mode - examples "HTA" or "PROXY"
    */
   public BrowserConfigurationOptions setBrowserMode(String mode) {
     put(BROWSER_MODE, mode);

File: java/client/src/com/thoughtworks/selenium/HttpCommandProcessor.java
Patch:
@@ -249,7 +249,7 @@ public void start(String optionsString) {
    * Wraps the version of start() that takes a String parameter, sending it the result of calling
    * toString() on optionsObject, which will likely be a BrowserConfigurationOptions instance.
    *
-   * @param optionsObject
+   * @param optionsObject start options
    */
   public void start(Object optionsObject) {
     start(optionsObject.toString());

File: java/client/src/com/thoughtworks/selenium/SeleneseTestBase.java
Patch:
@@ -214,8 +214,8 @@ public static void assertEquals(String expected, String[] actual) {
   /**
    * Compares two strings, but handles "regexp:" strings like HTML Selenese
    *
-   * @param expectedPattern
-   * @param actual
+   * @param expectedPattern expression of expected
+   * @param actual expresssion of actual
    * @return true if actual matches the expectedPattern, or false otherwise
    */
   public static boolean seleniumEquals(String expectedPattern, String actual) {

File: java/client/src/com/thoughtworks/selenium/SeleneseTestCase.java
Patch:
@@ -212,8 +212,8 @@ public static boolean seleniumEquals(Object expected, Object actual) {
   /**
    * Compares two strings, but handles "regexp:" strings like HTML Selenese
    *
-   * @param expected
-   * @param actual
+   * @param expected expression of expected
+   * @param actual expression of actual
    * @return true if actual matches the expectedPattern, or false otherwise
    */
   public static boolean seleniumEquals(String expected, String actual) {

File: java/client/src/org/openqa/selenium/Alert.java
Patch:
@@ -36,7 +36,7 @@ public interface Alert {
    *
    * Usage: driver.switchTo().alert().authenticateUsing(new UsernamePasswordCredentials("cheese",
    *        "secretGouda"));
-   * @param credentials
+   * @param credentials - the credentials that will be passed to the Authentication prompt
    */
   @Beta
   void authenticateUsing(Credentials credentials);

File: java/client/src/org/openqa/selenium/By.java
Patch:
@@ -136,6 +136,9 @@ public static By className(final String className) {
    * Finds elements via the driver's underlying W3 Selector engine. If the browser does not
    * implement the Selector API, a best effort is made to emulate the API. In this case, we strive
    * for at least CSS2 support, but offer no guarantees.
+   *
+   * @param selector css expression
+   * @return a By which locates elements by CSS.
    */
   public static By cssSelector(final String selector) {
     if (selector == null)

File: java/client/src/org/openqa/selenium/ContextAware.java
Patch:
@@ -46,6 +46,8 @@ public interface ContextAware {
   /**
    * Return an opaque handle to this context that uniquely identifies it within this driver
    * instance. This can be used to switch to this context at a later date
+   *
+   * @return The current context handle
    */
   String getContext();
 }

File: java/client/src/org/openqa/selenium/Proxy.java
Patch:
@@ -106,6 +106,7 @@ public ProxyType getProxyType() {
   /**
    * Explicitly sets the proxy type, useful for forcing direct connection on Linux.
    *
+   * @param proxyType type of proxy being used
    * @return reference to self
    */
   public Proxy setProxyType(ProxyType proxyType) {

File: java/client/src/org/openqa/selenium/UnhandledAlertException.java
Patch:
@@ -31,7 +31,7 @@ public UnhandledAlertException(String message, String alertText) {
   }
 
   /**
-   * Returns the text of the unhandled alert.
+   * @return the text of the unhandled alert.
    */
   public String getAlertText() {
     return alertText;

File: java/client/src/org/openqa/selenium/WebElement.java
Patch:
@@ -61,6 +61,8 @@ public interface WebElement extends SearchContext, TakesScreenshot {
 
   /**
    * Use this method to simulate typing into an element, which may set its value.
+   *
+   * @param keysToSend character sequence to send to the element
    */
   void sendKeys(CharSequence... keysToSend);
 
@@ -205,6 +207,7 @@ public interface WebElement extends SearchContext, TakesScreenshot {
    * - you should directly access the longhand properties (e.g. background-color) to access the
    * desired values.
    *
+   * @param propertyName the css property name of the element
    * @return The current, computed value of the property.
    */
   String getCssValue(String propertyName);

File: java/client/src/org/openqa/selenium/browserlaunchers/locators/FirefoxLocator.java
Patch:
@@ -98,6 +98,8 @@ protected String[] usualUnixLauncherLocations() {
 
   /**
    * Dynamic because the directory version number keep changing.
+   *
+   * @return potential locations of firefox on Ubuntu
    */
   protected String[] firefoxDefaultLocationsOnUbuntu() {
     final File dir;

File: java/client/src/org/openqa/selenium/chrome/ChromeDriver.java
Patch:
@@ -200,7 +200,9 @@ public void setLocation(Location location) {
   }
 
   /**
-   * Launches Chome app specified by id.
+   * Launches Chrome app specified by id.
+   *
+   * @param id chrome app id
    */
   public void launchApp(String id) {
     execute(ChromeDriverCommand.LAUNCH_APP, ImmutableMap.of("id", id));

File: java/client/src/org/openqa/selenium/firefox/FirefoxBinary.java
Patch:
@@ -227,7 +227,7 @@ public void waitFor(long timeout) throws InterruptedException, IOException {
    * Gets all console output of the binary. Output retrieval is non-destructive and non-blocking.
    *
    * @return the console output of the executed binary.
-   * @throws IOException
+   * @throws IOException IO exception reading from the output stream of the firefox process
    */
   public String getConsoleOutput() throws IOException {
     if (process == null) {

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -241,6 +241,8 @@ public void webWindowClosed(WebWindowEvent event) {
    *       "chrome" for Chrome, "firefox-38" for Firefox 38 or "internet explorer-11" for IE 11.</li>
    * </ol>
    * <p>The Remote WebDriver uses the second mode - the first mode is deprecated and should not be used.
+   *
+   * @param capabilities desired capabilities requested for the htmlunit driver session
    */
   public HtmlUnitDriver(Capabilities capabilities) {
     this(determineBrowserVersion(capabilities));

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitMouse.java
Patch:
@@ -43,6 +43,9 @@ public HtmlUnitMouse(HtmlUnitKeyboard keyboard) {
 
   /**
    * @deprecated as of 2.47.0, please use {@link #HtmlUnitMouse(HtmlUnitKeyboard)} instead
+   *
+   * @param keyboard keyboard
+   * @param parent the htmlunitdriver object
    */
   @Deprecated
   public HtmlUnitMouse(HtmlUnitDriver parent, HtmlUnitKeyboard keyboard) {

File: java/client/src/org/openqa/selenium/interactions/Actions.java
Patch:
@@ -92,6 +92,7 @@ public Actions keyDown(Keys theKey) {
    *
    * @param theKey Either {@link Keys#SHIFT}, {@link Keys#ALT} or {@link Keys#CONTROL}. If the
    * provided key is none of those, {@link IllegalArgumentException} is thrown.
+   * @param element WebElement to perform the action
    * @return A self reference.
    */
   public Actions keyDown(WebElement element, Keys theKey) {
@@ -116,6 +117,7 @@ public Actions keyUp(Keys theKey) {
    * @see #keyUp(org.openqa.selenium.Keys) on behaviour regarding non-depressed modifier keys.
    *
    * @param theKey Either {@link Keys#SHIFT}, {@link Keys#ALT} or {@link Keys#CONTROL}.
+   * @param element WebElement to perform the action on
    * @return A self reference.
    */
   public Actions keyUp(WebElement element, Keys theKey) {

File: java/client/src/org/openqa/selenium/interactions/Keyboard.java
Patch:
@@ -18,8 +18,8 @@
 package org.openqa.selenium.interactions;
 
 /**
- * Interface representing basic, low-level keyboard operations.  It offers a set of low-level “do as
- * I say” commands to allow precise emulation of user input.
+ * Interface representing basic, low-level keyboard operations.  It offers a set of low-level "do as
+ * I say" commands to allow precise emulation of user input.
  */
 public interface Keyboard {
 

File: java/client/src/org/openqa/selenium/interactions/TouchScreen.java
Patch:
@@ -102,6 +102,7 @@ public interface TouchScreen {
    * @param where The coordinate of the element to flick on
    * @param xOffset The x offset relative to the viewport
    * @param yOffset The y offset relative to the viewport
+   * @param speed speed to flick, 0 = normal, 1 = fast, 2 = slow
    */
   void flick(Coordinates where, int xOffset, int yOffset, int speed);
 }

File: java/client/src/org/openqa/selenium/internal/SocketLock.java
Patch:
@@ -133,7 +133,7 @@ private boolean isLockFree(InetSocketAddress address) throws IOException {
 
   /**
    * Gets the port number that is being-locked.
-   * @return
+   * @return port locked
    */
   public int getLockPort(){
     return this.address.getPort();

File: java/client/src/org/openqa/selenium/lift/Finders.java
Patch:
@@ -119,6 +119,9 @@ public static org.openqa.selenium.lift.find.HtmlTagFinder button(String label) {
   /**
    * A finder which returns the first element matched - such as if you have multiple elements which
    * match the finder (such as multiple links with the same text on a page etc)
+   *
+   * @param finder finder from which context to search
+   * @return finder that will return the first match
    */
   public static Finder<WebElement, WebDriver> first(final Finder<WebElement, WebDriver> finder) {
     return new BaseFinder<WebElement, WebDriver>() {

File: java/client/src/org/openqa/selenium/logging/LocalLogs.java
Patch:
@@ -42,6 +42,8 @@ public void addEntry(String logType, LogEntry entry) {
 
   /**
    * Logger which doesn't do anything.
+   *
+   * @return the null logger
    */
   public static LocalLogs getNullLogger() {
     return NULL_LOGGER;

File: java/client/src/org/openqa/selenium/mobile/NetworkConnection.java
Patch:
@@ -33,7 +33,7 @@ public interface NetworkConnection {
 
   /**
    * ConnectionType is a bitmask to represent a device's network connection
-   * <p><pre>
+   * <pre>
    * Data  | WIFI | Airplane
    * 0       0      1         == 1
    * 1       1      0         == 6

File: java/client/src/org/openqa/selenium/os/CommandLine.java
Patch:
@@ -100,6 +100,8 @@ public static String getLibraryPathPropertyName() {
   }
 
   /**
+   * @param executable executable name to be found
+   * @return string of the path of the executable
    * @deprecated Use the commandline itself to execute your command.
    */
   @Deprecated

File: java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
Patch:
@@ -155,8 +155,8 @@ public boolean is(String capabilityName) {
    * extraCapabilities object.
    *
    * @param extraCapabilities Additional capabilities to be added.
+   * @return DesiredCapabilities after the merge
    */
-
   public DesiredCapabilities merge(
       org.openqa.selenium.Capabilities extraCapabilities) {
     if (extraCapabilities != null) {
@@ -239,6 +239,7 @@ public static DesiredCapabilities ipad() {
   }
 
   /**
+   * @return DesiredCapabilities for opera
    * @deprecated Use #operaBlink
    */
   @Deprecated

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -688,6 +688,7 @@ public Mouse getMouse() {
    * @param sessionId   the session id.
    * @param commandName the command that is being executed.
    * @param toLog       any data that might be interesting.
+   * @param when        verb tense of "Execute" to prefix message
    */
   protected void log(SessionId sessionId, String commandName, Object toLog, When when) {
     String text = "" + toLog;
@@ -1049,7 +1050,7 @@ public void setCredentials(Credentials credentials) {
      *
      * Usage: driver.switchTo().alert().authenticateUsing(new UsernamePasswordCredentials("cheese",
      *        "secretGouda"));
-     * @param credentials
+     * @param credentials credentials to pass to Auth prompt
      */
     @Beta
     public void authenticateUsing(Credentials credentials) {

File: java/client/src/org/openqa/selenium/remote/http/HttpClient.java
Patch:
@@ -42,6 +42,9 @@ interface Factory {
 
     /**
      * Creates a HTTP client that will send requests to the given URL.
+     *
+     * @param url URL
+     * @return HttpClient
      */
     HttpClient createClient(URL url);
   }

File: java/client/src/org/openqa/selenium/remote/http/HttpMessage.java
Patch:
@@ -49,6 +49,9 @@ public List<String> get() {
   /**
    * Retrieves a user-defined attribute of this message. Attributes are stored as simple key-value
    * pairs and are not included in a message's serialized form.
+   *
+   * @param key attribute name
+   * @return attribute object
    */
   public Object getAttribute(String key) {
     return attributes.get(key);

File: java/client/src/org/openqa/selenium/remote/service/DriverCommandExecutor.java
Patch:
@@ -53,6 +53,9 @@ public DriverCommandExecutor(DriverService service) {
   /**
    * Creates an {@link DriverCommandExecutor} that supports non-standard
    * {@code additionalCommands} in addition to the standard.
+   *
+   * @param service driver server
+   * @param additionalCommands additional commands the remote end can process
    */
   protected DriverCommandExecutor(
       DriverService service, Map<String, CommandInfo> additionalCommands) {

File: java/client/src/org/openqa/selenium/safari/SafariOptions.java
Patch:
@@ -74,6 +74,7 @@ private Option() {}  // Utility class.
    * When the {@link #CAPABILITY} capability is set, all other capabilities will be ignored!
    *
    * @param capabilities Desired capabilities from which the options are derived.
+   * @return SafariOptions
    * @throws WebDriverException If an error occurred during the reconstruction of the options
    */
   public static SafariOptions fromCapabilities(Capabilities capabilities)

File: java/client/src/org/openqa/selenium/support/PageFactory.java
Patch:
@@ -54,6 +54,7 @@ public class PageFactory {
    *
    * @param driver           The driver that will be used to look up the elements
    * @param pageClassToProxy A class which will be initialised.
+   * @param <T>              Class of the PageObject
    * @return An instantiated instance of the class with WebElement and List&lt;WebElement&gt;
    * fields proxied
    * @see FindBy

File: java/client/src/org/openqa/selenium/support/events/EventFiringWebDriver.java
Patch:
@@ -131,6 +131,7 @@ private void extractInterfaces(Set<Class<?>> addTo, Class<?> clazz) {
   }
 
   /**
+   * @param eventListener the event listener to register
    * @return this for method chaining.
    */
   public EventFiringWebDriver register(WebDriverEventListener eventListener) {
@@ -139,6 +140,7 @@ public EventFiringWebDriver register(WebDriverEventListener eventListener) {
   }
 
   /**
+   * @param eventListener the event listener to unregister
    * @return this for method chaining.
    */
   public EventFiringWebDriver unregister(WebDriverEventListener eventListener) {

File: java/client/src/org/openqa/selenium/support/pagefactory/ElementLocatorFactory.java
Patch:
@@ -28,7 +28,7 @@ public interface ElementLocatorFactory {
    * When a field on a class needs to be decorated with an {@link ElementLocator} this method will
    * be called.
    *
-   * @param field
+   * @param field the field
    * @return An ElementLocator object.
    */
   ElementLocator createLocator(Field field);

File: java/client/src/org/openqa/selenium/support/ui/Quotes.java
Patch:
@@ -37,6 +37,7 @@ public class Quotes {
    * @param toEscape a text to escape quotes in, e.g. {@code "f'oo"}
    * @return the same text with escaped quoted, e.g. {@code "\"f'oo\""}
    */
+  @SuppressWarnings("JavaDoc")
   public static String escape(String toEscape) {
     if (toEscape.contains("\"") && toEscape.contains("'")) {
       boolean quoteIsLast = false;

File: java/client/src/org/openqa/selenium/support/ui/Wait.java
Patch:
@@ -39,6 +39,7 @@ public interface Wait<F> {
    *
    * @param <T> the return type of the method, which must not be Void
    * @param isTrue the parameter to pass to the {@link ExpectedCondition}
+   * @return truthy value from the isTrue condition
    */
   <T> T until(Function<? super F, T> isTrue);
 }

File: java/server/src/org/openqa/grid/common/CommandLineOptionHelper.java
Patch:
@@ -104,7 +104,7 @@ public List<String> getParamValues(String name) {
   /**
    * get all occurrences of -name
    *
-   * @param name
+   * @param name parameter name
    * @return A List of Strings that have the passed name argument in them.
    */
   public List<String> getAll(String name) {

File: java/server/src/org/openqa/grid/common/GridRole.java
Patch:
@@ -46,7 +46,7 @@ public enum GridRole {
   /**
    * finds the requested role from the parameters.
    *
-   * @param args
+   * @param args command line arguments
    * @return the role in the grid from the -role param
    */
   public static GridRole find(String[] args) {

File: java/server/src/org/openqa/grid/common/JSONConfigurationUtils.java
Patch:
@@ -35,7 +35,7 @@ public class JSONConfigurationUtils {
   /**
    * load a JSON file from the resource or file system.
    *
-   * @param resource
+   * @param resource file or jar resource location
    * @return A JsonObject representing the passed resource argument.
    */
   public static JsonObject loadJSON(String resource) {

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -251,7 +251,7 @@ private void ensureBackwardCompatibility() {
   /**
    * Create an object from a registration request formatted as a json string.
    *
-   * @param json
+   * @param json JSON
    * @return create a request from the JSON request received.
    */
   @SuppressWarnings("unchecked")
@@ -543,7 +543,7 @@ private void addPlatformInfoToCapabilities() {
   /**
    * add config, but overwrite capabilities.
    *
-   * @param resource
+   * @param resource resource
    */
   public void loadFromJSON(String resource) {
     try {

File: java/server/src/org/openqa/grid/internal/listeners/Prioritizer.java
Patch:
@@ -28,8 +28,8 @@ public interface Prioritizer {
    * <p/>
    * a and b have the same priority : compare(a,b) = 0
    *
-   * @param a
-   * @param b
+   * @param a first item
+   * @param b second item
    * @return a negative number is a is less important than b, a positive number is a is more
    *         important than b, 0 if a and b are equally as important.
    */

File: java/server/src/org/openqa/grid/internal/listeners/SelfHealingProxy.java
Patch:
@@ -43,7 +43,7 @@ public interface SelfHealingProxy {
   /**
    * Allow to record when something important about the remote state is detected.
    *
-   * @param event
+   * @param event RemoteException event to be called when something happens
    */
   public void addNewEvent(RemoteException event);
 
@@ -54,8 +54,8 @@ public interface SelfHealingProxy {
    * implementation of this method will be to put the proxy on hold if the network connection is
    * bad, or to restart the remote if the resources used are too important
    *
-   * @param events
-   * @param lastInserted
+   * @param events list of RemoteExceptions occurred
+   * @param lastInserted last event that occurred
    */
   public void onEvent(List<RemoteException> events, RemoteException lastInserted);
 

File: java/server/src/org/openqa/grid/internal/listeners/TestSessionListener.java
Patch:
@@ -41,7 +41,7 @@ public interface TestSessionListener {
    * WARNING : beforeSession should NOT throw exception. If an exception is thrown, the session is
    * considered invalid and the resources will be freed.
    *
-   * @param session
+   * @param session session
    * @see RegistrationListener if the setup applies to all the tests.
    */
   public void beforeSession(TestSession session);

File: java/server/src/org/openqa/grid/internal/listeners/TimeoutListener.java
Patch:
@@ -31,7 +31,7 @@ public interface TimeoutListener {
    * the browser is in the process of being started. During that state, you can't really clean the
    * resources properly.
    *
-   * @param session
+   * @param session session
    */
   public void beforeRelease(TestSession session);
 

File: java/server/src/org/openqa/grid/internal/utils/GridHubConfiguration.java
Patch:
@@ -124,7 +124,7 @@ public GridHubConfiguration() {
   /**
    * builds a grid configuration from the parameters passed command line.
    *
-   * @param args
+   * @param args command line arguments
    * @return A GridHubConfiguration object with options from the grid1 and/or
    *         grid2 config file(s), plus any command line option overrides.
    */

File: java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java
Patch:
@@ -277,7 +277,7 @@ private void registerToHub(boolean checkPresenceFirst) {
 
   /**
    * uses the hub API to get some of its configuration.
-   * @return
+   * @return json object of the current hub configuration
    * @throws Exception
    */
   private JsonObject getHubConfiguration() throws Exception {

File: java/server/src/org/openqa/grid/web/servlet/ConsoleServlet.java
Patch:
@@ -148,7 +148,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
   /**
    * retracing how the hub config was built to help debugging.
    *
-   * @return
+   * @return html representation of the hub config
    */
   private String getConfigInfo(boolean verbose) {
     StringBuilder builder = new StringBuilder();

File: java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java
Patch:
@@ -211,7 +211,7 @@ private Object getHeader() {
   /**
    * retracing how the hub config was built to help debugging.
    *
-   * @return
+   * @return html representation of the hub config
    */
   private String getConfigInfo(boolean verbose) {
 

File: java/server/src/org/openqa/grid/web/utils/BrowserNameUtils.java
Patch:
@@ -108,8 +108,8 @@ public static String consoleIconName(DesiredCapabilities cap, Registry registry)
    * get the icon representing the browser for the grid. If the icon cannot be located, returns
    * null.
    *
-   * @param cap
-   * @param registry
+   * @param cap - Capability
+   * @param registry - Registry
    * @return String with path to icon image file.  Can be <i>null</i> if no icon
    *         file if available.
    */

File: java/server/src/org/openqa/grid/web/utils/ExtraServletUtil.java
Patch:
@@ -29,7 +29,7 @@ public class ExtraServletUtil {
    * Reflexion to create the servlet based on the class name. Returns null if the class cannot be
    * instantiated.
    *
-   * @param className
+   * @param className class name to be created
    * @return Class object for passed className argument, or <i/null</i> if no
    *         matching class name can be found.
    */

File: java/server/src/org/openqa/selenium/server/InjectionHelper.java
Patch:
@@ -313,9 +313,9 @@ private static int getBOMLength(byte[] buf) {
   /**
    * read bufLen bytes into buf (unless EOF is seen first) from in.
    *
-   * @param in
-   * @param buf
-   * @param bufLen
+   * @param in input stream
+   * @param buf buffer to read into
+   * @param bufLen max size to read
    * @return number of bytes read
    * @throws IOException
    */

File: java/server/src/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -259,9 +259,9 @@ private void respond(HttpResponse res, RemoteCommand sc, String uniqueId) throws
   /**
    * extract the posted data from an incoming request, stripping away a piggybacked data
    *
-   * @param req
-   * @param sessionId
-   * @param uniqueId
+   * @param req request
+   * @param sessionId session id
+   * @param uniqueId unique id
    * @return a string containing the posted data (with piggybacked log info stripped)
    * @throws IOException
    */

File: java/server/src/org/openqa/selenium/server/browserlaunchers/HTABrowserLauncher.java
Patch:
@@ -117,7 +117,7 @@ private void createHTAFiles() {
    * does not pass through the Selenium server in HTA mode, thus the specialized extension js
    * resource handler is of no use.
    *
-   * @param coreDir
+   * @param coreDir to the core
    * @throws IOException
    */
   private void writeSessionExtensionJs(File coreDir) throws IOException {

File: java/server/src/org/openqa/selenium/server/commands/CaptureNetworkTrafficCommand.java
Patch:
@@ -216,7 +216,7 @@ private Object json(String s) {
   /**
    * Escape quotes, \, /, \r, \n, \b, \f, \t and other control characters (U+0000 through U+001F).
    * @param s - Must not be null.
-   * @param sb
+   * @param sb string buffer originating string is copied to
    */
   private static void escape(String s, StringBuffer sb) {
     final int len = s.length();

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -26,6 +26,7 @@
 import static org.junit.Assume.assumeFalse;
 import static org.openqa.selenium.WaitingConditions.elementValueToEqual;
 import static org.openqa.selenium.testing.Ignore.Driver.ALL;
+import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.MARIONETTE;
@@ -720,7 +721,7 @@ public void testShouldBeAbleToTypeIntoEmptyContentEditableElement() {
     assertThat(editable.getText(), equalTo("cheese"));
   }
 
-  @Ignore(value = {ALL}, reason = "Untested except in Firefox", issues = {2825})
+  @Ignore(value = {CHROME, IE, SAFARI, HTMLUNIT, MARIONETTE})
   @Test
   public void testShouldBeAbleToTypeIntoContentEditableElementWithExistingValue() {
     driver.get(pages.readOnlyPage);

File: java/client/test/org/openqa/selenium/ChildrenFindingTest.java
Patch:
@@ -156,7 +156,6 @@ public void testFindElementByLinkText() {
   }
 
   @Test
-  @NotYetImplemented(value = {MARIONETTE}, reason = "Marionette: https://bugzilla.mozilla.org/show_bug.cgi?id=1204496")
   public void testFindElementsByLinkTest() {
     driver.get(pages.nestedPage);
     WebElement element = driver.findElement(By.name("div1"));
@@ -292,7 +291,6 @@ public void testFindingByCssShouldNotIncludeParentElementIfSameTagType() {
   }
 
   @Ignore({REMOTE})
-  @NotYetImplemented(value = {MARIONETTE}, reason = "Marionette: https://bugzilla.mozilla.org/show_bug.cgi?id=1204496")
   @Test
   public void testFindMultipleElements() {
     driver.get(pages.simpleTestPage);

File: java/client/src/org/openqa/selenium/remote/JdkAugmenter.java
Patch:
@@ -104,7 +104,7 @@ protected <X> X create(RemoteWebDriver driver, Map<String, AugmenterProvider> au
       return objectToAugment;
     }
 
-    InvocationHandler proxyHandler = new JdkHandler<>((RemoteWebDriver) driver,
+    InvocationHandler proxyHandler = new JdkHandler<>(driver,
         objectToAugment, augmentationHandlers);
     X augmentedProxy = (X) Proxy.newProxyInstance(
         getClass().getClassLoader(),

File: java/client/test/org/openqa/selenium/ImplicitWaitTest.java
Patch:
@@ -170,7 +170,7 @@ public void testShouldRetainImplicitlyWaitFromTheReturnedWebDriverOfFrameSwitchT
 
     long start = System.currentTimeMillis();
 
-    newWindow.findElements(By.id("This crazy thing doesn't exist"));
+    newWindow.findElements(By.id("this-crazy-thing-does-not-exist"));
 
     long end = System.currentTimeMillis();
 

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -643,7 +643,6 @@ public void testShouldNotTypeIntoElementsThatPreventKeyDownEvents() {
   @Test
   public void testGenerateKeyPressEventEvenWhenElementPreventsDefault() {
     assumeFalse(isFirefox(driver) && getFirefoxVersion(driver) < 25);
-    assumeTrue(((HasCapabilities)driver).getCapabilities().is(CapabilityType.HAS_NATIVE_EVENTS));
     driver.get(pages.javascriptPage);
 
     WebElement silent = driver.findElement(By.name("suppress"));

File: java/client/test/org/openqa/selenium/TextPagesTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
-import static org.openqa.selenium.testing.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.MARIONETTE;
 import static org.openqa.selenium.testing.Ignore.Driver.PHANTOMJS;
@@ -41,7 +40,7 @@ public void setUp() throws Exception {
     textPage = GlobalTestEnvironment.get().getAppServer().whereIs("plain.txt");
   }
 
-  @Ignore(value = {IE, FIREFOX, CHROME, SAFARI, PHANTOMJS, MARIONETTE},
+  @Ignore(value = {IE, CHROME, SAFARI, PHANTOMJS, MARIONETTE},
       reason = "IE, Firefox: adds HTML tags.")
   @Test
   public void testShouldBeAbleToLoadASimplePageOfText() {

File: java/client/src/org/openqa/selenium/remote/RemoteWebElement.java
Patch:
@@ -89,7 +89,9 @@ public void submit() {
       execute(DriverCommand.SUBMIT_ELEMENT, ImmutableMap.of("id", id));
     } else {
       WebElement form = findElement(By.xpath("./ancestor-or-self::form"));
-      parent.executeScript("arguments[0].submit()", form);
+      parent.executeScript("var e = arguments[0].ownerDocument.createEvent('Event');" +
+                           "e.initEvent('submit', true, true);" +
+                           "if (arguments[0].dispatchEvent(e)) { arguments[0].submit() }", form);
     }
   }
 

File: java/client/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -305,7 +305,6 @@ public void testShouldBeAbleToSwitchToParentFromAnIframe() {
   // ----------------------------------------------------------------------------------------------
 
   @Test
-  @Ignore(MARIONETTE)
   public void testShouldContinueToReferToTheSameFrameOnceItHasBeenSelected() {
     driver.get(pages.framesetPage);
 

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -175,7 +175,7 @@ public void testShouldSetRelatedTargetForMouseOver() {
 
   @JavascriptEnabled
   @NoDriverAfterTest
-  @Ignore(value = {SAFARI, MARIONETTE}, reason = "Safari: issue 3693")
+  @Ignore(value = {SAFARI}, reason = "Safari: issue 3693")
   @Test
   public void testShouldOnlyFollowHrefOnce() {
     driver.get(pages.clicksPage);

File: java/client/test/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -262,7 +262,7 @@ public void testEmptyTextBoxesShouldReturnAnEmptyStringNotNull() {
   }
 
   @Test
-  @Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT},
+  @Ignore(value = {PHANTOMJS, SAFARI, HTMLUNIT, MARIONETTE},
           reason = "HtmlUnit: error; others: untested")
   public void handleFormWithJavascriptAction() {
     String url = appServer.whereIs("form_handling_js_submit.html");

File: java/client/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -424,7 +424,7 @@ public void testGetCurrentUrlReturnsTopLevelBrowsingContextUrl() {
     assertThat(driver.getCurrentUrl(), equalTo(pages.framesetPage));
   }
 
-  @Ignore({CHROME, FIREFOX, HTMLUNIT, IE, PHANTOMJS, SAFARI})
+  @Ignore({CHROME, FIREFOX, HTMLUNIT, IE, PHANTOMJS, SAFARI, MARIONETTE})
   @Test
   public void testGetCurrentUrlReturnsTopLevelBrowsingContextUrlForIframes() {
     driver.get(pages.iframePage);

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -388,6 +388,7 @@ public void testShouldNotHangIfDocumentOpenCallIsNeverFollowedByDocumentCloseCal
               + "PHANTOMJS: not tested",
           issues = {687})
   @NeedsLocalEnvironment
+  @NoDriverAfterTest
   @Test
   public void testPageLoadTimeoutCanBeChanged() {
     try {

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitAlert.java
Patch:
@@ -82,7 +82,7 @@ public void setCredentials(Credentials credentials) {
   public void handleAlert(Page page, String message) {
     Queue<String> queue = queues.get(page);
     if (queue == null) {
-      queue = new LinkedList<String>();
+      queue = new LinkedList<>();
       queues.put(page, queue);
     }
     queue.add(message);

File: java/client/src/org/openqa/selenium/remote/RemoteWebElement.java
Patch:
@@ -374,7 +374,7 @@ public Point getLocation() {
   @SuppressWarnings({"unchecked"})
   public Dimension getSize() {
     Response response = parent.getW3CStandardComplianceLevel() == 0
-                        ? execute(DriverCommand.GET_ELEMENT_LOCATION, ImmutableMap.of("id", id))
+                        ? execute(DriverCommand.GET_ELEMENT_SIZE, ImmutableMap.of("id", id))
                         : execute(DriverCommand.GET_ELEMENT_RECT, ImmutableMap.of("id", id));
     Map<String, Object> rawSize = (Map<String, Object>) response.getValue();
     int width = ((Number) rawSize.get("width")).intValue();

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -110,7 +110,7 @@ public class ErrorCodes {
       .put(SUCCESS, "success")
       .put(TIMEOUT, "timeout")
       .put(UNABLE_TO_SET_COOKIE, "unable to set cookie")
-      .put(UNEXPECTED_ALERT_PRESENT, "no such alert") // @Beta: not sure if this is the right name
+      .put(NO_ALERT_PRESENT, "no such alert")
       .put(UNHANDLED_ERROR, "unhandled error")
       .put(UNKNOWN_COMMAND, "unknown command")
       .put(XPATH_LOOKUP_ERROR, "invalid selector")

File: java/server/src/org/openqa/selenium/remote/server/handler/SwitchToFrame.java
Patch:
@@ -59,6 +59,6 @@ public Void call() throws Exception {
 
   @Override
   public String toString() {
-    return String.format("[switch to frame: %s]", id);
+    return String.format("[switch to frame: %s]", (id == null ? "default" : id));
   }
 }

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -554,7 +554,7 @@ protected void get(URL fullUrl) {
 
   private void resetKeyboardAndMouseState() {
     keyboard = new HtmlUnitKeyboard(this);
-    mouse = new HtmlUnitMouse(this, keyboard);
+    mouse = new HtmlUnitMouse(keyboard);
   }
 
   protected void pickWindow() {

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitAlert.java
Patch:
@@ -78,7 +78,6 @@ public void authenticateUsing(Credentials credentials) {
   public void setCredentials(Credentials credentials) {
   }
 
-
   @Override
   public void handleAlert(Page page, String message) {
     Queue<String> queue = queues.get(page);

File: java/client/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -405,7 +405,6 @@ public void testShouldBeAbleToFindElementByXPathWithNamespace() {
   }
 
   @Ignore({IE, MARIONETTE, SAFARI, CHROME})
-  @NotYetImplemented(HTMLUNIT)
   @Test
   public void testShouldBeAbleToFindElementByXPathInXmlDocument() {
     driver.get(pages.simpleXmlDocument);

File: java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java
Patch:
@@ -20,8 +20,8 @@
 import static org.junit.Assert.assertEquals;
 import static org.openqa.selenium.support.ui.ExpectedConditions.alertIsPresent;
 
+import org.apache.http.auth.UsernamePasswordCredentials;
 import org.junit.Test;
-import org.openqa.selenium.security.UserAndPassword;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 
@@ -35,7 +35,7 @@ public void canAuthenticateUsingBasicAuthentication() {
 
     Alert alert = wait.until(alertIsPresent());
 
-    UserAndPassword user = new UserAndPassword("test", "test");
+    UsernamePasswordCredentials user = new UsernamePasswordCredentials("test", "test");
 
     alert.authenticateUsing(user);
 

File: java/server/src/org/openqa/selenium/remote/server/handler/SetScriptTimeout.java
Patch:
@@ -49,6 +49,6 @@ public Void call() throws Exception {
 
   @Override
   public String toString() {
-    return String.format("[set script timeoutt: %s]", millis);
+    return String.format("[set script timeout: %s]", millis);
   }
 }

File: java/client/src/com/thoughtworks/selenium/SeleneseTestBase.java
Patch:
@@ -107,7 +107,7 @@ public void setUp(String url, String browserString) throws Exception {
 
   protected int getDefaultPort() {
     try {
-      Class c = Class.forName("org.openqa.selenium.server.RemoteControlConfiguration");
+      Class<?> c = Class.forName("org.openqa.selenium.server.RemoteControlConfiguration");
       Method getDefaultPort = c.getMethod("getDefaultPort", new Class[0]);
       Integer portNumber = (Integer) getDefaultPort.invoke(null);
       return portNumber.intValue();

File: java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java
Patch:
@@ -134,8 +134,7 @@ private JsonElement convertObject(Object toConvert, int maxDepth) throws Excepti
 
     if (toConvert instanceof Map) {
       JsonObject converted = new JsonObject();
-      for (Object objectEntry : ((Map) toConvert).entrySet()) {
-        Map.Entry<String, Object> entry = (Map.Entry) objectEntry;
+      for (Map.Entry<String, Object> entry : ((Map<String, Object>) toConvert).entrySet()) {
         converted.add(entry.getKey(), convertObject(entry.getValue(), maxDepth - 1));
       }
       return converted;
@@ -147,7 +146,7 @@ private JsonElement convertObject(Object toConvert, int maxDepth) throws Excepti
 
     if (toConvert instanceof Collection) {
       JsonArray array = new JsonArray();
-      for (Object o : (Collection) toConvert) {
+      for (Object o : (Collection<?>) toConvert) {
         array.add(convertObject(o, maxDepth - 1));
       }
       return array;

File: java/client/src/org/openqa/selenium/remote/ErrorHandler.java
Patch:
@@ -227,7 +227,7 @@ private Throwable rebuildServerError(Map<String, Object> rawErrorData, int respo
 
     Throwable toReturn = null;
     String message = (String) rawErrorData.get(MESSAGE);
-    Class clazz = null;
+    Class<?> clazz = null;
 
     // First: allow Remote Driver to specify the Selenium Server internal exception
     if (rawErrorData.containsKey(CLASS)) {

File: java/client/src/org/openqa/selenium/remote/JdkAugmenter.java
Patch:
@@ -104,7 +104,7 @@ protected <X> X create(RemoteWebDriver driver, Map<String, AugmenterProvider> au
       return objectToAugment;
     }
 
-    InvocationHandler proxyHandler = new JdkHandler((RemoteWebDriver) driver,
+    InvocationHandler proxyHandler = new JdkHandler<>((RemoteWebDriver) driver,
         objectToAugment, augmentationHandlers);
     X augmentedProxy = (X) Proxy.newProxyInstance(
         getClass().getClassLoader(),

File: java/client/src/org/openqa/selenium/safari/SafariOptions.java
Patch:
@@ -162,8 +162,7 @@ public JsonObject toJson() throws IOException {
    * @throws IOException If an error occurred while writing the safari extensions to a
    *    temporary directory.
    */
-  @SuppressWarnings("unchecked")
-  private static SafariOptions fromJsonMap(Map options) throws IOException {
+  private static SafariOptions fromJsonMap(Map<?, ?> options) throws IOException {
     SafariOptions safariOptions = new SafariOptions();
 
     Number port = (Number) options.get(Option.PORT);

File: java/client/src/org/openqa/selenium/support/ThreadGuard.java
Patch:
@@ -51,9 +51,9 @@ public static WebDriver protect(WebDriver actualWebDriver) {
                           invocationHandler);
   }
 
-  private static Class[] getInterfaces(Object target) {
-    Class base = target.getClass();
-    Set<Class> interfaces = new HashSet<>();
+  private static Class<?>[] getInterfaces(Object target) {
+    Class<?> base = target.getClass();
+    Set<Class<?>> interfaces = new HashSet<>();
     if (base.isInterface()) {
       interfaces.add(base);
     }

File: java/client/test/com/thoughtworks/selenium/InternalSelenseTestBase.java
Patch:
@@ -62,7 +62,7 @@
 
 public class InternalSelenseTestBase extends SeleneseTestBase {
   private static final Logger log = Logger.getLogger(InternalSelenseTestBase.class.getName());
-  private static final ThreadLocal<Selenium> instance = new ThreadLocal<Selenium>();
+  private static final ThreadLocal<Selenium> instance = new ThreadLocal<>();
   private static String seleniumServerUrl;
 
   private static final AtomicBoolean mustBuild = new AtomicBoolean(true);

File: java/client/test/org/openqa/selenium/testing/JUnit4TestBase.java
Patch:
@@ -51,7 +51,7 @@ public abstract class JUnit4TestBase implements WrapsDriver {
   protected TestEnvironment environment;
   protected AppServer appServer;
   protected Pages pages;
-  private static ThreadLocal<WebDriver> storedDriver = new ThreadLocal<WebDriver>();
+  private static ThreadLocal<WebDriver> storedDriver = new ThreadLocal<>();
   protected WebDriver driver;
   protected Wait<WebDriver> wait;
   protected Wait<WebDriver> shortWait;

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -219,6 +219,7 @@ public void testAlertShouldNotAllowAdditionalCommandsIfDismissed() {
 
   @Ignore(MARIONETTE)
   @JavascriptEnabled
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testShouldAllowUsersToAcceptAnAlertInAFrame() {
     driver.switchTo().frame("iframeWithAlert");
@@ -234,6 +235,7 @@ public void testShouldAllowUsersToAcceptAnAlertInAFrame() {
 
   @Ignore(MARIONETTE)
   @JavascriptEnabled
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testShouldAllowUsersToAcceptAnAlertInANestedFrame() {
     driver.switchTo().frame("iframeWithIframe").switchTo().frame("iframeWithAlert");

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -85,6 +85,7 @@ public void testCanClickOnAnAnchorAndNotReloadThePage() {
     assertEquals("Latch was reset", Boolean.TRUE, samePage);
   }
 
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testCanClickOnALinkThatUpdatesAnotherFrame() {
     driver.switchTo().frame("source");
@@ -96,6 +97,7 @@ public void testCanClickOnALinkThatUpdatesAnotherFrame() {
   }
 
   @JavascriptEnabled
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testElementsFoundByJsCanLoadUpdatesInAnotherFrame() {
     driver.switchTo().frame("source");

File: java/client/test/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -208,6 +208,7 @@ public void testAddCookiesWithDifferentPathsThatAreRelatedToOurs() {
   }
 
   @Ignore(value = {CHROME, PHANTOMJS, SAFARI})
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testGetCookiesInAFrame() {
     driver.get(domainHelper.getUrlForFirstValidHostname("/common/animals"));

File: java/client/test/org/openqa/selenium/ElementEqualityTest.java
Patch:
@@ -71,6 +71,7 @@ public void testSameElementLookedUpDifferentWaysUsingFindElementsShouldHaveSameH
   }
 
   @JavascriptEnabled
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testAnElementFoundInADifferentFrameViaJsShouldHaveSameId() {
     driver.get(pages.missedJsReferencePage);

File: java/client/test/org/openqa/selenium/PositionAndSizeTest.java
Patch:
@@ -25,7 +25,6 @@
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assume.assumeFalse;
-import static org.junit.Assume.assumeTrue;
 import static org.openqa.selenium.Platform.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
@@ -98,6 +97,7 @@ public void testShouldScrollPageAndGetCoordinatesOfAnElementThatIsOutOfViewPort(
     assertThat(getLocationOnPage(By.id("box")), is(new Point(10, 5010)));
   }
 
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testShouldGetCoordinatesOfAnElementInAFrame() {
     driver.get(appServer.whereIs("coordinates_tests/element_in_frame.html"));
@@ -108,6 +108,7 @@ public void testShouldGetCoordinatesOfAnElementInAFrame() {
   }
 
   @Ignore({SAFARI})
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testShouldGetCoordinatesInViewPortOfAnElementInAFrame() {
     driver.get(appServer.whereIs("coordinates_tests/element_in_frame.html"));
@@ -117,6 +118,7 @@ public void testShouldGetCoordinatesInViewPortOfAnElementInAFrame() {
   }
 
   @Ignore({SAFARI})
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testShouldGetCoordinatesInViewPortOfAnElementInANestedFrame() {
     driver.get(appServer.whereIs("coordinates_tests/element_in_nested_frame.html"));

File: java/client/test/org/openqa/selenium/TakesScreenshotTest.java
Patch:
@@ -309,6 +309,7 @@ public void testShouldCaptureScreenshotAtIFramePage() throws Exception {
     compareColors(expectedColors, actualColors);
   }
 
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   @Ignore(
       value = {IE, MARIONETTE},
@@ -340,6 +341,7 @@ public void testShouldCaptureScreenshotAtFramePageAfterSwitching() throws Except
     compareColors(expectedColors, actualColors);
   }
 
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   @Ignore(
       value = {IE, CHROME, MARIONETTE},

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -669,6 +669,7 @@ public void testGenerateKeyPressEventEvenWhenElementPreventsDefault() {
   @JavascriptEnabled
   @Ignore(value = {SAFARI, MARIONETTE},
       reason = "Safari: cannot type on contentEditable with synthetic events")
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testTypingIntoAnIFrameWithContentEditableOrDesignModeSet() {
     driver.get(pages.richTextPage);
@@ -691,6 +692,7 @@ public void testTypingIntoAnIFrameWithContentEditableOrDesignModeSet() {
 
   @JavascriptEnabled
   @Ignore(value = {HTMLUNIT, MARIONETTE}, issues = {6711})
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testNonPrintableCharactersShouldWorkWithContentEditableOrDesignModeSet() {
     assumeFalse("FIXME: Fails in Firefox on Linux with synthesized events",
@@ -756,6 +758,7 @@ public void testShouldBeAbleToTypeIntoContentEditableElementWithExistingValue()
           reason = "Untested browsers;" +
                    " Safari: cannot type on contentEditable with synthetic events",
           issues = {3127})
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testShouldBeAbleToTypeIntoTinyMCE() {
     driver.get(appServer.whereIs("tinymce.html"));

File: java/client/test/org/openqa/selenium/UploadTest.java
Patch:
@@ -60,6 +60,7 @@ public void setUp() throws Exception {
   }
 
   @JavascriptEnabled
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testFileUploading() throws Exception {
     assumeFalse(

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -46,7 +46,9 @@
 import java.util.Set;
 
 public class WindowSwitchingTest extends JUnit4TestBase {
+
   @Ignore({MARIONETTE})
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testShouldSwitchFocusToANewWindowWhenItIsOpenedAndNotStopFutureOperations() {
     assumeFalse(Browser.detect() == Browser.opera &&

File: java/client/test/org/openqa/selenium/interactions/CombinedInputActionsTest.java
Patch:
@@ -43,6 +43,7 @@
 import org.openqa.selenium.By;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.Keys;
+import org.openqa.selenium.NoDriverAfterTest;
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.Point;
 import org.openqa.selenium.WaitingConditions;
@@ -194,6 +195,7 @@ private void navigateToClicksPageAndClickLink() {
   }
 
   @Ignore(value = {PHANTOMJS, SAFARI}, reason = "Not tested")
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void canMoveMouseToAnElementInAnIframeAndClick() {
     driver.get(appServer.whereIs("click_tests/click_in_iframe.html"));

File: java/client/test/org/openqa/selenium/interactions/DragAndDropTest.java
Patch:
@@ -86,6 +86,7 @@ public void testDragAndDropToElement() {
   }
 
   @JavascriptEnabled
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testDragAndDropToElementInIframe() {
     driver.get(pages.iframePage);
@@ -100,6 +101,7 @@ public void testDragAndDropToElementInIframe() {
   }
 
   @JavascriptEnabled
+  @NoDriverAfterTest // So that next test never starts with "inside a frame" base state.
   @Test
   public void testDragAndDropElementWithOffsetInIframeAtBottom() {
     driver.get(appServer.whereIs("iframeAtBottom.html"));

File: java/client/src/org/openqa/selenium/support/pagefactory/DefaultFieldDecorator.java
Patch:
@@ -67,7 +67,7 @@ public Object decorate(ClassLoader loader, Field field) {
     }
   }
 
-  private boolean isDecoratableList(Field field) {
+  protected boolean isDecoratableList(Field field) {
     if (!List.class.isAssignableFrom(field.getType())) {
       return false;
     }

File: java/client/src/org/openqa/selenium/os/UnixProcess.java
Patch:
@@ -119,6 +119,7 @@ public int destroy() {
       if (!isRunning()) {
         return getExitCode();
       }
+      log.info("Command failed to close cleanly. Destroying forcefully (v2). " + this);
     }
 
     watchdog.destroyHarder();
@@ -243,9 +244,7 @@ private void waitForTerminationAfterDestroy(int duration, TimeUnit unit) {
     }
 
     private void destroyHarder() {
-      log.info("Command failed to close cleanly. Destroying forcefully (v2). " + this);
-      Process ourProc = process;
-      ProcessUtils.killProcess(ourProc);
+      ProcessUtils.killProcess(process);
     }
   }
 

File: java/server/src/org/openqa/grid/web/servlet/handler/WebDriverRequest.java
Patch:
@@ -46,7 +46,7 @@ public RequestType extractRequestType() {
       return RequestType.START_SESSION;
     } else if (getMethod().equalsIgnoreCase("DELETE")) {
       ExternalSessionKey externalKey = ExternalSessionKey.fromWebDriverRequest(getPathInfo());
-      if (getPathInfo().endsWith("/session/" + externalKey.getKey())) {
+      if (externalKey != null && getPathInfo().endsWith("/session/" + externalKey.getKey())) {
         return RequestType.STOP_SESSION;
       }
     }

File: java/server/src/org/openqa/selenium/remote/server/handler/WebDriverHandler.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.openqa.selenium.remote.server.handler;
 
+import com.google.common.base.Preconditions;
+
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.internal.WrapsDriver;
 import org.openqa.selenium.remote.SessionId;
@@ -84,6 +86,6 @@ protected WebDriver getUnwrappedDriver() {
     while (toReturn instanceof WrapsDriver) {
       toReturn = ((WrapsDriver) toReturn).getWrappedDriver();
     }
-    return toReturn;
+    return Preconditions.checkNotNull(toReturn);
   }
 }

File: java/server/src/org/openqa/selenium/remote/server/log/SessionLogsToFileRepository.java
Patch:
@@ -94,10 +94,11 @@ public List<LogRecord> getLogRecords(SessionId sessionId) throws IOException {
     if (logFile == null) {
       return new ArrayList<LogRecord>();
     }
-    logFile.openLogReader();
-    ObjectInputStream logObjInStream = logFile.getLogReader();
+
     List<LogRecord> logRecords = new ArrayList<LogRecord>();
     try {
+      logFile.openLogReader();
+      ObjectInputStream logObjInStream = logFile.getLogReader();
       LogRecord tmpLogRecord;
       while (null != (tmpLogRecord = (LogRecord) logObjInStream
           .readObject())) {

File: java/server/src/org/openqa/selenium/server/browserlaunchers/Proxies.java
Patch:
@@ -22,6 +22,8 @@
 import static org.openqa.selenium.remote.CapabilityType.ForSeleniumServer.ONLY_PROXYING_SELENIUM_TRAFFIC;
 import static org.openqa.selenium.remote.CapabilityType.ForSeleniumServer.PROXYING_EVERYTHING;
 
+import com.google.common.base.Preconditions;
+
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.Proxy;
 import org.openqa.selenium.WebDriverException;
@@ -105,7 +107,7 @@ static DoNotUseProxyPac newProxyPac(int port, String configuredProxy, String pro
 
     Object tempProxy = capabilities.getCapability(CapabilityType.PROXY);
     if (tempProxy != null) {
-      Proxy proxy = Proxy.extractFrom(capabilities);
+      Proxy proxy = Preconditions.checkNotNull(Proxy.extractFrom(capabilities));
       if (proxy.getHttpProxy() != null) {
         pac.defaults().toProxy(proxy.getHttpProxy());
       } else if (proxy.getProxyAutoconfigUrl() != null) {

File: java/server/test/org/openqa/grid/internal/DefaultToFIFOPriorityTest.java
Patch:
@@ -106,7 +106,7 @@ public void validateRequestAreHandledFIFO() throws InterruptedException {
         requests.get(0).getSession();
         break;
       } catch (Throwable e) {
-        // ignore.
+        cpt++;
       }
       Thread.sleep(250);
     }

File: java/client/src/org/openqa/selenium/opera/OperaOptions.java
Patch:
@@ -230,7 +230,7 @@ public JsonElement toJson() throws IOException {
    * @return DesiredCapabilities for Opera with these options.
    */
   DesiredCapabilities toCapabilities() {
-    DesiredCapabilities capabilities = DesiredCapabilities.opera();
+    DesiredCapabilities capabilities = DesiredCapabilities.operaBlink();
     capabilities.setCapability(CAPABILITY, this);
     return capabilities;
   }

File: java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java
Patch:
@@ -479,7 +479,7 @@ public int compareTo(RemoteProxy o) {
 
   @Override
   public String toString() {
-    return getRemoteHost().toString();
+    return getRemoteHost() != null ? getRemoteHost().toString() : "<detached>";
   }
 
   private final HtmlRenderer renderer = new DefaultHtmlRenderer(this);

File: java/client/test/com/thoughtworks/selenium/InternalSelenseTestBase.java
Patch:
@@ -77,11 +77,11 @@ public static void buildJavascriptLibraries() throws IOException {
 
     try {
       new Build().of(
-          "//java/client/src/org/openqa/selenium/internal/seleniumemulation",
+          "//java/client/src/com/thoughtworks/selenium/webdriven",
           "//third_party/js/sizzle"
       ).go();
 
-      File buildDir = InProject.locate("java/client/build/production/org/openqa/selenium/internal/seleniumemulation");
+      File buildDir = InProject.locate("java/client/build/production/com/thoughtworks/selenium/webdriven");
       buildDir = new File(buildDir, "selenium_atoms");
       if (!buildDir.exists()) {
         assertTrue(buildDir.mkdir());

File: java/client/src/org/openqa/selenium/os/WindowsUtils.java
Patch:
@@ -173,7 +173,7 @@ public static void killPID(String processID) {
     cmd.execute();
 
     String output = cmd.getStdOut();
-    if (cmd.getExitCode() == 0 || cmd.getExitCode() ==  128) {
+    if (cmd.getExitCode() == 0 || cmd.getExitCode() ==  128 || cmd.getExitCode() ==  255) {
       return;
     }
     throw new RuntimeException("exec return code " + cmd.getExitCode() + ": " + output);

File: java/server/test/org/openqa/grid/e2e/utils/GridTestHelper.java
Patch:
@@ -75,7 +75,7 @@ public static DesiredCapabilities getDefaultBrowserCapability() {
       caps.setBrowserName(browser);
       return caps;
     } else {
-      return DesiredCapabilities.firefox();
+      return DesiredCapabilities.htmlUnit();
     }
   }
 

File: java/client/src/org/openqa/selenium/interactions/internal/SingleKeyAction.java
Patch:
@@ -41,7 +41,7 @@ protected SingleKeyAction(Keyboard keyboard, Mouse mouse, Locatable locationProv
     this.key = key;
     boolean isModifier = false;
     for (Keys modifier : MODIFIER_KEYS) {
-      isModifier = isModifier | modifier.equals(key);
+      isModifier = isModifier || modifier.equals(key);
     }
 
     if (!isModifier) {

File: java/server/src/org/openqa/selenium/remote/server/DefaultDriverSessions.java
Patch:
@@ -102,6 +102,8 @@ private void registerDriver(Capabilities caps, String className) {
       log.log(Level.INFO, "Unable to register driver with className " + className + " due to ClassNotFoundException");
     } catch (NoClassDefFoundError e) {
       log.log(Level.WARNING, "Unable to register driver with className " + className + " due to NoClassDefFoundError");
+    } catch (UnsupportedClassVersionError e) {
+      log.log(Level.WARNING, "Unable to register driver with className " + className + " due to UnsupportedClassVersionError");
     }
   }
 

File: java/client/src/org/openqa/selenium/remote/JsonToBeanConverter.java
Patch:
@@ -127,6 +127,7 @@ private <T> T convert(Class<T> clazz, Object text, int depth) {
           response.setStatus(intStatus);
         }
       }
+      response.setSessionId(json.get("sessionId").getAsString());
 
       response.setValue(convert(Object.class, json.get("value")));
 

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -29,7 +29,6 @@
 import static org.openqa.selenium.WaitingConditions.elementTextToEqual;
 import static org.openqa.selenium.WaitingConditions.elementValueToEqual;
 import static org.openqa.selenium.support.ui.ExpectedConditions.visibilityOfElementLocated;
-import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.MARIONETTE;
@@ -49,7 +48,7 @@
 
 public class CorrectEventFiringTest extends JUnit4TestBase {
 
-  @Ignore(value = {CHROME, MARIONETTE}, reason = "Webkit bug 22261")
+  @Ignore(value = {MARIONETTE})
   @JavascriptEnabled
   @Test
   public void testShouldFireFocusEventWhenClicking() {
@@ -125,7 +124,7 @@ public void testShouldNotThrowIfEventHandlerThrows() {
     }
   }
 
-  @Ignore(value = {CHROME, MARIONETTE}, reason = "Webkit bug 22261")
+  @Ignore(value = {HTMLUNIT, MARIONETTE})
   @JavascriptEnabled
   @Test
   public void testShouldFireEventsInTheRightOrder() {
@@ -141,6 +140,7 @@ public void testShouldFireEventsInTheRightOrder() {
 
       assertTrue(event + " did not fire at all", index != -1);
       assertTrue(event + " did not fire in the correct order", index > lastIndex);
+      lastIndex = index;
     }
   }
 

File: java/client/test/org/openqa/selenium/support/SmallTests.java
Patch:
@@ -19,6 +19,7 @@
 import org.openqa.selenium.support.events.EventFiringWebDriverTest;
 import org.openqa.selenium.support.pagefactory.AjaxElementLocatorTest;
 import org.openqa.selenium.support.pagefactory.AnnotationsTest;
+import org.openqa.selenium.support.pagefactory.ByAllTest;
 import org.openqa.selenium.support.pagefactory.ByChainedTest;
 import org.openqa.selenium.support.pagefactory.DefaultElementLocatorTest;
 import org.openqa.selenium.support.pagefactory.DefaultFieldDecoratorTest;
@@ -40,6 +41,7 @@
     AjaxElementLocatorTest.class,
     AnnotationsTest.class,
     ByChainedTest.class,
+    ByAllTest.class,
     ColorTest.class,
     DefaultElementLocatorTest.class,
     DefaultFieldDecoratorTest.class,

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -119,7 +119,7 @@ public void testNoneStrategyShouldNotWaitForPageToRefresh() {
     assertTrue("Took too long to load page: " + duration, duration < 1000);
   }
 
-  @Ignore(value = {FIREFOX, IE, CHROME, SAFARI, MARIONETTE, PHANTOMJS, HTMLUNIT})
+  @Ignore(value = {IE, CHROME, SAFARI, MARIONETTE, PHANTOMJS, HTMLUNIT})
   @NeedsLocalEnvironment
   @Test
   public void testEagerStrategyShouldNotWaitForResources() {

File: java/client/src/org/openqa/selenium/support/How.java
Patch:
@@ -26,4 +26,5 @@ public enum How {
   PARTIAL_LINK_TEXT,
   TAG_NAME,
   XPATH,
+  UNSET
 }

File: java/client/src/org/openqa/selenium/support/pagefactory/AbstractAnnotations.java
Patch:
@@ -93,6 +93,7 @@ protected By buildByFromLongFindBy(FindBy findBy) {
         return By.cssSelector(using);
 
       case ID:
+      case UNSET:
         return By.id(using);
 
       case ID_OR_NAME:

File: java/client/src/org/openqa/selenium/remote/internal/HttpClientFactory.java
Patch:
@@ -129,15 +129,15 @@ public HttpClient getGridHttpClient(int connectionTimeout, int socketTimeout) {
   private SocketConfig createSocketConfig(int socketTimeout) {
     return SocketConfig.custom()
         .setSoReuseAddress(true)
-        .setSoTimeout(socketTimeout > 0 ? socketTimeout : TIMEOUT_THREE_HOURS)
+        .setSoTimeout(socketTimeout)
         .build();
   }
 
   private RequestConfig createRequestConfig(int connectionTimeout, int socketTimeout) {
     return RequestConfig.custom()
         .setStaleConnectionCheckEnabled(true)
-        .setConnectTimeout(connectionTimeout > 0 ? connectionTimeout : TIMEOUT_TWO_MINUTES)
-        .setSocketTimeout(socketTimeout > 0 ? socketTimeout : TIMEOUT_THREE_HOURS)
+        .setConnectTimeout(connectionTimeout)
+        .setSocketTimeout(socketTimeout)
         .build();
   }
 

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -29,8 +29,6 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 
-import com.sun.javafx.runtime.SystemProperties;
-
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.OutputType;
 import org.openqa.selenium.Platform;

File: java/client/src/org/openqa/selenium/opera/OperaOptions.java
Patch:
@@ -66,7 +66,7 @@ public class OperaOptions {
    * Key used to store a set of OperaOptions in a {@link DesiredCapabilities}
    * object.
    */
-  public static final String CAPABILITY = "chromeOptions";
+  public static final String CAPABILITY = "operaOptions";
 
   private String binary;
   private List<String> args = Lists.newArrayList();

File: java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
Patch:
@@ -51,6 +51,8 @@ public DesiredCapabilities() {
   }
 
   public DesiredCapabilities(Map<String, ?> rawMap) {
+    capabilities.putAll(rawMap);
+
     if (rawMap.containsKey(LOGGING_PREFS) && rawMap.get(LOGGING_PREFS) instanceof Map) {
       LoggingPreferences prefs = new LoggingPreferences();
       Map<String, String> prefsMap = (Map<String, String>) rawMap.get(LOGGING_PREFS);
@@ -59,10 +61,8 @@ public DesiredCapabilities(Map<String, ?> rawMap) {
         prefs.enable(logType, LogLevelMapping.toLevel(prefsMap.get(logType)));
       }
       capabilities.put(LOGGING_PREFS, prefs);
-      // So it does not get added twice
-      rawMap.remove(LOGGING_PREFS);
     }
-    capabilities.putAll(rawMap);
+
     Object value = capabilities.get(PLATFORM);
     if (value instanceof String) {
       try {

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -199,7 +199,7 @@ public void testShouldBeAbleToIterateOverAllOpenWindows() {
   @JavascriptEnabled
   @Test
   @Ignore(MARIONETTE)
-  public void testClickingOnAButtonThatClosesAnOpenWindowDoesNotCauseTheBrowserToHang() {
+  public void testClickingOnAButtonThatClosesAnOpenWindowDoesNotCauseTheBrowserToHang()
       throws Exception {
     assumeFalse(Browser.detect() == Browser.opera &&
                 TestUtilities.getEffectivePlatform().is(Platform.WINDOWS));

File: java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java
Patch:
@@ -63,7 +63,7 @@ public String convert(Object object) {
 
     try {
       JsonElement json = convertObject(object);
-      return new GsonBuilder().serializeNulls().create().toJson(json);
+      return new GsonBuilder().disableHtmlEscaping().serializeNulls().create().toJson(json);
     } catch (Exception e) {
       throw new WebDriverException("Unable to convert: " + object, e);
     }

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -278,8 +278,6 @@ protected ExtensionConnection connectTo(FirefoxBinary binary, FirefoxProfile pro
       }
     } catch (Exception e) {
       throw new WebDriverException(e);
-    } finally {
-      lock.unlock();
     }
   }
 

File: java/client/src/org/openqa/selenium/firefox/internal/MarionetteConnection.java
Patch:
@@ -115,7 +115,6 @@ public void start() throws IOException {
       }
 
       process.startProfile(profile, profileDir, "-foreground", "-marionette");
-      Thread.sleep(5000);
 
       // Just for the record; the critical section is all along while firefox is starting with the
       // profile.

File: java/client/src/org/openqa/selenium/os/UnixProcess.java
Patch:
@@ -25,7 +25,7 @@
 import com.google.common.collect.Maps;
 
 import org.apache.commons.exec.DefaultExecuteResultHandler;
-import org.apache.commons.exec.DefaultExecutor;
+import org.apache.commons.exec.DaemonExecutor;
 import org.apache.commons.exec.ExecuteWatchdog;
 import org.apache.commons.exec.Executor;
 import org.apache.commons.exec.PumpStreamHandler;
@@ -48,7 +48,7 @@ class UnixProcess implements OsProcess {
   private final ByteArrayOutputStream inputOut = new ByteArrayOutputStream();
   private volatile String allInput;
   private final DefaultExecuteResultHandler handler = new DefaultExecuteResultHandler();
-  private final Executor executor = new DefaultExecutor();
+  private final Executor executor = new DaemonExecutor();
 
   private volatile OutputStream drainTo;
   private SeleniumWatchDog executeWatchdog = new SeleniumWatchDog(

File: java/client/src/org/openqa/selenium/support/Color.java
Patch:
@@ -260,9 +260,9 @@ protected Color createColor(Matcher matcher, double a) {
         b = hueToRgb(luminocity1, luminocity2, h - 1.0 / 3.0);
       }
 
-      return new Color((short) (r * 256),
-          (short) (g * 256),
-          (short) (b * 256),
+      return new Color((short) Math.round(r * 255),
+          (short) Math.round(g * 255),
+          (short) Math.round(b * 255),
           a);
     }
 

File: java/client/src/org/openqa/selenium/lift/HamcrestWebDriverTestCase.java
Patch:
@@ -1,4 +1,5 @@
 /*
+Copyright 2015 Software Freedom Conservancy
 Copyright 2007-2009 Selenium committers
 
 Licensed under the Apache License, Version 2.0 (the "License");
@@ -96,9 +97,8 @@ protected void type(String text, Finder<WebElement, WebDriver> inputFinder) {
   }
 
   /**
-   * Syntactic sugar to use with {@link org.openqa.selenium.lift.HamcrestWebDriverTestCase type(String, Finder<WebElement,
-   * WebDriver>)}, e.g. type("cheese", into(textbox())); The into() method simply returns its
-   * argument.
+   * Syntactic sugar to use with {@link org.openqa.selenium.lift.HamcrestWebDriverTestCase},
+   * e.g. type("cheese", into(textbox())); The into() method simply returns its argument.
    */
   protected Finder<WebElement, WebDriver> into(Finder<WebElement, WebDriver> input) {
     return input;

File: java/client/src/org/openqa/selenium/net/NetworkInterfaceProvider.java
Patch:
@@ -1,4 +1,5 @@
 /*
+Copyright 2015 Software Freedom Conservancy
 Copyright 2007-2010 Selenium committers
 
 Licensed under the Apache License, Version 2.0 (the "License");
@@ -19,7 +20,7 @@
 
 /**
  * Provides information about the local network interfaces.
- * <p/>
+ *
  * Basically an abstraction created to allow stubbing of java.net.NetworkInterface, also soothes
  * some of the jdk1.2 idioms from this interface into jdk1.5 idioms.
  */

File: java/client/src/org/openqa/selenium/remote/BrowserType.java
Patch:
@@ -1,6 +1,6 @@
 /*
 Copyright 2011 Selenium committers
-Copyright 2011 Software Freedom Conservancy
+Copyright 2011-2015 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -27,12 +27,11 @@ public interface BrowserType {
   String GOOGLECHROME = "googlechrome";
   String SAFARI = "safari";
   /**
-   * @deprecated Use OPERA_BLINK or OPERA_PRESTO
+   * @deprecated Use OPERA_BLINK
    */
   @Deprecated
   String OPERA = "opera";
   String OPERA_BLINK = "operablink";
-  String OPERA_PRESTO = "operapresto";
   String IEXPLORE= "iexplore";
   String IEXPLORE_PROXY= "iexploreproxy";
   String SAFARI_PROXY = "safariproxy";

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -490,7 +490,7 @@ public void testNumberpadKeys() {
 
   @JavascriptEnabled
   @Ignore(value = {IE, MARIONETTE},
-          reason = "untested user agents, "IE: F4 triggers address bar")
+          reason = "untested user agents, IE: F4 triggers address bar")
   @Test
   public void testFunctionKeys() {
     driver.get(pages.javascriptPage);

File: java/client/test/org/openqa/selenium/TakesScreenshotTest.java
Patch:
@@ -227,7 +227,6 @@ public void testShouldCaptureScreenshotOfPageWithTooLongY() throws Exception {
                    " SAFARI: takes only visible viewport." +
                    " CHROME: takes only visible viewport." +
                    " PHANTOMJS: takes empty data of byte[], no errors. ")
-  )
   public void testShouldCaptureScreenshotOfPageWithTooLongXandY() throws Exception {
     driver.get(appServer.whereIs("screen/screen_too_long.html"));
 

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -598,6 +598,9 @@ protected Response execute(String driverCommand, Map<String, ?> parameters) {
     try {
       errorHandler.throwIfResponseFailed(response, System.currentTimeMillis() - start);
     } catch (WebDriverException ex) {
+      if (parameters != null && parameters.containsKey("using") && parameters.containsKey("value")) {
+        ex.addInfo("*** Element info", String.format("{Using=%s, value=%s}", parameters.get("using"), parameters.get("value")));
+      }
       ex.addInfo(WebDriverException.DRIVER_INFO, this.getClass().getName());
       if (getSessionId() != null) {
         ex.addInfo(WebDriverException.SESSION_ID, getSessionId().toString());

File: java/client/test/org/openqa/selenium/ByTest.java
Patch:
@@ -143,7 +143,7 @@ public void innerClassesArePublicSoThatTheyCanBeReusedElsewhere() {
     assertThat(new By.ByLinkText("a").toString(), equalTo("By.linkText: a"));
     assertThat(new By.ByName("a").toString(), equalTo("By.name: a"));
     assertThat(new By.ByTagName("a").toString(), equalTo("By.tagName: a"));
-    assertThat(new By.ByCssSelector("a").toString(), equalTo("By.selector: a"));
+    assertThat(new By.ByCssSelector("a").toString(), equalTo("By.cssSelector: a"));
     assertThat(new By.ByPartialLinkText("a").toString(), equalTo("By.partialLinkText: a"));
   }
 

File: java/client/test/org/openqa/selenium/safari/SafariDriverTests.java
Patch:
@@ -33,7 +33,6 @@
     AlertsTest.class,
     CleanSessionTest.class,
     CrossDomainTest.class,
-    SafariExtensionsTest.class,
     WebSocketConnectionTest.class
 })
 public class SafariDriverTests {

File: java/client/src/org/openqa/selenium/io/Zip.java
Patch:
@@ -103,7 +103,7 @@ private void addToZip(String basePath, ZipOutputStream zos, File toAdd) throws I
       FileInputStream fis = new FileInputStream(toAdd);
       String name = toAdd.getAbsolutePath().substring(basePath.length() + 1);
 
-      ZipEntry entry = new ZipEntry(name);
+      ZipEntry entry = new ZipEntry(name.replace('\\', '/'));
       zos.putNextEntry(entry);
 
       int len;

File: java/client/test/org/openqa/selenium/testing/drivers/Browser.java
Patch:
@@ -33,7 +33,9 @@ public boolean isJavascriptEnabled() {
   htmlunit_js,
   ie,
   none, // For those cases where you don't actually want a browser
-  opera,
+  @Deprecated opera,
+  operablink,
+  operapresto,
   opera_mobile,
   phantomjs,
   safari;

File: java/client/test/org/openqa/selenium/testing/drivers/ReflectionBackedDriverSupplier.java
Patch:
@@ -98,6 +98,8 @@ private Class<? extends WebDriver> mapToClass(Capabilities caps) {
 
     if (DesiredCapabilities.chrome().getBrowserName().equals(name)) {
       className = "org.openqa.selenium.testing.drivers.TestChromeDriver";
+    } else if (DesiredCapabilities.operaBlink().getBrowserName().equals(name)) {
+      className = "org.openqa.selenium.testing.drivers.TestOperaBlinkDriver";
     } else if (DesiredCapabilities.firefox().getBrowserName().equals(name)) {
       className = getFirefoxClassName();
     } else if (DesiredCapabilities.htmlUnit().getBrowserName().equals(name)) {

File: java/client/test/org/openqa/selenium/testing/drivers/WebDriverBuilder.java
Patch:
@@ -86,7 +86,7 @@ private List<Supplier<WebDriver>> getSuppliers(Capabilities desiredCaps,
     suppliers.add(new ExternalDriverSupplier(desiredCaps, requiredCaps));
     suppliers.add(new SauceBackedDriverSupplier(desiredCaps));
     suppliers.add(new RemoteSupplier(desiredCaps, requiredCaps));
-    suppliers.add(new OperaDriverSupplier(desiredCaps));
+    suppliers.add(new OperaPrestoDriverSupplier(desiredCaps));
     suppliers.add(new PhantomJSDriverSupplier(desiredCaps));
     suppliers.add(new TestInternetExplorerSupplier(desiredCaps));
     suppliers.add(new ReflectionBackedDriverSupplier(desiredCaps, requiredCaps));

File: java/client/src/org/openqa/selenium/remote/Augmenter.java
Patch:
@@ -68,7 +68,7 @@ protected RemoteWebDriver extractRemoteWebDriver(WebDriver driver) {
       return (RemoteWebDriver) driver;
 
     } else {
-      logger.warning("Augmenter should be applied to the instances of @Augmentable clases " +
+      logger.warning("Augmenter should be applied to the instances of @Augmentable classes " +
                      "or previously augmented instances only");
       return null;
     }

File: java/client/test/org/openqa/selenium/testing/JUnit4TestBase.java
Patch:
@@ -37,7 +37,6 @@
 import org.openqa.selenium.environment.webserver.AppServer;
 import org.openqa.selenium.internal.WrapsDriver;
 import org.openqa.selenium.remote.RemoteWebDriver;
-import org.openqa.selenium.support.ui.ExpectedCondition;
 import org.openqa.selenium.support.ui.Wait;
 import org.openqa.selenium.support.ui.WebDriverWait;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;

File: java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java
Patch:
@@ -28,6 +28,7 @@
 import org.openqa.selenium.Cookie;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.logging.LogEntries;
+import org.openqa.selenium.logging.LogLevelMapping;
 import org.openqa.selenium.logging.LoggingPreferences;
 import org.openqa.selenium.logging.SessionLogs;
 
@@ -106,7 +107,7 @@ private JsonElement convertObject(Object toConvert, int maxDepth) throws Excepti
     }
 
     if (toConvert instanceof Level) {
-      return new JsonPrimitive(toConvert.toString());
+      return new JsonPrimitive(LogLevelMapping.getName((Level) toConvert));
     }
 
     if (toConvert.getClass().isEnum() || toConvert instanceof Enum) {
@@ -117,7 +118,7 @@ private JsonElement convertObject(Object toConvert, int maxDepth) throws Excepti
       LoggingPreferences prefs = (LoggingPreferences) toConvert;
       JsonObject converted = new JsonObject();
       for (String logType : prefs.getEnabledLogTypes()) {
-        converted.addProperty(logType, prefs.getLevel(logType).toString());
+        converted.addProperty(logType, LogLevelMapping.getName(prefs.getLevel(logType)));
       }
       return converted;
     }

File: java/client/test/com/thoughtworks/selenium/WebDriverSeleniumTestSuite.java
Patch:
@@ -19,6 +19,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 
+import com.thoughtworks.selenium.BaseSuite;
 import com.thoughtworks.selenium.corebased.SeleniumMouseTest;
 import com.thoughtworks.selenium.corebased.TestAddLocationStrategy;
 import com.thoughtworks.selenium.corebased.TestAddSelection;

File: java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
Patch:
@@ -165,7 +165,7 @@ public void setCapability(String capabilityName, boolean value) {
 
   public void setCapability(String capabilityName, String value) {
     if (PLATFORM.equals(capabilityName)) {
-      capabilities.put(capabilityName, Platform.valueOf(value));
+      capabilities.put(capabilityName, Platform.fromString(value));
     } else {
       capabilities.put(capabilityName, value);
     }
@@ -177,7 +177,7 @@ public void setCapability(String capabilityName, Platform value) {
 
   public void setCapability(String key, Object value) {
     if (PLATFORM.equals(key) && value instanceof String) {
-      capabilities.put(key, Platform.valueOf((String) value));
+      capabilities.put(key, Platform.fromString((String) value));
     } else {
       capabilities.put(key, value);
     }

File: java/client/src/org/openqa/selenium/remote/JsonToBeanConverter.java
Patch:
@@ -95,7 +95,7 @@ private <T> T convert(Class<T> clazz, Object text, int depth) {
       JsonObject json = new JsonParser().parse((String) text).getAsJsonObject();
 
       SessionId sessionId = null;
-      if (json.has("sessionId")) {
+      if (json.has("sessionId") && !json.get("sessionId").isJsonNull()) {
         sessionId = convert(SessionId.class, json.get("sessionId"), depth + 1);
       }
 

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.concurrent.Callable;
 import java.util.concurrent.TimeUnit;
 
-
 import net.sourceforge.htmlunit.corejs.javascript.Context;
 import net.sourceforge.htmlunit.corejs.javascript.ContextAction;
 import net.sourceforge.htmlunit.corejs.javascript.Function;

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.junit.Test;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.JavascriptEnabled;
 
 import java.util.List;
 
@@ -35,7 +36,6 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
-import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.MARIONETTE;
@@ -398,7 +398,7 @@ public void testMultipleAttributeShouldBeTrueWhenSelectHasMultipleWithValueAsSom
     assertEquals("true", element.getAttribute("multiple"));
   }
 
-  @Ignore({HTMLUNIT})
+  @JavascriptEnabled
   @Test
   public void testGetAttributeOfUserDefinedProperty() {
     driver.get(pages.userDefinedProperty);

File: java/client/src/org/openqa/selenium/JavascriptExecutor.java
Patch:
@@ -122,8 +122,8 @@ public interface JavascriptExecutor {
    *       "  }" +
    *       "};" +
    *       "xhr.send();");
-   *   JSONObject json = new JSONObject((String) response);
-   *   assertEquals("cheese", json.getString("food"));
+   *   JsonObject json = new JsonParser().parse((String) response);
+   *   assertEquals("cheese", json.get("food").getAsString());
    * </pre></code>
    *
    * <p>

File: java/client/src/org/openqa/selenium/logging/profiler/HttpProfilerLogEntry.java
Patch:
@@ -18,9 +18,8 @@
 
 import java.util.Map;
 
-import org.json.JSONObject;
-
 import com.google.common.collect.ImmutableMap;
+import com.google.gson.Gson;
 
 public class HttpProfilerLogEntry extends ProfilerLogEntry {
 
@@ -33,7 +32,7 @@ private static String constructMessage(EventType eventType, String commandName,
       "event", eventType.toString(),
       "command", commandName,
       "startorend", isStart ? "start" : "end");
-    return new JSONObject(map).toString();
+    return new Gson().toJson(map);
   }
 
 }

File: java/server/src/org/openqa/grid/internal/RemoteProxy.java
Patch:
@@ -18,7 +18,8 @@
 
 package org.openqa.grid.internal;
 
-import org.json.JSONObject;
+import com.google.gson.JsonObject;
+
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.common.exception.GridException;
 import org.openqa.grid.internal.utils.CapabilityMatcher;
@@ -159,7 +160,7 @@ public interface RemoteProxy extends Comparable<RemoteProxy> {
    *
    * @throws GridException if the node is down.
    */
-  JSONObject getStatus() throws GridException;
+  JsonObject getStatus() throws GridException;
 
   /**
    * Checks if the node has the capability requested.

File: java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java
Patch:
@@ -83,8 +83,8 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
     }
 
     // TODO freynaud : load template desiredCapability from the hub. Is that useful?
-
     final RemoteProxy proxy = BaseRemoteProxy.getNewInstance(server, getRegistry());
+
     reply(response, "ok");
 
     new Thread(new Runnable() {  // Thread safety reviewed

File: java/server/test/org/openqa/grid/e2e/GridE2ETests.java
Patch:
@@ -31,8 +31,8 @@
     HubRestart.class,
     HubRestartNeg.class,
     //Issue1586.class, // extremely slow test, for issue1586. Excluding from regression.
-    WebDriverPriorityDemo.class, // not yet moved to JUnit
-    BrowserTimeOutTest.class,
+    WebDriverPriorityDemo.class,
+    //BrowserTimeOutTest.class, // broken on CI, needs investigation
     CrashWhenStartingBrowserTest.class,
     DefaultProxyFindsFirefoxLocationsTest.class,
     DefaultProxyIsUnregisteredIfDownForTooLongTest.class,

File: java/server/test/org/openqa/grid/internal/DetachedRemoteProxy.java
Patch:
@@ -17,7 +17,8 @@
 
 package org.openqa.grid.internal;
 
-import org.json.JSONObject;
+import com.google.gson.JsonObject;
+
 import org.openqa.grid.common.RegistrationRequest;
 import org.openqa.grid.common.exception.GridException;
 
@@ -28,7 +29,7 @@ public DetachedRemoteProxy(RegistrationRequest request, Registry registry) {
   }
 
   @Override
-  public JSONObject getStatus() throws GridException {
+  public JsonObject getStatus() throws GridException {
     return null; // just to make sure there is no GridException thrown
   }
 

File: java/client/test/org/openqa/selenium/environment/webserver/PathAugmentingStaticFileHandler.java
Patch:
@@ -45,7 +45,7 @@ protected class PathAugmentingFileWorker extends FileWorker {
     private PathAugmentingFileWorker(HttpRequest request,
                                      HttpResponse response,
                                      HttpControl control) {
-      super(request, response, control, Long.MAX_VALUE);
+      super(request, response, control);
     }
     
     @Override

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/SetNextConfirmationState.java
Patch:
@@ -33,7 +33,9 @@ protected Void handleSeleneseCommand(WebDriver driver, String locator, String va
     ((JavascriptExecutor) driver).executeScript(
         "var canUseLocalStorage = false; " +
         "try { canUseLocalStorage = !!window.localStorage; } catch(ex) { /* probe failed */ } " +
-        "if (canUseLocalStorage) { " +
+        "var canUseJSON = false; " +
+        "try { canUseJSON = !!JSON; } catch(ex) { /* probe failed */ } " +
+        "if (canUseLocalStorage && canUseJSON) { " +
         "  window.localStorage.setItem('__webdriverNextConfirm', JSON.stringify(arguments[0])); " +
         "} else { " +
         "  window.__webdriverNextConfirm = arguments[0];" +

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -284,9 +284,7 @@ protected ExtensionConnection connectTo(FirefoxBinary binary, FirefoxProfile pro
   }
 
   protected static Lock obtainLock(FirefoxProfile profile) {
-    int preferredPort =
-        profile.getIntegerPreference(FirefoxProfile.PORT_PREFERENCE, SocketLock.DEFAULT_PORT);
-    return new SocketLock(preferredPort);
+    return new SocketLock();
   }
 
   @Override

File: java/client/test/org/openqa/selenium/firefox/FirefoxSpecificTests.java
Patch:
@@ -30,7 +30,7 @@
     ExecutableTest.class,
     FirefoxCapabilitiesTest.class,
     FirefoxDriverTest.class,
-    FirefoxDriverUtilitiesTest.class,
+    // FirefoxDriverUtilitiesTest.class, // TODO: Fix these tests
     FirefoxProfileTest.class,
     NativeEventsTest.class,
     NewProfileExtensionConnectionTest.class,

File: java/server/src/org/openqa/selenium/server/InjectionHelper.java
Patch:
@@ -135,7 +135,7 @@ public static void init() {
         appendFileContent(sb, "/core/xpath/xmltoken.js");
         appendFileContent(sb, "/core/xpath/dom.js");
         appendFileContent(sb, "/core/xpath/xpath.js");
-        appendFileContent(sb, "/core/xpath/javascript-xpath-0.1.11.js");
+        appendFileContent(sb, "/core/xpath/javascript-xpath-0.1.12.js");
         appendFileContent(sb, "/core/scripts/user-extensions.js");
       } catch (Exception e) {
         if (failOnError) {
@@ -170,7 +170,7 @@ private static void writeScriptTags(OutputStream os) throws IOException {
     writeScriptTag(os, "/core/xpath/xmltoken.js");
     writeScriptTag(os, "/core/xpath/dom.js");
     writeScriptTag(os, "/core/xpath/xpath.js");
-    writeScriptTag(os, "/core/xpath/javascript-xpath-0.1.11.js");
+    writeScriptTag(os, "/core/xpath/javascript-xpath-0.1.12.js");
     writeScriptTag(os, "/core/scripts/user-extensions.js");
   }
 

File: java/client/src/org/openqa/selenium/chrome/ChromeDriver.java
Patch:
@@ -60,7 +60,7 @@
  *   {@literal @BeforeClass}
  *   public static void createAndStartService() {
  *     service = new ChromeDriverService.Builder()
- *         .usingChromeDriverExecutable(new File("path/to/my/chromedriver.exe"))
+ *         .usingDriverExecutable(new File("path/to/my/chromedriver.exe"))
  *         .usingAnyFreePort()
  *         .build();
  *     service.start();

File: java/client/src/org/openqa/selenium/support/ui/WebDriverWait.java
Patch:
@@ -65,7 +65,7 @@ public WebDriverWait(WebDriver driver, long timeOutInSeconds, long sleepInMillis
    * @param timeOutInSeconds The timeout in seconds when an expectation is
    * @param sleepTimeOut The timeout used whilst sleeping. Defaults to 500ms called.
    */
-  protected WebDriverWait(WebDriver driver, Clock clock, Sleeper sleeper, long timeOutInSeconds,
+  public WebDriverWait(WebDriver driver, Clock clock, Sleeper sleeper, long timeOutInSeconds,
       long sleepTimeOut) {
     super(driver, clock, sleeper);
     withTimeout(timeOutInSeconds, TimeUnit.SECONDS);

File: java/server/test/org/openqa/selenium/remote/server/ServerSpecificTests.java
Patch:
@@ -21,6 +21,7 @@
 import org.junit.runners.Suite;
 import org.openqa.selenium.remote.server.handler.UploadFileTest;
 import org.openqa.selenium.remote.server.handler.html5.UtilsTest;
+import org.openqa.selenium.remote.server.handler.interactions.SendKeyToActiveElementTest;
 import org.openqa.selenium.remote.server.rest.ResultConfigTest;
 import org.openqa.selenium.remote.server.xdrpc.CrossDomainRpcLoaderTest;
 
@@ -35,6 +36,7 @@
     RemoteWebDriverScreenshotTest.class,
     RemoteWebDriverTest.class,
     ResultConfigTest.class,
+    SendKeyToActiveElementTest.class,
     SessionCleanerTest.class,
     SessionLogsTest.class,
     UploadFileTest.class,

File: java/client/src/org/openqa/selenium/remote/internal/HttpClientFactory.java
Patch:
@@ -102,6 +102,7 @@ public HttpClient getGridHttpClient(int connection_timeout, int socket_timeout)
 
     RequestConfig requestConfig = RequestConfig.copy(createRequestConfig())
         .setConnectTimeout(connection_timeout > 0 ? connection_timeout : 120 * 1000)
+        .setSocketTimeout(socket_timeout > 0 ? socket_timeout : TIMEOUT_THREE_HOURS)
         .build();
 
     return HttpClientBuilder.create()
@@ -124,6 +125,7 @@ private RequestConfig createRequestConfig() {
     return RequestConfig.custom()
         .setStaleConnectionCheckEnabled(true)
         .setConnectTimeout(120 * 1000)
+        .setSocketTimeout(TIMEOUT_THREE_HOURS)
         .build();
   }
 

File: java/client/src/com/thoughtworks/selenium/webdriven/commands/SetNextConfirmationState.java
Patch:
@@ -31,7 +31,9 @@ public SetNextConfirmationState(boolean result) {
   @Override
   protected Void handleSeleneseCommand(WebDriver driver, String locator, String value) {
     ((JavascriptExecutor) driver).executeScript(
-        "if (window.localStorage) { " +
+        "var canUseLocalStorage = false; " +
+        "try { canUseLocalStorage = !!window.localStorage; } catch(ex) { /* probe failed */ } " +
+        "if (canUseLocalStorage) { " +
         "  window.localStorage.setItem('__webdriverNextConfirm', JSON.stringify(arguments[0])); " +
         "} else { " +
         "  window.__webdriverNextConfirm = arguments[0];" +

File: java/client/test/org/openqa/selenium/environment/webserver/AppServerTest.java
Patch:
@@ -27,7 +27,7 @@
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpGet;
-import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.impl.client.HttpClientBuilder;
 import org.junit.After;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -152,7 +152,7 @@ public void uploadsFile() throws Throwable {
   }
 
   private void assertUrlHasContentType(String url, String appcacheMimeType) {
-    HttpClient httpclient = new DefaultHttpClient();
+    HttpClient httpclient = HttpClientBuilder.create().build();
     HttpGet httpget = new HttpGet(url);
     HttpResponse response;
 

File: java/server/test/org/openqa/selenium/remote/server/SessionLogsTest.java
Patch:
@@ -33,7 +33,7 @@
 import org.apache.http.HttpResponse;
 import org.apache.http.client.HttpClient;
 import org.apache.http.client.methods.HttpPost;
-import org.apache.http.impl.client.DefaultHttpClient;
+import org.apache.http.impl.client.HttpClientBuilder;
 import org.apache.http.util.EntityUtils;
 import org.json.JSONObject;
 import org.junit.After;
@@ -108,7 +108,7 @@ public void sessionLogsShouldContainAllAvailableLogTypes() throws Exception {
   
   private static JSONObject getValueForPostRequest(URL serverUrl) throws Exception {
     String postRequest = serverUrl + "/logs";
-    HttpClient client = new DefaultHttpClient();
+    HttpClient client = HttpClientBuilder.create().build();
     HttpPost postCmd = new HttpPost(postRequest);
     HttpResponse response = client.execute(postCmd);
     HttpEntity entity = response.getEntity();

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -1395,7 +1395,7 @@ public void deleteCookieNamed(String name) {
       CookieManager cookieManager = getWebClient().getCookieManager();
 
       URL url = getRawUrl();
-      Set<com.gargoylesoftware.htmlunit.util.Cookie> rawCookies = cookieManager.getCookies(url);
+      Set<com.gargoylesoftware.htmlunit.util.Cookie> rawCookies = getWebClient().getCookies(url);
       for (com.gargoylesoftware.htmlunit.util.Cookie cookie : rawCookies) {
         if (name.equals(cookie.getName())) {
           cookieManager.removeCookie(cookie);
@@ -1423,7 +1423,7 @@ public Set<Cookie> getCookies() {
       }
 
       return ImmutableSet.copyOf(Collections2.transform(
-          getWebClient().getCookieManager().getCookies(url),
+          getWebClient().getCookies(url),
           htmlUnitCookieToSeleniumCookieTransformer));
     }
 

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.openqa.selenium.remote;
 
-import static org.apache.http.protocol.ExecutionContext.HTTP_TARGET_HOST;
+import static org.apache.http.protocol.HttpCoreContext.HTTP_TARGET_HOST;
 import static org.openqa.selenium.remote.DriverCommand.GET_ALL_SESSIONS;
 import static org.openqa.selenium.remote.DriverCommand.NEW_SESSION;
 import static org.openqa.selenium.remote.DriverCommand.QUIT;
@@ -30,7 +30,6 @@
 import org.apache.http.HttpHost;
 import org.apache.http.HttpResponse;
 import org.apache.http.NoHttpResponseException;
-import org.apache.http.auth.AuthScope;
 import org.apache.http.auth.UsernamePasswordCredentials;
 import org.apache.http.client.ClientProtocolException;
 import org.apache.http.client.HttpClient;
@@ -39,7 +38,6 @@
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.entity.ByteArrayEntity;
-import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.protocol.BasicHttpContext;
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.util.EntityUtils;

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -46,6 +46,7 @@
 
 public class FirefoxProfile {
   public static final String PORT_PREFERENCE = "webdriver_firefox_port";
+  public static final String ALLOWED_HOSTS_PREFERENCE = "webdriver_firefox_allowed_hosts";
 
   private static final String defaultPrefs = "/org/openqa/selenium/firefox/webdriver_prefs.json";
 

File: java/server/test/org/openqa/selenium/remote/server/RemoteWebDriverTests.java
Patch:
@@ -23,7 +23,7 @@
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     StandardSeleniumTests.class,
-//    ServerSpecificTests.class
+    ServerSpecificTests.class
 })
 public class RemoteWebDriverTests {
 }

File: java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
Patch:
@@ -26,13 +26,13 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.Platform;
+import org.openqa.selenium.logging.LogLevelMapping;
 import org.openqa.selenium.logging.LoggingPreferences;
 
 import java.io.Serializable;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
-import java.util.logging.Level;
 
 @SuppressWarnings("serial")
 public class DesiredCapabilities implements Serializable, Capabilities {
@@ -54,7 +54,7 @@ public DesiredCapabilities(Map<String, ?> rawMap) {
       Map<String, String> prefsMap = (Map<String, String>) rawMap.get(LOGGING_PREFS);
 
       for (String logType : prefsMap.keySet()) {
-        prefs.enable(logType, Level.parse(prefsMap.get(logType)));
+        prefs.enable(logType, LogLevelMapping.toLevel(prefsMap.get(logType)));
       }
       capabilities.put(LOGGING_PREFS, prefs);
       // So it does not get added twice

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -164,12 +164,12 @@ public String getHost() {
 
   public void start() throws Exception {
     initServer();
-    server.start();
     if (maxThread>0){
       QueuedThreadPool pool = new QueuedThreadPool();
       pool.setMaxThreads(maxThread);
       server.setThreadPool(pool);
     }
+    server.start();
   }
 
   public void stop() throws Exception {

File: java/server/src/org/openqa/selenium/remote/server/handler/UploadFile.java
Patch:
@@ -42,7 +42,7 @@ public String call() throws Exception {
     new Zip().unzip(file, tempDir);
     // Select the first file
     File[] allFiles = tempDir.listFiles();
-    if (allFiles.length != 1) {
+    if (allFiles == null || allFiles.length != 1) {
       throw new WebDriverException("Expected there to be only 1 file. There were: " +
           allFiles.length);
     }

File: java/client/src/org/openqa/selenium/firefox/internal/NewProfileExtensionConnection.java
Patch:
@@ -83,7 +83,7 @@ public void start() throws IOException {
 
     lock.lock(connectTimeout);
     try {
-      port = determineNextFreePort(DEFAULT_PORT);
+      port = determineNextFreePort(profile.getIntegerPreference(PORT_PREFERENCE, DEFAULT_PORT));
       profile.setPreference(PORT_PREFERENCE, port);
 
       profileDir = profile.layoutOnDisk();

File: java/client/test/org/openqa/selenium/firefox/FirefoxSpecificTests.java
Patch:
@@ -20,6 +20,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.openqa.selenium.firefox.internal.ExecutableTest;
+import org.openqa.selenium.firefox.internal.NewProfileExtensionConnectionTest;
 import org.openqa.selenium.firefox.internal.SocketLockTest;
 import org.openqa.selenium.firefox.internal.StreamsTest;
 
@@ -29,8 +30,10 @@
     ExecutableTest.class,
     FirefoxCapabilitiesTest.class,
     FirefoxDriverTest.class,
+    FirefoxDriverUtilitiesTest.class,
     FirefoxProfileTest.class,
     NativeEventsTest.class,
+    NewProfileExtensionConnectionTest.class,
     PreferencesTest.class,
     SocketLockTest.class,
     StreamsTest.class

File: java/server/src/org/openqa/grid/selenium/GridLauncher.java
Patch:
@@ -80,9 +80,11 @@ public static void main(String[] args) throws Exception {
         throw new RuntimeException(e);
       }
     } else {
+      boolean logLongForm = helper.isParamPresent("-logLongForm");
       for (Handler handler : Logger.getLogger("").getHandlers()) {
         if (handler instanceof ConsoleHandler) {
           handler.setLevel(logLevel);
+          handler.setFormatter(new TerseFormatter(logLongForm));
         }
       }
     }

File: java/server/src/org/openqa/selenium/server/cli/RemoteControlLauncher.java
Patch:
@@ -80,7 +80,9 @@ public static void usage(String msg) {
         INDENT,
         "-trustAllSSLCertificates: Forces the Selenium proxy to trust all SSL certificates.  This doesn't work in browsers that don't use the Selenium proxy.");
     printWrappedLine(INDENT,
-        "-log <logFileName>: writes lots of debug information out to a log file");
+        "-log <logFileName>: writes lots of debug information out to a log file and disables logging to console");
+    printWrappedLine(INDENT,
+        "-logLongForm: writes information out to console in long format (for debugging purpose)");
     printWrappedLine(
         INDENT,
         "-htmlSuite <browser> <startURL> <suiteFile> <resultFile>: Run a single HTML Selenese (Selenium Core) suite and then exit immediately, using the specified browser (e.g. \"*firefox\") on the specified URL (e.g. \"http://www.google.com\").  You need to specify the absolute path to the HTML test suite as well as the path to the HTML results file we'll generate.");

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -264,6 +264,7 @@ public String forward(SeleniumBasedRequest request, HttpServletResponse response
 
             final byte[] bytes = drainInputStream(in);
             writeRawBody(response, bytes);
+            contentBeingForwarded = bytes;
 
           } finally {
             EntityUtils.consume(responseBody);

File: java/client/src/org/openqa/selenium/os/ExecutableFinder.java
Patch:
@@ -34,7 +34,7 @@
 
 class ExecutableFinder {
   private static final ImmutableSet<String> ENDINGS = Platform.getCurrent().is(WINDOWS) ?
-      ImmutableSet.of("", ".exe", ".com", ".bat") : ImmutableSet.of("");
+      ImmutableSet.of("", ".cmd", ".exe", ".com", ".bat") : ImmutableSet.of("");
 
   private static final Method JDK6_CAN_EXECUTE = findJdk6CanExecuteMethod();
 

File: java/client/src/org/openqa/selenium/os/OsProcess.java
Patch:
@@ -45,4 +45,6 @@ interface OsProcess {
   String getStdOut();
   
   boolean isRunning();
+
+  void checkForError();
 }

File: java/client/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -162,6 +162,7 @@ public void start() throws IOException {
       URL status = new URL(url.toString() + "/status");
       new UrlChecker().waitUntilAvailable(20, SECONDS, status);
     } catch (UrlChecker.TimeoutException e) {
+      process.checkForError();
       throw new WebDriverException("Timed out waiting for driver server to start.", e);
     } finally {
       lock.unlock();

File: java/server/src/org/openqa/selenium/remote/server/DefaultDriverSessions.java
Patch:
@@ -72,9 +72,7 @@ protected DefaultDriverSessions(Platform runningOn, DriverFactory factory) {
   private void registerDefaults(Platform current) {
     for (Map.Entry<Capabilities, String> entry : defaultDrivers.entrySet()) {
       Capabilities caps = entry.getKey();
-      if (caps.getPlatform() != null && caps.getPlatform().is(current)) {
-        registerDriver(caps, entry.getValue());
-      } else if (caps.getPlatform() == null) {
+      if (caps.getPlatform() == null || caps.getPlatform() == Platform.ANY || current.is(caps.getPlatform())) {
         registerDriver(caps, entry.getValue());
       } else {
         log.info("Default driver " + entry.getValue() + " registration is skipped: registration capabilities "

File: java/client/src/org/openqa/selenium/os/OsProcess.java
Patch:
@@ -35,6 +35,8 @@ interface OsProcess {
   void executeAsync();
 
   void waitFor() throws InterruptedException;
+  
+  void waitFor(long timeout) throws InterruptedException;
 
   int destroy();
 

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -231,7 +231,7 @@ static BrowserVersion determineBrowserVersion(Capabilities capabilities) {
     }
 
     if (BrowserType.FIREFOX.equals(browserName)) {
-      return BrowserVersion.FIREFOX_17;
+      return BrowserVersion.FIREFOX_24;
     }
 
     if (BrowserType.CHROME.equals(browserName)) {

File: java/client/test/org/openqa/selenium/htmlunit/HtmlUnitCapabilitiesTest.java
Patch:
@@ -44,7 +44,7 @@ public void configurationViaDirectCapabilities() {
         new DesiredCapabilities(BrowserType.FIREFOX, "", Platform.ANY);
 
     assertEquals(HtmlUnitDriver.determineBrowserVersion(firefoxCapabilities),
-        BrowserVersion.FIREFOX_17);
+        BrowserVersion.FIREFOX_24);
   }
 
   @Test
@@ -53,7 +53,7 @@ public void configurationOfFirefoxViaRemote() {
         new DesiredCapabilities(BrowserType.HTMLUNIT, "firefox", Platform.ANY);
 
     assertEquals(HtmlUnitDriver.determineBrowserVersion(firefoxCapabilities),
-        BrowserVersion.FIREFOX_17);
+        BrowserVersion.FIREFOX_24);
   }
 
   @Test

File: java/server/src/org/openqa/selenium/remote/server/DefaultDriverSessions.java
Patch:
@@ -99,9 +99,9 @@ private void registerDriver(Capabilities caps, String className) {
     try {
       registerDriver(caps, Class.forName(className).asSubclass(WebDriver.class));
     } catch (ClassNotFoundException e) {
-      log.log(Level.INFO, "Unable to register driver with className " + className + " - not be able to create due " + e.getMessage(), e);
+      log.log(Level.INFO, "Unable to register driver with className " + className + " due to ClassNotFoundException");
     } catch (NoClassDefFoundError e) {
-      log.log(Level.WARNING, "Unable to register driver with className " + className + " - dependency missing due " + e.getMessage(), e);
+      log.log(Level.WARNING, "Unable to register driver with className " + className + " due to NoClassDefFoundError");
     }
   }
 

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -81,7 +81,7 @@ public class RemoteWebDriver implements WebDriver, JavascriptExecutor,
   private static final Logger logger = Logger.getLogger(RemoteWebDriver.class.getName());
   private Level level = Level.FINE;
 
-  private ErrorHandler errorHandler;
+  private ErrorHandler errorHandler = new ErrorHandler();
   private CommandExecutor executor;
   private Capabilities capabilities;
   private SessionId sessionId;
@@ -102,7 +102,6 @@ protected RemoteWebDriver() {
 
   public RemoteWebDriver(CommandExecutor executor, Capabilities desiredCapabilities,
       Capabilities requiredCapabilities) {
-    this.errorHandler = new ErrorHandler();
     this.executor = executor;
 
     init(desiredCapabilities, requiredCapabilities);

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -18,6 +18,8 @@
 
 package org.openqa.selenium.htmlunit;
 
+import com.google.common.base.Throwables;
+
 import org.openqa.selenium.By;
 import org.openqa.selenium.Dimension;
 import org.openqa.selenium.ElementNotVisibleException;
@@ -136,6 +138,7 @@ public void click() {
     try {
       verifyCanInteractWithElement();
     } catch (InvalidElementStateException e) {
+      Throwables.propagateIfInstanceOf(e, ElementNotVisibleException.class);
       // Swallow disabled element case
       // Clicking disabled elements should still be passed through,
       // we just don't expect any state change

File: java/client/src/org/openqa/selenium/browserlaunchers/locators/GoogleChromeLocator.java
Patch:
@@ -61,7 +61,9 @@ protected String[] usualLauncherLocations() {
    */
   protected String[] usualWindowsLauncherLocations() {
     return new String[] {
-        WindowsUtils.getLocalAppDataPath() + "\\Google\\Chrome\\Application"
+        WindowsUtils.getLocalAppDataPath() + "\\Google\\Chrome\\Application",
+        WindowsUtils.getProgramFiles86Path() + "\\Google\\Chrome\\Application",
+        WindowsUtils.getProgramFilesPath() + "\\Google\\Chrome\\Application"
     };
   }
 

File: java/client/src/org/openqa/selenium/remote/Augmenter.java
Patch:
@@ -68,7 +68,7 @@ protected RemoteWebDriver extractRemoteWebDriver(WebDriver driver) {
       return (RemoteWebDriver) driver;
 
     } else {
-      logger.warning("Augmenter should be applied to RemoteWebDriver instances " +
+      logger.warning("Augmenter should be applied to the instances of @Augmentable clases " +
                      "or previously augmented instances only");
       return null;
     }

File: java/client/src/org/openqa/selenium/ElementNotVisibleException.java
Patch:
@@ -20,7 +20,7 @@
  * Thrown to indicate that although an element is present on the DOM, it is not visible, and so is
  * not able to be interacted with.
  */
-public class ElementNotVisibleException extends WebDriverException {
+public class ElementNotVisibleException extends InvalidElementStateException {
   public ElementNotVisibleException(String message) {
     super(message);
   }

File: java/client/test/org/openqa/selenium/safari/SafariTestBase.java
Patch:
@@ -3,6 +3,7 @@
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.remote.DesiredCapabilities;
+import org.openqa.selenium.support.ui.WebDriverWait;
 import org.openqa.selenium.testing.JUnit4TestBase;
 
 import org.junit.Before;
@@ -15,6 +16,8 @@ public class SafariTestBase extends JUnit4TestBase {
   @Override
   public void createDriver() {
     driver = actuallyCreateDriver(DesiredCapabilities.safari());
+    wait = new WebDriverWait(driver, 30);
+    shortWait = new WebDriverWait(driver, 5);
   }
 
   public static WebDriver actuallyCreateDriver(Capabilities capabilities) {

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -122,7 +122,7 @@ public void testShouldAllowUsersToDismissAnAlertManually() {
     wait.until(presenceOfElementLocated(By.id("alert"))).click();
 
     Alert alert =  wait.until(alertIsPresent());
-    alert.dismiss();
+    alert.accept();
 
     // If we can perform any action, we're good to go
     assertEquals("Testing Alerts", driver.getTitle());
@@ -209,7 +209,7 @@ public void testAlertShouldNotAllowAdditionalCommandsIfDismissed() {
     driver.findElement(By.id("alert")).click();
 
     Alert alert = wait.until(alertIsPresent());
-    alert.dismiss();
+    alert.accept();
 
     try {
       alert.getText();

File: java/client/test/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -287,7 +287,7 @@ public void handleFormWithJavascriptAction() {
     element.submit();
     Alert alert = driver.switchTo().alert();
     String text = alert.getText();
-    alert.dismiss();
+    alert.accept();
 
     assertEquals("Tasty cheese", text);
   }

File: java/server/src/org/openqa/selenium/remote/server/rest/RestishHandler.java
Patch:
@@ -16,7 +16,7 @@
 
 package org.openqa.selenium.remote.server.rest;
 
-public interface RestishHandler {
+public interface RestishHandler<T> {
 
-  ResultType handle() throws Exception;
+  T handle() throws Exception;
 }

File: java/server/test/org/openqa/selenium/remote/server/DriverServletTest.java
Patch:
@@ -104,7 +104,7 @@ public void navigateToUrlCommandHandler() throws IOException, ServletException,
         String.format("/session/%s/url", sessionId),
         new JSONObject().put("url", "http://www.google.com"));
 
-    assertEquals(HttpServletResponse.SC_NO_CONTENT, response.getStatus());
+    assertEquals(HttpServletResponse.SC_OK, response.getStatus());
 
     verify(driver).get("http://www.google.com");
   }
@@ -135,7 +135,7 @@ public void handlesWelformedAndSuccessfulCrossDomainRpcs()
 
     verify(driver).get("http://www.google.com");
     assertEquals(HttpServletResponse.SC_OK, response.getStatus());
-    assertEquals("application/json; charset=UTF-8",
+    assertEquals("application/json; charset=utf-8",
         response.getHeader("content-type"));
 
     JSONObject jsonResponse = new JSONObject(response.getBody());
@@ -158,7 +158,7 @@ public void doesNotRedirectForNewSessionsRequestedViaCrossDomainRpc()
                     .put(CapabilityType.VERSION, true))));
 
     assertEquals(HttpServletResponse.SC_OK, response.getStatus());
-    assertEquals("application/json; charset=UTF-8",
+    assertEquals("application/json; charset=utf-8",
         response.getHeader("content-type"));
 
     JSONObject jsonResponse = new JSONObject(response.getBody());

File: java/server/test/org/openqa/selenium/remote/server/ServerSpecificTests.java
Patch:
@@ -24,14 +24,12 @@
 import org.openqa.selenium.remote.server.rest.ResultConfigTest;
 import org.openqa.selenium.remote.server.rest.UrlMapperTest;
 import org.openqa.selenium.remote.server.xdrpc.CrossDomainRpcLoaderTest;
-import org.openqa.selenium.remote.server.xdrpc.CrossDomainRpcRendererTest;
 import org.openqa.selenium.remote.server.xdrpc.HttpServletRequestProxyTest;
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     CapabilitiesComparatorTest.class,
     CrossDomainRpcLoaderTest.class,
-    CrossDomainRpcRendererTest.class,
     DefaultSessionTest.class,
     DriverFactoryTest.class,
     DriverServletTest.class,

File: java/server/test/org/openqa/selenium/remote/server/handler/UploadFileTest.java
Patch:
@@ -71,8 +71,7 @@ public void shouldWriteABase64EncodedZippedFileToDiskAndKeepName() throws Except
     UploadFile uploadFile = new UploadFile(session);
     Map<String, Object> args = ImmutableMap.of("file", (Object) encoded);
     uploadFile.setJsonParameters(args);
-    uploadFile.call();
-    String path = (String) uploadFile.getResponse().getValue();
+    String path = uploadFile.call();
 
     assertTrue(new File(path).exists());
     assertTrue(path.endsWith(tempFile.getName()));

File: java/client/test/org/openqa/selenium/testing/JUnit4TestBase.java
Patch:
@@ -36,6 +36,7 @@
 import org.openqa.selenium.environment.TestEnvironment;
 import org.openqa.selenium.environment.webserver.AppServer;
 import org.openqa.selenium.internal.WrapsDriver;
+import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.support.ui.ExpectedCondition;
 import org.openqa.selenium.support.ui.Wait;
 import org.openqa.selenium.support.ui.WebDriverWait;
@@ -101,7 +102,8 @@ public WebDriver getWrappedDriver() {
   public static WebDriver actuallyCreateDriver() {
     WebDriver driver = storedDriver.get();
 
-    if (driver == null) {
+    if (driver == null ||
+        (driver instanceof RemoteWebDriver && ((RemoteWebDriver)driver).getSessionId() == null)) {
       driver = new WebDriverBuilder().get();
       storedDriver.set(driver);
     }

File: java/client/src/org/openqa/selenium/support/FindAll.java
Patch:
@@ -34,7 +34,7 @@
  * </pre>
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface FindAll {
   FindBy[] value();
 }

File: java/client/src/org/openqa/selenium/support/FindBy.java
Patch:
@@ -47,7 +47,7 @@
  * </pre>
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface FindBy {
   How how() default How.ID;
 

File: java/client/src/org/openqa/selenium/support/FindBys.java
Patch:
@@ -33,7 +33,7 @@
  * </pre>
  */
 @Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.FIELD)
+@Target({ElementType.FIELD, ElementType.TYPE})
 public @interface FindBys {
   FindBy[] value();
 }

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -34,6 +34,7 @@
 import com.gargoylesoftware.htmlunit.StringWebResponse;
 import com.gargoylesoftware.htmlunit.TopLevelWindow;
 import com.gargoylesoftware.htmlunit.UnexpectedPage;
+import com.gargoylesoftware.htmlunit.Version;
 import com.gargoylesoftware.htmlunit.WaitingRefreshHandler;
 import com.gargoylesoftware.htmlunit.WebClient;
 import com.gargoylesoftware.htmlunit.WebClientOptions;
@@ -443,6 +444,7 @@ public Capabilities getCapabilities() {
 
     capabilities.setPlatform(Platform.getCurrent());
     capabilities.setJavascriptEnabled(isJavascriptEnabled());
+    capabilities.setVersion(Version.getProductVersion());
     capabilities.setCapability(SUPPORTS_FINDING_BY_CSS, true);
 
     return capabilities;

File: java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java
Patch:
@@ -78,10 +78,9 @@ public DefaultRemoteProxy(RegistrationRequest request, Registry registry) {
   }
 
   public void beforeRelease(TestSession session) {
-    // release the resources remotely.
+    // release the resources remotely if the remote started a browser.
     if (session.getExternalKey() == null) {
-      throw new IllegalStateException(
-          "cannot release the resources, they haven't been reserved properly.");
+      return;
     }
     boolean ok = session.sendDeleteSessionRequest();
     if (!ok) {

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -108,6 +108,7 @@ private void initServer() {
         socketListener.setHost(host);
       }
       socketListener.setPort(port);
+      socketListener.setLowResourcesMaxIdleTime(6000);
       server.addConnector(socketListener);
 
       ServletContextHandler root = new ServletContextHandler(ServletContextHandler.SESSIONS);

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -265,6 +265,7 @@ public String forward(SeleniumBasedRequest request, HttpServletResponse response
           final byte[] bytes = drainInputStream(in);
           writeRawBody(response, bytes);
 
+          contentBeingForwarded = bytes;
         } finally {
           EntityUtils.consume(responseBody);
         }
@@ -276,7 +277,9 @@ public String forward(SeleniumBasedRequest request, HttpServletResponse response
         wrappedResponse.setForwardedContent(contentBeingForwarded);
         ((CommandListener) slot.getProxy()).afterCommand(this, request, wrappedResponse);
       }
+
       response.flushBuffer();
+
       return res;
     } finally {
       forwardingRequest = false;

File: java/client/src/org/openqa/selenium/interactions/internal/SingleKeyAction.java
Patch:
@@ -27,7 +27,9 @@
  */
 public abstract class SingleKeyAction extends KeysRelatedAction {
   protected final Keys key;
-  private static final Keys[] MODIFIER_KEYS = {Keys.SHIFT, Keys.CONTROL, Keys.ALT, Keys.META};
+  private static final Keys[] MODIFIER_KEYS = {Keys.SHIFT, Keys.CONTROL, Keys.ALT, Keys.META,
+                                               Keys.COMMAND, Keys.LEFT_ALT, Keys.LEFT_CONTROL,
+                                               Keys.LEFT_SHIFT};
 
   protected SingleKeyAction(Keyboard keyboard, Mouse mouse, Keys key) {
     this(keyboard, mouse, null, key);

File: java/client/test/org/openqa/selenium/v1/internal/seleniumemulation/TimerTest.java
Patch:
@@ -23,7 +23,7 @@
 import org.junit.Test;
 import org.openqa.selenium.WebDriver;
 import com.thoughtworks.selenium.webdriven.SeleneseCommand;
-import com.thoughtworks.selenium.webdriven.commands.Timer;
+import com.thoughtworks.selenium.webdriven.Timer;
 
 import static org.junit.Assert.fail;
 

File: java/client/src/org/openqa/selenium/WebDriver.java
Patch:
@@ -393,7 +393,7 @@ interface TargetLocator {
      * Switch the focus of future commands for this driver to the context with the given name.
      *
      * @param name The name of the context as returned by
-     *        {@link WebDriver#getContexts()}
+     *        {@link WebDriver#getContextHandles()}
      * @return This driver focused on the given window
      * @throws NoSuchContextException If the context cannot be found
      */

File: java/client/src/org/openqa/selenium/interactions/Actions.java
Patch:
@@ -256,7 +256,7 @@ public Actions moveToElement(WebElement toElement) {
    * Moves the mouse to an offset from the top-left corner of the element.
    * The element is scrolled into view and its location is calculated using getBoundingClientRect.
    * @param toElement element to move to.
-   * @param xOffset Offset from the top-left corner. A negative value means coordinates right from
+   * @param xOffset Offset from the top-left corner. A negative value means coordinates left from
    * the element.
    * @param yOffset Offset from the top-left corner. A negative value means coordinates above
    * the element.

File: java/client/src/org/openqa/selenium/remote/JdkAugmenter.java
Patch:
@@ -96,8 +96,6 @@ protected <X> X create(RemoteWebDriver driver, Map<String, AugmenterProvider> au
         checkState(null == oldHandler, "Both %s and %s attempt to define %s.",
             oldHandler, augmentedImplementation.getClass(), method.getName());
       }
-      checkState(proxiedInterfaces.add(interfaceProvided), "%s already defines interface %s",
-          objectToAugment.getClass(), interfaceProvided);
     }
 
     if (augmentationHandlers.isEmpty()) {

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -273,7 +273,7 @@ public Response execute(Command command) throws IOException {
       }
       if (!GET_ALL_SESSIONS.equals(command.getName())
           && !NEW_SESSION.equals(command.getName())) {
-        throw new SessionNotFoundException("Session ID is null");
+        throw new SessionNotFoundException("Session ID is null. Using WebDriver after calling quit()?");
       }
     }
 

File: java/client/test/org/openqa/selenium/ExecutingAsyncJavascriptTest.java
Patch:
@@ -241,10 +241,10 @@ public void shouldCatchErrorsWhenExecutingInitialScript() {
   @Test
   public void shouldNotTimeoutWithMultipleCallsTheFirstOneBeingSynchronous() {
     driver.get(pages.ajaxyPage);
-    driver.manage().timeouts().setScriptTimeout(100, TimeUnit.MILLISECONDS);
+    driver.manage().timeouts().setScriptTimeout(10, TimeUnit.MILLISECONDS);
     assertTrue((Boolean) executor.executeAsyncScript("arguments[arguments.length - 1](true);"));
     assertTrue((Boolean) executor.executeAsyncScript(
-        "var cb = arguments[arguments.length - 1]; window.setTimeout(function(){cb(true);}, 99);"));
+        "var cb = arguments[arguments.length - 1]; window.setTimeout(function(){cb(true);}, 9);"));
   }
 
   @JavascriptEnabled

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -104,8 +104,6 @@ private void initServer() {
       server = new Server();
       SocketConnector socketListener = new SocketConnector();
       socketListener.setMaxIdleTime(60000);
-      socketListener.setLowResourcesMaxIdleTime(6000);
-
       if (isHostRestricted) {
         socketListener.setHost(host);
       }

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -104,6 +104,8 @@ private void initServer() {
       server = new Server();
       SocketConnector socketListener = new SocketConnector();
       socketListener.setMaxIdleTime(60000);
+      socketListener.setLowResourcesMaxIdleTime(6000);
+
       if (isHostRestricted) {
         socketListener.setHost(host);
       }

File: java/server/src/org/openqa/selenium/server/browserlaunchers/ServerHttpChannel.java
Patch:
@@ -33,6 +33,7 @@
 import java.net.ConnectException;
 import java.net.HttpURLConnection;
 import java.net.URL;
+import java.net.URLEncoder;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.UUID;
@@ -159,8 +160,8 @@ public void send(String postedData, String urlParams) throws IOException {
     }
 
     StringBuilder response = new StringBuilder("postedData=");
-    response.append(postedData);
-    
+    response.append(URLEncoder.encode(postedData, Charsets.UTF_8.name()));
+
     byte[] toSend = response.toString().getBytes(Charsets.UTF_8);
 
     connection = (HttpURLConnection) new URL(builder.toString()).openConnection();

File: java/client/src/org/openqa/selenium/interactions/internal/SingleKeyAction.java
Patch:
@@ -27,7 +27,7 @@
  */
 public abstract class SingleKeyAction extends KeysRelatedAction {
   protected final Keys key;
-  private static final Keys[] MODIFIER_KEYS = {Keys.SHIFT, Keys.CONTROL, Keys.ALT};
+  private static final Keys[] MODIFIER_KEYS = {Keys.SHIFT, Keys.CONTROL, Keys.ALT, Keys.META};
 
   protected SingleKeyAction(Keyboard keyboard, Mouse mouse, Keys key) {
     this(keyboard, mouse, null, key);

File: java/client/src/org/openqa/selenium/Cookie.java
Patch:
@@ -82,8 +82,6 @@ public Cookie(String name, String value, String domain, String path, Date expiry
     } else {
       this.expiry = null;
     }
-
-    validate();
   }
 
   /**
@@ -135,7 +133,7 @@ private static String stripPort(String domain) {
     return (domain == null) ? null : domain.split(":")[0];
   }
 
-  protected void validate() {
+  public void validate() {
     if (name == null || "".equals(name) || value == null || path == null) {
       throw new IllegalArgumentException("Required attributes are not set or " +
           "any non-null attribute set to null");

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -624,6 +624,7 @@ public Logs logs() {
     }
 
     public void addCookie(Cookie cookie) {
+      cookie.validate();
       execute(DriverCommand.ADD_COOKIE, ImmutableMap.of("cookie", cookie));
     }
 

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -1308,6 +1308,8 @@ public void refresh() {
       if (lastPage() instanceof HtmlPage) {
         try {
           ((HtmlPage) lastPage()).refresh();
+        } catch (SocketTimeoutException e) {
+          throw new TimeoutException(e);
         } catch (IOException e) {
           throw new WebDriverException(e);
         }

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -445,7 +445,7 @@ public void testShouldTimeoutIfAPageTakesTooLongToRefresh() {
     }
   }
 
-  @Ignore(value = {ANDROID, CHROME, IPHONE, OPERA, SAFARI, OPERA_MOBILE, MARIONETTE},
+  @Ignore(value = {ANDROID, CHROME, HTMLUNIT, IPHONE, OPERA, SAFARI, OPERA_MOBILE, MARIONETTE},
           reason = "Not implemented; Safari: see issue 687, comment 41",
           issues = {687})
   @NeedsLocalEnvironment

File: java/client/test/com/thoughtworks/selenium/webdriven/commands/GetAttributeTest.java
Patch:
@@ -15,12 +15,11 @@
  */
 
 
-package org.openqa.selenium.internal.seleniumemulation;
+package com.thoughtworks.selenium.webdriven.commands;
 
 import static org.junit.Assert.assertEquals;
 
 import com.thoughtworks.selenium.webdriven.JavascriptLibrary;
-import com.thoughtworks.selenium.webdriven.commands.GetAttribute;
 
 import org.junit.Test;
 

File: java/client/test/com/thoughtworks/selenium/webdriven/commands/TypeKeysTest.java
Patch:
@@ -14,7 +14,7 @@
 limitations under the License.
  */
 
-package org.openqa.selenium.internal.seleniumemulation;
+package com.thoughtworks.selenium.webdriven.commands;
 
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
@@ -27,6 +27,7 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.openqa.selenium.internal.seleniumemulation.AlertOverrideStub;
 
 public class TypeKeysTest {
   private ElementFinder elementFinder;

File: java/client/test/org/openqa/selenium/internal/seleniumemulation/AlertOverrideStub.java
Patch:
@@ -16,6 +16,8 @@
 
 package org.openqa.selenium.internal.seleniumemulation;
 
+import com.thoughtworks.selenium.webdriven.commands.AlertOverride;
+
 import org.openqa.selenium.WebDriver;
 
 public class AlertOverrideStub extends AlertOverride {

File: java/server/src/org/openqa/selenium/remote/server/JsonHttpRemoteConfig.java
Patch:
@@ -222,7 +222,6 @@ private void setUpMappings(DriverSessions driverSessions, Logger logger) {
 
     Result jsonErrorResult = new Result(MimeType.EMPTY,
                                         new JsonErrorExceptionResult(EXCEPTION, RESPONSE));
-    addGlobalHandler(ResultType.EXCEPTION, jsonErrorResult);
     addGlobalHandler(ResultType.ERROR, jsonErrorResult);
 
     Result xdrpcResult = new Result(MimeType.CROSS_DOMAIN_RPC,

File: java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java
Patch:
@@ -216,7 +216,7 @@ public void handle(String pathInfo, final HttpRequest request,
     } catch (SessionNotFoundException e){
       throw e;
     } catch (Exception e) {
-      result = ResultType.EXCEPTION;
+      result = ResultType.ERROR;
       log.log(Level.WARNING, "Exception thrown", e);
 
       Throwable toUse = getRootExceptionCause(e);
@@ -228,7 +228,7 @@ public void handle(String pathInfo, final HttpRequest request,
       }
     } catch (Error e) {
       log.info("Error: " + e.getMessage());
-      result = ResultType.EXCEPTION;
+      result = ResultType.ERROR;
       request.setAttribute("exception", e);
     }
 
@@ -248,7 +248,7 @@ public void handle(String pathInfo, final HttpRequest request,
 
   private void replyError(HttpRequest request, final HttpResponse response, Exception e)
       throws Exception {
-    Renderer renderer2 = getRenderer(ResultType.EXCEPTION, request);
+    Renderer renderer2 = getRenderer(ResultType.ERROR, request);
     request.setAttribute("exception",  e);
     renderer2.render(request, response, null);
   }

File: java/server/src/org/openqa/selenium/remote/server/rest/ResultType.java
Patch:
@@ -17,8 +17,6 @@
 package org.openqa.selenium.remote.server.rest;
 
 public enum ResultType {
-
   SUCCESS,
-  ERROR,
-  EXCEPTION,
+  ERROR
 }

File: java/server/test/org/openqa/selenium/remote/server/rest/ResultConfigTest.java
Patch:
@@ -129,7 +129,7 @@ public void testFailsWhenUnableToDetermineResultTypeForRequest_noHandlersRegiste
     final HttpRequest mockRequest = mock(HttpRequest.class);
 
     try {
-      config.getRenderer(ResultType.EXCEPTION, mockRequest);
+      config.getRenderer(ResultType.ERROR, mockRequest);
       fail("Should have thrown a NPE");
     } catch (NullPointerException expected) {
     }

File: java/client/test/org/openqa/selenium/environment/webserver/Jetty7AppServer.java
Patch:
@@ -245,12 +245,12 @@ protected ServletContextHandler addResourceHandler(String contextPath, File reso
     return context;
   }
 
-  private static int getHttpPortFromEnv() {
+  protected static int getHttpPortFromEnv() {
     String port = System.getenv(FIXED_HTTP_PORT_ENV_NAME);
     return port == null ? DEFAULT_HTTP_PORT : Integer.parseInt(port);
   }
 
-  private static int getHttpsPortFromEnv() {
+  protected static int getHttpsPortFromEnv() {
     String port = System.getenv(FIXED_HTTPS_PORT_ENV_NAME);
     return port == null ? DEFAULT_HTTPS_PORT : Integer.parseInt(port);
   }

File: java/client/src/org/openqa/selenium/WebDriverCommandProcessor.java
Patch:
@@ -276,9 +276,12 @@ private void setUpMethodMap() {
     seleneseMethods.put("isVisible", new IsVisible(elementFinder));
     seleneseMethods.put("keyDown", new KeyEvent(elementFinder, javascriptLibrary, keyState,
         "doKeyDown"));
+    seleneseMethods.put("keyDownNative", new KeyDownNative());
     seleneseMethods.put("keyPress", new TypeKeys(alertOverride, elementFinder));
+    seleneseMethods.put("keyPressNative", new KeyPressNative());
     seleneseMethods.put("keyUp",
         new KeyEvent(elementFinder, javascriptLibrary, keyState, "doKeyUp"));
+    seleneseMethods.put("keyUpNative", new KeyUpNative());
     seleneseMethods.put("metaKeyDown", new MetaKeyDown(keyState));
     seleneseMethods.put("metaKeyUp", new MetaKeyUp(keyState));
     seleneseMethods.put("mouseOver", new MouseEvent(elementFinder, javascriptLibrary, "mouseover"));

File: java/server/src/org/openqa/grid/web/servlet/handler/RequestHandler.java
Patch:
@@ -37,6 +37,7 @@
 import org.openqa.grid.internal.exception.NewSessionException;
 import org.openqa.grid.internal.listeners.Prioritizer;
 import org.openqa.grid.internal.listeners.TestSessionListener;
+import org.openqa.selenium.remote.DesiredCapabilities;
 
 
 /**
@@ -101,7 +102,8 @@ protected void forwardRequest(TestSession session, RequestHandler handler) throw
   public void process() {
     switch (request.getRequestType()) {
       case START_SESSION:
-        log.info("Got a request to create a new session: " + request.getDesiredCapabilities());
+        log.info("Got a request to create a new session: "
+                 + new DesiredCapabilities(request.getDesiredCapabilities()));
         try {
           registry.addNewSessionRequest(this);
           waitForSessionBound();

File: java/server/src/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -625,7 +625,7 @@ protected void runHtmlSuite() {
       String resultFilePath = getRequiredSystemProperty("htmlSuite.resultFilePath");
       File resultFile = new File(resultFilePath);
       File resultDir = resultFile.getParentFile();
-      if (!resultDir.exists() && !resultDir.mkdirs()) {
+      if ((resultDir != null) && !resultDir.exists() && !resultDir.mkdirs()) {
         RemoteControlLauncher.usage("can't create directory for result file " + resultFilePath);
         System.exit(1);
       }

File: java/server/src/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -624,7 +624,8 @@ protected void runHtmlSuite() {
       HTMLLauncher launcher = new HTMLLauncher(this);
       String resultFilePath = getRequiredSystemProperty("htmlSuite.resultFilePath");
       File resultFile = new File(resultFilePath);
-      if (! resultFile.getParentFile().mkdirs()) {
+      File resultDir = resultFile.getParentFile();
+      if (!resultDir.exists() && !resultDir.mkdirs()) {
         RemoteControlLauncher.usage("can't create directory for result file " + resultFilePath);
         System.exit(1);
       }

File: java/client/test/org/openqa/selenium/WindowTest.java
Patch:
@@ -121,7 +121,7 @@ public void testSetsThePositionOfTheCurrentWindow() throws InterruptedException
   public void testCanMaximizeTheWindow() throws InterruptedException {
     assumeThereIsAWindowManager();
 
-    changeSizeTo(new Dimension(275, 275));
+    changeSizeTo(new Dimension(450, 275));
     maximize();
   }
 
@@ -131,7 +131,7 @@ public void testCanMaximizeTheWindowFromFrame() throws InterruptedException {
     assumeThereIsAWindowManager();
 
     driver.get(pages.framesetPage);
-    changeSizeTo(new Dimension(275, 275));
+    changeSizeTo(new Dimension(450, 275));
 
     driver.switchTo().frame("fourth");
     try {
@@ -147,7 +147,7 @@ public void testCanMaximizeTheWindowFromIframe() throws InterruptedException {
     assumeThereIsAWindowManager();
 
     driver.get(pages.iframePage);
-    changeSizeTo(new Dimension(275, 275));
+    changeSizeTo(new Dimension(450, 275));
 
     driver.switchTo().frame("iframe1-name");
     try {

File: java/client/test/org/openqa/selenium/ProxySettingTest.java
Patch:
@@ -235,6 +235,7 @@ private WebServer createSimpleHttpServer(final String responseHtml) {
       public void handleHttpRequest(
           HttpRequest request, HttpResponse response, HttpControl control) {
         response.charset(Charsets.UTF_8)
+            .header(HttpHeaders.CONTENT_TYPE, "text/html")
             .content(responseHtml)
             .end();
       }

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -714,7 +714,7 @@ public void testTypingIntoAnIFrameWithContentEditableOrDesignModeSet() {
   }
 
   @JavascriptEnabled
-  @Ignore(value = {HTMLUNIT, OPERA, ANDROID, OPERA_MOBILE, MARIONETTE})
+  @Ignore(value = {FIREFOX, HTMLUNIT, OPERA, ANDROID, OPERA_MOBILE, MARIONETTE}, issues = {6711})
   @Test
   public void testNonPrintableCharactersShouldWorkWithContentEditableOrDesignModeSet() {
     assumeFalse("not tested on mac", getEffectivePlatform().is(Platform.MAC));

File: java/client/src/org/openqa/selenium/remote/CapabilityType.java
Patch:
@@ -39,6 +39,7 @@ public interface CapabilityType {
   String HAS_NATIVE_EVENTS = "nativeEvents";
   String UNEXPECTED_ALERT_BEHAVIOUR = "unexpectedAlertBehaviour";
   String ELEMENT_SCROLL_BEHAVIOR = "elementScrollBehavior";
+  String HAS_TOUCHSCREEN = "hasTouchScreen";
 
   String LOGGING_PREFS = "loggingPrefs";
 

File: java/client/test/org/openqa/selenium/remote/DesiredCapabilitiesTest.java
Patch:
@@ -19,6 +19,8 @@
 package org.openqa.selenium.remote;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.StubDriver;
 import org.openqa.selenium.WebDriver;
@@ -28,6 +30,7 @@
 
 import static org.junit.Assert.assertEquals;
 
+@RunWith(JUnit4.class)
 public class DesiredCapabilitiesTest {
   @Test
   public void testAddingTheSameCapabilityToAMapTwiceShouldResultInOneEntry() {

File: java/client/test/org/openqa/selenium/remote/JsonToBeanConverterTest.java
Patch:
@@ -20,6 +20,8 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.junit.runners.JUnit4;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.Cookie;
 import org.openqa.selenium.Platform;
@@ -46,6 +48,7 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
+@RunWith(JUnit4.class)
 public class JsonToBeanConverterTest {
 
   @Test

File: java/server/src/org/openqa/jetty/html/Applet.java
Patch:
@@ -84,6 +84,7 @@ public Applet setDebug(boolean debug){
      * @param alt The alternate element to display
      * @deprecated use add
      */
+    @Deprecated
     public Applet setAlternate(Element alt)
     {
         add(alt);
@@ -95,6 +96,7 @@ public Applet setAlternate(Element alt)
      * @param alt The alternate element to display 
      * @deprecated use add
      */
+    @Deprecated
     public Applet setAlternate(String alt)
     {
         add(alt);

File: java/server/src/org/openqa/jetty/html/Element.java
Patch:
@@ -172,6 +172,7 @@ public String attributes()
      * @param attributes String of HTML attributes to add to the element.
      * @return This Element so calls can be chained.
      */
+    @Deprecated
     public Element attributes(String attributes)
     {
         if (log.isDebugEnabled() && attributes!=null && attributes.indexOf('=')>=0)

File: java/server/src/org/openqa/jetty/html/Table.java
Patch:
@@ -287,6 +287,7 @@ public Block cell()
      * threads factory.
      * @deprecated Use setNestingFactory or setThreadNestingFactory
      */
+    @Deprecated
     public static void setCellNestingFactory(CompositeFactory factory)
     {
         if (threadNestingMap==null)

File: java/server/src/org/openqa/jetty/html/Text.java
Patch:
@@ -20,6 +20,7 @@
 /** A simple block of straight text.
  * @deprecated all Composites now take Strings direct.
  */
+@Deprecated
 public class Text extends Composite
 {
     /* ----------------------------------------------------------------- */

File: java/server/src/org/openqa/jetty/http/HttpRequest.java
Patch:
@@ -177,6 +177,7 @@ public void setTimeStamp(long ts)
     /**
      * @deprecated use getHttpResponse()
      */
+    @Deprecated
     public HttpResponse getResponse()
     {
         return getHttpResponse();

File: java/server/src/org/openqa/jetty/http/HttpResponse.java
Patch:
@@ -229,6 +229,7 @@ public void reset()
     /**
      * @deprecated use getHttpRequest()
      */
+    @Deprecated
     public HttpRequest getRequest()
     {
         return getHttpRequest();

File: java/server/src/org/openqa/jetty/http/JsseListener.java
Patch:
@@ -54,6 +54,7 @@
  * @author Forge Research Pty Ltd ACN 003 491 576
  * @author Jan Hlavatý
  */
+@Deprecated
 public abstract class JsseListener extends SocketListener
 {
     private static Log log = LogFactory.getLog(JsseListener.class);

File: java/server/src/org/openqa/jetty/http/NCSARequestLog.java
Patch:
@@ -225,6 +225,7 @@ public void setAppend(boolean a)
     /**
      * @deprecated ignored
      */
+    @Deprecated
     public void setBuffered(boolean b)
     {}
     

File: java/server/src/org/openqa/jetty/http/SunJsseListener.java
Patch:
@@ -50,6 +50,7 @@
  * @author Court Demas (court@kiwiconsulting.com)
  * @author Forge Research Pty Ltd  ACN 003 491 576
  **/
+@Deprecated
 public class SunJsseListener extends JsseListener
 {
     private static Log log = LogFactory.getLog(SunJsseListener.class);

File: java/server/src/org/openqa/jetty/jetty/servlet/Dispatcher.java
Patch:
@@ -931,6 +931,7 @@ public void setStatus(int status)
         * @param status the status code
         * @param message the status message
         */
+        @Deprecated
         public void setStatus(int status, String message)
         {
             if (_request._filterType!=Dispatcher.__ERROR && !_include)

File: java/server/src/org/openqa/jetty/jetty/servlet/ServletHttpRequest.java
Patch:
@@ -565,6 +565,7 @@ public boolean isRequestedSessionIdFromURL()
     /**
      * @deprecated
      */
+    @Deprecated
     public boolean isRequestedSessionIdFromUrl()
     {
         return isRequestedSessionIdFromURL();
@@ -770,6 +771,7 @@ public String getRemoteHost()
      * @deprecated  As of Version 2.1 of the Java Servlet API,
      * 			use {@link javax.servlet.ServletContext#getRealPath} instead.
      */
+    @Deprecated
     public String getRealPath(String path)
     {
         return _servletHandler.getServletContext().getRealPath(path);

File: java/server/src/org/openqa/jetty/jetty/servlet/SessionContext.java
Patch:
@@ -38,6 +38,7 @@ private SessionContext(){}
     /**
      * @deprecated From HttpSessionContext
      */
+    @Deprecated
     public Enumeration getIds()
     {
         return Collections.enumeration(Collections.EMPTY_LIST);
@@ -47,6 +48,7 @@ public Enumeration getIds()
     /**
      * @deprecated From HttpSessionContext
      */
+    @Deprecated
     public HttpSession getSession(String id)
     {
         return null;

File: java/server/src/org/openqa/jetty/log/OutputStreamLogSink.java
Patch:
@@ -117,6 +117,7 @@ public void setLogDateFormat(String logDateFormat)
     /** 
      * @deprecated Use getLogTimeZone() 
      */
+    @Deprecated
     public String getLogTimezone()
     {
         return _logTimezone;
@@ -126,6 +127,7 @@ public String getLogTimezone()
     /** 
      * @deprecated Use setLogTimeZone(String) 
      */
+    @Deprecated
     public void setLogTimezone(String logTimezone)
     {
         _logTimezone=logTimezone;

File: java/server/src/org/openqa/jetty/util/LazyList.java
Patch:
@@ -128,6 +128,7 @@ public static Object add(Object list, int index, Object item)
      * @return The lazylist created or added to.
      * @deprecated Use addCollection
      */
+    @Deprecated
     protected Object add(Object list, Collection collection)
     {
         Iterator i=collection.iterator();

File: java/server/src/org/openqa/jetty/util/Primitive.java
Patch:
@@ -24,6 +24,7 @@
  * @author Greg Wilkins (gregw)
  * @deprecated Use TypeUtil
  */
+@Deprecated
 public class Primitive extends TypeUtil
 {
 }

File: java/server/src/org/openqa/jetty/util/ThreadPool.java
Patch:
@@ -120,6 +120,7 @@ else if (!name.equals(getName()))
     /**
      * @deprecated use getName()
      */
+    @Deprecated
     public String getPoolName()
     {
         return getName();
@@ -129,6 +130,7 @@ public String getPoolName()
     /**
      * @deprecated use setName(String)
      */
+    @Deprecated
     public void setPoolName(String name)
     {
         setName(name);
@@ -294,6 +296,7 @@ public void setThreadsPriority(int priority)
      * 
      * @deprecated maxIdleTime is used instead.
      */
+    @Deprecated
     public void setMaxStopTimeMs(int ms)
     {
         log.warn("setMaxStopTimeMs is deprecated. No longer required.");

File: java/client/src/org/openqa/selenium/safari/SafariDriverPipelineFactory.java
Patch:
@@ -33,11 +33,11 @@
 class SafariDriverPipelineFactory implements ChannelPipelineFactory {
   
   private final int port;
-  private final BlockingQueue<SafariDriverConnection> connectionQueue;
+  private final BlockingQueue<WebSocketConnection> connectionQueue;
   private final ChannelGroup channelGroup;
 
   SafariDriverPipelineFactory(int port,
-      BlockingQueue<SafariDriverConnection> connectionQueue,
+      BlockingQueue<WebSocketConnection> connectionQueue,
       ChannelGroup channelGroup) {
     this.port = port;
     this.connectionQueue = connectionQueue;

File: java/client/src/org/openqa/selenium/safari/SafariDriverServer.java
Patch:
@@ -46,8 +46,8 @@ class SafariDriverServer {
 
   private final int port;
 
-  private final BlockingQueue<SafariDriverConnection> connections =
-      new SynchronousQueue<SafariDriverConnection>();
+  private final BlockingQueue<WebSocketConnection> connections =
+      new SynchronousQueue<WebSocketConnection>();
 
   private ServerBootstrap bootstrap;
   private Channel serverChannel;
@@ -127,7 +127,7 @@ public String getUri() {
    * @return The new connection.
    * @throws InterruptedException If the timeout expires.
    */
-  public SafariDriverConnection getConnection(long timeout, TimeUnit unit)
+  public WebSocketConnection getConnection(long timeout, TimeUnit unit)
       throws InterruptedException {
     return connections.poll(timeout, unit);
   }

File: java/client/test/org/openqa/selenium/safari/SafariDriverTests.java
Patch:
@@ -32,7 +32,8 @@
     CleanSessionTest.class,
     CrossDomainTest.class,
     SafariExtensionsTest.class,
-    StandardSeleniumTests.class
+    StandardSeleniumTests.class,
+    WebSocketConnectionTest.class
 })
 public class SafariDriverTests {
 

File: java/client/test/org/openqa/selenium/v1/SeleniumAppServer.java
Patch:
@@ -20,6 +20,7 @@
 
 import org.openqa.selenium.environment.webserver.Jetty7AppServer;
 import org.openqa.selenium.testing.InProject;
+import org.seleniumhq.jetty7.servlet.ServletContextHandler;
 import org.seleniumhq.jetty7.webapp.WebAppContext;
 
 public class SeleniumAppServer extends Jetty7AppServer {
@@ -28,8 +29,8 @@ public class SeleniumAppServer extends Jetty7AppServer {
 
   public SeleniumAppServer() {
     super();
-    WebAppContext rcWebApp = addWebApplication(RC_CONTEXT_PATH, findRootOfRcTestPages());
-    addServlet(rcWebApp, "Cached Content", "/cachedContentTest", CachedContentServlet.class);
+    ServletContextHandler context = addResourceHandler(RC_CONTEXT_PATH, findRootOfRcTestPages());
+    addServlet(context, "/cachedContentTest", CachedContentServlet.class);
   }
 
   protected File findRootOfRcTestPages() {

File: java/client/test/org/openqa/selenium/interactions/DragAndDropTest.java
Patch:
@@ -41,6 +41,7 @@
 import static org.junit.Assume.assumeTrue;
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.WaitingConditions.elementLocationToBe;
+import static org.openqa.selenium.WaitingConditions.elementToExist;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
@@ -99,7 +100,7 @@ public void testDragAndDropToElementInIframe() {
     ((JavascriptExecutor) driver).executeScript("arguments[0].src = arguments[1]", iframe,
                                                 pages.dragAndDropPage);
     driver.switchTo().frame(0);
-    WebElement img1 = driver.findElement(By.id("test1"));
+    WebElement img1 = waitFor(elementToExist(driver, "test1"));
     WebElement img2 = driver.findElement(By.id("test2"));
     new Actions(driver).dragAndDrop(img2, img1).perform();
     assertEquals(img1.getLocation(), img2.getLocation());

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -73,6 +73,7 @@ public class Pages {
   public String underscorePage;
   public String unicodeLtrPage;
   public String uploadPage;
+  public String userDefinedProperty;
   public String veryLargeCanvas;
   public String xhtmlFormPage;
   public String xhtmlTestPage;
@@ -133,6 +134,7 @@ public Pages(AppServer appServer) {
     underscorePage = appServer.whereIs("underscore.html");
     unicodeLtrPage = appServer.whereIs("utf8/unicode_ltr.html");
     uploadPage = appServer.whereIs("upload.html");
+    userDefinedProperty = appServer.whereIs("userDefinedProperty.html");
     veryLargeCanvas = appServer.whereIs("veryLargeCanvas.html");
     xhtmlTestPage = appServer.whereIs("xhtmlTest.html");
   }

File: java/client/test/org/openqa/selenium/interactions/BasicMouseInterfaceTest.java
Patch:
@@ -613,9 +613,12 @@ public void testMoveRelativeToBody() {
   public void canMouseOverAndOutOfAnElement() {
     driver.get(pages.mouseOverPage);
 
+    WebElement greenbox = driver.findElement(By.id("greenbox"));
     WebElement redbox = driver.findElement(By.id("redbox"));
     Dimension size = redbox.getSize();
 
+    new Actions(driver).moveToElement(greenbox, 1, 1).perform();
+
     assertEquals(
         Colors.GREEN.getColorValue(), Color.fromString(redbox.getCssValue("background-color")));
 

File: java/server/src/org/openqa/grid/internal/BaseRemoteProxy.java
Patch:
@@ -467,7 +467,7 @@ public int compareTo(RemoteProxy o) {
 
   @Override
   public String toString() {
-    return "host :" + getRemoteHost() + (timeOutMs != -1 ? " time out : " + timeOutMs : "");
+    return "host :" + getRemoteHost();
   }
 
   private final HtmlRenderer renderer = new DefaultHtmlRenderer(this);

File: java/server/src/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -614,8 +614,9 @@ protected void runHtmlSuite() {
         RemoteControlLauncher.usage("Can't find HTML Suite file:" + suiteFile);
         System.exit(1);
       }
-      if (!suiteFile.getName().endsWith(".html")) {
-        RemoteControlLauncher.usage("Suite file must have .html extension");
+      String fileName = suiteFile.getName();
+      if (! (fileName.endsWith(".html") || fileName.endsWith(".htm") || fileName.endsWith(".xhtml"))) {
+        RemoteControlLauncher.usage("Suite file must have extension .html or .htm or .xhtml");
         System.exit(1);
       }
       addNewStaticContent(suiteFile.getParentFile());

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -28,6 +28,7 @@
 import static org.openqa.selenium.WaitingConditions.alertToBePresent;
 import static org.openqa.selenium.WaitingConditions.elementTextToEqual;
 import static org.openqa.selenium.WaitingConditions.newWindowIsOpened;
+import static org.openqa.selenium.WaitingConditions.pageTitleToBe;
 import static org.openqa.selenium.WaitingConditions.windowHandleCountToBe;
 import static org.openqa.selenium.WaitingConditions.windowToBeSwitchedToWithName;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
@@ -411,7 +412,7 @@ public void testShouldHandleAlertOnPageBeforeUnload() {
     element.click();
     alert = waitFor(alertToBePresent(driver));
     alert.accept();
-    assertEquals("Testing Alerts", driver.getTitle());
+    waitFor(pageTitleToBe(driver, "Testing Alerts"));
   }
 
   @NoDriverAfterTest

File: java/server/src/org/openqa/selenium/server/FrameGroupCommandQueueSet.java
Patch:
@@ -652,7 +652,7 @@ private boolean matchesFrameAddress(String uniqueId, String windowName, String l
     }
     boolean windowJustLoaded = justLoaded(uniqueId);
     FrameAddress frameAddress = queue.getFrameAddress();
-    if (!frameAddress.getLocalFrameAddress().equals(localFrame)) {
+    if (frameAddress == null || !frameAddress.getLocalFrameAddress().equals(localFrame)) {
       return false;
     }
     // DGF Windows that have just loaded may not know their true identity

File: java/server/src/org/openqa/jetty/http/SocketListener.java
Patch:
@@ -51,7 +51,7 @@ public class SocketListener
     private int _integralPort=0;
     private int _confidentialPort=0;
     private boolean _identifyListener=false;
-    private int _bufferSize=8192;
+    private int _bufferSize=Integer.getInteger("org.openqa.jetty.SocketListener.bufferSize", 8192);
     private int _bufferReserve=512;
     private HttpHandler _handler;
     private int _lowResources;

File: java/client/src/org/openqa/selenium/firefox/internal/Executable.java
Patch:
@@ -101,7 +101,7 @@ public void setLibraryPath(CommandLine command, final Map<String, String> extraE
 
     // On Snow Leopard, beware of problems the sqlite library
     String firefoxLibraryPath = System.getProperty("webdriver.firefox.library.path",
-        binary.getParentFile().getAbsolutePath());
+        binary.getAbsoluteFile().getParentFile().getAbsolutePath());
     if (Platform.getCurrent().is(Platform.MAC) && Platform.getCurrent().getMinorVersion() > 5) {
       libraryPath.append(libraryPath).append(File.pathSeparator);
     } else {

File: java/client/test/org/openqa/selenium/PositionAndSizeTest.java
Patch:
@@ -24,6 +24,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
+import static org.junit.Assume.assumeFalse;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Ignore.Driver.FIREFOX;

File: java/client/test/org/openqa/selenium/PositionAndSizeTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.JavascriptEnabled;
+import org.openqa.selenium.testing.TestUtilities;
 
 @Ignore(value = {HTMLUNIT, OPERA_MOBILE, ANDROID, IPHONE, MARIONETTE},
         reason = "HtmlUnit: Getting coordinates requires rendering, others: not tested")

File: java/client/test/org/openqa/selenium/PositionAndSizeTest.java
Patch:
@@ -125,6 +125,7 @@ public void testShouldGetCoordinatesInViewPortOfAnElementInANestedFrame() {
   @Ignore({FIREFOX, SAFARI})
   @Test
   public void testShouldGetCoordinatesOfAnElementWithFixedPosition() {
+    assumeFalse("Ignoring fixed-position elements in IE6", TestUtilities.isIe6(driver));
     driver.get(appServer.whereIs("coordinates_tests/page_with_fixed_element.html"));
     assertThat(getLocationInViewPort(By.id("fixed")).getY(), is(0));
     assertThat(getLocationOnPage(By.id("fixed")).getY(), is(0));

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/ClearLocalStorage.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.WebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -27,8 +26,9 @@ public ClearLocalStorage(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Utils.convert(getUnwrappedDriver(), WebStorage.class).getLocalStorage().clear();
+    Utils.getWebStorage(getUnwrappedDriver()).getLocalStorage().clear();
     return ResultType.SUCCESS;
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/ClearSessionStorage.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.WebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -27,8 +26,9 @@ public ClearSessionStorage(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Utils.convert(getUnwrappedDriver(), WebStorage.class).getSessionStorage().clear();
+    Utils.getWebStorage(getUnwrappedDriver()).getSessionStorage().clear();
     return ResultType.SUCCESS;
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/ExecuteSQL.java
Patch:
@@ -19,7 +19,6 @@
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 
-import org.openqa.selenium.html5.DatabaseStorage;
 import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
@@ -39,14 +38,16 @@ public ExecuteSQL(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Object value = Utils.convert(getUnwrappedDriver(), DatabaseStorage.class)
+    Object value = Utils.getDatabaseStorage(getUnwrappedDriver())
         .executeSQL(dbName, query, args.toArray());
     Object result = new ResultConverter(getKnownElements()).apply(value);
     response.setValue(result);
     return ResultType.SUCCESS;
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
     dbName = (String) allParameters.get("dbName");
     query = (String) allParameters.get("query");

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/GetAppCacheStatus.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.ApplicationCache;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -27,8 +26,9 @@ public GetAppCacheStatus(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    response.setValue(Utils.convert(getUnwrappedDriver(), ApplicationCache.class).getStatus());
+    response.setValue(Utils.getApplicationCache(getUnwrappedDriver()).getStatus());
     return ResultType.SUCCESS;
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/GetLocalStorageItem.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -28,8 +27,9 @@ public GetLocalStorageItem(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Object value = Utils.convert(getUnwrappedDriver(), WebStorage.class)
+    Object value = Utils.getWebStorage(getUnwrappedDriver())
         .getLocalStorage().getItem(key);
     response.setValue(value);
     return ResultType.SUCCESS;

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/GetLocalStorageKeys.java
Patch:
@@ -29,8 +29,9 @@ public GetLocalStorageKeys(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Set<String> keys = Utils.convert(getUnwrappedDriver(), WebStorage.class)
+    Set<String> keys = Utils.getWebStorage(getUnwrappedDriver())
         .getLocalStorage().keySet();
     response.setValue(keys);
     return ResultType.SUCCESS;

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/GetLocalStorageSize.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -27,8 +26,9 @@ public GetLocalStorageSize(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Object value = Utils.convert(getUnwrappedDriver(), WebStorage.class).getLocalStorage().size();
+    Object value = Utils.getWebStorage(getUnwrappedDriver()).getLocalStorage().size();
     response.setValue(value);
     return ResultType.SUCCESS;
   }

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/GetLocationContext.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.LocationContext;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -27,8 +26,9 @@ public GetLocationContext(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    response.setValue(Utils.convert(getUnwrappedDriver(), LocationContext.class).location());
+    response.setValue(Utils.getLocationContext(getUnwrappedDriver()).location());
     return ResultType.SUCCESS;
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/GetSessionStorageItem.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -28,8 +27,9 @@ public GetSessionStorageItem(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Object value = Utils.convert(getUnwrappedDriver(), WebStorage.class)
+    Object value = Utils.getWebStorage(getUnwrappedDriver())
         .getSessionStorage().getItem(key);
     response.setValue(value);
     return ResultType.SUCCESS;

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/GetSessionStorageKeys.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -29,8 +28,9 @@ public GetSessionStorageKeys(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Set<String> keys = Utils.convert(getUnwrappedDriver(), WebStorage.class)
+    Set<String> keys = Utils.getWebStorage(getUnwrappedDriver())
         .getSessionStorage().keySet();
     response.setValue(keys);
     return ResultType.SUCCESS;

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/GetSessionStorageSize.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -27,8 +26,9 @@ public GetSessionStorageSize(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Object value = Utils.convert(getUnwrappedDriver(), WebStorage.class)
+    Object value = Utils.getWebStorage(getUnwrappedDriver())
         .getSessionStorage().size();
     response.setValue(value);
     return ResultType.SUCCESS;

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/IsBrowserOnline.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.BrowserConnection;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -27,8 +26,9 @@ public IsBrowserOnline(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    response.setValue(Utils.convert(getUnwrappedDriver(), BrowserConnection.class).isOnline());
+    response.setValue(Utils.getBrowserConnection(getUnwrappedDriver()).isOnline());
     return ResultType.SUCCESS;
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/RemoveLocalStorageItem.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -32,8 +31,9 @@ public void setKey(String key) {
     this.key = key;
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Object value = Utils.convert(getUnwrappedDriver(), WebStorage.class)
+    Object value = Utils.getWebStorage(getUnwrappedDriver())
         .getLocalStorage().removeItem(key);
     response.setValue(value);
     return ResultType.SUCCESS;

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/RemoveSessionStorageItem.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.ResponseAwareWebDriverHandler;
 import org.openqa.selenium.remote.server.rest.ResultType;
@@ -32,8 +31,9 @@ public void setKey(String key) {
     this.key = key;
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Object value = Utils.convert(getUnwrappedDriver(), WebStorage.class)
+    Object value = Utils.getWebStorage(getUnwrappedDriver())
         .getSessionStorage().removeItem(key);
     response.setValue(value);
     return ResultType.SUCCESS;

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/SetBrowserConnection.java
Patch:
@@ -31,12 +31,14 @@ public SetBrowserConnection(Session session) {
     super(session);
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
     online = (Boolean) allParameters.get("state");
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Utils.convert(getUnwrappedDriver(), BrowserConnection.class).setOnline(online);
+    Utils.getBrowserConnection(getUnwrappedDriver()).setOnline(online);
     return ResultType.SUCCESS;
   }
 

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/SetLocalStorageItem.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.WebDriverHandler;
@@ -32,11 +31,13 @@ public SetLocalStorageItem(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Utils.convert(getUnwrappedDriver(), WebStorage.class).getLocalStorage().setItem(key, value);
+    Utils.getWebStorage(getUnwrappedDriver()).getLocalStorage().setItem(key, value);
     return ResultType.SUCCESS;
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
     key = (String) allParameters.get("key");
     value = (String) allParameters.get("value");

File: java/server/src/org/openqa/selenium/remote/server/handler/html5/SetSessionStorageItem.java
Patch:
@@ -16,7 +16,6 @@
 
 package org.openqa.selenium.remote.server.handler.html5;
 
-import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.handler.WebDriverHandler;
@@ -32,11 +31,13 @@ public SetSessionStorageItem(Session session) {
     super(session);
   }
 
+  @Override
   public ResultType call() throws Exception {
-    Utils.convert(getUnwrappedDriver(), WebStorage.class).getSessionStorage().setItem(key, value);
+    Utils.getWebStorage(getUnwrappedDriver()).getSessionStorage().setItem(key, value);
     return ResultType.SUCCESS;
   }
 
+  @Override
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
     key = (String) allParameters.get("key");
     value = (String) allParameters.get("value");

File: java/server/test/org/openqa/selenium/remote/server/ServerSpecificTests.java
Patch:
@@ -20,6 +20,7 @@
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
 import org.openqa.selenium.remote.server.handler.UploadFileTest;
+import org.openqa.selenium.remote.server.handler.html5.UtilsTest;
 import org.openqa.selenium.remote.server.rest.ResultConfigTest;
 import org.openqa.selenium.remote.server.rest.UrlMapperTest;
 import org.openqa.selenium.remote.server.xdrpc.CrossDomainRpcLoaderTest;
@@ -42,7 +43,8 @@
     SessionCleanerTest.class,
     SessionLogsTest.class,
     UploadFileTest.class,
-    UrlMapperTest.class
+    UrlMapperTest.class,
+    UtilsTest.class
 })
 public class ServerSpecificTests {
 }

File: java/client/src/com/thoughtworks/selenium/HttpCommandProcessor.java
Patch:
@@ -60,8 +60,6 @@ public class HttpCommandProcessor implements CommandProcessor {
    *        "c:\\program files\\internet explorer\\iexplore.exe"
    * @param browserURL - the starting URL including just a domain name. We'll start the browser
    *        pointing at the Selenium resources on this URL,
-   * @param extensionJs - extension Javascript for this session e.g. "http://www.google.com" would
-   *        send the browser to "http://www.google.com/selenium-server/core/RemoteRunner.html"
    */
   public HttpCommandProcessor(String serverHost, int serverPort, String browserStartCommand,
       String browserURL) {
@@ -83,7 +81,6 @@ public HttpCommandProcessor(String serverHost, int serverPort, String browserSta
    *        "c:\\program files\\internet explorer\\iexplore.exe"
    * @param browserURL - the starting URL including just a domain name. We'll start the browser
    *        pointing at the Selenium resources on this URL,
-   * @param extensionJs - extension Javascript for this session
    */
   public HttpCommandProcessor(String pathToServlet, String browserStartCommand, String browserURL) {
     this.pathToServlet = pathToServlet;

File: java/client/src/com/thoughtworks/selenium/Wait.java
Patch:
@@ -56,7 +56,6 @@ public Wait(String messageToShowIfTimeout) {
    * Wait until the "until" condition returns true or time runs out.
    * 
    * @param message the failure message
-   * @param timeoutInMilliseconds the amount of time to wait before giving up
    * @throws WaitTimedOutException if "until" doesn't return true until the timeout
    * @see #until()
    */

File: java/client/src/org/openqa/selenium/logging/LocalLogs.java
Patch:
@@ -60,7 +60,7 @@ public static LocalLogs getHandlerBasedLoggerInstance(LoggingHandler loggingHand
    * LocalLogs instance and the second one.
    * @param predefinedTypeLogger LocalLogs which pre-defines the log types it stores.
    * @param allTypesLogger LocalLogs which can store log entries for all log types.
-   * @return
+   * @return A LocalLogs instance.
    */
   public static LocalLogs getCombinedLogsHolder(LocalLogs predefinedTypeLogger,
                                                 LocalLogs allTypesLogger) {

File: java/client/src/org/openqa/selenium/logging/LogEntries.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.logging.Level;
 
 /**
- * Represent a pool of {@Link LogEntry}.  This class also provides filtering mechanisms based on
+ * Represent a pool of {@link LogEntry}.  This class also provides filtering mechanisms based on
  * levels.
  */
 @Beta

File: java/client/src/org/openqa/selenium/logging/LoggingPreferences.java
Patch:
@@ -58,7 +58,7 @@ public Set<String> getEnabledLogTypes() {
   /**
    * @param logType The log type.
    * @return the {@link Level} for the given {@link LogType} if enabled.
-   *     Otherwise returns {@link Level.OFF}.
+   *     Otherwise returns {@link Level#OFF}.
    */
   public Level getLevel(String logType) {
     return prefs.get(logType) == null ? Level.OFF : prefs.get(logType);

File: java/client/src/org/openqa/selenium/support/pagefactory/DefaultFieldDecorator.java
Patch:
@@ -34,8 +34,8 @@
 
 /**
  * Default decorator for use with PageFactory. Will decorate 1) all of the
- * WebElement fields and 2) List<WebElement> fields that have @FindBy, @FindBys,
- * or @FindAll annotation with a proxy that locates the elements using the passed
+ * WebElement fields and 2) List<WebElement> fields that have {@literal @FindBy}, {@literal @FindBys},
+ * or {@literal @FindAll} annotation with a proxy that locates the elements using the passed
  * in ElementLocatorFactory.
  */
 public class DefaultFieldDecorator implements FieldDecorator {

File: java/client/src/org/openqa/selenium/support/ui/WebDriverWait.java
Patch:
@@ -34,7 +34,7 @@ public class WebDriverWait extends FluentWait<WebDriver> {
    *
    * @param driver The WebDriver instance to pass to the expected conditions
    * @param timeOutInSeconds The timeout in seconds when an expectation is called
-   * @see WebDriverWait#ignoring(Class) equals
+   * @see WebDriverWait#ignoring(java.lang.Class)
    */
   public WebDriverWait(WebDriver driver, long timeOutInSeconds) {
     this(driver, new SystemClock(), Sleeper.SYSTEM_SLEEPER, timeOutInSeconds, DEFAULT_SLEEP_TIMEOUT);
@@ -48,7 +48,7 @@ public WebDriverWait(WebDriver driver, long timeOutInSeconds) {
    * @param driver The WebDriver instance to pass to the expected conditions
    * @param timeOutInSeconds The timeout in seconds when an expectation is called
    * @param sleepInMillis The duration in milliseconds to sleep between polls.
-   * @see WebDriverWait#ignoring(Class) equals
+   * @see WebDriverWait#ignoring(java.lang.Class)
    */
   public WebDriverWait(WebDriver driver, long timeOutInSeconds, long sleepInMillis) {
     this(driver, new SystemClock(), Sleeper.SYSTEM_SLEEPER, timeOutInSeconds, sleepInMillis);

File: java/server/src/cybervillains/ca/ThumbprintUtil.java
Patch:
@@ -24,7 +24,7 @@ public class ThumbprintUtil {
    * Generates a SHA1 thumbprint of a certificate for long-term mapping.
    * 
    * @param cert
-   * @return
+   * @return String with base64 encoded digest bytes.
    * @throws CertificateEncodingException
    */
   public static String getThumbprint(final X509Certificate cert)

File: java/server/src/org/openqa/grid/internal/RemoteProxy.java
Patch:
@@ -100,7 +100,7 @@ public interface RemoteProxy extends Comparable<RemoteProxy> {
    * the number of test slots because a test slot only indicates what type of test session can be run on the remote.
    * I.e., a node may allow N different <em>types</em> of tests, but only allow M tests to run at once, for M <= N.
    *
-   * @return
+   * @return Maximum number of concurrent tests that can run on this node.
    */
   int getMaxNumberOfConcurrentTestSessions();
 

File: java/server/src/org/openqa/grid/web/servlet/beta/WebProxyHtmlRendererBeta.java
Patch:
@@ -193,7 +193,7 @@ private String nodeTabs() {
 
   /**
    * return the platform for the proxy. It should be the same for all slots of the proxy, so checking that.
-   * @return
+   * @return Either the platform name, "Unknown", "mixed OS", or "not specified".
    */
   public static String getPlatform(RemoteProxy proxy) {
     Platform res = null;

File: java/server/src/org/openqa/grid/web/servlet/handler/SeleniumBasedRequest.java
Patch:
@@ -71,9 +71,9 @@ public static SeleniumBasedRequest createFromRequest(HttpServletRequest request,
 
 
   /**
-   * check the request and finds out if that's a selenium legacy protocol( RC ) or a webdriver one.
+   * check the request and finds out if that's a selenium legacy protocol( RC ) or a WebDriver one.
    * @param request
-   * @return
+   * @return Either SeleniumProtocol.Selenium or SeleniumProtocol.WebDriver.
    */
   public static SeleniumProtocol getRequestProtocol(HttpServletRequest request) {
     if ("/selenium-server/driver".equals(request.getServletPath())) {

File: java/server/src/org/openqa/selenium/server/FutureFileResource.java
Patch:
@@ -336,7 +336,8 @@ public String encode(String uri) {
 
   /**
    * @param o
-   * @return
+   * @return <code>true</code> if passed object uses the same File object as
+   *         this instance or if the path to both files are equal.
    */
   @Override
   public boolean equals(Object o) {

File: java/client/src/org/openqa/selenium/remote/DesiredCapabilities.java
Patch:
@@ -80,15 +80,15 @@ public DesiredCapabilities(Capabilities... others) {
   }
 
   public String getBrowserName() {
-    return (String) capabilities.get(BROWSER_NAME);
+    return capabilities.get(BROWSER_NAME).toString();
   }
 
   public void setBrowserName(String browserName) {
     setCapability(BROWSER_NAME, browserName);
   }
 
   public String getVersion() {
-    return (String) capabilities.get(VERSION);
+    return capabilities.get(VERSION).toString();
   }
 
   public void setVersion(String version) {

File: java/client/test/org/openqa/selenium/ClickScrollingTest.java
Patch:
@@ -260,8 +260,8 @@ private long getScrollTop() {
   }
 
   @Test
-  @Ignore(value = {FIREFOX, OPERA, IPHONE, SAFARI, MARIONETTE},
-          reason = "Firefox: fails, others: not tested")
+  @Ignore(value = {OPERA, IPHONE, SAFARI, MARIONETTE},
+          reason = "Not tested")
   public void testShouldBeAbleToClickElementInATallFrame() {
     try {
       driver.get(appServer.whereIs("scrolling_tests/page_with_tall_frame.html"));

File: java/server/src/org/openqa/jetty/log/OutputStreamLogSink.java
Patch:
@@ -235,7 +235,7 @@ public void setSuppressStack(boolean suppressStack)
     /* ------------------------------------------------------------ */
     public synchronized void setOutputStream(OutputStream out)
     {
-        _reopen=isStarted() && out!=out;
+        _reopen=isStarted() && _out!=out;
         _filename=null;
         if (_buffer!=null)
             _buffer.resetWriter();

File: java/client/test/org/openqa/selenium/testing/drivers/SauceBackedDriverSupplier.java
Patch:
@@ -50,8 +50,8 @@ public WebDriver get() {
       } catch (UnreachableBrowserException ex) {
         System.out.println("Session is not started " + ex.getMessage());
         lastException = ex;
-        // wait a bit before the next attempt
         try {
+          System.out.println("Waiting 5 sec before the next attempt");
           Thread.sleep(5000);
         } catch (InterruptedException e) {
         }

File: java/client/test/org/openqa/selenium/interactions/DragAndDropTest.java
Patch:
@@ -109,9 +109,6 @@ public void testDragAndDropToElementInIframe() {
   @Ignore(value = {OPERA}, reason = "OPERA: ?")
   @Test
   public void testDragAndDropElementWithOffsetInIframeAtBottom() {
-    assumeFalse("See issue 6228", Browser.detect() == Browser.ff &&
-                TestUtilities.isNativeEventsEnabled(driver));
-
     assumeTrue(TestUtilities.isNativeEventsEnabled(driver));
 
     driver.get(appServer.whereIs("iframeAtBottom.html"));

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -421,6 +421,7 @@ public void testShouldNotReturnLtrMarks() {
   }
 
   @Test
+  @Ignore(reason = "Not all unicode whitespace characters are trimmed", issues = {6072})
   public void testShouldTrimTextWithMultiByteWhitespaces() {
     driver.get(pages.simpleTestPage);
     String text = driver.findElement(By.id("trimmedSpace")).getText();

File: java/client/test/org/openqa/selenium/testing/drivers/SauceBackedDriverSupplier.java
Patch:
@@ -41,11 +41,14 @@ public WebDriver get() {
     // Make several attempt to init a driver
     UnreachableBrowserException lastException = null;
     for (int i = 0; i < 3; i++) {
+      System.out.println("Attempt to start a new session " + i);
       try {
         SauceDriver driver = new SauceDriver(capabilities);
         driver.setFileDetector(new LocalFileDetector());
+        System.out.println("Session started");
         return driver;
       } catch (UnreachableBrowserException ex) {
+        System.out.println("Session is not started " + ex.getMessage());
         lastException = ex;
       }
     }

File: java/client/test/org/openqa/selenium/testing/drivers/SauceDriver.java
Patch:
@@ -138,6 +138,7 @@ private static Capabilities munge(Capabilities desiredCapabilities, String selen
       if (chromeDriverVersion == null) {
         chromeDriverVersion = "2.2";
       }
+      System.out.println("Setting chromedriver-version capability to " + chromeDriverVersion);
       mungedCapabilities.setCapability("chromedriver-version", chromeDriverVersion);
     }
 

File: java/client/test/org/openqa/selenium/testing/drivers/SauceDriver.java
Patch:
@@ -133,7 +133,7 @@ private static Capabilities munge(Capabilities desiredCapabilities, String selen
       mungedCapabilities.setCapability(InternetExplorerDriver.REQUIRE_WINDOW_FOCUS, true);
     }
 
-    if (DesiredCapabilities.internetExplorer().getBrowserName().equals(desiredCapabilities.getBrowserName())) {
+    if (DesiredCapabilities.chrome().getBrowserName().equals(desiredCapabilities.getBrowserName())) {
       String chromeDriverVersion = System.getenv(SELENIUM_CHROMEDRIVER_ENV_NAME);
       if (chromeDriverVersion == null) {
         chromeDriverVersion = "2.2";

File: java/client/test/org/openqa/selenium/safari/CleanSessionTest.java
Patch:
@@ -39,8 +39,10 @@ public static void quitDriver() {
   private void createCleanSession() {
     quitDriver();
 
+    SafariOptions safariOptions = new SafariOptions();
+    safariOptions.setUseCleanSession(true);
     DesiredCapabilities capabilities = DesiredCapabilities.safari();
-    capabilities.setCapability(SafariDriver.CLEAN_SESSION_CAPABILITY, true);
+    capabilities.setCapability(SafariOptions.CAPABILITY, safariOptions);
     driver = actuallyCreateDriver(capabilities);
     driver.get(pages.alertsPage);
   }

File: java/client/src/org/openqa/selenium/htmlunit/InputKeysContainer.java
Patch:
@@ -66,6 +66,8 @@ private int indexOfSubmitKey() {
   @Override
   public String toString() {
     String toReturn = builder.toString();
+    toReturn = toReturn.replaceAll(ENTER.toString(), "\r");
+    toReturn = toReturn.replaceAll(RETURN.toString(), "\r");
     if (capitalize) {
       return toReturn.toUpperCase();
     }

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -255,7 +255,6 @@ public void testSwitchingToMissingAlertThrows() throws Exception {
   }
 
   @JavascriptEnabled
-  @Ignore(value = {CHROME}, issues = {2764})
   @Test
   public void testSwitchingToMissingAlertInAClosedWindowThrows() throws Exception {
     String mainWindow = driver.getWindowHandle();

File: java/client/test/org/openqa/selenium/TakesScreenshotTest.java
Patch:
@@ -381,10 +381,8 @@ private BufferedImage getImage() {
       byte[] imageData = screenshoter.getScreenshotAs(OutputType.BYTES);
       assertTrue(imageData != null);
       assertTrue(imageData.length > 0);
-      System.out.println("Length   -> " + imageData.length);
       image = ImageIO.read(new ByteArrayInputStream(imageData));
       assertTrue(image != null);
-      System.out.println("Sizes  -> " + image.getWidth() + "x" + image.getHeight());
     } catch (IOException e) {
       fail("Image screenshot file is invalid: " + e.getMessage());
     }
@@ -517,6 +515,7 @@ private void saveImageToTmpFile(BufferedImage im) {
 
     File outputfile = new File( testName.getMethodName() + "_image.png");
     System.out.println("Image file is at " + outputfile.getAbsolutePath());
+    System.out.println("Sizes  -> " + im.getWidth() + "x" + im.getHeight());
     try {
       ImageIO.write(im, "png", outputfile);
     } catch (IOException e) {

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -518,6 +518,7 @@ private DesiredCapabilities addCapabilityFromString(String capability) {
     }
     DesiredCapabilities res = new DesiredCapabilities();
     for (String capabilityPair : s) {
+      capabilityPair = capabilityPair.trim();
       if (capabilityPair.split("=").length != 2) {
         throw new GridConfigurationException("-browser format is key1=value1,key2=value2 "
             + capabilityPair + " doesn't follow that format.");

File: java/client/src/org/openqa/selenium/JavascriptExecutor.java
Patch:
@@ -107,7 +107,7 @@ public interface JavascriptExecutor {
    *       "  if (xhr.readyState == 4) {" +
    *       "    callback(xhr.responseText);" +
    *       "  }" +
-   *       "}" +
+   *       "};" +
    *       "xhr.send();");
    *   JSONObject json = new JSONObject((String) response);
    *   assertEquals("cheese", json.getString("food"));

File: java/client/src/org/openqa/selenium/support/ui/Select.java
Patch:
@@ -30,7 +30,7 @@
 public class Select {
 
   private final WebElement element;
-  private boolean isMulti;
+  private final boolean isMulti;
 
   /**
    * Constructor. A check is made that the given element is, indeed, a SELECT tag. If it is not,
@@ -290,7 +290,7 @@ protected String escapeQuotes(String toEscape) {
     // Convert strings with both quotes and ticks into: foo'"bar -> concat("foo'", '"', "bar")
     if (toEscape.indexOf("\"") > -1 && toEscape.indexOf("'") > -1) {
       boolean quoteIsLast = false;
-      if (toEscape.indexOf("\"") == toEscape.length() - 1) {
+      if (toEscape.lastIndexOf("\"") == toEscape.length() - 1) {
         quoteIsLast = true;
       }
       String[] substrings = toEscape.split("\"");

File: java/client/test/org/openqa/selenium/support/ui/SelectElementTest.java
Patch:
@@ -298,9 +298,8 @@ public void shouldProvideConcatenatedStringsWhenStringToEscapeContainsTicksAndQu
   public void shouldProvideConcatenatedStringsWhenStringEndsWithQuote() {
     WebElement selectElement = driver.findElement(By.name("multi"));
     Select select = new Select(selectElement);
-    String result = select.escapeQuotes("'\"");
+    String result = select.escapeQuotes("Bar \"Rock'n'Roll\"");
 
-    assertEquals("concat(\"'\", '\"')", result);
+    assertEquals("concat(\"Bar \", '\"', \"Rock'n'Roll\", '\"')", result);
   }
-
 }

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -195,7 +195,7 @@ private HttpClient getClient() {
       browserTimeout += (selenium_server_cleanup_cycle + MAX_NETWORK_LATENCY);
       browserTimeout *=2; // Lets not let this happen too often
     }
-    return slot.getProxy().getHttpClientFactory().getGridHttpClient(browserTimeout);
+    return slot.getProxy().getHttpClientFactory().getGridHttpClient(browserTimeout, browserTimeout);
   }
 
   /**

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -617,7 +617,6 @@ protected void assertElementNotStale(HtmlElement element) {
       parentElement = parentElement.getParentNode();
     }
 
-    System.err.println("" + element + " -> " + parentElement);
     if (parentElement == null) {
       throw new StaleElementReferenceException(
           "The element seems to be disconnected from the DOM. "

File: java/client/src/org/openqa/selenium/internal/SocketLock.java
Patch:
@@ -75,10 +75,10 @@ public SocketLock(InetSocketAddress address) {
    * @inheritDoc
    */
   public void lock(long timeoutInMillis) throws WebDriverException {
-    // Calculate the 'exit time' for our wait loop.
-    long maxWait = System.currentTimeMillis() + timeoutInMillis;
-
     synchronized (syncObject) {
+      // Calculate the 'exit time' for our wait loop.
+      long maxWait = System.currentTimeMillis() + timeoutInMillis;
+
       // Attempt to acquire the lock until something goes wrong or we run out of time.
       do {
         try {

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -433,7 +433,7 @@ public void testShouldReportTheXAndYCoordinatesWhenClicking() {
   }
   
   @JavascriptEnabled
-  @Ignore(ALL)
+  @Ignore(value = {ANDROID, IPHONE}, reason = "Not tested")
   @Test
   public void testClickEventsShouldBubble() {
     driver.get(pages.clicksPage);

File: java/client/src/org/openqa/selenium/firefox/internal/NewProfileExtensionConnection.java
Patch:
@@ -149,7 +149,7 @@ protected int determineNextFreePort(int port) {
     // If we can't connect, then we're good to use it
     int newport;
 
-    for (newport = port; newport < port + 200; newport++) {
+    for (newport = port; newport < port + 2000; newport++) {
       Socket socket = new Socket();
       InetSocketAddress address = new InetSocketAddress(networkUtils.obtainLoopbackIp4Address(),
                                                         newport);

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -17,7 +17,9 @@
 
 package org.openqa.selenium;
 
+import static org.hamcrest.Matchers.containsString;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.junit.Assume.assumeTrue;
@@ -427,6 +429,7 @@ public void testIncludesAlertTextInUnhandledAlertException() {
       fail("Expected UnhandledAlertException");
     } catch (UnhandledAlertException e) {
       assertEquals("cheese", e.getAlertText());
+      assertThat(e.getMessage(), containsString("cheese"));
     }
   }
 

File: java/server/src/org/openqa/selenium/remote/server/log/LoggingManager.java
Patch:
@@ -55,7 +55,7 @@ public static synchronized void configureLogging(LoggingOptions options,
     resetLoggerToOriginalState();
     overrideSimpleFormatterWithTerseOneForConsoleHandler(currentLogger, debugMode);
     addInMemoryLogger(currentLogger, options);
-    addPerSessionLogger(currentLogger, options, debugMode);
+    //addPerSessionLogger(currentLogger, options, debugMode);
     if (debugMode) {
       currentLogger.setLevel(Level.FINE);
     }

File: java/client/test/org/openqa/selenium/logging/AvailableLogsTest.java
Patch:
@@ -25,6 +25,7 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
+import static org.openqa.selenium.testing.TestUtilities.isOldChromedriver;
 
 import java.util.Set;
 
@@ -44,7 +45,7 @@
 import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
 import static org.openqa.selenium.testing.TestUtilities.isOldChromedriver;
 
-@Ignore({ANDROID, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI})
+@Ignore({ANDROID, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS})
 public class AvailableLogsTest extends JUnit4TestBase {
 
   private WebDriver localDriver;
@@ -103,6 +104,7 @@ public void profilerLogShouldBeDisabledByDefault() {
   }
 
   @Test
+  @Ignore(value = {SAFARI}, reason = "Safari does not support profiler logs")
   public void shouldBeAbleToEnableProfilerLog() {
     DesiredCapabilities caps = new DesiredCapabilities();
     caps.setCapability(ENABLE_PROFILING_CAPABILITY, true);

File: java/client/test/org/openqa/selenium/logging/GetLogsTest.java
Patch:
@@ -47,7 +47,7 @@
 import java.util.Set;
 import java.util.logging.Level;
 
-@Ignore({ANDROID, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI})
+@Ignore({ANDROID, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS})
 public class GetLogsTest extends JUnit4TestBase {
 
   private WebDriver localDriver;

File: java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java
Patch:
@@ -497,14 +497,13 @@ public String toString() {
 
   /**
    * An expectation with the logical opposite condition of the given condition.
-   * In case of null, it will return false.
    */
   public static ExpectedCondition<Boolean> not(final ExpectedCondition<?> condition) {
     return new ExpectedCondition<Boolean>() {
       @Override
       public Boolean apply(WebDriver driver) {
         Object result = condition.apply(driver);
-        return !(result == null || result == Boolean.TRUE);
+        return result == null || result == Boolean.FALSE;
       }
 
       @Override

File: java/client/test/org/openqa/selenium/logging/AvailableLogsTest.java
Patch:
@@ -58,7 +58,6 @@ public void quitDriver() {
   }
 
   @Test
-  @Ignore({CHROME})  // Remove when chromedriver2 has it
   public void browserLogShouldBeEnabledByDefault() {
     assumeFalse(isOldChromedriver(driver));
     Set<String> logTypes = driver.manage().logs().getAvailableLogTypes();
@@ -68,7 +67,6 @@ public void browserLogShouldBeEnabledByDefault() {
 
   @NeedsFreshDriver
   @Test
-  @Ignore({CHROME})  // Remove when chromedriver2 has it
   public void clientLogShouldBeEnabledByDefault() {
     assumeFalse(isOldChromedriver(driver));
     // Do one action to have *something* in the client logs.
@@ -105,7 +103,6 @@ public void profilerLogShouldBeDisabledByDefault() {
   }
 
   @Test
-  @Ignore({CHROME})  // Profiler log is getting deprecated, chromedriver2 will not implement.
   public void shouldBeAbleToEnableProfilerLog() {
     DesiredCapabilities caps = new DesiredCapabilities();
     caps.setCapability(ENABLE_PROFILING_CAPABILITY, true);

File: java/server/test/org/openqa/grid/e2e/misc/WebDriverPriorityDemo.java
Patch:
@@ -100,7 +100,7 @@ public void test1StartDriver() throws MalformedURLException {
     DesiredCapabilities ff = DesiredCapabilities.firefox();
     runningOne = new RemoteWebDriver(new URL(hubURL + "/grid/driver"), ff);
     runningOne.get(hubURL + "/grid/console");
-    Assert.assertEquals(runningOne.getTitle(), "Grid overview");
+    Assert.assertEquals(runningOne.getTitle(), "Grid Console");
 
   }
 
@@ -196,7 +196,7 @@ public void test5ValidateStateAndPickTheImportantOne() throws InterruptedExcepti
         System.out.println("waiting for browser to start");
       }
       importantOne.get(hubURL + "/grid/console");
-      Assert.assertEquals(importantOne.getTitle(), "Grid overview");
+      Assert.assertEquals(importantOne.getTitle(), "Grid Console");
     } finally {
       // cleaning the queue to avoid having some browsers left over after
       // the test

File: java/server/test/org/openqa/grid/e2e/node/NodeTimeOutTest.java
Patch:
@@ -90,7 +90,7 @@ public void webDriverTimesOut() throws InterruptedException, MalformedURLExcepti
     DesiredCapabilities ff = DesiredCapabilities.firefox();
     WebDriver driver = new RemoteWebDriver(new URL(hub.getUrl() + "/wd/hub"), ff);
     driver.get(url);
-    Assert.assertEquals(driver.getTitle(), "Grid overview");
+    Assert.assertEquals(driver.getTitle(), "Grid Console");
     TestWaiter.waitFor(new Callable<Integer>() {
       public Integer call() throws Exception {
         Integer i = hub.getRegistry().getActiveSessions().size();

File: java/server/test/org/openqa/grid/e2e/node/SmokeTest.java
Patch:
@@ -73,7 +73,7 @@ public void firefoxOnWebDriver() throws MalformedURLException {
       DesiredCapabilities ff = DesiredCapabilities.firefox();
       driver = new RemoteWebDriver(new URL(hub.getUrl() + "/wd/hub"), ff);
       driver.get(hub.getUrl() + "/grid/console");
-      Assert.assertEquals(driver.getTitle(), "Grid overview");
+      Assert.assertEquals(driver.getTitle(), "Grid Console");
     } finally {
       if (driver != null) {
         driver.quit();
@@ -91,7 +91,7 @@ public void firefoxOnSelenium() throws MalformedURLException {
       selenium.start();
       Assert.assertEquals(hub.getRegistry().getActiveSessions().size(), 1);
       selenium.open(hub.getUrl() + "/grid/console");
-      Assert.assertTrue(selenium.getTitle().contains("Grid overview"));
+      Assert.assertEquals(selenium.getTitle(), "Grid Console");
       
     } finally {
       if (selenium != null) {

File: java/client/test/org/openqa/selenium/StandardSeleniumTests.java
Patch:
@@ -29,6 +29,7 @@
 import org.openqa.selenium.logging.AvailableLogsTest;
 import org.openqa.selenium.logging.GetLogsTest;
 import org.openqa.selenium.logging.PerformanceLoggingTest;
+import org.openqa.selenium.logging.PerformanceLogTypeTest;
 import org.openqa.selenium.support.ui.SelectElementTest;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.ParallelSuite;
@@ -68,6 +69,7 @@
     PageLoadingTest.class,
     PartialLinkTextMatchTest.class,
     PerformanceLoggingTest.class,
+    PerformanceLogTypeTest.class,
     ProxySettingTest.class,
     RenderedWebElementTest.class,
     RotatableTest.class,

File: java/client/test/org/openqa/selenium/logging/AvailableLogsTest.java
Patch:
@@ -25,7 +25,6 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
-import static org.openqa.selenium.testing.TestUtilities.isOldChromedriver;
 
 import java.util.Set;
 
@@ -43,6 +42,7 @@
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA_MOBILE;
 import static org.openqa.selenium.testing.Ignore.Driver.PHANTOMJS;
 import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
+import static org.openqa.selenium.testing.TestUtilities.isOldChromedriver;
 
 @Ignore({ANDROID, HTMLUNIT, IE, IPHONE, OPERA, OPERA_MOBILE, PHANTOMJS, SAFARI})
 public class AvailableLogsTest extends JUnit4TestBase {
@@ -97,7 +97,6 @@ public void driverLogShouldBeEnabledByDefault() {
   }
 
   @Test
-  @Ignore({CHROME})  // Remove when chromedriver2 has it
   public void profilerLogShouldBeDisabledByDefault() {
     assumeFalse(isOldChromedriver(driver));
     Set<String> logTypes = driver.manage().logs().getAvailableLogTypes();
@@ -125,4 +124,4 @@ public void serverLogShouldBeEnabledByDefaultOnRemote() {
                logTypes.contains(LogType.SERVER));
   }
 
-}
\ No newline at end of file
+}

File: java/client/test/org/openqa/selenium/WaitingConditions.java
Patch:
@@ -264,7 +264,6 @@ public static Callable<String> newWindowIsOpened(final WebDriver driver, final S
       public String call() throws Exception {
         Set<String> currentWindowHandles = driver.getWindowHandles();
         if (currentWindowHandles.size() > originalHandles.size()) {
-          sleepBecauseOfIssue2764();
           currentWindowHandles.removeAll(originalHandles);
           return currentWindowHandles.iterator().next();
         } else {

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -21,7 +21,7 @@
 
 import org.openqa.grid.internal.Registry;
 import org.openqa.grid.internal.utils.GridHubConfiguration;
-import org.openqa.grid.web.servlet.ConsoleServlet;
+import org.openqa.grid.web.servlet.beta.ConsoleServlet;
 import org.openqa.grid.web.servlet.DisplayHelpServlet;
 import org.openqa.grid.web.servlet.DriverServlet;
 import org.openqa.grid.web.servlet.Grid1HeartbeatServlet;
@@ -113,8 +113,7 @@ private void initServer() {
       root.addServlet(DisplayHelpServlet.class.getName(), "/*");
 
       root.addServlet(ConsoleServlet.class.getName(), "/grid/console/*");
-      root.addServlet(org.openqa.grid.web.servlet.beta.ConsoleServlet.class.getName(),
-                      "/grid/beta/console/*");
+      root.addServlet(ConsoleServlet.class.getName(), "/grid/beta/console/*");
       root.addServlet(RegistrationServlet.class.getName(), "/grid/register/*");
       // TODO remove at some point. Here for backward compatibility of
       // tests etc.

File: java/server/src/org/openqa/grid/web/servlet/ResourceServlet.java
Patch:
@@ -51,7 +51,6 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)
   protected void process(HttpServletRequest request, HttpServletResponse response)
       throws IOException {
     String resource = request.getPathInfo().replace(request.getServletPath(), "");
-    System.out.println("Serving resource " + resource);
     if (resource.startsWith("/"))
       resource = resource.replaceFirst("/", "");
     InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(resource);

File: java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java
Patch:
@@ -105,7 +105,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
     if (refresh != -1) {
       builder.append(String.format("<meta http-equiv='refresh' content='%d' />", refresh));
     }
-    builder.append("<title>Grid Console (beta)</title>");
+    builder.append("<title>Grid Console</title>");
 
     builder.append("<style>");
     builder.append(".busy {");
@@ -198,7 +198,7 @@ private Object getHeader() {
     StringBuilder builder = new StringBuilder();
     builder.append("<div id='header'>");
     builder.append("<h1><a href='http://code.google.com/p/selenium/wiki/Grid2' >Selenium</a></h1>");
-    builder.append("<h2>Grid Console (beta) v.");
+    builder.append("<h2>Grid Console v.");
     builder.append(coreVersion).append(coreRevision);
     builder.append("</h2>");
     builder.append("<div>.</div>");

File: java/server/src/org/openqa/grid/web/servlet/beta/WebProxyHtmlRendererBeta.java
Patch:
@@ -154,7 +154,7 @@ private String getSingleSlotHtml(TestSlot s, String icon) {
     TestSession session = s.getSession();
     if (icon != null) {
       builder.append("<img ");
-      builder.append("src='").append(icon).append("' ");
+      builder.append("src='").append(icon).append("' width='16' height='16'");
     } else {
       builder.append("<a href='#' ");
     }

File: java/server/src/org/openqa/grid/internal/TestSlot.java
Patch:
@@ -20,6 +20,7 @@
 import org.openqa.grid.common.exception.GridException;
 import org.openqa.grid.internal.listeners.TestSessionListener;
 import org.openqa.grid.internal.utils.CapabilityMatcher;
+import org.openqa.grid.internal.utils.GridHubConfiguration;
 
 import java.net.MalformedURLException;
 import java.net.URL;
@@ -91,8 +92,8 @@ public RemoteProxy getProxy() {
    * test slot can host the desired capabilities, {@link CapabilityMatcher#matches(Map, Map)} is
    * invoked.
    * <p/>
-   * Use {@link RemoteProxy#setCapabilityHelper(CapabilityMatcher)} on the proxy histing the test
-   * slot to modify the definition of match
+   * Use {@link GridHubConfiguration#setCapabilityMatcher(CapabilityMatcher)}
+   * on the proxy hosting the test slot to modify the definition of match
    * 
    * @param desiredCapabilities capabilities for the new session
    * @return a new session linked to that testSlot if possible, null otherwise.

File: java/server/src/org/openqa/grid/common/GridRole.java
Patch:
@@ -37,7 +37,7 @@ public static GridRole find(String[] args) {
     }
     for (int i = 0; i < args.length; i++) {
       if ("-role".equals(args[i])) {
-        if (i == args.length) {
+        if (i == args.length - 1) {
           throw new GridConfigurationException(
               "-role needs to be followed by the role of this component in the grid.");
         } else {

File: java/server/test/org/openqa/grid/e2e/node/DefaultProxyFindsFirefoxLocationsTest.java
Patch:
@@ -76,6 +76,7 @@ public static void prepare() throws Exception {
     remote.addBrowser(ff7, 1);
     remote.addBrowser(ff3, 1);
 
+    remote.startRemoteServer();
     remote.sendRegistrationRequest();
   }
 
@@ -103,6 +104,7 @@ public void firefoxOnWebDriver() throws MalformedURLException {
 
   @AfterClass
   public static void teardown() throws Exception {
+    remote.stopRemoteServer();
     hub.stop();
   }
 

File: java/server/test/org/openqa/grid/internal/RemoteProxyFactory.java
Patch:
@@ -20,7 +20,9 @@
 import java.util.List;
 import java.util.Map;
 
+import org.json.JSONObject;
 import org.openqa.grid.common.RegistrationRequest;
+import org.openqa.grid.common.exception.GridException;
 import org.openqa.selenium.remote.DesiredCapabilities;
 
 @SuppressWarnings({"JavaDoc"})
@@ -98,7 +100,7 @@ public static RemoteProxy getNewBasicRemoteProxy(List<Map<String, Object>> caps,
   }
 
   private static RemoteProxy createProxy(Registry registry, RegistrationRequest req) {
-    final RemoteProxy remoteProxy = new BaseRemoteProxy(req, registry);
+    final RemoteProxy remoteProxy = new DetachedRemoteProxy(req, registry);
     remoteProxy.setupTimeoutListener();
     return remoteProxy;
   }

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package org.openqa.selenium;
 
+import org.hamcrest.Matchers;
 import org.junit.Test;
 import org.openqa.selenium.internal.Locatable;
 import org.openqa.selenium.testing.Ignore;
@@ -207,14 +208,14 @@ public void testChangeEventIsFiredAppropriatelyWhenFocusIsLost() {
     input.sendKeys("test");
     moveFocus();
     assertThat(driver.findElement(By.id("result")).getText().trim(),
-               either(is("focus change blur")).or(is("focus blur change")));
+               Matchers.<String>either(is("focus change blur")).or(is("focus blur change")));
 
     input.sendKeys(Keys.BACK_SPACE, "t");
     moveFocus();
 
     // I weep.
     assertThat(driver.findElement(By.id("result")).getText().trim(),
-               either(is("focus change blur focus blur"))
+               Matchers.<String>either(is("focus change blur focus blur"))
                    .or(is("focus blur change focus blur"))
                    .or(is("focus blur change focus blur change"))
                    .or(is("focus change blur focus change blur"))); // What Chrome does

File: java/server/src/org/openqa/grid/selenium/GridLauncher.java
Patch:
@@ -93,8 +93,8 @@ public static void main(String[] args) throws Exception {
           Hub h = new Hub(c);
           h.start();
         } catch (GridConfigurationException e) {
-          e.printStackTrace();
           GridDocHelper.printHelp(e.getMessage());
+          e.printStackTrace();
         }
         break;
       case NODE:
@@ -105,8 +105,8 @@ public static void main(String[] args) throws Exception {
           remote.startRemoteServer();
           remote.startRegistrationProcess();
         } catch (GridConfigurationException e) {
-          e.printStackTrace();
           GridDocHelper.printHelp(e.getMessage());
+          e.printStackTrace();
         }
         break;
       default:

File: java/client/src/org/openqa/selenium/By.java
Patch:
@@ -206,15 +206,15 @@ public ById(String id) {
     public List<WebElement> findElements(SearchContext context) {
       if (context instanceof FindsById)
         return ((FindsById) context).findElementsById(id);
-      return ((FindsByXPath) context).findElementsByXPath("*[@id = '" + id
+      return ((FindsByXPath) context).findElementsByXPath(".//*[@id = '" + id
           + "']");
     }
 
     @Override
     public WebElement findElement(SearchContext context) {
       if (context instanceof FindsById)
         return ((FindsById) context).findElementById(id);
-      return ((FindsByXPath) context).findElementByXPath("*[@id = '" + id
+      return ((FindsByXPath) context).findElementByXPath(".//*[@id = '" + id
           + "']");
     }
 

File: java/client/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -325,7 +325,7 @@ public void testShouldBeAbleToClickInAFrame() {
   }
 
   // See https://code.google.com/p/selenium/issues/detail?id=5237
-  @Ignore({FIREFOX, OPERA, ANDROID, OPERA_MOBILE})
+  @Ignore({OPERA, ANDROID, OPERA_MOBILE})
   @JavascriptEnabled
   @Test
   public void testShouldBeAbleToClickInAFrameThatRewritesTopWindowLocation() {

File: java/client/src/org/openqa/selenium/internal/SocketLock.java
Patch:
@@ -22,6 +22,7 @@
 import java.net.BindException;
 import java.net.InetSocketAddress;
 import java.net.Socket;
+import java.net.SocketException;
 
 /**
  * Implements {@link org.openqa.selenium.internal.Lock} via an implementation that uses a well-known
@@ -120,6 +121,8 @@ private boolean isLockFree(InetSocketAddress address) throws IOException {
       return true;
     } catch (BindException e) {
       return false;
+    } catch (SocketException e) {
+      return false;
     }
   }
 }

File: java/client/test/org/openqa/selenium/SvgDocumentTest.java
Patch:
@@ -29,11 +29,12 @@
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA_MOBILE;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
-@Ignore(value = {HTMLUNIT, IE, OPERA, OPERA_MOBILE, SELENESE},
+@Ignore(value = {HTMLUNIT, OPERA, OPERA_MOBILE, SELENESE},
         reason = "HtmlUnit: SVG interaction is only implemented in rendered browsers")
 public class SvgDocumentTest extends JUnit4TestBase {
 
   @Test
+  @Ignore(IE)
   public void testClickOnSvgElement() {
     driver.get(pages.svgTestPage);
     WebElement rect = driver.findElement(By.id("rect"));

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -35,6 +35,7 @@
 import static org.openqa.selenium.WaitingConditions.newWindowIsOpened;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
+import static org.openqa.selenium.testing.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;

File: java/client/src/com/thoughtworks/selenium/condition/JUnitConditionRunner.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.thoughtworks.selenium.Selenium;
 
-import junit.framework.Assert;
+import static org.junit.Assert.fail;
 
 /**
  * This class throws an {@link junit.framework.AssertionFailedError} when the condition is not met.
@@ -50,13 +50,13 @@ public JUnitConditionRunner(Selenium selenium) {
 
   @Override
   public void throwAssertionException(String message) {
-    Assert.fail(message);
+    fail(message);
   }
 
   @Override
   public void throwAssertionException(String message, Throwable cause) {
     String causeText = cause.getMessage();
-    Assert.fail(message + (causeText == null ? "" : "; cause: " + causeText));
+    fail(message + (causeText == null ? "" : "; cause: " + causeText));
   }
 
 

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -45,6 +45,7 @@
 import com.gargoylesoftware.htmlunit.html.FrameWindow;
 import com.gargoylesoftware.htmlunit.html.HtmlAnchor;
 import com.gargoylesoftware.htmlunit.html.HtmlElement;
+import com.gargoylesoftware.htmlunit.html.HtmlHtml;
 import com.gargoylesoftware.htmlunit.html.HtmlPage;
 import com.gargoylesoftware.htmlunit.javascript.host.Location;
 import com.gargoylesoftware.htmlunit.javascript.host.html.HTMLCollection;
@@ -995,7 +996,7 @@ public WebElement activeElement() {
       Page page = currentWindow.getEnclosedPage();
       if (page instanceof HtmlPage) {
         HtmlElement element = ((HtmlPage) page).getFocusedElement();
-        if (element == null) {
+        if (element == null || element instanceof HtmlHtml) {
           List<? extends HtmlElement> allBodies =
               ((HtmlPage) page).getDocumentElement().getHtmlElementsByTagName("body");
           if (!allBodies.isEmpty()) {

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -260,7 +260,7 @@ public void testShouldReturnEmptyStringWhenTagIsSelfClosing() {
     assertThat(text, equalTo(""));
   }
 
-  @Ignore({SELENESE})
+  @Ignore({SELENESE, HTMLUNIT})
   @Test
   public void testShouldNotTrimSpacesWhenLineWraps() {
     driver.get(pages.simpleTestPage);

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -1245,7 +1245,8 @@ public Timeouts setScriptTimeout(long time, TimeUnit unit) {
     }
 
     public Timeouts pageLoadTimeout(long time, TimeUnit unit) {
-      webClient.getOptions().setTimeout((int) TimeUnit.MILLISECONDS.convert(time, unit));
+      int timeout = (int) TimeUnit.MILLISECONDS.convert(time, unit);
+      webClient.getOptions().setTimeout(timeout > 0 ? timeout : 0);
       return this;
     }
   }

File: java/client/src/org/openqa/selenium/SessionNotCreatedException.java
Patch:
@@ -26,6 +26,6 @@ public SessionNotCreatedException(String msg) {
   }
 
   public SessionNotCreatedException(String msg, Throwable cause) {
-    super(message, cause);
+    super(msg, cause);
   }
 }

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -97,7 +97,7 @@ public void testShouldThrowNoSuchWindowException() {
     driver.switchTo().window(current);
   }
 
-  @Ignore({OPERA, SELENESE, OPERA_MOBILE})
+  @Ignore({OPERA, CHROME, SELENESE, OPERA_MOBILE})
   @Test
   public void testShouldThrowNoSuchWindowExceptionOnAnAttemptToGetItsHandle() {
     driver.get(pages.xhtmlTestPage);

File: java/client/src/org/openqa/selenium/support/pagefactory/AjaxElementLocator.java
Patch:
@@ -23,6 +23,8 @@
 import org.openqa.selenium.support.ui.SlowLoadableComponent;
 import org.openqa.selenium.support.ui.SystemClock;
 
+import com.google.common.collect.Lists;
+
 import java.lang.reflect.Field;
 import java.util.List;
 
@@ -84,9 +86,7 @@ public List<WebElement> findElements() {
     try {
       return list.get().getElements();
     } catch (NoSuchElementError e) {
-      throw new NoSuchElementException(
-          String.format("Timed out after %d seconds. %s", timeOutInSeconds, e.getMessage()),
-          e.getCause());
+      return Lists.newArrayList();
     }
   }
 

File: java/client/src/org/openqa/selenium/remote/RemoteLogs.java
Patch:
@@ -62,14 +62,12 @@ public LogEntries get(String logType) {
   }
 
   private LogEntries getRemoteEntries(String logType) {
-    System.out.println("Getting log " + logType);
     Object raw = executeMethod.execute(DriverCommand.GET_LOG, ImmutableMap.of(TYPE_KEY, logType));
     @SuppressWarnings("unchecked")
     List<Map<String, Object>> rawList = (List<Map<String, Object>>) raw;
     List<LogEntry> remoteEntries = Lists.newArrayListWithCapacity(rawList.size());
 
     for (Map<String, Object> obj : rawList) {
-      System.out.println(obj);
       remoteEntries.add(new LogEntry(LogLevelMapping.toLevel((String)obj.get(LEVEL)),
           (Long) obj.get(TIMESTAMP),
           (String) obj.get(MESSAGE)));

File: java/client/src/org/openqa/selenium/remote/RemoteLogs.java
Patch:
@@ -62,12 +62,14 @@ public LogEntries get(String logType) {
   }
 
   private LogEntries getRemoteEntries(String logType) {
+    System.out.println("Getting log " + logType);
     Object raw = executeMethod.execute(DriverCommand.GET_LOG, ImmutableMap.of(TYPE_KEY, logType));
     @SuppressWarnings("unchecked")
     List<Map<String, Object>> rawList = (List<Map<String, Object>>) raw;
     List<LogEntry> remoteEntries = Lists.newArrayListWithCapacity(rawList.size());
 
     for (Map<String, Object> obj : rawList) {
+      System.out.println(obj);
       remoteEntries.add(new LogEntry(LogLevelMapping.toLevel((String)obj.get(LEVEL)),
           (Long) obj.get(TIMESTAMP),
           (String) obj.get(MESSAGE)));

File: java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java
Patch:
@@ -40,7 +40,6 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
-import java.util.logging.Logger;
 
 /**
  * Utility class for converting between JSON and Java Objects.
@@ -226,7 +225,6 @@ private Object convertObject(Object toConvert, int maxDepth) throws Exception {
     }
 
     try {
-      Logger.getLogger("bully").info(String.valueOf(toConvert));
       return mapObject(toConvert, maxDepth - 1, toConvert instanceof Cookie);
     } catch (Exception e) {
       throw new WebDriverException(e);
@@ -246,7 +244,6 @@ private Method getToJsonMethod(Object toConvert) {
   }
 
   private Object mapObject(Object toConvert, int maxDepth, boolean skipNulls) throws Exception {
-    Logger.getLogger("bully").info("maxDepth: " + maxDepth);
     if (maxDepth < 1) {
       return null;
     }

File: java/client/src/com/thoughtworks/selenium/HttpCommandProcessor.java
Patch:
@@ -178,7 +178,7 @@ protected String getCommandResponseAsString(String command) throws IOException {
         wr.flush();
         responsecode = getResponseCode(uc);
         if (responsecode == HttpURLConnection.HTTP_MOVED_PERM) {
-          pathToServlet = uc.getRequestProperty("Location");
+          pathToServlet = uc.getHeaderField("Location");
         } else if (responsecode != HttpURLConnection.HTTP_OK) {
           throwAssertionFailureExceptionOrError(uc.getResponseMessage());
         } else {

File: java/client/src/org/openqa/selenium/firefox/internal/ClasspathExtension.java
Patch:
@@ -18,9 +18,9 @@
 
 import com.google.common.io.Resources;
 
-import org.apache.commons.io.IOUtils;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.io.FileHandler;
+import org.openqa.selenium.io.IOUtils;
 
 import java.io.File;
 import java.io.FileOutputStream;

File: java/client/test/org/openqa/selenium/environment/webserver/ManifestServlet.java
Patch:
@@ -29,7 +29,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.commons.io.IOUtils;
+import org.openqa.selenium.io.IOUtils;
 
 public class ManifestServlet extends HttpServlet {
   @Override

File: java/client/test/org/openqa/selenium/environment/webserver/Utf8Servlet.java
Patch:
@@ -7,7 +7,7 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import org.apache.commons.io.IOUtils;
+import org.openqa.selenium.io.IOUtils;
 
 import java.io.FileInputStream;
 import java.io.IOException;

File: java/server/src/org/openqa/grid/common/Utils.java
Patch:
@@ -25,10 +25,10 @@ public static String getSelenium1Equivalent(String webDriverBrowserName) {
     if (BrowserType.FIREFOX.equals(webDriverBrowserName)) {
       return "*firefox";
     }
-    if ("internet explorer".equals(webDriverBrowserName)) {
+    if (BrowserType.IE.equals(webDriverBrowserName)) {
       return "*iexplore";
     }
-    if ("chrome".equals(webDriverBrowserName)) {
+    if (BrowserType.CHROME.equals(webDriverBrowserName)) {
       return "*googlechrome";
     }
     return webDriverBrowserName;

File: java/server/src/org/openqa/grid/selenium/proxy/DefaultRemoteProxy.java
Patch:
@@ -38,6 +38,7 @@
 import org.openqa.grid.internal.utils.HtmlRenderer;
 import org.openqa.grid.selenium.utils.WebProxyHtmlRenderer;
 import org.openqa.selenium.firefox.FirefoxDriver;
+import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 
 import java.io.IOException;
@@ -246,7 +247,7 @@ public boolean isDown() {
   public void beforeSession(TestSession session) {
     if (session.getSlot().getProtocol() == SeleniumProtocol.WebDriver) {
       Map<String, Object> cap = session.getRequestedCapabilities();
-      if ("firefox".equals(cap.get(CapabilityType.BROWSER_NAME))) {
+      if (BrowserType.FIREFOX.equals(cap.get(CapabilityType.BROWSER_NAME))) {
         if (session.getSlot().getCapabilities().get(FirefoxDriver.BINARY) != null
             && cap.get(FirefoxDriver.BINARY) == null) {
           session.getRequestedCapabilities().put(FirefoxDriver.BINARY,

File: java/server/src/org/openqa/grid/web/utils/BrowserNameUtils.java
Patch:
@@ -76,7 +76,7 @@ public static String consoleIconName(DesiredCapabilities cap, Registry registry)
 
     // Map browser environments to icon names.
     if (browserString.contains("iexplore") || browserString.startsWith("*iehta")) {
-      ret = "internet explorer";
+      ret = BrowserType.IE;
     } else if (browserString.contains("firefox") || browserString.startsWith("*chrome")) {
       if (cap.getVersion() != null && cap.getVersion().toLowerCase().equals("beta") ||
           cap.getBrowserName().toLowerCase().contains("beta")) {
@@ -88,13 +88,13 @@ public static String consoleIconName(DesiredCapabilities cap, Registry registry)
           cap.getBrowserName().toLowerCase().contains("nightly")) {
         ret = "nightly";
       } else {
-        ret = "firefox";
+        ret = BrowserType.FIREFOX;
       }
 
     } else if (browserString.startsWith("*safari")) {
       ret = BrowserType.SAFARI;
     } else if (browserString.startsWith("*googlechrome")) {
-      ret = "chrome";
+      ret = BrowserType.CHROME;
     } else if (browserString.startsWith("opera")) {
       ret = BrowserType.OPERA;
     }

File: java/server/test/org/openqa/grid/common/RegistrationRequestTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 import org.openqa.selenium.Platform;
+import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 
@@ -68,7 +69,7 @@ public void json() {
     req.setConfiguration(config);
 
     for (int i = 0; i < 5; i++) {
-      DesiredCapabilities cap = new DesiredCapabilities("firefox", "" + i, Platform.LINUX);
+      DesiredCapabilities cap = new DesiredCapabilities(BrowserType.FIREFOX, "" + i, Platform.LINUX);
       req.addDesiredCapability(cap);
     }
 

File: java/server/test/org/openqa/grid/e2e/node/DefaultProxyFindsFirefoxLocationsTest.java
Patch:
@@ -37,6 +37,7 @@
 import org.openqa.grid.web.servlet.handler.RequestType;
 import org.openqa.grid.web.servlet.handler.SeleniumBasedRequest;
 import org.openqa.selenium.firefox.FirefoxDriver;
+import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.testng.Assert;
@@ -83,7 +84,7 @@ public void prepare() throws Exception {
   @Test(timeOut = 1000)
   public void firefoxOnWebDriver() throws MalformedURLException {
     Map<String, Object> ff = new HashMap<String, Object>();
-    ff.put(CapabilityType.BROWSER_NAME, "firefox");
+    ff.put(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
     ff.put(CapabilityType.VERSION, "7");
     RequestHandler newSessionRequest = new MockedRequestHandler(getNewRequest(ff));
     newSessionRequest.process();
@@ -92,7 +93,7 @@ public void firefoxOnWebDriver() throws MalformedURLException {
         newSessionRequest.getSession().getRequestedCapabilities().get(FirefoxDriver.BINARY));
 
     Map<String, Object> ff2 = new HashMap<String, Object>();
-    ff2.put(CapabilityType.BROWSER_NAME, "firefox");
+    ff2.put(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
     ff2.put(CapabilityType.VERSION, "3");
     RequestHandler newSessionRequest2 = new MockedRequestHandler(getNewRequest(ff2));
     newSessionRequest2.process();

File: java/server/test/org/openqa/grid/internal/utils/DefaultCapabilityMatcherTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.openqa.grid.common.RegistrationRequest.VERSION;
 
 import org.openqa.selenium.Platform;
+import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.CapabilityType;
 
 import org.junit.Assert;
@@ -99,12 +100,12 @@ public void nullEmptyValues() {
     DefaultCapabilityMatcher matcher = new DefaultCapabilityMatcher();
 
     Map<String, Object> requested = new HashMap<String, Object>();
-    requested.put(CapabilityType.BROWSER_NAME, "firefox");
+    requested.put(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
     requested.put(CapabilityType.PLATFORM, null);
     requested.put(CapabilityType.VERSION, "");
 
     Map<String, Object> node = new HashMap<String, Object>();
-    node.put(CapabilityType.BROWSER_NAME, "firefox");
+    node.put(CapabilityType.BROWSER_NAME, BrowserType.FIREFOX);
     node.put(CapabilityType.PLATFORM, Platform.LINUX);
     node.put(CapabilityType.VERSION, "3.6");
 

File: java/server/test/org/openqa/selenium/remote/server/DriverFactoryTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.StubDriver;
 import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.remote.BrowserType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 
 import static org.junit.Assert.assertEquals;
@@ -102,7 +103,7 @@ abstract class Opera implements WebDriver {}
     factory.registerDriver(DesiredCapabilities.opera(), Opera.class);
 
     DesiredCapabilities desiredCapabilities = new DesiredCapabilities();
-    desiredCapabilities.setBrowserName("internet explorer");
+    desiredCapabilities.setBrowserName(BrowserType.IE);
     desiredCapabilities.setVersion("");
     desiredCapabilities.setJavascriptEnabled(true);
     desiredCapabilities.setPlatform(Platform.ANY);

File: java/server/src/cybervillains/ca/Generator.java
Patch:
@@ -29,7 +29,7 @@
  * <pre>
  * $> cd SELENIUM_SOURCE_DIRECTORY_ROOT
  * $> ./go //java/server/src/cybervillains:cybervillains
- * $> java -cp build/java/server/src/cybervillains/cybervillains.jar:third_party/java/bouncycastle/bcprov-jdk15-146.jar cybervillains.ca.Generator
+ * $> java -cp build/java/server/src/cybervillains/cybervillains.jar:third_party/java/bouncycastle/bcprov-jdk15on-1.48.jar cybervillains.ca.Generator
  * $> cp -r new_certs/* java/server/src/org/openqa/selenium/server/sslSupport/
  * $> rm -r new_certs
  * $> COMMIT TO SELENIUM REPO

File: java/client/test/com/thoughtworks/selenium/WebDriverSeleniumTestSuite.java
Patch:
@@ -28,7 +28,6 @@
 import com.thoughtworks.selenium.corebased.TestClick;
 import com.thoughtworks.selenium.corebased.TestClickAt;
 import com.thoughtworks.selenium.corebased.TestClickJavascriptHref;
-import com.thoughtworks.selenium.corebased.TestClickJavascriptHrefWithVoidChrome;
 import com.thoughtworks.selenium.corebased.TestCommandError;
 import com.thoughtworks.selenium.corebased.TestComments;
 import com.thoughtworks.selenium.corebased.TestCssLocators;

File: java/client/test/com/thoughtworks/selenium/condition/ConditionTest.java
Patch:
@@ -135,7 +135,6 @@ public boolean isTrue(ConditionRunner.Context runner) {
   @Test
   public void testCanLateNotifyOfSeleniumExceptionAfterTimeout() throws Exception {
     long start = System.currentTimeMillis();
-    final int[] time = new int[1];
     JUnitConditionRunner conditionRunner1 = new JUnitConditionRunner(null, 0, 100, 5000);
     try {
       conditionRunner1.waitFor(new Condition() {

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -52,7 +52,6 @@ public void setUp() throws Exception {
   @After
   public void tearDown() throws Exception {
     driver.switchTo().defaultContent();
-    System.out.println(driver.manage().window().getSize());
   }
 
   @Test

File: java/client/test/org/openqa/selenium/environment/webserver/ManifestServlet.java
Patch:
@@ -46,7 +46,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)
     } catch (IOException e) {
       throw new ServletException("Failed to read cache-manifest file: " + manifestPath);
     } finally {
-      Closeables.closeQuietly(is);
+      Closeables.close(is, true);
     }
 
     response.setContentType("text/cache-manifest");

File: java/client/test/org/openqa/selenium/environment/webserver/Utf8Servlet.java
Patch:
@@ -30,7 +30,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)
           request.getPathInfo() + ", servlet path: " + request.getServletPath() +
           " and context path: " + request.getContextPath());
     } finally {
-      Closeables.closeQuietly(is);
+      Closeables.close(is, true);
     }
 
     response.setContentType("text/html; charset=UTF-8");

File: java/client/test/org/openqa/selenium/html5/LocationContextTest.java
Patch:
@@ -20,14 +20,11 @@
 import org.junit.Test;
 import org.openqa.selenium.testing.JUnit4TestBase;
 
-import java.util.logging.Logger;
-
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assume.assumeTrue;
 
 public class LocationContextTest  extends JUnit4TestBase {
-  private static final Logger logger = Logger.getLogger(LocationContextTest.class.getName());
 
   @Before
   public void hasLocationContext() {

File: java/client/test/org/openqa/selenium/io/ZipTest.java
Patch:
@@ -175,7 +175,7 @@ private void touch(File file) throws IOException {
     }
     FileOutputStream fos = new FileOutputStream(file);
     fos.write("".getBytes());
-    Closeables.closeQuietly(fos);
+    Closeables.close(fos, true);
 
     assertTrue(file.exists());
   }

File: java/client/test/org/openqa/selenium/javascript/ClosureTestStatement.java
Patch:
@@ -52,7 +52,7 @@ public void evaluate() throws Throwable {
     }
     
     while (!getBoolean(executor, Query.IS_FINISHED)) {
-      long elapsedTime = stopwatch.elapsedTime(TimeUnit.SECONDS);
+      long elapsedTime = stopwatch.elapsed(TimeUnit.SECONDS);
       if (timeoutSeconds > 0 && elapsedTime > timeoutSeconds) {
         throw new JavaScriptAssertionError("Tests timed out after " + elapsedTime + " s");
       }

File: java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java
Patch:
@@ -74,7 +74,7 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)
 
   protected void process(HttpServletRequest request, HttpServletResponse response)
       throws IOException {
-    response.setContentType("text/html");
+    response.setContentType("application/json");
     response.setCharacterEncoding("UTF-8");
     response.setStatus(200);
     JSONObject res;

File: java/server/src/org/openqa/grid/web/servlet/ProxyStatusServlet.java
Patch:
@@ -63,7 +63,7 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)
 
   protected void process(HttpServletRequest request, HttpServletResponse response)
       throws IOException {
-    response.setContentType("text/html");
+    response.setContentType("application/json");
     response.setCharacterEncoding("UTF-8");
     response.setStatus(200);
     JSONObject res;
@@ -165,7 +165,7 @@ private Object getValueByReflection(RemoteProxy proxy, String method) {
   private List<String> getExtraMethodsRequested(JSONObject request) {
     List<String> res = new ArrayList<String>();
 
-    for (Iterator iterator = request.keys(); iterator.hasNext();) {
+    for (Iterator<?> iterator = request.keys(); iterator.hasNext();) {
       String key = (String) iterator.next();
       if (!"id".equals(key)) {
         res.add(key);

File: java/server/src/org/openqa/grid/web/servlet/TestSessionStatusServlet.java
Patch:
@@ -59,7 +59,7 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)
 
   protected void process(HttpServletRequest request, HttpServletResponse response)
       throws IOException {
-    response.setContentType("text/html");
+    response.setContentType("application/json");
     response.setCharacterEncoding("UTF-8");
     response.setStatus(200);
     JSONObject res;

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -183,7 +183,6 @@ public void testShouldAllowTheUserToGetTheTextOfAnAlert() {
   }
 
   @Test
-  @Ignore(value = {IE}, issues = {4594})
   public void testShouldAllowTheUserToGetTheTextOfAPrompt() {
     driver.findElement(By.id("prompt")).click();
 

File: java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java
Patch:
@@ -94,10 +94,10 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
     builder
         .append("<script src='http://ajax.googleapis.com/ajax/libs/jquery/1.6.1/jquery.min.js'></script>");
 
-    builder.append("<script src='/grid/resources/images/console-beta.js'></script>");
+    builder.append("<script src='/grid/resources/org/openqa/grid/images/console-beta.js'></script>");
 
     builder
-        .append("<link href='/grid/resources/images/console-beta.css' rel='stylesheet' type='text/css' />");
+        .append("<link href='/grid/resources/org/openqa/grid/images/console-beta.css' rel='stylesheet' type='text/css' />");
 
 
     if (refresh != -1) {

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -330,7 +330,7 @@ private HttpRequest prepareProxyRequest(HttpServletRequest request
                                       + pathSpec);
     }
     String end = path.substring(pathSpec.length());
-    String ok = remoteURL + end;
+    String ok = remoteURL + end + "?" + request.getQueryString();
     String uri = new URL(remoteURL, ok).toExternalForm();
 
     InputStream body = null;

File: java/client/src/org/openqa/selenium/ie/InternetExplorerDriver.java
Patch:
@@ -40,6 +40,8 @@ public class InternetExplorerDriver extends RemoteWebDriver implements TakesScre
    */
   public final static String INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS =
       "ignoreProtectedModeSettings";
+  public final static String ENABLE_PERSISTENT_HOVERING = "enablePersistentHover";
+  public final static String REQUIRE_WINDOW_FOCUS = "requireWindowFocus";
 
   private WindowsProxyManager proxyManager;
 

File: java/server/src/org/openqa/grid/internal/ActiveTestSessions.java
Patch:
@@ -96,7 +96,7 @@ public TestSession findSessionByInternalKey(String internalKey) {
   public TestSession getExistingSession(ExternalSessionKey externalkey) {
     TestSession sessionByExternalKey = findSessionByExternalKey(externalkey);
     if (sessionByExternalKey == null) {
-      SessionTerminationReason sessionTerminationReason = reasons.get(externalkey);
+      SessionTerminationReason sessionTerminationReason = externalkey != null ? reasons.get(externalkey) : null;
       String keyId = externalkey != null ? externalkey.getKey() : "(null externalkey)";
       if (sessionTerminationReason != null) {
           String msg = "Session [" + keyId + "] was terminated due to " + sessionTerminationReason;

File: java/server/src/org/openqa/grid/common/GridDocHelper.java
Patch:
@@ -23,7 +23,7 @@
 
 
 public class GridDocHelper {
-  private static Properties gridProperties = load("defaults/GridParameters.properties");
+  private static Properties gridProperties = load("org/openqa/grid/common/defaults/GridParameters.properties");
 
   public static void printHelp(String msg) {
     printHelpInConsole(gridProperties, msg, true);
@@ -100,10 +100,10 @@ private static Properties load(String resource) {
         p.load(in);
         return p;
       } catch (IOException e) {
-        throw new RuntimeException("bug." + resource + " cannot be loaded.");
+        throw new RuntimeException(resource + " cannot be loaded.");
       }
     } else {
-      throw new RuntimeException("bug." + resource + " cannot be loaded.");
+      throw new RuntimeException(resource + " cannot be loaded.");
     }
   }
 

File: java/client/src/org/openqa/selenium/remote/LocalFileDetector.java
Patch:
@@ -51,6 +51,6 @@ public File getLocalFile(CharSequence... keys) {
 
     log.fine("Detected local file: " + toUpload.exists());
 
-    return toUpload.exists() ? toUpload : null;
+    return toUpload.exists() && toUpload.isFile() ? toUpload : null;
   }
 }

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -500,7 +500,7 @@ private DesiredCapabilities addCapabilityFromString(String capability) {
     for (String capabilityPair : s) {
       if (capabilityPair.split("=").length != 2) {
         throw new GridConfigurationException("-browser format is key1=value1,key2=value2 "
-            + capabilityPair + " deosn't follow that format.");
+            + capabilityPair + " doesn't follow that format.");
       }
       String key = capabilityPair.split("=")[0];
       String value = capabilityPair.split("=")[1];

File: java/server/src/org/openqa/grid/internal/NewSessionRequestQueue.java
Patch:
@@ -45,7 +45,7 @@ class NewSessionRequestQueue {
 
 
   /**
-   * Adds a requesthandler to this queue
+   * Adds a request handler to this queue.
    * @param request the RequestHandler to add
    */
   public synchronized void add(RequestHandler request) {
@@ -101,9 +101,9 @@ public synchronized boolean removeNewSessionRequest(RequestHandler request) {
   }
 
   /**
-   * Provides the desiredcapabilities of all the items in this queue.
+   * Provides the desired capabilities of all the items in this queue.
    *
-   * @return An Iteerable of unmodifyable maps.
+   * @return An Iterable of unmodifiable maps.
    */
   public synchronized Iterable<DesiredCapabilities> getDesiredCapabilities() {
     List<DesiredCapabilities> result = new ArrayList<DesiredCapabilities>();

File: java/server/src/org/openqa/grid/internal/Registry.java
Patch:
@@ -108,7 +108,7 @@ public GridHubConfiguration getConfiguration() {
   }
 
   /**
-   * how long a session can remains in the newSession queue before being quicked out
+   * How long a session can remain in the newSession queue before being evicted.
    *
    * @return the new session wait timeout
    */
@@ -123,7 +123,7 @@ public void setNewSessionWaitTimeout(int newSessionWaitTimeout) {
   /**
    * Ends this test session for the hub, releasing the resources in the hub / registry. It does not
    * release anything on the remote. The resources are released in a separate thread, so the call
-   * returns immediatly. It allows release with long duration not to block the test while the hub is
+   * returns immediately. It allows release with long duration not to block the test while the hub is
    * releasing the resource.
    *
    * @param session The session to terminate
@@ -185,7 +185,7 @@ public void removeIfPresent(RemoteProxy proxy) {
   }
 
   /**
-   * releasing the testslot, WITHOUT running any listener.
+   * Releases the test slot, WITHOUT running any listener.
    */
   public void forceRelease(TestSlot testSlot, SessionTerminationReason reason) {
     if (testSlot.getSession() == null) {

File: java/server/src/org/openqa/grid/internal/utils/GridHubConfiguration.java
Patch:
@@ -64,7 +64,7 @@ public class GridHubConfiguration {
   private int newSessionWaitTimeout;
 
   /**
-   * list of extra serlvets this hub will display. Allows to present custom view of the hub for
+   * list of extra servlets this hub will display. Allows to present custom view of the hub for
    * monitoring and management purpose
    */
   private List<String> servlets = new ArrayList<String>();
@@ -92,8 +92,7 @@ public class GridHubConfiguration {
   private boolean throwOnCapabilityNotPresent = true;
 
   /**
-   * The filename to use for logging. Default value is <code>null</code> and indicates logging to
-   * STDOUT.
+   * The filename to use for logging. Default value is <code>null</code> and indicates logging to STDOUT.
    */
   private String logFilename;
 

File: java/server/src/org/openqa/grid/internal/utils/GridNodeConfiguration.java
Patch:
@@ -65,7 +65,7 @@ public class GridNodeConfiguration {
 
   /**
    * how long can a session be idle before being considered timed out. Working together with cleanup
-   * cycle. Worst case scenario, a session can be idle for timout + cleanup cycle before the timeout
+   * cycle. Worst case scenario, a session can be idle for timeout + cleanup cycle before the timeout
    * is detected
    */
   public static final String TIME_OUT = "timeout";
@@ -150,7 +150,7 @@ private DesiredCapabilities addCapabilityFromString(String capability) {
     for (String capabilityPair : s) {
       if (capabilityPair.split("=").length != 2) {
         throw new GridConfigurationException("-browser format is key1=value1,key2=value2 " +
-            capabilityPair + " deosn't follow that format.");
+            capabilityPair + " doesn't follow that format.");
       }
       String key = capabilityPair.split("=")[0];
       String value = capabilityPair.split("=")[1];

File: java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java
Patch:
@@ -146,7 +146,7 @@ public void deleteAllBrowsers() {
     nodeConfig.getCapabilities().clear();
   }
 
-  // TODO freynaud keep specified platfrom if specified. At least for unit test purpose.
+  // TODO freynaud keep specified platform if specified. At least for unit test purpose.
   /**
    * Adding the browser described by the capability, automatically finding out what platform the
    * node is launched from ( and overriding it if it was specified )

File: java/server/src/org/openqa/grid/internal/utils/ServerJsonValues.java
Patch:
@@ -31,7 +31,7 @@ public class ServerJsonValues {
 
   /**
    * how many ms can a session be idle before being considered timed out. Working together with
-   * cleanup cycle. Worst case scenario, a session can be idle for timout + cleanup cycle before the
+   * cleanup cycle. Worst case scenario, a session can be idle for timeout + cleanup cycle before the
    * timeout is detected.
    */
   public static final JsonKey CLIENT_TIMEOUT = JsonKey.key("timeout");

File: java/server/src/org/openqa/grid/selenium/GridLauncher.java
Patch:
@@ -41,7 +41,7 @@ public static void main(String[] args) throws Exception {
     if (helper.isParamPresent("-help") || helper.isParamPresent("-h")){
       String separator = "\n----------------------------------\n";
       RemoteControlLauncher.usage(separator+"To use as a standalone server"+separator);
-      GridDocHelper.printHelp(separator+"To use in a grid environement :"+separator,false);
+      GridDocHelper.printHelp(separator+"To use in a grid environment :"+separator,false);
       return;
     }
     

File: java/server/src/org/openqa/grid/web/servlet/HubStatusServlet.java
Patch:
@@ -35,7 +35,7 @@
 import org.openqa.grid.internal.Registry;
 
 /**
- * API to query the hub config remotly.
+ * API to query the hub config remotely.
  * 
  * use the API by sending a GET to grid/api/hub/
  * with the content of the request in JSON,specifying the 
@@ -49,7 +49,7 @@
  *      ]
  * }
  * 
- * if no param is specfied, all params known to the hub are returned.
+ * if no param is specified, all params known to the hub are returned.
  * 
  * {"configuration": []  }
  *

File: java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java
Patch:
@@ -82,7 +82,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
       }
     }
 
-    // TODO freynaud : load template desiredCapability from the hub. Is that usefull?
+    // TODO freynaud : load template desiredCapability from the hub. Is that useful?
 
     final RemoteProxy proxy = BaseRemoteProxy.getNewInstance(server, getRegistry());
     reply(response, "ok");

File: java/server/src/org/openqa/grid/web/servlet/beta/WebProxyHtmlRendererBeta.java
Patch:
@@ -229,10 +229,8 @@ private static Platform getPlatform(TestSlot slot) {
       } else if (o instanceof Platform) {
         return (Platform) o;
       } else {
-        throw new GridException("Cannot cast " + o + " to Paltform");
+        throw new GridException("Cannot cast " + o + " to org.openqa.selenium.Platform");
       }
     }
   }
-
-
 }

File: java/server/src/org/openqa/grid/web/servlet/handler/LegacySeleniumRequest.java
Patch:
@@ -82,7 +82,7 @@ public Map<String, Object> extractDesiredCapability() {
         String envt = piece.replace("1=", "");
         Map<String, Object> cap = new HashMap<String, Object>();
         // TODO freynaud : more splitting, like trying to guess the
-        // plateform or version ?
+        // platform or version ?
 
         // We don't want to process Grid 1.0 environment names because
         // they use an explicit mapping

File: java/server/src/org/openqa/grid/web/servlet/handler/RequestHandler.java
Patch:
@@ -192,7 +192,7 @@ public void waitForSessionBound() throws InterruptedException, TimeoutException
   }
 
   /**
-   * the SeleniumBasedRequest this hanlder is processing.
+   * the SeleniumBasedRequest this handler is processing.
    */
   public SeleniumBasedRequest getRequest() {
     return request;
@@ -238,7 +238,7 @@ public TestSession getSession() {
 
   /**
    * return the session from the server ( = opaque handle used by the server to determine where to
-   * route session-specific commands fro mthe JSON wire protocol ). will be null until the request
+   * route session-specific commands from the JSON wire protocol ). will be null until the request
    * has been processed.
    */
   public ExternalSessionKey getServerSession() {

File: java/server/src/org/openqa/grid/web/utils/ExtraServletUtil.java
Patch:
@@ -27,7 +27,7 @@ public class ExtraServletUtil {
 
   /**
    * Reflexion to create the servlet based on the class name. Returns null if the class cannot be
-   * instanciated.
+   * instantiated.
    * 
    * @param className
    * @return Class object for passed className argument, or <i/null</i> if no
@@ -37,7 +37,7 @@ public static Class<? extends Servlet> createServlet(String className) {
     try {
       return Class.forName(className).asSubclass(Servlet.class);
     } catch (ClassNotFoundException e) {
-      log.warning("The specified class : " + className + " cannot be instanciated " +
+      log.warning("The specified class : " + className + " cannot be instantiated " +
           e.getMessage());
     }
     return null;

File: java/client/src/org/openqa/selenium/browserlaunchers/WindowsProxyManager.java
Patch:
@@ -564,13 +564,13 @@ private void restore() {
   }
 
   private File extractHudsuckr() {
-    File hudsuckr = new File(customProxyPACDir, "hudsuckr.exe");
+    File hudsuckr = new File(customProxyPACDir, "hudsuckr/hudsuckr.exe");
     if (hudsuckr.exists()) {
       return hudsuckr;
     }
     try {
       FileHandler.copyResource(customProxyPACDir, WindowsProxyManager.class,
-          "/org/openqa/selenium/server/hudsuckr/hudsuckr.exe");
+          "hudsuckr/hudsuckr.exe");
     } catch (IOException e) {
       throw new RuntimeException("Bug extracting hudsuckr", e);
     }

File: java/server/src/org/openqa/grid/web/servlet/ConsoleServlet.java
Patch:
@@ -248,7 +248,7 @@ private void getVersion() {
     final Properties p = new Properties();
 
     InputStream stream =
-        Thread.currentThread().getContextClassLoader().getResourceAsStream("/org/openqa/selenium/server/VERSION.txt");
+        Thread.currentThread().getContextClassLoader().getResourceAsStream("VERSION.txt");
     if (stream == null) {
       log.severe("Couldn't determine version number");
       return;

File: java/server/src/org/openqa/grid/web/servlet/DisplayHelpServlet.java
Patch:
@@ -92,7 +92,7 @@ private void getVersion() {
     final Properties p = new Properties();
 
     InputStream stream =
-        Thread.currentThread().getContextClassLoader().getResourceAsStream("/org/openqa/selenium/server/VERSION.txt");
+        Thread.currentThread().getContextClassLoader().getResourceAsStream("VERSION.txt");
     if (stream == null) {
       log.severe("Couldn't determine version number");
       return;

File: java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java
Patch:
@@ -310,7 +310,7 @@ private void getVersion() {
     final Properties p = new Properties();
 
     InputStream stream =
-        Thread.currentThread().getContextClassLoader().getResourceAsStream("/org/openqa/selenium/server/VERSION.txt");
+        Thread.currentThread().getContextClassLoader().getResourceAsStream("VERSION.txt");
     if (stream == null) {
       log.severe("Couldn't determine version number");
       return;

File: java/server/src/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -634,7 +634,7 @@ protected void wireUpSslWithCyberVilliansCA(String host, SslRelay listener) {
       root.delete();
       root.mkdirs();
 
-      ResourceExtractor.extractResourcePath(getClass(), "/org/openqa/selenium/server/sslSupport", root);
+      ResourceExtractor.extractResourcePath(getClass(), "/sslSupport", root);
 
 
       KeyStoreManager mgr =

File: java/server/src/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -306,7 +306,7 @@ protected void createJettyServer(boolean slowResources) {
   private void logVersionNumber() throws IOException {
     final Properties p = new Properties();
 
-    InputStream stream = ClassPathResource.getSeleniumResourceAsStream("/org/openqa/selenium/server/VERSION.txt");
+    InputStream stream = ClassPathResource.getSeleniumResourceAsStream("/VERSION.txt");
     if (stream == null) {
       LOGGER.error("Couldn't determine version number");
       return;

File: java/server/src/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -177,7 +177,7 @@ protected File initProfileTemplate() {
   }
 
   protected void extractProfileFromJar() throws IOException {
-    ResourceExtractor.extractResourcePath(getClass(), "/org/openqa/selenium/server/customProfileDirCUSTFFCHROME",
+    ResourceExtractor.extractResourcePath(getClass(), "/customProfileDirCUSTFFCHROME",
         customProfileDir);
   }
 

File: java/server/src/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncher.java
Patch:
@@ -117,7 +117,7 @@ private void makeCustomProfile(File customProfileDirectory) throws IOException {
     if (firefoxProfileTemplate != null) {
       LauncherUtils.copyDirectory(firefoxProfileTemplate, customProfileDir);
     }
-    ResourceExtractor.extractResourcePath(getClass(), "/org/openqa/selenium/server/customProfileDirCUSTFF", customProfileDir);
+    ResourceExtractor.extractResourcePath(getClass(), "/customProfileDirCUSTFF", customProfileDir);
 
     // Make sure that cert8.db of firefoxProfileTemplate is stored into customProfileDir
     if (firefoxProfileTemplate != null) {

File: java/server/src/org/openqa/selenium/server/browserlaunchers/KonquerorLauncher.java
Patch:
@@ -29,12 +29,13 @@
 import java.io.PrintStream;
 
 public class KonquerorLauncher extends AbstractBrowserLauncher {
-  private static final String KONQUEROR_PROFILE_SRC_LOCATION =
-    "/org/openqa/selenium/server/konqueror";
+  private static final String KONQUEROR_PROFILE_SRC_LOCATION = "/konqueror";
 
   private static final String KONQUEROR_PROFILE_DEST_LOCATION = System.getProperty("user.home") +
       "/.kde/share/config";
 
+  private static final String DEFAULT_KONQUEROR_LOCATION = "/usr/bin/konqueror";
+
   private CommandLine process;
 
   private String browserLaunchLocation;

File: java/server/src/org/openqa/selenium/server/browserlaunchers/OperaCustomProfileLauncher.java
Patch:
@@ -141,8 +141,7 @@ protected void launch(String url) {
 
   private File makeCustomProfile() throws IOException {
     customProfileDir = LauncherUtils.createCustomProfileDir(sessionId);
-    ResourceExtractor.extractResourcePath(getClass(), "/org/openqa/selenium/server/opera",
-        customProfileDir);
+    ResourceExtractor.extractResourcePath(getClass(), "/opera", customProfileDir);
 
     if (simple) return customProfileDir;
 

File: java/server/test/org/openqa/grid/internal/ProxySetTest.java
Patch:
@@ -28,7 +28,7 @@ public class ProxySetTest {
   public void removeIfPresent() {
     Registry registry = Registry.newInstance();
     try {
-      ProxySet set = new ProxySet(true);
+      ProxySet set = registry.getAllProxies();
       RemoteProxy
           p1 =
           RemoteProxyFactory.getNewBasicRemoteProxy("app1", "http://machine1:4444/", registry);

File: java/server/src/org/openqa/selenium/remote/server/handler/DeleteCookie.java
Patch:
@@ -20,7 +20,7 @@
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.rest.ResultType;
 
-public class DeleteCookie extends CookieHandler {
+public class DeleteCookie extends WebDriverHandler {
 
   public DeleteCookie(Session session) {
     super(session);

File: java/client/test/org/openqa/selenium/htmlunit/HtmlUnitCapabilitiesTest.java
Patch:
@@ -49,7 +49,7 @@ public void configurationViaDirectCapabilities() {
         new DesiredCapabilities("firefox", "", Platform.ANY);
 
     assertEquals(HtmlUnitDriver.determineBrowserVersion(firefoxCapabilities),
-        BrowserVersion.FIREFOX_3_6);
+        BrowserVersion.FIREFOX_10);
   }
 
   @Test
@@ -58,7 +58,7 @@ public void configurationOfFirefoxViaRemote() {
         new DesiredCapabilities("htmlunit", "firefox", Platform.ANY);
 
     assertEquals(HtmlUnitDriver.determineBrowserVersion(firefoxCapabilities),
-        BrowserVersion.FIREFOX_3_6);
+        BrowserVersion.FIREFOX_10);
   }
 
   @Test

File: java/client/test/org/openqa/selenium/v1/SeleniumAppServer.java
Patch:
@@ -20,14 +20,16 @@
 
 import org.openqa.selenium.environment.webserver.Jetty7AppServer;
 import org.openqa.selenium.testing.InProject;
+import org.seleniumhq.jetty7.webapp.WebAppContext;
 
 public class SeleniumAppServer extends Jetty7AppServer {
 
   private static final String RC_CONTEXT_PATH = "/selenium-server";
 
   public SeleniumAppServer() {
     super();
-    addWebApplication(RC_CONTEXT_PATH, findRootOfRcTestPages());
+    WebAppContext rcWebApp = addWebApplication(RC_CONTEXT_PATH, findRootOfRcTestPages());
+    addServlet(rcWebApp, "Cached Content", "/cachedContentTest", CachedContentServlet.class);
   }
 
   protected File findRootOfRcTestPages() {

File: java/server/src/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -336,7 +336,6 @@ private void assembleHandlers(boolean slowResources, RemoteControlConfiguration
     context.addHandler(new SingleTestSuiteResourceHandler());
     postResultsHandler = new SeleniumHTMLRunnerResultsHandler();
     context.addHandler(postResultsHandler);
-    context.addHandler(new CachedContentTestHandler());
     server.addContext(context);
 
     // Both the selenium and webdriver contexts must be able to share sessions

File: java/client/src/org/openqa/selenium/lift/Matchers.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2009 Selenium committers
+Copyright 2012 Software Freedom Conservancy
+Copyright 2007-2012 Selenium committers
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -17,7 +18,6 @@
 // Generated source.
 package org.openqa.selenium.lift;
 
-
 public class Matchers {
 
   public static org.hamcrest.Matcher<org.openqa.selenium.WebElement> attribute(
@@ -43,7 +43,7 @@ public static org.hamcrest.Matcher<org.openqa.selenium.WebElement> selection() {
   }
 
   public static org.hamcrest.Matcher<org.openqa.selenium.WebElement> value(Object value) {
-	return org.openqa.selenium.lift.match.ValueMatcher.value(value);
+    return org.openqa.selenium.lift.match.ValueMatcher.value(value);
   }
 
   public static org.hamcrest.Matcher<org.openqa.selenium.WebElement> displayed() {

File: java/server/src/org/openqa/selenium/security/CertificateGenerator.java
Patch:
@@ -63,6 +63,7 @@
 import java.security.cert.X509Certificate;
 import java.util.Date;
 import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicLong;
 
 import javax.security.auth.x500.X500Principal;
 
@@ -73,6 +74,7 @@ public class CertificateGenerator {
   private static final String CLIENT_AUTH = KEY_PURPOSE_BASE + ".2";
   private static final String BOUNCY_CASTLE = "BC";
   private static char[] SIGNING_PASSWORD = "password".toCharArray();
+  private static final AtomicLong serialSeed = new AtomicLong(new Date().getTime()/1000);
 
   private final KeyAndCert caCert;
 
@@ -111,7 +113,7 @@ public KeyAndCert generateCertificate(String hostname, String certificateRevocat
               new ByteArrayInputStream(keypair.getPublic().getEncoded())).readObject());
 
       X509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder(x500issuer,
-                                       BigInteger.valueOf(new Date().getTime()/1000),
+                                       BigInteger.valueOf(serialSeed.getAndIncrement()),
                                        begin,
                                        end, x500subject, keypair.getPublic());
       builder.addExtension(X509Extension.basicConstraints, true, new BasicConstraints(false));

File: java/client/test/org/openqa/selenium/ArchitectureTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
 Copyright 2012 Software Freedom Conservancy
-Copyright 2012 Opera Software ASA
+Copyright 2012 Selenium committers
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.

File: java/client/test/org/openqa/selenium/CoordinatesTest.java
Patch:
@@ -1,6 +1,6 @@
 /*
 Copyright 2012 Software Freedom Conservancy
-Copyright 2012 Opera Software ASA
+Copyright 2012 Selenium committers
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.

File: java/client/test/org/openqa/selenium/StandardSeleniumTests.java
Patch:
@@ -45,6 +45,7 @@
     ClickScrollingTest.class,
     ClickTest.class,
     CookieImplementationTest.class,
+    CoordinatesTest.class,
     CorrectEventFiringTest.class,
     DragAndDropTest.class,
     ElementAttributeTest.class,

File: java/client/src/org/openqa/selenium/WebDriverException.java
Patch:
@@ -92,7 +92,7 @@ public void addInfo(String key, String value) {
     extraInfo.put(key, value);
   }
 
-  private String getAdditionalInformation() {
+  public String getAdditionalInformation() {
     if (! extraInfo.containsKey(DRIVER_INFO)) {
       extraInfo.put(DRIVER_INFO, "driver.version: " + getDriverName(getStackTrace()));
     }

File: java/client/test/org/openqa/selenium/remote/BeanToJsonConverterTest.java
Patch:
@@ -288,7 +288,7 @@ public void testShouldBeAbleToConvertAWebDriverException() throws JSONException
     JSONObject json = new JSONObject(raw);
     assertTrue(raw, json.has("buildInformation"));
     assertTrue(raw, json.has("systemInformation"));
-    assertTrue(raw, json.has("driverInformation"));
+    assertTrue(raw, json.has("additionalInformation"));
 
     assertTrue(raw, json.has("message"));
     assertThat(json.getString("message"), containsString("foo bar baz!\n"));

File: java/client/src/org/openqa/selenium/WebDriverException.java
Patch:
@@ -120,7 +120,7 @@ private String getAdditionalInformation() {
 
     String result = "";
     for (Map.Entry<String, String> entry : extraInfo.entrySet()) {
-      if (entry.getValue().startsWith(entry.getKey())) {
+      if (entry.getValue() != null && entry.getValue().startsWith(entry.getKey())) {
         result += "\n" + entry.getValue();
       } else {
         result += "\n" + entry.getKey() + ": " + entry.getValue();

File: java/client/test/com/thoughtworks/selenium/InternalSelenseTestBase.java
Patch:
@@ -108,8 +108,7 @@ public static void buildJavascriptLibraries() throws IOException {
 
   @BeforeClass
   public static void initializeServer() {
-    SeleniumTestEnvironment env
-      = (SeleniumTestEnvironment) GlobalTestEnvironment.get(SeleniumTestEnvironment.class);
+    SeleniumTestEnvironment env = GlobalTestEnvironment.get(SeleniumTestEnvironment.class);
     seleniumServerUrl = env.getSeleniumServerUrl();
   }
 

File: java/client/test/org/openqa/selenium/environment/GlobalTestEnvironment.java
Patch:
@@ -36,16 +36,16 @@ public static void set(TestEnvironment environment) {
     GlobalTestEnvironment.environment = environment;
   }
 
-  public static synchronized TestEnvironment get(
-      Class<? extends TestEnvironment> startThisIfNothingIsAlreadyRunning) {
+  public static synchronized <T extends TestEnvironment> T get(
+      Class<T> startThisIfNothingIsAlreadyRunning) {
     if (environment == null) {
       try {
         environment = startThisIfNothingIsAlreadyRunning.newInstance();
       } catch (Exception e) {
         throw new RuntimeException(e);
       }
     }
-    return environment;
+    return (T) environment;
   }
 
   public static void stop() {

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -366,7 +366,6 @@ public void testClosingOnlyWindowShouldNotCauseTheBrowserToHang() {
   @NeedsFreshDriver
   @NoDriverAfterTest
   @Test
-  @Ignore(value = ALL, reason = "All browsers keep active frame after switching windows")
   public void testShouldFocusOnTheTopMostFrameAfterSwitchingToAWindow() {
     driver.get(appServer.whereIs("window_switching_tests/page_with_frame.html"));
 
@@ -382,7 +381,7 @@ public void testShouldFocusOnTheTopMostFrameAfterSwitchingToAWindow() {
     driver.close();
     driver.switchTo().window(mainWindow);
     
-    driver.findElement(By.id("myframe"));
+    driver.findElement(By.name("myframe"));
   }
 
   private boolean waitUntilNewWindowIsOpened(final WebDriver driver, final int originalCount) {

File: java/client/src/org/openqa/selenium/WebDriverCommandProcessor.java
Patch:
@@ -280,7 +280,7 @@ private void setUpMethodMap() {
     seleneseMethods.put("mouseUp", new MouseEvent(elementFinder, javascriptLibrary, "mouseup"));
     seleneseMethods.put("mouseUpAt", new MouseEventAt(elementFinder, javascriptLibrary, "mouseup"));
     seleneseMethods.put("open", new Open(baseUrl));
-    seleneseMethods.put("openWindow", new OpenWindow(new GetEval(scriptMutator)));
+    seleneseMethods.put("openWindow", new OpenWindow(baseUrl, new GetEval(scriptMutator)));
     seleneseMethods.put("refresh", new Refresh());
     seleneseMethods.put("removeAllSelections", new RemoveAllSelections(elementFinder));
     seleneseMethods.put("removeSelection", new RemoveSelection(javascriptLibrary, elementFinder));

File: java/client/test/com/thoughtworks/selenium/WebDriverSeleniumTestSuite.java
Patch:
@@ -38,6 +38,7 @@
 import com.thoughtworks.selenium.corebased.TestFailingVerifications;
 import com.thoughtworks.selenium.corebased.TestFramesClick;
 import com.thoughtworks.selenium.corebased.TestFramesOpen;
+import com.thoughtworks.selenium.corebased.TestFramesSpecialTargets;
 import com.thoughtworks.selenium.corebased.TestFunkEventHandling;
 import com.thoughtworks.selenium.corebased.TestGet;
 import com.thoughtworks.selenium.corebased.TestGetTextContent;
@@ -109,7 +110,7 @@
 //    TestFramesClickJavascriptHref.class,
 //    TestFramesNested.class,
     TestFramesOpen.class,
-//    TestFramesSpecialTargets.class,
+    TestFramesSpecialTargets.class,
     TestFunkEventHandling.class,
     TestGet.class,
     TestGetTextContent.class,

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -347,7 +347,7 @@ public void testShouldBeAbleToPassAStringAnAsArgument() {
 
   @JavascriptEnabled
   @Test
-  public void testShouldBeAbleToPassABooleanAnAsArgument() {
+  public void testShouldBeAbleToPassABooleanAsArgument() {
     if (!(driver instanceof JavascriptExecutor)) {
       return;
     }

File: java/client/test/org/openqa/selenium/SlowLoadingPageTest.java
Patch:
@@ -22,7 +22,6 @@
 import org.openqa.selenium.testing.JUnit4TestBase;
 
 import static org.junit.Assert.assertTrue;
-import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA_MOBILE;
@@ -51,9 +50,8 @@ public void testShouldBlockUntilIFramesAreLoaded() throws Exception {
     assertElapsed(3000, now - start);
   }
 
-  @Ignore(value = {IE, IPHONE, SELENESE, OPERA},
+  @Ignore(value = {IPHONE, SELENESE, OPERA},
       reason = "Selenium: refresh is unsupported;" +
-               "IE: fails in IE 6,7,8, works in IE 9;" +
                "Others: untested")
   @Test
   public void testRefreshShouldBlockUntilPageLoads() {

File: java/client/src/org/openqa/selenium/remote/ErrorHandler.java
Patch:
@@ -157,7 +157,6 @@ public Response throwIfResponseFailed(Response response, long duration) throws R
       toThrow = new WebDriverException(message, cause);
     }
 
-    toThrow.setSessionId(response.getSessionId());
     throw toThrow;
   }
 

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/OpenWindow.java
Patch:
@@ -28,7 +28,7 @@ public OpenWindow(GetEval opener) {
   @Override
   protected Void handleSeleneseCommand(final WebDriver driver, final String url,
       final String windowID) {
-    String[] args = {String.format("window.open('%s', '%s');", url, windowID)};
+    String[] args = {String.format("window.open('%s', '%s'); null;", url, windowID)};
 
     opener.apply(driver, args);
 

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/CreateCookie.java
Patch:
@@ -29,7 +29,7 @@
 
 public class CreateCookie extends SeleneseCommand<Void> {
   private final Pattern NAME_VALUE_PAIR_PATTERN = 
-      Pattern.compile("([^\\s=\\[\\]\\(\\),\"\\/\\?@:;]+)=([^=\\[\\]\\(\\),\"\\/\\?@:;]*)");
+      Pattern.compile("([^\\s=\\[\\]\\(\\),\"\\/\\?@:;]+)=([^\\[\\]\\(\\),\"\\/\\?@:;]*)");
   private static final Pattern MAX_AGE_PATTERN = Pattern.compile("max_age=(\\d+)");
   private static final Pattern PATH_PATTERN = Pattern.compile("path=([^\\s,]+)[,]?");
 

File: java/client/src/org/openqa/selenium/remote/SessionNotFoundException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- Copyright 2011 Software Freedom Conservancy.
+ Copyright 2012 Software Freedom Conservancy.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 import org.openqa.selenium.WebDriverException;
 
 /**
- * Indicates that the session is not found.
+ * Indicates that the session is not found (either terminated or not started).
  */
 public class SessionNotFoundException extends WebDriverException {
 

File: java/server/test/org/openqa/selenium/remote/server/CapabilitiesComparatorTest.java
Patch:
@@ -19,8 +19,8 @@
 import static com.google.common.collect.Lists.newArrayList;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.equalTo;
-import static org.hamcrest.number.OrderingComparisons.greaterThan;
-import static org.hamcrest.number.OrderingComparisons.lessThan;
+import static org.hamcrest.number.OrderingComparison.greaterThan;
+import static org.hamcrest.number.OrderingComparison.lessThan;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertThat;
 import static org.openqa.selenium.remote.server.CapabilitiesComparator.getBestMatch;

File: java/client/src/org/openqa/selenium/io/FileHandler.java
Patch:
@@ -224,6 +224,9 @@ private static void copyDir(File from, File to, Filter onlyCopy) throws IOExcept
 
     // List children.
     String[] children = from.list();
+    if (children == null) {
+      throw new IOException("Could not copy directory " + from.getPath());
+    }
     for (String child : children) {
       if (!".parentlock".equals(child) && !"parent.lock".equals(child)) {
         copy(new File(from, child), new File(to, child), onlyCopy);

File: java/client/test/org/openqa/selenium/firefox/CapabilitiesToProfileTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.openqa.selenium.firefox;
 
 import org.junit.Test;
-import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 

File: java/client/src/org/openqa/selenium/WebDriverCommandProcessor.java
Patch:
@@ -198,6 +198,7 @@ private void setUpMethodMap() {
     seleneseMethods.put("controlKeyUp", new ControlKeyUp(keyState));
     seleneseMethods.put("deleteAllVisibleCookies", new DeleteAllVisibleCookies());
     seleneseMethods.put("deleteCookie", new DeleteCookie());
+    seleneseMethods.put("deselectPopUp", new DeselectPopUp(windows));
     seleneseMethods.put("doubleClick", new DoubleClick(alertOverride, elementFinder));
     seleneseMethods.put("dragdrop", new DragAndDrop(elementFinder));
     seleneseMethods.put("dragAndDrop", new DragAndDrop(elementFinder));
@@ -286,6 +287,7 @@ private void setUpMethodMap() {
     seleneseMethods.put("select",
         new SelectOption(alertOverride, javascriptLibrary, elementFinder));
     seleneseMethods.put("selectFrame", new SelectFrame(windows));
+    seleneseMethods.put("selectPopUp", new SelectPopUp(windows));
     seleneseMethods.put("selectWindow", new SelectWindow(windows));
     seleneseMethods.put("setBrowserLogLevel", new NoOp(null));
     seleneseMethods.put("setContext", new NoOp(null));

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/Timer.java
Patch:
@@ -33,6 +33,8 @@ public <T> T run(SeleneseCommand<T> command, WebDriver driver, String[] args) {
       throw new IllegalStateException("Timer has already been stopped");
     }
 
+    command.setDefaultTimeout(timeout);
+
     long start = System.currentTimeMillis();
 
     T value = command.apply(driver, args);

File: java/client/test/com/thoughtworks/selenium/WebDriverSeleniumTestSuite.java
Patch:
@@ -59,6 +59,7 @@
 import com.thoughtworks.selenium.corebased.TestQuickOpen;
 import com.thoughtworks.selenium.corebased.TestSelect;
 import com.thoughtworks.selenium.corebased.TestSelectMultiLevelFrame;
+import com.thoughtworks.selenium.corebased.TestSelectPopUp;
 import com.thoughtworks.selenium.corebased.TestStore;
 import com.thoughtworks.selenium.corebased.TestSubmit;
 import com.thoughtworks.selenium.corebased.TestTextWhitespace;
@@ -134,7 +135,7 @@
 //    TestRollup.class,
     TestSelect.class,
     TestSelectMultiLevelFrame.class,
-//    TestSelectPopUp.class,
+    TestSelectPopUp.class,
 //    TestSelectWindow.class,
 //    TestSelectWindowTitle.class,
 //    TestSetSpeed.class,

File: java/client/src/org/openqa/selenium/iphone/IPhoneSimulatorBinary.java
Patch:
@@ -62,13 +62,13 @@ public class IPhoneSimulatorBinary {
    */
   public IPhoneSimulatorBinary(File iWebDriverApp) {
 	  System.out.println(String.format(
-      "%s launch %s", getIphoneSimPath(), iWebDriverApp.getParentFile().getAbsoluteFile()));
+      "%s launch %s --exit", getIphoneSimPath(), iWebDriverApp.getParentFile().getAbsoluteFile()));
     this.commandLine = CommandLine.parse(String.format(
-      "%s launch %s", getIphoneSimPath(), iWebDriverApp.getParentFile().getAbsoluteFile()));
+      "%s launch %s --exit", getIphoneSimPath(), iWebDriverApp.getParentFile().getAbsoluteFile()));
   }
 
   protected static String getIphoneSimPath() {
-    String filename = "iphonesim";
+    String filename = "ios-sim";
     File parentDir = TemporaryFilesystem.getDefaultTmpFS().createTempDir("webdriver", "libs");
     try {
       FileHandler.copyResource(parentDir, IPhoneSimulatorBinary.class, filename);

File: java/client/test/org/openqa/selenium/iphone/IPhoneDriverTests.java
Patch:
@@ -41,7 +41,7 @@ public TestIPhoneSimulatorDriver(Capabilities ignore) throws Exception {
 
     private static IPhoneSimulatorBinary locateSimulatorBinary() throws Exception {
       File iWebDriverApp = InProject.locate(
-          "iphone/build/Release-iphonesimulator/iWebDriver.app/iWebDriver");
+          "iphone/build/Debug-iphonesimulator/iWebDriver.app/iWebDriver");
       return new IPhoneSimulatorBinary(iWebDriverApp);
     }
   }

File: java/server/src/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -33,7 +33,6 @@
 import java.io.IOException;
 import java.net.MalformedURLException;
 import java.net.URL;
-import java.util.logging.Level;
 import java.util.logging.Logger;
 
 public class FirefoxChromeLauncher extends AbstractBrowserLauncher {

File: java/server/test/org/openqa/grid/common/RegistrationRequestTest.java
Patch:
@@ -127,9 +127,9 @@ public void basicCommandLineParam() {
 
   @Test
   public void commandLineParamDefault() {
-    String hubHost = "-" + RegistrationRequest.HUB_HOST;
-    RegistrationRequest req = RegistrationRequest.build("-role", "rc", hubHost, "ABC","-host","localhost");
-    Assert.assertEquals("ABC", req.getConfiguration().get(RegistrationRequest.HUB_HOST));
+    RegistrationRequest req = RegistrationRequest.build("-role", "rc");
+    // the hub defaults to current IP.
+    Assert.assertNotNull(req.getConfiguration().get(RegistrationRequest.HUB_HOST));
     Assert.assertEquals(4444, req.getConfiguration().get(RegistrationRequest.HUB_PORT));
     // the node defaults to current IP.
     Assert.assertNotNull(req.getConfiguration().get(RegistrationRequest.HOST));

File: java/client/src/org/openqa/selenium/support/ui/WebDriverWait.java
Patch:
@@ -34,7 +34,7 @@ public class WebDriverWait extends FluentWait<WebDriver> {
    *
    * @param driver The WebDriver instance to pass to the expected conditions
    * @param timeOutInSeconds The timeout in seconds when an expectation is called
-   * @see WebDriverWait#ignoring(Class[]) equals
+   * @see WebDriverWait#ignoring(Class) equals
    */
   public WebDriverWait(WebDriver driver, long timeOutInSeconds) {
     this(driver, new SystemClock(), Sleeper.SYSTEM_SLEEPER, timeOutInSeconds, DEFAULT_SLEEP_TIMEOUT);
@@ -48,7 +48,7 @@ public WebDriverWait(WebDriver driver, long timeOutInSeconds) {
    * @param driver The WebDriver instance to pass to the expected conditions
    * @param timeOutInSeconds The timeout in seconds when an expectation is called
    * @param sleepInMillis The duration in milliseconds to sleep between polls.
-   * @see WebDriverWait#ignoring(Class[]) equals
+   * @see WebDriverWait#ignoring(Class) equals
    */
   public WebDriverWait(WebDriver driver, long timeOutInSeconds, long sleepInMillis) {
     this(driver, new SystemClock(), Sleeper.SYSTEM_SLEEPER, timeOutInSeconds, sleepInMillis);

File: java/client/src/org/openqa/selenium/WebDriverCommandProcessor.java
Patch:
@@ -152,11 +152,11 @@ public boolean isMethodAvailable(String methodName) {
     return seleneseMethods.containsKey(methodName);
   }
 
-  public void addMethod(String methodName, SeleneseCommand command) {
+  public void addMethod(String methodName, SeleneseCommand<?> command) {
     seleneseMethods.put(methodName, command);
   }
 
-  public SeleneseCommand getMethod(String methodName) {
+  public SeleneseCommand<?> getMethod(String methodName) {
     return seleneseMethods.get(methodName);
   }
 
@@ -253,6 +253,7 @@ private void setUpMethodMap() {
     seleneseMethods.put("getTitle", new GetTitle());
     seleneseMethods.put("getValue", new GetValue(elementFinder));
     seleneseMethods.put("getXpathCount", new GetXpathCount());
+    seleneseMethods.put("getCssCount", new GetCssCount());
     seleneseMethods.put("goBack", new GoBack());
     seleneseMethods.put("highlight", new Highlight(elementFinder, javascriptLibrary));
     seleneseMethods.put("isAlertPresent", new IsAlertPresent(alertOverride));

File: java/client/test/org/openqa/selenium/firefox/FirefoxSpecificTests.java
Patch:
@@ -25,6 +25,7 @@
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
+    CapabilitiesToProfileTest.class,
     ExecutableTest.class,
     FirefoxCapabilitiesTest.class,
     FirefoxDriverTest.class,
@@ -34,5 +35,6 @@
     SocketLockTest.class,
     StreamsTest.class
 })
+
 public class FirefoxSpecificTests {
 }

File: java/client/src/org/openqa/selenium/os/OsProcess.java
Patch:
@@ -41,4 +41,6 @@ interface OsProcess {
   int getExitCode();
 
   String getStdOut();
+  
+  boolean isRunning();
 }

File: java/client/src/org/openqa/selenium/remote/service/DriverService.java
Patch:
@@ -133,8 +133,7 @@ public boolean isRunning() {
       if (process == null) {
         return false;
       }
-      process.destroy();
-      return false;
+      return process.isRunning();
     } catch (IllegalThreadStateException e) {
       return true;
     } finally {

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -385,7 +385,7 @@ public void testShouldNotHandleAlertInAnotherWindow() {
   }
 
   @JavascriptEnabled
-  @Ignore(value = {IE, CHROME}, reason = "IE crashes")
+  @Ignore(value = {CHROME})
   @Test
   public void testShouldHandleAlertOnPageUnload() {
     driver.findElement(By.id("open-page-with-onunload-alert")).click();
@@ -447,7 +447,7 @@ public void testIncludesAlertInUnhandledAlertException() {
   @NoDriverAfterTest
   @Ignore(value = {SELENESE, OPERA, OPERA_MOBILE})
   @Test
-  public void testCanQuitWhenAnAlersIsPresent() {
+  public void testCanQuitWhenAnAlertIsPresent() {
     driver.get(pages.alertsPage);
     driver.findElement(By.id("alert")).click();
     waitFor(alertToBePresent(driver));

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -115,7 +115,7 @@ public Hub(GridHubConfiguration config) {
 
     for (String s : config.getServlets()) {
       Class<? extends Servlet> servletClass = ExtraServletUtil.createServlet(s);
-      if (s != null) {
+      if (servletClass != null) {
         String path = "/grid/admin/" + servletClass.getSimpleName() + "/*";
         log.info("binding " + servletClass.getCanonicalName() + " to " + path);
         addServlet(path, servletClass);

File: java/client/src/org/openqa/selenium/remote/CapabilityType.java
Patch:
@@ -43,6 +43,9 @@ public interface CapabilityType {
 
   String ENABLE_PROFILING_CAPABILITY = "webdriver.logging.profiler.enabled";
 
+  // Only applies to Internet Explorer
+  String ENABLE_PERSISTENT_HOVERING = "enablePersistentHover";
+
   interface ForSeleniumServer {
     String AVOIDING_PROXY = "avoidProxy";
     String ONLY_PROXYING_SELENIUM_TRAFFIC = "onlyProxySeleniumTraffic";

File: java/client/src/org/openqa/selenium/WebElement.java
Patch:
@@ -148,7 +148,7 @@ public interface WebElement extends SearchContext {
 
   /**
    * Find the first {@link WebElement} using the given method. See the note in
-   * {@link #findElement(By)} about finding via XPath.
+   * {@link #findElements(By)} about finding via XPath.
    * This method is affected by the 'implicit wait' times in force at the time of execution.
    * The findElement(..) invocation will return a matching row, or try again repeatedly until 
    * the configured timeout is reached.

File: java/server/src/org/openqa/selenium/server/CommandHolder.java
Patch:
@@ -32,7 +32,7 @@ public class CommandHolder {
   private static final Logger log = Logger.getLogger(CommandHolder.class.getName());
   private static final int defaultTimeout = 10; // seconds
   private static final RemoteCommand poisonCommand = new DefaultRemoteCommand(
-      "CommandHolder.POISION", "", "");
+      "CommandHolder.POISON", "", "");
   protected static final String RETRY_CMD_STRING = "retryLast";
   protected static final RemoteCommand retryCommand = new DefaultRemoteCommand(RETRY_CMD_STRING,
       "", "", "");

File: java/client/src/org/openqa/selenium/safari/SafariDriverConnection.java
Patch:
@@ -95,11 +95,9 @@ public Response send(Command command) throws InterruptedException {
    * @param message The raw message.
    */
   /* package */ void onMessage(String message) {
-    LOG.info("Processing message: " + message);
-
     SafariCommand command = commands.poll();
     if (command == null) {
-      LOG.warning("Was not expecting a response!");
+      LOG.warning("Was not expecting a response! " + message);
       return;
     }
 

File: java/client/test/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -201,7 +201,7 @@ public Boolean call() throws Exception {
 
   @JavascriptEnabled
   @Test
-  @Ignore({CHROME, IE, OPERA, OPERA_MOBILE})
+  @Ignore({CHROME, OPERA, OPERA_MOBILE})
   public void canClickOnASuckerFishStyleMenu() throws InterruptedException {
     assumeTrue(hasInputDevices());
     assumeTrue(TestUtilities.isNativeEventsEnabled(driver));
@@ -258,7 +258,6 @@ public void testCorrectlyDetectMapElementsAreShown() {
     assertTrue("The element and the enclosing map should be considered shown.", isShown);
   }
 
-  @Ignore
   @JavascriptEnabled
   @Test
   public void testCanClickOnSuckerFishMenuItem() throws Exception {
@@ -277,6 +276,7 @@ public void testCanClickOnSuckerFishMenuItem() throws Exception {
     new Actions(driver).moveToElement(element).build().perform();
 
     WebElement target = driver.findElement(By.id("item1"));
+
     assertTrue(target.isDisplayed());
     target.click();
 

File: java/server/src/org/openqa/selenium/security/CertificateGenerator.java
Patch:
@@ -100,7 +100,7 @@ public KeyAndCert generateCertificate(String hostname, String certificateRevocat
         "CN=%s, OU=Test, O=CyberVillainsCA, L=Seattle, S=Washington, C=US", hostname);
     X500Principal x500subject = new X500Principal(subject);
 
-    Date begin = new Date(System.currentTimeMillis() - TimeUnit.DAYS.toMillis(-1));
+    Date begin = new Date(System.currentTimeMillis() - TimeUnit.DAYS.toMillis(1));
     Date end = new Date(System.currentTimeMillis() + TimeUnit.DAYS.toMillis(365));
 
     KeyPair keypair = pairGenerator.generateKeyPair();

File: java/server/src/org/openqa/selenium/remote/server/handler/DeleteSession.java
Patch:
@@ -41,7 +41,7 @@ public ResultType call() throws Exception {
 
     try {
       LoggingManager.perSessionLogHandler().fetchAndStoreLogsFromDriver(getSessionId(), driver);
-    } catch (RuntimeException ignored) {
+    } catch (Throwable ignored) {
       // A failure to retrieve logs should not cause a test to fail.
       // Silently ignore this exception.
     }

File: java/client/src/org/openqa/selenium/browserlaunchers/locators/SafariLocator.java
Patch:
@@ -31,7 +31,8 @@ public class SafariLocator extends SingleBrowserLocator {
   };
 
   private static final String[] USUAL_WINDOWS_LAUNCHER_LOCATIONS = {
-      WindowsUtils.getProgramFilesPath() + "\\Safari"
+      WindowsUtils.getProgramFilesPath() + "\\Safari",
+      WindowsUtils.getProgramFiles86Path() + "\\Safari"
   };
 
   @Override

File: java/client/src/org/openqa/selenium/safari/SafariDriverCommandExecutor.java
Patch:
@@ -47,6 +47,7 @@
  */
 class SafariDriverCommandExecutor implements CommandExecutor {
 
+  private final SafariDriverExtension extension;
   private final SafariDriverServer server;
   private final BrowserLocator browserLocator;
   private final SessionData sessionData;
@@ -62,6 +63,7 @@ class SafariDriverCommandExecutor implements CommandExecutor {
    *     starting a new session.
    */
   public SafariDriverCommandExecutor(int port, boolean cleanSession) {
+    extension = new SafariDriverExtension();
     server = new SafariDriverServer(port);
     browserLocator = new SafariLocator();
     sessionData = SessionData.forCurrentPlatform();
@@ -81,6 +83,7 @@ public void start() throws IOException {
 
     server.start();
 
+    extension.install();
     if (cleanSession) {
       sessionData.clear();
     }

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.JavascriptEnabled;
 import org.openqa.selenium.testing.TestUtilities;
-import org.testng.internal.annotations.Sets;
+import com.google.common.collect.Sets;
 
 import java.util.Set;
 import java.util.concurrent.Callable;

File: java/server/src/org/openqa/selenium/remote/server/handler/DeleteSession.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.remote.server.handler;
 
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.rest.ResultType;
 import org.openqa.selenium.server.log.LoggingManager;
@@ -42,7 +41,7 @@ public ResultType call() throws Exception {
 
     try {
       LoggingManager.perSessionLogHandler().fetchAndStoreLogsFromDriver(getSessionId(), driver);
-    } catch (WebDriverException ignored) {
+    } catch (RuntimeException ignored) {
       // A failure to retrieve logs should not cause a test to fail.
       // Silently ignore this exception.
     }

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -73,6 +73,7 @@ public class ErrorCodes {
   public static final int INVALID_SELECTOR_ERROR = 32;
   public static final int SESSION_NOT_CREATED = 33;
   public static final int MOVE_TARGET_OUT_OF_BOUNDS = 34;
+  public static final int SQL_DATABASE_ERROR = 35;
   public static final int INVALID_XPATH_SELECTOR = 51;
   public static final int INVALID_XPATH_SELECTOR_RETURN_TYPER = 52;
   // The following error codes are derived straight from HTTP return codes.

File: java/client/test/org/openqa/selenium/internal/IgnoreCollector.java
Patch:
@@ -38,7 +38,7 @@ public class IgnoreCollector implements IgnoredTestCallback {
 
   @Override
   public void callback(Class<?> clazz, Method method) {
-    checkNotNull(method);
+    checkNotNull(clazz);
     checkNotNull(method);
 
     if (wasIgnored(clazz, method)) {

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -70,6 +70,7 @@ public class Pages {
   public String readOnlyPage;
   public String booleanAttributes;
   public String colorPage;
+  public String unicodeLtrPage;
 
   public Pages(AppServer appServer) {
     ajaxyPage = appServer.whereIs("ajaxy_page.html");
@@ -123,5 +124,6 @@ public Pages(AppServer appServer) {
     readOnlyPage = appServer.whereIs("readOnlyPage.html");
     booleanAttributes = appServer.whereIs("booleanAttributes.html");
     colorPage = appServer.whereIs("colorPage.html");
+    unicodeLtrPage = appServer.whereIs("utf8/unicode_ltr.html");
   }
 }

File: java/client/test/org/openqa/selenium/environment/webserver/Jetty7AppServer.java
Patch:
@@ -101,6 +101,8 @@ public Jetty7AppServer(String hostName) {
     addServlet(defaultContext, "Manifest", "/manifest/*", ManifestServlet.class);
     addServlet(defaultContext, "Manifest", "*.appcache", ManifestServlet.class);
     addServlet(jsContext, "Manifest", "*.appcache", ManifestServlet.class);
+    // Serves every file under DEFAULT_CONTEXT_PATH/utf8 as UTF-8 to the browser
+    addServlet(defaultContext, "UTF8", "/utf8/*", Utf8Servlet.class);
 
     addServlet("Uploader", "/upload", UploadServlet.class);
     addServlet("Unusual encoding", "/encoding", EncodingServlet.class);

File: java/client/src/org/openqa/selenium/safari/SafariDriverConnection.java
Patch:
@@ -30,7 +30,6 @@
 
 import org.json.JSONException;
 import org.json.JSONObject;
-import org.webbitserver.WebSocketConnection;
 
 import java.util.UUID;
 import java.util.concurrent.BlockingQueue;

File: java/client/test/org/openqa/selenium/TakesScreenshotTest.java
Patch:
@@ -27,7 +27,7 @@
 
 import java.io.File;
 
-@Ignore(value = {IPHONE, SAFARI}, issues = { 4203 })
+@Ignore(value = {IPHONE})
 public class TakesScreenshotTest extends JUnit4TestBase {
   @Test
   public void testSaveScreenshotAsFile() throws Exception {

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -302,7 +302,7 @@ public void testShouldHandleWhitespaceInInlineElements() {
     assertThat(text, is("line has text"));
   }
 
-  @Ignore(value = {IPHONE, SAFARI, SELENESE}, issues = { 4203 })
+  @Ignore(value = {IPHONE, SELENESE})
   @Test
   public void testReadALargeAmountOfData() {
     driver.get(GlobalTestEnvironment.get().getAppServer().whereIs("macbeth.html"));

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -74,7 +74,7 @@ public class HttpCommandExecutor implements CommandExecutor, NeedsLocalLogs {
 
   private static HttpClientFactory httpClientFactory;
 
-  private LocalLogs logs = LocalLogs.NULL_LOGGER;
+  private LocalLogs logs = LocalLogs.getNullLogger();
 
   private enum HttpVerb {
     GET() {

File: java/client/test/org/openqa/selenium/logging/PerformanceLoggingMockTest.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.List;
 import java.util.logging.Level;
 
+import com.google.common.collect.ImmutableSet;
 import org.jmock.Expectations;
 import org.junit.Test;
 import org.openqa.selenium.remote.DriverCommand;
@@ -47,7 +48,7 @@ public void testMergesRemoteLogs() {
       }
     });
     
-    LocalLogs localLogs = new LocalLogs();
+    LocalLogs localLogs = LocalLogs.getStoringLoggerInstance(ImmutableSet.<String>of());
     RemoteLogs logs = new RemoteLogs(executeMethod, localLogs);
     localLogs.addEntry(LogType.PROFILER, new LogEntry(Level.INFO, 0, "first"));
     localLogs.addEntry(LogType.PROFILER, new LogEntry(Level.INFO, 2, "third"));

File: java/client/test/com/thoughtworks/selenium/WebDriverSeleniumTestSuite.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.thoughtworks.selenium;
 
+import com.thoughtworks.selenium.corebased.SeleniumMouseTest;
 import com.thoughtworks.selenium.corebased.TestAddLocationStrategy;
 import com.thoughtworks.selenium.corebased.TestAddSelection;
 import com.thoughtworks.selenium.corebased.TestCheckUncheck;
@@ -60,6 +61,7 @@
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
+    SeleniumMouseTest.class,
     TestAddLocationStrategy.class,
     TestAddSelection.class,
     TestCheckUncheck.class,

File: java/client/test/org/openqa/selenium/testing/drivers/OperaDriverSupplier.java
Patch:
@@ -45,9 +45,7 @@ public WebDriver get() {
     }
 
     // It's okay to avoid reflection here because the OperaDriver is a third party dependency
-    OperaDriver driver = new OperaDriver(caps);
-    driver.preferences().set("User Prefs", "Ignore Unrequested Popups", false);
-    return driver;
+    return new OperaDriver(caps);
   }
 
 }

File: java/client/src/org/openqa/selenium/support/ui/ExpectedConditions.java
Patch:
@@ -177,7 +177,8 @@ public static ExpectedCondition<List<WebElement>> presenceOfAllElementsLocatedBy
       final By locator) {
     return new ExpectedCondition<List<WebElement>>() {
       public List<WebElement> apply(WebDriver driver) {
-        return findElements(locator, driver);
+        List<WebElement> elements = findElements(locator, driver);
+        return elements.size() > 0 ? elements : null;
       }
 
       @Override

File: java/client/test/org/openqa/selenium/logging/AvailableLogsTest.java
Patch:
@@ -32,14 +32,17 @@
 
 import org.junit.After;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.testing.Ignore;
+import org.openqa.selenium.testing.SeleniumTestRunner;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
 
 import java.util.Set;
 
+@RunWith(SeleniumTestRunner.class)
 @Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, REMOTE, SAFARI, SELENESE})
 public class AvailableLogsTest {
 

File: java/server/src/org/openqa/selenium/remote/server/handler/GetLogHandler.java
Patch:
@@ -25,10 +25,10 @@
 /**
  * RestishHandler used to fetch logs from the Remote WebDriver server.
  */
-public class LogHandler extends ResponseAwareWebDriverHandler implements JsonParametersAware {
+public class GetLogHandler extends ResponseAwareWebDriverHandler implements JsonParametersAware {
   private volatile String type;
 
-  public LogHandler(Session session) {
+  public GetLogHandler(Session session) {
     super(session);
   }
 

File: java/client/src/org/openqa/selenium/logging/LoggingPreferences.java
Patch:
@@ -56,7 +56,7 @@ public Set<String> getEnabledLogTypes() {
   }
 
   /**
-   * @param logType String the {@link LogType}.
+   * @param logType The log type.
    * @return the {@link Level} for the given {@link LogType} if enabled.
    *     Otherwise returns {@link Level.OFF}.
    */

File: java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java
Patch:
@@ -24,7 +24,6 @@
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.browserlaunchers.DoNotUseProxyPac;
 import org.openqa.selenium.logging.LogEntries;
-import org.openqa.selenium.logging.LogEntry;
 import org.openqa.selenium.logging.LoggingPreferences;
 
 import java.io.File;

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -254,7 +254,8 @@ public HttpCommandExecutor(URL addressOfRemoteServer) {
         .put(TOUCH_LONG_PRESS, post("/session/:sessionId/touch/longclick"))
         .put(TOUCH_FLICK, post("/session/:sessionId/touch/flick"))
 
-        .put(GET_LOGS, post("/session/:sessionId/log"))
+        .put(GET_LOG, post("/session/:sessionId/log"))
+        .put(GET_AVAILABLE_LOG_TYPES, get("/session/:sessionId/log/types"))
 
         .put(STATUS, get("/status"))
 

File: java/client/test/org/openqa/selenium/logging/PerformanceLoggingMockTest.java
Patch:
@@ -38,7 +38,7 @@ public void testMergesRemoteLogs() {
 
     checking(new Expectations() {
       {
-        one(executeMethod).execute(DriverCommand.GET_LOGS,
+        one(executeMethod).execute(DriverCommand.GET_LOG,
           ImmutableMap.of(RemoteLogs.TYPE_KEY, LogType.PROFILER));
         will(returnValue(ImmutableList.of(ImmutableMap.of(
           "level", Level.INFO.getName(),

File: java/client/test/org/openqa/selenium/testing/drivers/BrowserToCapabilities.java
Patch:
@@ -68,6 +68,7 @@ public static DesiredCapabilities of(Browser browser) {
       case opera_mobile:
         caps = DesiredCapabilities.opera();
         caps.setCapability(OperaSettings.Capability.PRODUCT.getCapability(), OperaProduct.MOBILE);
+        break;
 
       case safari:
         caps = DesiredCapabilities.safari();

File: java/client/src/org/openqa/selenium/Proxy.java
Patch:
@@ -198,7 +198,7 @@ public Proxy setHttpProxy(String httpProxy) {
    * @return the HTTPS proxy hostname if present, or null if not set
    */
   public String getHttpsProxy() {
-    return httpProxy;
+    return httpsProxy;
   }
 
   /**

File: java/client/test/org/openqa/selenium/DragAndDropTest.java
Patch:
@@ -168,7 +168,7 @@ public void testDragAndDropOnJQueryItems() {
     // Assert that only one mouse click took place and the mouse was moved
     // during it.
     String reporterText = reporter.getText();
-    Pattern pattern = Pattern.compile("start( move)* down( move)+ up");
+    Pattern pattern = Pattern.compile("start( move)* down( move)+ up( move)*");
 
     Matcher matcher = pattern.matcher(reporterText);
 

File: java/client/test/org/openqa/selenium/testing/drivers/ReflectionBackedDriverSupplier.java
Patch:
@@ -112,7 +112,7 @@ private Class<? extends WebDriver> mapToClass(Capabilities caps) {
       if (isInDevMode()) {
         className = "org.openqa.selenium.testing.drivers.TestInternetExplorerDriver";
       } else {
-        className = "org.openqa.selenium.testing.drivers.LocallyBuiltInternetExplorerDriver";
+        className = "org.openqa.selenium.ie.InternetExplorerDriver";
       }
     } else if (DesiredCapabilities.ipad().getBrowserName().equals(name)) {
     	// for now using the iphone sim... TODO need to make the sim launch in ipad mode

File: java/client/test/org/openqa/selenium/testing/drivers/WebDriverBuilder.java
Patch:
@@ -87,6 +87,7 @@ private List<Supplier<WebDriver>> getSuppliers(Capabilities desiredCaps,
     suppliers.add(new RemoteSupplier(desiredCaps, requiredCaps));
     suppliers.add(new SeleniumBackedSupplier(desiredCaps));
     suppliers.add(new OperaDriverSupplier(desiredCaps));
+    suppliers.add(new TestInternetExplorerSupplier(desiredCaps));
     suppliers.add(new ReflectionBackedDriverSupplier(desiredCaps, requiredCaps));
     suppliers.add(new DefaultDriverSupplier(desiredCaps, requiredCaps));
     return suppliers;

File: java/client/test/org/openqa/selenium/firefox/FirefoxSpecificTests.java
Patch:
@@ -15,7 +15,6 @@
 limitations under the License.
 */
 
-
 package org.openqa.selenium.firefox;
 
 import org.junit.runner.RunWith;
@@ -27,6 +26,7 @@
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     ExecutableTest.class,
+    FirefoxCapabilitiesTest.class,
     FirefoxDriverTest.class,
     FirefoxProfileTest.class,
     NativeEventsTest.class,

File: java/client/test/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -33,7 +33,6 @@
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
-import static org.openqa.selenium.testing.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
@@ -117,7 +116,7 @@ public void testShouldAllowInheritedStylesToBeUsed() {
 
   @JavascriptEnabled
   @Ignore(
-      value = {FIREFOX, HTMLUNIT, IPHONE,  OPERA, SELENESE},
+      value = {HTMLUNIT, IPHONE,  OPERA, SELENESE},
       reason = "HtmlUnit: Advanced mouse actions only implemented in rendered browsers. Firefox: hover is broken again.")
   @Test
   public void testShouldAllowUsersToHoverOverElements() {
@@ -157,7 +156,7 @@ public Boolean call() throws Exception {
 
   @JavascriptEnabled
   @Ignore(
-      value = {FIREFOX, HTMLUNIT, IPHONE, SELENESE, OPERA},
+      value = {HTMLUNIT, IPHONE, SELENESE, OPERA},
       reason = "HtmlUnit: Advanced mouse actions only implemented in rendered browsers")
   @Test
   public void testHoverPersists() throws Exception {
@@ -176,6 +175,7 @@ public void testHoverPersists() throws Exception {
     }
 
     driver.get(pages.javascriptPage);
+    new Actions(driver).moveToElement(driver.findElement(By.id("dynamo"))).build().perform();
 
     WebElement element = driver.findElement(By.id("menu1"));
 

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -46,6 +46,7 @@
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
+import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
 public class CorrectEventFiringTest extends JUnit4TestBase {
@@ -374,8 +375,8 @@ public void testSubmittingFormFromFormInputTextElementShouldFireOnSubmitForThatF
   }
 
   @JavascriptEnabled
-  @Ignore(value = {CHROME, SELENESE, IPHONE, ANDROID, OPERA},
-      reason = "Does not yet support file uploads")
+  @Ignore(value = {CHROME, SELENESE, IPHONE, ANDROID, OPERA, SAFARI},
+      reason = "Does not yet support file uploads", issues = { 4220 })
   @Test
   public void testUploadingFileShouldFireOnChangeEvent() throws IOException {
     driver.get(pages.formPage);

File: java/client/test/org/openqa/selenium/ImplicitWaitTest.java
Patch:
@@ -24,6 +24,7 @@
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
 import static java.util.concurrent.TimeUnit.MILLISECONDS;
@@ -137,7 +138,7 @@ public void testShouldReturnAfterFirstAttemptToFindManyAfterDisablingImplicitWai
 
   @Test
   @JavascriptEnabled
-  @Ignore({ANDROID, CHROME, IE, IPHONE, SELENESE})
+  @Ignore({ANDROID, CHROME, IE, IPHONE, SAFARI, SELENESE})
   public void testShouldImplicitlyWaitForAnElementToBeVisibleBeforeInteracting() {
     driver.get(pages.dynamicPage);
 

File: java/client/test/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -38,6 +38,7 @@
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
+import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
 public class RenderedWebElementTest extends JUnit4TestBase {
@@ -80,7 +81,7 @@ public void testGetCssValueShouldReturnStandardizedColour() {
   // should handle sub-pixel rendering, and every browser seems to be different anyhow:
   // http://ejohn.org/blog/sub-pixel-problems-in-css/
   @JavascriptEnabled
-  @Ignore({IE, CHROME, SELENESE, IPHONE, OPERA, ANDROID})
+  @Ignore({IE, CHROME, SELENESE, IPHONE, OPERA, ANDROID, SAFARI})
   // Reason for Chrome: WebKit bug 28804
   @Test
   public void testShouldHandleNonIntegerPositionAndSize() {

File: java/client/test/org/openqa/selenium/TakesScreenshotTest.java
Patch:
@@ -22,11 +22,12 @@
 
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
 import static org.openqa.selenium.OutputType.BASE64;
 
 import java.io.File;
 
-@Ignore(IPHONE)
+@Ignore(value = {IPHONE, SAFARI}, issues = { 4203 })
 public class TakesScreenshotTest extends JUnit4TestBase {
   @Test
   public void testSaveScreenshotAsFile() throws Exception {

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -27,6 +27,7 @@
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
+import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.TestWaiter.waitFor;
 
@@ -300,7 +301,7 @@ public void testShouldHandleWhitespaceInInlineElements() {
     assertThat(text, is("line has text"));
   }
 
-  @Ignore(value = {SELENESE, IPHONE})
+  @Ignore(value = {IPHONE, SAFARI, SELENESE}, issues = { 4203 })
   @Test
   public void testReadALargeAmountOfData() {
     driver.get(GlobalTestEnvironment.get().getAppServer().whereIs("macbeth.html"));

File: java/client/test/org/openqa/selenium/UnexpectedAlertBehaviorTest.java
Patch:
@@ -40,7 +40,8 @@
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
 @NeedsLocalEnvironment(reason = "Requires local browser launching environment")
-@Ignore({ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI, SELENESE})
+@Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SAFARI, SELENESE},
+    issues = {3862})
 public class UnexpectedAlertBehaviorTest extends JUnit4TestBase {
   private WebDriver driver2;
   private DesiredCapabilities caps = new DesiredCapabilities();

File: java/client/test/org/openqa/selenium/UploadTest.java
Patch:
@@ -30,6 +30,7 @@
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
+import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.WaitingConditions.elementToBeHidden;
@@ -44,7 +45,8 @@
  * 
  * @author jmleyba@gmail.com (Jason Leyba)
  */
-@Ignore(value = {IPHONE, ANDROID}, reason = "File uploads not allowed on the iPhone")
+@Ignore(value = {IPHONE, ANDROID, SAFARI}, reason = "File uploads not allowed on the iPhone",
+        issues = { 4220 })
 public class UploadTest extends JUnit4TestBase {
 
   private static final String LOREM_IPSUM_TEXT = "lorem ipsum dolor sit amet";

File: java/client/test/org/openqa/selenium/testing/drivers/BrowserToCapabilities.java
Patch:
@@ -63,8 +63,7 @@ public static DesiredCapabilities of(Browser browser) {
         break;
 
       case safari:
-        caps = new DesiredCapabilities();
-        caps.setBrowserName("safari");
+        caps = DesiredCapabilities.safari();
         break;
 
       case ipad:

File: java/client/test/org/openqa/selenium/testing/drivers/ReflectionBackedDriverSupplier.java
Patch:
@@ -110,6 +110,8 @@ private Class<? extends WebDriver> mapToClass(Capabilities caps) {
     	className = "org.openqa.selenium.iphone.IPhoneDriverTests$TestIPhoneSimulatorDriver";
     } else if (DesiredCapabilities.iphone().getBrowserName().equals(name)) {
     	className = "org.openqa.selenium.iphone.IPhoneDriverTests$TestIPhoneSimulatorDriver";
+    } else if (DesiredCapabilities.safari().getBrowserName().equals(name)) {
+      className = "org.openqa.selenium.safari.SafariDriver";
     } else {
       // The last chance saloon.
       className = System.getProperty("selenium.browser.class_name");

File: java/client/test/org/openqa/selenium/testing/drivers/TestIgnorance.java
Patch:
@@ -29,6 +29,7 @@
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
 import static org.openqa.selenium.testing.Ignore.Driver.REMOTE;
+import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.testing.drivers.Browser.android;
 import static org.openqa.selenium.testing.drivers.Browser.chrome;
@@ -207,8 +208,7 @@ private void addIgnoresForBrowser(Browser browser, IgnoreComparator comparator)
         break;
 
       case safari:
-        comparator.addDriver(SELENESE);
-        comparator.addDriver(REMOTE);
+        comparator.addDriver(SAFARI);
         break;
 
       default:

File: java/server/test/org/openqa/selenium/remote/server/ServerSpecificTests.java
Patch:
@@ -22,11 +22,13 @@
 import org.openqa.selenium.remote.server.rest.ResultConfigTest;
 import org.openqa.selenium.remote.server.rest.UrlMapperTest;
 import org.openqa.selenium.remote.server.xdrpc.CrossDomainRpcLoaderTest;
+import org.openqa.selenium.remote.server.xdrpc.CrossDomainRpcRendererTest;
 import org.openqa.selenium.remote.server.xdrpc.HttpServletRequestProxyTest;
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     CrossDomainRpcLoaderTest.class,
+    CrossDomainRpcRendererTest.class,
     DriverFactoryTest.class,
     DriverServletTest.class,
     DriverSessionTest.class,

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -35,6 +35,7 @@
 import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
+import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.WaitingConditions.windowHandleCountToBe;
@@ -172,7 +173,8 @@ public void testShouldSetRelatedTargetForMouseOver() {
   
   @JavascriptEnabled
   @NoDriverAfterTest
-  @Ignore(value = {ANDROID, IPHONE, OPERA, SELENESE}, reason = "Doesn't support multiple windows")
+  @Ignore(value = {ANDROID, IPHONE, OPERA, SAFARI, SELENESE},
+      reason = "Doesn't support multiple windows; Safari: issue 3693")
   @Test
   public void testShouldOnlyFollowHrefOnce() {
     driver.get(pages.clicksPage);

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -43,6 +43,7 @@
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
 import static org.openqa.selenium.testing.Ignore.Driver.REMOTE;
+import static org.openqa.selenium.testing.Ignore.Driver.SAFARI;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
 /**
@@ -285,7 +286,7 @@ public void testShouldBeAbleToGetTheLocationOfAnElement() {
    * running: "ImplicitWaitTest", "TemporaryFilesystemTest", "JavascriptEnabledDriverTest".
    * SimonStewart 2010-10-04
    */
-  @Ignore({IE, SELENESE, IPHONE, OPERA})
+  @Ignore(value = {IE, SELENESE, IPHONE, OPERA, SAFARI}, reason = "Safari: issue 3693")
   @JavascriptEnabled
   @NeedsFreshDriver
   @Test

File: java/client/test/org/openqa/selenium/testing/drivers/DefaultDriverSupplier.java
Patch:
@@ -1,6 +1,6 @@
 /*
-Copyright 2011 Selenium committers
-Copyright 2011 Software Freedom Conservancy
+Copyright 2012 Selenium committers
+Copyright 2012 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -62,7 +62,7 @@ public WebDriver get() {
     } catch (NoSuchMethodException e) {
       throw Throwables.propagate(e);
     } catch (InvocationTargetException e) {
-      throw Throwables.propagate(e);
+      throw Throwables.propagate(e.getTargetException());
     }
   }
 }

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -291,6 +291,7 @@ public void testShouldThrowAnExceptionWhenTheJavascriptIsBad() {
       fail("Expected an exception");
     } catch (Exception e) {
       // This is expected
+      assertFalse(e.getMessage(), e.getMessage().startsWith("null "));
     }
   }
 

File: java/client/src/org/openqa/selenium/ie/InternetExplorerDriverService.java
Patch:
@@ -172,7 +172,7 @@ public InternetExplorerDriverService build() {
         ImmutableList.Builder<String> argsBuilder = ImmutableList.builder();
         argsBuilder.add(String.format("--port=%d", port));
         if (logFile != null) {
-          argsBuilder.add(String.format("--log-path=%s", logFile.getAbsolutePath()));
+          argsBuilder.add(String.format("--log-file=%s", logFile.getAbsolutePath()));
         }
         if (logLevel != null) {
           argsBuilder.add(String.format("--log-level=%s", logLevel.toString()));

File: java/client/test/org/openqa/selenium/WindowTest.java
Patch:
@@ -60,7 +60,6 @@ public void testSetsTheSizeOfTheCurrentWindow() {
     changeSizeBy(-20, -20);
   }
 
-  @Ignore(issues = {3897})
   @Test
   public void testSetsTheSizeOfTheCurrentWindowFromFrame() {
     driver.get(pages.framesetPage);
@@ -73,7 +72,6 @@ public void testSetsTheSizeOfTheCurrentWindowFromFrame() {
     }
   }
 
-  @Ignore(issues = {3897})
   @Test
   public void testSetsTheSizeOfTheCurrentWindowFromIframe() {
     driver.get(pages.iframePage);

File: java/client/test/org/openqa/selenium/AuthenticatedPageLoadingTest.java
Patch:
@@ -19,13 +19,15 @@
 
 import org.junit.Test;
 import org.openqa.selenium.security.UserAndPassword;
+import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 
 import java.util.concurrent.Callable;
 
 import static org.junit.Assert.assertEquals;
 import static org.openqa.selenium.TestWaiter.waitFor;
 
+@Ignore
 public class AuthenticatedPageLoadingTest extends JUnit4TestBase {
 
   @Test

File: java/client/test/org/openqa/selenium/environment/InProcessTestEnvironment.java
Patch:
@@ -18,7 +18,7 @@
 package org.openqa.selenium.environment;
 
 import org.openqa.selenium.environment.webserver.AppServer;
-import org.openqa.selenium.environment.webserver.WebbitAppServer;
+import org.openqa.selenium.environment.webserver.Jetty7AppServer;
 import org.openqa.selenium.net.NetworkUtils;
 import org.openqa.selenium.testing.drivers.Browser;
 
@@ -28,7 +28,7 @@ public class InProcessTestEnvironment implements TestEnvironment {
 
   public InProcessTestEnvironment() {
     String servingHost = getServingHost();
-    appServer = servingHost == null ? new WebbitAppServer() : new WebbitAppServer(servingHost);
+    appServer = servingHost == null ? new Jetty7AppServer() : new Jetty7AppServer(servingHost);
     appServer.start();
   }
 

File: java/client/test/org/openqa/selenium/javascript/WebDriverJsTestSuite.java
Patch:
@@ -44,7 +44,7 @@
 
 public class WebDriverJsTestSuite {
 
-  private static final boolean USE_WEBBIT = true;
+  private static final boolean USE_WEBBIT = false;
 
   public static Test suite() {
     final AppServerAndTestEventSupplier appServerAndTestEventSupplier = createAppServer();

File: java/client/src/org/openqa/selenium/support/Color.java
Patch:
@@ -16,7 +16,7 @@
 */
 
 
-package org.openqa.selenium;
+package org.openqa.selenium.support;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: java/client/test/org/openqa/selenium/support/ColorTest.java
Patch:
@@ -16,7 +16,7 @@
 */
 
 
-package org.openqa.selenium;
+package org.openqa.selenium.support;
 
 import static org.junit.Assert.assertEquals;
 

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -69,6 +69,7 @@ public class Pages {
   public String veryLargeCanvas;
   public String readOnlyPage;
   public String booleanAttributes;
+  public String colorPage;
 
   public Pages(AppServer appServer) {
     ajaxyPage = appServer.whereIs("ajaxy_page.html");
@@ -121,5 +122,6 @@ public Pages(AppServer appServer) {
     veryLargeCanvas = appServer.whereIs("veryLargeCanvas.html");
     readOnlyPage = appServer.whereIs("readOnlyPage.html");
     booleanAttributes = appServer.whereIs("booleanAttributes.html");
+    colorPage = appServer.whereIs("colorPage.html");
   }
 }

File: java/client/test/org/openqa/selenium/SmallTests.java
Patch:
@@ -36,6 +36,7 @@
     ActionsTest.class,
     Base64EncoderTest.class,
     ByTest.class,
+    ColorTest.class,
     CommandLineTest.class,
     CookieTest.class,
     CompositeActionTest.class,

File: java/client/test/org/openqa/selenium/support/SmallTests.java
Patch:
@@ -37,7 +37,6 @@
     AjaxElementLocatorTest.class,
     AnnotationsTest.class,
     ByChainedTest.class,
-    ColorTest.class,
     DefaultElementLocatorTest.class,
     DefaultFieldDecoratorTest.class,
     EventFiringWebDriverTest.class,

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -39,6 +39,7 @@
 import org.openqa.grid.web.servlet.DriverServlet;
 import org.openqa.grid.web.servlet.Grid1HeartbeatServlet;
 import org.openqa.grid.web.servlet.HubStatusServlet;
+import org.openqa.grid.web.servlet.LifecycleServlet;
 import org.openqa.grid.web.servlet.ProxyStatusServlet;
 import org.openqa.grid.web.servlet.RegistrationServlet;
 import org.openqa.grid.web.servlet.ResourceServlet;
@@ -155,6 +156,7 @@ private void initServer() {
       root.addServlet(ProxyStatusServlet.class.getName(), "/grid/api/proxy/*");
       root.addServlet(HubStatusServlet.class.getName(), "/grid/api/hub/*");
       root.addServlet(TestSessionStatusServlet.class.getName(), "/grid/api/testsession/*");
+      root.addServlet(LifecycleServlet.class.getName(), "/lifecycle-manager/*");
 
       // Selenium Grid 1.0 compatibility routes for older nodes trying to
       // work with the newer hub.

File: java/server/src/org/openqa/selenium/remote/server/handler/CookieHandler.java
Patch:
@@ -53,6 +53,9 @@ protected Cookie createCookie() {
     String path = (String) rawCookie.get("path");
     String domain = (String) rawCookie.get("domain");
     Boolean secure = (Boolean) rawCookie.get("secure");
+    if (secure == null) {
+        secure = false;
+    }
 
     Number expiryNum = (Number) rawCookie.get("expiry");
     Date expiry = expiryNum == null ? null : new Date(

File: java/client/test/org/openqa/selenium/testing/drivers/ReflectionBackedDriverSupplier.java
Patch:
@@ -74,7 +74,7 @@ public WebDriver get() {
 
   private void copyFirefoxDriverDefaultsToOutputDir() throws IOException {
     File defaults = InProject.locate("javascript/firefox-driver/webdriver.json");
-    File out = InProject.locate("out/production/selenium/org/openqa/selenium/firefox/FirefoxProfile.class").getParentFile();
+    File out = InProject.locate("java/client/build/production/org/openqa/selenium/firefox/FirefoxProfile.class").getParentFile();
     out = new File(out, "webdriver.json");
     Files.copy(defaults, out);
   }

File: java/client/src/org/openqa/selenium/iphone/IPhoneDriver.java
Patch:
@@ -130,8 +130,7 @@ public Alert alert() {
   }
 
   public <X> X getScreenshotAs(OutputType<X> target) {
-    byte[] base64Png = (byte[]) execute(DriverCommand.SCREENSHOT).getValue();
-    String png = new String(base64Png);
+    String png = (String) execute(DriverCommand.SCREENSHOT).getValue();
     // ... and convert it.
     return target.convertFromBase64Png(png);
   }

File: java/client/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -513,6 +513,7 @@ public void testShouldBeAbleToFindElementsByCssSelector() {
   }
 
   @JavascriptEnabled
+  @Ignore(CHROME)
   @Test
   public void testShouldBeAbleToFindAnElementByCompoundCssSelector() {
     driver.get(pages.xhtmlTestPage);
@@ -521,6 +522,7 @@ public void testShouldBeAbleToFindAnElementByCompoundCssSelector() {
   }
 
   @JavascriptEnabled
+  @Ignore(CHROME)
   @Test
   public void testShouldBeAbleToFindElementsByCompoundCssSelector() {
     driver.get(pages.xhtmlTestPage);

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
-import static org.openqa.selenium.testing.Ignore.Driver.ALL;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.FIREFOX;
@@ -249,10 +248,9 @@ public void testShouldReturnEmptyStringWhenTextIsEmpty() {
     assertThat(text, equalTo(""));
   }
 
-  @Ignore(ALL)
   @Test
   public void testShouldReturnEmptyStringWhenTagIsSelfClosing() {
-    driver.get(pages.xhtmlTestPage);
+    driver.get(pages.xhtmlFormPage);
 
     String text = driver.findElement(By.id("self-closed")).getText();
     assertThat(text, equalTo(""));

File: java/client/test/org/openqa/selenium/I18nTest.java
Patch:
@@ -55,7 +55,7 @@ public class I18nTest extends JUnit4TestBase {
   /**
    * Japanese for "Tokyo"
    */
-  private static final String tokyo = "東京";
+  private static final String tokyo = "\u6771\u4EAC";
 
   @Ignore({IE, FIREFOX, IPHONE})
   @Test

File: java/client/src/org/openqa/selenium/Platform.java
Patch:
@@ -155,7 +155,7 @@ public static Platform extractFromSysProperty(String osName) {
         if ("".equals(matcher)) {
           continue;
         }
-
+        matcher = matcher.toLowerCase();
         if (os.isExactMatch(osName, matcher)) {
           return os;
         }

File: java/server/test/org/openqa/grid/internal/utils/DefaultCapabilityMatcherTest.java
Patch:
@@ -87,6 +87,7 @@ public void platformMatchingTest() {
     DefaultCapabilityMatcher matcher = new DefaultCapabilityMatcher();
     Platform p = Platform.WINDOWS;
 
+    Assert.assertTrue(matcher.extractPlatform("WINDOWS") == p);
     Assert.assertTrue(matcher.extractPlatform("xp").is(p));
     Assert.assertTrue(matcher.extractPlatform("windows VISTA").is(p));
     Assert.assertTrue(matcher.extractPlatform("windows 7").is(p));

File: java/client/src/org/openqa/selenium/firefox/internal/Executable.java
Patch:
@@ -179,9 +179,9 @@ private static File locateFirefoxBinaryFromPlatform() {
       return binary;
     }
 
-    String systemFirefox = CommandLine.find(BrowserType.FIREFOX);
+    String systemFirefox = CommandLine.find("firefox");
     if (systemFirefox != null) {
-      new File(systemFirefox);
+      return new File(systemFirefox);
     }
     return null;
   }

File: java/server/src/org/openqa/grid/internal/utils/GridHubConfiguration.java
Patch:
@@ -105,7 +105,7 @@ public class GridHubConfiguration {
   /**
    * original command line param, useful for debugging
    */
-  private String[] args;
+  private String[] args = {};
   private String grid1Yml = null;
   private String grid2JSON = null;
 

File: java/client/src/org/openqa/selenium/android/library/AndroidCoordinates.java
Patch:
@@ -42,7 +42,7 @@ public Point getLocationInDOM() {
     return point;
   }
 
-  public Object getAuxiliry() {
+  public Object getAuxiliary() {
     return elementId; 
   }
 

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitMouse.java
Patch:
@@ -47,7 +47,7 @@ public HtmlUnitMouse(HtmlUnitDriver parent, HtmlUnitKeyboard keyboard) {
 
   private HtmlElement getElementForOperation(Coordinates potentialCoordinates) {
     if (potentialCoordinates != null) {
-      return (HtmlElement) potentialCoordinates.getAuxiliry();
+      return (HtmlElement) potentialCoordinates.getAuxiliary();
     }
 
     if (currentActiveElement == null) {
@@ -171,7 +171,7 @@ public void mouseUp(Coordinates elementCoordinates) {
 
   public void mouseMove(Coordinates elementCoordinates) {
     Preconditions.checkNotNull(elementCoordinates);
-    HtmlElement element = (HtmlElement) elementCoordinates.getAuxiliry();
+    HtmlElement element = (HtmlElement) elementCoordinates.getAuxiliary();
 
     moveOutIfNeeded(element);
 

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -983,7 +983,7 @@ public Point getLocationInDOM() {
         return getLocation();
       }
 
-      public Object getAuxiliry() {
+      public Object getAuxiliary() {
         return getElement();
       }
     };

File: java/client/src/org/openqa/selenium/interactions/internal/Coordinates.java
Patch:
@@ -14,5 +14,5 @@ public interface Coordinates {
 
   Point getLocationInDOM();
 
-  Object getAuxiliry();
+  Object getAuxiliary();
 }

File: java/client/src/org/openqa/selenium/remote/CoordinatesUtils.java
Patch:
@@ -32,7 +32,7 @@ static Map<String, Object> paramsFromCoordinates(Coordinates where) {
     Map<String, Object> params = Maps.newHashMap();
 
     if (where != null) {
-      String id = (String) where.getAuxiliry();
+      String id = (String) where.getAuxiliary();
       params.put("element", id);
     }
 

File: java/client/src/org/openqa/selenium/remote/RemoteMouse.java
Patch:
@@ -40,7 +40,7 @@ protected Map<String, Object> paramsFromCoordinates(Coordinates where) {
     Map<String, Object> params = Maps.newHashMap();
 
     if (where != null) {
-      String id = (String) where.getAuxiliry();
+      String id = (String) where.getAuxiliary();
       params.put("element", id);
     }
 

File: java/client/src/org/openqa/selenium/remote/RemoteWebElement.java
Patch:
@@ -339,7 +339,7 @@ public Point getLocationInDOM() {
         throw new UnsupportedOperationException("Not supported yet.");
       }
 
-      public Object getAuxiliry() {
+      public Object getAuxiliary() {
         return getId();
       }
     };

File: java/client/test/org/openqa/selenium/GetMultipleAttributeTest.java
Patch:
@@ -8,7 +8,7 @@
 public class GetMultipleAttributeTest extends JUnit4TestBase {
 
   @Test
-  public void testMultipleAttributeShouldBeFalseWhenNotSet() {
+  public void testMultipleAttributeShouldBeNullWhenNotSet() {
     driver.get(pages.selectPage);
     WebElement element = driver.findElement(By.id("selectWithoutMultiple"));
     assertEquals(null, element.getAttribute("multiple"));

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -275,6 +275,7 @@ public void quit() {
         connection.quit();
         connection = null;
       }
+      profile.cleanTemporaryModel();
     }
 
     public Response execute(Command command) throws IOException {

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -84,14 +84,14 @@ public void testShouldReturnEmptyAttributeValuesWhenPresentAndTheValueIsActually
   }
 
   @Test
-  public void testShouldReturnTheValueOfTheDisabledAttributeAsFalseIfNotSet() {
+  public void testShouldReturnTheValueOfTheDisabledAttributeAsNullIfNotSet() {
     driver.get(pages.formPage);
     WebElement inputElement = driver.findElement(By.xpath("//input[@id='working']"));
-    assertThat(inputElement.getAttribute("disabled"), equalTo("false"));
+    assertThat(inputElement.getAttribute("disabled"), equalTo(null));
     assertThat(inputElement.isEnabled(), equalTo(true));
 
     WebElement pElement = driver.findElement(By.id("peas"));
-    assertThat(pElement.getAttribute("disabled"), equalTo("false"));
+    assertThat(pElement.getAttribute("disabled"), equalTo(null));
     assertThat(pElement.isEnabled(), equalTo(true));
   }
 

File: java/client/test/org/openqa/selenium/GetMultipleAttributeTest.java
Patch:
@@ -11,7 +11,7 @@ public class GetMultipleAttributeTest extends JUnit4TestBase {
   public void testMultipleAttributeShouldBeFalseWhenNotSet() {
     driver.get(pages.selectPage);
     WebElement element = driver.findElement(By.id("selectWithoutMultiple"));
-    assertEquals("false", element.getAttribute("multiple"));
+    assertEquals(null, element.getAttribute("multiple"));
   }
 
   @Test

File: java/client/test/org/openqa/selenium/testing/SeleniumTestRunner.java
Patch:
@@ -114,7 +114,8 @@ public void evaluate() throws Throwable {
   }
 
   private void dealWithSauceFailureIfNecessary(Throwable t) {
-    if (t.getMessage().contains("sauce") || t.getMessage().contains("Sauce")) {
+    if (t.getMessage() != null
+        && (t.getMessage().contains("sauce") || t.getMessage().contains("Sauce"))) {
       JUnit4TestBase.removeDriver();
       try {
         JUnit4TestBase.actuallyCreateDriver();

File: java/server/src/org/openqa/selenium/remote/server/SessionCleaner.java
Patch:
@@ -45,7 +45,7 @@ class SessionCleaner extends Thread {   // Thread safety reviewed
       throw new IllegalStateException("SessionCleaner not supposed to start when no timeouts specified");
     }
     if (insideBrowserTimeout > 0 && insideBrowserTimeout < 60000){
-      log.warning("The specified browser timeout is TOO LOW for safe operations and may have"+
+      log.warning("The specified browser timeout is TOO LOW for safe operations and may have " +
                   "other side-effects\n. Please specify a slightly higher browserTimeout.");
     }
     long lowestNonZero = Math.min((insideBrowserTimeout > 0) ? insideBrowserTimeout : clientGoneTimeout,

File: java/server/test/org/openqa/selenium/remote/server/rest/ResultConfigTest.java
Patch:
@@ -167,7 +167,6 @@ public void testSelectsFirstAvailableRendererWhenThereAreNoMimeTypesSpecified()
         .on(ResultType.SUCCESS, mockRenderer1)
         .on(ResultType.SUCCESS, mockRenderer2);
 
-    System.out.println("config = " + config.getRenderer(ResultType.SUCCESS, mockRequest));
     assertEquals(mockRenderer1, config.getRenderer(ResultType.SUCCESS, mockRequest));
   }
 

File: java/client/test/org/openqa/selenium/testing/JUnit4TestBase.java
Patch:
@@ -40,6 +40,7 @@ public void prepareEnvironment() throws Exception {
   @Before
   public void createDriver() throws Exception {
     actuallyCreateDriver();
+    driver = storedDriver.get();
   }
 
   public WebDriver getWrappedDriver() {

File: java/server/src/org/openqa/selenium/remote/server/renderer/RedirectResult.java
Patch:
@@ -50,8 +50,6 @@ public void render(HttpRequest request, HttpServletResponse response, RestishHan
       }
     }
 
-    System.out.println("builder = " + builder);
-
     response.sendRedirect(builder.toString());
   }
 

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -500,6 +500,7 @@ public void testJavascriptStringHandlingShouldWorkAsExpected() {
   }
 
   @JavascriptEnabled
+  @Ignore(OPERA)
   @Test
   public void testShouldBeAbleToExecuteABigChunkOfJavascriptCode() throws IOException {
     driver.get(pages.javascriptPage);
@@ -543,6 +544,7 @@ public void testShouldThrowExceptionIfExecutingOnNoPage() {
   }
 
   @JavascriptEnabled
+  @Ignore(OPERA)
   @Test
   public void testShouldBeAbleToCreateAPersistentValue() {
     driver.get(pages.formPage);
@@ -555,6 +557,7 @@ public void testShouldBeAbleToCreateAPersistentValue() {
   }
 
   @JavascriptEnabled
+  @Ignore(OPERA)
   @Test
   public void testCanHandleAnArrayOfElementsAsAnObjectArray() {
     driver.get(pages.formPage);

File: java/client/test/org/openqa/selenium/StandardSeleniumTests.java
Patch:
@@ -25,6 +25,7 @@
 import org.openqa.selenium.environment.InProcessTestEnvironment;
 import org.openqa.selenium.html5.Html5Tests;
 import org.openqa.selenium.interactions.InteractionTests;
+import org.openqa.selenium.support.ui.SelectElementTest;
 import org.openqa.selenium.testing.JUnit4TestBase;
 
 @RunWith(Suite.class)
@@ -59,6 +60,7 @@
     PartialLinkTextMatchTest.class,
     RenderedWebElementTest.class,
     RotatableTest.class,
+    SelectElementTest.class,
     SelectElementHandlingTest.class,
     SlowLoadingPageTest.class,
     StaleElementReferenceTest.class,

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -538,7 +538,7 @@ public Set<Cookie> getCookies() {
         String value = (String) rawCookie.get("value");
         String path = (String) rawCookie.get("path");
         String domain = (String) rawCookie.get("domain");
-        Boolean secure = (Boolean) rawCookie.get("secure");
+        boolean secure = rawCookie.containsKey("secure") && (Boolean) rawCookie.get("secure");
 
         Number expiryNum = (Number) rawCookie.get("expiry");
         Date expiry = expiryNum == null ? null : new Date(

File: java/client/test/org/openqa/selenium/rc/SetProxyTest.java
Patch:
@@ -60,7 +60,7 @@ public static void startProxy() {
   }
 
   @AfterClass
-  public static void detroyProxy() {
+  public static void destroyProxy() {
     proxyServer.destroy();
   }
 

File: java/server/src/org/openqa/grid/internal/listeners/Prioritizer.java
Patch:
@@ -31,7 +31,7 @@ public interface Prioritizer {
    * @param a
    * @param b
    * @return a negative number is a is less important than b, a positive number is a is more
-   *         important than b, 0 if a and b are equaly as important.
+   *         important than b, 0 if a and b are equally as important.
    */
   public int compareTo(Map<String, Object> a, Map<String, Object> b);
 }

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -28,6 +28,7 @@ public class Pages {
   public String simpleXmlDocument;
   public String xhtmlTestPage;
   public String formPage;
+  public String xhtmlFormPage;
   public String metaRedirectPage;
   public String redirectPage;
   public String javascriptEnhancedForm;
@@ -86,6 +87,7 @@ public Pages(AppServer appServer) {
     documentWrite = appServer.whereIs("document_write_in_onload.html");
     dynamicPage = appServer.whereIs("dynamic.html");
     errorsPage = appServer.whereIs("errors.html");
+    xhtmlFormPage = appServer.whereIs("xhtmlFormPage.xhtml");
     formPage = appServer.whereIs("formPage.html");
     formSelectionPage = appServer.whereIs("formSelectionPage.html");
     framesetPage = appServer.whereIs("frameset.html");

File: java/server/src/org/openqa/selenium/remote/server/DefaultSession.java
Patch:
@@ -111,7 +111,7 @@ private DefaultSession(final DriverFactory factory, TemporaryFilesystem tempFs,
     // Ensure that the browser is created on the single thread.
     EventFiringWebDriver initialDriver = execute(webDriverFutureTask);
 
-    if (!browserCreator.isAndroid()) {
+    if (!browserCreator.isAndroid() && !capabilities.is("webdriver.remote.quietExceptions")) {
       // Memo to self; this is not a constructor escape of "this" - probably ;)
       initialDriver.register(new SnapshotScreenListener(this));
     }

File: java/server/src/org/openqa/grid/internal/RemoteProxy.java
Patch:
@@ -55,9 +55,10 @@ public interface RemoteProxy extends Comparable<RemoteProxy> {
   Registry getRegistry();
 
   /**
-   * See Registry#getCapabilityMatcher.
+   * Returns the capability matcher that will be used to by the remote proxy
+   * to determine whether its test slots can run a requested test session.
    *
-   * @return the registry's capability matcher.
+   * @return the capability matcher.
    */
   CapabilityMatcher getCapabilityHelper();
 

File: java/server/src/org/openqa/grid/internal/utils/DefaultCapabilityMatcher.java
Patch:
@@ -58,10 +58,10 @@ public boolean matches(Map<String, Object> nodeCapability, Map<String, Object> r
         if (requestedCapability.get(key) != null) {
           String value = requestedCapability.get(key).toString();
           if (!("ANY".equalsIgnoreCase(value) || "".equals(value) || "*".equals(value))) {
-            Platform requested = exctractPlatform(requestedCapability.get(key));
+            Platform requested = extractPlatform(requestedCapability.get(key));
             // special case for platform
             if (requested != null) {
-              Platform node = exctractPlatform(nodeCapability.get(key));
+              Platform node = extractPlatform(nodeCapability.get(key));
               if (node == null) {
                 return false;
               }
@@ -82,7 +82,7 @@ public boolean matches(Map<String, Object> nodeCapability, Map<String, Object> r
     return true;
   }
 
-  Platform exctractPlatform(Object o) {
+  Platform extractPlatform(Object o) {
     if (o == null) {
       return null;
     }

File: java/server/test/org/openqa/grid/internal/utils/DefaultCapabilityMatcherTest.java
Patch:
@@ -87,9 +87,9 @@ public void platformMatchingTest() {
     DefaultCapabilityMatcher matcher = new DefaultCapabilityMatcher();
     Platform p = Platform.WINDOWS;
 
-    Assert.assertTrue(matcher.exctractPlatform("xp").is(p));
-    Assert.assertTrue(matcher.exctractPlatform("windows VISTA").is(p));
-    Assert.assertTrue(matcher.exctractPlatform("windows 7").is(p));
+    Assert.assertTrue(matcher.extractPlatform("xp").is(p));
+    Assert.assertTrue(matcher.extractPlatform("windows VISTA").is(p));
+    Assert.assertTrue(matcher.extractPlatform("windows 7").is(p));
   }
 
 

File: java/client/test/org/openqa/selenium/ByTest.java
Patch:
@@ -48,13 +48,12 @@ public void shouldUseFindsByNameToLocateElementsByName() {
   }
 
   @Test
-  @Ignore
-  public void xtestShouldUseXPathToFindByNameIfDriverDoesNotImplementFindsByName() {
+  public void shouldUseXPathToFindByNameIfDriverDoesNotImplementFindsByName() {
     final OnlyXPath driver = mock(OnlyXPath.class);
 
     checking(new Expectations() {
       {
-        one(driver).findElementByXPath("//*[@name='cheese']");
+        one(driver).findElementByXPath(".//*[@name = 'cheese']");
       }
     });
 

File: java/client/src/org/openqa/selenium/firefox/internal/NewProfileExtensionConnection.java
Patch:
@@ -136,7 +136,8 @@ protected int determineNextFreePort(int port) {
 
     for (newport = port; newport < port + 200; newport++) {
       Socket socket = new Socket();
-      InetSocketAddress address = new InetSocketAddress("localhost", newport);
+      InetSocketAddress address = new InetSocketAddress(networkUtils.obtainLoopbackIp4Address(),
+                                                        newport);
 
       try {
         socket.bind(address);

File: java/client/test/org/openqa/selenium/WindowTest.java
Patch:
@@ -94,7 +94,7 @@ public void testSetsThePositionOfTheCurrentWindow() throws InterruptedException
     waitFor(yEqual(driver, targetPosition));
   }
 
-  @Ignore(value = {ANDROID, CHROME, HTMLUNIT, IPHONE, OPERA, SELENESE})
+  @Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SELENESE})
   @Test
   public void testCanMaximizeTheWindow() throws InterruptedException {
     if(SauceDriver.shouldUseSauce() && TestUtilities.getEffectivePlatform().is(Platform.LINUX)) {

File: java/server/src/org/openqa/grid/internal/utils/GridHubConfiguration.java
Patch:
@@ -248,17 +248,18 @@ public void loadFromGridYml(String resource) {
 
     Integer timeout = (Integer) hub.get("sessionMaxIdleTimeInSeconds");
     if (timeout != null) {
-      timeout = timeout.intValue() * 1000;
+      setTimeout(timeout.intValue() * 1000);
     }
 
     Integer port = (Integer) hub.get(RegistrationRequest.PORT);
     if (port != null) {
-      port = port.intValue();
+      setPort(port.intValue());
     }
 
     Integer newSessionWait = (Integer) hub.get("newSessionMaxWaitTimeInSeconds");
     if (newSessionWait != null) {
       newSessionWaitTimeout = newSessionWait.intValue() * 1000;
+      setNewSessionWaitTimeout(newSessionWait.intValue() * 1000);
     }
 
     allParams.put(RegistrationRequest.MAX_SESSION, 1);

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -218,7 +218,6 @@ public String forward(SeleniumBasedRequest request, HttpServletResponse response
       HttpRequest proxyRequest = prepareProxyRequest(request/*, config*/);
 
       HttpResponse proxyResponse = sendRequestToNode(proxyRequest);
-
       lastActivity = timeSource.currentTimeInMillis();
 
       final int statusCode = proxyResponse.getStatusLine().getStatusCode();
@@ -265,11 +264,10 @@ public String forward(SeleniumBasedRequest request, HttpServletResponse response
         wrappedResponse.setForwardedContent(contentBeingForwarded);
         ((CommandListener) slot.getProxy()).afterCommand(this, request, wrappedResponse);
       }
+      response.flushBuffer();
       return res;
     } finally {
       forwardingRequest = false;
-      // Flushing the buffer is important to avoid concurrency problems
-      response.flushBuffer();
       Thread.currentThread().setName(currentThreadName);
     }
   }

File: java/server/src/org/openqa/selenium/server/log/DefaultPerSessionLogHandler.java
Patch:
@@ -75,12 +75,12 @@ synchronized public void publish(LogRecord record) {
       records.add(record);
       perSessionRecords.put(sessionId, records);
       if (records.size() > capacity) {
+        perSessionRecords.put( sessionId, new ArrayList<LogRecord>());
         // flush records to file;
         try {
           logFileRepository.flushRecordsToLogFile(sessionId, records);
           // clear in memory session records
           records.clear();
-          perSessionRecords.put(sessionId, records);
         } catch (IOException ex) {
           ex.printStackTrace();
         }
@@ -89,9 +89,9 @@ synchronized public void publish(LogRecord record) {
       List<LogRecord> records = perThreadTempRecords.get(threadId);
       if (records == null) {
         records = new ArrayList<LogRecord>();
+        perThreadTempRecords.put(threadId, records);
       }
       records.add(record);
-      perThreadTempRecords.put(threadId, records);
     }
   }
 

File: java/server/src/org/openqa/grid/web/servlet/DriverServlet.java
Patch:
@@ -84,7 +84,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
       req.process();
 
     } catch (Throwable e) {
-      if (r instanceof WebDriverRequest) {
+      if (r instanceof WebDriverRequest && !response.isCommitted()) {
         // http://code.google.com/p/selenium/wiki/JsonWireProtocol#Error_Handling
         response.reset();
         response.setContentType("application/json");

File: java/client/src/org/openqa/selenium/remote/DriverCommand.java
Patch:
@@ -151,10 +151,13 @@ public interface DriverCommand {
   String TOUCH_LONG_PRESS = "touchLongPress";
   String TOUCH_FLICK = "touchFlick";
 
+  // Window API (beta)
   String SET_WINDOW_SIZE = "setWindowSize";
   String SET_WINDOW_POSITION = "setWindowPosition";
   String GET_WINDOW_SIZE = "getWindowSize";
   String GET_WINDOW_POSITION = "getWindowPosition";
+  String MAXIMIZE_WINDOW = "maximizeWindow";
+  String RESTORE_WINDOW = "restoreWindow";
 
   String GET_LOGS = "getLogs";
 }

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -186,6 +186,8 @@ public HttpCommandExecutor(URL addressOfRemoteServer) {
         .put(GET_WINDOW_POSITION, get("/session/:sessionId/window/:windowHandle/position"))
         .put(SET_WINDOW_SIZE, post("/session/:sessionId/window/:windowHandle/size"))
         .put(SET_WINDOW_POSITION, post("/session/:sessionId/window/:windowHandle/position"))
+        .put(MAXIMIZE_WINDOW, post("/session/:sessionId/window/:windowHandle/maximize"))
+        .put(RESTORE_WINDOW, post("/session/:sessionId/window/:windowHandle/restore"))
         .put(CLOSE, delete("/session/:sessionId/window"))
         .put(DRAG_ELEMENT, post("/session/:sessionId/element/:id/drag"))
         .put(GET_ELEMENT_VALUE_OF_CSS_PROPERTY,

File: android/src/org/openqa/selenium/android/server/JettyService.java
Patch:
@@ -33,7 +33,6 @@
 import android.content.Intent;
 import android.os.IBinder;
 import android.os.PowerManager;
-import android.util.Log;
 import android.widget.Toast;
 
 import java.util.logging.Level;

File: java/client/src/org/openqa/selenium/android/library/WebDriverView.java
Patch:
@@ -99,9 +99,9 @@ private static void initWebViewSettings(ViewAdapter view) {
     settings.setSupportMultipleWindows(true);
     settings.setBuiltInZoomControls(true);
     settings.setJavaScriptEnabled(true);
-    /*settings.setAppCacheEnabled(true);
+    settings.setAppCacheEnabled(true);
     settings.setAppCacheMaxSize(10*1024*1024);
-    settings.setAppCachePath("");*/
+    settings.setAppCachePath("");
     settings.setDatabaseEnabled(true);
     settings.setDomStorageEnabled(true);
     settings.setGeolocationEnabled(true);

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -196,9 +196,7 @@ public HttpCommandExecutor(URL addressOfRemoteServer) {
         .put(EXECUTE_SQL, post("/session/:sessionId/execute_sql"))
         .put(GET_LOCATION, get("/session/:sessionId/location"))
         .put(SET_LOCATION, post("/session/:sessionId/location"))
-        .put(GET_APP_CACHE, get("/session/:sessionId/application_cache"))
         .put(GET_APP_CACHE_STATUS, get("/session/:sessionId/application_cache/status"))
-        .put(CLEAR_APP_CACHE, delete("/session/:sessionId/application_cache/clear"))
         .put(IS_BROWSER_ONLINE, get("/session/:sessionId/browser_connection"))
         .put(SET_BROWSER_ONLINE, post("/session/:sessionId/browser_connection"))
 

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -50,6 +50,7 @@ public class Pages {
   public String dynamicPage;
   public String slowIframes;
   public String html5Page;
+  public String html5OfflinePage;
   public String tables;
   public String deletingFrame;
   public String draggableLists;
@@ -90,6 +91,7 @@ public Pages(AppServer appServer) {
     framesetPage = appServer.whereIs("frameset.html");
     grandchildPage = appServer.whereIs("child/grandchild/grandchildPage.html");
     html5Page = appServer.whereIs("html5Page.html");
+    html5OfflinePage = appServer.whereIs("html5/offline.html");
     iframePage = appServer.whereIs("iframes.html");
     javascriptEnhancedForm = appServer.whereIs("javascriptEnhancedForm.html");
     javascriptPage = appServer.whereIs("javascriptPage.html");

File: java/server/src/org/openqa/selenium/remote/server/DefaultDriverSessions.java
Patch:
@@ -58,7 +58,9 @@ protected DefaultDriverSessions(Platform runningOn, DriverFactory factory) {
 
   private void registerDefaults(Platform current) {
     if (current.equals(Platform.ANDROID)) {
+      // AndroidDriver is here for backward-compatibility reasons, it should be removed at some point
       registerDriver(DesiredCapabilities.android(), "org.openqa.selenium.android.AndroidDriver");
+      registerDriver(DesiredCapabilities.android(), "org.openqa.selenium.android.AndroidApkDriver");
       return;
     }
     for (Map.Entry<Capabilities, String> entry : defaultDrivers.entrySet()) {

File: android/src/org/openqa/selenium/android/AndroidApkDriver.java
Patch:
@@ -39,12 +39,12 @@
 import java.util.List;
 import java.util.Set;
 
-public class AndroidDriver implements BrowserConnection, HasTouchScreen, JavascriptExecutor,
+public class AndroidApkDriver implements BrowserConnection, HasTouchScreen, JavascriptExecutor,
     LocationContext, Rotatable, TakesScreenshot, WebDriver, WebStorage {
 
   private AndroidWebDriver driver;
 
-  public AndroidDriver() {
+  public AndroidApkDriver() {
     driver = MainActivity.createDriver();
   }
 

File: java/client/test/org/openqa/selenium/AbstractDriverTestCase.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.openqa.selenium;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.core.IsNot.not;
+import static org.junit.Assert.assertThat;
 
 import org.openqa.selenium.environment.GlobalTestEnvironment;
 import org.openqa.selenium.environment.TestEnvironment;

File: java/client/test/org/openqa/selenium/ByTest.java
Patch:
@@ -28,8 +28,8 @@
 import org.openqa.selenium.internal.FindsByXPath;
 import org.openqa.selenium.testing.MockTestBase;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
+import static org.junit.Assert.assertThat;
 
 public class ByTest extends MockTestBase {
 

File: java/client/test/org/openqa/selenium/ChildrenFindingTest.java
Patch:
@@ -24,9 +24,9 @@
 
 import java.util.List;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 

File: java/client/test/org/openqa/selenium/ClickScrollingTest.java
Patch:
@@ -6,10 +6,10 @@
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.JavascriptEnabled;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -28,11 +28,11 @@
 import java.io.IOException;
 import java.util.List;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.not;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.TestWaiter.waitFor;

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -26,6 +26,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
@@ -37,7 +38,6 @@
 import static org.openqa.selenium.testing.Ignore.Driver.REMOTE;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;

File: java/client/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -24,6 +24,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
@@ -33,7 +34,6 @@
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.WaitingConditions.pageTitleToBe;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 

File: java/client/test/org/openqa/selenium/ElementSelectingTest.java
Patch:
@@ -5,14 +5,14 @@
 import org.openqa.selenium.testing.JUnit4TestBase;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.WaitingConditions.elementSelectionToBe;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 
 public class ElementSelectingTest extends JUnit4TestBase {

File: java/client/test/org/openqa/selenium/ExecutingAsyncJavascriptTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
@@ -14,7 +15,6 @@
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.instanceOf;
 

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -36,13 +36,13 @@
 import java.util.List;
 import java.util.Map;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.instanceOf;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;

File: java/client/test/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.openqa.selenium.testing.JUnit4TestBase;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
@@ -33,7 +34,6 @@
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.WaitingConditions.pageTitleToBe;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.is;

File: java/client/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.openqa.selenium;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.TestWaiter.waitFor;

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.FIREFOX;
@@ -32,7 +33,6 @@
 import static org.openqa.selenium.WaitingConditions.elementTextToEqual;
 import static org.openqa.selenium.WaitingConditions.elementValueToEqual;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.core.Is.is;
 import static org.junit.matchers.JUnitMatchers.either;

File: java/client/test/org/openqa/selenium/MiscTest.java
Patch:
@@ -23,14 +23,14 @@
 import org.openqa.selenium.testing.JavascriptEnabled;
 
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -29,9 +29,9 @@
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
 
 import static java.util.concurrent.TimeUnit.SECONDS;
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.equalTo;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.TestWaiter.waitFor;

File: java/client/test/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -26,10 +26,10 @@
 
 import java.util.concurrent.Callable;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;

File: java/client/test/org/openqa/selenium/SelectElementHandlingTest.java
Patch:
@@ -21,14 +21,14 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 
 import java.util.List;

File: java/client/test/org/openqa/selenium/TagNameTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.openqa.selenium;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
 
 import org.junit.Test;
 import org.openqa.selenium.testing.JUnit4TestBase;

File: java/client/test/org/openqa/selenium/TestSuiteBuilder.java
Patch:
@@ -41,9 +41,9 @@
 import java.util.List;
 import java.util.Set;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 
 public class TestSuiteBuilder {

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.testing.Ignore.Driver.ALL;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
@@ -31,7 +32,6 @@
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.TestWaiter.waitFor;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.endsWith;
 import static org.hamcrest.Matchers.equalTo;

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -22,12 +22,12 @@
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.JavascriptEnabled;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.openqa.selenium.testing.Ignore.Driver.ALL;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;

File: java/client/test/org/openqa/selenium/VisibilityTest.java
Patch:
@@ -25,13 +25,13 @@
 
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.TestWaiter.waitFor;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.not;
 import static org.hamcrest.core.Is.is;
 

File: java/client/test/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -17,11 +17,11 @@
 
 package org.openqa.selenium;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.WaitingConditions.elementToExist;

File: java/client/test/org/openqa/selenium/WindowTest.java
Patch:
@@ -21,11 +21,11 @@
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JUnit4TestBase;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.CHROME;
 import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;

File: java/client/test/org/openqa/selenium/XPathElementFindingTest.java
Patch:
@@ -22,13 +22,13 @@
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.TestUtilities;
 
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 
 import java.util.List;

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -19,12 +19,12 @@
 package org.openqa.selenium.firefox;
 
 import static java.lang.Thread.sleep;
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.FIREFOX;

File: java/client/test/org/openqa/selenium/firefox/FirefoxProfileTest.java
Patch:
@@ -34,10 +34,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 
 public class FirefoxProfileTest {

File: java/client/test/org/openqa/selenium/htmlunit/ToStringTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.openqa.selenium.htmlunit;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
 
 import org.junit.Test;
 import org.openqa.selenium.By;

File: java/client/test/org/openqa/selenium/interactions/BasicKeyboardInterfaceTest.java
Patch:
@@ -17,14 +17,14 @@
 
 package org.openqa.selenium.interactions;
 
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.IE;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 
 import org.junit.Test;
@@ -60,7 +60,6 @@ public void testBasicKeyboardInput() {
     sendLowercase.perform();
 
     assertThat(keyReporter.getAttribute("value"), is("abc def"));
-
   }
 
   @JavascriptEnabled

File: java/client/test/org/openqa/selenium/lift/HamcrestWebdriverTestCaseTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.openqa.selenium.lift;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
 
 import org.openqa.selenium.testing.MockTestBase;
 import org.openqa.selenium.WebDriver;

File: java/client/test/org/openqa/selenium/lift/TestContextTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.openqa.selenium.lift;
 
+import static org.junit.Assert.assertThat;
 import static org.openqa.selenium.lift.Finders.first;
 import static org.openqa.selenium.lift.match.NumericalMatchers.atLeast;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.junit.Assert.fail;
 

File: java/client/test/org/openqa/selenium/lift/WebDriverTestContextTest.java
Patch:
@@ -17,9 +17,9 @@
 
 package org.openqa.selenium.lift;
 
+import static org.junit.Assert.assertThat;
 import static org.openqa.selenium.lift.match.NumericalMatchers.atLeast;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.junit.Assert.fail;
 

File: java/client/test/org/openqa/selenium/remote/BeanToJsonConverterTest.java
Patch:
@@ -45,12 +45,12 @@
 import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.containsString;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.not;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 

File: java/client/test/org/openqa/selenium/remote/JsonToBeanConverterTest.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.Map;
 import java.util.concurrent.TimeUnit;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.hasEntry;
 import static org.hamcrest.Matchers.instanceOf;
@@ -44,6 +43,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 

File: java/client/test/org/openqa/selenium/support/pagefactory/ByChainedTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.openqa.selenium.support.pagefactory;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
 import org.openqa.selenium.By;

File: java/client/test/org/openqa/selenium/support/pagefactory/DefaultFieldDecoratorTest.java
Patch:
@@ -17,10 +17,10 @@
 
 package org.openqa.selenium.support.pagefactory;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.core.Is.is;
 import static org.hamcrest.core.IsNull.notNullValue;
 import static org.hamcrest.core.IsNull.nullValue;
+import static org.junit.Assert.assertThat;
 
 import org.openqa.selenium.By;
 import org.openqa.selenium.HasInputDevices;

File: java/client/test/org/openqa/selenium/support/pagefactory/internal/LocatingElementListHandlerTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package org.openqa.selenium.support.pagefactory.internal;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
+import static org.junit.Assert.assertThat;
 
 import org.openqa.selenium.By;
 import org.openqa.selenium.testing.MockTestBase;

File: java/server/test/org/openqa/selenium/remote/server/CapabilitiesComparatorTest.java
Patch:
@@ -18,11 +18,11 @@
 package org.openqa.selenium.remote.server;
 
 import static com.google.common.collect.Lists.newArrayList;
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.number.OrderingComparisons.greaterThan;
 import static org.hamcrest.number.OrderingComparisons.lessThan;
+import static org.junit.Assert.assertThat;
 import static org.openqa.selenium.remote.server.CapabilitiesComparator.getBestMatch;
 
 import com.google.common.collect.Lists;

File: java/server/test/org/openqa/selenium/remote/server/rest/ResultConfigTest.java
Patch:
@@ -34,12 +34,12 @@
 
 import javax.servlet.http.HttpServletRequest;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
 import static org.hamcrest.Matchers.nullValue;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertThat;
 import static org.junit.Assert.fail;
 
 public class ResultConfigTest {

File: java/server/test/org/openqa/selenium/remote/server/rest/UrlMapperTest.java
Patch:
@@ -32,10 +32,10 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 import static org.hamcrest.Matchers.notNullValue;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 
 public class UrlMapperTest {
   private final static Logger log = Logger.getLogger(UrlMapperTest.class.getName());

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -316,7 +316,7 @@ private HttpResponse fallBackExecute(HttpContext context, HttpUriRequest httpMet
       try {
         Thread.sleep(2000);
       } catch (InterruptedException ie) {
-        throw Throwables.propagate(ie);
+        throw new SessionTerminatedException();
       }
     }
     return client.execute(targetHost, httpMethod, context);

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -428,6 +428,8 @@ protected Response execute(String driverCommand, Map<String, ?> parameters) {
       Object value = converter.apply(response.getValue());
       response.setValue(value);
       log(sessionId, command.getName(), command, When.AFTER);
+    } catch (SessionTerminatedException e){
+      throw new UnreachableBrowserException("Session was terminated by hanging browser detection", e);
     } catch (Exception e) {
       log(sessionId, command.getName(), command, When.EXCEPTION);
       String errorMessage = "Error communicating with the remote browser. " +

File: java/server/src/org/openqa/selenium/remote/server/DriverServlet.java
Patch:
@@ -183,8 +183,9 @@ public void init() throws ServletException {
     setupMappings(driverSessions, logger);
 
     int sessionTimeOut = Integer.parseInt(System.getProperty("webdriver.server.session.timeout", "1800"));
+    int browserTimeout = Integer.parseInt(System.getProperty("webdriver.server.browser.timeout", "0"));
     if (sessionTimeOut > 0) {
-      sessionCleaner = new SessionCleaner(driverSessions, logger, 1000 * sessionTimeOut);
+      sessionCleaner = new SessionCleaner(driverSessions, logger, 1000 * sessionTimeOut, 1000* browserTimeout);
       sessionCleaner.start();
     }
   }

File: android/src/org/openqa/selenium/android/server/handler/GetCapabilities.java
Patch:
@@ -49,6 +49,7 @@ protected Map<String, Object> describeSession(Map<String, Object> capabilities)
     caps.put(CapabilityType.SUPPORTS_ALERTS, true);
     caps.put(CapabilityType.SUPPORTS_JAVASCRIPT, true);
     caps.put(CapabilityType.VERSION, Build.VERSION.SDK);
+    caps.put(CapabilityType.ACCEPT_SSL_CERTS, true);
     return caps;
   }
 }

File: java/server/src/org/openqa/grid/web/servlet/DriverServlet.java
Patch:
@@ -86,6 +86,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
     } catch (Throwable e) {
       if (r instanceof WebDriverRequest) {
         // http://code.google.com/p/selenium/wiki/JsonWireProtocol#Error_Handling
+        response.reset();
         response.setContentType("application/json");
         response.setCharacterEncoding("UTF-8");
         response.setStatus(500);

File: java/client/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -27,7 +27,6 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 import static org.openqa.selenium.testing.Ignore.Driver.ANDROID;
-import static org.openqa.selenium.testing.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.testing.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.testing.Ignore.Driver.OPERA;
 import static org.openqa.selenium.testing.Ignore.Driver.SELENESE;
@@ -574,7 +573,6 @@ public void testAnElementFoundInADifferentFrameViaJsCanBeUsed() {
   }
 
   @Test
-  @Ignore(value = HTMLUNIT, reason = "HtmlUnitDriver doesn't support XHTML right now")
   public void findsByLinkTextOnXhtmlPage() {
     driver.get(appServer.whereIs("actualXhtmlPage.xhtml"));
     String linkText = "Foo";

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -42,11 +42,12 @@
 import com.google.common.base.Throwables;
 import org.junit.Assert;
 import org.junit.Test;
-import org.openqa.selenium.AbstractDriverTestCase;
+import org.junit.runner.RunWith;
 import org.openqa.selenium.By;
 import org.openqa.selenium.testing.DevMode;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.NeedsLocalEnvironment;
+import org.openqa.selenium.testing.SeleniumTestRunner;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.NeedsFreshDriver;
 import org.openqa.selenium.NoDriverAfterTest;
@@ -63,12 +64,11 @@
 import org.openqa.selenium.environment.GlobalTestEnvironment;
 import org.openqa.selenium.firefox.internal.ProfilesIni;
 import org.openqa.selenium.remote.UnreachableBrowserException;
-import org.openqa.selenium.remote.CapabilityType;
-import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.testing.drivers.SynthesizedFirefoxDriver;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;
 
 @NeedsLocalEnvironment(reason = "Requires local browser launching environment")
+@RunWith(SeleniumTestRunner.class)
 public class FirefoxDriverTest extends JUnit4TestBase {
   @Test
   public void shouldContinueToWorkIfUnableToFindElementById() {

File: java/client/test/org/openqa/selenium/firefox/FirefoxProfileTest.java
Patch:
@@ -25,14 +25,14 @@
 
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 import org.openqa.selenium.Proxy;
 import org.openqa.selenium.testing.InProject;
+import org.openqa.selenium.testing.SeleniumTestRunner;
 import org.openqa.selenium.io.FileHandler;
 import org.openqa.selenium.io.TemporaryFilesystem;
 import org.openqa.selenium.io.Zip;
 
-import junit.framework.TestCase;
-
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
@@ -42,6 +42,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+@RunWith(SeleniumTestRunner.class)
 public class FirefoxProfileTest {
 
   private static final String FIREBUG_PATH = "third_party/firebug/firebug-1.5.0-fx.xpi";

File: java/client/test/org/openqa/selenium/firefox/NativeEventsTest.java
Patch:
@@ -6,18 +6,20 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
-import org.openqa.selenium.AbstractDriverTestCase;
+import org.junit.runner.RunWith;
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.testing.JUnit4TestBase;
 import org.openqa.selenium.testing.NeedsLocalEnvironment;
+import org.openqa.selenium.testing.SeleniumTestRunner;
 
 /**
  * If native events are enabled, make sure they work.
  * 
  * @author eran.mes@gmail.com (Eran Mes)
  */
 @NeedsLocalEnvironment(reason = "Requires local browser launching environment")
+@RunWith(SeleniumTestRunner.class)
 public class NativeEventsTest extends JUnit4TestBase {
   private boolean testNativeEvents = false;
   private FirefoxDriver driver2;

File: java/client/test/org/openqa/selenium/firefox/PreferencesTest.java
Patch:
@@ -22,14 +22,15 @@
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
 
-import junit.framework.TestCase;
-
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.openqa.selenium.testing.SeleniumTestRunner;
 
 import java.io.Reader;
 import java.io.StringReader;
 
+@RunWith(SeleniumTestRunner.class)
 public class PreferencesTest {
 
   private static final String emptyDefaults = "{\"mutable\": {}, \"frozen\": {}}";

File: java/client/test/org/openqa/selenium/firefox/internal/ExecutableTest.java
Patch:
@@ -7,7 +7,6 @@
 import org.junit.runner.RunWith;
 import org.openqa.selenium.testing.NeedsLocalEnvironment;
 import org.openqa.selenium.testing.SeleniumTestRunner;
-import org.openqa.selenium.testing.drivers.SauceDriver;
 
 import java.io.File;
 

File: java/client/test/org/openqa/selenium/firefox/internal/SocketLockTest.java
Patch:
@@ -20,10 +20,12 @@
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
+import org.junit.runner.RunWith;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.internal.Lock;
 import org.openqa.selenium.internal.SocketLock;
 import org.openqa.selenium.net.PortProber;
+import org.openqa.selenium.testing.SeleniumTestRunner;
 
 import java.util.concurrent.TimeUnit;
 
@@ -32,6 +34,7 @@
  * 
  * @author gregory.block@gmail.com (Gregory Block)
  */
+@RunWith(SeleniumTestRunner.class)
 public class SocketLockTest {
   private int freePort;
 

File: java/client/test/org/openqa/selenium/firefox/internal/StreamsTest.java
Patch:
@@ -20,7 +20,10 @@
 import static org.junit.Assert.assertNull;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.openqa.selenium.testing.SeleniumTestRunner;
 
+@RunWith(SeleniumTestRunner.class)
 public class StreamsTest {
 
   @Test

File: java/client/test/org/openqa/selenium/ie/InternetExplorerDriverTest.java
Patch:
@@ -18,9 +18,12 @@
 package org.openqa.selenium.ie;
 
 import org.junit.Test;
+import org.junit.runner.RunWith;
 import org.openqa.selenium.testing.NeedsLocalEnvironment;
+import org.openqa.selenium.testing.SeleniumTestRunner;
 import org.openqa.selenium.WebDriver;
 
+@RunWith(SeleniumTestRunner.class)
 public class InternetExplorerDriverTest {
 
   @Test

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JavascriptEnabled;
+import org.openqa.selenium.testing.NeedsLocalEnvironment;
 import org.openqa.selenium.testing.TestUtilities;
 
 import static org.openqa.selenium.testing.Ignore.Driver.ALL;

File: java/client/test/org/openqa/selenium/ExecutingAsyncJavascriptTest.java
Patch:
@@ -15,6 +15,7 @@
 import org.junit.Test;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JavascriptEnabled;
+import org.openqa.selenium.testing.NeedsLocalEnvironment;
 
 import java.util.Iterator;
 import java.util.List;

File: java/client/test/org/openqa/selenium/ImplicitWaitTest.java
Patch:
@@ -29,6 +29,7 @@
 import org.junit.Test;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JavascriptEnabled;
+import org.openqa.selenium.testing.NeedsLocalEnvironment;
 
 import java.util.List;
 

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -36,6 +36,7 @@
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.JavascriptEnabled;
+import org.openqa.selenium.testing.NeedsLocalEnvironment;
 import org.openqa.selenium.testing.TestUtilities;
 import org.openqa.selenium.testing.drivers.SauceDriver;
 import org.openqa.selenium.testing.drivers.WebDriverBuilder;

File: java/client/test/org/openqa/selenium/TestSuiteBuilder.java
Patch:
@@ -29,6 +29,7 @@
 import org.openqa.selenium.testing.IgnoredTestCallback;
 import org.openqa.selenium.testing.InProject;
 import org.openqa.selenium.testing.JavascriptEnabled;
+import org.openqa.selenium.testing.NeedsLocalEnvironment;
 import org.openqa.selenium.testing.drivers.Browser;
 import org.openqa.selenium.testing.drivers.SauceDriver;
 import org.openqa.selenium.testing.drivers.TestIgnorance;

File: java/client/test/org/openqa/selenium/chrome/ChromeOptionsFunctionalTest.java
Patch:
@@ -22,9 +22,9 @@
 import org.junit.After;
 import org.junit.Test;
 import org.openqa.selenium.AbstractDriverTestCase;
-import org.openqa.selenium.NeedsLocalEnvironment;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.NeedsLocalEnvironment;
 
 /**
  * Functional tests for {@link ChromeOptions}.

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -46,9 +46,9 @@
 import org.openqa.selenium.By;
 import org.openqa.selenium.testing.DevMode;
 import org.openqa.selenium.testing.Ignore;
+import org.openqa.selenium.testing.NeedsLocalEnvironment;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.NeedsFreshDriver;
-import org.openqa.selenium.NeedsLocalEnvironment;
 import org.openqa.selenium.NoDriverAfterTest;
 import org.openqa.selenium.NoSuchElementException;
 import org.openqa.selenium.ParallelTestRunner;

File: java/client/test/org/openqa/selenium/firefox/NativeEventsTest.java
Patch:
@@ -7,10 +7,10 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.openqa.selenium.AbstractDriverTestCase;
-import org.openqa.selenium.NeedsLocalEnvironment;
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.testing.JUnit4TestBase;
+import org.openqa.selenium.testing.NeedsLocalEnvironment;
 
 /**
  * If native events are enabled, make sure they work.

File: java/client/test/org/openqa/selenium/firefox/internal/ExecutableTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import junit.framework.TestCase;
 import org.junit.Test;
-import org.openqa.selenium.NeedsLocalEnvironment;
+import org.openqa.selenium.testing.NeedsLocalEnvironment;
 
 import java.io.File;
 

File: java/client/test/org/openqa/selenium/testing/NeedsLocalEnvironment.java
Patch:
@@ -14,7 +14,7 @@
 limitations under the License.
  */
 
-package org.openqa.selenium;
+package org.openqa.selenium.testing;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;

File: java/client/test/org/openqa/selenium/testing/drivers/TestIgnorance.java
Patch:
@@ -20,10 +20,10 @@
 import com.google.common.collect.Sets;
 
 import org.junit.runners.model.FrameworkMethod;
-import org.openqa.selenium.NeedsLocalEnvironment;
 import org.openqa.selenium.testing.Ignore;
 import org.openqa.selenium.testing.IgnoreComparator;
 import org.openqa.selenium.testing.JavascriptEnabled;
+import org.openqa.selenium.testing.NeedsLocalEnvironment;
 
 import java.lang.reflect.AnnotatedElement;
 import java.util.Arrays;

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -129,7 +129,7 @@ public void shouldWaitUntilBrowserHasClosedProperly() throws Exception {
 
     driver.get(pages.formPage);
     WebElement textarea = driver.findElement(By.id("withText"));
-    String expectedText = "I like cheese\n\nIt's really nice";
+    String expectedText = "Example textI like cheese\n\nIt's really nice";
     textarea.sendKeys(expectedText);
     String seenText = textarea.getAttribute("value");
     assertThat(seenText, equalTo(expectedText));

File: java/client/test/org/openqa/selenium/testing/SeleniumTestRunner.java
Patch:
@@ -50,7 +50,7 @@ public SeleniumTestRunner(Class<?> klass) throws InitializationError {
 
     Browser browser = Browser.detect();
     if (browser == null && isInDevMode()) {
-      browser = Browser.none;
+      browser = Browser.ff;
     }
 
     ignorance = new TestIgnorance(browser);

File: java/server/src/org/openqa/grid/web/servlet/handler/RequestHandler.java
Patch:
@@ -84,6 +84,7 @@ public void forwardNewSessionRequestAndUpdateRegistry(TestSession session)
     try {
       String content = request.getNewSessionRequestedCapability(session);
       getRequest().setBody(content);
+      getRequest().setAttribute("Content-Length", content.length());
       session.forward(getRequest(), getResponse(), true);
     } catch (IOException e) {
       //log.warning("Error forwarding the request " + e.getMessage());

File: java/client/test/org/openqa/selenium/support/LargeTests.java
Patch:
@@ -16,11 +16,10 @@
  */
 package org.openqa.selenium.support;
 
-import org.openqa.selenium.support.pagefactory.UsingPageFactoryTest;
-import org.openqa.selenium.support.ui.SelectLargeTest;
-
 import org.junit.runner.RunWith;
 import org.junit.runners.Suite;
+import org.openqa.selenium.support.pagefactory.UsingPageFactoryTest;
+import org.openqa.selenium.support.ui.SelectLargeTest;
 
 @RunWith(Suite.class)
 @Suite.SuiteClasses({

File: java/client/test/org/openqa/selenium/support/SmallTests.java
Patch:
@@ -49,6 +49,7 @@
     PageFactoryTest.class,
     SelectTest.class,
     SlowLoadableComponentTest.class,
+    ThreadGuardTest.class,
     WebDriverWaitTest.class
 })
 public class SmallTests {}

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -310,7 +310,7 @@ public void updateUserPrefs(File userPrefs) {
     // If the user sets the home page, we should also start up there
     Object homePage = prefs.getPreference("browser.startup.homepage");
     if (homePage != null && homePage instanceof String) {
-      prefs.setPreference("startup.homepage_welcome_url", (String) homePage);
+      prefs.setPreference("startup.homepage_welcome_url", "");
     }
 
     if (!"about:blank".equals(prefs.getPreference("browser.startup.homepage"))) {

File: java/client/test/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -43,8 +43,8 @@ public static Test suite() throws Exception {
         .using(browser)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ChildrenFindingTest")
-        .method("testShouldBeAbleToFindAnElementByCssSelector")
+        .onlyRun("FirefoxDriverTest")
+        .method("testShouldAllowUserToSuccessfullyOverrideTheHomePage")
         .outputTestNames()
         .leaveRunning()
         ; // Yeah, this look strange :)

File: java/server/src/org/openqa/selenium/server/BrowserSessionFactory.java
Patch:
@@ -475,6 +475,7 @@ protected void removeIdleAvailableSessions() {
         BrowserSessionInfo info = iter.next();
         if (now - info.lastClosedAt > maxIdleSessionTime) {
           iter.remove();
+          shutdownBrowserAndClearSessionData(info);
         }
       }
     }

File: java/client/src/org/openqa/selenium/internal/Base64Encoder.java
Patch:
@@ -27,8 +27,6 @@
  * other Base64 tools to manipulate the data.</p>
  *
  * Original code from <a href="http://xstream.codehaus.org/">XStream</a>
- *
- * @author Joe Walnes
  */
 public class Base64Encoder {
 
@@ -94,4 +92,4 @@ private int mapCharToInt(Reader input) throws IOException {
         }
         return -1;
     }
-}
\ No newline at end of file
+}

File: java/client/src/org/openqa/selenium/io/TemporaryFilesystem.java
Patch:
@@ -26,8 +26,6 @@
 
 /**
  * A wrapper around temporary filesystem behaviour.
- *
- * @author gblock@google.com (Gregory Block)
  */
 public class TemporaryFilesystem {
 

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/Type.java
Patch:
@@ -65,6 +65,9 @@ protected Void handleSeleneseCommand(WebDriver driver, String locator, String va
     }
 
     if (!"input".equals(tagName.toLowerCase())) {
+      if (driver instanceof JavascriptExecutor) {
+        ((JavascriptExecutor) driver).executeScript("arguments[0].value = '';", element);
+      }
       element.sendKeys(valueToUse);
       return null;
     }

File: java/client/test/org/openqa/selenium/rc/SetProxyTest.java
Patch:
@@ -105,8 +105,7 @@ public void shouldAllowProxyToBeConfiguredAsAPac() throws IOException {
     if (!autoConfUrl.startsWith("file://")) {
       autoConfUrl = autoConfUrl.replace("file:/", "file://");
     }
-    System.out.println("autoConfUrl = " + autoConfUrl);
-    
+
     Proxy proxy = new Proxy();
     proxy.setProxyAutoconfigUrl(autoConfUrl);
 

File: java/client/test/org/openqa/selenium/ClickScrollingTest.java
Patch:
@@ -89,7 +89,6 @@ public void testShouldBeAbleToClickRadioButtonScrolledIntoView() {
     // If we don't throw, we're good
   }
   
-  @Ignore(value = ALL, issues = 3391)
   public void testShouldScrollOverflowElementsIfClickPointIsOutOfViewButElementIsInView() {
     driver.get(appServer.whereIs("scroll5.html"));
     driver.findElement(By.id("inner")).click();

File: java/server/src/org/openqa/grid/internal/utils/DefaultCapabilityMatcher.java
Patch:
@@ -36,7 +36,7 @@ public class DefaultCapabilityMatcher implements CapabilityMatcher {
   private static final String GRID_TOKEN = "_";
 
   // temporary fix to only check to most meaningful desiredCapability params
-  private static List<String> toConsider = new ArrayList<String>();
+  private final List<String> toConsider = new ArrayList<String>();
 
   public DefaultCapabilityMatcher() {
     toConsider.add(CapabilityType.PLATFORM);

File: java/client/test/org/openqa/selenium/testing/drivers/OutOfProcessSeleniumServer.java
Patch:
@@ -49,6 +49,9 @@ public void start() {
     baseUrl = String.format("http://%s:%d", localAddress, port);
 
     command = new CommandLine("java", "-jar", path, "-port", String.valueOf((port)), "-browserSideLog");
+    if (Boolean.getBoolean("webdriver.development")) {
+      command.copyOutputTo(System.err);
+    }
     command.executeAsync();
 
     try {

File: java/client/src/org/openqa/selenium/internal/selenesedriver/NewSession.java
Patch:
@@ -34,7 +34,7 @@ public Map<String, Object> apply(Selenium selenium, Map<String, ?> args) {
     selenium.start(getBrowserConfigurationOptions(capabilities));
 
     // Emulate behaviour of webdriver
-    selenium.useXpathLibrary("javascript-xpath");
+    selenium.useXpathLibrary("native");
     selenium.allowNativeXpath("true");
 
     Map<String, Object> seenCapabilities = new HashMap<String, Object>();

File: java/client/test/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -43,9 +43,8 @@ public static Test suite() throws Exception {
         .using(browser)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ExecutingJavascriptTest")
-        .method("testCanPassAMapAsAParameter")
-//        .method("testShouldBeAbleToCarryOnWorkingIfTheFrameIsDeletedFromUnderUs")
+        .onlyRun("ChildrenFindingTest")
+//        .method("testFindingElementsOnElementByXPathShouldFindTopLevelElements")
         .outputTestNames()
         .leaveRunning()
         ; // Yeah, this look strange :)

File: java/server/src/cybervillains/ca/CertificateCreator.java
Patch:
@@ -433,7 +433,7 @@ public static X509Certificate createTypicalMasterCert(final KeyPair keyPair)
     // Set validity period
     v3CertGen.setNotBefore(new Date(System.currentTimeMillis() - 12 /* months */*
         (1000L * 60 * 60 * 24 * 30)));
-    v3CertGen.setNotAfter(new Date(System.currentTimeMillis() + 48 /* months */*
+    v3CertGen.setNotAfter(new Date(System.currentTimeMillis() + 240 /* months */*
         (1000L * 60 * 60 * 24 * 30)));
 
     // Set signature algorithm & public key

File: java/client/src/org/openqa/selenium/UnhandledAlertException.java
Patch:
@@ -22,22 +22,22 @@
 
 public class UnhandledAlertException extends WebDriverException {
   
-  private final Alert locallyStoredAlert;
+  private final String alertText;
 
   public UnhandledAlertException(String commandName) {
     this(commandName, null);
   }
   
   public UnhandledAlertException(String commandName, String alertText) {
     super(commandName);
-    this.locallyStoredAlert = alertText == null ? null : new LocallyStoredAlert(alertText);
+    this.alertText = alertText;
   }
 
   /*
    * Returns null if alert text could not be retrieved.
    */
   public Alert getAlert() {
-    return this.locallyStoredAlert;
+    return new LocallyStoredAlert(alertText);
   }
   
   private static class LocallyStoredAlert implements Alert, Serializable {

File: java/client/src/org/openqa/selenium/remote/Response.java
Patch:
@@ -56,6 +56,6 @@ public String getSessionId() {
 
   @Override
   public String toString() {
-    return String.format("(%s %s: %s)", getSessionId(), getStatus(), getValue());
+    return String.format("(Response: SessionID: %s, Status: %s, Value: %s)", getSessionId(), getStatus(), getValue());
   }
 }

File: java/client/test/org/openqa/selenium/AlertsTest.java
Patch:
@@ -360,6 +360,7 @@ public void testShouldHandleAlertOnWindowClose() {
   @Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SELENESE})
   public void testIncludesAlertInUnhandledAlertException() {
     driver.findElement(By.id("alert")).click();
+    waitFor(alertToBePresent(driver));
     try {
       driver.getTitle();
       fail("Expected UnhandledAlertException");

File: java/client/src/org/openqa/selenium/Proxy.java
Patch:
@@ -41,7 +41,7 @@ public Proxy() {
 
   public Proxy(Map<String, ?> raw) {
     if (raw.containsKey("proxyType") && raw.get("proxyType") != null) {
-      setProxyType(ProxyType.valueOf((String) raw.get("proxyType")));
+      setProxyType(ProxyType.valueOf(((String) raw.get("proxyType")).toUpperCase()));
     }
     if (raw.containsKey("ftpProxy") && raw.get("ftpProxy") != null) {
       setFtpProxy((String) raw.get("ftpProxy"));

File: java/client/test/com/thoughtworks/selenium/StartTest.java
Patch:
@@ -15,7 +15,6 @@
 limitations under the License.
 */
 
-
 package com.thoughtworks.selenium;
 
 import static org.junit.Assert.assertEquals;
@@ -66,7 +65,6 @@ public void shouldBeAbleToPassCapabilitiesWithoutDetonating() {
   }
   
   @Test
-  @Ignore
   public void shouldBeAbleToCreateAWebDriverBackedSeleniumInstance() throws MalformedURLException {
     URL wdServer = new URL(String.format("http://%s:%d/wd/hub", url.getHost(), url.getPort()));
     WebDriver driver = new RemoteWebDriver(wdServer, DesiredCapabilities.firefox());
@@ -85,7 +83,8 @@ public void shouldBeAbleToCreateAWebDriverBackedSeleniumInstance() throws Malfor
       assertEquals(title, seleniumTitle);
     } finally {
       selenium.stop();
-      driver.quit();
+      // This isn't handled elegantly yet
+//      driver.quit();
     }
   }
 }

File: java/server/src/org/openqa/selenium/remote/server/handler/WebDriverHandler.java
Patch:
@@ -77,7 +77,7 @@ protected Response newResponse() {
   }
 
   protected SessionId getRealSessionId() {
-    return session.getSessionId();
+    return session == null ? new SessionId("unknown") : session.getSessionId();
   }
 
   protected BySelector newBySelector() {

File: java/client/src/org/openqa/selenium/WebDriver.java
Patch:
@@ -119,11 +119,12 @@ public interface WebDriver extends SearchContext {
 
   /**
    * Get the source of the last loaded page. If the page has been modified after loading (for
-   * example, by Javascript) there is no guarentee that the returned text is that of the modified
+   * example, by Javascript) there is no guarantee that the returned text is that of the modified
    * page. Please consult the documentation of the particular driver being used to determine whether
    * the returned text reflects the current state of the page or the text last sent by the web
    * server. The page source returned is a representation of the underlying DOM: do not expect it to
-   * be formatted or escaped in the same way as the response sent from the web server.
+   * be formatted or escaped in the same way as the response sent from the web server. Think of it as
+   * an artist's impression.
    * 
    * @return The source of the current page
    */

File: java/client/src/org/openqa/selenium/support/ThreadGuard.java
Patch:
@@ -32,7 +32,9 @@
  *
  * Wrap WebDriver instances as follows:
  *
- *      WebDriver driver = ThreadGuard.protect(new FirefoxDriver());
+ * <pre class="code">
+ * WebDriver driver = ThreadGuard.protect(new FirefoxDriver());
+ * </pre>
  *
  * Threading issues related to incorrect client threading may have mysterious and hard to diagnose
  * errors. Using this wrapper prevents this category of errors. It is recommended for all

File: android/src/org/openqa/selenium/android/AndroidDriver.java
Patch:
@@ -35,13 +35,12 @@
 import org.openqa.selenium.Rotatable;
 import org.openqa.selenium.TakesScreenshot;
 import org.openqa.selenium.android.app.MainActivity;
-import org.openqa.selenium.logging.Logs;
 
 import java.util.List;
 import java.util.Set;
 
 public class AndroidDriver implements BrowserConnection, HasTouchScreen, JavascriptExecutor,
-    LocationContext, Rotatable, TakesScreenshot, WebDriver, WebStorage{
+    LocationContext, Rotatable, TakesScreenshot, WebDriver, WebStorage {
 
   private AndroidWebDriver driver;
 

File: java/client/src/org/openqa/selenium/remote/html5/RemoteLocationContext.java
Patch:
@@ -33,7 +33,9 @@ public RemoteLocationContext(ExecuteMethod executeMethod) {
   }
   
   public Location location() {
-    return (Location) executeMethod.execute(DriverCommand.GET_LOCATION, null);
+    Map<String, Double> result = (Map<String, Double>) executeMethod.execute(
+        DriverCommand.GET_LOCATION, null);
+    return new Location(result.get("latitude"), result.get("longitude"), result.get("altitude"));
   }
 
   public void setLocation (Location location) {

File: java/client/src/org/openqa/selenium/os/CommandLine.java
Patch:
@@ -43,7 +43,7 @@ public CommandLine(String[] cmdarray) {
     String executable = cmdarray[0];
     int length = cmdarray.length - 1;
     String[] args = new String[length];
-    System.arraycopy(cmdarray, 1, args, 0, length - 1);
+    System.arraycopy(cmdarray, 1, args, 0, length);
 
     process = new UnixProcess(executable, args);
   }

File: java/client/src/org/openqa/selenium/os/UnixProcess.java
Patch:
@@ -155,7 +155,7 @@ public void setInput(String allInput) {
 
   @Override
   public String toString() {
-    return cl.toString();
+    return cl.toString() + "[ " + env + "]";
   }
 
   public void copyOutputTo(OutputStream out) {

File: java/client/test/org/openqa/selenium/v1/SeleniumTestEnvironment.java
Patch:
@@ -55,7 +55,9 @@ public SeleniumTestEnvironment(int port, String... extraArgs) {
           InProject
               .locate("build/java/server/test/org/openqa/selenium/server-with-tests-standalone.jar");
       final String singlewindow = Boolean.getBoolean("singlewindow") ? "-singleWindow" : "";
-      String[] args = {"-jar", seleniumJar.getAbsolutePath(), "-port", "" + port, singlewindow};
+      final String browserSideLog = Boolean.getBoolean("webdriver.debug") ? "-browserSideLog" : "";
+      String[] args = {"-jar", seleniumJar.getAbsolutePath(),
+          "-port", "" + port, singlewindow, browserSideLog};
       if (extraArgs != null) {
         String[] allArgs = new String[args.length + extraArgs.length];
         System.arraycopy(args, 0, allArgs, 0, args.length);

File: java/client/test/org/openqa/selenium/I18nTest.java
Patch:
@@ -92,7 +92,7 @@ public void testShouldBeAbleToReturnTheTextInAPage() {
   }
 
   @NeedsFreshDriver
-  @Ignore(value = {IE, SELENESE, CHROME, HTMLUNIT, FIREFOX, OPERA, ANDROID},
+  @Ignore(value = {IE, SELENESE, CHROME, HTMLUNIT, FIREFOX, OPERA, ANDROID, IPHONE},
       reason = "Not implemented on anything other than"
           + "Firefox/Linux at the moment.")
   public void testShouldBeAbleToActivateIMEEngine() throws InterruptedException {
@@ -153,7 +153,7 @@ public void testShouldBeAbleToActivateIMEEngine() throws InterruptedException {
         + " It was:" + elementValue, elementValue.equals(tokyo));
   }
 
-  @Ignore(value = {IE, SELENESE, CHROME, HTMLUNIT, OPERA, ANDROID},
+  @Ignore(value = {IE, SELENESE, CHROME, HTMLUNIT, OPERA, ANDROID, IPHONE},
       reason = "Not implemented on anything other than"
           + "Firefox/Linux at the moment.")
   public void testShouldBeAbleToInputJapanese() {

File: java/client/test/org/openqa/selenium/iphone/IPhoneDriverTestSuite.java
Patch:
@@ -23,6 +23,7 @@
 import junit.framework.TestSuite;
 
 import org.openqa.selenium.Capabilities;
+import org.openqa.selenium.FrameSwitchingTest;
 import org.openqa.selenium.TestSuiteBuilder;
 import org.openqa.selenium.testing.InProject;
 import org.openqa.selenium.testing.drivers.Browser;

File: java/client/test/org/openqa/selenium/iphone/IPhoneSimulatorCommandExecutorTest.java
Patch:
@@ -27,13 +27,15 @@
 import org.openqa.selenium.AbstractDriverTestCase;
 import org.openqa.selenium.NoDriverAfterTest;
 import org.openqa.selenium.io.FileHandler;
+import org.openqa.selenium.testing.Ignore;
 
 /**
  * @author jmleyba@gmail.com (Jason Leyba)
  * @author dawagner@gmail.com (Daniel Wagner-Hall)
  */
 
 public class IPhoneSimulatorCommandExecutorTest extends AbstractDriverTestCase {
+  @Ignore
   @NoDriverAfterTest
   public void testShouldDetectThatTheIPhoneSimulatorHasUnexpectedlyShutdown() throws Exception {
     if (!(driver instanceof IPhoneSimulatorDriver)) {

File: java/client/src/org/openqa/selenium/android/library/WebDriverChromeClient.java
Patch:
@@ -39,7 +39,7 @@ public WebDriverChromeClient(AndroidWebDriver driver) {
   public void onCloseWindow(Object window) {
     // Dispose of unhandled alerts, if any.
     AlertManager.removeAlertForView(getViewAdapterFor(window));
-    driver.getViewManager().removeView(window);
+    driver.getViewManager().removeView(getViewAdapterFor(window));
   }
 
   

File: java/client/src/org/openqa/selenium/android/library/WebDriverChromeClient.java
Patch:
@@ -43,8 +43,8 @@ public void onCloseWindow(Object window) {
   }
 
   
-  public void onCreateWindow(Object newView) {
-    driver.getViewManager().addView(getViewAdapterFor(newView));
+  public void onCreateWindow(ViewAdapter newView) {
+    driver.getViewManager().addView(newView);
   }
 
   public void onProgressChanged(Object view, int newProgress) {

File: java/client/src/org/openqa/selenium/android/library/AndroidWebDriver.java
Patch:
@@ -354,9 +354,7 @@ public void run() {
           final ViewAdapter newView = wdview.create();
           view = newView;
           viewManager.addView(view);
-          if (view.getUnderlyingView() instanceof View) {
-            activity.setContentView((View) view.getUnderlyingView());
-          }
+          activity.setContentView((View) view.getUnderlyingView());
           done = true;
           syncObject.notify();
         }

File: java/client/src/org/openqa/selenium/android/library/ChromeClientWrapper.java
Patch:
@@ -57,7 +57,8 @@ public class ChromeClientWrapper {
    * @param className the fully qualified class name of the client's class.
    * @param client the client to use. Typically this client will be a
    *     WebChromeClient (or extend the latter). if not this client must have
-   *     the same API methods as WebChromeClient.
+   *     the same API methods as WebChromeClient. Additionally this chrome
+   *     client must implement the DriverProvider and ViewProvider interfaces.
    */
   public ChromeClientWrapper(String className, Object client) {
     this.className = className;

File: java/client/src/org/openqa/selenium/android/library/DefaultViewClient.java
Patch:
@@ -33,7 +33,7 @@
  * This class overrides WebView default behavior when loading new URL. It makes sure that the URL
  * is always loaded by the WebView.
  */
-class DefaultViewClient extends WebViewClient {
+class DefaultViewClient extends WebViewClient implements DriverProvider {
   private final WebViewClient delegate;
   private WebDriverViewClient wdViewClient;
 
@@ -59,7 +59,7 @@ public DefaultViewClient(WebViewClient client) {
     }
   }
 
-  /* package */ void setDriver(AndroidWebDriver driver) {
+  public void setDriver(AndroidWebDriver driver) {
     this.wdViewClient = new WebDriverViewClient(driver);
   }
   

File: java/client/src/org/openqa/selenium/android/library/ViewAdapter.java
Patch:
@@ -174,7 +174,7 @@ public void setWebViewClient(ViewClientWrapper client) {
   public void setOnFocusChangeListener(View.OnFocusChangeListener l) {
     Class[] argsType = {View.OnFocusChangeListener.class};
     Object[] args = {l};
-    invoke(view, "setNetworkAvailable", argsType, args);
+    invoke(view, "setOnFocusChangeListener", argsType, args);
   }
 
   public void addJavascriptInterface(Object obj, String interfaceName) {

File: java/client/src/org/openqa/selenium/android/library/ViewClientWrapper.java
Patch:
@@ -49,7 +49,8 @@ public class ViewClientWrapper {
    *     class name.
    * @param client the client to use. Typically this client will be a
    *     WebViewClient (or extend the latter). If not this client must have
-   *     the same API as WebViewClient.
+   *     the same API as WebViewClient. Additionally this client view must
+   *     implement the DriverProvider interface.
    */
   public ViewClientWrapper(String className, Object client) {
     this.className = className;

File: java/client/test/org/openqa/selenium/internal/IgnoreCollector.java
Patch:
@@ -15,7 +15,9 @@ public class IgnoreCollector implements IgnoredTestCallback {
 
   public void callback(Class clazz, String testName, Ignore ignore) {
     for (String name : getTestMethodsFor(clazz, testName)) {
-      tests.add(IgnoredTestCase.asMap(clazz.getName(), name, ignore));
+      if (ignore != null) {
+        tests.add(IgnoredTestCase.asMap(clazz.getName(), name, ignore));
+      }
     }
   }
 

File: java/client/test/org/openqa/selenium/os/WindowsUtilsUnitTest.java
Patch:
@@ -53,13 +53,13 @@ public void testLoadEnvironment() {
   public void testWMIC() {
     if (!WindowsUtils.thisIsWindows()) return;
     if (!isXpOrHigher()) return;
-    assertTrue("wmic should be found", "wmic" != WindowsUtils.findWMIC());
+    assertFalse("wmic should be found", "wmic".equals(WindowsUtils.findWMIC()));
   }
 
   public void testTaskKill() {
     if (!WindowsUtils.thisIsWindows()) return;
     if (!isXpOrHigher()) return;
-    assertTrue("taskkill should be found", "taskkill" != WindowsUtils.findTaskKill());
+    assertFalse("taskkill should be found", "taskkill".equals(WindowsUtils.findTaskKill()));
   }
 
   public void testRegistry() {

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -432,7 +432,7 @@ public String getAttribute(String name) {
         return ((HtmlTextArea) element).getText();
       }
 
-      return value == null ? "" : value;
+      return value == null || "".equals(value) ? element.getTextContent() : value;
     }
 
     if (!"".equals(value)) {

File: android/src/org/openqa/selenium/android/app/MainActivity.java
Patch:
@@ -31,9 +31,9 @@
 import org.openqa.selenium.android.library.Logger;
 import org.openqa.selenium.android.server.JettyService;
 import org.openqa.selenium.logging.LoggingPreferences;
+import org.openqa.selenium.logging.LoggingHandler;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
-import org.openqa.selenium.remote.server.LoggingHandler;
 
 /**
  * Main application activity.

File: java/client/src/org/openqa/selenium/chrome/ChromeOptions.java
Patch:
@@ -180,7 +180,7 @@ DesiredCapabilities toCapabilities() {
     // TODO: remove this once the deprecated capabilities are no longer supported.
     capabilities.setCapability("chrome.switches", args);
     if (binary != null) {
-      capabilities.setCapability("chrome.binary", binary);
+      capabilities.setCapability("chrome.binary", binary.getPath());
     }
 
     return capabilities;

File: java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java
Patch:
@@ -125,7 +125,7 @@ private List<Object> convertJsonArray(JSONArray jsonArray) {
 
   @SuppressWarnings({"unchecked"})
   private Object convertObject(Object toConvert, int maxDepth) throws Exception {
-    if (toConvert == null)
+    if (toConvert == null || maxDepth == 0)
       return JSONObject.NULL;
 
     if (toConvert instanceof Boolean ||

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -93,7 +93,9 @@ public class FirefoxProfile {
           .put("security.warn_viewing_mixed.show_once", false)
           .put("signon.rememberSignons", false)
           .put("toolkit.networkmanager.disable", true)
-          .put("toolkit.telemetry.prompted", true)
+          .put("toolkit.telemetry.prompted", 2)
+          .put("toolkit.telemetry.enabled", false)
+          .put("toolkit.telemetry.rejected", true)
           .build();
 
   /**

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -93,7 +93,7 @@ public class FirefoxProfile {
           .put("security.warn_viewing_mixed.show_once", false)
           .put("signon.rememberSignons", false)
           .put("toolkit.networkmanager.disable", true)
-          .put("toolkit.telemetry.prompted", 2)
+          .put("toolkit.telemetry.prompted", true)
           .build();
 
   /**

File: java/client/test/org/openqa/selenium/firefox/NativeEventsFirefoxDriverTestSuite.java
Patch:
@@ -31,7 +31,7 @@ public static Test suite() throws Exception {
       return new TestSuite();
     }
 
-    System.setProperty("selenium.browser.native", "true");
+    System.setProperty("selenium.browser.native_events", "true");
 
     return new TestSuiteBuilder()
         .addSourceDir("java/client/test")

File: java/client/test/org/openqa/selenium/firefox/SynthesizedFirefoxDriverTestSuite.java
Patch:
@@ -30,7 +30,7 @@ public static Test suite() throws Exception {
       return new TestSuite();
     }
 
-    System.setProperty("selenium.browser.native", "false");
+    System.setProperty("selenium.browser.native_events", "false");
 
     return new TestSuiteBuilder()
         .addSourceDir("java/client/test")

File: java/client/test/org/openqa/selenium/testing/drivers/ReflectionBackedDriverSupplier.java
Patch:
@@ -52,9 +52,9 @@ public WebDriver get() {
 
       if (DesiredCapabilities.firefox().getBrowserName().equals(toUse.getBrowserName())) {
         FirefoxProfile profile = new FirefoxProfile();
-        boolean enableEvents = Boolean.getBoolean("selenium.browser.native") ||
+        boolean enableNativeEvents = Boolean.getBoolean("selenium.browser.native_events") ||
                                Platform.getCurrent().is( WINDOWS);
-        profile.setPreference("webdriver_enable_native_events", enableEvents);
+        profile.setEnableNativeEvents(enableNativeEvents);
         toUse.setCapability(FirefoxDriver.PROFILE, profile);
       }
 

File: java/client/src/org/openqa/selenium/WebElement.java
Patch:
@@ -79,7 +79,7 @@ public interface WebElement extends SearchContext {
    * of the property with the same name is returned. If neither value is set, null is returned. The
    * "style" attribute is converted as best can be to a text representation with a trailing
    * semi-colon. The following are deemed to be "boolean" attributes, and will return either "true"
-   * or "false":
+   * or null:
    * 
    * async, autofocus, autoplay, checked, compact, complete, controls, declare, defaultchecked,
    * defaultselected, defer, disabled, draggable, ended, formnovalidate, hidden, indeterminate,

File: java/server/src/org/openqa/grid/web/servlet/ConsoleServlet.java
Patch:
@@ -208,7 +208,7 @@ private String prettyHtmlPrint(GridHubConfiguration config) {
 
     b.append(key("host")).append(config.getHost()).append("</br>");
     b.append(key("port")).append(config.getPort()).append("</br>");
-    b.append(key("cleanupCycle")).append(config.getCleanupCycle()).append("</br>");
+    b.append(key("cleanUpCycle")).append(config.getCleanupCycle()).append("</br>");
     b.append(key("timeout")).append(config.getTimeout()).append("</br>");
 
     b.append(key("newSessionWaitTimeout")).append(config.getNewSessionWaitTimeout())

File: java/server/src/org/openqa/grid/web/servlet/beta/ConsoleServlet.java
Patch:
@@ -254,7 +254,7 @@ private String prettyHtmlPrint(GridHubConfiguration config) {
 
     b.append(key("host")).append(config.getHost()).append("</br>");
     b.append(key("port")).append(config.getPort()).append("</br>");
-    b.append(key("cleanupCycle")).append(config.getCleanupCycle()).append("</br>");
+    b.append(key("cleanUpCycle")).append(config.getCleanupCycle()).append("</br>");
     b.append(key("timeout")).append(config.getTimeout()).append("</br>");
 
     b.append(key("newSessionWaitTimeout")).append(config.getNewSessionWaitTimeout())

File: java/client/test/org/openqa/selenium/testing/drivers/ReflectionBackedDriverSupplier.java
Patch:
@@ -72,7 +72,7 @@ private Class<? extends WebDriver> mapToClass(Capabilities caps) {
     if (DesiredCapabilities.android().getBrowserName().equals(name)) {
       className = "org.openqa.selenium.android.AndroidDriver";
     } else if (DesiredCapabilities.chrome().getBrowserName().equals(name)) {
-      className = "org.openqa.selenium.chrome.ChromeDriver";
+      className = "org.openqa.selenium.testing.drivers.TestChromeDriver";
     } else if (DesiredCapabilities.firefox().getBrowserName().equals(name)) {
       className = getFirefoxClassName();
     } else if (DesiredCapabilities.htmlUnit().getBrowserName().equals(name)) {

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -226,7 +226,7 @@ static BrowserVersion determineBrowserVersion(Capabilities capabilities) {
     }
 
     if ("firefox".equals(browserName)) {
-      return BrowserVersion.FIREFOX_3;
+      return BrowserVersion.FIREFOX_3_6;
     }
 
     if ("internet explorer".equals(browserName)) {

File: java/client/test/org/openqa/selenium/htmlunit/HtmlUnitCapabilitiesTest.java
Patch:
@@ -44,15 +44,15 @@ public void testConfigurationViaDirectCapabilities() {
         new DesiredCapabilities("firefox", "", Platform.ANY);
 
     assertEquals(HtmlUnitDriver.determineBrowserVersion(firefoxCapabilities),
-        BrowserVersion.FIREFOX_3);
+        BrowserVersion.FIREFOX_3_6);
   }
 
   public void testConfigurationOfFirefoxViaRemote() {
     DesiredCapabilities firefoxCapabilities =
         new DesiredCapabilities("htmlunit", "firefox", Platform.ANY);
 
     assertEquals(HtmlUnitDriver.determineBrowserVersion(firefoxCapabilities),
-        BrowserVersion.FIREFOX_3);
+        BrowserVersion.FIREFOX_3_6);
   }
 
   public void testConfigurationOfIEViaRemote() {

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -664,8 +664,8 @@ public void testShouldBeAbleToTypeOnAnEmailInputField() {
     assertThat(email.getAttribute("value"), equalTo("foobar"));
   }
 
-  @Ignore(value = {ANDROID, CHROME, HTMLUNIT, IE, IPHONE, OPERA, SELENESE},
-        reason = "Untested browsers.")
+  @Ignore(value = {ANDROID, CHROME, FIREFOX, HTMLUNIT, IE, IPHONE, OPERA, SELENESE},
+        reason = "Untested browsers.", issues = {3127})
   public void testShouldBeAbleToTypeIntoEmptyContentEditableElement() {
     driver.get(pages.readOnlyPage);
     WebElement editable = driver.findElement(By.id("content-editable"));

File: java/client/test/org/openqa/selenium/support/pagefactory/UsingPageFactoryTest.java
Patch:
@@ -56,7 +56,7 @@ public void canListDecoratedElements() {
     Page page = new Page();
     PageFactory.initElements(driver, page);
 
-    assertThat(page.divs.size(), equalTo(12));
+    assertThat(page.divs.size(), equalTo(13));
     for (WebElement link : page.divs) {
       assertThat(link.getTagName(), equalTo("div"));
     }

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -78,6 +78,7 @@ public class FirefoxProfile {
           .put("network.manage-offline-status", false)
           .put("network.http.max-connections-per-server", 10)
           .put("network.http.phishy-userpass-length", 255)
+          .put("offline-apps.allow_by_default", true)
           .put("prompts.tab_modal.enabled", false)
           .put("security.fileuri.origin_policy", 3)
           .put("security.fileuri.strict_origin_policy", false)

File: java/client/test/org/openqa/selenium/testing/JUnit4TestBase.java
Patch:
@@ -43,7 +43,7 @@ public void createDriver() throws Exception {
       return;
     }
 
-    new WebDriverBuilder().get();
+    driver = new WebDriverBuilder().get();
   }
 
   @Before

File: java/client/test/org/openqa/selenium/support/PageFactoryTest.java
Patch:
@@ -127,12 +127,12 @@ public Object decorate(ClassLoader loader, Field field) {
   }
 
   @Test
-  public void shouldDecorateListsOfWebElementsThatAreNotAnnotated() {
+  public void shouldNotDecorateListsOfWebElementsThatAreNotAnnotated() {
     UnmarkedListPage page = new UnmarkedListPage();
 
     PageFactory.initElements(driver, page);
 
-    assertThat(page.elements, is(notNullValue()));
+    assertThat(page.elements, is(nullValue()));
   }
 
   @Test

File: java/client/src/org/openqa/selenium/chrome/FatalChromeException.java
Patch:
@@ -5,6 +5,6 @@
 public class FatalChromeException extends WebDriverException {
 
   FatalChromeException(Throwable cause) {
-    super("The chromedriver server has unexpected died!", cause);
+    super("The chromedriver server has unexpectedly died!", cause);
   }
 }

File: java/client/test/org/openqa/selenium/chrome/ChromeDriverTestSuite.java
Patch:
@@ -50,6 +50,7 @@ public static Test suite() throws Exception {
         .includeJavascriptTests()
         .keepDriverInstance()
         .restrictToPackage("org.openqa.selenium")
+        .restrictToPackage("org.openqa.selenium.chrome")
         .create();
 
     TestSuite suite = new TestSuite();

File: java/client/src/org/openqa/selenium/SeleneseCommandExecutor.java
Patch:
@@ -37,6 +37,7 @@
 import static org.openqa.selenium.remote.DriverCommand.GET_PAGE_SOURCE;
 import static org.openqa.selenium.remote.DriverCommand.GET_TITLE;
 import static org.openqa.selenium.remote.DriverCommand.IMPLICITLY_WAIT;
+import static org.openqa.selenium.remote.DriverCommand.IMPLICITLY_WAIT_FOR_ALERTS;
 import static org.openqa.selenium.remote.DriverCommand.IS_ELEMENT_DISPLAYED;
 import static org.openqa.selenium.remote.DriverCommand.IS_ELEMENT_ENABLED;
 import static org.openqa.selenium.remote.DriverCommand.IS_ELEMENT_SELECTED;
@@ -178,6 +179,7 @@ private void prepareCommands() {
     addCommand(FIND_ELEMENT, findElement);
     addCommand(FIND_ELEMENTS, findElements);
     addCommand(IMPLICITLY_WAIT, timeouts);
+    addCommand(IMPLICITLY_WAIT_FOR_ALERTS, timeouts);
     addCommand(GET, new GetUrl());
     addCommand(GET_ACTIVE_ELEMENT, new GetActiveElement());
     addCommand(GET_ELEMENT_ATTRIBUTE, new GetElementAttribute());

File: java/client/src/org/openqa/selenium/remote/DriverCommand.java
Patch:
@@ -95,6 +95,7 @@ public interface DriverCommand {
   String SET_ALERT_VALUE = "setAlertValue";
 
   String IMPLICITLY_WAIT = "implicitlyWait";
+  String IMPLICITLY_WAIT_FOR_ALERTS = "implicitlyWaitForAlerts";
   String SET_SCRIPT_TIMEOUT = "setScriptTimeout";
 
   String EXECUTE_SQL = "executeSQL";

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -117,6 +117,7 @@
 import static org.openqa.selenium.remote.DriverCommand.IME_GET_AVAILABLE_ENGINES;
 import static org.openqa.selenium.remote.DriverCommand.IME_IS_ACTIVATED;
 import static org.openqa.selenium.remote.DriverCommand.IMPLICITLY_WAIT;
+import static org.openqa.selenium.remote.DriverCommand.IMPLICITLY_WAIT_FOR_ALERTS;
 import static org.openqa.selenium.remote.DriverCommand.IS_BROWSER_ONLINE;
 import static org.openqa.selenium.remote.DriverCommand.IS_BROWSER_VISIBLE;
 import static org.openqa.selenium.remote.DriverCommand.IS_ELEMENT_DISPLAYED;
@@ -291,6 +292,7 @@ public HttpCommandExecutor(URL addressOfRemoteServer) {
         .put(GET_ELEMENT_VALUE_OF_CSS_PROPERTY,
              get("/session/:sessionId/element/:id/css/:propertyName"))
         .put(IMPLICITLY_WAIT, post("/session/:sessionId/timeouts/implicit_wait"))
+        .put(IMPLICITLY_WAIT_FOR_ALERTS, post("/session/:sessionId/timeouts/implicit_wait_for_alerts"))
         .put(SET_SCRIPT_TIMEOUT, post("/session/:sessionId/timeouts/async_script"))
         .put(EXECUTE_SQL, post("/session/:sessionId/execute_sql"))
         .put(GET_LOCATION, get("/session/:sessionId/location"))

File: java/client/src/org/openqa/selenium/remote/JsonException.java
Patch:
@@ -25,4 +25,7 @@ public class JsonException extends WebDriverException {
   public JsonException(JSONException e) {
     super(e);
   }
+  public JsonException(JSONException e, Object text) {
+    super("JSON command: " + text, e);
+  }
 }

File: java/client/src/org/openqa/selenium/remote/JsonToBeanConverter.java
Patch:
@@ -42,7 +42,7 @@ public <T> T convert(Class<T> clazz, Object text) throws JsonException {
     try {
       return convert(clazz, text, 0);
     } catch (JSONException e) {
-      throw new JsonException(e);
+      throw new JsonException(e, text);
     }
   }
 

File: java/client/test/org/openqa/selenium/WindowTest.java
Patch:
@@ -24,6 +24,7 @@
 import static org.openqa.selenium.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
+import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
@@ -52,6 +53,7 @@ public void testSetsTheSizeOfTheCurrentWindow() {
     assertEquals(targetSize.height, newSize.height);
   }
 
+  @Ignore(IE)
   public void testGetsThePositionOfTheCurrentWindow() {
     Point position = driver.manage().window().getPosition();
 

File: java/client/test/com/thoughtworks/selenium/corebased/TestType.java
Patch:
@@ -22,6 +22,7 @@ public void testType() throws Exception {
     verifyEquals(selenium.getValue("password"), "testUserPasswordIsVe");
     selenium.type("password", "testUserPassword");
     verifyEquals(selenium.getValue("password"), "testUserPassword");
+    selenium.type("file", "/test/file");
     selenium.click("submitButton");
     selenium.waitForPageToLoad("30000");
     verifyTrue(selenium.isTextPresent("Welcome, TestUser!"));

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -427,8 +427,10 @@ public void testShouldBeAbleToGrabTheBodyOfFrameOnceSwitchedTo() {
     driver.switchTo().frame("editFrame");
     WebElement body =
         (WebElement) ((JavascriptExecutor) driver).executeScript("return document.body");
+    String text = body.getText();
+    driver.switchTo().defaultContent();
 
-    assertEquals("", body.getText());
+    assertEquals("", text);
   }
 
   @JavascriptEnabled

File: java/client/src/org/openqa/selenium/net/PortProber.java
Patch:
@@ -98,6 +98,9 @@ private static int createAcceptablePort() {
       if (FIRST_PORT == LAST_PORT) {
         return FIRST_PORT;
       }
+      if (FIRST_PORT > LAST_PORT) {
+        throw new UnsupportedOperationException("Could not find ephemeral port to use");
+      }
       final int randomInt = random.nextInt();
       final int portWithoutOffset = Math.abs(randomInt % (LAST_PORT - FIRST_PORT + 1));
       return portWithoutOffset + FIRST_PORT;

File: java/client/src/org/openqa/selenium/remote/ErrorHandler.java
Patch:
@@ -132,7 +132,7 @@ public Response throwIfResponseFailed(Response response, long duration) throws R
   }
 
   private String duration(long duration) {
-    String prefix = "; duration or timeout: ";
+    String prefix = "\nCommand duration or timeout: ";
     if (duration < 1000) {
       return prefix + duration + " milliseconds";
     }

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -215,7 +215,7 @@ public int getConfigAsInt(String param, int defaultValue) {
   * generate the "remoteHost" out of it.
   */
 
-  // TODO freynaud : remove that when 2.9- nodes are history.
+  // TODO freynaud : remove that when <= v2.9 nodes are history.
 
   private void ensureBackwardCompatibility() {
     // new param after 2.9
@@ -232,7 +232,7 @@ private void ensureBackwardCompatibility() {
         // was a legacy RC node. Needs to set that on the capabilities, as webdriver is the default.
         if (url.contains("selenium-server/driver")) {
           for (DesiredCapabilities capability : capabilities) {
-            capability.setCapability(SELENIUM_PROTOCOL, SeleniumProtocol.Selenium);
+            capability.setCapability(SELENIUM_PROTOCOL, SeleniumProtocol.Selenium.toString());
           }
         }
         URL tmp;

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -429,9 +429,9 @@ protected Response execute(String driverCommand, Map<String, ?> parameters) {
           "It may have died.";
       if (driverCommand.equals(DriverCommand.NEW_SESSION)) {
         errorMessage = "Could not start a new session. Possible causes are " +
-            "invalid address of the remote server of browser start-up failure.";
+            "invalid address of the remote server or browser start-up failure.";
       }
-      throw new BrowserConnectivityException(errorMessage, e);
+      throw new UnreachableBrowserException(errorMessage, e);
     }
 
     return errorHandler.throwIfResponseFailed(response, System.currentTimeMillis() - start);

File: java/client/src/org/openqa/selenium/remote/UnreachableBrowserException.java
Patch:
@@ -31,8 +31,8 @@
  * </ul>
  * 1)
  */
-public class BrowserConnectivityException extends WebDriverException {
-  public BrowserConnectivityException(String message, Throwable cause) {
+public class UnreachableBrowserException extends WebDriverException {
+  public UnreachableBrowserException(String message, Throwable cause) {
     super(message, cause);
   }
 }

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -56,8 +56,7 @@
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.environment.GlobalTestEnvironment;
 import org.openqa.selenium.firefox.internal.ProfilesIni;
-import org.openqa.selenium.io.TemporaryFilesystem;
-import org.openqa.selenium.remote.BrowserConnectivityException;
+import org.openqa.selenium.remote.UnreachableBrowserException;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.RemoteWebDriver;
 
@@ -103,7 +102,7 @@ public void testShouldGetMeaningfulExceptionOnBrowserDeath() {
       driver2.keptConnection.quit();
       driver2.get(pages.formPage);
       fail("Should have thrown.");
-    } catch (BrowserConnectivityException e) {
+    } catch (UnreachableBrowserException e) {
       assertThat("Must contain descriptive error", e.getMessage(),
           containsString("Error communicating with the remote browser"));
     }

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -57,6 +57,7 @@
 import org.openqa.selenium.environment.GlobalTestEnvironment;
 import org.openqa.selenium.firefox.internal.ProfilesIni;
 import org.openqa.selenium.io.TemporaryFilesystem;
+import org.openqa.selenium.remote.BrowserConnectivityException;
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.RemoteWebDriver;
 
@@ -102,7 +103,7 @@ public void testShouldGetMeaningfulExceptionOnBrowserDeath() {
       driver2.keptConnection.quit();
       driver2.get(pages.formPage);
       fail("Should have thrown.");
-    } catch (WebDriverException e) {
+    } catch (BrowserConnectivityException e) {
       assertThat("Must contain descriptive error", e.getMessage(),
           containsString("Error communicating with the remote browser"));
     }

File: java/client/test/org/openqa/selenium/NeedsLocalEnvironment.java
Patch:
@@ -24,5 +24,6 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.METHOD, ElementType.TYPE})
 public @interface NeedsLocalEnvironment {
-
+  
+  String reason() default "";
 }

File: java/client/src/org/openqa/selenium/io/FileHandler.java
Patch:
@@ -256,11 +256,11 @@ private static void copyFile(File from, File to, Filter onlyCopy) throws IOExcep
   }
 
   /**
-   * File.setWritable appears in Java 6. If we find the method, we can use it
+   * File.canExecute appears in Java 6. If we find the method, we can use it
    */
   private static Method findJdk6CanExecuteMethod() {
     try {
-      return File.class.getMethod("canExecute", Boolean.class);
+      return File.class.getMethod("canExecute");
     } catch (NoSuchMethodException e) {
       return null;
     }

File: java/server/test/org/openqa/grid/internal/NewRequestCrashesDuringNewSessionTest.java
Patch:
@@ -93,7 +93,7 @@ public MockedBuggyNewSessionRequestHandler(Registry registry,
     }
 
     @Override
-    public ExternalSessionKey forwardNewSessionRequest(TestSession session) {
+    public ExternalSessionKey forwardNewSessionRequestAndUpdateRegistry(TestSession session) {
       throw new RuntimeException("something horrible happened.");
     }
 

File: java/server/test/org/openqa/grid/internal/mock/MockedRequestHandler.java
Patch:
@@ -41,7 +41,7 @@ public MockedRequestHandler(HttpServletRequest request, HttpServletResponse resp
   }
 
   @Override
-  public ExternalSessionKey forwardNewSessionRequest(TestSession session) {
+  public ExternalSessionKey forwardNewSessionRequestAndUpdateRegistry(TestSession session) {
     // System.out.println("forwarding to " + session.getInternalKey());
     return ExternalSessionKey.fromString("");
   }

File: java/client/src/org/openqa/selenium/os/CommandLine.java
Patch:
@@ -325,7 +325,6 @@ public synchronized void start(Process process) {
 
     @Override
     public void stop() {
-      this.process = null;
       super.stop();
     }
 
@@ -335,7 +334,6 @@ public void reset() {
 
     @Override
     protected void cleanUp() {
-      this.process = null;
       super.cleanUp();
     }
 
@@ -367,7 +365,7 @@ private void waitForTerminationAfterDestroy(int duration, TimeUnit unit) {
     private void destroyHarder() {
       log.info("Command failed to close cleanly. Destroying forcefully (v2). " + this);
       Process ourProc = process;
-      if (ourProc != null) ProcessUtils.killProcess(ourProc);
+      ProcessUtils.killProcess(ourProc);
     }
 
   }

File: java/client/test/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -59,6 +59,7 @@ protected void setUp() throws Exception {
       // Ideally we would throw an IgnoredTestError or something here,
       // but our test runner doesn't pay attention to those.
       // Rely on the tests skipping themselves if they need to be on a useful page.
+      return;
     }
 
     driver.manage().deleteAllCookies();

File: java/client/test/org/openqa/selenium/DragAndDropTest.java
Patch:
@@ -46,7 +46,6 @@ public void testDragAndDrop() throws Exception {
       System.out.println("Skipping testDragAndDrop on Mac: See issue 2281.");
       return;
     }
-
     driver.get(pages.dragAndDropPage);
     WebElement img = driver.findElement(By.id("test1"));
     Point expectedLocation = img.getLocation();
@@ -70,7 +69,6 @@ public void testDragAndDropToElement() {
   }
 
   @JavascriptEnabled
-  @Ignore(value = FIREFOX, reason = "Consistently broken in xvfb") 
   public void testElementInDiv() {
     if (Platform.getCurrent().is(Platform.MAC)) {
       System.out.println("Skipping testElementInDiv on Mac: See issue 2281.");
@@ -104,7 +102,6 @@ public void testDragTooFar() {
 
   @JavascriptEnabled
   @NoDriverAfterTest
-  @Ignore(value = FIREFOX, reason = "Consistently broken in xvfb")
   public void testShouldAllowUsersToDragAndDropToElementsOffTheCurrentViewPort() {
     driver.get(pages.dragAndDropPage);
 

File: java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java
Patch:
@@ -34,6 +34,7 @@
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.server.SeleniumServer;
+import org.openqa.selenium.server.log.LoggingManager;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -190,6 +191,8 @@ public void run() {
                   } catch (InterruptedException e) {
                     e.printStackTrace();
                   }
+                  // While we wait for someone to rewrite server logging.
+                  LoggingManager.perSessionLogHandler().clearThreadTempLogs();
                 }
               }
             }).start();

File: java/server/src/org/openqa/selenium/remote/server/handler/NewSession.java
Patch:
@@ -26,6 +26,8 @@
 import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.rest.Handler;
 import org.openqa.selenium.remote.server.rest.ResultType;
+import org.openqa.selenium.server.log.LoggingManager;
+import org.openqa.selenium.server.log.PerSessionLogHandler;
 
 import java.util.Map;
 
@@ -47,6 +49,7 @@ public void setJsonParameters(Map<String, Object> allParameters) throws Exceptio
   public ResultType handle() throws Exception {
     sessionId = allSessions.newSession(desiredCapabilities);
 
+    LoggingManager.perSessionLogHandler().attachToCurrentThread(sessionId.toString());
     return ResultType.SUCCESS;
   }
 

File: java/client/src/org/openqa/selenium/remote/DriverCommand.java
Patch:
@@ -25,6 +25,8 @@
  */
 public interface DriverCommand {
   String NEW_SESSION = "newSession";
+  
+  String STATUS = "status";
 
   String CLOSE = "close";
   String QUIT = "quit";

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -143,6 +143,7 @@
 import static org.openqa.selenium.remote.DriverCommand.SET_SESSION_STORAGE_ITEM;
 import static org.openqa.selenium.remote.DriverCommand.SET_WINDOW_POSITION;
 import static org.openqa.selenium.remote.DriverCommand.SET_WINDOW_SIZE;
+import static org.openqa.selenium.remote.DriverCommand.STATUS;
 import static org.openqa.selenium.remote.DriverCommand.SUBMIT_ELEMENT;
 import static org.openqa.selenium.remote.DriverCommand.SWITCH_TO_FRAME;
 import static org.openqa.selenium.remote.DriverCommand.SWITCH_TO_WINDOW;
@@ -346,6 +347,8 @@ public HttpCommandExecutor(URL addressOfRemoteServer) {
         .put(TOUCH_LONG_PRESS, post("/session/:sessionId/touch/longclick"))
         .put(TOUCH_FLICK, post("/session/:sessionId/touch/flick"))
 
+        .put(STATUS, get("/status"))
+
         .build();
   }
 

File: java/client/test/org/openqa/selenium/TestSuiteBuilder.java
Patch:
@@ -293,7 +293,7 @@ private boolean isTestMethod(Method method) {
         || method.getAnnotation(org.junit.Test.class) != null;
   }
 
-  private boolean isUsingLocalTestEnvironment() {
+  private static boolean isUsingLocalTestEnvironment() {
     return !SauceDriver.shouldUseSauce();
   }
 

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -42,6 +42,7 @@
 import org.openqa.selenium.Ignore;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.NeedsFreshDriver;
+import org.openqa.selenium.NeedsLocalEnvironment;
 import org.openqa.selenium.NoDriverAfterTest;
 import org.openqa.selenium.NoSuchElementException;
 import org.openqa.selenium.ParallelTestRunner;
@@ -57,7 +58,7 @@
 import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.RemoteWebDriver;
 
-
+@NeedsLocalEnvironment
 public class FirefoxDriverTest extends AbstractDriverTestCase {
   public void testShouldContinueToWorkIfUnableToFindElementById() {
     driver.get(pages.formPage);

File: java/client/test/org/openqa/selenium/firefox/internal/ExecutableTest.java
Patch:
@@ -2,12 +2,14 @@
 
 import junit.framework.TestCase;
 import org.junit.Test;
+import org.openqa.selenium.NeedsLocalEnvironment;
 
 import java.io.File;
 
 public class ExecutableTest extends TestCase {
 
   @Test
+  @NeedsLocalEnvironment
   public void testEnvironmentDiscovery() {
     Executable env = new Executable(null);
     File exe = env.getFile();

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -92,7 +92,7 @@ public void testShouldBeAbleToLoadAPageWithFramesetsAndWaitUntilAllFramesAreLoad
 
   @Ignore({IPHONE, SELENESE})
   @NeedsFreshDriver
-  public void testSouldDoNothingIfThereIsNothingToGoBackTo() {
+  public void testShouldDoNothingIfThereIsNothingToGoBackTo() {
     String originalTitle = driver.getTitle();
     driver.get(pages.formPage);
 

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.http.entity.StringEntity;
 import org.apache.http.message.BasicHttpEntityEnclosingRequest;
 import org.apache.http.message.BasicHttpRequest;
+import org.apache.http.util.EntityUtils;
 import org.openqa.grid.internal.listeners.CommandListener;
 import org.openqa.grid.web.Hub;
 
@@ -271,6 +272,8 @@ public String forward(HttpServletRequest request, HttpServletResponse response,
       }
 
       writeRawBody(response, in);
+
+      EntityUtils.consume(responseBody);
     }
 
     if (slot.getProxy() instanceof CommandListener) {

File: java/client/src/org/openqa/selenium/firefox/internal/NewProfileExtensionConnection.java
Patch:
@@ -80,7 +80,7 @@ public void start() throws IOException {
       File logFile = firefoxLogFile == null ? null : new File(firefoxLogFile);
       process.setOutputWatcher(new CircularOutputStream(logFile, BUFFER_SIZE));
 
-      process.startProfile(profile, profileDir);
+      process.startProfile(profile, profileDir, "-foreground");
 
       // Just for the record; the critical section is all along while firefox is starting with the
       // profile.

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -676,7 +676,7 @@ public void testShouldBeAbleToTypeIntoEmptyContentEditableElement() {
     assertThat(editable.getText(), equalTo("cheese"));
   }
 
-  @Ignore(value = ALL, reason = "Untested except in Firefox", issues = {2825})
+  @Ignore(value = {ALL}, reason = "Untested except in Firefox", issues = {2825})
   public void testShouldBeAbleToTypeIntoContentEditableElementWithExistingValue() {
     driver.get(pages.readOnlyPage);
     WebElement editable = driver.findElement(By.id("content-editable"));

File: java/client/test/org/openqa/selenium/ClearTest.java
Patch:
@@ -3,6 +3,7 @@
 import static org.openqa.selenium.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
+import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
@@ -70,7 +71,7 @@ public void testTextAreaShouldNotClearWhenReadOnly() {
     }
   }
 
-  @Ignore(HTMLUNIT)
+  @Ignore({HTMLUNIT, IPHONE})
   public void testContentEditableAreaShouldClear() {
     driver.get(pages.readOnlyPage);
     WebElement element = driver.findElement(By.id("content-editable"));

File: java/client/test/org/openqa/selenium/TakesScreenshotTest.java
Patch:
@@ -17,10 +17,12 @@
 
 package org.openqa.selenium;
 
+import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.OutputType.BASE64;
 
 import java.io.File;
 
+@Ignore(IPHONE)
 public class TakesScreenshotTest extends AbstractDriverTestCase {
   public void testSaveScreenshotAsFile() throws Exception {
     if (!isAbleToTakeScreenshots(driver)) {

File: java/client/test/org/openqa/selenium/firefox/SynthesizedFirefoxDriver.java
Patch:
@@ -71,7 +71,6 @@ private static FirefoxProfile createTemporaryProfile() {
         Firebug.addTo(profile);
       }
 
-      profile.setPreference("webdriver.log.file", "/tmp/ff_syn_log");
       return copyExtensionTo(profile);
     } catch (Exception e) {
       e.printStackTrace();

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -532,7 +532,7 @@ public void testAnExceptionThrownIfUsingAQuitInstance() {
       fail("Expected an exception to be thrown because the instance is dead.");
     } catch (WebDriverException e) {
       assertTrue("Unexpected exception message:" + e.getMessage(),
-          e.getMessage().contains("cannot be used after quit"));
+          e.getMessage().contains("It may have died"));
     }
 
   }

File: java/client/test/org/openqa/selenium/support/pagefactory/DefaultFieldDecoratorTest.java
Patch:
@@ -54,7 +54,7 @@ public class DefaultFieldDecoratorTest extends MockTestBase {
   @SuppressWarnings("unused") private WebElement element1;
   @SuppressWarnings("unused") private WebElement element2;
   @SuppressWarnings("unused") private List<WebElement> list1;
-  @SuppressWarnings("unused") private List<WebElement> list2;
+  @SuppressWarnings("unused") private List<Object> list2;
   @SuppressWarnings("unused") private Integer num;
 
   @SuppressWarnings("unused")
@@ -101,11 +101,11 @@ public void decoratesAnnotatedWebElementList() throws Exception {
   }
 
   @Test
-  public void doesNotDecorateNonAnnotatedWebElementList() throws Exception {
+  public void doesDecorateNonAnnotatedWebElementList() throws Exception {
     FieldDecorator decorator = createDecoratorWithDefaultLocator();
     assertThat(decorator.decorate(getClass().getClassLoader(),
         getClass().getDeclaredField("list1")),
-        is(nullValue()));
+        is(notNullValue()));
     assertThat(decorator.decorate(getClass().getClassLoader(),
         getClass().getDeclaredField("list2")),
         is(nullValue()));

File: java/client/test/org/openqa/selenium/support/pagefactory/UsingPageFactoryTest.java
Patch:
@@ -58,7 +58,7 @@ public void canListDecoratedElements() {
     Page page = new Page();
     PageFactory.initElements(driver, page);
 
-    assertThat(page.divs.size(), equalTo(10));
+    assertThat(page.divs.size(), equalTo(12));
     for (WebElement link : page.divs) {
       assertThat(link.getTagName(), equalTo("div"));
     }

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -523,7 +523,7 @@ public void testCanCallQuitTwiceWithoutThrowingAnException() {
     instance.quit();
   }
 
-  public void testAnExceptionThrownIfUsingAQuittedInstance() {
+  public void testAnExceptionThrownIfUsingAQuitInstance() {
     WebDriver instance = newFirefoxDriver();
 
     instance.quit();

File: java/client/test/org/openqa/selenium/firefox/SynthesizedFirefoxDriver.java
Patch:
@@ -68,8 +68,7 @@ private static FirefoxProfile createTemporaryProfile() {
       FirefoxProfile profile = new FirefoxProfile();
 
       if (Boolean.getBoolean("webdriver.debug")) {
-        File firebug = InProject.locate( "third_party/firebug/firebug-1.5.0-fx.xpi");
-        profile.addExtension(firebug);
+        Firebug.addTo(profile);
       }
 
       return copyExtensionTo(profile);

File: java/client/test/org/openqa/selenium/XPathElementFindingTest.java
Patch:
@@ -62,7 +62,7 @@ public void testShouldFindElementsByXPath() {
     driver.get(pages.xhtmlTestPage);
     List<WebElement> divs = driver.findElements(By.xpath("//div"));
 
-    assertThat(divs.size(), equalTo(10));
+    assertThat(divs.size(), equalTo(12));
   }
 
   @Ignore(SELENESE)

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -672,7 +672,8 @@ private List<WebElement> findChildNodes(List<WebElement> allElements) {
     List<WebElement> toReturn = new LinkedList<WebElement>();
 
     for (WebElement current : allElements) {
-      if (element.isAncestorOf(((HtmlUnitWebElement) current).element)) {
+      HtmlElement candidate = ((HtmlUnitWebElement) current).element;
+      if (element.isAncestorOf(candidate) && element != candidate) {
         toReturn.add(current);
       }
     }

File: java/client/src/org/openqa/selenium/browserlaunchers/LauncherUtils.java
Patch:
@@ -310,6 +310,9 @@ public static void generatePacAndPrefJs(File customProfileDir, int port, String
     out.println("user_pref('browser.cache.disk.enable', false);");
     out.println("user_pref('browser.cache.memory.enable', true);");
 
+    //Allow extensions to be installed into the profile and still work
+    out.println("user_pref('extensions.autoDisableScopes', 10);");
+
     // Disable "do you want to remember this password?"
     out.println("user_pref('signon.rememberSignons', false);");
 

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -404,6 +404,9 @@ protected Response execute(String driverCommand, Map<String, ?> parameters) {
       // {"ELEMENT": id} to RemoteWebElements.
       Object value = converter.apply(response.getValue());
       response.setValue(value);
+    } catch (WebDriverException e) {
+      // An exception from within WebDriver - throw as-is.
+      throw e;
     } catch (Exception e) {
       throw new WebDriverException("Error communicating with the remote browser. " +
           "It may have died.", e);

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -531,7 +531,8 @@ public void testAnExceptionThrownIfUsingAQuittedInstance() {
       instance.get(pages.xhtmlTestPage);
       fail("Expected an exception to be thrown because the instance is dead.");
     } catch (WebDriverException e) {
-      assertTrue(e.getMessage().contains("cannot be used after quit"));
+      assertTrue("Unexpected exception message:" + e.getMessage(),
+          e.getMessage().contains("cannot be used after quit"));
     }
 
   }

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -405,7 +405,8 @@ protected Response execute(String driverCommand, Map<String, ?> parameters) {
       Object value = converter.apply(response.getValue());
       response.setValue(value);
     } catch (Exception e) {
-      throw new WebDriverException(e);
+      throw new WebDriverException("Error communicating with the remote browser. " +
+          "It may have died.", e);
     }
 
     return errorHandler.throwIfResponseFailed(response, System.currentTimeMillis() - start);

File: java/client/test/org/openqa/selenium/ClearTest.java
Patch:
@@ -8,7 +8,7 @@
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 
-@Ignore({CHROME, OPERA, FIREFOX, IE, SELENESE, ANDROID})
+@Ignore({CHROME, OPERA, FIREFOX, SELENESE, ANDROID})
 public class ClearTest extends AbstractDriverTestCase {
 
   public void testWritableTextInputShouldClear() {

File: java/client/src/org/openqa/selenium/Platform.java
Patch:
@@ -66,15 +66,15 @@ public boolean is(Platform compareWith) {
   /**
    * Many platforms have UNIX traits, amongst them LINUX, Solaris and BSD.
    */
-  UNIX("solaris", "bsd") {
+  UNIX("solaris", "bsd") {},
+
+  LINUX("linux") {
     @Override
     public boolean is(Platform compareWith) {
       return compareWith == UNIX || compareWith == LINUX;
     }
   },
 
-  LINUX("linux") {},
-
   ANDROID("android", "dalvik") {
     public String getLineEnding() {
       return "\n";

File: java/client/test/org/openqa/selenium/JUnit4TestBase.java
Patch:
@@ -40,7 +40,7 @@ public void createDriver() throws Exception {
 
     String driverClass;
     if (isInDevMode()) {
-      driverClass = "org.openqa.selenium.firefox.SynthesizedFirefoxDriverTestSuite$TestFirefoxDriver";
+      driverClass = "org.openqa.selenium.firefox.SynthesizedFirefoxDriver";
     } else {
       driverClass = "org.openqa.selenium.firefox.FirefoxDriver";
     }

File: java/client/test/org/openqa/selenium/SeleniumServerInstance.java
Patch:
@@ -31,7 +31,7 @@ public void start() throws Exception {
     if (isInDevMode()) {
       Map<String, Object> payload = Maps.newHashMap();
       payload.put("capabilities", DesiredCapabilities.firefox());
-      payload.put("class", "org.openqa.selenium.firefox.SynthesizedFirefoxDriverTestSuite$TestFirefoxDriver");
+      payload.put("class", "org.openqa.selenium.firefox.SynthesizedFirefoxDriver");
 
       HttpRequest request = new HttpRequest(
           HttpRequest.Method.POST,

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -539,7 +539,7 @@ private WebDriver newFirefoxDriver() {
   private WebDriver newFirefoxDriver(FirefoxProfile profile) {
     if (DevMode.isInDevMode()) {
       try {
-        return new SynthesizedFirefoxDriverTestSuite.TestFirefoxDriver(profile);
+        return new SynthesizedFirefoxDriver(profile);
       } catch (Exception e) {
         throw Throwables.propagate(e);
       }

File: java/server/test/org/openqa/selenium/remote/server/RemoteWebDriverTestSuite.java
Patch:
@@ -106,7 +106,7 @@ protected File findRootOfWebApp() {
         Map<String, Object> payload = Maps.newHashMap();
         payload.put("capabilities", DesiredCapabilities.firefox());
         payload
-            .put("class", "org.openqa.selenium.firefox.SynthesizedFirefoxDriverTestSuite$TestFirefoxDriver");
+            .put("class", "org.openqa.selenium.firefox.SynthesizedFirefoxDriver");
 
         new HttpRequest(
             HttpRequest.Method.POST, "http://localhost:6000/common/hub/config/drivers",

File: java/client/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import static org.openqa.selenium.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.Ignore.Driver.CHROME;
-import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
@@ -378,7 +377,7 @@ public void testGetCurrentUrl() {
     assertThat(driver.getCurrentUrl(), equalTo(url));
   }
 
-  @Ignore(value = {ANDROID, HTMLUNIT, OPERA}, reason = "Appears to uncover an HtmlUnit bug")
+  @Ignore(value = {ANDROID, OPERA})
   @JavascriptEnabled
   public void testShouldBeAbleToCarryOnWorkingIfTheFrameIsDeletedFromUnderUs() {
     driver.get(pages.deletingFrame);

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.common;
 

File: java/server/src/org/openqa/grid/common/exception/CapabilityNotPresentOnTheGridException.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.common.exception;
 

File: java/server/src/org/openqa/grid/common/exception/GridException.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.common.exception;
 

File: java/server/src/org/openqa/grid/internal/ActiveTestSessions.java
Patch:
@@ -1,5 +1,3 @@
-package org.openqa.grid.internal;
-
 /*
 Copyright 2011 WebDriver committers
 Copyright 2011 Software Freedom Conservancy
@@ -17,6 +15,8 @@
 limitations under the License.
 */
 
+package org.openqa.grid.internal;
+
 import net.jcip.annotations.ThreadSafe;
 
 import java.util.Collections;

File: java/server/src/org/openqa/grid/internal/DefaultTimeSource.java
Patch:
@@ -1,5 +1,3 @@
-package org.openqa.grid.internal;
-
 /*
 Copyright 2011 WebDriver committers
 Copyright 2011 Software Freedom Conservancy
@@ -17,8 +15,10 @@
 limitations under the License.
 */
 
+package org.openqa.grid.internal;
+
 /**
- * Provides access to Systetime
+ * Provides access to System time.
  */
 public class DefaultTimeSource implements TimeSource {
   public long currentTimeInMillis(){

File: java/server/src/org/openqa/grid/internal/ExternalSessionKey.java
Patch:
@@ -1,5 +1,3 @@
-package org.openqa.grid.internal;
-
 /*
 Copyright 2011 WebDriver committers
 Copyright 2011 Software Freedom Conservancy
@@ -17,6 +15,8 @@
 limitations under the License.
 */
 
+package org.openqa.grid.internal;
+
 import org.openqa.grid.internal.exception.NewSessionException;
 
 public class ExternalSessionKey {

File: java/server/src/org/openqa/grid/internal/NewSessionRequestQueue.java
Patch:
@@ -1,5 +1,3 @@
-package org.openqa.grid.internal;
-
 /*
 Copyright 2011 WebDriver committers
 Copyright 2011 Software Freedom Conservancy
@@ -17,6 +15,8 @@
 limitations under the License.
 */
 
+package org.openqa.grid.internal;
+
 import com.google.common.base.Predicate;
 
 import net.jcip.annotations.ThreadSafe;

File: java/server/src/org/openqa/grid/internal/Registry.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.internal;
 

File: java/server/src/org/openqa/grid/internal/listeners/CommandListener.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.internal.listeners;
 

File: java/server/src/org/openqa/grid/internal/listeners/RegistrationListener.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.internal.listeners;
 

File: java/server/src/org/openqa/grid/internal/listeners/TestSessionListener.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,8 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
-
+*/
 package org.openqa.grid.internal.listeners;
 
 import org.openqa.grid.internal.TestSession;

File: java/server/src/org/openqa/grid/internal/listeners/TimeoutListener.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,8 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
-
+*/
 package org.openqa.grid.internal.listeners;
 
 import org.openqa.grid.internal.TestSession;

File: java/server/src/org/openqa/grid/web/servlet/Grid1HeartbeatServlet.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.web.servlet;
 

File: java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.web.servlet;
 

File: java/server/src/org/openqa/grid/web/servlet/handler/RequestType.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.web.servlet.handler;
 

File: java/server/src/org/openqa/grid/web/utils/BrowserNameUtils.java
Patch:
@@ -1,5 +1,6 @@
 /*
-Copyright 2007-2011 WebDriver committers
+Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.web.utils;
 

File: java/server/test/org/openqa/grid/common/CommonTestSuite.java
Patch:
@@ -1,5 +1,6 @@
 /*
 Copyright 2011 WebDriver committers
+Copyright 2011 Software Freedom Conservancy
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -12,7 +13,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.common;
 

File: java/server/test/org/openqa/grid/internal/GridShutdownTest.java
Patch:
@@ -1,5 +1,3 @@
-package org.openqa.grid.internal;
-
 /*
 Copyright 2011 WebDriver committers
 Copyright 2011 Software Freedom Conservancy
@@ -17,6 +15,8 @@
 limitations under the License.
 */
 
+package org.openqa.grid.internal;
+
 import junit.framework.Assert;
 
 import org.junit.Test;

File: java/client/src/org/openqa/selenium/support/ui/Select.java
Patch:
@@ -110,7 +110,7 @@ public WebElement getFirstSelectedOption() {
   public void selectByVisibleText(String text) {
     // try to find the option via XPATH ...
     List<WebElement> options =
-        element.findElements(By.xpath(".//option[. = " + escapeQuotes(text) + "]"));
+        element.findElements(By.xpath(".//option[normalize-space(.) = " + escapeQuotes(text) + "]"));
 
     boolean matched = false;
     for (WebElement option : options) {
@@ -276,7 +276,7 @@ public void deselectByIndex(int index) {
    * @param text The visible text to match against
    */
   public void deselectByVisibleText(String text) {
-    StringBuilder builder = new StringBuilder(".//option[. = ");
+    StringBuilder builder = new StringBuilder(".//option[normalize-space(.) = ");
     builder.append(escapeQuotes(text));
     builder.append("]");
     List<WebElement> options = element.findElements(By.xpath(builder.toString()));

File: java/client/test/org/openqa/selenium/support/ui/SelectTest.java
Patch:
@@ -196,7 +196,7 @@ public void shouldAllowOptionsToBeSelectedByVisibleText() {
       will(returnValue("select"));
       allowing(element).getAttribute("multiple");
       will(returnValue("multiple"));
-      exactly(1).of(element).findElements(By.xpath(".//option[. = \"fish\"]"));
+      exactly(1).of(element).findElements(By.xpath(".//option[normalize-space(.) = \"fish\"]"));
       will(returnValue(options));
       exactly(1).of(firstOption).isSelected();
       will(returnValue(false));
@@ -310,7 +310,7 @@ public void shouldAllowUserToDeselectOptionsByVisibleText() {
       will(returnValue("select"));
       allowing(element).getAttribute("multiple");
       will(returnValue("multiple"));
-      exactly(1).of(element).findElements(By.xpath(".//option[. = \"b\"]"));
+      exactly(1).of(element).findElements(By.xpath(".//option[normalize-space(.) = \"b\"]"));
       will(returnValue(options));
       exactly(1).of(firstOption).isSelected();
       will(returnValue(true));
@@ -471,7 +471,7 @@ public void shouldProvideConcatenatedStringsWhenStringEndsWithQuote() {
   public void shouldFallBackToSlowLooksUpsWhenGetByVisibleTextFailsAndThereIsASpace() {
     final WebElement element = mock(WebElement.class);
     final WebElement firstOption = mock(WebElement.class, "first");
-    final By xpath1 = By.xpath(".//option[. = \"foo bar\"]");
+    final By xpath1 = By.xpath(".//option[normalize-space(.) = \"foo bar\"]");
     final By xpath2 = By.xpath(".//option[contains(., \"foo\")]");
 
     checking(new Expectations() {{

File: java/server/src/org/openqa/selenium/server/browserlaunchers/GoogleChromeLauncher.java
Patch:
@@ -190,6 +190,8 @@ private String[] createCommandArray(String url) {
         "--no-default-browser-check",
         // Disable the "translate page" in-page toolbar from appearing
         "--disable-translate",
+        // Don't enforce the same-origin policy
+        "--disable-web-security",
         // Set the user data (i.e. profile) directory.
         "--user-data-dir=" + userDir,
         getUntrustedCertificatesFlag(),

File: java/client/test/org/openqa/selenium/SlowLoadingPageTest.java
Patch:
@@ -10,7 +10,7 @@ public class SlowLoadingPageTest extends AbstractDriverTestCase {
   private static final long LOAD_TIME_IN_SECONDS = 3;
 
   @Ignore(value = {IPHONE}, reason = "Untested browsers")
-  public void testShouldBlockUnitlPageLoads() throws Exception {
+  public void testShouldBlockUntilPageLoads() throws Exception {
     long start = System.currentTimeMillis();
     driver.get(pages.sleepingPage + "?time=" + LOAD_TIME_IN_SECONDS);
     long now = System.currentTimeMillis();
@@ -37,6 +37,6 @@ public void testRefreshShouldBlockUntilPageLoads() {
   }
 
   private static void assertElapsed(long expected, long actual) {
-    assertTrue(expected + "ms should have ellapsed, but was: " + actual, expected <= actual);
+    assertTrue(expected + "ms should have elapsed, but was: " + actual, expected <= actual);
   }
 }

File: java/client/test/org/openqa/selenium/DragAndDropTest.java
Patch:
@@ -94,6 +94,8 @@ public void testDragTooFar() {
       actions.dragAndDropBy(img, Integer.MAX_VALUE, Integer.MAX_VALUE).perform();
       fail("These coordinates are outside the page - expected to fail.");
     } catch (MoveTargetOutOfBoundsException expected) {
+      // Release mouse button - move was interrupted in the middle.
+      new Actions(driver).release().perform();
     }
   }
 

File: java/client/test/org/openqa/selenium/internal/IgnoreCollector.java
Patch:
@@ -48,6 +48,7 @@ public static Map<String, Object> asMap(String className, String testName, Ignor
       map.put("className", className);
       map.put("testName", testName);
       map.put("reason", ignore.reason());
+      map.put("issues", ignore.issues());
 
       final Set<String> drivers = new HashSet<String>();
       for (Ignore.Driver driver : ignore.value()) {

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -279,7 +279,7 @@ public void testShouldReturnValueOfOnClickAttribute() {
   }
 
   @Ignore(value = {IE, IPHONE, ANDROID}, reason = "IE7 Does not support SVG; " +
-      "SVG elements crash the iWebDriver app (issue 1134)")
+      "SVG elements crash the iWebDriver app (issue 1134)", issues = {1134})
   public void testGetAttributeDoesNotReturnAnObjectForSvgProperties() {
     driver.get(pages.svgPage);
     WebElement svgElement = driver.findElement(By.id("rotate"));

File: java/client/test/org/openqa/selenium/Ignore.java
Patch:
@@ -42,4 +42,6 @@ public static enum Driver {
   Driver[] value() default {Driver.ALL};
 
   String reason() default ("Not implemented in driver yet");
+
+  int[] issues() default {};
 }

File: java/client/test/org/openqa/selenium/internal/IgnoredTestCallback.java
Patch:
@@ -3,5 +3,5 @@
 import org.openqa.selenium.Ignore;
 
 public interface IgnoredTestCallback {
-  void callback(String className, String testName, Ignore ignore);
+  void callback(Class className, String testName, Ignore ignore);
 }

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -70,7 +70,7 @@ public class FirefoxProfile {
           .put("browser.tabs.warnOnOpen", false)
           .put("devtools.errorconsole.enabled", true)
           .put("dom.disable_open_during_load", false)
-          .put("extensions.autoDisableScopes", 10),
+          .put("extensions.autoDisableScopes", 10)
           .put("extensions.logging.enabled", true)
           .put("extensions.update.enabled", false)
           .put("extensions.update.notifyUser", false)

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -70,6 +70,7 @@ public class FirefoxProfile {
           .put("browser.tabs.warnOnOpen", false)
           .put("devtools.errorconsole.enabled", true)
           .put("dom.disable_open_during_load", false)
+          .put("extensions.autoDisableScopes", 10),
           .put("extensions.logging.enabled", true)
           .put("extensions.update.enabled", false)
           .put("extensions.update.notifyUser", false)

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -81,6 +81,7 @@ public class RegistrationRequest {
   public static final String MAX_SESSION = "maxSession";
   public static final String AUTO_REGISTER = "register";
   public static final String NODE_POLLING = "nodePolling";
+  public static final String UNREGISTER_IF_STILL_DOWN_AFTER = "unregisterIfStillDownAfter";
 
   public static final String MAX_TESTS_BEFORE_CLEAN = "maxTestBeforeClean";
   public static final String CLEAN_SNAPSHOT = "cleanSnapshot";

File: java/client/test/org/openqa/selenium/javascript/ClosureTestCase.java
Patch:
@@ -17,13 +17,13 @@
  * @author jmleyba@gmail.com (Jason Leyba)
  */
 @Ignore(value = {HTMLUNIT, IE, IPHONE, REMOTE, OPERA})
-public class JsApiTestCase extends AbstractDriverTestCase {
+public class ClosureTestCase extends AbstractDriverTestCase {
 
   private static final long TWO_MINUTES = 2 * 60 * 1000;
 
   private final String relativeUrl;
 
-  public JsApiTestCase(String relativeUrl) {
+  public ClosureTestCase(String relativeUrl) {
     this.relativeUrl = relativeUrl;
     this.setName(relativeUrl);
   }

File: java/client/test/org/openqa/selenium/javascript/ClosureTestSuite.java
Patch:
@@ -58,7 +58,7 @@ public static Test suite() {
       String path = file.getAbsolutePath()
           .replace(testDir.getAbsolutePath() + File.separator, "")
           .replace(File.separator, "/");
-      TestCase test = new JsApiTestCase(urlPath + path);
+      TestCase test = new ClosureTestCase(urlPath + path);
       suite.addTest(new DriverTestDecorator(test, driverClazz,
           /* keepDriver= */true, /* freshDriver= */false, /* refreshDriver= */false));
     }

File: java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java
Patch:
@@ -239,7 +239,8 @@ Renderer getRenderer(ResultType resultType, HttpServletRequest request) {
     Collection<Result> results = checkNotNull(resultToRender.get(resultType));
     Result tempToUse = null;
     for (Result res : results) {
-      if (tempToUse == null || res.isExactMimeTypeMatch(request.getHeader("Accept"))) {
+      if (tempToUse == null && !res.isOnlyForExactMatch()
+          || res.isExactMimeTypeMatch(request.getHeader("Accept"))) {
         tempToUse = res;
       }
     }

File: java/server/src/org/openqa/grid/common/SeleniumProtocol.java
Patch:
@@ -1,4 +1,4 @@
-package org.openqa.grid.selenium.utils;
+package org.openqa.grid.common;
 
 public enum SeleniumProtocol {
   Selenium, WebDriver

File: java/server/src/org/openqa/grid/internal/utils/DefaultHtmlRenderer.java
Patch:
@@ -43,7 +43,7 @@ public String renderSummary() {
     StringBuilder builder = new StringBuilder();
     builder.append("<fieldset>");
     builder.append("<legend>").append(proxy.getClass().getSimpleName()).append("</legend>");
-    builder.append("listening on ").append(proxy.getRemoteURL());
+    builder.append("listening on ").append(proxy.getRemoteHost());
     if (proxy.getTimeOut() > 0) {
       int inSec = proxy.getTimeOut() / 1000;
       builder.append("test session time out after ").append(inSec).append(" sec.");
@@ -55,6 +55,7 @@ public String renderSummary() {
     for (TestSlot slot : proxy.getTestSlots()) {
       builder.append(slot.getCapabilities().containsKey(BROWSER) ? slot.getCapabilities().get(
           BROWSER) : slot.getCapabilities().get(APP));
+      builder.append("protocol:"+slot.getProtocol()+"<br>");
       TestSession session = slot.getSession();
       builder.append(session == null ? "(free)" : "(busy, session " + session + ")");
       builder.append("<br>");

File: java/server/src/org/openqa/grid/web/servlet/Grid1HeartbeatServlet.java
Patch:
@@ -51,13 +51,13 @@ protected void doGet(HttpServletRequest request, HttpServletResponse response)
     // Build up the proxy URL based upon the params the Grid 1.0 node will pass as query params.
     Map<String, String[]> queryParams = request.getParameterMap();
     String nodeUrl =
-        String.format("http://%s:%s/selenium-server/driver", queryParams.get("host")[0],
+        String.format("http://%s:%s", queryParams.get("host")[0],
             queryParams.get("port")[0]);
 
     // Check each registered node and see if the pinging node is in the list.
     boolean alreadyRegistered = false;
     for (RemoteProxy proxy : getRegistry().getAllProxies()) {
-      if (proxy.getRemoteURL().toString().equals(nodeUrl)) {
+      if (proxy.getRemoteHost().toString().equals(nodeUrl)) {
         alreadyRegistered = true;
       }
     }

File: java/server/src/org/openqa/grid/web/servlet/RegistrationServlet.java
Patch:
@@ -88,7 +88,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
     new Thread(new Runnable() {  // Thread safety reviewed
       public void run() {
         getRegistry().add(proxy);
-        log.fine("proxy added " + proxy.getRemoteURL());
+        log.fine("proxy added " + proxy.getRemoteHost());
       }
     }).start();
   }

File: java/server/test/org/openqa/grid/e2e/misc/ConfigInheritanceTest.java
Patch:
@@ -30,7 +30,7 @@ public void prepare() throws Exception {
 
 
     SelfRegisteringRemote remote =
-        GridTestHelper.getRemoteWithoutCapabilities(hub.getUrl(), GridRole.WEBDRIVER);
+        GridTestHelper.getRemoteWithoutCapabilities(hub.getUrl(), GridRole.NODE);
     remote.addBrowser(DesiredCapabilities.firefox(), 1);
     remote.getConfiguration().put("A2", "proxyA2");
     remote.getConfiguration().put("B2", 50);

File: java/server/test/org/openqa/grid/e2e/misc/GridSerializeExceptionTests.java
Patch:
@@ -1,4 +1,4 @@
-package org.openqa.grid.e2e.wd;
+package org.openqa.grid.e2e.misc;
 
 import org.openqa.grid.common.GridRole;
 import org.openqa.grid.e2e.utils.GridTestHelper;
@@ -25,7 +25,7 @@ public void prepare() throws Exception {
     hub = GridTestHelper.getHub();
 
     SelfRegisteringRemote remote =
-        GridTestHelper.getRemoteWithoutCapabilities(hub, GridRole.WEBDRIVER);
+        GridTestHelper.getRemoteWithoutCapabilities(hub, GridRole.NODE);
 
     remote.startRemoteServer();
     remote.sendRegistrationRequest();

File: java/server/test/org/openqa/grid/e2e/misc/Issue1586.java
Patch:
@@ -28,7 +28,7 @@ public void prepare() throws Exception {
 
     // register a webdriver
     SelfRegisteringRemote webdriver =
-        GridTestHelper.getRemoteWithoutCapabilities(hub.getUrl(), GridRole.WEBDRIVER);
+        GridTestHelper.getRemoteWithoutCapabilities(hub.getUrl(), GridRole.NODE);
     webdriver.addBrowser(DesiredCapabilities.firefox(), 1);
     webdriver.startRemoteServer();
     webdriver.sendRegistrationRequest();

File: java/server/test/org/openqa/grid/e2e/misc/WebDriverPriorityDemo.java
Patch:
@@ -1,4 +1,4 @@
-package org.openqa.grid.e2e.wd;
+package org.openqa.grid.e2e.misc;
 
 import org.openqa.grid.common.GridRole;
 import org.openqa.grid.e2e.utils.GridTestHelper;
@@ -42,7 +42,7 @@ public void prepare() throws Exception {
     hubURL = new URL("http://" + hub.getHost() + ":" + hub.getPort());
 
     SelfRegisteringRemote remote =
-            GridTestHelper.getRemoteWithoutCapabilities(hubURL, GridRole.WEBDRIVER);
+            GridTestHelper.getRemoteWithoutCapabilities(hubURL, GridRole.NODE);
     remote.addBrowser(DesiredCapabilities.firefox(), 1);
 
     remote.startRemoteServer();

File: java/server/test/org/openqa/grid/internal/LoadBalancedTests.java
Patch:
@@ -3,7 +3,7 @@
 import static org.openqa.grid.common.RegistrationRequest.APP;
 import static org.openqa.grid.common.RegistrationRequest.MAX_INSTANCES;
 import static org.openqa.grid.common.RegistrationRequest.MAX_SESSION;
-import static org.openqa.grid.common.RegistrationRequest.REMOTE_URL;
+import static org.openqa.grid.common.RegistrationRequest.REMOTE_HOST;
 
 import org.junit.AfterClass;
 import org.junit.Assert;
@@ -36,7 +36,7 @@ public static void setup() {
 
     // add 5 proxies. Total = 5 proxies * 5 slots each = 25 firefox.
     for (int i = 0; i < 5; i++) {
-      config.put(REMOTE_URL, "http://machine" + i + ":4444");
+      config.put(REMOTE_HOST, "http://machine" + i + ":4444");
       request.setConfiguration(config);
       registry.add(new RemoteProxy(request, registry));
     }

File: java/server/test/org/openqa/grid/internal/ParallelTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.openqa.grid.common.RegistrationRequest.APP;
 import static org.openqa.grid.common.RegistrationRequest.MAX_INSTANCES;
 import static org.openqa.grid.common.RegistrationRequest.MAX_SESSION;
-import static org.openqa.grid.common.RegistrationRequest.REMOTE_URL;
+import static org.openqa.grid.common.RegistrationRequest.REMOTE_HOST;
 
 import org.junit.Assert;
 import org.junit.BeforeClass;
@@ -38,7 +38,7 @@ public static void prepareReqRequest() {
     app2.put(APP, "app2");
     app2.put(MAX_INSTANCES, 1);
 
-    config.put(REMOTE_URL, "http://machine1:4444");
+    config.put(REMOTE_HOST, "http://machine1:4444");
     config.put(MAX_SESSION, 5);
 
     req = new RegistrationRequest();
@@ -204,7 +204,7 @@ public void releaseAndReserve() {
     app2.put(APP, "app2");
     app2.put(MAX_INSTANCES, 1);
 
-    config.put(REMOTE_URL, "http://machine1:4444");
+    config.put(REMOTE_HOST, "http://machine1:4444");
     config.put(MAX_SESSION, 5);
 
     req = new RegistrationRequest();

File: java/server/test/org/openqa/grid/internal/RegistryStateTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.openqa.grid.common.RegistrationRequest.APP;
 import static org.openqa.grid.common.RegistrationRequest.MAX_INSTANCES;
 import static org.openqa.grid.common.RegistrationRequest.MAX_SESSION;
-import static org.openqa.grid.common.RegistrationRequest.REMOTE_URL;
+import static org.openqa.grid.common.RegistrationRequest.REMOTE_HOST;
 
 import org.junit.Assert;
 import org.junit.BeforeClass;
@@ -37,7 +37,7 @@ public static void prepareReqRequest() {
     app2.put(APP, "app2");
     app2.put(MAX_INSTANCES, 1);
 
-    config.put(REMOTE_URL, "http://machine1:4444");
+    config.put(REMOTE_HOST, "http://machine1:4444");
     config.put(MAX_SESSION, 5);
 
     req = new RegistrationRequest();

File: java/server/test/org/openqa/grid/internal/RegistryTest.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 import static org.openqa.grid.common.RegistrationRequest.MAX_SESSION;
-import static org.openqa.grid.common.RegistrationRequest.REMOTE_URL;
+import static org.openqa.grid.common.RegistrationRequest.REMOTE_HOST;
 
 public class RegistryTest {
 
@@ -79,7 +79,7 @@ public static void prepareReqRequest() {
     Map<String, Object> config = new HashMap<String, Object>();
     app1.put(CapabilityType.BROWSER_NAME, "app1");
     app2.put(CapabilityType.BROWSER_NAME, "app2");
-    config.put(REMOTE_URL, "http://machine1:4444");
+    config.put(REMOTE_HOST, "http://machine1:4444");
     config.put(MAX_SESSION, 5);
     req = new RegistrationRequest();
     req.addDesiredCapabilitiy(app1);

File: java/server/test/org/openqa/grid/internal/RemoteProxyFactory.java
Patch:
@@ -29,7 +29,7 @@ public static RemoteProxy getNewBasicRemoteProxy(String browser, String url, Reg
     req.addDesiredCapabilitiy(capability);
 
     Map<String, Object> config = new HashMap<String, Object>();
-    config.put("url", url);
+    config.put(RegistrationRequest.REMOTE_HOST, url);
     req.setConfiguration(config);
     return createProxy(registry, req);
 
@@ -49,7 +49,7 @@ public static RemoteProxy getNewBasicRemoteProxy(Map<String, Object> cap, String
     RegistrationRequest req = RegistrationRequest.build("-role", "webdriver");
     req.getCapabilities().clear();
     req.addDesiredCapabilitiy(cap);
-    req.getConfiguration().put(RegistrationRequest.REMOTE_URL, url);
+    req.getConfiguration().put(RegistrationRequest.REMOTE_HOST, url);
     return createProxy(registry, req);
 
   }
@@ -72,7 +72,7 @@ public static RemoteProxy getNewBasicRemoteProxy(List<Map<String, Object>> caps,
       req.addDesiredCapabilitiy(c);
     }
 
-    req.getConfiguration().put(RegistrationRequest.REMOTE_URL, url);
+    req.getConfiguration().put(RegistrationRequest.REMOTE_HOST, url);
     return createProxy(registry, req);
 
   }

File: java/server/test/org/openqa/grid/internal/RemoteProxyTest.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Map;
 
 import static org.openqa.grid.common.RegistrationRequest.APP;
-import static org.openqa.grid.common.RegistrationRequest.REMOTE_URL;
+import static org.openqa.grid.common.RegistrationRequest.REMOTE_HOST;
 
 public class RemoteProxyTest {
 
@@ -57,7 +57,7 @@ public void create() {
     cap.put(APP, "corrupted");
 
     Map<String, Object> config = new HashMap<String, Object>();
-    config.put(REMOTE_URL, "ebay.com");
+    config.put(REMOTE_HOST, "ebay.com");
 
     RegistrationRequest request = new RegistrationRequest();
     request.addDesiredCapabilitiy(cap);

File: java/server/test/org/openqa/grid/internal/StatusServletTests.java
Patch:
@@ -70,7 +70,7 @@ public static void setup() throws Exception {
     req.addDesiredCapabilitiy(capability);
 
     Map<String, Object> config = new HashMap<String, Object>();
-    config.put("url", "http://machine5:4444/");
+    config.put(RegistrationRequest.REMOTE_HOST, "http://machine5:4444/");
     req.setConfiguration(config);
     RemoteProxy customProxy = new MyCustomProxy(req, registry);
 

File: java/server/test/org/openqa/grid/internal/listener/RegistrationListenerTest.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.Map;
 
 import static org.openqa.grid.common.RegistrationRequest.APP;
-import static org.openqa.grid.common.RegistrationRequest.REMOTE_URL;
+import static org.openqa.grid.common.RegistrationRequest.REMOTE_HOST;
 
 
 public class RegistrationListenerTest {
@@ -45,7 +45,7 @@ public void beforeRegistration() {
   public static void prepareReqRequest() {
     Map<String, Object> config = new HashMap<String, Object>();
     app1.put(APP, "app1");
-    config.put(REMOTE_URL, "http://machine1:4444");
+    config.put(REMOTE_HOST, "http://machine1:4444");
     req = new RegistrationRequest();
     req.addDesiredCapabilitiy(app1);
     req.setConfiguration(config);

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -590,8 +590,8 @@ public void testShouldTypeIntoInputElementsThatHaveNoTypeAttribute() {
 
     WebElement element = driver.findElement(By.id("no-type"));
 
-    element.sendKeys("Should Say Cheese");
-    assertThat(element.getAttribute("value"), is("Should Say Cheese"));
+    element.sendKeys("should say cheese");
+    assertThat(element.getAttribute("value"), is("should say cheese"));
   }
 
   @JavascriptEnabled

File: java/client/test/org/openqa/selenium/interactions/touch/TouchFlickTest.java
Patch:
@@ -97,13 +97,13 @@ public void testCanFlickHorizontally() {
     int x = link.getLocation().x;
     // The element is located at the right of the page,
     // so it is not initially visible on the screen.
-    assertTrue(x > 2000);
+    assertTrue("Expected x > 2000, but got x = " + x, x > 1500);
 
-    Action flick = getBuilder(driver).flick(750, 0).build();
+    Action flick = getBuilder(driver).flick(1000, 0).build();
     flick.perform();
     x = link.getLocation().x;
     // After flicking, the element should now be visible on the screen.
-    assertTrue("Got: " + x, x < 1500);
+    assertTrue("Expected x < 1500, but got x = " + x, x < 1500);
   }
 
   @Ignore(value = {CHROME, FIREFOX, HTMLUNIT, IE, IPHONE, OPERA, SELENESE, ANDROID},

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -155,7 +155,7 @@ public void testShouldIssueClickEvents() {
   }
 
   @JavascriptEnabled
-  @Ignore(SELENESE)
+  @Ignore(value = {ANDROID, SELENESE}, reason = "Android: triggers mouse click instead.")
   public void testShouldIssueMouseUpEvents() {
     driver.get(pages.javascriptPage);
     driver.findElement(By.id("mouseup")).click();

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -227,7 +227,7 @@ public void testShouldFireTwoClickEventsWhenClickingOnALabel() {
     driver.findElement(By.id("labelForCheckbox")).click();
 
     WebElement result = driver.findElement(By.id("result"));
-    assertNotNull(waitFor(trimmedElementTextToEqual(result, "labelclick chboxclick")));
+    assertNotNull(waitFor(elementTextToContain(result, "labelclick chboxclick")));
   }
 
   @Ignore(ANDROID)

File: android/library/src/java/org/openqa/selenium/android/AndroidWebDriver.java
Patch:
@@ -364,7 +364,7 @@ public List<WebElement> findElements(By by) {
     List<WebElement> found = by.findElements(findBy);
     while (found.isEmpty() && (System.currentTimeMillis() - start <= implicitWait)) {
       sleepQuietly(100);
-      found = by.findElements(this);
+      found = by.findElements(findBy);
     }
     return found;
   }

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -584,7 +584,8 @@ private CommandInfo(String url, HttpVerb verb) {
 
     public HttpUriRequest getMethod(URL base, Command command) {
       StringBuilder urlBuilder = new StringBuilder();
-      urlBuilder.append(base.toExternalForm());
+
+      urlBuilder.append(base.toExternalForm().replaceAll("/$", ""));
       for (String part : url.split("/")) {
         if (part.length() == 0) {
           continue;

File: java/server/src/org/openqa/grid/web/servlet/handler/RequestHandler.java
Patch:
@@ -140,7 +140,6 @@ public void process() {
           // any returned error will propagate to the
           // client, so there's no chance of this request ever succeeding.
           registry.removeNewSessionRequest(this);
-
           throw (new RuntimeException(e));
         }
 
@@ -215,7 +214,7 @@ public void waitForSessionBound() {
       // specify how long to wait before canceling
       // a request.
       if (registry.getNewSessionWaitTimeout() != -1) {
-        if (sessionAssigned.await(registry.getNewSessionWaitTimeout(), TimeUnit.MILLISECONDS)) {
+        if (!sessionAssigned.await(registry.getNewSessionWaitTimeout(), TimeUnit.MILLISECONDS)) {
           throw new RuntimeException("Request timed out waiting for a node to become available.");
         }
       } else {

File: java/server/src/org/openqa/grid/internal/Registry.java
Patch:
@@ -155,7 +155,7 @@ public void setCleanState() {
      * change could be either a new Proxy added, or a session requested/released
      */
     public void setDirty() {
-      this.cleanState = true;
+      this.cleanState = false;
     }
 
     /**

File: java/client/test/org/openqa/selenium/ClickScrollingTest.java
Patch:
@@ -35,7 +35,7 @@ public void testClickingOnAnchorScrollsPage() {
 
   }
 
-  @Ignore
+  @Ignore //TODO(danielwh): Unignore
   public void testShouldNotScrollIfAlreadyScrolledAndElementIsInView() {
     driver.get(appServer.whereIs("scroll3.html"));
     driver.findElement(By.id("button1")).click();

File: java/server/src/org/openqa/grid/web/servlet/DriverServlet.java
Patch:
@@ -36,6 +36,8 @@
 
 /**
  * entry point for all communication request sent by the clients to the remotes managed by the grid.
+ *
+ * Runs on the socketListener threads of the servlet container
  */
 public class DriverServlet extends RegistryBasedServlet {
 

File: java/client/test/com/thoughtworks/selenium/WebDriverSeleniumTestSuite.java
Patch:
@@ -39,6 +39,7 @@
 import com.thoughtworks.selenium.corebased.TestGoBack;
 import com.thoughtworks.selenium.corebased.TestHtmlSource;
 import com.thoughtworks.selenium.corebased.TestImplicitLocators;
+import com.thoughtworks.selenium.corebased.TestLocators;
 import com.thoughtworks.selenium.corebased.TestMultiSelect;
 import com.thoughtworks.selenium.corebased.TestOpen;
 import com.thoughtworks.selenium.corebased.TestOpenInTargetFrame;
@@ -80,6 +81,7 @@
     TestGoBack.class,
     TestHtmlSource.class,
     TestImplicitLocators.class,
+    TestLocators.class,
     TestMultiSelect.class,
     TestOpen.class,
     TestOpenInTargetFrame.class,

File: java/server/src/org/openqa/selenium/remote/server/DefaultSession.java
Patch:
@@ -131,6 +131,7 @@ public boolean isTimedOut(int timeout) {
   public void close() {
     executor.shutdown();
     tempFs.deleteTemporaryFiles();
+    tempFs.deleteBaseDir();
   }
 
   public <X> X execute(FutureTask<X> future) throws Exception {

File: java/client/src/org/openqa/selenium/internal/BuildInfo.java
Patch:
@@ -48,6 +48,7 @@ private static Properties loadBuildProperties() {
     } catch (NullPointerException ignored) {
     } catch (URISyntaxException ignored) {
     } catch (IOException ignored) {
+    } catch (IllegalArgumentException ignored) {
     }
 
     if (manifest == null) {

File: java/client/src/org/openqa/selenium/net/PortProber.java
Patch:
@@ -94,6 +94,9 @@ private static int createAcceptablePort() {
         FIRST_PORT = 1024;
         LAST_PORT = ephemeralRangeDetector.getLowestEphemeralPort() - 1;
       }
+      if (FIRST_PORT == LAST_PORT) {
+        return FIRST_PORT;
+      }
       final int randomInt = random.nextInt();
       final int portWithoutOffset = Math.abs(randomInt % (LAST_PORT - FIRST_PORT + 1));
       return portWithoutOffset + FIRST_PORT;

File: java/client/test/org/openqa/selenium/firefox/FirefoxProfileTest.java
Patch:
@@ -237,8 +237,6 @@ public void testBackslashedCharsArePreservedWhenConvertingToAndFromJson() throws
     Preferences parsedPrefs = parseUserPrefs(rebuilt);
 
     assertEquals(dir, parsedPrefs.getPreference("browser.download.dir"));
-    File layoutOnDisk = rebuilt.layoutOnDisk();
-    System.out.println(layoutOnDisk);
   }
 	  
   private void assertPreferenceValueEquals(String key, Object value) throws Exception {

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -104,9 +104,7 @@ public void testShouldFireMouseMoveEventWhenClicking() {
   }
 
   @JavascriptEnabled
-  @Ignore(
-      value = {SELENESE, HTMLUNIT},
-      reason = "HtmlUnit: See issue 2187")
+  @Ignore(SELENESE)
   public void testShouldNotThrowIfEventHandlerThrows() {
     driver.get(pages.javascriptPage);
 

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -33,6 +33,7 @@
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
+import static org.openqa.selenium.WaitingConditions.trimmedElementTextToEqual;
 
 import java.io.File;
 import java.io.IOException;
@@ -220,7 +221,7 @@ public void testShouldEmitClickEventWhenClickingOnATextInputElement() {
     assertThat(clicker.getAttribute("value"), equalTo("Clicked"));
   }
 
-  @Ignore({ANDROID, IE})
+  @Ignore({ANDROID})
   @JavascriptEnabled
   public void testShouldFireTwoClickEventsWhenClickingOnALabel() {
     driver.get(pages.javascriptPage);
@@ -234,7 +235,7 @@ public void testShouldFireTwoClickEventsWhenClickingOnALabel() {
     driver.findElement(By.id("labelForCheckbox")).click();
 
     WebElement result = driver.findElement(By.id("result"));
-    assertNotNull(waitFor(elementTextToEqual(result, "labelclick chboxclick")));
+    assertNotNull(waitFor(trimmedElementTextToEqual(result, "labelclick chboxclick")));
   }
 
   @Ignore(ANDROID)

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -220,7 +220,7 @@ public void testShouldEmitClickEventWhenClickingOnATextInputElement() {
     assertThat(clicker.getAttribute("value"), equalTo("Clicked"));
   }
 
-  @Ignore(ANDROID)
+  @Ignore({ANDROID, IE})
   @JavascriptEnabled
   public void testShouldFireTwoClickEventsWhenClickingOnALabel() {
     driver.get(pages.javascriptPage);

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -167,7 +167,6 @@ public void testShouldSetRelatedTargetForMouseOut() {
     fail("Must. Write. Meamingful. Test (but we don't fire mouse outs synthetically");
   }
 
-  //@Ignore(HTMLUNIT)
   public void testClickingLabelShouldSetCheckbox() {
     driver.get(pages.formPage);
 

File: java/client/src/org/openqa/selenium/firefox/internal/Executable.java
Patch:
@@ -158,8 +158,8 @@ private static File locateFirefoxBinaryFromPlatform() {
         // Do nothing
     }
 
-    return binary != null && binary.exists() ? binary : findBinary("firefox3", "firefox2",
-        "firefox");
+    return binary != null && binary.exists() ? binary : findBinary("firefox", "firefox3",
+        "firefox2");
   }
 
   private static File findExistingBinary(final ImmutableList<String> paths) {

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -167,7 +167,7 @@ public void testShouldSetRelatedTargetForMouseOut() {
     fail("Must. Write. Meamingful. Test (but we don't fire mouse outs synthetically");
   }
 
-  @Ignore(HTMLUNIT)
+  //@Ignore(HTMLUNIT)
   public void testClickingLabelShouldSetCheckbox() {
     driver.get(pages.formPage);
 

File: java/client/src/org/openqa/selenium/firefox/Preferences.java
Patch:
@@ -115,7 +115,7 @@ public void addTo(FirefoxProfile profile) {
   public void writeTo(Writer writer) throws IOException {
     for (Map.Entry<String, Object> pref : allPrefs.entrySet()) {
       writer.append("user_pref(\"").append(pref.getKey()).append("\", ");
-      writer.append(valueAsPreference(pref.getValue()));
+      writer.append(valueAsPreference(pref.getValue()).replaceAll("\\\\", "\\\\\\\\"));
       writer.append(");\n");
     }
   }
@@ -130,7 +130,7 @@ private String valueAsPreference(Object value) {
 
   private Object preferenceAsValue(String toConvert) {
     if (toConvert.startsWith("\"") && toConvert.endsWith("\"")) {
-      return toConvert.substring(1, toConvert.length() - 1);
+      return toConvert.substring(1, toConvert.length() - 1).replaceAll("\\\\\\\\", "\\\\");
     }
 
     if ("false".equals(toConvert) || "true".equals(toConvert)) {

File: java/server/src/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -624,6 +624,9 @@ protected String commandResultsLogMessage(String cmd, String sessionId, String r
         || SeleniumCoreCommand.CAPTURE_ENTIRE_PAGE_SCREENSHOT_ID.equals(cmd)) {
       return "Got result: [base64 encoded PNG] on session " + sessionId;
     }
+    if (SeleniumCoreCommand.GET_HTML_SOURCE_ID.equals(cmd)) {
+      return "Got result: [HTML source] on session " + sessionId;
+    }
     if (RetrieveLastRemoteControlLogsCommand.ID.equals(cmd)) {
       /* Trim logs to avoid Larsen effect (see remote control stability tests) */
       trucatedResults = results.length() > 30 ? results.substring(0, 30) : results;

File: java/server/src/org/openqa/selenium/server/commands/SeleniumCoreCommand.java
Patch:
@@ -13,6 +13,7 @@ public class SeleniumCoreCommand extends Command {
 
 
   public static final String CAPTURE_ENTIRE_PAGE_SCREENSHOT_ID = "captureEntirePageScreenshot";
+  public static final String GET_HTML_SOURCE_ID = "getHtmlSource";
   private static final Logger log = Logger.getLogger(SeleniumCoreCommand.class.getName());
   private final String id;
   private final List<String> values;

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -344,7 +344,7 @@ public void testUploadingFileShouldFireOnChangeEvent() throws IOException {
 
     uploadElement.sendKeys(file.getAbsolutePath());
     // Shift focus to something else because send key doesn't make the focus leave
-    driver.findElement(By.tagName("id-name1")).click();
+    driver.findElement(By.id("id-name1")).click();
 
     assertThat(result.getText(), equalTo("changed"));
   }

File: java/client/src/org/openqa/selenium/support/FindBy.java
Patch:
@@ -44,7 +44,7 @@
  * 
  * <pre class="code">
  * @FindBy(tagName = "a") List<WebElement> links;
- * @FindBy(how = How.TAG_NAME, using = "a") WebElement links;
+ * @FindBy(how = How.TAG_NAME, using = "a") List<WebElement> links;
  * </pre>
  */
 @Retention(RetentionPolicy.RUNTIME)

File: java/client/src/org/openqa/selenium/support/FindBys.java
Patch:
@@ -28,7 +28,7 @@
  * 
  * Eg:
  * 
- * @FindBy({@FindBy(how = How.ID, using = "foo"),
+ * @FindBys({@FindBy(how = How.ID, using = "foo"),
  * @FindBy(how = How.CLASS_NAME, using = "bar")})
  */
 @Retention(RetentionPolicy.RUNTIME)

File: java/client/src/org/openqa/selenium/support/pagefactory/ElementLocator.java
Patch:
@@ -17,8 +17,11 @@
 
 package org.openqa.selenium.support.pagefactory;
 
+import java.util.List;
+
 import org.openqa.selenium.WebElement;
 
 public interface ElementLocator {
   WebElement findElement();
+  List<WebElement> findElements();
 }

File: java/client/test/org/openqa/selenium/support/SmallTests.java
Patch:
@@ -23,6 +23,7 @@
 import org.openqa.selenium.support.pagefactory.DefaultElementLocatorTest;
 import org.openqa.selenium.support.pagefactory.DefaultFieldDecoratorTest;
 import org.openqa.selenium.support.pagefactory.internal.LocatingElementHandlerTest;
+import org.openqa.selenium.support.pagefactory.internal.LocatingElementListHandlerTest;
 import org.openqa.selenium.support.ui.FluentWaitTest;
 import org.openqa.selenium.support.ui.LoadableComponentTest;
 import org.openqa.selenium.support.ui.SelectTest;
@@ -43,6 +44,7 @@
     FluentWaitTest.class,
     LoadableComponentTest.class,
     LocatingElementHandlerTest.class,
+    LocatingElementListHandlerTest.class,
     PageFactoryTest.class,
     SelectTest.class,
     SlowLoadableComponentTest.class,

File: java/client/test/org/openqa/selenium/support/pagefactory/internal/LocatingElementHandlerTest.java
Patch:
@@ -120,6 +120,7 @@ public static class Page {
     protected WebElement query;
 
     @SuppressWarnings("unused")
+    @FindBy(how = How.XPATH, using = "//input[@name='q']")
     @CacheLookup
     private WebElement staysTheSame;
 

File: java/client/src/org/openqa/selenium/remote/DriverCommand.java
Patch:
@@ -51,6 +51,7 @@ public interface DriverCommand {
   String SEND_KEYS_TO_ELEMENT = "sendKeysToElement";
   String SEND_MODIFIER_KEY_TO_ACTIVE_ELEMENT = "sendModifierKeyToActiveElement";
   String SUBMIT_ELEMENT = "submitElement";
+  String UPLOAD_FILE = "uploadFile";
 
   String GET_CURRENT_WINDOW_HANDLE = "getCurrentWindowHandle";
   String GET_WINDOW_HANDLES = "getWindowHandles";

File: java/client/src/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -149,6 +149,7 @@
 import static org.openqa.selenium.remote.DriverCommand.TOUCH_SCROLL;
 import static org.openqa.selenium.remote.DriverCommand.TOUCH_SINGLE_TAP;
 import static org.openqa.selenium.remote.DriverCommand.TOUCH_UP;
+import static org.openqa.selenium.remote.DriverCommand.UPLOAD_FILE;
 
 public class HttpCommandExecutor implements CommandExecutor {
 
@@ -252,6 +253,7 @@ public HttpCommandExecutor(URL addressOfRemoteServer) {
         .put(SUBMIT_ELEMENT, post("/session/:sessionId/element/:id/submit"))
         .put(GET_ELEMENT_TEXT, get("/session/:sessionId/element/:id/text"))
         .put(SEND_KEYS_TO_ELEMENT, post("/session/:sessionId/element/:id/value"))
+        .put(UPLOAD_FILE, post("/session/:sessionId/file"))
         .put(GET_ELEMENT_VALUE, get("/session/:sessionId/element/:id/value"))
         .put(GET_ELEMENT_TAG_NAME, get("/session/:sessionId/element/:id/name"))
         .put(IS_ELEMENT_SELECTED, get("/session/:sessionId/element/:id/selected"))

File: java/client/src/org/openqa/selenium/remote/internal/JsonToWebElementConverter.java
Patch:
@@ -23,6 +23,7 @@
 import com.google.common.collect.Maps;
 
 import org.openqa.selenium.WebElement;
+import org.openqa.selenium.remote.FileDetector;
 import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.remote.RemoteWebElement;
 
@@ -51,6 +52,7 @@ public Object apply(Object result) {
       if (resultAsMap.containsKey("ELEMENT")) {
         RemoteWebElement element = newRemoteWebElement();
         element.setId(String.valueOf(resultAsMap.get("ELEMENT")));
+        element.setFileDetector(driver.getFileDetector());
         return element;
       } else {
         return Maps.transformValues(resultAsMap, this);

File: java/client/test/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -85,7 +85,8 @@ public static Test suite() throws Exception {
         .exclude(ALL)
         .exclude(EXCLUSIONS_BY_DRIVER.get(driver))
         .outputTestNames()
-        .leaveRunning(); // Yeah, this look strange :)
+        .leaveRunning()
+        ; // Yeah, this look strange :)
 
     if (REMOTE.equals(driver) || REMOTE_IE.equals(driver)) {
       builder.addSuiteDecorator(

File: java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java
Patch:
@@ -17,11 +17,12 @@
 
 package org.openqa.selenium.remote.server.handler;
 
+import com.google.common.collect.Lists;
+
 import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.rest.ResultType;
 
-import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -37,7 +38,7 @@ public SendKeys(Session session) {
   @SuppressWarnings({"unchecked"})
   public void setJsonParameters(Map<String, Object> allParameters) throws Exception {
     List<String> rawKeys = (List<String>) allParameters.get("value");
-    List<String> temp = new ArrayList<String>();
+    List<String> temp = Lists.newArrayList();
     for (String key : rawKeys) {
       temp.add(key);
     }

File: java/server/test/org/openqa/selenium/remote/server/RemoteWebDriverTestSuite.java
Patch:
@@ -29,6 +29,7 @@
 import org.openqa.selenium.internal.InProject;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.HttpRequest;
+import org.openqa.selenium.remote.LocalFileDetector;
 import org.openqa.selenium.remote.RemoteWebDriver;
 
 import junit.extensions.TestSetup;
@@ -73,6 +74,8 @@ public static Test suite() throws Exception {
   public static class RemoteWebDriverForTest extends RemoteWebDriver {
     public RemoteWebDriverForTest() throws Exception {
       super(new URL("http://localhost:6000/common/hub"), DesiredCapabilities.firefox());
+      // Use the local file detector so that we exercise the file upload paths
+      setFileDetector(new LocalFileDetector());
     }
   }
 

File: java/client/src/org/openqa/selenium/browserlaunchers/AsyncExecute.java
Patch:
@@ -69,6 +69,7 @@ public static int killProcess(Process process) {
     int exitValue;
     try {
       exitValue = ProcessUtils.waitForProcessDeath(process, 10000);
+      ProcessUtils.closeAllStreamsAndDestroyProcess( process);
     } catch (ProcessUtils.ProcessStillAliveException ex) {
       if (WindowsUtils.thisIsWindows()) {
         throw ex;
@@ -77,6 +78,7 @@ public static int killProcess(Process process) {
         log.info("Process didn't die after 10 seconds");
         UnixUtils.kill9(process);
         exitValue = ProcessUtils.waitForProcessDeath(process, 10000);
+        ProcessUtils.closeAllStreamsAndDestroyProcess( process);
       } catch (Exception e) {
         log.log(Level.SEVERE, "Process refused to die after 10 seconds, and couldn't kill9 it", e);
         throw new RuntimeException(

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -483,9 +483,7 @@ public static FirefoxProfile fromJson(String json) throws IOException {
 
     new Zip().unzip(json, dir);
 
-    FirefoxProfile firefoxProfile = new FirefoxProfile(dir);
-    TemporaryFilesystem.getDefaultTmpFS().deleteTempDir(dir);
-    return firefoxProfile;
+    return new FirefoxProfile(dir);
   }
 
   /**

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -262,7 +262,8 @@ public void setPreference(String key, int value) {
 
   private static void checkPreference(String key, Object value) {
     checkNotNull(value);
-    checkArgument(!FROZEN_PREFERENCES.containsKey(key),
+    checkArgument(!FROZEN_PREFERENCES.containsKey(key) ||
+      (FROZEN_PREFERENCES.containsKey(key) && value.equals(FROZEN_PREFERENCES.get(key))),
         "Preference %s may not be overridden: frozen value=%s, requested value=%s",
         key, FROZEN_PREFERENCES.get(key), value);
     if (MAX_SCRIPT_RUN_TIME_KEY.equals(key)) {

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTestSuite.java
Patch:
@@ -50,6 +50,7 @@ public static Test suite() throws Exception {
 
     return new TestSuiteBuilder()
         .addSourceDir("java/client/test")
+//        .addSourceDir("java/client/test/org/openqa/selenium/firefox") Haven't been running for a while, apparently, and some of them don't pass now...
         .usingDriver(FirefoxDriver.class)
         .exclude(FIREFOX)
         .keepDriverInstance()

File: java/client/src/org/openqa/selenium/ie/InternetExplorerDriverServer.java
Patch:
@@ -93,6 +93,9 @@ private static IEServer initializeLib() {
           sourcePaths.add("build\\cpp\\" + arch + "\\Debug");
           sourcePaths.add("..\\build\\cpp\\" + arch + "\\Debug");
           sourcePaths.add("..\\..\\build\\cpp\\" + arch + "\\Debug");
+          sourcePaths.add("build\\cpp\\" + arch + "\\Release");
+          sourcePaths.add("..\\build\\cpp\\" + arch + "\\Release");
+          sourcePaths.add("..\\..\\build\\cpp\\" + arch + "\\Release");
           boolean copied = false;
           for (String path : sourcePaths) {
             File sourceFile = new File(path, "IEDriver.dll");

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -431,7 +431,7 @@ public boolean isSelected() {
     if (element instanceof HtmlInput) {
       return ((HtmlInput) element).isChecked();
     } else if (element instanceof HtmlOption) {
-      return ((HtmlOption) element).hasAttribute("selected");
+      return ((HtmlOption) element).isSelected();
     }
 
     throw new UnsupportedOperationException(

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -218,7 +218,7 @@ public void clear() {
       if (htmlInput.isDisabled()) {
         throw new InvalidElementStateException("You may only interact with enabled elements");
       }
-      ((HtmlInput) element).setValueAttribute("");
+      htmlInput.setValueAttribute("");
     } else if (element instanceof HtmlTextArea) {
       HtmlTextArea htmlTextArea = (HtmlTextArea) element;
       if (htmlTextArea.isReadOnly()) {
@@ -227,7 +227,7 @@ public void clear() {
       if (htmlTextArea.isDisabled()) {
         throw new InvalidElementStateException("You may only interact with enabled elements");
       }
-      ((HtmlTextArea) element).setText("");
+      htmlTextArea.setText("");
     }
   }
 

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -482,7 +482,9 @@ public static FirefoxProfile fromJson(String json) throws IOException {
 
     new Zip().unzip(json, dir);
 
-    return new FirefoxProfile(dir);
+    FirefoxProfile firefoxProfile = new FirefoxProfile(dir);
+    TemporaryFilesystem.getDefaultTmpFS().deleteTempDir(dir);
+    return firefoxProfile;
   }
 
   /**

File: java/client/test/org/openqa/selenium/browserlaunchers/LauncherUtilsUnitTest.java
Patch:
@@ -32,6 +32,7 @@ private File createFileWithData(String parentDirName, String fileName, String da
       throws IOException {
     File tempDir = File.createTempFile("LauncherUtilsUnitTest", "dir");
     tempDir.delete();
+    tempDir.deleteOnExit();
 
     File parentDir = new File(tempDir, parentDirName);
     parentDir.deleteOnExit();

File: java/client/src/org/openqa/selenium/browserlaunchers/locators/SingleBrowserLocator.java
Patch:
@@ -95,7 +95,7 @@ protected String couldNotFindAnyInstallationMessage() {
         "Please add the directory containing '" + humanFriendlyLauncherFileNames() +
         "' to your PATH environment\n" +
         "variable, or explicitly specify a path to " + browserName() + " like this:\n" +
-        "*" + seleniumBrowserName() + fakeLauncherPath();
+        "*" + seleniumBrowserName() + " " + fakeLauncherPath();
   }
 
   protected String fakeLauncherPath() {

File: java/server/src/org/openqa/selenium/server/cli/RemoteControlLauncher.java
Patch:
@@ -92,7 +92,7 @@ public static RemoteControlConfiguration parseLauncherOptions(String[] args) {
     configuration.setPort(RemoteControlConfiguration.getDefaultPort());
     for (int i = 0; i < args.length; i++) {
       String arg = args[i];
-      if ("-help".equalsIgnoreCase(arg)) {
+      if ("-h".equalsIgnoreCase(arg) || "-help".equalsIgnoreCase(arg)) {
         usage(null);
         System.exit(1);
       } else if ("-defaultBrowserString".equalsIgnoreCase(arg)) {

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -169,6 +169,7 @@ public void testShouldNotHangIfDocumentOpenCallIsNeverFollowedByDocumentCloseCal
     driver.get(pages.documentWrite);
 
     // If this command succeeds, then all is well.
-    driver.findElement(By.xpath("//body"));
+    WebElement body = driver.findElement(By.tagName("body"));
+    waitFor(WaitingConditions.elementTextToContain(body, "world"));
   }
 }

File: java/server/test/org/openqa/grid/internal/RegistryTest.java
Patch:
@@ -115,7 +115,7 @@ public void emptyRegistryParam() {
 
   }
 
-  @Test(expected = CapabilityNotPresentOnTheGridException.class)
+  @Test(expected = RuntimeException.class)
   public void CapabilityNotPresentRegistry() throws Throwable {
     Registry registry = Registry.newInstance();
     try {

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -85,9 +85,9 @@ public Hub(GridHubConfiguration config) {
       try {
         Handler logFile = new FileHandler(new File(logFilename).getAbsolutePath(), true);
         logFile.setFormatter(new TerseFormatter(true));
-        logFile.setLevel(Level.FINE);
+        logFile.setLevel(Level.INFO);
 
-        Logger.getLogger("").setLevel(Level.FINE);
+        Logger.getLogger("").setLevel(Level.INFO);
         Logger.getLogger("").addHandler(logFile);
       } catch (IOException e) {
         throw new RuntimeException(e);

File: java/server/src/org/openqa/selenium/remote/server/handler/DeleteSession.java
Patch:
@@ -38,7 +38,6 @@ public ResultType call() throws Exception {
 
     // Yes, this is funky. See javadocs on PerSessionLogHandler#clearThreadTempLogs for details.
     final PerSessionLogHandler logHandler = LoggingManager.perSessionLogHandler();
-    if (logHandler != null) {
       /*
           We may be storing logging information on 2 different threads, the servlet container
           thread and the thread executing commands
@@ -48,8 +47,7 @@ public ResultType call() throws Exception {
           Additionally; if we ever get non-session bound logging here, it will come in
           the incorrect order. But that should only happen on create/delete, right ?
        */
-      logHandler.transferThreadTempLogsToSessionLogs(getSessionId());
-    }
+    logHandler.transferThreadTempLogsToSessionLogs(getSessionId());
     return ResultType.SUCCESS;
   }
 

File: java/server/test/org/openqa/selenium/server/log/DefaultPerSessionLogHandlerUnitTest.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * {@link org.openqa.selenium.server.log.PerSessionLogHandler} unit test class.
  */
-public class PerSessionLogHandlerUnitTest extends TestCase {
+public class DefaultPerSessionLogHandlerUnitTest extends TestCase {
 
   private static final int CAPACITY = 1;
 
@@ -112,11 +112,11 @@ private void assertMessagesLoggedForSessionId(PerSessionLogHandler handler,
 
   private void assertNoMessageLoggedForSessionId(
       PerSessionLogHandler handler, String sessionId) throws IOException {
-    assertMessagesLoggedForSessionId(handler, sessionId, new String[0]);
+    assertMessagesLoggedForSessionId(handler, sessionId);
   }
 
   private PerSessionLogHandler createPerSessionLogHandler() {
-    return new PerSessionLogHandler(CAPACITY, Level.INFO,
+    return new DefaultPerSessionLogHandler(CAPACITY, Level.INFO,
                                     new FormatterStub());
   }
 

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -227,11 +227,11 @@ public Boolean call() throws Exception {
     });
 
     if (displayed == null || !displayed.booleanValue()) {
-      throw new ElementNotVisibleException("You may only sendKeys to visible elements");
+      throw new ElementNotVisibleException("You may only interact with visible elements");
     }
 
     if (!isEnabled()) {
-      throw new InvalidElementStateException("You may only sendKeys to enabled elements");
+      throw new InvalidElementStateException("You may only interact with enabled elements");
     }
   }
 

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -39,10 +39,11 @@
 import java.io.UnsupportedEncodingException;
 import java.net.MalformedURLException;
 import java.net.URL;
+import java.util.Collections;
 import java.util.Enumeration;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Logger;
 
 import javax.servlet.http.HttpServletRequest;
@@ -64,7 +65,7 @@ public class TestSession {
   private volatile long sessionCreatedAt;
   private volatile long lastActivity;
   private final Map<String, Object> requestedCapabilities;
-  private Map<String, Object> objects = new ConcurrentHashMap<String, Object>();
+  private Map<String, Object> objects = Collections.synchronizedMap(new HashMap<String, Object>());
   private volatile boolean ignoreTimeout = false;
 
   public String getInternalKey() {

File: java/server/test/org/openqa/grid/internal/SessionTimesOutTest.java
Patch:
@@ -191,6 +191,8 @@ public MyStupidConfig(RegistrationRequest request, Registry registry) {
 
     public void beforeRelease(TestSession session) {
       session.put("FLAG", true);
+      session.put("MustSupportNullValue", null);
+      session.put(null, "MustSupportNullKey");
     }
   }
 

File: java/server/src/org/openqa/selenium/server/log/PerSessionLogHandler.java
Patch:
@@ -92,7 +92,9 @@ public synchronized void close() throws SecurityException {
   private LogRecord[] records(String sessionId) throws IOException {
     List<LogRecord> logFileRecords = logFileRepository.getLogRecords(sessionId);
     List<LogRecord> records = perSessionRecords.get(sessionId);
-    logFileRecords.addAll(records);
+    if (records != null) {
+      logFileRecords.addAll(records);
+    }
     return logFileRecords.toArray(new LogRecord[logFileRecords.size()]);
   }
 

File: java/client/src/com/thoughtworks/selenium/SeleneseTestBase.java
Patch:
@@ -169,7 +169,7 @@ public void verifyEquals(Object s1, Object s2) {
   /** Like assertEquals, but fails at the end of the test (during tearDown) */
   public void verifyEquals(boolean s1, boolean s2) {
     try {
-      assertEquals(new Boolean(s1), new Boolean(s2));
+      assertEquals(Boolean.valueOf(s1), Boolean.valueOf(s2));
     } catch (Error e) {
       verificationErrors.append(throwableToString(e));
     }

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -638,7 +638,7 @@ public WebElement findElementByCssSelector(String using) {
 
     allElements = findChildNodes(allElements);
 
-    if (allElements.size() == 0) {
+    if (allElements.isEmpty()) {
       throw new NoSuchElementException("Cannot find child element using css: " + using);
     }
 
@@ -737,7 +737,7 @@ public WebElement findElementByPartialLinkText(String linkText) {
     assertElementNotStale();
 
     List<WebElement> elements = findElementsByPartialLinkText(linkText);
-    if (elements.size() == 0) {
+    if (elements.isEmpty()) {
       throw new NoSuchElementException(
           "Unable to find element with linkText " + linkText);
     }
@@ -762,7 +762,7 @@ public WebElement findElementByTagName(String name) {
     assertElementNotStale();
 
     List<WebElement> elements = findElementsByTagName(name);
-    if (elements.size() == 0) {
+    if (elements.isEmpty()) {
       throw new NoSuchElementException("Cannot find element with tag name: " + name);
     }
     return elements.get(0);

File: java/client/src/org/openqa/selenium/remote/Augmenter.java
Patch:
@@ -251,7 +251,7 @@ public Set<Class<?>> getInterfaces() {
     }
 
     public boolean isNeedingApplication() {
-      return interfaces.size() > 0;
+      return !interfaces.isEmpty();
     }
 
     public Object intercept(Object self, Method method, Object[] args, MethodProxy methodProxy)

File: java/client/src/org/openqa/selenium/remote/ExecuteMethod.java
Patch:
@@ -41,7 +41,7 @@ public ExecuteMethod(RemoteWebDriver driver) {
   public Object execute(String commandName, Map<String, ?> parameters) {
     Response response;
 
-    if (parameters == null || parameters.size() == 0) {
+    if (parameters == null || parameters.isEmpty()) {
       response = driver.execute(commandName);
     } else {
       response = driver.execute(commandName, parameters);

File: java/client/src/org/openqa/selenium/support/pagefactory/ByChained.java
Patch:
@@ -46,7 +46,7 @@ public ByChained(By... bys) {
   @Override
   public WebElement findElement(SearchContext context) {
     List<WebElement> elements = findElements(context);
-    if (elements.size() == 0)
+    if (elements.isEmpty())
       throw new NoSuchElementException("Cannot locate an element using " + toString());
     return elements.get(0);
   }

File: java/client/src/org/openqa/selenium/support/ui/Select.java
Patch:
@@ -121,7 +121,7 @@ public void selectByVisibleText(String text) {
       matched = true;
     }
 
-    if (options.size() == 0 && text.contains(" ")) {
+    if (options.isEmpty() && text.contains(" ")) {
       String subStringWithoutSpace = getLongestSubstringWithoutSpace(text);
       List<WebElement> candidates;
       if ("".equals(subStringWithoutSpace)) {

File: java/client/test/org/openqa/selenium/remote/HttpRequest.java
Patch:
@@ -39,16 +39,14 @@ public HttpRequest(Method method, String url, Object payload) throws Exception {
 
       post.setEntity(new StringEntity(content, "UTF-8"));
 
-      final DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
       try {
-        HttpResponse res = defaultHttpClient.execute(post);
+        HttpResponse res = new DefaultHttpClient().execute(post);
         HttpEntity httpEntity = res.getEntity();
         if (httpEntity != null) {
           this.response = EntityUtils.toString(httpEntity);
         }
       } finally {
         post.abort();
-        defaultHttpClient.getConnectionManager().shutdown();
       }
     } else {
       throw new UnsupportedOperationException("Unsupported method: " + method);

File: java/client/test/org/openqa/selenium/remote/HttpRequest.java
Patch:
@@ -39,14 +39,16 @@ public HttpRequest(Method method, String url, Object payload) throws Exception {
 
       post.setEntity(new StringEntity(content, "UTF-8"));
 
+      final DefaultHttpClient defaultHttpClient = new DefaultHttpClient();
       try {
-        HttpResponse res = new DefaultHttpClient().execute(post);
+        HttpResponse res = defaultHttpClient.execute(post);
         HttpEntity httpEntity = res.getEntity();
         if (httpEntity != null) {
           this.response = EntityUtils.toString(httpEntity);
         }
       } finally {
         post.abort();
+        defaultHttpClient.getConnectionManager().shutdown();
       }
     } else {
       throw new UnsupportedOperationException("Unsupported method: " + method);

File: java/server/src/org/openqa/selenium/remote/server/rest/ResultConfig.java
Patch:
@@ -206,7 +206,8 @@ public ResultType call() throws Exception {
         // Yes, this is funky. See javadoc on cleatThreadTempLogs for details.
         final PerSessionLogHandler logHandler = LoggingManager.perSessionLogHandler();
         if (logHandler != null) {
-          logHandler.clearThreadTempLogs(Thread.currentThread().getId());
+          logHandler.transferThreadTempLogsToSessionLogs(sessionId);
+          logHandler.removeSessionLogs(sessionId);
         }
         sessions.deleteSession(sessId);
       }

File: java/server/src/org/openqa/grid/internal/Registry.java
Patch:
@@ -16,6 +16,7 @@
 
 package org.openqa.grid.internal;
 
+import net.jcip.annotations.ThreadSafe;
 import org.openqa.grid.common.exception.CapabilityNotPresentOnTheGridException;
 import org.openqa.grid.internal.listeners.Prioritizer;
 import org.openqa.grid.internal.listeners.RegistrationListener;
@@ -42,6 +43,7 @@
  * Kernel of the grid. Keeps track of what's happening, what's free/used and assigned resources to
  * incoming requests.
  */
+@ThreadSafe
 public class Registry {
 
   public static final String KEY = Registry.class.getName();

File: java/server/test/org/openqa/grid/internal/listener/SessionListenerTest.java
Patch:
@@ -239,7 +239,9 @@ public void doubleRelease() throws InterruptedException {
     req.setConfiguration(config);
 
     Registry registry = Registry.newInstance();
-    registry.add(new SlowAfterSession(req, registry));
+    final SlowAfterSession proxy = new SlowAfterSession(req, registry);
+    proxy.setupTimeoutListener();
+    registry.add(proxy);
 
     MockedNewSessionRequestHandler r = new MockedNewSessionRequestHandler(registry, app1);
     r.process();

File: java/server/src/org/openqa/jetty/servlet/AdminServlet.java
Patch:
@@ -29,7 +29,6 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.commons.logging.Log;
-import org.openqa.jetty.log.LogFactory;
 import org.openqa.jetty.html.Block;
 import org.openqa.jetty.html.Break;
 import org.openqa.jetty.html.Composite;
@@ -50,6 +49,7 @@
 import org.openqa.jetty.http.HttpServer;
 import org.openqa.jetty.http.PathMap;
 import org.openqa.jetty.jetty.servlet.ServletHandler;
+import org.openqa.jetty.log.LogFactory;
 import org.openqa.jetty.util.LifeCycle;
 import org.openqa.jetty.util.LogSupport;
 import org.openqa.jetty.util.URI;
@@ -86,7 +86,7 @@ private String doAction(HttpServletRequest request)
         String action=request.getParameter("A");
         if ("exit all servers".equalsIgnoreCase(action))
         {
-            new Thread(new Runnable()
+            new Thread(new Runnable() // Thread safety reviewed
                 {
                     public void run()
                     {

File: java/server/src/org/openqa/jetty/servlet/CGI.java
Patch:
@@ -29,8 +29,8 @@
 import javax.servlet.http.HttpServletResponse;
 
 import org.apache.commons.logging.Log;
-import org.openqa.jetty.log.LogFactory;
 import org.openqa.jetty.http.HttpFields;
+import org.openqa.jetty.log.LogFactory;
 import org.openqa.jetty.util.IO;
 import org.openqa.jetty.util.LineInput;
 import org.openqa.jetty.util.LogSupport;
@@ -255,7 +255,7 @@ private void exec(File command,
         final OutputStream outToCgi=p.getOutputStream();
         final int inputLength = req.getContentLength();
 
-        new Thread(new Runnable()
+        new Thread(new Runnable()  // Thread safety reviewed
             {
                 public void run()
                 {

File: java/server/src/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -483,7 +483,7 @@ public static void setCustomProxyHandler(ProxyHandler customProxyHandler) {
   }
 
   private class ShutDownHook implements Runnable {
-    SeleniumServer selenium;
+    private final SeleniumServer selenium;
 
     ShutDownHook(SeleniumServer selenium) {
       this.selenium = selenium;

File: java/server/src/org/openqa/selenium/server/browserlaunchers/MockBrowserLauncher.java
Patch:
@@ -29,8 +29,8 @@ public class MockBrowserLauncher implements BrowserLauncher, Runnable {
   static Logger log = Logger.getLogger(MockBrowserLauncher.class.getName());
   private final String sessionId;
   private Thread browser;
-  private boolean interrupted = false;
-  private String uniqueId;
+  private volatile boolean interrupted = false;
+  private final String uniqueId;
   private int sequenceNumber = 0;
   private final RemoteControlConfiguration configuration;
   private final Capabilities browserOptions;
@@ -175,7 +175,7 @@ private String doBrowserRequest(String url, String body) throws IOException {
    * supported for IE
    */
   public void launchRemoteSession(String url) {
-    browser = new Thread(this);
+    browser = new Thread(this); // Thread safety reviewed
     browser.setName("mockbrowser");
     if (null != url) {
       browser.start();

File: java/server/test/org/openqa/grid/internal/AddingProxyAgainFreesResources.java
Patch:
@@ -55,7 +55,7 @@ public static void setup() throws InterruptedException {
 
     // add the request to the queue
     final MockedRequestHandler req = request;
-    new Thread(new Runnable() {
+    new Thread(new Runnable() { // Thread safety reviewed
       public void run() {
         req.process();
       }

File: java/server/test/org/openqa/grid/internal/DefaultToFIFOPriorityTest.java
Patch:
@@ -65,7 +65,7 @@ public static void setup() throws InterruptedException {
     // fill the queue with MAX requests.
     for (MockedRequestHandler h : requests) {
       final MockedRequestHandler req = h;
-      new Thread(new Runnable() {
+      new Thread(new Runnable() {  // Thread safety reviewed
         public void run() {
           req.process();
         }

File: java/server/test/org/openqa/grid/internal/PriorityTest.java
Patch:
@@ -96,7 +96,7 @@ public static void setup() throws InterruptedException {
     // fill the queue with 5 requests.
     for (MockedRequestHandler h : requests) {
       final MockedRequestHandler req = h;
-      new Thread(new Runnable() {
+      new Thread(new Runnable() {  // Thread safety reviewed
         public void run() {
           req.process();
         }

File: java/server/test/org/openqa/grid/internal/PriorityTestLoad.java
Patch:
@@ -70,7 +70,7 @@ public static void setup() throws InterruptedException {
     // and keep adding request in the queue.
     for (MockedRequestHandler h : requests) {
       final MockedRequestHandler req = h;
-      new Thread(new Runnable() {
+      new Thread(new Runnable() {  // Thread safety reviewed
         public void run() {
           req.process();
           reqDone = true;
@@ -87,7 +87,7 @@ public void run() {
     session.terminateSynchronousFOR_TEST_ONLY();
   }
 
-  private static boolean reqDone = false;
+  private static volatile boolean reqDone = false;
 
 
   // validate that the one with priority MAX has been assigned a proxy

File: java/client/src/com/thoughtworks/selenium/BrowserConfigurationOptions.java
Patch:
@@ -37,7 +37,7 @@ public BrowserConfigurationOptions() {}
      * @return true if any options are set in this instance.
      */
     public boolean hasOptions() {
-      return options.size() > 0;
+        return !options.isEmpty();
     }
     
     /**

File: java/client/src/org/openqa/selenium/By.java
Patch:
@@ -169,7 +169,7 @@ public static By cssSelector(final String selector) {
    */
   public WebElement findElement(SearchContext context) {
     List<WebElement> allElements = findElements(context);
-    if (allElements == null || allElements.size() == 0)
+    if (allElements == null || allElements.isEmpty())
       throw new NoSuchElementException("Cannot locate an element using "
           + toString());
     return allElements.get(0);

File: java/client/src/org/openqa/selenium/SeleneseCommandExecutor.java
Patch:
@@ -80,11 +80,9 @@
 import org.openqa.selenium.internal.selenesedriver.QuitSelenium;
 import org.openqa.selenium.internal.selenesedriver.SeleneseFunction;
 import org.openqa.selenium.internal.selenesedriver.SendKeys;
-import org.openqa.selenium.internal.selenesedriver.SetElementSelected;
 import org.openqa.selenium.internal.selenesedriver.SubmitElement;
 import org.openqa.selenium.internal.selenesedriver.SwitchToFrame;
 import org.openqa.selenium.internal.selenesedriver.TakeScreenshot;
-import org.openqa.selenium.internal.selenesedriver.ToggleElement;
 import org.openqa.selenium.remote.BeanToJsonConverter;
 import org.openqa.selenium.remote.Command;
 import org.openqa.selenium.remote.CommandExecutor;

File: java/client/src/org/openqa/selenium/browserlaunchers/MacProxyManager.java
Patch:
@@ -487,7 +487,6 @@ public String toString() {
                 .append(", authenticated=").append(authenticated)
                 .append(", bypass=").append(Arrays.toString(bypass))
                 .append("}");
-                ;
             return sb.toString();
         }
     }

File: java/client/src/org/openqa/selenium/firefox/FirefoxWebElement.java
Patch:
@@ -19,7 +19,6 @@
 package org.openqa.selenium.firefox;
 
 import org.openqa.selenium.WebElement;
-import org.openqa.selenium.internal.WrapsElement;
 import org.openqa.selenium.remote.RemoteWebElement;
 
 public class FirefoxWebElement extends RemoteWebElement implements WebElement {

File: java/client/src/org/openqa/selenium/firefox/internal/NewProfileExtensionConnection.java
Patch:
@@ -20,15 +20,12 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.net.BindException;
 import java.net.InetSocketAddress;
 import java.net.MalformedURLException;
 import java.net.Socket;
 import java.net.URL;
 
-import com.google.common.io.Closeables;
 import org.openqa.selenium.internal.Lock;
-import org.openqa.selenium.io.Cleanly;
 import org.openqa.selenium.net.NetworkUtils;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.firefox.ExtensionConnection;

File: java/client/src/org/openqa/selenium/interactions/internal/SingleKeyAction.java
Patch:
@@ -17,9 +17,10 @@
 
 package org.openqa.selenium.interactions.internal;
 
-import org.openqa.selenium.*;
+import org.openqa.selenium.Keyboard;
+import org.openqa.selenium.Keys;
+import org.openqa.selenium.Mouse;
 import org.openqa.selenium.internal.Locatable;
-import org.openqa.selenium.interactions.internal.KeysRelatedAction;
 
 /**
  * Used both by KeyDownAction and KeyUpAction

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/FindFirstSelectedOptionProperty.java
Patch:
@@ -39,10 +39,10 @@ public FindFirstSelectedOptionProperty(JavascriptLibrary library, ElementFinder
 
   @Override
   protected String handleSeleneseCommand(WebDriver driver, String selectLocator, String ignored) {
-SeleniumSelect select = new SeleniumSelect(library, finder, driver, selectLocator);
+    SeleniumSelect select = new SeleniumSelect(library, finder, driver, selectLocator);
     List<WebElement> allOptions = select.getSelectedOptions();
 
-    if (allOptions.size() == 0) {
+    if (allOptions.isEmpty()) {
       throw new SeleniumException("No options are selected: " + selectLocator);
     }
 

File: java/client/src/org/openqa/selenium/io/TemporaryFilesystem.java
Patch:
@@ -17,12 +17,11 @@
 
 package org.openqa.selenium.io;
 
-import org.openqa.selenium.WebDriverException;
-
 import java.io.File;
 import java.io.IOException;
 import java.util.Set;
 import java.util.concurrent.CopyOnWriteArraySet;
+import org.openqa.selenium.WebDriverException;
 
 /**
  * A wrapper around temporary filesystem behaviour.

File: java/client/test/com/thoughtworks/selenium/HttpCommandProcessorUnitTest.java
Patch:
@@ -56,7 +56,7 @@ public void testResourcesClosedWhenIoeOnGetOutputStream() {
 				"localhost", 4444, "*chrome", "http://www.google.com");
 		cmdProc.throwIoeOnGetOutputStream = true;
 		try {
-			String response = cmdProc.getCommandResponseAsString("testCommand");
+			cmdProc.getCommandResponseAsString("testCommand");
 			fail();
 		} catch (IOException ioe) {
 			cmdProc.verifyClosedResources(true, false, false);

File: java/client/test/com/thoughtworks/selenium/SeleniumServerTestSuite.java
Patch:
@@ -17,7 +17,6 @@
 
 package com.thoughtworks.selenium;
 
-import com.thoughtworks.selenium.condition.ConditionTestSuite;
 import junit.framework.Test;
 import junit.framework.TestCase;
 import junit.framework.TestSuite;

File: java/client/test/com/thoughtworks/selenium/WebDriverSeleniumTestSuite.java
Patch:
@@ -20,7 +20,6 @@
 import com.thoughtworks.selenium.corebased.TestAddLocationStrategy;
 import com.thoughtworks.selenium.corebased.TestAddSelection;
 import com.thoughtworks.selenium.corebased.TestCheckUncheck;
-import com.thoughtworks.selenium.corebased.TestClick;
 import com.thoughtworks.selenium.corebased.TestClickAt;
 import com.thoughtworks.selenium.corebased.TestCommandError;
 import com.thoughtworks.selenium.corebased.TestComments;

File: java/client/test/com/thoughtworks/selenium/corebased/TestClickAt.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.thoughtworks.selenium.InternalSelenseTestBase;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.HasCapabilities;

File: java/client/test/com/thoughtworks/selenium/corebased/TestFailingVerifications.java
Patch:
@@ -16,9 +16,9 @@ public class TestFailingVerifications extends InternalSelenseTestBase {
 		try { assertTrue(selenium.isElementPresent("notTheSpan")); fail("expected failure"); } catch (Throwable e) {}
 		try { assertFalse(selenium.isElementPresent("theSpan")); fail("expected failure"); } catch (Throwable e) {}
 		try { assertEquals(selenium.getTable("theTable.2.0"), "a"); fail("expected failure"); } catch (Throwable e) {}
-		try { assertEquals(selenium.getSelectedIndex("theSelect"), "2");; fail("expected failure"); } catch (Throwable e) {}
-		try { assertTrue(selenium.getSelectedValue("theSelect").matches("^opt[\\s\\S]*3$"));; fail("expected failure"); } catch (Throwable e) {}
-		try { assertEquals(selenium.getSelectedLabel("theSelect"), "third option");; fail("expected failure"); } catch (Throwable e) {}
+		try { assertEquals(selenium.getSelectedIndex("theSelect"), "2"); fail("expected failure"); } catch (Throwable e) {}
+		try { assertTrue(selenium.getSelectedValue("theSelect").matches("^opt[\\s\\S]*3$")); fail("expected failure"); } catch (Throwable e) {}
+		try { assertEquals(selenium.getSelectedLabel("theSelect"), "third option"); fail("expected failure"); } catch (Throwable e) {}
 		try { assertEquals(join(selenium.getSelectOptions("theSelect"), ','), "first\\,option,second option"); fail("expected failure"); } catch (Throwable e) {}
 		try { assertEquals(selenium.getAttribute("theText@class"), "bar"); fail("expected failure"); } catch (Throwable e) {}
 		try { assertNotEquals("foo", selenium.getAttribute("theText@class")); fail("expected failure"); } catch (Throwable e) {}

File: java/client/test/com/thoughtworks/selenium/corebased/TestMultiSelect.java
Patch:
@@ -20,7 +20,7 @@ public class TestMultiSelect extends InternalSelenseTestBase {
 		verifyEquals(join(selenium.getSelectedLabels("theSelect"), ','), "Third Option,");
 		selenium.removeSelection("theSelect", "");
 		selenium.removeSelection("theSelect", "Third Option");
-		try { assertEquals(selenium.getSelectedLabel("theSelect"), "");; fail("expected failure"); } catch (Throwable e) {}
+		try { assertEquals(selenium.getSelectedLabel("theSelect"), ""); fail("expected failure"); } catch (Throwable e) {}
 		try { assertEquals(join(selenium.getSelectedLabels("theSelect"), ','), ""); fail("expected failure"); } catch (Throwable e) {}
 		verifyEquals(selenium.getValue("theSelect"), "");
 		verifyFalse(selenium.isSomethingSelected("theSelect"));

File: java/client/test/org/openqa/selenium/Build.java
Patch:
@@ -3,7 +3,6 @@
 package org.openqa.selenium;
 
 import java.io.BufferedReader;
-import java.io.IOException;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.Arrays;

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -19,7 +19,6 @@
 package org.openqa.selenium;
 
 import static org.openqa.selenium.Ignore.Driver.CHROME;
-import static org.openqa.selenium.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.OPERA;

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -443,7 +443,7 @@ public void testShouldBeAbleToReturnAnArrayOfWebElements() {
     List<WebElement> items = (List<WebElement>) ((JavascriptExecutor) driver)
         .executeScript("return document.getElementsByName('snack');");
 
-    assertTrue(items.size() > 0);
+    assertFalse(items.isEmpty());
   }
 
   @JavascriptEnabled
@@ -489,7 +489,7 @@ public void testShouldBeAbleToExecuteScriptAndReturnElementsList() {
     List<WebElement> resultsList = (List<WebElement>) ((JavascriptExecutor) driver)
       .executeScript(scriptToExec);
 
-    assertTrue(resultsList.size() > 0);
+    assertFalse(resultsList.isEmpty());
   }
 
   @JavascriptEnabled

File: java/client/test/org/openqa/selenium/browserlaunchers/MacProxyManagerUnitTest.java
Patch:
@@ -1,7 +1,5 @@
 package org.openqa.selenium.browserlaunchers;
 
-import junit.framework.TestCase;
-
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
@@ -16,7 +14,8 @@
 import java.util.prefs.AbstractPreferences;
 import java.util.prefs.BackingStoreException;
 
-import org.openqa.selenium.browserlaunchers.MacProxyManager;
+import junit.framework.TestCase;
+
 import org.openqa.selenium.browserlaunchers.MacProxyManager.MacNetworkSetupException;
 
 public class MacProxyManagerUnitTest extends TestCase {

File: java/client/test/org/openqa/selenium/browserlaunchers/locators/Firefox3LocatorUnitTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.openqa.selenium.browserlaunchers.locators;
 
 import junit.framework.TestCase;
-import org.openqa.selenium.browserlaunchers.locators.Firefox3Locator;
 
 /**
  * {@link org.openqa.selenium.browserlaunchers.locators.Firefox3Locator} unit test class.

File: java/client/test/org/openqa/selenium/browserlaunchers/locators/SingleBrowserLocatorUnitTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.openqa.selenium.browserlaunchers.locators;
 
 import junit.framework.TestCase;
-import org.openqa.selenium.browserlaunchers.locators.SingleBrowserLocator;
 
 /**
  * {@link org.openqa.selenium.server.browserlaunchers.AbstractBrowserLauncher} unit test class.

File: java/client/test/org/openqa/selenium/firefox/PreferencesTest.java
Patch:
@@ -22,7 +22,6 @@
 import java.io.IOException;
 import java.io.Reader;
 import java.io.StringReader;
-import java.util.Map;
 
 public class PreferencesTest extends TestCase {
 

File: java/client/test/org/openqa/selenium/interactions/BasicMouseInterfaceTest.java
Patch:
@@ -38,7 +38,6 @@
 import org.openqa.selenium.JavascriptEnabled;
 import org.openqa.selenium.NoSuchElementException;
 import org.openqa.selenium.Platform;
-import org.openqa.selenium.TestUtilities;
 import org.openqa.selenium.WaitingConditions;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebElement;

File: java/client/test/org/openqa/selenium/io/FileHandlerTest.java
Patch:
@@ -31,8 +31,6 @@
 import java.util.zip.ZipOutputStream;
 
 import org.junit.Test;
-import org.openqa.selenium.io.FileHandler;
-import org.openqa.selenium.io.TemporaryFilesystem;
 
 public class FileHandlerTest extends TestCase {
 

File: java/client/test/org/openqa/selenium/io/ZipTest.java
Patch:
@@ -2,9 +2,6 @@
 
 import junit.framework.TestCase;
 import org.openqa.selenium.internal.InProject;
-import org.openqa.selenium.io.Cleanly;
-import org.openqa.selenium.io.TemporaryFilesystem;
-import org.openqa.selenium.io.Zip;
 
 import java.io.File;
 import java.io.FileInputStream;

File: java/client/test/org/openqa/selenium/opera/OperaDriverTestSuite.java
Patch:
@@ -10,8 +10,7 @@
 import org.openqa.selenium.TestSuiteBuilder;
 
 public class OperaDriverTestSuite extends TestCase {
-  private static boolean runBuild = true;
-
+  
   public static Test suite() throws Exception {
     return new TestSuiteBuilder()
         .addSourceDir("java/client/test")

File: java/client/test/org/openqa/selenium/os/CommandLineTest.java
Patch:
@@ -22,7 +22,6 @@
 import junit.framework.TestCase;
 
 import org.junit.Test;
-import org.openqa.selenium.os.CommandLine;
 
 public class CommandLineTest extends TestCase {
 

File: java/client/test/org/openqa/selenium/os/WindowsUtilsUnitTest.java
Patch:
@@ -17,7 +17,6 @@
 package org.openqa.selenium.os;
 
 import junit.framework.TestCase;
-import org.openqa.selenium.os.WindowsUtils;
 
 import java.util.Map;
 import java.util.regex.Matcher;

File: java/client/test/org/openqa/selenium/remote/BeanToJsonConverterTest.java
Patch:
@@ -20,7 +20,6 @@
 import junit.framework.TestCase;
 
 import java.awt.Point;
-import java.util.Arrays;
 import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;

File: java/client/test/org/openqa/selenium/remote/JsonToBeanConverterTest.java
Patch:
@@ -33,7 +33,6 @@
 import org.json.JSONObject;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.Cookie;
-import org.openqa.selenium.Ignore;
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.browserlaunchers.DoNotUseProxyPac;
 

File: java/client/test/org/openqa/selenium/v1/SeleniumTestEnvironment.java
Patch:
@@ -26,7 +26,6 @@
 import org.openqa.selenium.DevMode;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebDriverBackedSelenium;
-import org.openqa.selenium.environment.GlobalTestEnvironment;
 import org.openqa.selenium.environment.TestEnvironment;
 import org.openqa.selenium.environment.webserver.AppServer;
 import org.openqa.selenium.internal.InProject;

File: java/client/test/org/openqa/selenium/v1/WebDriverCommandProcessorTest.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.v1;
 
-import com.thoughtworks.selenium.BrowserConfigurationOptions;
-
 import junit.framework.TestCase;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.StubDriver;

File: java/server/src/org/openqa/selenium/remote/server/KnownElements.java
Patch:
@@ -20,15 +20,13 @@
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.internal.Locatable;
 import org.openqa.selenium.internal.WrapsElement;
-import org.openqa.selenium.remote.RemoteWebElement;
 
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
 
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
-import java.util.Set;
 
 public class KnownElements {
 

File: java/server/src/org/openqa/selenium/remote/server/handler/interactions/touch/LongPressOnElement.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.openqa.selenium.remote.server.handler.interactions.touch;
 
-import org.openqa.selenium.HasInputDevices;
 import org.openqa.selenium.HasTouchScreen;
 import org.openqa.selenium.TouchScreen;
 import org.openqa.selenium.WebElement;

File: java/server/src/org/openqa/selenium/remote/server/handler/interactions/touch/Scroll.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.openqa.selenium.remote.server.handler.interactions.touch;
 
-import org.openqa.selenium.HasInputDevices;
 import org.openqa.selenium.HasTouchScreen;
 import org.openqa.selenium.TouchScreen;
 import org.openqa.selenium.WebElement;

File: java/server/src/org/openqa/selenium/server/htmlrunner/HTMLTestResults.java
Patch:
@@ -228,8 +228,8 @@ public String decode(String string) {
         public List decodeListOfStrings(List list) {
             List<String> decodedList = new LinkedList<String>();
             
-            for (Iterator i = list.iterator(); i.hasNext();) {
-                decodedList.add(decode((String) i.next()));
+            for (Object o : list) {
+                decodedList.add(decode((String) o));
             }
             
             return decodedList;

File: java/server/test/org/openqa/grid/internal/SessionTimesOutTest.java
Patch:
@@ -44,7 +44,6 @@ public MyRemoteProxyTimeout(RegistrationRequest request, Registry registry) {
     }
 
     public void beforeRelease(TestSession session) {
-      return;
     }
   }
 

File: java/client/src/org/openqa/selenium/support/pagefactory/DefaultFieldDecorator.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.support.pagefactory;
 
 import org.openqa.selenium.WebElement;
+import org.openqa.selenium.internal.Locatable;
 import org.openqa.selenium.internal.WrapsElement;
 import org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler;
 
@@ -57,7 +58,7 @@ protected WebElement proxyForLocator(ClassLoader loader,
 
     WebElement proxy;
       proxy = (WebElement) Proxy.newProxyInstance(
-          loader, new Class[]{WebElement.class, WrapsElement.class}, handler);
+          loader, new Class[]{WebElement.class, WrapsElement.class, Locatable.class}, handler);
     return proxy;
   }
 

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -71,6 +71,7 @@ public class FirefoxProfile {
           .put("extensions.update.notifyUser", false)
           .put("network.manage-offline-status", false)
           .put("network.http.max-connections-per-server", 10)
+          .put("network.http.phishy-userpass-length", 255)
           .put("prompts.tab_modal.enabled", false)
           .put("security.fileuri.origin_policy", 3)
           .put("security.fileuri.strict_origin_policy", false)

File: java/client/test/org/openqa/selenium/environment/webserver/AppServer.java
Patch:
@@ -32,6 +32,8 @@ public interface AppServer {
 
   String whereIsSecure(String relativeUrl);
 
+  String whereIsWithCredentials(String relativeUrl, String user, String password);
+
   void start();
 
   void stop();

File: java/server/src/org/openqa/grid/web/Hub.java
Patch:
@@ -90,7 +90,7 @@ public Hub(GridHubConfiguration config) {
       }
     }
 
-    registry = new Registry(this, config);
+    registry = Registry.newInstance(this, config);
 
     if (config.getHost() != null) {
       host = config.getHost();

File: java/server/test/org/openqa/grid/internal/AddingProxyAgainFreesResources.java
Patch:
@@ -35,7 +35,7 @@ public class AddingProxyAgainFreesResources {
    */
   @BeforeClass
   public static void setup() throws InterruptedException {
-    registry = new Registry();
+    registry = Registry.newInstance();
     ff.put(APP, "FF");
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);
     registry.add(p1);

File: java/server/test/org/openqa/grid/internal/ConcurrencyLock.java
Patch:
@@ -37,7 +37,7 @@ public class ConcurrencyLock {
    */
   @BeforeClass
   public static void setup() {
-    registry = new Registry();
+    registry = Registry.newInstance();
     ie.put(APP, "IE");
     ff.put(APP, "FF");
 

File: java/server/test/org/openqa/grid/internal/DefaultToFIFOPriorityTest.java
Patch:
@@ -40,7 +40,7 @@ public class DefaultToFIFOPriorityTest {
    */
   @BeforeClass
   public static void setup() throws InterruptedException {
-    registry = new Registry();
+    registry = Registry.newInstance();
     registry.setPrioritizer(fifo);
     ff.put(APP, "FF");
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);

File: java/server/test/org/openqa/grid/internal/LoadBalancedTests.java
Patch:
@@ -24,7 +24,7 @@ public class LoadBalancedTests {
 
   @BeforeClass
   public static void setup() {
-    registry = new Registry();
+    registry = Registry.newInstance();
     // A request that will create a proxy with 5 slots. Each slot can host a
     // firefox.
     Map<String, Object> config = new HashMap<String, Object>();

File: java/server/test/org/openqa/grid/internal/NewSessionRequestTimeout.java
Patch:
@@ -22,7 +22,7 @@ public class NewSessionRequestTimeout {
    */
   @BeforeClass
   public static void setup() {
-    registry = new Registry();
+    registry = Registry.newInstance();
     ff.put(APP, "FF");
 
     p1 = RemoteProxyFactory.getNewBasicRemoteProxy(ff, "http://machine1:4444", registry);

File: java/server/test/org/openqa/grid/internal/RemoteProxySlowSetup.java
Patch:
@@ -16,7 +16,7 @@ public class RemoteProxySlowSetup {
 
   @BeforeClass
   public static void setup() {
-    registry = new Registry();
+    registry = Registry.newInstance();
     // create 2 proxy that are equal and have a slow onRegistration
     // p1.equals(p2) = true
     p1 = new SlowRemoteSetup(registry);

File: java/server/test/org/openqa/grid/internal/RemoteProxyTest.java
Patch:
@@ -20,7 +20,7 @@ public class RemoteProxyTest {
 
   private static Map<String, Object> app1Capability = new HashMap<String, Object>();
   private static Map<String, Object> app2Capability = new HashMap<String, Object>();
-  private static Registry registry = new Registry();
+  private static Registry registry = Registry.newInstance();
 
   @BeforeClass
   public static void setup() {
@@ -59,7 +59,7 @@ public void create() {
 
   @Test
   public void proxyConfigIsInheritedFromRegistry() {
-    Registry registry = new Registry();
+    Registry registry = Registry.newInstance();
     registry.getConfiguration().getAllParams().put("String", "my string");
     registry.getConfiguration().getAllParams().put("Boolean", true);
     registry.getConfiguration().getAllParams().put("Integer", 42);
@@ -78,7 +78,7 @@ public void proxyConfigIsInheritedFromRegistry() {
 
   @Test
   public void proxyConfigOverWritesRegistryConfig() {
-    Registry registry = new Registry();
+    Registry registry = Registry.newInstance();
     registry.getConfiguration().getAllParams().put("A", "A1");
 
     RegistrationRequest req = RegistrationRequest.build("-role", "webdriver", "-A", "A2");

File: java/server/test/org/openqa/grid/internal/listener/RegistrationListenerTest.java
Patch:
@@ -54,7 +54,7 @@ public static void prepareReqRequest() {
 
   @Test(timeout = 5000)
   public void testRegistration() {
-    Registry registry = new Registry();
+    Registry registry = Registry.newInstance();
     registry.add(new MyRemoteProxy(req, registry));
 
     MockedRequestHandler request = new MockedNewSessionRequestHandler(registry, app1);
@@ -92,7 +92,7 @@ public void beforeRegistration() {
    */
   @Test
   public void testBugRegistration() {
-    Registry registry = new Registry();
+    Registry registry = Registry.newInstance();
     registry.add(new MyBuggyRemoteProxy(req, registry));
     registry.add(new MyBuggyRemoteProxy(req, registry));
 
@@ -116,7 +116,7 @@ public void beforeRegistration() {
     }
   }
 
-  Registry registry = new Registry();
+  Registry registry = Registry.newInstance();
 
   /**
    * register a regular proxy for app1 and a slow one.

File: java/server/test/org/openqa/grid/plugin/RemoteProxyInheritanceTest.java
Patch:
@@ -16,7 +16,7 @@
 
 public class RemoteProxyInheritanceTest {
 
-  private Registry registry = new Registry();
+  private Registry registry = Registry.newInstance();
 
   @Test
   public void defaultToRemoteProxy() {

File: java/client/src/org/openqa/selenium/internal/SocketLock.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class SocketLock implements Lock {
   public static final int DEFAULT_PORT = 7055;
-  private static final long DELAY_BETWEEN_SOCKET_CHECKS = 100;
+  private static final long DELAY_BETWEEN_SOCKET_CHECKS = 2000;
 
   private static final InetSocketAddress localhost = new InetSocketAddress("localhost", DEFAULT_PORT - 1);
   
@@ -80,7 +80,8 @@ public void lock(long timeoutInMillis) throws WebDriverException {
       try {
         if (isLockFree(address))
           return;
-        Thread.sleep(DELAY_BETWEEN_SOCKET_CHECKS);
+        // Randomness or retry! Something from my past (Paul H) : http://www.wattystuff.net/amateur/packet/whatispacket.htm (search for random in page)
+        Thread.sleep((long) (DELAY_BETWEEN_SOCKET_CHECKS * Math.random()));
       } catch (InterruptedException e) {
         throw new WebDriverException(e);
       } catch (IOException e) {

File: java/client/src/org/openqa/selenium/browserlaunchers/Proxies.java
Patch:
@@ -38,7 +38,7 @@
 import static org.openqa.selenium.remote.CapabilityType.PROXY;
 
 public class Proxies {
-  public static final String PROXY_CONFIG = "proxy";
+  public static final String PROXY_CONFIG = CapabilityType.PROXY;
 
   public static boolean isProxyRequired(Capabilities capabilities) {
     return capabilities.is("proxyRequired") || capabilities.getCapability(PROXY_CONFIG) != null;

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -112,12 +112,12 @@ protected void startSession(Capabilities desiredCapabilities) {
     DesiredCapabilities returnedCapabilities = new DesiredCapabilities();
     for (Map.Entry<String, Object> entry : rawCapabilities.entrySet()) {
       // Handle the platform later
-      if ("platform".equals(entry.getKey())) {
+      if (CapabilityType.PLATFORM.equals(entry.getKey())) {
         continue;
       }
       returnedCapabilities.setCapability(entry.getKey(), entry.getValue());
     }
-    String platformString = (String) rawCapabilities.get("platform");
+    String platformString = (String) rawCapabilities.get(CapabilityType.PLATFORM);
     Platform platform;
     try {
       if (platformString == null || "".equals(platformString)) {

File: java/client/test/org/openqa/selenium/I18nTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium;
 
 import org.openqa.selenium.environment.GlobalTestEnvironment;
+import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.Arrays;
 import java.util.List;
@@ -102,7 +103,7 @@ public void testShouldBeAbleToActivateIMEEngine() throws InterruptedException {
     }
 
     Capabilities capabilities = ((HasCapabilities) driver).getCapabilities();
-    if (!(Boolean) capabilities.getCapability("nativeEvents")) {
+    if (!(Boolean) capabilities.getCapability(CapabilityType.HAS_NATIVE_EVENTS)) {
       System.out.println("Native events are disabled, IME will not work.");
       return;
     }
@@ -162,7 +163,7 @@ public void testShouldBeAbleToInputJapanese() {
     }
 
     Capabilities capabilities = ((HasCapabilities) driver).getCapabilities();
-    if (!(Boolean) capabilities.getCapability("nativeEvents")) {
+    if (!(Boolean) capabilities.getCapability(CapabilityType.HAS_NATIVE_EVENTS)) {
       System.out.println("Native events are disabled, IME will not work.");
       return;
     }

File: java/client/test/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.openqa.selenium;
 
 import org.openqa.selenium.interactions.Actions;
+import org.openqa.selenium.remote.CapabilityType;
 
 import java.util.concurrent.Callable;
 
@@ -246,7 +247,7 @@ private boolean supportsNativeEvents() {
 
     if (driver instanceof HasCapabilities) {
       Capabilities capabilities = ((HasCapabilities) driver).getCapabilities();
-      Object nativeEvents = capabilities.getCapability("nativeEvents");
+      Object nativeEvents = capabilities.getCapability(CapabilityType.HAS_NATIVE_EVENTS);
       return nativeEvents != null && (Boolean) nativeEvents;
     }
 

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -45,6 +45,7 @@
 import org.openqa.selenium.environment.GlobalTestEnvironment;
 import org.openqa.selenium.firefox.internal.ProfilesIni;
 import org.openqa.selenium.io.TemporaryFilesystem;
+import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.RemoteWebDriver;
 
 import static java.lang.Thread.sleep;
@@ -412,7 +413,7 @@ public void testMultipleFirefoxDriversRunningConcurrently() throws Exception {
     // Unfortunately native events on linux mean mucking around with the
     // window's focus. this breaks multiple drivers.
     boolean nativeEventsEnabled =
-        (Boolean) ((RemoteWebDriver) driver).getCapabilities().getCapability("nativeEvents");
+        (Boolean) ((RemoteWebDriver) driver).getCapabilities().getCapability(CapabilityType.HAS_NATIVE_EVENTS);
 
     if (nativeEventsEnabled && Platform.getCurrent().is(Platform.LINUX)) {
       return;

File: java/client/test/org/openqa/selenium/firefox/NativeEventsTest.java
Patch:
@@ -3,6 +3,7 @@
 
 import org.openqa.selenium.AbstractDriverTestCase;
 import org.openqa.selenium.Platform;
+import org.openqa.selenium.remote.CapabilityType;
 
 /**
  * If native events are enabled, make sure they work.
@@ -39,7 +40,7 @@ public void testNativeEventsCanBeEnabled() {
     }
 
     assertTrue("Native events were explicitly enabled and should be on.",
-        (Boolean) driver2.getCapabilities().getCapability("nativeEvents"));
+        (Boolean) driver2.getCapabilities().getCapability(CapabilityType.HAS_NATIVE_EVENTS));
   }
 
   public void testNativeEventsAreNotOnByDefaultOnLinux() {

File: java/client/test/org/openqa/selenium/rc/CopyProfileTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.openqa.selenium.environment.InProcessTestEnvironment;
 import org.openqa.selenium.environment.TestEnvironment;
 import org.openqa.selenium.firefox.FirefoxProfile;
+import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.RemoteWebDriver;
 
@@ -74,7 +75,7 @@ public void testCanEnableNativeEventsOnRemoteFirefox() throws MalformedURLExcept
 
     RemoteWebDriver driver = new RemoteWebDriver(selenium.getWebDriverUrl(), caps);
 
-    Boolean nativeEventsEnabled = (Boolean) driver.getCapabilities().getCapability("nativeEvents");
+    Boolean nativeEventsEnabled = (Boolean) driver.getCapabilities().getCapability(CapabilityType.HAS_NATIVE_EVENTS);
     driver.quit();
 
     assertTrue("Native events were explicitly enabled and should be on.",

File: java/client/test/org/openqa/selenium/remote/BeanToJsonConverterTest.java
Patch:
@@ -210,7 +210,7 @@ public void testShouldConvertAProxyCorrectly() throws JSONException {
     JSONObject converted = new JSONObject(json);
     JSONObject capsAsMap = converted.getJSONObject("desiredCapabilities");
 
-    assertEquals(json, proxy.getHttpProxy(), capsAsMap.getJSONObject("proxy").get("httpProxy"));
+    assertEquals(json, proxy.getHttpProxy(), capsAsMap.getJSONObject(CapabilityType.PROXY).get("httpProxy"));
   }
 
   public void testShouldCallToJsonMethodIfPresent() {

File: java/client/test/org/openqa/selenium/remote/JsonToBeanConverterTest.java
Patch:
@@ -119,7 +119,7 @@ public void testShouldPopulateFieldsOnNestedBeans() throws Exception {
 
   public void testShouldProperlyFillInACapabilitiesObject() throws Exception {
     DesiredCapabilities capabilities =
-        new DesiredCapabilities("browser", "version", Platform.ANY);
+        new DesiredCapabilities("browser", CapabilityType.VERSION, Platform.ANY);
     capabilities.setJavascriptEnabled(true);
     String text = new BeanToJsonConverter().convert(capabilities);
 

File: java/server/src/org/openqa/grid/internal/utils/GridNodeConfiguration.java
Patch:
@@ -13,6 +13,7 @@
 import org.openqa.grid.common.GridRole;
 import org.openqa.grid.common.JSONConfigurationUtils;
 import org.openqa.grid.common.exception.GridConfigurationException;
+import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.server.RemoteControlConfiguration;
 import org.openqa.selenium.server.cli.RemoteControlLauncher;
@@ -52,7 +53,6 @@ public class GridNodeConfiguration {
    */
   public static final String TIME_OUT = "timeout";
 
-  public static final String PROXY = "proxy";
   public static final String MAX_CONCURRENT = "maxConcurrent";
 
   public static final String SERVLETS = "servlets";

File: java/server/src/org/openqa/grid/selenium/utils/WebProxyHtmlRenderer.java
Patch:
@@ -8,6 +8,7 @@
 import org.openqa.grid.internal.utils.HtmlRenderer;
 import org.openqa.grid.selenium.proxy.WebRemoteProxy;
 import org.openqa.grid.web.utils.BrowserNameUtils;
+import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 
 public class WebProxyHtmlRenderer implements HtmlRenderer {
@@ -62,7 +63,7 @@ public String renderSummary() {
         builder.append("/>");
       } else {
         builder.append(">");
-        builder.append(slot.getCapabilities().get("browserName"));
+        builder.append(slot.getCapabilities().get(CapabilityType.BROWSER_NAME));
         builder.append("</a>");
       }
 

File: java/server/src/org/openqa/selenium/server/RemoteControlConfiguration.java
Patch:
@@ -1,6 +1,7 @@
 package org.openqa.selenium.server;
 
 import org.openqa.selenium.Capabilities;
+import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 
 import java.io.File;
@@ -362,8 +363,8 @@ public Capabilities copySettingsIntoBrowserOptions(Capabilities source) {
     setSafely(capabilities, "userExtensions", userExtensions);
     setSafely(capabilities, "proxyInjectionMode", proxyInjectionModeArg);
     setSafely(capabilities, "singleWindow", singleWindow);
-    setSafely(capabilities, "ensureCleanSession", ensureCleanSession);
-    setSafely(capabilities, "avoidProxy", avoidProxy);
+    setSafely(capabilities, CapabilityType.ForSeleniumServer.ENSURING_CLEAN_SESSION, ensureCleanSession);
+    setSafely(capabilities, CapabilityType.ForSeleniumServer.AVOIDING_PROXY, avoidProxy);
     setSafely(capabilities, "browserSideLog", browserSideLogEnabled);
 
     return capabilities;

File: java/server/src/org/openqa/selenium/server/browserlaunchers/InternetExplorerCustomProxyLauncher.java
Patch:
@@ -26,6 +26,7 @@
 import org.openqa.selenium.browserlaunchers.locators.InternetExplorerLocator;
 import org.openqa.selenium.os.WindowsUtils;
 import org.openqa.selenium.os.CommandLine;
+import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.server.ApplicationRegistry;
 import org.openqa.selenium.server.RemoteControlConfiguration;
 
@@ -141,7 +142,8 @@ public void close() {
   }
 
   private void restoreSystemProxy() {
-    wpm.restoreRegistrySettings(browserConfigurationOptions.is("ensureCleanSession"));
+    wpm.restoreRegistrySettings(browserConfigurationOptions.is(
+        CapabilityType.ForSeleniumServer.ENSURING_CLEAN_SESSION));
   }
 
   public Process getProcess() {

File: java/server/test/org/openqa/grid/internal/RegistryTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.openqa.grid.internal.listeners.RegistrationListener;
 import org.openqa.grid.internal.mock.MockedNewSessionRequestHandler;
 import org.openqa.grid.internal.mock.MockedRequestHandler;
+import org.openqa.selenium.remote.CapabilityType;
 
 import static org.openqa.grid.common.RegistrationRequest.MAX_SESSION;
 import static org.openqa.grid.common.RegistrationRequest.REMOTE_URL;
@@ -67,8 +68,8 @@ public void addDuppedProxy() {
   @BeforeClass
   public static void prepareReqRequest() {
     Map<String, Object> config = new HashMap<String, Object>();
-    app1.put("browserName", "app1");
-    app2.put("browserName", "app2");
+    app1.put(CapabilityType.BROWSER_NAME, "app1");
+    app2.put(CapabilityType.BROWSER_NAME, "app2");
     config.put(REMOTE_URL, "http://machine1:4444");
     config.put(MAX_SESSION, 5);
     req = new RegistrationRequest();

File: java/server/test/org/openqa/grid/internal/StatusServletTests.java
Patch:
@@ -28,6 +28,7 @@
 import org.openqa.grid.web.Hub;
 import org.openqa.grid.web.servlet.handler.RequestType;
 import org.openqa.selenium.net.PortProber;
+import org.openqa.selenium.remote.CapabilityType;
 
 public class StatusServletTests {
 
@@ -64,7 +65,7 @@ public static void setup() throws Exception {
 
     RegistrationRequest req = new RegistrationRequest();
     Map<String, Object> capability = new HashMap<String, Object>();
-    capability.put("browserName", "custom app");
+    capability.put(CapabilityType.BROWSER_NAME, "custom app");
     req.addDesiredCapabilitiy(capability);
 
     Map<String, Object> config = new HashMap<String, Object>();
@@ -79,7 +80,7 @@ public static void setup() throws Exception {
     registry.add(customProxy);
 
     Map<String, Object> cap = new HashMap<String, Object>();
-    cap.put("browserName", "app1");
+    cap.put(CapabilityType.BROWSER_NAME, "app1");
 
     MockedRequestHandler newSessionRequest = new MockedRequestHandler(registry);
     newSessionRequest.setRequestType(RequestType.START_SESSION);

File: java/server/test/org/openqa/selenium/server/RemoteControlConfigurationUnitTest.java
Patch:
@@ -5,6 +5,7 @@
 import org.junit.Before;
 import org.junit.Test;
 import org.openqa.selenium.Capabilities;
+import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.server.browserlaunchers.BrowserOptions;
 
 import static org.junit.Assert.assertEquals;
@@ -274,8 +275,8 @@ public void setUp() {
     	assertEquals(Boolean.toString(useUserJSInjection), caps.getCapability("userJSInjection"));
     	assertEquals(Boolean.toString(useProxyInjectionMode), caps.getCapability("proxyInjectionMode"));
     	assertEquals(Boolean.toString(useSingleWindow), caps.getCapability("singleWindow"));
-    	assertEquals(Boolean.toString(ensureCleanSession), caps.getCapability("ensureCleanSession"));
-    	assertEquals(Boolean.toString(avoidProxy), caps.getCapability("avoidProxy"));
+    	assertEquals(Boolean.toString(ensureCleanSession), caps.getCapability(CapabilityType.ForSeleniumServer.ENSURING_CLEAN_SESSION));
+    	assertEquals(Boolean.toString(avoidProxy), caps.getCapability(CapabilityType.ForSeleniumServer.AVOIDING_PROXY));
     	assertEquals(Boolean.toString(browserSideLogEnabled), caps.getCapability("browserSideLog"));
     }
     

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -48,8 +48,8 @@ public void testCanClickOnALinkAndFollowIt() {
     waitFor(WaitingConditions.pageTitleToBe(driver, "XHTML Test Page"));
   }
 
-  @Ignore(value = {IPHONE, CHROME, OPERA, SELENESE, FIREFOX},
-    reason = "In Firefox, the code to support this breaks other tests.")
+  @Ignore(value = {IPHONE, CHROME, OPERA, SELENESE},
+    reason = "Not tested on these browsers.")
   public void testCanClickOnALinkThatOverflowsAndFollowIt() {
     driver.findElement(By.id("overflowLink")).click();
 

File: java/client/src/org/openqa/selenium/chrome/ChromeDriver.java
Patch:
@@ -111,7 +111,7 @@ public ChromeDriver(Capabilities capabilities) {
 
   public <X> X getScreenshotAs(OutputType<X> target) {
     // Get the screenshot as base64.
-    String base64 = execute(DriverCommand.SCREENSHOT).getValue().toString();
+    String base64 = (String)execute(DriverCommand.SCREENSHOT).getValue();
     // ... and convert it.
     return target.convertFromBase64Png(base64);
   }

File: java/client/test/org/openqa/selenium/DragAndDropTest.java
Patch:
@@ -39,6 +39,7 @@
 public class DragAndDropTest extends AbstractDriverTestCase {
 
   @JavascriptEnabled
+  @Ignore(FIREFOX)
   public void testDragAndDrop() throws Exception {
     if (Platform.getCurrent().is(LINUX) && isNativeEventsEnabled()) {
       System.out.println("Skipping test: fails with native events on linux");
@@ -70,6 +71,7 @@ public void testDragAndDropToElement() {
   }
 
   @JavascriptEnabled
+  @Ignore(FIREFOX)
   public void testElementInDiv() {
     driver.get(pages.dragAndDropPage);
     WebElement img = driver.findElement(By.id("test3"));

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -43,6 +43,7 @@ public class ErrorCodes {
   public static final int NO_SUCH_WINDOW = 23;
   public static final int INVALID_COOKIE_DOMAIN = 24;
   public static final int UNABLE_TO_SET_COOKIE = 25;
+  public static final int UNEXPECTED_ALERT_PRESENT = 26;
   public static final int NO_ALERT_PRESENT = 27;
   public static final int ASYNC_SCRIPT_TIMEOUT = 28;
   public static final int INVALID_ELEMENT_COORDINATES = 29;

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -39,6 +39,7 @@ public class ErrorCodes {
   public static final int ELEMENT_NOT_SELECTABLE = 15;
   public static final int JAVASCRIPT_ERROR = 17;
   public static final int XPATH_LOOKUP_ERROR = 19;
+  public static final int TIMEOUT = 21;
   public static final int NO_SUCH_WINDOW = 23;
   public static final int INVALID_COOKIE_DOMAIN = 24;
   public static final int UNABLE_TO_SET_COOKIE = 25;

File: java/client/src/org/openqa/selenium/browserlaunchers/Proxies.java
Patch:
@@ -74,7 +74,7 @@ public static File makeProxyPAC(File parentDir, int port, String configuredProxy
       out.close();
       return pacFile;
     } catch (IOException e) {
-      throw new SeleniumException("Unable to configure proxy. Selenium will not work.");
+      throw new SeleniumException("Unable to configure proxy. Selenium will not work.", e);
     }
   }
 

File: java/client/test/org/openqa/selenium/ParallelTestRunner.java
Patch:
@@ -30,7 +30,7 @@ public static interface Worker {
 
     private static class WorkerThread extends Thread {
         private final Worker _worker;
-        private Throwable _throwable;
+        private volatile Throwable _throwable;
 
         private WorkerThread(String name, Worker worker) {
             super(name);

File: java/client/test/org/openqa/selenium/TextPagesTest.java
Patch:
@@ -58,7 +58,7 @@ public void testFindingAnElementOnAPlainTextPageWillNeverWork() {
     }
   }
 
-  @Ignore(value = {IE, IPHONE, SELENESE, OPERA}, reason =
+  @Ignore(value = {CHROME, IE, IPHONE, SELENESE, OPERA}, reason =
       "Opera: creates DOM for displaying text pages")
   public void testShouldThrowExceptionWhenAddingCookieToAPageThatIsNotHtml() {
     driver.get(textPage);

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -62,6 +62,7 @@ public class Pages {
   public String mouseTrackerPage;
   public String dynamicallyModifiedPage;
   public String linkedImage;
+  public String selectPage;
 
   public Pages(AppServer appServer) {
     ajaxyPage = appServer.whereIs("ajaxy_page.html");
@@ -106,5 +107,6 @@ public Pages(AppServer appServer) {
     xhtmlTestPage = appServer.whereIs("xhtmlTest.html");
     dynamicallyModifiedPage = appServer.whereIs("dynamicallyModifiedPage.html");
     linkedImage = appServer.whereIs("linked_image.html");
+    selectPage = appServer.whereIs("selectPage.html");
   }
 }

File: java/client/test/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -383,10 +383,10 @@ public void testShouldBeAbleToCarryOnWorkingIfTheFrameIsDeletedFromUnderUs() {
 
     WebElement killIframe = driver.findElement(By.id("killIframe"));
     killIframe.click();
-
+    driver.switchTo().defaultContent();
+    
     assertFrameNotPresent(driver, "iframe1");
 
-    driver.switchTo().defaultContent();
     WebElement addIFrame = driver.findElement(By.id("addBackFrame"));
     addIFrame.click();
 

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -37,6 +37,7 @@ public class ErrorCodes {
   public static final int INVALID_ELEMENT_STATE = 12;
   public static final int UNHANDLED_ERROR = 13;
   public static final int ELEMENT_NOT_SELECTABLE = 15;
+  public static final int JAVASCRIPT_ERROR = 17;
   public static final int XPATH_LOOKUP_ERROR = 19;
   public static final int NO_SUCH_WINDOW = 23;
   public static final int INVALID_COOKIE_DOMAIN = 24;

File: java/client/test/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -59,7 +59,7 @@ public class SingleTestSuite extends TestCase {
       }};
 
   public static Test suite() throws Exception {
-    String driver = FIREFOX_TEST;
+    String driver = IE;
 
     System.setProperty("jna.library.path", "..\\build;build");
     System.setProperty("webdriver.selenium.server.port", String.valueOf(findFreePort()));

File: java/server/src/org/openqa/selenium/remote/server/DriverServlet.java
Patch:
@@ -137,8 +137,6 @@ private void setupMappings(DriverSessions driverSessions, Logger logger) {
     getMapper.bind("/session/:sessionId/window_handles", GetAllWindowHandles.class)
         .on(ResultType.SUCCESS, new JsonResult(RESPONSE));
 
-    getMapper.bind("/session/:sessionId/alert", SwitchToAlert.class)
-        .on(ResultType.SUCCESS, new EmptyResult());
     postMapper.bind("/session/:sessionId/dismiss_alert", DismissAlert.class)
         .on(ResultType.SUCCESS, new EmptyResult());
     postMapper.bind("/session/:sessionId/accept_alert", AcceptAlert.class)

File: java/client/test/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -59,7 +59,7 @@ public class SingleTestSuite extends TestCase {
       }};
 
   public static Test suite() throws Exception {
-    String driver = CHROME;
+    String driver = FIREFOX_TEST;
 
     System.setProperty("jna.library.path", "..\\build;build");
     System.setProperty("webdriver.selenium.server.port", String.valueOf(findFreePort()));
@@ -72,7 +72,7 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("JavascriptEnabledDriverTest")
+        .onlyRun("AlertsTest")
 //        .method("testShouldBeAbleToFindAnElementByCssSelector")
         .exclude(ALL)
         .exclude(EXCLUSIONS_BY_DRIVER.get(driver))

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -23,6 +23,7 @@
 import java.util.Random;
 import java.util.Set;
 import java.util.concurrent.Callable;
+import java.io.File;
 
 import com.google.common.base.Throwables;
 import org.junit.Assert;
@@ -43,6 +44,7 @@
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.environment.GlobalTestEnvironment;
 import org.openqa.selenium.firefox.internal.ProfilesIni;
+import org.openqa.selenium.io.TemporaryFilesystem;
 import org.openqa.selenium.remote.RemoteWebDriver;
 
 import static java.lang.Thread.sleep;

File: java/client/src/com/thoughtworks/selenium/SeleneseTestCase.java
Patch:
@@ -88,7 +88,7 @@ public void setUp(String url, String browserString) throws Exception {
      * @param port the port of Selenium RC
      * @throws Exception 
      */
-    public void setUp(String url, String browserString, int port){
+    public void setUp(String url, String browserString, int port) throws Exception {
       stb.setUp(url, browserString, port);
       selenium = stb.selenium;
     }

File: java/client/src/org/openqa/selenium/firefox/internal/NewProfileExtensionConnection.java
Patch:
@@ -137,7 +137,7 @@ protected int determineNextFreePort(int port) throws IOException {
       try {
         socket.bind(address);
         return newport;
-      } catch (BindException e) {
+      } catch (IOException e) {
         // Port is already bound. Skip it and continue
       } finally {
         try {

File: java/client/test/com/thoughtworks/selenium/corebased/TestTextWhitespace.java
Patch:
@@ -20,5 +20,6 @@ public class TestTextWhitespace extends InternalSelenseTestBase {
 		verifyTrue(selenium.getText("preformatted").matches("^preformatted[\\s\\S]*newline$"));
 		verifyNotEquals("preformatted newline", selenium.getText("preformatted"));
 		verifyTrue(selenium.getText("mixedMarkup").matches("^visible[\\s\\S]*newlines and markup and non-visible newlines and markup[\\s\\S]*With[\\s\\S]*a paragraph[\\s\\S]*and[\\s\\S]*pre[\\s\\S]*formatted[\\s\\S]*text$"));
+		verifyEquals(selenium.getText("empty"), "");
 	}
 }

File: java/server/src/org/openqa/selenium/server/commands/CaptureNetworkTrafficCommand.java
Patch:
@@ -105,7 +105,7 @@ public String execute() {
                     sb.append("<entry ");
 
                     sb.append("statusCode=\"").append(entry.statusCode).append("\" ");
-                    sb.append("method=\"").append(json(entry.method)).append("\" ");
+                    sb.append("method=\"").append(xml(entry.method)).append("\" ");
                     sb.append("url=\"").append(xml(entry.url)).append("\" ");
                     sb.append("bytes=\"").append(entry.bytes).append("\" ");
                     sb.append("start=\"").append(sdf.format(entry.start)).append("\" ");

File: java/server/src/org/openqa/selenium/remote/server/KnownElements.java
Patch:
@@ -64,7 +64,7 @@ public Object invoke(Object object, Method method, Object[] objects) throws Thro
       }
     };
 
-    Class[] proxyThese;
+    Class<?>[] proxyThese;
     if (element instanceof Locatable) {
       proxyThese = new Class[]{WebElement.class, ProxiedElement.class, Locatable.class};
     } else {

File: java/client/test/org/openqa/selenium/ElementEqualityTest.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.List;
 
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
-import static org.openqa.selenium.Ignore.Driver.REMOTE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 @Ignore({IPHONE, SELENESE})
@@ -25,7 +24,6 @@ public void testDifferentElementsShouldNotBeEqual() {
     assertFalse(ps.get(0).equals(ps.get(1)));
   }
 
-  @Ignore(REMOTE)    
   public void testSameElementLookedUpDifferentWaysUsingFindElementShouldHaveSameHashCode() {
     driver.get(pages.simpleTestPage);
     WebElement body = driver.findElement(By.tagName("body"));
@@ -34,7 +32,6 @@ public void testSameElementLookedUpDifferentWaysUsingFindElementShouldHaveSameHa
     assertEquals(body.hashCode(), xbody.hashCode());
   }
 
-  @Ignore(REMOTE)
   public void testSameElementLookedUpDifferentWaysUsingFindElementsShouldHaveSameHashCode() {
     driver.get(pages.simpleTestPage);
     List<WebElement> body = driver.findElements(By.tagName("body"));

File: java/server/src/org/openqa/grid/internal/utils/SelfRegisteringRemote.java
Patch:
@@ -49,7 +49,6 @@
 import org.openqa.jetty.jetty.servlet.ServletHandler;
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.remote.DesiredCapabilities;
-import org.openqa.selenium.server.RemoteControlConfiguration;
 import org.openqa.selenium.server.SeleniumServer;
 
 public class SelfRegisteringRemote {

File: java/server/src/org/openqa/grid/web/servlet/handler/RequestHandler.java
Patch:
@@ -38,7 +38,6 @@
 import org.openqa.grid.internal.TestSession;
 import org.openqa.grid.internal.listeners.Prioritizer;
 import org.openqa.grid.internal.listeners.TestSessionListener;
-import org.openqa.grid.web.Hub;
 
 /**
  * Base stuff to handle the request coming from a remote. Ideally, there should

File: java/server/src/org/openqa/grid/web/utils/BrowserNameUtils.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Map;
 
 import org.openqa.grid.common.RegistrationRequest;
-import org.openqa.grid.common.exception.GridConfigurationException;
 import org.openqa.grid.internal.Registry;
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.remote.DesiredCapabilities;

File: java/server/src/org/openqa/jetty/log/LogStream.java
Patch:
@@ -18,7 +18,6 @@
 import java.io.PrintStream;
 
 import org.apache.commons.logging.Log;
-import org.openqa.jetty.log.LogFactory;
 import org.openqa.jetty.util.ByteArrayOutputStream2;
 
 /**

File: java/server/src/org/openqa/selenium/remote/server/handler/CookieHandler.java
Patch:
@@ -25,9 +25,7 @@
 import org.openqa.selenium.remote.server.Session;
 
 import java.util.Date;
-import java.util.HashMap;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 
 public abstract class CookieHandler extends WebDriverHandler implements JsonParametersAware {

File: java/server/src/org/openqa/selenium/remote/server/handler/SendKeys.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.openqa.selenium.remote.server.handler;
 
-import org.openqa.selenium.remote.SessionId;
 import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.Session;
 import org.openqa.selenium.remote.server.rest.ResultType;

File: java/server/src/org/openqa/selenium/server/browserlaunchers/BrowserOptions.java
Patch:
@@ -22,7 +22,6 @@
 import org.openqa.selenium.remote.DesiredCapabilities;
 
 import java.io.File;
-import java.util.concurrent.TimeUnit;
 
 public class BrowserOptions {
   private static final String OPTIONS_SET = "optionsSet";

File: java/server/src/org/openqa/selenium/server/browserlaunchers/GoogleChromeLauncher.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.server.browserlaunchers;
 
 import org.openqa.selenium.Capabilities;
-import org.openqa.selenium.Platform;
 import org.openqa.selenium.browserlaunchers.AsyncExecute;
 import org.openqa.selenium.browserlaunchers.LauncherUtils;
 import org.openqa.selenium.browserlaunchers.locators.BrowserInstallation;

File: java/server/test/org/openqa/grid/e2e/misc/HubRestart.java
Patch:
@@ -5,10 +5,8 @@
 import org.openqa.grid.e2e.utils.GridTestHelper;
 import org.openqa.grid.e2e.utils.RegistryTestHelper;
 import org.openqa.grid.internal.Registry;
-import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.grid.internal.utils.GridHubConfiguration;
 import org.openqa.grid.internal.utils.SelfRegisteringRemote;
-import org.openqa.grid.selenium.proxy.WebRemoteProxy;
 import org.openqa.grid.web.Hub;
 import org.openqa.selenium.net.PortProber;
 import org.testng.Assert;

File: java/client/src/com/thoughtworks/selenium/ScreenshotListener.java
Patch:
@@ -7,9 +7,6 @@
 import org.testng.Reporter;
 import org.testng.internal.IResultListener;
 
-import com.thoughtworks.selenium.Selenium;
-
-
 public class ScreenshotListener implements IResultListener {
 
     File outputDirectory;

File: java/client/src/org/openqa/selenium/Capabilities.java
Patch:
@@ -19,7 +19,6 @@
 
 import java.util.Map;
 
-import org.openqa.selenium.Platform;
 
 /**
  * Describes a series of key/value pairs that encapsulate aspects of a browser.

File: java/client/src/org/openqa/selenium/Keyboard.java
Patch:
@@ -17,9 +17,6 @@
 
 package org.openqa.selenium;
 
-import org.openqa.selenium.Keys;
-import org.openqa.selenium.WebElement;
-
 /**
  * Interface representing basic keyboard operations.
  *

File: java/client/src/org/openqa/selenium/SeleneseCommandExecutor.java
Patch:
@@ -57,7 +57,6 @@
 import com.thoughtworks.selenium.Selenium;
 import com.thoughtworks.selenium.SeleniumException;
 
-import org.openqa.selenium.firefox.internal.Executable;
 import org.openqa.selenium.internal.selenesedriver.ClearElement;
 import org.openqa.selenium.internal.selenesedriver.ClickElement;
 import org.openqa.selenium.internal.selenesedriver.Close;

File: java/client/src/org/openqa/selenium/browserlaunchers/locators/Firefox3Locator.java
Patch:
@@ -1,7 +1,7 @@
 package org.openqa.selenium.browserlaunchers.locators;
 
 import org.openqa.selenium.Platform;
-import org.openqa.selenium.browserlaunchers.locators.FirefoxLocator;
+
 import org.openqa.selenium.os.WindowsUtils;
 import org.openqa.selenium.os.CommandLine;
 

File: java/client/src/org/openqa/selenium/browserlaunchers/locators/FirefoxLocator.java
Patch:
@@ -1,6 +1,5 @@
 package org.openqa.selenium.browserlaunchers.locators;
 
-import org.openqa.selenium.browserlaunchers.locators.SingleBrowserLocator;
 
 /**
  * Discovers a valid Firefox installation on local system.

File: java/client/src/org/openqa/selenium/browserlaunchers/locators/GoogleChromeLocator.java
Patch:
@@ -17,7 +17,6 @@
 
 package org.openqa.selenium.browserlaunchers.locators;
 
-import org.openqa.selenium.browserlaunchers.locators.SingleBrowserLocator;
 import org.openqa.selenium.os.WindowsUtils;
 
 /**

File: java/client/src/org/openqa/selenium/browserlaunchers/locators/InternetExplorerLocator.java
Patch:
@@ -1,6 +1,5 @@
 package org.openqa.selenium.browserlaunchers.locators;
 
-import org.openqa.selenium.browserlaunchers.locators.SingleBrowserLocator;
 import org.openqa.selenium.os.WindowsUtils;
 
 /**

File: java/client/src/org/openqa/selenium/browserlaunchers/locators/SafariLocator.java
Patch:
@@ -1,6 +1,5 @@
 package org.openqa.selenium.browserlaunchers.locators;
 
-import org.openqa.selenium.browserlaunchers.locators.SingleBrowserLocator;
 import org.openqa.selenium.os.WindowsUtils;
 
 /**

File: java/client/src/org/openqa/selenium/firefox/Preferences.java
Patch:
@@ -19,13 +19,11 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Maps;
-import com.google.common.io.Closeables;
 import com.google.common.io.LineReader;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.io.Cleanly;
 
 import java.io.File;
-import java.io.FileNotFoundException;
 import java.io.FileReader;
 import java.io.IOException;
 import java.io.Reader;

File: java/client/src/org/openqa/selenium/html5/DatabaseStorage.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.html5;
 
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.html5.ResultSet;
 
 public interface DatabaseStorage {
 

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitMouse.java
Patch:
@@ -27,9 +27,7 @@
 import com.gargoylesoftware.htmlunit.javascript.host.MouseEvent;
 import org.openqa.selenium.Mouse;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.WebElement;
 import org.openqa.selenium.interactions.InvalidCoordinatesException;
-import org.openqa.selenium.internal.Locatable;
 import org.openqa.selenium.interactions.internal.Coordinates;
 
 /**

File: java/client/src/org/openqa/selenium/interactions/KeyUpAction.java
Patch:
@@ -20,10 +20,8 @@
 import org.openqa.selenium.Keyboard;
 import org.openqa.selenium.Keys;
 import org.openqa.selenium.Mouse;
-import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.WebElement;
-import org.openqa.selenium.internal.Locatable;
 import org.openqa.selenium.interactions.internal.SingleKeyAction;
+import org.openqa.selenium.internal.Locatable;
 
 /**
  * Emulates key release only, without the press.

File: java/client/src/org/openqa/selenium/internal/SocketLock.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.internal;
 
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.internal.Lock;
 
 import java.io.IOException;
 import java.net.BindException;

File: java/client/src/org/openqa/selenium/internal/selenesedriver/AbstractElementFinder.java
Patch:
@@ -27,7 +27,6 @@
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLDecoder;
-import java.net.URLEncoder;
 import java.util.List;
 import java.util.Map;
 

File: java/client/src/org/openqa/selenium/internal/selenesedriver/ExecuteAsyncScript.java
Patch:
@@ -20,15 +20,12 @@
 import org.openqa.selenium.TimeoutException;
 import org.openqa.selenium.WebDriverException;
 
-import com.google.common.base.Joiner;
 import com.thoughtworks.selenium.Selenium;
 import com.thoughtworks.selenium.SeleniumException;
 import org.json.JSONException;
-import org.json.JSONObject;
 import org.json.JSONWriter;
 
 import java.io.StringWriter;
-import java.util.List;
 import java.util.Map;
 
 public class ExecuteAsyncScript implements SeleneseFunction<Object> {

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/AddLocationStrategy.java
Patch:
@@ -17,9 +17,7 @@
 
 package org.openqa.selenium.internal.seleniumemulation;
 
-import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.WebElement;
 
 public class AddLocationStrategy extends SeleneseCommand<Void> {
   private final ElementFinder elementFinder;

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/GetEval.java
Patch:
@@ -20,7 +20,6 @@
 
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.internal.seleniumemulation.SeleneseCommand;
 
 /**
  * An implementation of the "getEval" method from Selenium.

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/RemoveSelection.java
Patch:
@@ -17,9 +17,7 @@
 
 package org.openqa.selenium.internal.seleniumemulation;
 
-import com.thoughtworks.selenium.SeleniumException;
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.WebElement;
 
 public class RemoveSelection extends SeleneseCommand<Void> {
 

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/WaitForCondition.java
Patch:
@@ -22,7 +22,6 @@
 
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.internal.seleniumemulation.SeleneseCommand;
 
 public class WaitForCondition extends SeleneseCommand<Void> {
 

File: java/client/src/org/openqa/selenium/io/Zip.java
Patch:
@@ -1,8 +1,6 @@
 package org.openqa.selenium.io;
 
 import org.openqa.selenium.internal.Base64Encoder;
-import org.openqa.selenium.io.Cleanly;
-import org.openqa.selenium.io.FileHandler;
 
 import java.io.BufferedOutputStream;
 import java.io.ByteArrayInputStream;

File: java/client/src/org/openqa/selenium/os/WindowsRegistryException.java
Patch:
@@ -1,7 +1,6 @@
 package org.openqa.selenium.os;
 
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.os.WindowsUtils;
 
 @SuppressWarnings("serial")
 public class WindowsRegistryException extends WebDriverException {

File: java/client/src/org/openqa/selenium/remote/Command.java
Patch:
@@ -17,8 +17,6 @@
 
 package org.openqa.selenium.remote;
 
-import com.google.common.collect.Maps;
-
 import org.json.JSONObject;
 
 import java.util.HashMap;

File: java/client/src/org/openqa/selenium/support/events/internal/EventFiringMouse.java
Patch:
@@ -4,8 +4,6 @@
 import org.openqa.selenium.HasInputDevices;
 import org.openqa.selenium.Mouse;
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.WebElement;
-import org.openqa.selenium.internal.WrapsElement;
 import org.openqa.selenium.interactions.internal.Coordinates;
 import org.openqa.selenium.support.events.WebDriverEventListener;
 

File: java/client/src/org/openqa/selenium/support/pagefactory/Annotations.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.support.pagefactory;
 
 import org.openqa.selenium.By;
-import org.openqa.selenium.support.pagefactory.ByChained;
 import org.openqa.selenium.support.ByIdOrName;
 import org.openqa.selenium.support.CacheLookup;
 import org.openqa.selenium.support.FindBy;

File: java/client/src/org/openqa/selenium/support/ui/WebDriverWait.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.concurrent.TimeUnit;
 
 import org.openqa.selenium.NotFoundException;
-import org.openqa.selenium.StaleElementReferenceException;
 import org.openqa.selenium.WebDriver;
 
 /**

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/ElementFinder.java
Patch:
@@ -95,7 +95,6 @@ public WebElement findElement(WebDriver driver, String locator) {
       }
       return (WebElement) ((JavascriptExecutor) driver).executeScript(findElement, locator);
     } catch (WebDriverException e) {
-      e.printStackTrace();
       throw new SeleniumException("Element " + locator + " not found", e);
     }
   }

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/Windows.java
Patch:
@@ -82,7 +82,6 @@ public void selectFrame(WebDriver driver, String locator) {
     } catch (NoSuchFrameException e) {
       throw new SeleniumException(e.getMessage(), e);
     }
-
   }
 
   private void selectWindowWithTitle(WebDriver driver, String title) {

File: java/server/src/org/openqa/grid/web/servlet/ConsoleServlet.java
Patch:
@@ -104,7 +104,7 @@ protected void process(HttpServletRequest request, HttpServletResponse response)
 
 		builder.append("<body>");
 		builder.append("<H1>Grid Hub ");
-		builder.append(coreVersion + "[" + coreRevision + "]");
+		builder.append(coreVersion + coreRevision);
 		builder.append("</H1>");
 
 		for (RemoteProxy proxy : getRegistry().getAllProxies()) {

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -30,6 +30,7 @@ public class Pages {
   public String redirectPage;
   public String javascriptEnhancedForm;
   public String javascriptPage;
+  public String macbethPage;
   public String framesetPage;
   public String iframePage;
   public String dragAndDropPage;
@@ -82,6 +83,7 @@ public Pages(AppServer appServer) {
     iframePage = appServer.whereIs("iframes.html");
     javascriptEnhancedForm = appServer.whereIs("javascriptEnhancedForm.html");
     javascriptPage = appServer.whereIs("javascriptPage.html");
+    macbethPage = appServer.whereIs("macbeth.html");
     mapVisibilityPage = appServer.whereIs("map_visibility.html");
     metaRedirectPage = appServer.whereIs("meta-redirect.html");
     mouseTrackerPage = appServer.whereIs("mousePositionTracker.html");

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -51,6 +51,7 @@
 import static org.hamcrest.Matchers.is;
 import static org.openqa.selenium.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.TestWaiter.waitFor;
+import static org.openqa.selenium.WaitingConditions.pageTitleToBe;
 
 
 public class FirefoxDriverTest extends AbstractDriverTestCase {
@@ -112,6 +113,7 @@ public void testANewProfileShouldAllowSettingAdditionalParameters() {
 
       try {
         WebDriver secondDriver = newFirefoxDriver(profile);
+	waitFor(pageTitleToBe(secondDriver, "We Leave From Here"));
         String title = secondDriver.getTitle();
         secondDriver.quit();
 

File: java/client/src/org/openqa/selenium/WebDriverCommandProcessor.java
Patch:
@@ -35,6 +35,7 @@
 import org.openqa.selenium.internal.seleniumemulation.CaptureScreenshotToString;
 import org.openqa.selenium.internal.seleniumemulation.Check;
 import org.openqa.selenium.internal.seleniumemulation.Click;
+import org.openqa.selenium.internal.seleniumemulation.ClickAt;
 import org.openqa.selenium.internal.seleniumemulation.Close;
 import org.openqa.selenium.internal.seleniumemulation.CompoundMutator;
 import org.openqa.selenium.internal.seleniumemulation.ControlKeyDown;
@@ -314,6 +315,7 @@ private void setUpMethodMap() {
     seleneseMethods.put("attachFile", new AttachFile(elementFinder));
     seleneseMethods.put("captureScreenshotToString", new CaptureScreenshotToString());
     seleneseMethods.put("click", new Click(alertOverride, elementFinder));
+    seleneseMethods.put("clickAt", new ClickAt(alertOverride, elementFinder));
     seleneseMethods.put("check", new Check(alertOverride, elementFinder));
     seleneseMethods.put("chooseCancelOnNextConfirmation", new SetNextConfirmationState(false));
     seleneseMethods.put("chooseOkOnNextConfirmation", new SetNextConfirmationState(true));

File: java/client/test/com/thoughtworks/selenium/SeleniumRcTestSuite.java
Patch:
@@ -24,6 +24,7 @@
 import com.thoughtworks.selenium.corebased.TestBrowserVersion;
 import com.thoughtworks.selenium.corebased.TestCheckUncheck;
 import com.thoughtworks.selenium.corebased.TestClick;
+import com.thoughtworks.selenium.corebased.TestClickAt;
 import com.thoughtworks.selenium.corebased.TestClickBlankTarget;
 import com.thoughtworks.selenium.corebased.TestClickJavascriptHref;
 import com.thoughtworks.selenium.corebased.TestClickJavascriptHrefChrome;
@@ -107,6 +108,7 @@
     TestBrowserVersion.class,
     TestCheckUncheck.class,
     TestClick.class,
+    TestClickAt.class,
     TestClickBlankTarget.class,
     TestClickJavascriptHref.class,
     TestClickJavascriptHrefChrome.class,

File: java/client/test/com/thoughtworks/selenium/WebDriverSeleniumTestSuite.java
Patch:
@@ -20,6 +20,8 @@
 import com.thoughtworks.selenium.corebased.TestAddLocationStrategy;
 import com.thoughtworks.selenium.corebased.TestAddSelection;
 import com.thoughtworks.selenium.corebased.TestCheckUncheck;
+import com.thoughtworks.selenium.corebased.TestClick;
+import com.thoughtworks.selenium.corebased.TestClickAt;
 import com.thoughtworks.selenium.corebased.TestCommandError;
 import com.thoughtworks.selenium.corebased.TestComments;
 import com.thoughtworks.selenium.corebased.TestCssLocators;
@@ -60,6 +62,7 @@
     TestAddLocationStrategy.class,
     TestAddSelection.class,
     TestCheckUncheck.class,
+    TestClickAt.class,
     TestCommandError.class,
     TestComments.class,
     TestCssLocators.class,

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/CompoundMutator.java
Patch:
@@ -88,8 +88,6 @@ public void mutate(String script, StringBuilder outputTo) {
     outputTo.append("return eval('");
     outputTo.append(escape(nested.toString()));
     outputTo.append("');");
-    
-    System.out.println(outputTo);
   }
 
   private String escape(String escapee) {

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/ElementFinder.java
Patch:
@@ -124,7 +124,6 @@ private WebElement findElementDirectlyIfNecessary(WebDriver driver, String locat
     }
 
     if (locator.startsWith("css=")) {
-      System.out.println("Looking for css directly");
       String selector = locator.substring("css=".length());
       try {
         return driver.findElement(By.cssSelector(selector));

File: java/server/test/org/openqa/grid/internal/RemoteProxyFactory.java
Patch:
@@ -10,7 +10,7 @@
 public class RemoteProxyFactory {
 
 	/**
-	 * Create a simple proxy with 1 capability : {"applicationName=appName"} and
+	 * Create a simple proxy with 1 capability : {"browserName=appName"} and
 	 * the configuration {"url=url"}
 	 * 
 	 * @param appName
@@ -23,7 +23,7 @@ public static RemoteProxy getNewBasicRemoteProxy(String appName, String url,Regi
 		RegistrationRequest req = new RegistrationRequest();
 
 		Map<String, Object> capability = new HashMap<String, Object>();
-		capability.put("applicationName", appName);
+		capability.put("browserName", appName);
 		req.addDesiredCapabilitiy(capability);
 
 		Map<String, Object> config = new HashMap<String, Object>();

File: java/server/test/org/openqa/grid/internal/StatusServletTests.java
Patch:
@@ -68,7 +68,7 @@ public static void setup() throws Exception {
 
 		RegistrationRequest req = new RegistrationRequest();
 		Map<String, Object> capability = new HashMap<String, Object>();
-		capability.put("applicationName", "custom app");
+		capability.put("browserName", "custom app");
 		req.addDesiredCapabilitiy(capability);
 
 		Map<String, Object> config = new HashMap<String, Object>();
@@ -83,7 +83,7 @@ public static void setup() throws Exception {
 		registry.add(customProxy);
 
 		Map<String, Object> cap = new HashMap<String, Object>();
-		cap.put("applicationName", "app1");
+		cap.put("browserName", "app1");
 
 		MockedRequestHandler newSessionRequest = new MockedRequestHandler(registry);
 		newSessionRequest.setRequestType(RequestType.START_SESSION);

File: java/client/src/org/openqa/selenium/WebDriverCommandProcessor.java
Patch:
@@ -323,7 +323,7 @@ private void setUpMethodMap() {
     seleneseMethods.put("controlKeyUp", new ControlKeyUp(keyState));
     seleneseMethods.put("deleteAllVisibleCookies", new DeleteAllVisibleCookies());
     seleneseMethods.put("deleteCookie", new DeleteCookie());
-    seleneseMethods.put("doubleClick", new DoubleClick(elementFinder));
+    seleneseMethods.put("doubleClick", new DoubleClick(alertOverride, elementFinder));
     seleneseMethods.put("dragdrop", new DragAndDrop(elementFinder));
     seleneseMethods.put("dragAndDrop", new DragAndDrop(elementFinder));
     seleneseMethods.put("fireEvent", new FireEvent(elementFinder, javascriptLibrary));

File: java/server/src/org/openqa/grid/common/exception/CapabilityNotPresentOnTheGridException.java
Patch:
@@ -14,7 +14,7 @@
 limitations under the License.
  */
 
-package org.openqa.grid.internal.exception;
+package org.openqa.grid.common.exception;
 
 import java.util.Map;
 

File: java/server/src/org/openqa/grid/common/exception/RemoteException.java
Patch:
@@ -1,4 +1,4 @@
-package org.openqa.grid.internal.exception;
+package org.openqa.grid.common.exception;
 
 public class RemoteException extends GridException {
 

File: java/server/src/org/openqa/grid/common/exception/RemoteNotReachableException.java
Patch:
@@ -1,4 +1,4 @@
-package org.openqa.grid.internal.exception;
+package org.openqa.grid.common.exception;
 
 public class RemoteNotReachableException extends RemoteException {
 

File: java/server/src/org/openqa/grid/internal/Registry.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.logging.Level;
 import java.util.logging.Logger;
 
-import org.openqa.grid.internal.exception.CapabilityNotPresentOnTheGridException;
+import org.openqa.grid.common.exception.CapabilityNotPresentOnTheGridException;
 import org.openqa.grid.internal.listeners.Prioritizer;
 import org.openqa.grid.internal.listeners.RegistrationListener;
 import org.openqa.grid.internal.listeners.SelfHealingProxy;

File: java/server/src/org/openqa/grid/internal/listeners/SelfHealingProxy.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.List;
 
-import org.openqa.grid.internal.exception.RemoteException;
+import org.openqa.grid.common.exception.RemoteException;
 
 /**
  * Defines of how the proxy tries to mitigate system errors like network

File: java/server/src/org/openqa/grid/selenium/proxy/WebRemoteProxy.java
Patch:
@@ -30,11 +30,11 @@
 import org.apache.http.impl.client.DefaultHttpClient;
 import org.apache.http.message.BasicHttpRequest;
 import org.openqa.grid.common.RegistrationRequest;
+import org.openqa.grid.common.exception.RemoteException;
+import org.openqa.grid.common.exception.RemoteNotReachableException;
 import org.openqa.grid.internal.Registry;
 import org.openqa.grid.internal.RemoteProxy;
 import org.openqa.grid.internal.TestSession;
-import org.openqa.grid.internal.exception.RemoteException;
-import org.openqa.grid.internal.exception.RemoteNotReachableException;
 import org.openqa.grid.internal.listeners.CommandListener;
 import org.openqa.grid.internal.listeners.SelfHealingProxy;
 import org.openqa.grid.internal.listeners.TimeoutListener;

File: java/server/src/org/openqa/grid/selenium/utils/GridConfiguration.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.openqa.grid.internal.exception.GridException;
+import org.openqa.grid.common.exception.GridException;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.net.NetworkUtils;
 import org.openqa.selenium.remote.DesiredCapabilities;

File: java/server/src/org/openqa/selenium/server/cli/RemoteControlLauncher.java
Patch:
@@ -174,10 +174,10 @@ public static RemoteControlConfiguration parseLauncherOptions(String[] args) {
                 configuration.setHonorSystemProxy(true);
             } else if (arg.startsWith("-D")) {
                 setSystemProperty(arg);
-            } else {
+            } /*else {
                 usage("unrecognized argument " + arg);
                 System.exit(1);
-            }
+            }*/
         }
         if (configuration.userJSInjection() && !configuration.getProxyInjectionModeArg()) {
             System.err.println("User js injection can only be used w/ -proxyInjectionMode");

File: java/server/test/org/openqa/grid/internal/RegistryTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.openqa.grid.common.RegistrationRequest;
-import org.openqa.grid.internal.exception.CapabilityNotPresentOnTheGridException;
+import org.openqa.grid.common.exception.CapabilityNotPresentOnTheGridException;
 import org.openqa.grid.internal.listeners.RegistrationListener;
 import org.openqa.grid.internal.mock.MockedNewSessionRequestHandler;
 import org.openqa.grid.internal.mock.MockedRequestHandler;

File: java/client/src/org/openqa/selenium/chrome/ChromeDriverService.java
Patch:
@@ -85,7 +85,7 @@ public static ChromeDriverService createDefaultService() {
     String exePath = System.getProperty(CHROME_DRIVER_EXE_PROPERTY, defaultPath);
     checkState(exePath != null,
         "The path to the chromedriver executable must be set by the %s system property;" +
-            " fore more information, see http://code.google.com/p/selenium/wiki/ChromeDriver",
+            " for more information, see http://code.google.com/p/selenium/wiki/ChromeDriver",
         CHROME_DRIVER_EXE_PROPERTY);
 
     File exe = new File(exePath);

File: java/client/src/org/openqa/selenium/chrome/ChromeDriverService.java
Patch:
@@ -84,7 +84,8 @@ public static ChromeDriverService createDefaultService() {
     String defaultPath = findExecutable("chromedriver");
     String exePath = System.getProperty(CHROME_DRIVER_EXE_PROPERTY, defaultPath);
     checkState(exePath != null,
-        "The path to the chromedriver executable must be set by the %s system property",
+        "The path to the chromedriver executable must be set by the %s system property;" +
+            " fore more information, see http://code.google.com/p/selenium/wiki/ChromeDriver",
         CHROME_DRIVER_EXE_PROPERTY);
 
     File exe = new File(exePath);

File: java/client/src/org/openqa/selenium/chrome/ChromeDriverService.java
Patch:
@@ -117,9 +117,9 @@ public boolean isRunning() {
         return false;
       }
       process.exitValue();
-      return true;
-    } catch (IllegalThreadStateException e) {
       return false;
+    } catch (IllegalThreadStateException e) {
+      return true;
     } finally {
       lock.unlock();
     }

File: java/server/src/org/openqa/grid/web/servlet/TestSessionStatusServlet.java
Patch:
@@ -74,7 +74,7 @@ private JSONObject getResponse(HttpServletRequest request) throws IOException, J
 		JSONObject res = new JSONObject();
 		res.put("success", false);
 
-		// the id can be specied via a param, or in the json request.
+		// the id can be specified via a param, or in the json request.
 		String session = null;
 		if (requestJSON == null) {
 			session = request.getParameter("session");

File: java/server/src/org/openqa/grid/common/RegistrationRequest.java
Patch:
@@ -59,6 +59,7 @@ public class RegistrationRequest {
 	public static final String REMOTE_URL = "url";
 	public static final String MAX_SESSION = "maxSession";
 	public static final String AUTO_REGISTER = "register";
+	public static final String NODE_POLLING = "nodePolling";
 
 	public static final String MAX_TESTS_BEFORE_CLEAN = "maxTestBeforeClean";
 	public static final String CLEAN_SNAPSHOT = "cleanSnapshot";

File: java/client/src/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -179,7 +179,7 @@ protected void addWebDriverExtensionIfNeeded() {
     }
 
     ClasspathExtension extension = new ClasspathExtension(FirefoxProfile.class,
-        "/" + getClass().getPackage().getName().replace(".", "/") + "/webdriver.xpi");
+        "/" + FirefoxProfile.class.getPackage().getName().replace(".", "/") + "/webdriver.xpi");
     addExtension("webdriver", extension);
   }
 

File: java/server/src/org/openqa/selenium/remote/server/DriverServlet.java
Patch:
@@ -120,6 +120,9 @@ private void setupMappings(DriverSessions driverSessions, Logger logger) {
 
     postMapper.bind("/config/drivers", AddConfig.class).on(ResultType.SUCCESS, new EmptyResult());
 
+    getMapper.bind("/status", Status.class)
+        .on(ResultType.SUCCESS, new JsonResult(RESPONSE));
+
     postMapper.bind("/session", NewSession.class)
         .on(ResultType.SUCCESS, new RedirectResult("/session/:sessionId"));
     getMapper.bind("/session/:sessionId", GetSessionCapabilities.class)

File: java/client/test/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -56,7 +56,7 @@ public class SingleTestSuite extends TestCase {
       }};
 
   public static Test suite() throws Exception {
-    String driver = REMOTE;
+    String driver = SELENIUM;
 
     System.setProperty("jna.library.path", "..\\build;build");
     System.setProperty("webdriver.selenium.server.port", String.valueOf(findFreePort()));
@@ -69,7 +69,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ElementSelectingTest")
+        .onlyRun("ImplicitWaitTest")
+        .method("testShouldStillFailToFindElementsByIdWhenImplicitWaitsAreEnabled")
         .exclude(ALL)
         .exclude(EXCLUSIONS_BY_DRIVER.get(driver))
         .outputTestNames()

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -141,7 +141,6 @@ public void testShouldBeAbleToDetermineTheLocationOfAnElement() {
   }
 
   @JavascriptEnabled
-  @Ignore(SELENESE)
   public void testShouldBeAbleToDetermineTheSizeOfAnElement() {
     driver.get(pages.xhtmlTestPage);
 

File: java/client/test/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -118,7 +118,6 @@ public Boolean call() throws Exception {
   }
 
   @JavascriptEnabled
-  @Ignore(SELENESE)
   public void testShouldCorrectlyIdentifyThatAnElementHasWidth() {
     driver.get(pages.xhtmlTestPage);
 

File: java/client/test/org/openqa/selenium/StaleElementReferenceTest.java
Patch:
@@ -34,7 +34,6 @@ public void testOldPage() {
   }
 
   @JavascriptEnabled
-  @Ignore(SELENESE)
   public void testShouldNotCrashWhenCallingGetSizeOnAnObsoleteElement() {
     driver.get(pages.simpleTestPage);
     WebElement elem = driver.findElement(By.id("links"));

File: java/client/src/org/openqa/selenium/support/ui/FluentWait.java
Patch:
@@ -162,7 +162,7 @@ public Boolean apply(T input) {
    * @param <V> The function's expected return type.
    * @return The functions' return value.
    */
-  public <V> V until(Function<T, V> isTrue) {
+  public <V> V until(Function<? super T, V> isTrue) {
     long end = clock.laterBy(timeout.in(MILLISECONDS));
     RuntimeException lastException = null;
     while (true) {

File: java/client/src/org/openqa/selenium/support/ui/Wait.java
Patch:
@@ -41,5 +41,5 @@ public interface Wait<F> {
    * @param <T> the return type of the method, which must not be Void
    * @param isTrue the parameter to pass to the {@link ExpectedCondition}
    */
-  <T> T until(Function<F, T> isTrue);
+  <T> T until(Function<? super F, T> isTrue);
 }

File: android/src/java/org/openqa/selenium/android/JavascriptDomAccessor.java
Patch:
@@ -740,8 +740,8 @@ private String getTopLeftCoordinatesJS() {
     return "var topLeftX = 0;" +
         "var topLeftY = 0; "+
         "if (element.getBoundingClientRect) {" +
-        "  topLeftX = element.getBoundingClientRect().left;" +
-        "  topLeftY = element.getBoundingClientRect().top;" +
+        "  topLeftX = element.getClientRects()[0].left;" +
+        "  topLeftY = element.getClientRects()[0].top;" +
         "}";
   }
   

File: java/client/src/org/openqa/selenium/android/AndroidDriver.java
Patch:
@@ -98,7 +98,7 @@ public ScreenOrientation getOrientation() {
 
   private static URL getDefaultUrl() {
     try {
-      return new URL("http://localhost:8080/hub");
+      return new URL("http://localhost:8080/wd/hub");
     } catch (MalformedURLException e) {
       throw new WebDriverException("Malformed default remote URL: " + e.getMessage());
     }

File: java/client/test/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -29,6 +29,7 @@
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.WaitingConditions.elementTextToContain;
@@ -315,7 +316,7 @@ public void testSubmittingFormFromFormInputTextElementShouldFireOnSubmitForThatF
   }
 
   @JavascriptEnabled 
-  @Ignore(value = {CHROME, SELENESE, IPHONE, ANDROID},
+  @Ignore(value = {CHROME, SELENESE, IPHONE, ANDROID, OPERA},
       reason = "Does not yet support file uploads")
   public void testUploadingFileShouldFireOnChangeEvent() throws IOException {
     driver.get(pages.formPage);
@@ -363,7 +364,7 @@ private void assertEventFired(String eventName) {
 
     assertTrue("No " + eventName + " fired: " + text, conditionMet);
   }
-  
+
   private void assertEventNotFired(String eventName) {
     WebElement result = driver.findElement(By.id("result"));
     String text = result.getText();

File: java/client/test/org/openqa/selenium/ExecutingAsyncJavascriptTest.java
Patch:
@@ -6,6 +6,7 @@
 import static org.openqa.selenium.Ignore.Driver.ANDROID;
 import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.IE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 import org.junit.Test;
@@ -14,8 +15,8 @@
 import java.util.List;
 import java.util.concurrent.TimeUnit;
 
-@Ignore(value = {IE, CHROME},
-    reason = "IE: Every test appears to be failing. Chrome: not implemented yet")
+@Ignore(value = {IE, CHROME, OPERA},
+    reason = "IE: Every test appears to be failing. Chrome, Opera: not implemented yet")
 public class ExecutingAsyncJavascriptTest extends AbstractDriverTestCase {
 
   private JavascriptExecutor executor;

File: java/client/test/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
@@ -134,7 +135,7 @@ public void testShouldEnterDataIntoFormFields() {
     assertThat(newFormValue, equalTo("some text"));
   }
 
-  @Ignore(value = {CHROME, SELENESE, IPHONE, ANDROID, IE},
+  @Ignore(value = {CHROME, SELENESE, IPHONE, ANDROID, IE, OPERA},
       reason = "Does not yet support file uploads")
   public void testShouldBeAbleToAlterTheContentsOfAFileUploadInputElement() throws IOException {
     driver.get(pages.formPage);
@@ -150,7 +151,7 @@ public void testShouldBeAbleToAlterTheContentsOfAFileUploadInputElement() throws
     assertThat(value.getCanonicalPath(), equalTo(file.getCanonicalPath()));
   }
 
-  @Ignore(value = {CHROME, SELENESE, IPHONE, ANDROID},
+  @Ignore(value = {CHROME, SELENESE, IPHONE, ANDROID, OPERA},
       reason = "Does not yet support file uploads")
   public void testShouldBeAbleToUploadTheSameFileTwice() throws IOException {
     File file = File.createTempFile("test", "txt");

File: java/client/test/org/openqa/selenium/I18nTest.java
Patch:
@@ -27,6 +27,7 @@
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 
@@ -86,7 +87,7 @@ public void testShouldBeAbleToReturnTheTextInAPage() {
   }
 
   @NeedsFreshDriver
-  @Ignore(value = {IE, SELENESE, CHROME, HTMLUNIT, FIREFOX}, reason="Not implemented on anything other than"
+  @Ignore(value = {IE, SELENESE, CHROME, HTMLUNIT, FIREFOX, OPERA}, reason="Not implemented on anything other than"
       + "Firefox/Linux at the moment.")
   public void testShouldBeAbleToActivateIMEEngine() throws InterruptedException {
     if (!Platform.getCurrent().is(Platform.LINUX)) {
@@ -146,7 +147,7 @@ public void testShouldBeAbleToActivateIMEEngine() throws InterruptedException {
         + " It was:" + elementValue, elementValue.equals(tokyo));
   }
 
-  @Ignore(value = {IE, SELENESE, CHROME, HTMLUNIT}, reason="Not implemented on anything other than"
+  @Ignore(value = {IE, SELENESE, CHROME, HTMLUNIT, OPERA}, reason="Not implemented on anything other than"
       + "Firefox/Linux at the moment.")
   public void testShouldBeAbleToInputJapanese() {
     if (!Platform.getCurrent().is(Platform.LINUX)) {

File: java/client/test/org/openqa/selenium/Ignore.java
Patch:
@@ -28,7 +28,7 @@
 
   public static enum Driver {
 
-    ALL, ANDROID, HTMLUNIT, IE, FIREFOX, REMOTE, IPHONE, CHROME, CHROME_NON_WINDOWS, SELENESE
+    ALL, ANDROID, HTMLUNIT, IE, FIREFOX, REMOTE, IPHONE, CHROME, CHROME_NON_WINDOWS, SELENESE, OPERA
   }
 
   Driver[] value() default {Driver.ALL};

File: java/client/test/org/openqa/selenium/OpacityTest.java
Patch:
@@ -19,6 +19,7 @@
 package org.openqa.selenium;
 
 import static org.openqa.selenium.Ignore.Driver.IE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 public class OpacityTest extends AbstractDriverTestCase {
@@ -28,7 +29,7 @@ public class OpacityTest extends AbstractDriverTestCase {
    *   http://code.google.com/p/selenium/issues/detail?id=1610</a>
    */
   @JavascriptEnabled
-  @Ignore({IE, SELENESE})
+  @Ignore({IE, SELENESE, OPERA})
   public void testShouldBeAbleToClickOnElementsWithOpacityZero() {
     driver.get(pages.clickJacker);
 

File: java/client/test/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -25,6 +25,7 @@
 import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.WaitingConditions.pageTitleToBe;
@@ -136,7 +137,7 @@ public void testShouldBeAbleToNavigateForwardsInTheBrowserHistory() {
     assertThat(driver.getTitle(), equalTo("We Arrive Here"));
   }
 
-  @Ignore({IE, CHROME, SELENESE, IPHONE})
+  @Ignore({IE, CHROME, SELENESE, IPHONE, OPERA})
   public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {
     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure("simpleTest.html");
     driver.get(url);
@@ -159,7 +160,7 @@ public void testShouldBeAbleToRefreshAPage() {
    * @see <a href="http://code.google.com/p/selenium/issues/detail?id=208">
    *     Issue 208</a>
    */
-  @Ignore(value = {IE, SELENESE, IPHONE}, reason = "Untested user-agents")
+  @Ignore(value = {IE, SELENESE, IPHONE, OPERA}, reason = "Untested user-agents")
   @JavascriptEnabled
   public void testShouldNotHangIfDocumentOpenCallIsNeverFollowedByDocumentCloseCall()
       throws Exception {

File: java/client/test/org/openqa/selenium/SelectElementHandlingTest.java
Patch:
@@ -23,11 +23,12 @@
 import static org.hamcrest.Matchers.is;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 public class SelectElementHandlingTest extends AbstractDriverTestCase {
 
-  @Ignore({IE, SELENESE, IPHONE})
+  @Ignore({IE, SELENESE, IPHONE, OPERA})
   public void testShouldBePossibleToDeselectASingleOptionFromASelectWhichAllowsMultipleChoices() {
     driver.get(pages.formPage);
 
@@ -76,7 +77,7 @@ public void testShouldBeAbleToChangeTheSelectedOptionInASelect() {
     assertThat(two.isSelected(), is(true));
   }
 
-  @Ignore(SELENESE)
+  @Ignore({SELENESE})
   public void testShouldBeAbleToSelectMoreThanOneOptionFromASelectWhichAllowsMultipleChoices() {
     driver.get(pages.formPage);
 

File: java/client/test/org/openqa/selenium/SlowLoadingPageTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 public class SlowLoadingPageTest extends AbstractDriverTestCase {
@@ -24,7 +25,7 @@ public void testShouldBlockUntilIFramesAreLoaded() throws Exception {
     assertElapsed(LOAD_TIME_IN_SECONDS * 1000, now - start);
   }
 
-  @Ignore(value = {IE, IPHONE, SELENESE},
+  @Ignore(value = {IE, IPHONE, SELENESE, OPERA},
       reason = "Selenium: refresh is unsupported; Others: untested")
   public void testRefreshShouldBlockUntilPageLoads() {
     long start = System.currentTimeMillis();

File: java/client/test/org/openqa/selenium/SvgElementTest.java
Patch:
@@ -22,14 +22,15 @@
 import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.REMOTE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.TestWaiter.waitFor;
 import static org.openqa.selenium.WaitingConditions.elementTextToEqual;
 
 public class SvgElementTest extends AbstractDriverTestCase {
 
-  @Ignore({HTMLUNIT, IE, CHROME, REMOTE, SELENESE})
+  @Ignore({HTMLUNIT, IE, CHROME, REMOTE, SELENESE, OPERA})
   public void testShouldClickOnGraphVisualElements() {
     driver.get(pages.svgPage);
     WebElement svg = driver.findElement(By.tagName("svg:svg"));

File: java/client/test/org/openqa/selenium/interactions/CombinedInputActionsTest.java
Patch:
@@ -33,6 +33,7 @@
 import static org.openqa.selenium.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.Ignore.Driver.REMOTE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
@@ -43,7 +44,7 @@ public class CombinedInputActionsTest extends AbstractDriverTestCase {
 
   //TODO: Check if this could work in any browser without native events. 
   @JavascriptEnabled
-  @Ignore({HTMLUNIT, ANDROID, IE, FIREFOX, REMOTE, IPHONE, CHROME, SELENESE})
+  @Ignore({HTMLUNIT, ANDROID, IE, FIREFOX, REMOTE, IPHONE, CHROME, SELENESE, OPERA})
   public void testClickingOnFormElements() {
     driver.get(pages.formSelectionPage);
 
@@ -68,7 +69,7 @@ public void testClickingOnFormElements() {
   }
 
   @JavascriptEnabled
-  @Ignore({ANDROID, IE, FIREFOX, REMOTE, IPHONE, CHROME, SELENESE})
+  @Ignore({ANDROID, IE, FIREFOX, REMOTE, IPHONE, CHROME, SELENESE, OPERA})
   public void testSelectingMultipleItems() {
     driver.get(pages.selectableItemsPage);
 

File: java/client/test/org/openqa/selenium/javascript/JsApiTestCase.java
Patch:
@@ -5,6 +5,7 @@
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.REMOTE;
 
 import org.openqa.selenium.AbstractDriverTestCase;
@@ -17,7 +18,7 @@
  *
  * @author jmleyba@gmail.com (Jason Leyba)
  */
-@Ignore(value = { HTMLUNIT, IE, IPHONE, CHROME, CHROME_NON_WINDOWS, REMOTE })
+@Ignore(value = { HTMLUNIT, IE, IPHONE, CHROME, CHROME_NON_WINDOWS, REMOTE, OPERA })
 public class JsApiTestCase extends AbstractDriverTestCase {
 
   private static final long TWO_MINUTES = 2 * 60 * 1000;

File: java/client/test/org/openqa/selenium/rc/CopyProfileTest.java
Patch:
@@ -17,13 +17,14 @@
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
+import static org.openqa.selenium.Ignore.Driver.OPERA;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 import static org.openqa.selenium.Platform.MAC;
 import static org.openqa.selenium.firefox.FirefoxDriver.PROFILE;
 
 // TODO(reorg): This test is never run. It must be.
 
-@Ignore(value = {HTMLUNIT, IE, IPHONE, CHROME, CHROME_NON_WINDOWS, SELENESE},
+@Ignore(value = {HTMLUNIT, IE, IPHONE, CHROME, CHROME_NON_WINDOWS, SELENESE, OPERA},
     reason = "Firefox specific test, but needs to be in remote")
 public class CopyProfileTest extends TestCase {
   private SeleniumServerInstance selenium;

File: java/client/src/org/openqa/selenium/support/ui/Select.java
Patch:
@@ -50,7 +50,9 @@ public Select(WebElement element) {
     this.element = element;
 
     String value = element.getAttribute("multiple");
-    isMulti = value != null;
+
+    // The atoms normalize the returned value, but check for "false"
+    isMulti = (value != null && !"false".equals(value));
   }
 
   /**

File: java/server/src/org/openqa/grid/internal/TestSession.java
Patch:
@@ -437,7 +437,7 @@ public void terminate() {
 	 * 
 	 * @see TestSession#terminate()
 	 */
-	void terminateSyncronousFOR_TEST_ONLY() {
+	void terminateSynchronousFOR_TEST_ONLY() {
 		slot._release();
 	}
 

File: java/server/src/org/openqa/grid/internal/listeners/TestSessionListener.java
Patch:
@@ -40,7 +40,7 @@ public interface TestSessionListener {
 	 * Will be run after the proxy slot is reserved for the test, but before the
 	 * first command is forwarded to the remote.
 	 * 
-	 * Gives a change to do a setup on the remote before the test start.
+	 * Gives a chance to do a setup on the remote before the test start.
 	 * 
 	 * WARNING : beforeSession should NOT throw exception. If an exception is
 	 * thrown, the session is considered invalid and the resources will be

File: java/server/test/org/openqa/grid/internal/ConcurrencyLock.java
Patch:
@@ -98,7 +98,7 @@ private void runTests2(Map<String, Object> cap) throws InterruptedException  {
 			TestSession s = newSessionRequest.getTestSession();
 			Thread.sleep(2000);
 			results.add("FF");
-			s.terminateSyncronousFOR_TEST_ONLY();
+			s.terminateSynchronousFOR_TEST_ONLY();
 		} else {
 			// wait for 1 sec before starting IE to make sure the FF proxy is
 			// busy with the 3 FF requests.

File: java/server/test/org/openqa/grid/internal/DefaultToFIFOPriorityTest.java
Patch:
@@ -4,7 +4,6 @@
 
 import java.util.ArrayList;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 
@@ -78,7 +77,7 @@ public void run() {
 		while (requests.size() != MAX) {
 			Thread.sleep(250);
 		}
-		session.terminateSyncronousFOR_TEST_ONLY();
+		session.terminateSynchronousFOR_TEST_ONLY();
 	}
 
 

File: java/server/test/org/openqa/grid/internal/LoadBalancedTests.java
Patch:
@@ -63,7 +63,7 @@ public void newSessionSpreadOnAllProxies() {
 			Assert.assertNotNull(session);
 			Assert.assertEquals(2,session.getSlot().getProxy().getTotalUsed());
 			// and release
-			session.terminateSyncronousFOR_TEST_ONLY();
+			session.terminateSynchronousFOR_TEST_ONLY();
 		}
 		
 		// at that point, 1 FF per proxy

File: java/server/test/org/openqa/grid/internal/ParallelTest.java
Patch:
@@ -228,7 +228,7 @@ public void releaseAndReserve() throws InterruptedException {
 
 			// release them
 			for (TestSession session : used) {
-				session.terminateSyncronousFOR_TEST_ONLY();
+				session.terminateSynchronousFOR_TEST_ONLY();
 			}
 			Assert.assertEquals(registry.getActiveSessions().size(), 0);
 			used.clear();
@@ -245,7 +245,7 @@ public void releaseAndReserve() throws InterruptedException {
 
 			Assert.assertEquals(registry.getActiveSessions().size(), 5);
 
-			used.get(0).terminateSyncronousFOR_TEST_ONLY();
+			used.get(0).terminateSynchronousFOR_TEST_ONLY();
 
 			MockedRequestHandler newSessionRequest = new MockedNewSessionRequestHandler(registry, app2);
 			newSessionRequest.process();

File: java/server/test/org/openqa/grid/internal/PriorityTest.java
Patch:
@@ -108,7 +108,7 @@ public void run() {
 		
 		// free the grid : the queue is consumed, and the test with the highest
 		// priority should be processed.
-		session.terminateSyncronousFOR_TEST_ONLY();
+		session.terminateSynchronousFOR_TEST_ONLY();
 
 	}
 

File: java/server/test/org/openqa/grid/internal/PriorityTestLoad.java
Patch:
@@ -85,7 +85,7 @@ public void run() {
 		}
 		
 		// release the initial request.
-		session.terminateSyncronousFOR_TEST_ONLY();
+		session.terminateSynchronousFOR_TEST_ONLY();
 	}
 
 	private static boolean reqDone = false;

File: java/server/src/org/openqa/grid/internal/listeners/TestSessionListener.java
Patch:
@@ -19,7 +19,7 @@
 import org.openqa.grid.internal.TestSession;
 
 /**
- * To be impletented by a class extending RemoteProxy.
+ * To be implemented by a class extending RemoteProxy.
  * 
  * WARNING : the before and after are executed by the proxy on the remote, and
  * the action taken in those method are not isolated, and can have consequences

File: java/server/src/org/openqa/grid/internal/exception/CapabilityNotPresentOnTheGridException.java
Patch:
@@ -22,6 +22,9 @@ public class CapabilityNotPresentOnTheGridException extends GridException {
 
 	private static final long serialVersionUID = -5382151149204616537L;
 
+	public CapabilityNotPresentOnTheGridException(String msg) {
+		super(msg);
+	}
 	public CapabilityNotPresentOnTheGridException(Map<String, Object> capabilities) {
 		super("cannot find : " + capabilities);
 	}

File: java/server/src/org/openqa/grid/internal/exception/GridException.java
Patch:
@@ -16,7 +16,9 @@
 
 package org.openqa.grid.internal.exception;
 
-public class GridException extends RuntimeException {
+import org.openqa.selenium.WebDriverException;
+
+public class GridException extends WebDriverException {
 
 	private static final long serialVersionUID = -3994209521865743841L;
 

File: java/server/src/org/openqa/grid/web/servlet/handler/WebDriverRequestHandler.java
Patch:
@@ -39,6 +39,8 @@ protected WebDriverRequestHandler(HttpServletRequest request, HttpServletRespons
 		super(request, response, registry);
 	}
 
+	
+
 	@Override
 	public RequestType extractRequestType() {
 

File: java/server/src/org/openqa/grid/web/utils/BrowserNameUtils.java
Patch:
@@ -56,6 +56,9 @@ public static Map<String, Object> parseGrid2Environment(String environment) {
 	}
 
 	private static String consoleIconName(DesiredCapabilities cap) {
+		if (cap.getBrowserName() == null){
+			return "missingBrowserName";
+		}
 		String browserString =cap.getBrowserName();
 		String ret = browserString;
 

File: java/server/test/org/openqa/grid/e2e/misc/Issue1586.java
Patch:
@@ -4,6 +4,7 @@
 import java.net.URL;
 
 import org.openqa.grid.e2e.utils.GridConfigurationMock;
+import org.openqa.grid.e2e.utils.RegistryTestHelper;
 import org.openqa.grid.internal.Registry;
 import org.openqa.grid.selenium.SelfRegisteringRemote;
 import org.openqa.grid.web.Hub;
@@ -32,7 +33,7 @@ public void prepare() throws Exception {
 		remote.addFirefoxSupport();
 		remote.launchRemoteServer();
 		remote.registerToHub();
-
+		RegistryTestHelper.waitForNode(hub.getRegistry(), 1);
 	}
 
 	@Test

File: java/server/test/org/openqa/grid/e2e/utils/RegistryTestHelper.java
Patch:
@@ -18,6 +18,7 @@ public static void waitForNode(final Registry r, final int nodeNumber) {
 			public Integer call() throws Exception {
 				Integer i = r.getAllProxies().size();
 				if (i != nodeNumber) {
+					System.err.println("IT WAS USEFUL");
 					return null;
 				} else {
 					return i;

File: java/server/test/org/openqa/grid/e2e/wd/SmokeTest.java
Patch:
@@ -4,6 +4,7 @@
 import java.net.URL;
 
 import org.openqa.grid.e2e.utils.GridConfigurationMock;
+import org.openqa.grid.e2e.utils.RegistryTestHelper;
 import org.openqa.grid.internal.Registry;
 import org.openqa.grid.selenium.SelfRegisteringRemote;
 import org.openqa.grid.web.Hub;
@@ -30,6 +31,7 @@ public void prepare() throws Exception {
 		remote.addFirefoxSupport();
 		remote.launchRemoteServer();
 		remote.registerToHub();
+		RegistryTestHelper.waitForNode(hub.getRegistry(), 1);
 	}
 
 	@Test

File: java/server/test/org/openqa/grid/internal/RegistryTest.java
Patch:
@@ -93,7 +93,7 @@ public void emptyRegistry() {
 
 	}
 	
-	@Test
+	//@Test(timeout=2000) excepted timeout here.How to specify that in junit ?
 	public void emptyRegistryParam() {
 		Registry registry = Registry.getNewInstanceForTestOnly();
 		registry.setThrowOnCapabilityNotPresent(false);
@@ -119,7 +119,8 @@ public void CapabilityNotPresentRegistry() {
 			registry.stop();
 		}
 	}
-	@Test
+	
+	//@Test(timeout=2000) excepted timeout here.How to specify that in junit ?
 	public void CapabilityNotPresentRegistryParam() {
 		Registry registry = Registry.getNewInstanceForTestOnly();
 		registry.setThrowOnCapabilityNotPresent(false);

File: java/server/test/org/openqa/grid/e2e/selenium/SeleniumTestCompleteTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.openqa.grid.e2e.selenium;
 
 import org.openqa.grid.e2e.utils.GridConfigurationMock;
+import org.openqa.grid.e2e.utils.RegistryTestHelper;
 import org.openqa.grid.internal.Registry;
 import org.openqa.grid.selenium.SelfRegisteringRemote;
 import org.openqa.grid.web.Hub;
@@ -33,6 +34,8 @@ public void setup() throws Exception {
 		selenium1.setTimeout(5000, 2000);
 		selenium1.launchRemoteServer();
 		selenium1.registerToHub();
+		
+		RegistryTestHelper.waitForNode(hub.getRegistry(), 1);
 	}
 
 	@Test

File: java/server/test/org/openqa/grid/e2e/wd/TimeoutWebDriver.java
Patch:
@@ -4,6 +4,7 @@
 import java.net.URL;
 
 import org.openqa.grid.e2e.utils.GridConfigurationMock;
+import org.openqa.grid.e2e.utils.RegistryTestHelper;
 import org.openqa.grid.internal.Registry;
 import org.openqa.grid.selenium.SelfRegisteringRemote;
 import org.openqa.grid.web.Hub;
@@ -33,6 +34,7 @@ public void prepare() throws Exception {
 
 		remote.launchRemoteServer();
 		remote.registerToHub();
+		RegistryTestHelper.waitForNode(hub.getRegistry(), 1);
 	}
 
 	@Test

File: java/client/test/org/openqa/selenium/ie/InternetExplorerDriverTestSuite.java
Patch:
@@ -58,7 +58,6 @@ public TestInternetExplorerDriver() {
     private static Capabilities buildDesiredCapabilities() {
       DesiredCapabilities caps = DesiredCapabilities.internetExplorer();
       caps.setCapability(INTRODUCE_FLAKINESS_BY_IGNORING_SECURITY_DOMAINS, true);
-        System.out.println("caps = " + caps);
       return caps;
     }
   }

File: java/server/src/org/openqa/grid/selenium/GridLauncher.java
Patch:
@@ -32,6 +32,7 @@ public static void main(String[] args) throws Exception {
 		case HUB:
 			Hub h = Hub.getInstance();
 			h.registerServlets(config.getServlets());
+			h.setPort(config.getPort());
 			h.start();
 			break;
 		case WEBDRIVER:

File: java/server/src/org/openqa/grid/selenium/utils/GridConfiguration.java
Patch:
@@ -188,7 +188,7 @@ public GridRole getRole() {
 		return role;
 	}
 
-	public int getPort2() {
+	public int getPort() {
 		return port;
 	}
 

File: java/client/src/org/openqa/selenium/remote/CapabilityType.java
Patch:
@@ -35,6 +35,8 @@ public interface CapabilityType {
   String PROXY = "proxy";
   String SUPPORTS_WEB_STORAGE = "webStorageEnabled";
   String ROTATABLE = "rotatable";
+  // Enable this capability to accept all SSL certs by defaults.
+  String ACCEPT_SSL_CERTS = "acceptSslCerts";
 
   interface ForSeleniumServer {
     String AVOIDING_PROXY = "avoidProxy";

File: java/client/test/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -131,6 +131,7 @@ public void testShouldCorrectlyIdentifyThatAnElementHasWidth() {
   }
 
   @JavascriptEnabled
+  @Ignore(SELENESE)
   public void testCorrectlyDetectMapElementsAreShown() {
     driver.get(pages.mapVisibilityPage);
 

File: java/client/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -109,11 +109,11 @@ public void testShouldNotBeAbleTofindElementsBasedOnIdIfTheElementIsNotThere() {
   }
 
   public void testShouldBeAbleToFindChildrenOfANode() {
-    driver.get(pages.xhtmlTestPage);
+    driver.get(pages.selectableItemsPage);
     List<WebElement> elements = driver.findElements(By.xpath("/html/head"));
     WebElement head = elements.get(0);
     List<WebElement> importedScripts = head.findElements(By.tagName("script"));
-    assertThat(importedScripts.size(), equalTo(2));
+    assertThat(importedScripts.size(), equalTo(3));
   }
 
   public void testReturnAnEmptyListWhenThereAreNoChildrenOfANode() {

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -21,6 +21,7 @@
 
 public class Pages {
   public String alertsPage;
+  public String clickJacker;
   public String simpleTestPage;
   public String simpleXmlDocument;
   public String xhtmlTestPage;
@@ -61,6 +62,7 @@ public class Pages {
   public Pages(AppServer appServer) {
     ajaxyPage = appServer.whereIs("ajaxy_page.html");
     alertsPage = appServer.whereIs("alerts.html");
+    clickJacker = appServer.whereIs("click_jacker.html");
     simpleTestPage = appServer.whereIs("simpleTest.html");
     simpleXmlDocument = appServer.whereIs("simple.xml");
     xhtmlTestPage = appServer.whereIs("xhtmlTest.html");

File: java/client/src/org/openqa/selenium/internal/selenesedriver/SetElementSelected.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.internal.selenesedriver;
 
 import com.thoughtworks.selenium.Selenium;
+import org.openqa.selenium.InvalidElementStateException;
 import org.openqa.selenium.WebDriverException;
 
 import java.util.Map;
@@ -36,10 +37,10 @@ public Void apply(Selenium selenium, Map<String, ?> args) {
       if (selenium.isEditable(locator)) {
         selenium.check(locator);
       } else {
-        throw new UnsupportedOperationException("Element is not selectable: " + locator);
+        throw new InvalidElementStateException("Element is not selectable: " + locator);
       }
     } else {
-      throw new UnsupportedOperationException("Element is not selectable: " + locator);
+      throw new InvalidElementStateException("Element is not selectable: " + locator);
     }
 
     return null;

File: java/client/src/org/openqa/selenium/internal/selenesedriver/ToggleElement.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium.internal.selenesedriver;
 
 import com.thoughtworks.selenium.Selenium;
+import org.openqa.selenium.InvalidElementStateException;
 
 import java.util.Map;
 
@@ -27,7 +28,7 @@ public Boolean apply(Selenium selenium, Map<String, ?> args) {
 
     String type = selenium.getAttribute(locator + "@type");
     if ("radio".equalsIgnoreCase(type)) {
-      throw new UnsupportedOperationException("You may not toggle a radio button");
+      throw new InvalidElementStateException("You may not toggle a radio button");
     }
 
     boolean wasChecked = selenium.isChecked(locator);

File: java/server/src/org/openqa/grid/selenium/GridLauncher.java
Patch:
@@ -31,7 +31,7 @@ public static void main(String[] args) throws Exception {
 			break;
 		case HUB:
 			Hub h = Hub.getInstance();
-			h.configure(config);
+			h.registerServlets(config.getServlets());
 			h.start();
 			break;
 		case WEBDRIVER:

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -118,7 +118,7 @@ public int toStatusCode(Throwable thrown) {
       return STALE_ELEMENT_REFERENCE;
     } else if (thrown instanceof ElementNotVisibleException) {
       return ELEMENT_NOT_VISIBLE;
-    } else if (thrown instanceof UnsupportedOperationException) {
+    } else if (thrown instanceof InvalidElementStateException) {
       return INVALID_ELEMENT_STATE;
     } else if (thrown instanceof XPathLookupException) {
       return XPATH_LOOKUP_ERROR;

File: java/server/src/org/openqa/grid/web/servlet/handler/RequestHandler.java
Patch:
@@ -214,6 +214,7 @@ private void handleNewSession() {
 		String externalKey = forwardNewSessionRequest(session);
 		if (externalKey == null) {
 			session.terminate();
+            // TODO (kmenard 04/10/11): We should indicate what the requested session type is.
 			throw new GridException("Error getting a new session from the remote." + registry.getAllProxies());
 		} else {
 			session.setExternalKey(externalKey);

File: java/server/test/org/openqa/grid/common/RegistrationRequestTest.java
Patch:
@@ -70,7 +70,7 @@ public void json() {
 
     @Test
     public void seleniumGrid1Request() {
-        RegistrationRequest request = RegistrationRequest.getNewInstance("host=localhost&port=5000&environment=linux_firefox_3_6");
+        RegistrationRequest request = RegistrationRequest.getNewInstance("host=localhost&port=5000&environment=Firefox%3A+4%3B+MacOS+X%3A+10.6.7");
 
         Assert.assertEquals(null, request.getId());
         Assert.assertEquals(null, request.getName());
@@ -81,7 +81,7 @@ public void seleniumGrid1Request() {
         Map<String, Object> caps = request.getCapabilities().get(0);
 
         //Assert.assertEquals(Platform.LINUX.toString(), caps.get("platform"));
-        Assert.assertEquals("linux_firefox_3_6", caps.get("browserName"));
+        Assert.assertEquals("Firefox: 4; MacOS X: 10.6.7", caps.get("browserName"));
 
 
         // Verify the configuration was set up properly.

File: java/server/src/org/openqa/selenium/server/browserlaunchers/HTABrowserLauncher.java
Patch:
@@ -113,7 +113,7 @@ private void writeSessionExtensionJs(File coreDir) throws IOException {
         FrameGroupCommandQueueSet queueSet = 
             FrameGroupCommandQueueSet.getQueueSet(sessionId);
         
-        if (queueSet.getExtensionJs().length() > 0) {
+        if (queueSet != null && queueSet.getExtensionJs().length() > 0) {
             String path = "scripts/user-extensions.js[" + sessionId + "]";
             FileWriter fileWriter = new FileWriter(new File(coreDir, path));
             BufferedWriter writer = new BufferedWriter(fileWriter);

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -654,7 +654,6 @@ private Map<String, Object> paramsFromCoordinates(Coordinates where) {
       if (where != null) {
         String id = (String) where.getAuxiliry();
         params.put("element", id);
-        params.put("id", id);
       }
 
       return params;

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -56,6 +56,7 @@ public class Pages {
   public String underscorePage;
   public String ajaxyPage;
   public String mapVisibilityPage;
+  public String mouseTrackerPage;
 
   public Pages(AppServer appServer) {
     ajaxyPage = appServer.whereIs("ajaxy_page.html");
@@ -94,5 +95,6 @@ public Pages(AppServer appServer) {
     selectableItemsPage = appServer.whereIs("selectableItems.html");
     underscorePage = appServer.whereIs("underscore.html");
     mapVisibilityPage = appServer.whereIs("map_visibility.html");
+    mouseTrackerPage = appServer.whereIs("mousePositionTracker.html");
   }
 }

File: java/server/src/org/openqa/grid/selenium/utils/GridConfiguration.java
Patch:
@@ -14,7 +14,7 @@
 public class GridConfiguration {
 
 	private GridRole role = GridRole.NOT_GRID;
-	private int timeout = 30000;
+	private int timeout = 30;
 	private int maxConcurrent = 5;
 
 	private URL registrationURL;

File: java/server/src/org/openqa/grid/selenium/SelfRegisteringSelenium.java
Patch:
@@ -25,7 +25,6 @@
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.firefox.FirefoxDriver;
 import org.openqa.selenium.firefox.FirefoxProfile;
-import org.openqa.selenium.internal.seleniumemulation.GetHtmlSource;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.server.RemoteControlConfiguration;
 import org.openqa.selenium.server.SeleniumServer;

File: android/src/java/org/openqa/selenium/android/app/JavascriptExecutor.java
Patch:
@@ -25,6 +25,7 @@
 public class JavascriptExecutor {
   private String javascriptResult;
   private final WebDriverWebView webview;
+  private final ActivityController controller = ActivityController.getInstance();
 
   public JavascriptExecutor(WebDriverWebView webview) {
     this.webview = webview;
@@ -48,8 +49,7 @@ public void executeJS(String jsCode) {
    */
   public void resultAvailable(String result) {
     javascriptResult = result;
-    ActivityController.updateResult(result);
-    ActivityController.done();
+    controller.updateResult(result);
   }
   
   public String getResult() {

File: android/src/java/org/openqa/selenium/android/app/MainActivity.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.android.app;
 
 import org.openqa.selenium.android.Logger;
-import org.openqa.selenium.android.intents.IntentReceiverRegistrar;
 
 import android.app.Activity;
 import android.content.Intent;

File: java/server/src/org/openqa/grid/web/utils/BrowserNameUtils.java
Patch:
@@ -43,7 +43,9 @@ public static String consoleIconName(String browserString) {
 			ret = "firefox";
 		} else if ("*safari".equals(browserString)) {
 			ret = "safari";
-		}
+		} else if ("*googlechrome".equals(browserString)) {
+            ret = "chrome";
+        }
 
         return ret;
     }

File: java/server/src/org/openqa/grid/web/servlet/Grid1HeartbeatServlet.java
Patch:
@@ -12,7 +12,7 @@
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
- */
+*/
 
 package org.openqa.grid.web.servlet;
 

File: java/server/test/org/openqa/grid/e2e/wd/WebDriverPriorityDemo.java
Patch:
@@ -47,8 +47,8 @@ public void prepare() throws Exception {
 		// go first.
 		hub.getRegistry().setPrioritizer(new Prioritizer() {
 			public int compareTo(Map<String, Object> a, Map<String, Object> b) {
-				boolean aImportant = a.get("important") == null ? false : Boolean.parseBoolean(a.get("important").toString());
-				boolean bImportant = b.get("important") == null ? false : Boolean.parseBoolean(b.get("important").toString());
+				boolean aImportant = a.get("_important") == null ? false : Boolean.parseBoolean(a.get("_important").toString());
+				boolean bImportant = b.get("_important") == null ? false : Boolean.parseBoolean(b.get("_important").toString());
 				if (aImportant == bImportant) {
 					return 0;
 				}
@@ -103,7 +103,7 @@ public void sendTheImportantOne() throws MalformedURLException, InterruptedExcep
 		Assert.assertEquals(hub.getRegistry().getActiveSessions().size(), 1);
 
 		final DesiredCapabilities ff = DesiredCapabilities.firefox();
-		ff.setCapability("important", true);
+		ff.setCapability("_important", true);
 
 		new Thread(new Runnable() {
 			public void run() {

File: java/server/test/org/openqa/grid/internal/DefaultToFIFOPriorityTest.java
Patch:
@@ -47,7 +47,7 @@ public void setup() {
 		for (int i = 1; i <= MAX; i++) {
 			Map<String, Object> cap = new HashMap<String, Object>();
 			cap.put(APP, "FF");
-			cap.put("priority", i);
+			cap.put("_priority", i);
 			MockedNewSessionRequestHandler req = new MockedNewSessionRequestHandler(registry, cap);
 			requests.add(req);
 		}
@@ -91,7 +91,7 @@ public void releaseTheSessionBlockingTheGrid() throws InterruptedException {
 	public void validate() throws InterruptedException {
 		Thread.sleep(250);
 		Assert.assertNotNull(requests.get(0).getTestSession());	
-		Assert.assertEquals(requests.get(0).getDesiredCapabilities().get("priority"), 1);
+		Assert.assertEquals(requests.get(0).getDesiredCapabilities().get("_priority"), 1);
 	}
 	
 	

File: java/client/src/org/openqa/selenium/remote/ErrorCodes.java
Patch:
@@ -66,8 +66,7 @@ public Class<? extends WebDriverException> getExceptionType(int statusCode) {
         return ElementNotVisibleException.class;
       case ELEMENT_NOT_SELECTABLE:
       case INVALID_ELEMENT_STATE:
-        // TODO: There should be a more specific exception here.
-        return UnsupportedCommandException.class;
+        return InvalidElementStateException.class;
       case XPATH_LOOKUP_ERROR:
         return XPathLookupException.class;
       case ASYNC_SCRIPT_TIMEOUT:

File: java/client/test/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -100,7 +100,7 @@ public void testShouldThrowExceptionIfSendingKeysToElementDisabledUsingRandomDis
     try {
       disabledTextElement1.sendKeys("foo");
       fail("Should have thrown exception");
-    } catch (UnsupportedOperationException e) {
+    } catch (InvalidElementStateException e) {
       //Expected
     }
     assertThat(disabledTextElement1.getText(), is(""));
@@ -109,7 +109,7 @@ public void testShouldThrowExceptionIfSendingKeysToElementDisabledUsingRandomDis
     try {
       disabledTextElement2.sendKeys("bar");
       fail("Should have thrown exception");
-    } catch (UnsupportedOperationException e) {
+    } catch (InvalidElementStateException e) {
       //Expected
     }
     assertThat(disabledTextElement2.getText(), is(""));

File: java/client/test/org/openqa/selenium/ElementSelectingTest.java
Patch:
@@ -205,7 +205,7 @@ private static void assertCannotSelect(WebElement element) {
     try {
       element.setSelected();
       fail(String.format(assertCannotPerformActionFormat_action_element, "select", describe(element)));
-    } catch (UnsupportedOperationException e) {
+    } catch (InvalidElementStateException e) {
       //Expected
     }
   }
@@ -265,7 +265,7 @@ private static void assertCannotToggle(WebElement element) {
     try {
       element.toggle();
       fail(String.format(assertCannotPerformActionFormat_action_element, "toggle", describe(element)));
-    } catch (UnsupportedOperationException e) {
+    } catch (InvalidElementStateException e) {
       //Expected
     }
   }

File: java/client/test/org/openqa/selenium/SelectElementHandlingTest.java
Patch:
@@ -56,7 +56,7 @@ public void testShouldNotBeAbleToDeselectAnOptionFromANormalSelect() {
     try {
       option.toggle();
       fail("Should not have succeeded");
-    } catch (UnsupportedOperationException e) {
+    } catch (InvalidElementStateException e) {
       // This is expected
     }
   }

File: java/client/test/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -56,7 +56,7 @@ public class SingleTestSuite extends TestCase {
       }};
 
   public static Test suite() throws Exception {
-    String driver = CHROME;
+    String driver = HTML_UNIT_JS;
 
     System.setProperty("jna.library.path", "..\\build;build");
     System.setProperty("webdriver.selenium.server.port", String.valueOf(findFreePort()));
@@ -69,7 +69,7 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ImplicitWaitTest")
+        .onlyRun("ElementSelectingTest")
         .exclude(ALL)
         .exclude(EXCLUSIONS_BY_DRIVER.get(driver))
         .outputTestNames()

File: java/server/src/org/openqa/selenium/remote/server/handler/CookieHandler.java
Patch:
@@ -19,11 +19,13 @@
 
 package org.openqa.selenium.remote.server.handler;
 
+import com.google.common.collect.Maps;
 import org.openqa.selenium.Cookie;
 import org.openqa.selenium.remote.server.DriverSessions;
 import org.openqa.selenium.remote.server.JsonParametersAware;
 
 import java.util.Date;
+import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
@@ -41,8 +43,7 @@ public void setJsonParameters(Map<String, Object> allParameters) throws Exceptio
     if (allParameters == null) {
       return;
     }
-    rawCookie =
-        new ConcurrentHashMap<String, Object>((Map<String, Object>) allParameters.get("cookie"));
+    rawCookie = Maps.newHashMap((Map<String, Object>) allParameters.get("cookie"));
   }
 
   protected Cookie createCookie() {

File: java/server/src/org/openqa/selenium/remote/server/handler/DeleteSession.java
Patch:
@@ -39,7 +39,7 @@ public ResultType call() throws Exception {
       final SessionId realSessionId = getRealSessionId();
       sessions.deleteSession( realSessionId );
 
-    // Yes, this is funky. See javadocs on cleatThreadTempLogs for details.
+    // Yes, this is funky. See javadocs on PerSessionLogHandler#clearThreadTempLogs for details.
     final PerSessionLogHandler logHandler = LoggingManager.perSessionLogHandler();
       if(logHandler != null){
         logHandler.clearThreadTempLogs(Thread.currentThread().getId());

File: java/client/src/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -220,7 +220,7 @@ static BrowserVersion determineBrowserVersion(Capabilities capabilities) {
       }
     }
 
-    return BrowserVersion.getDefault();
+    return BrowserVersion.FIREFOX_3_6;
   }
 
   private WebClient createWebClient(BrowserVersion version) {

File: java/client/src/org/openqa/selenium/remote/BeanToJsonConverter.java
Patch:
@@ -122,7 +122,7 @@ private List<Object> convertJsonArray(JSONArray jsonArray) {
   @SuppressWarnings({"unchecked"})
   private Object convertObject(Object toConvert, int maxDepth) throws JSONException {
     if (toConvert == null)
-      return null;
+      return JSONObject.NULL;
 
     if (toConvert instanceof Boolean ||
         toConvert instanceof CharSequence ||

File: java/client/test/org/openqa/selenium/firefox/NativeEventsTest.java
Patch:
@@ -38,7 +38,7 @@ public void testSwitchingElementsUsingKeyboardWorks() {
       return;
     }
 
-    assertTrue("Native events were explicitly enabeld and should be on.",
+    assertTrue("Native events were explicitly enabled and should be on.",
         (Boolean) driver2.getCapabilities().getCapability("nativeEvents"));
 
     if (Platform.getCurrent().is(Platform.LINUX)) {

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -55,6 +55,7 @@ public class Pages {
   public String selectableItemsPage;
   public String underscorePage;
   public String ajaxyPage;
+  public String mapVisibilityPage;
 
   public Pages(AppServer appServer) {
     ajaxyPage = appServer.whereIs("ajaxy_page.html");
@@ -92,5 +93,6 @@ public Pages(AppServer appServer) {
     formSelectionPage = appServer.whereIs("formSelectionPage.html");
     selectableItemsPage = appServer.whereIs("selectableItems.html");
     underscorePage = appServer.whereIs("underscore.html");
+    mapVisibilityPage = appServer.whereIs("map_visibility.html");
   }
 }

File: android/src/java/org/openqa/selenium/android/Logger.java
Patch:
@@ -24,7 +24,7 @@
  */
 public class Logger {
   // Set to false for release apk, true when debugging.
-  private static boolean debug = true;
+  private static boolean debug = false;
 
   // Should be left to true in release apk.
   public static final boolean ERROR = true;

File: java/client/src/org/openqa/selenium/internal/selenesedriver/FindElement.java
Patch:
@@ -28,6 +28,7 @@ public class FindElement extends AbstractElementFinder<Map<String, String>> {
   private final static String SCRIPT =
       "var by = {}; by['%s'] = '%s'; " +
       "var e = bot.locators.findElement(by, %s);" +
+      "e = core.firefox.unwrap(e); " +
       "bot.inject.cache.addElement(e);";
 
   @Override

File: java/server/src/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -657,7 +657,7 @@ public void handleConnect(String pathInContext, String pathParams, HttpRequest r
                 }
 
                 // Create the tunnel
-                HttpTunnel tunnel = newHttpTunnel(request, response, InetAddress.getLocalHost(), port, timeoutMs);
+                HttpTunnel tunnel = newHttpTunnel(request, response, InetAddress.getByName(null), port, timeoutMs);
 
                 if (tunnel != null) {
                     // TODO - need to setup semi-busy loop for IE.

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/SeleniumSelect.java
Patch:
@@ -99,7 +99,8 @@ private void assertSupportsMultipleSelections() {
   }
 
   private boolean isMultiple() {
-    boolean multiple = "true".equals(select.getAttribute("multiple"));
+    String multipleValue = select.getAttribute("multiple");
+    boolean multiple = "true".equals(multipleValue) || "multiple".equals(multipleValue);
     return multiple;
   }
 

File: java/client/test/com/thoughtworks/selenium/SeleniumRcTestSuite.java
Patch:
@@ -18,6 +18,7 @@
 package com.thoughtworks.selenium;
 
 import com.thoughtworks.selenium.corebased.TestAddLocationStrategy;
+import com.thoughtworks.selenium.corebased.TestAddSelection;
 import com.thoughtworks.selenium.corebased.TestAlerts;
 import com.thoughtworks.selenium.corebased.TestBasicAuth;
 import com.thoughtworks.selenium.corebased.TestBrowserVersion;
@@ -100,6 +101,7 @@
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     TestAddLocationStrategy.class,
+    TestAddSelection.class,
     TestAlerts.class,
     TestBasicAuth.class,
     TestBrowserVersion.class,

File: java/client/test/com/thoughtworks/selenium/WebDriverSeleniumTestSuite.java
Patch:
@@ -18,6 +18,7 @@
 package com.thoughtworks.selenium;
 
 import com.thoughtworks.selenium.corebased.TestAddLocationStrategy;
+import com.thoughtworks.selenium.corebased.TestAddSelection;
 import com.thoughtworks.selenium.corebased.TestCheckUncheck;
 import com.thoughtworks.selenium.corebased.TestCommandError;
 import com.thoughtworks.selenium.corebased.TestComments;
@@ -56,6 +57,7 @@
 @RunWith(Suite.class)
 @Suite.SuiteClasses({
     TestAddLocationStrategy.class,
+    TestAddSelection.class,
     TestCheckUncheck.class,
     TestCommandError.class,
     TestComments.class,

File: java/client/test/org/openqa/selenium/support/ui/SelectLargeTest.java
Patch:
@@ -23,5 +23,8 @@ public void testMultipleSelectShouldBePossibleIfMulitpleAttributeEmpty() {
     assertEquals(2, picked.size());
     assertEquals("select_2", picked.get(0).getAttribute("id"));
     assertEquals("select_3", picked.get(1).getAttribute("id"));
+
+    selection.deselectAll();
+    assertEquals(0, selection.getAllSelectedOptions().size());
   }
 }

File: java/client/test/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
+import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.REMOTE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
@@ -108,6 +109,7 @@ public void testShouldNotBeAbleTofindElementsBasedOnIdIfTheElementIsNotThere() {
     }
   }
 
+  @Ignore(value = CHROME, reason = "Issue 1394")
   public void testShouldBeAbleToFindChildrenOfANode() {
     driver.get(pages.xhtmlTestPage);
     List<WebElement> elements = driver.findElements(By.xpath("/html/head"));

File: java/client/test/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -32,8 +32,6 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.instanceOf;
 import static org.openqa.selenium.Ignore.Driver.CHROME;
-import static org.openqa.selenium.Ignore.Driver.FIREFOX;
-//import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.REMOTE;
@@ -356,7 +354,7 @@ public void testPassingArrayAsOnlyArgumentFlattensArray() {
   }
 
   @JavascriptEnabled
-  @Ignore({IE, FIREFOX, REMOTE, SELENESE})
+  @Ignore
   public void testShouldBeAbleToPassAnArrayAsAdditionalArgument() {
     if (!(driver instanceof JavascriptExecutor)) {
       return;

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -153,8 +153,9 @@ public void testShouldBeAbleToDetermineTheSizeOfAnElement() {
   }
 
   @JavascriptEnabled
-  @Ignore(value = {CHROME_NON_WINDOWS, IPHONE},
-      reason = "iPhone: sendKeys not implemented correctly")
+  @Ignore(value = {CHROME, IPHONE},
+      reason = "iPhone: sendKeys not implemented correctly\n" +
+          "Chrome: Issue 440")
   public void testShouldFireOnChangeEventWhenSettingAnElementsValue() {
     driver.get(pages.javascriptPage);
     driver.findElement(By.id("change")).sendKeys("foo");

File: java/client/test/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -137,7 +137,8 @@ public void testShouldReturnTheEntireTextOfInlineElements() {
 //                "        "));
 //    }
 
-  @Ignore(value = {SELENESE, IPHONE, IE}, reason = "iPhone: sendKeys is broken")
+  @Ignore(value = {SELENESE, IPHONE, IE, CHROME}, reason = "iPhone: sendKeys is broken\n" +
+      "Chrome: Issue 440")
   public void testShouldBeAbleToSetMoreThanOneLineOfTextInATextArea() {
     driver.get(pages.formPage);
     WebElement textarea = driver.findElement(By.id("withText"));
@@ -153,7 +154,7 @@ public void testShouldBeAbleToSetMoreThanOneLineOfTextInATextArea() {
     assertThat(seenText, equalTo(expectedText));
   }
 
-  @Ignore(SELENESE)
+  @Ignore(value = {SELENESE, CHROME}, reason = "Chrome: Issue 440")
   public void testShouldBeAbleToEnterDatesAfterFillingInOtherValuesFirst() {
     driver.get(pages.formPage);
     WebElement input = driver.findElement(By.id("working"));

File: java/client/test/org/openqa/selenium/TypingTest.java
Patch:
@@ -29,10 +29,10 @@
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
+@Ignore(value = CHROME, reason = "Issue 440")
 public class TypingTest extends AbstractDriverTestCase {
 
   @JavascriptEnabled
-  @Ignore(CHROME_NON_WINDOWS)
   public void testShouldFireKeyPressEvents() {
     driver.get(pages.javascriptPage);
 
@@ -44,7 +44,6 @@ public void testShouldFireKeyPressEvents() {
   }
 
   @JavascriptEnabled
-  @Ignore(CHROME_NON_WINDOWS)
   public void testShouldFireKeyDownEvents() {
     driver.get(pages.javascriptPage);
 
@@ -56,7 +55,6 @@ public void testShouldFireKeyDownEvents() {
   }
 
   @JavascriptEnabled
-  @Ignore(CHROME_NON_WINDOWS)
   public void testShouldFireKeyUpEvents() {
     driver.get(pages.javascriptPage);
 

File: java/client/src/org/openqa/selenium/support/ui/Select.java
Patch:
@@ -47,9 +47,7 @@ public Select(WebElement element) {
 
     this.element = element;
 
-    String value = element.getAttribute("multiple");
-    isMulti = value != null && "multiple".equals(value.toLowerCase());
-
+    this.isMulti = element.getAttribute("multiple") != null;
   }
 
   /**

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -55,6 +55,7 @@ public class Pages {
   public String selectableItemsPage;
   public String underscorePage;
   public String ajaxyPage;
+  public String multipleSelection;
 
   public Pages(AppServer appServer) {
     ajaxyPage = appServer.whereIs("ajaxy_page.html");
@@ -85,12 +86,13 @@ public Pages(AppServer appServer) {
     slowIframes = appServer.whereIs("slow_loading_iframes.html");
     html5Page = appServer.whereIs("html5Page.html");
     tables = appServer.whereIs("tables.html");
-	  deletingFrame = appServer.whereIs("deletingFrame.htm");
+    deletingFrame = appServer.whereIs("deletingFrame.htm");
     draggableLists = appServer.whereIs("draggableLists.html");
     droppableItems = appServer.whereIs("droppableItems.html");
     bodyTypingPage = appServer.whereIs("bodyTypingTest.html");
     formSelectionPage = appServer.whereIs("formSelectionPage.html");
     selectableItemsPage = appServer.whereIs("selectableItems.html");
     underscorePage = appServer.whereIs("underscore.html");
+    multipleSelection = appServer.whereIs("multiple_select.html");
   }
 }

File: java/client/src/org/openqa/selenium/support/ui/Select.java
Patch:
@@ -47,7 +47,9 @@ public Select(WebElement element) {
 
     this.element = element;
 
-    isMulti = element.getAttribute("multiple") != null;
+    String value = element.getAttribute("multiple");
+    isMulti = value != null && "multiple".equals(value.toLowerCase());
+
   }
 
   /**

File: java/client/src/org/openqa/selenium/support/ui/Select.java
Patch:
@@ -47,9 +47,7 @@ public Select(WebElement element) {
 
     this.element = element;
 
-    String value = element.getAttribute("multiple");
-    isMulti = value != null && "multiple".equals(value.toLowerCase());
-
+    isMulti = element.getAttribute("multiple") != null;
   }
 
   /**

File: java/client/test/org/openqa/selenium/AtomsInjectionTest.java
Patch:
@@ -17,13 +17,12 @@
 
 package org.openqa.selenium;
 
-import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 public class AtomsInjectionTest extends AbstractDriverTestCase {
 
   /** http://code.google.com/p/selenium/issues/detail?id=1333 */
-  @Ignore(value = {IE, SELENESE},
+  @Ignore(value = SELENESE,
       reason = "Selenium executes script in the context of the Selenium window, so the test " +
           "script will fail with a ReferenceError.")
   @JavascriptEnabled

File: java/client/test/org/openqa/selenium/AtomsInjectionTest.java
Patch:
@@ -17,12 +17,13 @@
 
 package org.openqa.selenium;
 
+import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 public class AtomsInjectionTest extends AbstractDriverTestCase {
 
   /** http://code.google.com/p/selenium/issues/detail?id=1333 */
-  @Ignore(value = SELENESE,
+  @Ignore(value = {IE, SELENESE},
       reason = "Selenium executes script in the context of the Selenium window, so the test " +
           "script will fail with a ReferenceError.")
   @JavascriptEnabled

File: java/client/test/org/openqa/selenium/AtomsInjectionTest.java
Patch:
@@ -17,13 +17,12 @@
 
 package org.openqa.selenium;
 
-import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 public class AtomsInjectionTest extends AbstractDriverTestCase {
 
   /** http://code.google.com/p/selenium/issues/detail?id=1333 */
-  @Ignore(value = {IE, SELENESE},
+  @Ignore(value = SELENESE,
       reason = "Selenium executes script in the context of the Selenium window, so the test " +
           "script will fail with a ReferenceError.")
   @JavascriptEnabled

File: java/client/test/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -58,7 +58,7 @@ public class SingleTestSuite extends TestCase {
       }};
 
   public static Test suite() throws Exception {
-    String driver = SELENIUM;
+    String driver = IE;
 
     System.setProperty("jna.library.path", "..\\build;build");
     System.setProperty("webdriver.selenium.server.port", String.valueOf(findFreePort()));

File: java/client/src/org/openqa/selenium/iphone/IPhoneDriver.java
Patch:
@@ -123,9 +123,9 @@ public WebDriver window(String windowName) {
     }
 
     public WebDriver defaultContent() {
-      // is this even possible to do on the iphone?
-      throw new UnsupportedOperationException(
-    		  "Frame switching is not supported on the iPhone");
+      // The iphone driver does not support frame switching, so we're always
+      // focused on the default content.
+      return IPhoneDriver.this;
     }
 
     public WebElement activeElement() {

File: java/client/test/org/openqa/selenium/ClickTest.java
Patch:
@@ -36,7 +36,7 @@ protected void tearDown() throws Exception {
     super.tearDown();
   }
 
-  @Ignore(SELENESE)
+  @Ignore(value = {IPHONE,SELENESE}, reason = "iPhone: Frame switching is unsupported")
   public void testCanClickOnALinkAndFollowIt() {
     driver.findElement(By.id("normal")).click();
 

File: java/client/test/org/openqa/selenium/Pages.java
Patch:
@@ -53,6 +53,7 @@ public class Pages {
   public String bodyTypingPage;
   public String formSelectionPage;
   public String selectableItemsPage;
+  public String underscorePage;
   public String ajaxyPage;
 
   public Pages(AppServer appServer) {
@@ -90,5 +91,6 @@ public Pages(AppServer appServer) {
     bodyTypingPage = appServer.whereIs("bodyTypingTest.html");
     formSelectionPage = appServer.whereIs("formSelectionPage.html");
     selectableItemsPage = appServer.whereIs("selectableItems.html");
+    underscorePage = appServer.whereIs("underscore.html");
   }
 }

File: java/server/src/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncher.java
Patch:
@@ -21,7 +21,7 @@
 import org.openqa.selenium.browserlaunchers.LauncherUtils;
 import org.openqa.selenium.browserlaunchers.Proxies;
 import org.openqa.selenium.browserlaunchers.locators.BrowserInstallation;
-import org.openqa.selenium.browserlaunchers.locators.Firefox2or3Locator;
+import org.openqa.selenium.browserlaunchers.locators.CombinedFirefoxLocator;
 import org.openqa.selenium.internal.Trace;
 import org.openqa.selenium.internal.TraceFactory;
 import org.openqa.selenium.os.CommandLine;
@@ -45,7 +45,7 @@ public class FirefoxCustomProfileLauncher extends AbstractBrowserLauncher {
     public FirefoxCustomProfileLauncher(Capabilities browserOptions, RemoteControlConfiguration configuration, String sessionId, String browserLaunchLocation) throws InvalidBrowserExecutableException {
         this(browserOptions, configuration,
                 sessionId, ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation(
-                        "firefoxproxy", browserLaunchLocation, new Firefox2or3Locator()));
+                        "firefoxproxy", browserLaunchLocation, new CombinedFirefoxLocator()));
         if (browserInstallation == null) {
           throw new InvalidBrowserExecutableException("The specified path to the browser executable is invalid.");
         }

File: java/server/src/org/openqa/selenium/server/browserlaunchers/FirefoxLauncher.java
Patch:
@@ -21,7 +21,6 @@
 import org.openqa.selenium.browserlaunchers.locators.*;
 import org.openqa.selenium.server.ApplicationRegistry;
 import org.openqa.selenium.server.RemoteControlConfiguration;
-import org.openqa.selenium.browserlaunchers.locators.Firefox2or3Locator;
 
 public class FirefoxLauncher implements BrowserLauncher {
 
@@ -30,7 +29,7 @@ public class FirefoxLauncher implements BrowserLauncher {
   public FirefoxLauncher(Capabilities browserOptions, RemoteControlConfiguration configuration, String sessionId, String browserLaunchLocation)
       throws InvalidBrowserExecutableException {
     String browserName = "firefox";
-    BrowserLocator locator = new Firefox2or3Locator();
+    BrowserLocator locator = new CombinedFirefoxLocator();
     String version = (String) browserOptions.getCapability("version");
     if ("2".equals(version)) {
       browserName = "firefox2";

File: java/server/src/org/openqa/selenium/server/browserlaunchers/ProxyInjectionFirefoxCustomProfileLauncher.java
Patch:
@@ -3,7 +3,7 @@
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.browserlaunchers.Proxies;
 import org.openqa.selenium.browserlaunchers.locators.BrowserInstallation;
-import org.openqa.selenium.browserlaunchers.locators.Firefox2or3Locator;
+import org.openqa.selenium.browserlaunchers.locators.CombinedFirefoxLocator;
 import org.openqa.selenium.server.ApplicationRegistry;
 import org.openqa.selenium.server.RemoteControlConfiguration;
 
@@ -28,7 +28,7 @@ public ProxyInjectionFirefoxCustomProfileLauncher(Capabilities browserOptions,
     this(browserOptions, configuration,
         sessionId,
         ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation(
-            "firefoxproxy", browserLaunchLocation, new Firefox2or3Locator()));
+            "firefoxproxy", browserLaunchLocation, new CombinedFirefoxLocator()));
   }
 
   public ProxyInjectionFirefoxCustomProfileLauncher(Capabilities browserOptions, RemoteControlConfiguration configuration, String sessionId, BrowserInstallation browserInstallation) {

File: java/client/test/org/openqa/selenium/android/AndroidDriverTestSuite.java
Patch:
@@ -41,9 +41,6 @@ public static Test suite() throws Exception {
     GlobalTestEnvironment.set(new AndroidTestEnvironment());
 
     return new TestSuiteBuilder()
-        .addSourceDir("android/client")
-        .addSourceDir("remote")
-        .addSourceDir("common")
         .usingDriver(AndroidDriver.class)
         .keepDriverInstance()
         .exclude(ANDROID)

File: java/client/test/org/openqa/selenium/chrome/ChromeDriverTestSuite.java
Patch:
@@ -41,8 +41,7 @@ public class ChromeDriverTestSuite extends TestCase {
   public static Test suite() throws Exception {
     TestSuiteBuilder builder = new TestSuiteBuilder();
     builder
-        .addSourceDir("common")
-        .addSourceDir("chrome")
+        .addSourceDir("java/client/test")
         .exclude(CHROME)
         .usingDriver(ChromeDriver.class)
         .includeJavascriptTests()

File: java/client/test/org/openqa/selenium/firefox/FirefoxDriverTestSuite.java
Patch:
@@ -39,8 +39,7 @@ public static Test suite() throws Exception {
 //  System.setProperty("webdriver.firefox.useExisting", "true");
 
     return new TestSuiteBuilder()
-        .addSourceDir("firefox")
-        .addSourceDir("common")
+        .addSourceDir("java/client/test")
         .usingDriver(FirefoxDriver.class)
         .exclude(FIREFOX)
         .keepDriverInstance()

File: java/client/test/org/openqa/selenium/htmlunit/HtmlUnitDriverTestSuite.java
Patch:
@@ -27,8 +27,7 @@
 public class HtmlUnitDriverTestSuite extends TestCase {
   public static Test suite() throws Exception {
     return new TestSuiteBuilder()
-        .addSourceDir("common")
-        .addSourceDir("htmlunit")
+        .addSourceDir("java/client/test")
         .usingDriver(HtmlUnitDriver.class)
         .exclude(HTMLUNIT)
         .create();

File: java/client/test/org/openqa/selenium/htmlunit/JavascriptEnabledHtmlUnitDriverTestSuite.java
Patch:
@@ -31,8 +31,7 @@ public class JavascriptEnabledHtmlUnitDriverTestSuite extends TestCase {
 
   public static Test suite() throws Exception {
     return new TestSuiteBuilder()
-        .addSourceDir("common")
-        .addSourceDir("htmlunit")
+        .addSourceDir("java/client/test")
         .usingDriver(HtmlUnitDriverForTest.class)
         .exclude(HTMLUNIT)
         .includeJavascriptTests()

File: java/client/test/org/openqa/selenium/ie/InternetExplorerDriverTestSuite.java
Patch:
@@ -34,8 +34,7 @@ public static Test suite() throws Exception {
 
     if (Platform.getCurrent().is(WINDOWS)) {
       return new TestSuiteBuilder()
-          .addSourceDir("common")
-          .addSourceDir("jobbie")
+          .addSourceDir("java/client/test")
           .usingDriver(InternetExplorerDriver.class)
           .exclude(IE)
           .includeJavascriptTests()

File: java/client/test/org/openqa/selenium/iphone/IPhoneDriverTestSuite.java
Patch:
@@ -32,8 +32,7 @@ public class IPhoneDriverTestSuite extends TestCase {
 
   public static Test suite() throws Exception {
     return new TestSuiteBuilder()
-        .addSourceDir("iphone")
-        .addSourceDir("common")
+        .addSourceDir("java/client/test")
         .usingDriver(TestIPhoneSimulatorDriver.class)
         .exclude(IPHONE)
         .exclude(REMOTE)

File: java/client/test/org/openqa/selenium/remote/RemoteClientTestSuite.java
Patch:
@@ -9,7 +9,7 @@ public class RemoteClientTestSuite extends TestCase {
 
     public static Test suite() throws Exception {
       return new TestSuiteBuilder()
-          .addSourceDir("remote/client")
+          .addSourceDir("java/client/test")
           .usingNoDriver()
           .create();
     }

File: java/client/test/org/openqa/selenium/support/SupportTestSuite.java
Patch:
@@ -28,7 +28,7 @@
 public class SupportTestSuite extends TestCase {
   public static Test suite() throws Exception {
     return new TestSuiteBuilder()
-        .addSourceDir("support")
+        .addSourceDir("java/client/test")
         .usingDriver(FirefoxDriver.class)
         .exclude(FIREFOX)
         .keepDriverInstance()

File: java/client/test/org/openqa/selenium/v1/SeleneseWebDriverTestSuite.java
Patch:
@@ -30,7 +30,7 @@ public static Test suite() throws Exception {
     System.setProperty("webdriver.selenium.server.port", String.valueOf(findFreePort()));
 
     return new TestSuiteBuilder()
-        .addSourceDir("common")
+        .addSourceDir("java/client/test")
         .usingDriver(SeleneseBackedWebDriver.class)
         .exclude(SELENESE)
         .includeJavascriptTests()

File: java/server/test/org/openqa/selenium/remote/server/RemoteWebDriverIeTestSuite.java
Patch:
@@ -50,9 +50,8 @@ public static Test suite() throws Exception {
 
     Test rawSuite =
         new TestSuiteBuilder()
-            .addSourceDir("common")
-            .addSourceDir("remote/client")
-            .addSourceDir("remote/server")
+            .addSourceDir("java/client/test")
+            .addSourceDir("java/server/test")
             .keepDriverInstance()
             .includeJavascriptTests()
             .usingDriver(RemoteIeWebDriverForTest.class)

File: java/server/test/org/openqa/selenium/remote/server/RemoteWebDriverTestSuite.java
Patch:
@@ -50,9 +50,8 @@ public static Test suite() throws Exception {
 
     Test rawSuite =
         new TestSuiteBuilder()
-            .addSourceDir("common")
-            .addSourceDir("remote/client")
-            .addSourceDir("remote/server")
+            .addSourceDir("java/client/test")
+            .addSourceDir("java/server/test")
             .keepDriverInstance()
             .includeJavascriptTests()
             .usingDriver(RemoteWebDriverForTest.class)

File: java/server/test/org/openqa/selenium/server/ServerTestSuite.java
Patch:
@@ -25,7 +25,7 @@
 public class ServerTestSuite  extends TestCase {
   public static Test suite() throws Exception {
     return new TestSuiteBuilder()
-        .addSourceDir("remote/server")
+        .addSourceDir("java/server/test")
         .usingNoDriver()
         .pattern(".*UnitTest")
         .create();

File: java/client/src/org/openqa/selenium/android/AndroidDriver.java
Patch:
@@ -22,8 +22,8 @@
 import org.openqa.selenium.ScreenOrientation;
 import org.openqa.selenium.TakesScreenshot;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.browserlaunchers.CapabilityType;
 import org.openqa.selenium.html5.BrowserConnection;
+import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.DriverCommand;
 import org.openqa.selenium.remote.RemoteWebDriver;

File: java/client/src/org/openqa/selenium/browserlaunchers/Proxies.java
Patch:
@@ -28,6 +28,7 @@
 import com.thoughtworks.selenium.SeleniumException;
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.Proxy;
+import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 
 import static org.openqa.selenium.remote.CapabilityType.ForSeleniumServer;

File: java/client/src/org/openqa/selenium/browserlaunchers/WindowsProxyManager.java
Patch:
@@ -32,6 +32,7 @@
 import org.openqa.selenium.internal.Trace;
 import org.openqa.selenium.os.WindowsRegistryException;
 import org.openqa.selenium.os.WindowsUtils;
+import org.openqa.selenium.remote.CapabilityType;
 
 
 public class WindowsProxyManager {

File: java/client/src/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -19,7 +19,7 @@
 package org.openqa.selenium.firefox;
 
 import static org.openqa.selenium.OutputType.FILE;
-import static org.openqa.selenium.browserlaunchers.CapabilityType.PROXY;
+import static org.openqa.selenium.remote.CapabilityType.PROXY;
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.OutputType;
@@ -30,9 +30,9 @@
 import org.openqa.selenium.browserlaunchers.Proxies;
 import org.openqa.selenium.firefox.internal.NewProfileExtensionConnection;
 import org.openqa.selenium.firefox.internal.ProfilesIni;
-import org.openqa.selenium.io.FileHandler;
 import org.openqa.selenium.internal.Lock;
 import org.openqa.selenium.internal.SocketLock;
+import org.openqa.selenium.io.FileHandler;
 import org.openqa.selenium.remote.Command;
 import org.openqa.selenium.remote.CommandExecutor;
 import org.openqa.selenium.remote.DesiredCapabilities;

File: java/client/test/org/openqa/selenium/remote/AugmenterTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.google.common.collect.Lists;
 import org.junit.Test;
 import org.openqa.selenium.*;
-import org.openqa.selenium.browserlaunchers.CapabilityType;
 
 import java.io.IOException;
 import java.lang.reflect.Method;

File: java/client/test/org/openqa/selenium/remote/BeanToJsonConverterTest.java
Patch:
@@ -36,7 +36,6 @@
 import org.openqa.selenium.Platform;
 import org.openqa.selenium.Proxy;
 import org.openqa.selenium.WebDriverException;
-import org.openqa.selenium.browserlaunchers.CapabilityType;
 import org.openqa.selenium.browserlaunchers.DoNotUseProxyPac;
 
 import static org.hamcrest.MatcherAssert.assertThat;

File: java/server/src/org/openqa/selenium/remote/server/Session.java
Patch:
@@ -23,13 +23,13 @@
 import org.openqa.selenium.Rotatable;
 import org.openqa.selenium.TakesScreenshot;
 import org.openqa.selenium.WebDriver;
-import org.openqa.selenium.browserlaunchers.CapabilityType;
 import org.openqa.selenium.html5.ApplicationCache;
 import org.openqa.selenium.html5.BrowserConnection;
 import org.openqa.selenium.html5.DatabaseStorage;
 import org.openqa.selenium.html5.LocationContext;
 import org.openqa.selenium.html5.WebStorage;
 import org.openqa.selenium.internal.FindsByCssSelector;
+import org.openqa.selenium.remote.CapabilityType;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.RemoteWebDriver;
 import org.openqa.selenium.support.events.EventFiringWebDriver;

File: java/server/test/org/openqa/selenium/server/BrowserConfigurationOptionsTest.java
Patch:
@@ -8,8 +8,6 @@
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.server.browserlaunchers.BrowserOptions;
 
-import static org.openqa.selenium.browserlaunchers.CapabilityType.ForSeleniumServer.AVOIDING_PROXY;
-
 public class BrowserConfigurationOptionsTest extends TestCase {
 
   public void testInitializationWithNoOptions() {

File: java/client/test/com/thoughtworks/selenium/InternalSelenseTestNgBase.java
Patch:
@@ -5,6 +5,7 @@
 import com.google.common.base.Throwables;
 import com.google.common.io.Resources;
 
+import org.junit.AfterClass;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebDriverBackedSelenium;

File: java/client/src/org/openqa/selenium/remote/CapabilityType.java
Patch:
@@ -26,6 +26,7 @@ public interface CapabilityType {
   String SUPPORTS_JAVASCRIPT = "javascriptEnabled";
   String TAKES_SCREENSHOT = "takesScreenshot";
   String VERSION = "version";
+  String SUPPORTS_ALERTS = "handlesAlerts";
   String SUPPORTS_SQL_DATABASE = "databaseEnabled";
   String SUPPORTS_LOCATION_CONTEXT = "locationContextEnabled";
   String SUPPORTS_APPLICATION_CACHE = "applicationCacheEnabled";

File: java/client/src/org/openqa/selenium/browserlaunchers/LauncherUtils.java
Patch:
@@ -262,6 +262,8 @@ public static void generatePacAndPrefJs(File customProfileDir, int port, String
       out.println("user_pref('network.proxy.autoconfig_url', '"
                   + pathToBrowserURL(proxyPAC.getAbsolutePath()) + "');");
     }
+    // Disable the check for being offline
+    out.println("user_pref('browser.offline', false);");
 
     // suppress authentication confirmations
     out.println("user_pref('network.http.phishy-userpass-length', 255);");

File: java/client/src/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -191,6 +191,7 @@ protected WebElement findElement(String by, String using) {
 
     Response response = execute(DriverCommand.FIND_ELEMENT,
         ImmutableMap.of("using", by, "value", using));
+    System.out.println("response = " + response);
     return (WebElement) response.getValue();
   }
 

File: java/client/test/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -116,7 +116,7 @@ public void testShouldSubmitAFormUsingTheEnterKey() {
     WebElement nestedForm = driver.findElement(By.id("nested_form"));
     WebElement input = nestedForm.findElement(By.name("x"));
     input.sendKeys(Keys.ENTER);
-    assertEquals("We Arrive Here", driver.getTitle());
+    waitFor(pageTitleToBe(driver, "We Arrive Here"));
     assertTrue(driver.getCurrentUrl().endsWith("?x=name"));
   }
 

File: java/client/test/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -113,6 +113,7 @@ public void testShouldWaitForLoadsToCompleteAfterJavascriptCausesANewPageToLoad(
 
     driver.findElement(By.id("changeme")).setSelected();
 
+    waitForTitleChange("Page3");
     assertThat(driver.getTitle(), equalTo("Page3"));
   }
 

File: java/client/test/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -55,8 +55,9 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("FrameSwitchingTest")
-        .method("testClosingTheFinalBrowserWindowShouldNotCauseAnExceptionToBeThrown")
+        .onlyRun("ClickTest")
+//        .method("testShouldReturnEmptyStringWhenTextIsOnlySpaces")
+//        .method("testShouldNotTrimSpacesWhenLineWraps")
         .exclude(ALL)
         .exclude(Ignore.Driver.SELENESE)
         .outputTestNames()

File: java/client/test/org/openqa/selenium/environment/webserver/Jetty7AppServer.java
Patch:
@@ -47,7 +47,7 @@ public class Jetty7AppServer implements AppServer {
   private int securePort;
   private File path;
   private File jsSrcRoot;
-  private File thirdPartyJsRoot;
+  private File thirdPartyJsRoot;                                                                          
   private final Server server;
   private WebAppContext context;
   private ContextHandlerCollection handlers;

File: java/client/src/org/openqa/selenium/browserlaunchers/WindowsProxyManager.java
Patch:
@@ -62,7 +62,7 @@ public WindowsProxyManager(boolean customPACappropriate, String sessionId, int p
     this.customPACappropriate = customPACappropriate;
     this.port = port;
 
-    customProxyPACDir = TemporaryFilesystem.createTempDir(sessionId, "");
+    customProxyPACDir = TemporaryFilesystem.getDefaultTmpFS().createTempDir(sessionId, "");
 
     init();
   }

File: java/client/src/org/openqa/selenium/chrome/ChromeProfile.java
Patch:
@@ -84,7 +84,7 @@ public File getDirectory() {
    * @return File object for the created directory.
    */
   private static File createProfileDir() {
-    File tempProfileDir = TemporaryFilesystem.createTempDir("profile", "");
+    File tempProfileDir = TemporaryFilesystem.getDefaultTmpFS().createTempDir("profile", "");
 
     System.setProperty(REAP_PROFILE_PROPERTY, "false");
     return tempProfileDir;

File: java/client/src/org/openqa/selenium/firefox/internal/FileExtension.java
Patch:
@@ -68,7 +68,7 @@ public void writeTo(File extensionsDir) throws IOException {
     FileHandler.createDir(extensionDirectory);
     FileHandler.makeWritable(extensionDirectory);
     FileHandler.copy(root, extensionDirectory );
-    TemporaryFilesystem.deleteTempDir(root);
+    TemporaryFilesystem.getDefaultTmpFS().deleteTempDir(root);
   }
 
   private File obtainRootDirectory(File extensionToInstall) throws IOException {

File: java/client/src/org/openqa/selenium/firefox/internal/ProfilesIni.java
Patch:
@@ -109,7 +109,7 @@ public FirefoxProfile getProfile(String profileName) {
       return null;
 
     // Make a copy of the profile to use
-    File tempDir = TemporaryFilesystem.createTempDir("userprofile", "copy");
+    File tempDir = TemporaryFilesystem.getDefaultTmpFS().createTempDir("userprofile", "copy");
     try {
       FileHandler.copy(profileDir, tempDir);
 

File: java/client/src/org/openqa/selenium/ie/InternetExplorerDriver.java
Patch:
@@ -116,7 +116,7 @@ private void initializeLib() {
         return;
       }
 
-      File parentDir = TemporaryFilesystem.createTempDir("webdriver",
+      File parentDir = TemporaryFilesystem.getDefaultTmpFS().createTempDir("webdriver",
           "libs");
       try {
         FileHandler.copyResource(parentDir, getClass(), "IEDriver.dll");

File: java/client/src/org/openqa/selenium/internal/seleniumemulation/AttachFile.java
Patch:
@@ -50,7 +50,7 @@ protected Void handleSeleneseCommand(WebDriver driver, String locator, String va
   private File downloadFile(String name) {
     URL url = getUrl(name);
 
-    File dir = TemporaryFilesystem.createTempDir("attachFile", "dir");
+    File dir = TemporaryFilesystem.getDefaultTmpFS().createTempDir("attachFile", "dir");
     File outputTo = new File(dir, url.getFile());
     if (!outputTo.getParentFile().mkdirs()) {
       throw new SeleniumException("Cannot create file for upload: " + outputTo);

File: java/client/src/org/openqa/selenium/io/FileHandler.java
Patch:
@@ -42,7 +42,7 @@ public class FileHandler {
 
   // TODO(simon): Move to using Zip class
   public static File unzip(InputStream resource) throws IOException {
-    File output = TemporaryFilesystem.createTempDir("unzip", "stream");
+    File output = TemporaryFilesystem.getDefaultTmpFS().createTempDir("unzip", "stream");
 
     new Zip().unzip(resource, output);
 

File: java/client/src/org/openqa/selenium/iphone/IPhoneSimulatorBinary.java
Patch:
@@ -60,7 +60,7 @@ public class IPhoneSimulatorBinary extends SubProcess {
    * Temporary directory used to store all generated iPhone Simulator scripts.
    */
   private static final File SCRIPT_DIRECTORY =
-      TemporaryFilesystem.createTempDir("webdriver", "iWebDriver");
+      TemporaryFilesystem.getDefaultTmpFS().createTempDir("webdriver", "iWebDriver");
 
   /**
    * Utility script used to kill the iWebDriver process when

File: java/client/test/org/openqa/selenium/browserlaunchers/WindowsProxyManagerUnitTest.java
Patch:
@@ -122,7 +122,7 @@ private File makeSourceDirAndCookie(String cookiePrefix) throws IOException {
   }
   
   private File getNonexistentDir() {
-    File destDir = TemporaryFilesystem.createTempDir("rc-wpmt-dest", "tmp");
+    File destDir = TemporaryFilesystem.getDefaultTmpFS().createTempDir("rc-wpmt-dest", "tmp");
     destDir.delete();
     assertFalse(destDir.exists());
     return destDir;

File: java/client/test/org/openqa/selenium/firefox/FirefoxProfileTest.java
Patch:
@@ -163,7 +163,7 @@ public void testShouldConvertItselfIntoAMeaningfulRepresentation() throws IOExce
 
     assertNotNull(json);
 
-    File dir = TemporaryFilesystem.createTempDir("webdriver", "duplicated");
+    File dir = TemporaryFilesystem.getDefaultTmpFS().createTempDir("webdriver", "duplicated");
     new Zip().unzip(json, dir);
 
     File prefs = new File(dir, "user.js");

File: java/client/test/org/openqa/selenium/io/FileHandlerTest.java
Patch:
@@ -62,10 +62,10 @@ public void testFileCopy() throws IOException {
   }
 
   @Test public void testFileCopyCanFilterBySuffix() throws IOException {
-    File source = TemporaryFilesystem.createTempDir("filehandler", "source");
+    File source = TemporaryFilesystem.getDefaultTmpFS().createTempDir("filehandler", "source");
     File textFile = File.createTempFile("example", ".txt", source);
     File xmlFile = File.createTempFile("example", ".xml", source);
-    File dest = TemporaryFilesystem.createTempDir("filehandler", "dest");
+    File dest = TemporaryFilesystem.getDefaultTmpFS().createTempDir("filehandler", "dest");
 
     FileHandler.copy(source, dest, ".txt");
 

File: java/server/src/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -688,7 +688,7 @@ protected File createTempFile(String name) {
     File tmpFile = new File(parent, name);
 
     if (tmpFile.exists()) {
-      File tmpDir = TemporaryFilesystem.createTempDir("selenium", "upload");
+      File tmpDir = TemporaryFilesystem.getDefaultTmpFS().createTempDir("selenium", "upload");
       tmpFile = new File(tmpDir, name);
     }
 

File: javatests/com/thoughtworks/selenium/corebased/TestAddLocationStrategy.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestAddLocationStrategy extends InternalSelenseTestNgBase {
-  @Test(dataProvider = "system-properties")
+  @Test
 	 public void testAddLocationStrategy() throws Exception {
 		selenium.open("../tests/html/test_click_page1.html");
 		selenium.addLocationStrategy("foo", "return inDocument.getElementById(locator);");

File: javatests/com/thoughtworks/selenium/corebased/TestAlerts.java
Patch:
@@ -7,7 +7,7 @@
 import org.testng.annotations.Test;
 
 public class TestAlerts extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties")
+	@Test
   public void testAlerts() throws Exception {
 		selenium.open("../tests/html/test_verify_alert.html");
 		verifyFalse(selenium.isAlertPresent());

File: javatests/com/thoughtworks/selenium/corebased/TestBasicAuth.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestBasicAuth extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testBasicAuth() throws Exception {
+	@Test public void testBasicAuth() throws Exception {
 		selenium.open("http://alice:foo@localhost:4444/selenium-server/tests/html/basicAuth/index.html");
 		assertEquals(selenium.getTitle(), "Welcome");
 	}

File: javatests/com/thoughtworks/selenium/corebased/TestBrowserVersion.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestBrowserVersion extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testBrowserVersion() throws Exception {
+	@Test public void testBrowserVersion() throws Exception {
 		System.out.println(selenium.getEval("browserVersion.name"));
 	}
 }

File: javatests/com/thoughtworks/selenium/corebased/TestCheckUncheck.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestCheckUncheck extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testCheckUncheck() throws Exception {
+	@Test public void testCheckUncheck() throws Exception {
 		selenium.open("../tests/html/test_check_uncheck.html");
 		verifyTrue(selenium.isChecked("base-spud"));
 		verifyFalse(selenium.isChecked("base-rice"));

File: javatests/com/thoughtworks/selenium/corebased/TestClick.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestClick extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testClick() throws Exception {
+	@Test public void testClick() throws Exception {
 		selenium.open("../tests/html/test_click_page1.html");
 		verifyEquals(selenium.getText("link"), "Click here for next page");
 		selenium.click("link");

File: javatests/com/thoughtworks/selenium/corebased/TestClickBlankTarget.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestClickBlankTarget extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties")
+	@Test
   public void testClickBlankTarget() throws Exception {
 		selenium.open("../tests/html/Frames.html");
 		selenium.selectFrame("bottomFrame");
@@ -31,7 +31,9 @@ public void testClickBlankTarget() throws Exception {
 		selenium.click("popupBlank");
 		selenium.waitForPopUp("_blank", "10000");
 		selenium.selectWindow("_blank");
+    System.out.println("At the end");
 		verifyEquals(selenium.getTitle(), "Select Window Popup");
 		selenium.close();
+    selenium.selectWindow("null");
 	}
 }

File: javatests/com/thoughtworks/selenium/corebased/TestClickJavascriptHref.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestClickJavascriptHref extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testClickJavascriptHref() throws Exception {
+	@Test public void testClickJavascriptHref() throws Exception {
 		selenium.open("../tests/html/test_click_javascript_page.html");
 		selenium.click("link");
 		verifyEquals(selenium.getAlert(), "link clicked: foo");

File: javatests/com/thoughtworks/selenium/corebased/TestClickJavascriptHrefWithVoidChrome.java
Patch:
@@ -5,7 +5,7 @@
 
 public class TestClickJavascriptHrefWithVoidChrome extends
     InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testClickJavascriptHrefWithVoidChrome() throws Exception {
+	@Test public void testClickJavascriptHrefWithVoidChrome() throws Exception {
 		selenium.open("../tests/html/test_click_javascript_href_void_chrome.html");
 		selenium.click("linkWithJavascriptVoidHref");
 		verifyEquals(selenium.getAlert(), "onclick:voidHref");

File: javatests/com/thoughtworks/selenium/corebased/TestCommandError.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestCommandError extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties")
+	@Test
   public void testCommandError() throws Exception {
 		selenium.open("../tests/html/test_verifications.html");
 		try { selenium.click("notALink"); fail("expected failure"); } catch (Throwable e) {}

File: javatests/com/thoughtworks/selenium/corebased/TestComments.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestComments extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testComments() throws Exception {
+	@Test public void testComments() throws Exception {
 		selenium.open("../tests/html/test_verifications.html?foo=bar");
 		verifyTrue(selenium.getLocation().matches("^[\\s\\S]*/tests/html/test_verifications\\.html[\\s\\S]*$"));
 		verifyEquals(selenium.getValue("theText"), "the text value");

File: javatests/com/thoughtworks/selenium/corebased/TestConfirmations.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestConfirmations extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testConfirmations() throws Exception {
+	@Test public void testConfirmations() throws Exception {
 		selenium.open("../tests/html/test_confirm.html");
 		selenium.chooseCancelOnNextConfirmation();
 		selenium.click("confirmAndLeave");

File: javatests/com/thoughtworks/selenium/corebased/TestCookie.java
Patch:
@@ -6,7 +6,7 @@
 import org.testng.annotations.Test;
 
 public class TestCookie extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testCookie() throws Exception {
+	@Test public void testCookie() throws Exception {
 		String base = selenium.getEval("parseUrl(canonicalize(absolutify(\"html\", selenium.browserbot.baseUrl))).pathname;");
 		System.out.println(base);
 		selenium.open(base + "/path1/cookie1.html");

File: javatests/com/thoughtworks/selenium/corebased/TestCssLocators.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestCssLocators extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testCssLocators() throws Exception {
+	@Test public void testCssLocators() throws Exception {
 
 		//         Unimplemented features:
 		//             namespace
@@ -118,7 +118,8 @@ public class TestCssLocators extends InternalSelenseTestNgBase {
 
 		verifyTrue(selenium.isElementPresent("css=span:empty"));
 
-		verifyEquals(selenium.getText("css=div#targetTest span:target"), "target");
+    // TODO(simon): Re-enable this.
+//		verifyEquals(selenium.getText("css=div#targetTest span:target"), "target");
 
 		verifyTrue(selenium.isElementPresent("css=input[type=\"text\"]:enabled"));
 

File: javatests/com/thoughtworks/selenium/corebased/TestCursorPosition.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestCursorPosition extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testCursorPosition() throws Exception {
+	@Test public void testCursorPosition() throws Exception {
 		selenium.open("../tests/html/test_type_page1.html");
 		try { assertEquals(selenium.getCursorPosition("username"), "8"); fail("expected failure"); } catch (Throwable e) {}
 		selenium.windowFocus();

File: javatests/com/thoughtworks/selenium/corebased/TestDojoDragAndDrop.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestDojoDragAndDrop extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties")
+	@Test
   public void testDojoDragAndDrop() throws Exception {
 		selenium.open("../tests/html/dojo-0.4.0-mini/tests/dnd/test_simple.html");
 		selenium.dragAndDropToObject("1_3", "2_1");

File: javatests/com/thoughtworks/selenium/corebased/TestDragAndDrop.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestDragAndDrop extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testDragAndDrop() throws Exception {
+	@Test public void testDragAndDrop() throws Exception {
 		selenium.open("../tests/html/slider/example.html");
 		selenium.dragdrop("id=slider01", "800,0");
 		assertEquals(selenium.getValue("id=output1"), "20");

File: javatests/com/thoughtworks/selenium/corebased/TestEditable.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestEditable extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testEditable() throws Exception {
+	@Test public void testEditable() throws Exception {
 		selenium.open("../tests/html/test_editable.html");
 		verifyTrue(selenium.isEditable("normal_text"));
 		verifyTrue(selenium.isEditable("normal_select"));

File: javatests/com/thoughtworks/selenium/corebased/TestElementIndex.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestElementIndex extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testElementIndex() throws Exception {
+	@Test public void testElementIndex() throws Exception {
 		selenium.open("../tests/html/test_element_order.html");
 		assertEquals(selenium.getElementIndex("d2"), "1");
 		assertEquals(selenium.getElementIndex("d1.1.1"), "0");

File: javatests/com/thoughtworks/selenium/corebased/TestElementOrder.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestElementOrder extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties")
+	@Test
   public void testElementOrder() throws Exception {
 		selenium.open("../tests/html/test_element_order.html");
 		assertTrue(selenium.isOrdered("s1.1", "d1.1"));

File: javatests/com/thoughtworks/selenium/corebased/TestElementPresent.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestElementPresent extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testElementPresent() throws Exception {
+	@Test public void testElementPresent() throws Exception {
 		selenium.open("../tests/html/test_element_present.html");
 		assertTrue(selenium.isElementPresent("aLink"));
 		selenium.click("removeLinkAfterAWhile");

File: javatests/com/thoughtworks/selenium/corebased/TestErrorChecking.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestErrorChecking extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testErrorChecking() throws Exception {
+	@Test public void testErrorChecking() throws Exception {
 		selenium.open("../tests/html/test_click_page1.html");
 		//  These tests should all fail, as they are checking the error checking commands. 
 		try { assertEquals(selenium.getText("link"), "Click here for next page"); fail("expected failure"); } catch (Throwable e) {}

File: javatests/com/thoughtworks/selenium/corebased/TestEval.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestEval extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties")
+	@Test
   public void testEval() throws Exception {
 		selenium.open("../tests/html/test_open.html");
 		assertEquals(selenium.getEval("window.document.title"), "Open Test");

File: javatests/com/thoughtworks/selenium/corebased/TestEvilClosingWindow.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestEvilClosingWindow extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testEvilClosingWindow() throws Exception {
+	@Test public void testEvilClosingWindow() throws Exception {
 		selenium.open("../tests/html/test_select_window.html");
 		selenium.click("popupPage");
 		selenium.waitForPopUp("myPopupWindow", "5000");

File: javatests/com/thoughtworks/selenium/corebased/TestFailingAssert.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestFailingAssert extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testFailingAssert() throws Exception {
+	@Test public void testFailingAssert() throws Exception {
 		selenium.open("../tests/html/test_verifications.html");
 		try { assertEquals(selenium.getValue("theText"), "not the text value"); fail("expected failure"); } catch (Throwable e) {}
 		try { assertNotEquals("the text value", selenium.getValue("theText")); fail("expected failure"); } catch (Throwable e) {}

File: javatests/com/thoughtworks/selenium/corebased/TestFailingVerifications.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestFailingVerifications extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testFailingVerifications() throws Exception {
+	@Test public void testFailingVerifications() throws Exception {
 		selenium.open("../tests/html/test_verifications.html");
 		try { assertTrue(selenium.getLocation().matches("^[\\s\\S]*/tests/html/not_test_verifications\\.html$")); fail("expected failure"); } catch (Throwable e) {}
 		try { assertEquals(selenium.getValue("theText"), "not the text value"); fail("expected failure"); } catch (Throwable e) {}

File: javatests/com/thoughtworks/selenium/corebased/TestFocusOnBlur.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestFocusOnBlur extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testFocusOnBlur() throws Exception {
+	@Test public void testFocusOnBlur() throws Exception {
 		selenium.open("../tests/html/test_focus_on_blur.html");
 		selenium.type("testInput", "test");
 		selenium.fireEvent("testInput", "blur");

File: javatests/com/thoughtworks/selenium/corebased/TestFramesClick.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestFramesClick extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testFramesClick() throws Exception {
+	@Test public void testFramesClick() throws Exception {
 		selenium.open("../tests/html/Frames.html");
 		selenium.selectFrame("mainFrame");
 		selenium.open("../tests/html/test_click_page1.html");

File: javatests/com/thoughtworks/selenium/corebased/TestFramesClickJavascriptHref.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestFramesClickJavascriptHref extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testFramesClickJavascriptHref() throws Exception {
+	@Test public void testFramesClickJavascriptHref() throws Exception {
 		selenium.open("../tests/html/Frames.html");
 		selenium.selectFrame("mainFrame");
 		selenium.open("../tests/html/test_click_javascript_page.html");

File: javatests/com/thoughtworks/selenium/corebased/TestFramesNested.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestFramesNested extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testFramesNested() throws Exception {
+	@Test public void testFramesNested() throws Exception {
 		selenium.open("../tests/html/NestedFrames.html");
 		verifyEquals(selenium.getTitle(), "NestedFrames");
 		verifyFalse(selenium.isTextPresent("This is a test"));

File: javatests/com/thoughtworks/selenium/corebased/TestFramesOpen.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestFramesOpen extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testFramesOpen() throws Exception {
+	@Test public void testFramesOpen() throws Exception {
 		selenium.open("../tests/html/Frames.html");
 		selenium.selectFrame("mainFrame");
 		verifyTrue(selenium.getLocation().matches("^[\\s\\S]*/tests/html/test_open\\.html$"));

File: javatests/com/thoughtworks/selenium/corebased/TestFramesSpecialTargets.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestFramesSpecialTargets extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testFramesSpecialTargets() throws Exception {
+	@Test public void testFramesSpecialTargets() throws Exception {
 		selenium.openWindow("../tests/html/Frames.html", "SpecialTargets");
 		selenium.waitForPopUp("SpecialTargets", "10000");
 		selenium.selectWindow("SpecialTargets");

File: javatests/com/thoughtworks/selenium/corebased/TestFunkEventHandling.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestFunkEventHandling extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testFunkEventHandling() throws Exception {
+	@Test public void testFunkEventHandling() throws Exception {
 		selenium.open("../tests/html/test_funky_event_handling.html");
 		selenium.click("clickMe");
 		Thread.sleep(1000);

File: javatests/com/thoughtworks/selenium/corebased/TestGet.java
Patch:
@@ -7,7 +7,7 @@
 import org.testng.annotations.Test;
 
 public class TestGet extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testGet() throws Exception {
+	@Test public void testGet() throws Exception {
 		//  test API getters 
 		selenium.open("../tests/html/test_get.html");
 		//  IE uppercases the property names of the style. Both Opera and Firefox

File: javatests/com/thoughtworks/selenium/corebased/TestGetTextContent.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestGetTextContent extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testGetTextContent() throws Exception {
+	@Test public void testGetTextContent() throws Exception {
 		selenium.open("../tests/html/test_gettextcontent.html");
 		verifyTrue(selenium.isTextPresent("Text1"));
 		verifyFalse(selenium.isTextPresent("Text2"));

File: javatests/com/thoughtworks/selenium/corebased/TestGettingValueOfCheckbox.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestGettingValueOfCheckbox extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testGettingValueOfCheckbox() throws Exception {
+	@Test public void testGettingValueOfCheckbox() throws Exception {
     selenium.open("../tests/html/test_submit.html");
 
     String elementLocator = "name=okayToSubmit";

File: javatests/com/thoughtworks/selenium/corebased/TestGoBack.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestGoBack extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testGoBack() throws Exception {
+	@Test public void testGoBack() throws Exception {
 		selenium.open("../tests/html/test_click_page1.html");
 		verifyEquals(selenium.getTitle(), "Click Page 1");
 		//  Click a regular link 

File: javatests/com/thoughtworks/selenium/corebased/TestHighlight.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestHighlight extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testHighlight() throws Exception {
+	@Test public void testHighlight() throws Exception {
 		selenium.open("../tests/html/test_locators.html");
 		selenium.highlight("id1");
 	}

File: javatests/com/thoughtworks/selenium/corebased/TestHtmlSource.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestHtmlSource extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testHtmlSource() throws Exception {
+	@Test public void testHtmlSource() throws Exception {
 		selenium.open("../tests/html/test_html_source.html");
 		verifyTrue(selenium.getHtmlSource().matches("^[\\s\\S]*Text is here[\\s\\S]*$"));
 		verifyFalse(selenium.getHtmlSource().matches("^[\\s\\S]*can not be found[\\s\\S]*$"));

File: javatests/com/thoughtworks/selenium/corebased/TestImplicitLocators.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestImplicitLocators extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties")
+	@Test
   public void testImplicitLocators() throws Exception {
 		selenium.open("../tests/html/test_locators.html");
 		verifyEquals(selenium.getText("id1"), "this is the first element");

File: javatests/com/thoughtworks/selenium/corebased/TestJavaScriptAttributes.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestJavaScriptAttributes extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties")
+	@Test
   public void testJavaScriptAttributes() throws Exception {
 		selenium.open("../tests/html/test_javascript_attributes.html");
 		selenium.click("//a[@onclick=\"alert('foo')\"]");

File: javatests/com/thoughtworks/selenium/corebased/TestJavascriptParameters.java
Patch:
@@ -6,7 +6,7 @@
 import org.testng.annotations.Test;
 
 public class TestJavascriptParameters extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties")
+	@Test
   public void testJavascriptParameters() throws Exception {
 		selenium.open("../tests/html/test_store_value.html");
 		selenium.type("theText", selenium.getEval("[1,2,3,4,5].join(':')"));

File: javatests/com/thoughtworks/selenium/corebased/TestLocators.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestLocators extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties")
+	@Test
   public void testLocators() throws Exception {
 		selenium.open("../tests/html/test_locators.html");
 		//  Id location 

File: javatests/com/thoughtworks/selenium/corebased/TestMultiSelect.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestMultiSelect extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testMultiSelect() throws Exception {
+	@Test public void testMultiSelect() throws Exception {
 		selenium.open("../tests/html/test_multiselect.html");
 		assertEquals(join(selenium.getSelectedLabels("theSelect"), ','), "Second Option");
 		selenium.select("theSelect", "index=4");

File: javatests/com/thoughtworks/selenium/corebased/TestOpen.java
Patch:
@@ -7,7 +7,7 @@
 import org.testng.annotations.Test;
 
 public class TestOpen extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testOpen() throws Exception {
+	@Test public void testOpen() throws Exception {
 		selenium.open("../tests/html/test_open.html");
 		verifyTrue(selenium.getLocation().matches("^[\\s\\S]*/tests/html/test_open\\.html$"));
 		//  Should really split these verifications into their own test file.

File: javatests/com/thoughtworks/selenium/corebased/TestOpenInTargetFrame.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestOpenInTargetFrame extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testOpenInTargetFrame() throws Exception {
+	@Test public void testOpenInTargetFrame() throws Exception {
 		selenium.open("../tests/html/test_open_in_target_frame.html");
 		selenium.selectFrame("rightFrame");
 		selenium.click("link=Show new frame in leftFrame");

File: javatests/com/thoughtworks/selenium/corebased/TestPatternMatching.java
Patch:
@@ -6,7 +6,7 @@
 import org.testng.annotations.Test;
 
 public class TestPatternMatching extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testPatternMatching() throws Exception {
+	@Test public void testPatternMatching() throws Exception {
 		selenium.open("../tests/html/test_verifications.html");
 		verifyTrue(selenium.getValue("theText").matches("^[\\s\\S]*text[\\s\\S]*$"));
 		verifyTrue(selenium.getValue("theHidden").matches("^[\\s\\S]* hidden value$"));

File: javatests/com/thoughtworks/selenium/corebased/TestPause.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestPause extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testPause() throws Exception {
+	@Test public void testPause() throws Exception {
 		selenium.open("../tests/html/test_reload_onchange_page.html");
 		//  Make sure we can pause even when the page doesn't change 
 		Thread.sleep(100);

File: javatests/com/thoughtworks/selenium/corebased/TestPrompt.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestPrompt extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testPrompt() throws Exception {
+	@Test public void testPrompt() throws Exception {
 		selenium.open("../tests/html/test_prompt.html");
 		verifyFalse(selenium.isPromptPresent());
 		assertFalse(selenium.isPromptPresent());

File: javatests/com/thoughtworks/selenium/corebased/TestQuickOpen.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestQuickOpen extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testQuickOpen() throws Exception {
+	@Test public void testQuickOpen() throws Exception {
 		// <tr>
 		//       <td>setTimeout</td>
 		//       <td>5000</td>

File: javatests/com/thoughtworks/selenium/corebased/TestRefresh.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestRefresh extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testRefresh() throws Exception {
+	@Test public void testRefresh() throws Exception {
 		selenium.open("../tests/html/test_page.slow.html");
 		verifyTrue(selenium.getLocation().matches("^[\\s\\S]*/tests/html/test_page\\.slow\\.html$"));
 		verifyEquals(selenium.getTitle(), "Slow Loading Page");

File: javatests/com/thoughtworks/selenium/corebased/TestSelect.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestSelect extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testSelect() throws Exception {
+	@Test public void testSelect() throws Exception {
 		selenium.open("../tests/html/test_select.html");
 		assertTrue(selenium.isSomethingSelected("theSelect"));
 		assertEquals(selenium.getSelectedLabel("theSelect"), "Second Option");;

File: javatests/com/thoughtworks/selenium/corebased/TestSelectMultiLevelFrame.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestSelectMultiLevelFrame extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testSelectMultiLevelFrame() throws Exception {
+	@Test public void testSelectMultiLevelFrame() throws Exception {
 		selenium.open("../tests/html/test_multi_level_frame.html");
 		//  Select first level frame 
 		selenium.selectFrame("frame2");

File: javatests/com/thoughtworks/selenium/corebased/TestSelectPopUp.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestSelectPopUp extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testSelectPopUp() throws Exception {
+	@Test public void testSelectPopUp() throws Exception {
 		selenium.open("../tests/html/test_select_window.html");
 		selenium.click("popupPage");
 		selenium.waitForPopUp("myPopupWindow", "");

File: javatests/com/thoughtworks/selenium/corebased/TestSelectWindow.java
Patch:
@@ -7,7 +7,7 @@
 import org.testng.annotations.Test;
 
 public class TestSelectWindow extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testSelectWindow() throws Exception {
+	@Test public void testSelectWindow() throws Exception {
 		selenium.open("../tests/html/test_select_window.html");
 		selenium.click("popupPage");
 		selenium.waitForPopUp("myPopupWindow", "5000");

File: javatests/com/thoughtworks/selenium/corebased/TestSelectWindowTitle.java
Patch:
@@ -7,7 +7,7 @@
 import org.testng.annotations.Test;
 
 public class TestSelectWindowTitle extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testSelectWindowTitle() throws Exception {
+	@Test public void testSelectWindowTitle() throws Exception {
 		selenium.open("../tests/html/test_select_window.html");
 		selenium.click("popupPage");
 		selenium.waitForPopUp("myPopupWindow", "5000");

File: javatests/com/thoughtworks/selenium/corebased/TestSetSpeed.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestSetSpeed extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testSetSpeed() throws Exception {
+	@Test public void testSetSpeed() throws Exception {
 		String lastSpeed = selenium.getSpeed();
 		//  The max value in slider is 1000, but setSpeed command can set higher than this 
 		selenium.setSpeed("1600");

File: javatests/com/thoughtworks/selenium/corebased/TestStore.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestStore extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testStore() throws Exception {
+	@Test public void testStore() throws Exception {
 		selenium.open("../tests/html/test_verifications.html");
 		String storedHiddenValue = selenium.getValue("theHidden");
 		String storedSpanText = selenium.getText("theSpan");

File: javatests/com/thoughtworks/selenium/corebased/TestSubmit.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestSubmit extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testSubmit() throws Exception {
+	@Test public void testSubmit() throws Exception {
 		selenium.open("../tests/html/test_submit.html");
 		selenium.submit("searchForm");
 		assertEquals(selenium.getAlert(), "onsubmit called");

File: javatests/com/thoughtworks/selenium/corebased/TestTextWhitespace.java
Patch:
@@ -6,7 +6,7 @@
 import org.testng.annotations.Test;
 
 public class TestTextWhitespace extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testTextWhitespace() throws Exception {
+	@Test public void testTextWhitespace() throws Exception {
 		selenium.open("../tests/html/test_text_content.html");
 		verifyEquals(selenium.getText("nonTextMarkup"), "There is non-visible and visible markup here that doesn't change the text content");
 		//  Match exactly the same space characters 

File: javatests/com/thoughtworks/selenium/corebased/TestType.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestType extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testType() throws Exception {
+	@Test public void testType() throws Exception {
 		selenium.open("../tests/html/test_type_page1.html");
 		verifyEquals(selenium.getValue("username"), "");
 		selenium.shiftKeyDown();

File: javatests/com/thoughtworks/selenium/corebased/TestTypeRichText.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestTypeRichText extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testTypeRichText() throws Exception {
+	@Test public void testTypeRichText() throws Exception {
 		selenium.open("../tests/html/test_rich_text.html");
 		selenium.selectFrame("richtext");
 		verifyEquals(selenium.getText("//body"), "");

File: javatests/com/thoughtworks/selenium/corebased/TestVerifications.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestVerifications extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testVerifications() throws Exception {
+	@Test public void testVerifications() throws Exception {
 		selenium.open("../tests/html/test_verifications.html?foo=bar");
 		verifyTrue(selenium.getLocation().matches("^[\\s\\S]*/tests/html/test_verifications\\.html[\\s\\S]*$"));
 		verifyTrue(selenium.getLocation().matches("^[\\s\\S]*/tests/html/test_verifications\\.html[\\s\\S]foo=bar$"));

File: javatests/com/thoughtworks/selenium/corebased/TestVisibility.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestVisibility extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testVisibility() throws Exception {
+	@Test public void testVisibility() throws Exception {
 		selenium.open("../tests/html/test_visibility.html");
 		verifyTrue(selenium.isVisible("visibleParagraph"));
 		verifyFalse(selenium.isVisible("hiddenParagraph"));

File: javatests/com/thoughtworks/selenium/corebased/TestWait.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestWait extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testWait() throws Exception {
+	@Test public void testWait() throws Exception {
 		//  Link click 
 		selenium.open("../tests/html/test_reload_onchange_page.html");
 		selenium.click("theLink");

File: javatests/com/thoughtworks/selenium/corebased/TestWaitFor.java
Patch:
@@ -6,7 +6,7 @@
 import org.testng.annotations.Test;
 
 public class TestWaitFor extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testWaitFor() throws Exception {
+	@Test public void testWaitFor() throws Exception {
 		selenium.open("../tests/html/test_async_event.html");
 		assertEquals(selenium.getValue("theField"), "oldValue");
 		selenium.click("theButton");

File: javatests/com/thoughtworks/selenium/corebased/TestWaitForNot.java
Patch:
@@ -7,7 +7,7 @@
 import org.testng.annotations.Test;
 
 public class TestWaitForNot extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testWaitForNot() throws Exception {
+	@Test public void testWaitForNot() throws Exception {
 		selenium.open("../tests/html/test_async_event.html");
 		assertEquals(selenium.getValue("theField"), "oldValue");
 		selenium.click("theButton");

File: javatests/com/thoughtworks/selenium/corebased/TestWaitInPopupWindow.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestWaitInPopupWindow extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testWaitInPopupWindow() throws Exception {
+	@Test public void testWaitInPopupWindow() throws Exception {
 		selenium.open("../tests/html/test_select_window.html");
 		selenium.click("popupPage");
 		selenium.waitForPopUp("myPopupWindow", "5000");

File: javatests/com/thoughtworks/selenium/corebased/TestXPathLocatorInXHtml.java
Patch:
@@ -4,7 +4,7 @@
 import org.testng.annotations.Test;
 
 public class TestXPathLocatorInXHtml extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testXPathLocatorInXHtml() throws Exception {
+	@Test public void testXPathLocatorInXHtml() throws Exception {
 		selenium.open("../tests/html/test_locators.xhtml");
 		verifyTrue(selenium.isElementPresent("xpath=//x:body"));
 	}

File: javatests/com/thoughtworks/selenium/corebased/TestXPathLocators.java
Patch:
@@ -5,7 +5,7 @@
 import org.testng.annotations.Test;
 
 public class TestXPathLocators extends InternalSelenseTestNgBase {
-	@Test(dataProvider = "system-properties") public void testXPathLocators() throws Exception {
+	@Test public void testXPathLocators() throws Exception {
 		selenium.open("../tests/html/test_locators.html");
 		verifyEquals(selenium.getText("xpath=//a"), "this is the first element");
 		verifyEquals(selenium.getText("xpath=//a[@class='a2']"), "this is the second element");

File: java/org/openqa/selenium/internal/seleniumemulation/TypeKeys.java
Patch:
@@ -33,6 +33,9 @@ public TypeKeys(AlertOverride alertOverride, ElementFinder finder) {
   protected Void handleSeleneseCommand(WebDriver driver, String locator, String value) {
     alertOverride.replaceAlertMethod(driver);
 
+    value = value.replace("\\10", Keys.ENTER);
+    value = value.replace("\\13", Keys.RETURN);
+    value = value.replace("\\27", Keys.ESCAPE);
     value = value.replace("\\38", Keys.ARROW_UP);
     value = value.replace("\\40", Keys.ARROW_DOWN);
     value = value.replace("\\37", Keys.ARROW_LEFT);

File: javatests/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -40,7 +40,6 @@ public void testShouldReturnNullWhenGettingTheValueOfAnAttributeThatIsNotListed(
     assertThat(attribute, is(nullValue()));
   }
 
-  @Ignore(value = {SELENESE, IE, IPHONE}, reason = "Issue 758")
   public void testShouldReturnNullWhenGettingSrcAttributeOfInvalidImgTag() {
     driver.get(pages.simpleTestPage);
     WebElement img = driver.findElement(By.id("invalidImgTag"));

File: javatests/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -40,7 +40,7 @@ public void testShouldReturnNullWhenGettingTheValueOfAnAttributeThatIsNotListed(
     assertThat(attribute, is(nullValue()));
   }
 
-  @Ignore(value = {FIREFOX, SELENESE, IE, IPHONE}, reason = "Issue 758")
+  @Ignore(value = {SELENESE, IE, IPHONE}, reason = "Issue 758")
   public void testShouldReturnNullWhenGettingSrcAttributeOfInvalidImgTag() {
     driver.get(pages.simpleTestPage);
     WebElement img = driver.findElement(By.id("invalidImgTag"));

File: javatests/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -185,6 +185,7 @@ public void testShouldReturnEmptyStringWhenTextIsEmpty() {
     assertThat(text, equalTo(""));
   }
 
+  @Ignore
   public void testShouldReturnEmptyStringWhenTagIsSelfClosing() {
     driver.get(pages.xhtmlTestPage);
 

File: javatests/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -459,7 +459,7 @@ public void testJavascriptStringHandlingShouldWorkAsExpected() {
   }
 
   @JavascriptEnabled
-  @Ignore({CHROME, FIREFOX})
+  @Ignore(CHROME)
   public void testShouldBeAbleToExecuteABigChunkOfJavascriptCode() throws IOException {
     driver.get(pages.javascriptPage);
 

File: java/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncher.java
Patch:
@@ -54,7 +54,6 @@ public FirefoxCustomProfileLauncher(BrowserConfigurationOptions browserOptions,
     public FirefoxCustomProfileLauncher(BrowserConfigurationOptions browserOptions, RemoteControlConfiguration configuration, String sessionId, BrowserInstallation browserInstallation) {
         super(sessionId, configuration, browserOptions);
         browserOptions.setProxyEverything(false);
-        browserOptions.setAvoidProxy(true);
         browserOptions.setOnlyProxySeleniumTraffic(true);
         init();
         this.browserInstallation = browserInstallation;

File: java/org/openqa/selenium/browserlaunchers/LauncherUtils.java
Patch:
@@ -245,7 +245,7 @@ protected static boolean copyDirectory(File source, String suffix, File dest) {
 
   // TODO(simon): Reduce visibility
   public static void generatePacAndPrefJs(File customProfileDir, int port, String homePage,
-      boolean changeMaxConnections, int timeoutInSeconds, Capabilities capabilities)
+      boolean changeMaxConnections, long timeoutInSeconds, Capabilities capabilities)
       throws FileNotFoundException {
 
 

File: java/org/openqa/selenium/server/CommandQueue.java
Patch:
@@ -39,7 +39,7 @@ public class CommandQueue {
             ? 0 : Integer.parseInt(System.getProperty("selenium.slowMode")));
     private static AtomicInteger idGenerator = new AtomicInteger(0);
     
-    private final AtomicInteger defaultTimeout;
+    private final AtomicLong defaultTimeout;
     private static AtomicInteger retryTimeout = new AtomicInteger(10);;
 
     private final BrowserResponseSequencer browserResponseSequencer;
@@ -66,7 +66,7 @@ public CommandQueue(String newSessionId, String newUniqueId, RemoteControlConfig
             = new ConcurrentHashMap<String, Boolean>();
         idGenerator.incrementAndGet();
         commandHolder = new CommandHolder(uniqueId, retryTimeout.get());
-        defaultTimeout = new AtomicInteger(configuration.getTimeoutInSeconds());
+        defaultTimeout = new AtomicLong(configuration.getTimeoutInSeconds());
         retryTimeout.set(configuration.getRetryTimeoutInSeconds());
 
         resultHolder = new CommandResultHolder(uniqueId, defaultTimeout.get());

File: java/org/openqa/selenium/server/CommandResultHolder.java
Patch:
@@ -38,7 +38,7 @@ public class CommandResultHolder {
 	private final String queueId;
 	private final SingleEntryAsyncQueue<String> holder;
     
-    public CommandResultHolder(String queueId, int timeoutInSeconds) {
+    public CommandResultHolder(String queueId, long timeoutInSeconds) {
       holder = new SingleEntryAsyncQueue<String>(timeoutInSeconds);
       holder.setPoison(poisonResult);
       this.queueId = queueId;

File: java/org/openqa/selenium/server/RemoteControlConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public class RemoteControlConfiguration {
     private String logOutFileName;
     private String forcedBrowserMode;
     private boolean honorSystemProxy;
-    private int timeoutInSeconds;
+    private long timeoutInSeconds;
     private int retryTimeoutInSeconds;
     /** useful for situations where Selenium is being invoked programatically and the outside container wants to own logging */
     private boolean dontTouchLogging = false;
@@ -268,7 +268,7 @@ public boolean shouldOverrideSystemProxy() {
         return !honorSystemProxy;
     }
 
-    public int getTimeoutInSeconds() {
+    public long getTimeoutInSeconds() {
         return timeoutInSeconds;
     }
 

File: java/org/openqa/selenium/server/browserlaunchers/BrowserLauncherFactory.java
Patch:
@@ -16,8 +16,6 @@
  */
 package org.openqa.selenium.server.browserlaunchers;
 
-import org.apache.commons.logging.Log;
-import org.openqa.jetty.log.LogFactory;
 import org.openqa.selenium.internal.Trace;
 import org.openqa.selenium.internal.TraceFactory;
 import org.openqa.selenium.server.BrowserConfigurationOptions;
@@ -83,7 +81,7 @@ public BrowserLauncher getBrowserLauncher(String browser, String sessionId, Remo
     }
     String executablePath = null;
     if (browserOptions.hasOptions()) {
-      executablePath = browserOptions.getExecutablePath();
+      executablePath = BrowserOptions.getExecutablePath(browserOptions.asCapabilities());
     } else {
       configuration.copySettingsIntoBrowserOptions(browserOptions);
     }

File: java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -140,7 +140,8 @@ protected void copyDirectory(File sourceDir, File destDir) {
   protected File initProfileTemplate() {
     File firefoxProfileTemplate = null;
 
-    String relativeProfile = browserConfigurationOptions.getProfile();
+    String relativeProfile = BrowserOptions
+        .getProfile(browserConfigurationOptions.asCapabilities());
     if (relativeProfile == null) {
       relativeProfile = "";
     }

File: java/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java
Patch:
@@ -47,7 +47,7 @@ public HTMLLauncher(SeleniumServer remoteControl) {
      * @return PASS or FAIL
      * @throws IOException if we can't write the output file
      */
-    public String runHTMLSuite(String browser, String browserURL, String suiteURL, File outputFile, int timeoutInSeconds, boolean multiWindow) throws IOException {
+    public String runHTMLSuite(String browser, String browserURL, String suiteURL, File outputFile, long timeoutInSeconds, boolean multiWindow) throws IOException {
         return runHTMLSuite(browser, browserURL, suiteURL, outputFile,
                 timeoutInSeconds, multiWindow, "info");
     }
@@ -89,7 +89,7 @@ protected void writeResults(File outputFile) throws IOException {
      * @return PASS or FAIL
      * @throws IOException if we can't write the output file
      */
-    private String runHTMLSuite(String browser, String browserURL, String suiteURL, File outputFile, int timeoutInSeconds, boolean multiWindow, String defaultLogLevel) throws IOException {
+    private String runHTMLSuite(String browser, String browserURL, String suiteURL, File outputFile, long timeoutInSeconds, boolean multiWindow, String defaultLogLevel) throws IOException {
         outputFile.createNewFile();
         if (!outputFile.canWrite()) {
         	throw new IOException("Can't write to outputFile: " + outputFile.getAbsolutePath());
@@ -148,7 +148,7 @@ private String runHTMLSuite(String browser, String browserURL, String suiteURL,
      * @return PASSED or FAIL
      * @throws IOException if we can't write the output file
      */
-    public String runHTMLSuite(String browser, String browserURL, File suiteFile, File outputFile, int timeoutInSeconds, boolean multiWindow) throws IOException {
+    public String runHTMLSuite(String browser, String browserURL, File suiteFile, File outputFile, long timeoutInSeconds, boolean multiWindow) throws IOException {
         if (browser == null) throw new IllegalArgumentException("browser may not be null");
         if (!suiteFile.exists()) {
     		throw new IOException("Can't find HTML Suite file:" + suiteFile.getAbsolutePath());

File: javatests/com/thoughtworks/selenium/BrowserConfigurationOptionsTest.java
Patch:
@@ -104,8 +104,8 @@ public void testServerOptionsCanLoadClientOptions() {
 			.setBrowserExecutablePath(execPath);
 		org.openqa.selenium.server.BrowserConfigurationOptions serverOptions =
 			new org.openqa.selenium.server.BrowserConfigurationOptions(bco.toString());
-		assertEquals(profile, serverOptions.getProfile());
-		assertEquals(execPath, serverOptions.getExecutablePath());
+    assertEquals(profile, BrowserOptions.getProfile(serverOptions.asCapabilities()));
+    assertEquals(execPath, BrowserOptions.getExecutablePath(serverOptions.asCapabilities()));
 		assertTrue(BrowserOptions.isSingleWindow(serverOptions.asCapabilities()));
 	}
 	

File: java/org/openqa/selenium/remote/server/rest/ResultConfig.java
Patch:
@@ -264,7 +264,7 @@ public Throwable getRootExceptionCause(Throwable originalException) {
     //
     // Of course, if we only have one item in our chain, go ahead and return.
     ErrorCodes ec = new ErrorCodes();
-    Iterator<Throwable> reversedChain = Iterables.reverse(chain).iterator();
+    Iterator<Throwable> reversedChain = Lists.reverse(chain).iterator();
     Throwable rootCause = reversedChain.next();
     if (!reversedChain.hasNext() || ec.isMappableError(rootCause)) {
       return rootCause;

File: java/org/openqa/selenium/browserlaunchers/WindowsProxyManager.java
Patch:
@@ -26,6 +26,7 @@
 
 import org.openqa.selenium.Capabilities;
 import org.openqa.selenium.internal.CommandLine;
+import org.openqa.selenium.internal.NullTrace;
 import org.openqa.selenium.io.FileHandler;
 import org.openqa.selenium.internal.Maps;
 import org.openqa.selenium.io.TemporaryFilesystem;

File: java/org/openqa/selenium/browserlaunchers/WindowsUtils.java
Patch:
@@ -30,6 +30,7 @@
 import java.util.regex.Pattern;
 
 import org.openqa.selenium.internal.CommandLine;
+import org.openqa.selenium.internal.NullTrace;
 import org.openqa.selenium.internal.Trace;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;

File: java/org/openqa/selenium/internal/NullTrace.java
Patch:
@@ -1,4 +1,4 @@
-package org.openqa.selenium.browserlaunchers;
+package org.openqa.selenium.internal;
 
 import org.openqa.selenium.internal.Trace;
 

File: java/org/openqa/selenium/server/browserlaunchers/ResourceExtractor.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipFile;
 
-import org.openqa.selenium.browserlaunchers.NullTrace;
+import org.openqa.selenium.internal.NullTrace;
 import org.openqa.selenium.io.FileHandler;
 import org.openqa.selenium.internal.Trace;
 

File: android/server/src/java/org/openqa/selenium/android/app/MainActivity.java
Patch:
@@ -45,7 +45,7 @@ public class MainActivity extends Activity implements IntentReceiverListener {
   // If sending the intent programatically use"
   // intent.putExtra(DEBUG_MODE_ARG, true);
   public static final String DEBUG_MODE_ARG = "debug";
-  private boolean debugMode = false;
+  private boolean debugMode;
 
   public MainActivity() {
     intentReg = new IntentReceiverRegistrar(this);
@@ -58,8 +58,8 @@ protected void onCreate(Bundle savedInstanceState) {
     if (getIntent().hasExtra(DEBUG_MODE_ARG)) {
       String debugArg = getIntent().getStringExtra(DEBUG_MODE_ARG);
       debugMode = Boolean.parseBoolean(debugArg);
+      Logger.setDebugMode(debugMode);
     }
-    Logger.setDebugMode(debugMode);
     
     jettyService = new Intent(this, JettyService.class);
     startService(jettyService);

File: android/server/src/java/org/openqa/selenium/android/intents/IntentReceiverRegistrar.java
Patch:
@@ -17,12 +17,12 @@
 
 package org.openqa.selenium.android.intents;
 
+import com.google.common.collect.Sets;
+
 import android.content.BroadcastReceiver;
 import android.content.Context;
 import android.content.IntentFilter;
 
-import com.google.common.collect.Sets;
-
 import java.util.Set;
 
 public class IntentReceiverRegistrar {

File: support/src/java/org/openqa/selenium/support/ui/WebDriverWait.java
Patch:
@@ -37,7 +37,7 @@ public class WebDriverWait implements Wait<WebDriver> {
   private final WebDriver driver;
   private final long timeOutInMillis;
   private final long sleepTimeOut;
-  private final static long DEFAULT_SLEEP_TIMEOUT = 500;
+  public final static long DEFAULT_SLEEP_TIMEOUT = 500;
 
   /**
    * @param driver The WebDriver instance to pass to the expected conditions

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GetText.java
Patch:
@@ -32,6 +32,6 @@ protected String handleSeleneseCommand(WebDriver driver, String locator, String
     String getText = library.getSeleniumScript("getText.js");
 
     return (String) ((JavascriptExecutor) driver).executeScript(
-        getText + "; return getText(arguments[0]);", locator);
+        "return (" + getText + ")(arguments[0]);", locator);
   }
 }
\ No newline at end of file

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/IsTextPresent.java
Patch:
@@ -32,7 +32,7 @@ protected Boolean handleSeleneseCommand(WebDriver driver, String pattern, String
     String script = js.getSeleniumScript("isTextPresent.js");
 
     Boolean result = (Boolean) ((JavascriptExecutor) driver).executeScript(
-        script + "; return isTextPresent(arguments[0]);", pattern);
+        "return (" + script + ")(arguments[0]);", pattern);
 
     // Handle the null case
     return Boolean.TRUE == result;

File: selenium/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -39,7 +39,7 @@ public class SingleTestSuite extends TestCase {
   private static final String SELENIUM = "org.openqa.selenium.SeleneseBackedWebDriver";
 
   public static Test suite() throws Exception {
-    String driver = IE;
+    String driver = FIREFOX;
 
     System.setProperty("jna.library.path", "..\\build;build");
     System.setProperty("webdriver.selenium.server.port", String.valueOf(findFreePort()));
@@ -55,8 +55,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("FrameSwitchingTest")
-        .method("testJavaScriptShouldExecuteInTheContextOfTheCurrentFrame")
+        .onlyRun("WebDriverBackedSeleniumLargeTest")
+        .method("testShouldBeAbleToInvokeSeleniumCoreElementLocatorsWithGetEval")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .outputTestNames()

File: common/test/java/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -40,7 +40,7 @@ public void testShouldReturnNullWhenGettingTheValueOfAnAttributeThatIsNotListed(
     assertThat(attribute, is(nullValue()));
   }
 
-  @Ignore(value = {FIREFOX, SELENESE, IE}, reason = "Issue 758")
+  @Ignore(value = {FIREFOX, SELENESE, IE, IPHONE}, reason = "Issue 758")
   public void testShouldReturnNullWhenGettingSrcAttributeOfInvalidImgTag() {
     driver.get(pages.simpleTestPage);
     WebElement img = driver.findElement(By.id("invalidImgTag"));

File: common/test/java/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -26,6 +26,7 @@
 import static org.openqa.selenium.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
+import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 import java.util.List;
@@ -252,7 +253,8 @@ public void testShouldReturnValueOfOnClickAttribute() {
     assertEquals(null, mousedownDiv.getAttribute("onclick"));
   }
 
-  @Ignore(value = {IE}, reason = "IE7 Does not support SVG")
+  @Ignore(value = {IE, IPHONE}, reason = "IE7 Does not support SVG; " +
+      "SVG elements crash the iWebDriver app (issue 1134)")
   public void testGetAttributeDoesNotReturnAnObjectForSvgProperties() {
     driver.get(pages.svgPage);
     WebElement svgElement = driver.findElement(By.id("rotate"));

File: selenium/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -56,7 +56,7 @@ public static Test suite() throws Exception {
         .keepDriverInstance()
         .includeJavascriptTests()
         .onlyRun("FrameSwitchingTest")
-//        .method("testShouldFindElementsByClassWhenItsNameIsSurroundedByWhitespace")
+//        .method("testFrameSearchesShouldBeRelativeToTheCurrentlySelectedFrame")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .outputTestNames()

File: jobbie/src/java/org/openqa/selenium/ie/InternetExplorerDriver.java
Patch:
@@ -140,6 +140,7 @@ private void initializeLib() {
             String arch = System.getProperty("os.arch", "")
                 .contains("64") ? "x64" : "Win32";
             List<String> sourcePaths = new ArrayList<String>();
+            sourcePaths.add("build\\" + arch + "\\Debug");
             sourcePaths.add("..\\build\\" + arch + "\\Debug");
             sourcePaths.add("..\\..\\build\\" + arch + "\\Debug");
             boolean copied = false;
@@ -154,7 +155,7 @@ private void initializeLib() {
             }
             if (!copied) {
               throw new WebDriverException(
-                  "Couldn't find IEDriver.dll");
+                  "Couldn't find IEDriver.dll: " + arch);
             }
           } else {
             throw new WebDriverException(ioe);

File: android/server/src/java/org/openqa/selenium/android/app/WebDriverWebView.java
Patch:
@@ -75,7 +75,8 @@ else if (url.length() > 0) {
   }
   
   public String getWindowName() {
-    javascriptExecutor.executeJS("window.webdriver.resultMethod(window.name);", WebDriverWebView.this);
+    javascriptExecutor.executeJS("window.webdriver.resultMethod(window.name);",
+        WebDriverWebView.this);
     while (Action.NOT_DONE_INDICATOR.equals(javascriptExecutor.getResult())) {
       Sleeper.sleepQuietly(20);
     }

File: common/test/java/org/openqa/selenium/ExecutingAsyncJavascriptTest.java
Patch:
@@ -15,6 +15,7 @@
 
 //@Ignore(value = ANDROID,
 //    reason = "Android is way too slow to use the current polling-only technique")
+@Ignore(value = SELENESE, reason = "Every test appears to be failing.")
 public class ExecutingAsyncJavascriptTest extends AbstractDriverTestCase {
 
   private JavascriptExecutor executor;

File: common/src/java/org/openqa/selenium/JavascriptExecutor.java
Patch:
@@ -27,7 +27,8 @@ public interface JavascriptExecutor {
    * If the script has a return value, then the following steps will be taken:
    *
    * <ul> <li>For an HTML element, this method returns a WebElement</li>
-   * <li>For a number, a Long is returned</li>
+   * <li>For a decimal, a Double is returned</li>
+   * <li>For a non-decimal number, a Long is returned</li>
    * <li>For a boolean, a Boolean is returned</li>
    * <li>For all other cases, a String is returned.</li>
    * <li>For an array, return a List&lt;Object&gt; with each object

File: android/client/test/java/org/openqa/selenium/android/AndroidDriverTestSuite.java
Patch:
@@ -49,6 +49,8 @@ public static Test suite() throws Exception {
         .exclude(ANDROID)
         .exclude(REMOTE)
         .includeJavascriptTests()
+        .onlyRun("FrameSwitchingTest")
+//        .onlyRun("PageLoadingTest")
         .create();
   }
 }

File: android/server/src/java/org/openqa/selenium/android/JavascriptDomAccessor.java
Patch:
@@ -669,7 +669,7 @@ private String installXPathJs() {
     // window.install() to install it.
     return
         "if (!document.evaluate) {" +
-        "  var currentWindow = window" +
+        "  var currentWindow = window;" +
         // We need to run the installation code in the main context
         "  with (window.top) {" +
         "  try {" +

File: common/test/java/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -81,7 +81,7 @@ public void testShouldBeAbleToLoadAPageWithFramesetsAndWaitUntilAllFramesAreLoad
     WebElement pageNumber = driver.findElement(By.xpath("//span[@id='pageNumber']"));
     assertThat(pageNumber.getText().trim(), equalTo("1"));
 
-    driver.switchTo().frame(1);
+    driver.switchTo().defaultContent().switchTo().frame(1);
     pageNumber = driver.findElement(By.xpath("//span[@id='pageNumber']"));
     assertThat(pageNumber.getText().trim(), equalTo("2"));
   }

File: jobbie/src/java/org/openqa/selenium/ie/IeReturnTypes.java
Patch:
@@ -1,5 +1,5 @@
 /* AUTO GENERATED - Do not edit by hand. */
-/* See rake-tasts/ie_code_generator.rb instead. */
+/* See rake-tasks/ie_code_generator.rb instead. */
 package org.openqa.selenium.ie;
 public class IeReturnTypes {
 	public static final int STRING = 1;

File: common/test/java/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -316,7 +316,8 @@ public void testShouldBeAbleToCarryOnWorkingIfTheFrameIsDeletedFromUnderUs() {
       fail("Could not find element after switching frame");
     }
   }
-  
+
+  @Ignore(value = {IE, CHROME, SELENESE}, reason = "These drivers still return frame title.")
   public void testShouldReturnWindowTitleInAFrameset() {
     driver.get(pages.framesetPage);
     driver.switchTo().frame("third");

File: firefox/src/java/org/openqa/selenium/firefox/internal/Executable.java
Patch:
@@ -144,7 +144,8 @@ private static File locateFirefoxBinaryFromPlatform() {
       case XP:
           binary = new File(getEnvVar("PROGRAMFILES", "\\Program Files") + "\\Mozilla Firefox\\firefox.exe");
           if (!binary.exists()) {
-            binary = new File("/Program Files (x86)/Mozilla Firefox/firefox.exe");
+              binary = new File(getEnvVar("ProgramFiles(x86)", getEnvVar("SystemDrive", "c:") + "\\Program Files (x86)") +
+                      "\\Mozilla Firefox\\firefox.exe");
           }
           break;
 

File: android/client/test/java/org/openqa/selenium/android/environment/AndroidTestEnvironment.java
Patch:
@@ -20,13 +20,13 @@
 
 import org.openqa.selenium.environment.TestEnvironment;
 import org.openqa.selenium.environment.webserver.AppServer;
-import org.openqa.selenium.environment.webserver.Jetty6AppServer;
+import org.openqa.selenium.environment.webserver.Jetty7AppServer;
 
 public class AndroidTestEnvironment implements TestEnvironment {
   private AppServer appServer;
 
   public AndroidTestEnvironment() {
-    appServer = new Jetty6AppServer("10.0.2.2");
+    appServer = new Jetty7AppServer("10.0.2.2");
     appServer.start();
   }
 

File: common/test/java/org/openqa/selenium/environment/webserver/Jetty7AppServer.java
Patch:
@@ -56,7 +56,7 @@ public class Jetty7AppServer implements AppServer {
   private final String hostName;
 
   public Jetty7AppServer() {
-    this(networkUtils.getNonLoopbackAddressOfThisMachine());
+    this("localhost");
   }
   
   public Jetty7AppServer(String hostName) {

File: remote/common/src/java/org/openqa/selenium/remote/Command.java
Patch:
@@ -17,6 +17,8 @@
 
 package org.openqa.selenium.remote;
 
+import com.google.common.collect.Maps;
+
 import org.json.JSONObject;
 
 import java.util.HashMap;
@@ -47,7 +49,7 @@ public String getName() {
   }
 
   public Map<String, ?> getParameters() {
-    return parameters;
+    return parameters == null ? new HashMap<String, Object>() : parameters;
   }
 
   @Override

File: selenium/src/java/org/openqa/selenium/WebDriverCommandProcessor.java
Patch:
@@ -358,7 +358,7 @@ private void setUpMethodMap() {
     seleneseMethods.put("getSelectOptions", new GetSelectOptions(select));
     seleneseMethods.put("getSpeed", new NoOp("0"));
     seleneseMethods.put("getTable", new GetTable(elementFinder, javascriptLibrary));
-    seleneseMethods.put("getText", new GetText(elementFinder));
+    seleneseMethods.put("getText", new GetText(javascriptLibrary));
     seleneseMethods.put("getTitle", new GetTitle());
     seleneseMethods.put("getValue", new GetValue(elementFinder));
     seleneseMethods.put("getXpathCount", new GetXpathCount());

File: chrome/src/java/org/openqa/selenium/chrome/ChromeBinary.java
Patch:
@@ -212,6 +212,9 @@ protected String getChromeBinaryLocation() throws IOException {
               "Could not locate Chrome.  Set webdriver.chrome.bin");
         }
         for (String path : paths) {
+          if (path == null) {
+            continue;
+          }
           File binary = new File(path);
           if (binary.exists()) {
             chromeBinaryLocation = binary.getCanonicalFile().getAbsoluteFile().toString();

File: common/test/java/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -280,15 +280,13 @@ public void testShouldGetTextFromTableCells() {
     assertFalse(text.contains("some more text"));
   }
   
-  @Ignore //Issue 931
   public void testShouldGetTextWhichIsAValidJSONObject() {
     driver.get(pages.simpleTestPage);
     WebElement element = driver.findElement(By.id("simpleJsonText"));
     assertEquals("{a=\"b\", c=1, d=true}", element.getText());
     //assertEquals("{a=\"b\", \"c\"=d, e=true, f=\\123\\\\g\\\\\"\"\"\\\'}", element.getText());
   }
   
-  @Ignore //Issue 931
   public void testShouldGetTextWhichIsAValidComplexJSONObject() {
     driver.get(pages.simpleTestPage);
     WebElement element = driver.findElement(By.id("complexJsonText"));

File: remote/common/test/java/org/openqa/selenium/remote/JsonToBeanConverterTest.java
Patch:
@@ -288,7 +288,6 @@ public void testShouldBeAbleToReconstituteAProxyPac() throws Exception {
     assertEquals(source.toString(), derived.toString());
   }
 
-  @Ignore(reason = "http://code.google.com/p/selenium/issues/detail?id=931")
   public void testShouldNotParseQuotedJsonObjectsAsActualJsonObjects() throws JSONException {
     JSONObject inner = new JSONObject()
         .put("color", "green")

File: android/server/src/java/org/openqa/selenium/android/JavascriptDomAccessor.java
Patch:
@@ -810,15 +810,15 @@ private void throwExceptionIfFailed(String result) {
     } else if (DISABLED.equals(result)) {
       throw new UnsupportedOperationException("Cannot select disabled element.");
     } else if (UNSUPPORTED.equals(result)) {
-      throw new UnsupportedOperationException("Cannot toogle a radio button.");
+      throw new UnsupportedOperationException("Cannot toggle a radio button.");
     }
   }
   
   private WebElement getFirstElement(List<WebElement> elements) {
     if (elements.size() > 0) {
       return elements.get(0);
     }
-    throw new NoSuchElementException("Element not found with.");
+    throw new NoSuchElementException("Element not found.");
   }
   
   private Boolean getBoolean(Object result) {

File: android/server/src/java/org/openqa/selenium/android/intents/FutureExecutor.java
Patch:
@@ -20,6 +20,7 @@
 import android.util.Log;
 
 import org.openqa.selenium.WebDriverException;
+import org.openqa.selenium.android.Logger;
 
 import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
@@ -42,15 +43,15 @@ public static Object executeFuture(Callable callable, long timeout) {
     try {
       toReturn = future.get(timeout, TimeUnit.MILLISECONDS);
     } catch (InterruptedException e) {
-      Log.e(LOG_TAG, "InterruptedException Future interupted, restauring state. "
+      Logger.log(Log.ERROR, LOG_TAG, "InterruptedException Future interupted, restauring state. "
           + e);
       Thread.currentThread().interrupt();
     } catch (ExecutionException e) {
       executor.shutdown();
       throw new WebDriverException("ExecutionException: Future task shutdown. ",
           e);
     } catch (TimeoutException e) {
-      Log.e(LOG_TAG, "TimeoutException Future: " + e);
+      Logger.log(Log.ERROR, LOG_TAG, "TimeoutException Future: " + e);
     }
     return toReturn;
   }

File: common/src/java/org/openqa/selenium/networkutils/NetworkInterface.java
Patch:
@@ -39,7 +39,8 @@ public boolean isIp4AddressBindingOnly() {
 
   public boolean isLoopBack() {
     // Let's hope there's no such thing as network interfaces with mixed addresses ;)
-    return inetAddresses.iterator().next().isLoopbackAddress();
+    Iterator<INetAddress> iterator = inetAddresses.iterator();
+    return iterator.hasNext() && iterator.next().isLoopbackAddress();
   }
 
 

File: selenium/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -39,7 +39,7 @@ public class SingleTestSuite extends TestCase {
   private static final String SELENIUM = "org.openqa.selenium.SeleneseBackedWebDriver";
 
   public static Test suite() throws Exception {
-    String driver = FIREFOX;
+    String driver = CHROME;
 
     System.setProperty("jna.library.path", "..\\build;build");
     System.setProperty("webdriver.selenium.server.port", String.valueOf(findFreePort()));
@@ -58,7 +58,7 @@ public static Test suite() throws Exception {
         .exclude(ALL)
         .exclude(Ignore.Driver.FIREFOX)
         .outputTestNames()
-        .leaveRunning()
+        //.leaveRunning()
         ;  // Yeah, this look strange :)
 
     if (REMOTE.equals(driver) || REMOTE_IE.equals(driver)) {

File: selenium/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -39,7 +39,7 @@ public class SingleTestSuite extends TestCase {
   private static final String SELENIUM = "org.openqa.selenium.SeleneseBackedWebDriver";
 
   public static Test suite() throws Exception {
-    String driver = SELENIUM;
+    String driver = FIREFOX;
 
     System.setProperty("jna.library.path", "..\\build;build");
     System.setProperty("webdriver.selenium.server.port", String.valueOf(findFreePort()));
@@ -53,8 +53,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("I18nTest")
-        .method("testEnteringHebrewTextFromLeftToRight")
+        .onlyRun("ElementAttributeTest")
+        .method("testShouldReturnValueOfOnClickAttribute")
         .exclude(ALL)
         .exclude(Ignore.Driver.FIREFOX)
         .outputTestNames()

File: remote/server/test/java/org/openqa/selenium/remote/server/DriverFactoryTest.java
Patch:
@@ -26,11 +26,11 @@
 import org.openqa.selenium.remote.DesiredCapabilities;
 
 public class DriverFactoryTest extends TestCase {
-  private DriverFactory factory;
+  private DefaultDriverFactory factory;
 
   @Override
   protected void setUp() throws Exception {
-    factory = new DriverFactory();
+    factory = new DefaultDriverFactory();
   }
 
   public void testShouldBeAbleToRegisterNewDrivers() {

File: common/src/java/org/openqa/selenium/ProcessUtils.java
Patch:
@@ -112,8 +112,8 @@ public static void kill9(Process p) throws IOException, InterruptedException {
 
   private static class ProcessWaiter implements Runnable {
 
-    private InterruptedException t;
-    private Process p;
+    private volatile InterruptedException t;
+    private final Process p;
 
     public InterruptedException getException() {
       return t;

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -327,8 +327,8 @@ public Boolean call() throws Exception {
   public void testShouldAllowTwoInstancesOfFirefoxAtTheSameTimeInDifferentThreads()
       throws InterruptedException {
     class FirefoxRunner implements Runnable {
-      private WebDriver myDriver;
-      private String url;
+      private volatile WebDriver myDriver;
+      private final String url;
 
       public FirefoxRunner(String url) {
         this.url = url;

File: remote/server/test/java/org/openqa/selenium/server/SingleEntryAsyncQueueUnitTest.java
Patch:
@@ -167,7 +167,7 @@ public void testPoisonPollersClearContentWhenThereIsNoPoison() throws Throwable
      * Passes the specified command to command holder
      */
     private class AsyncCommandSender extends TrackableRunnable {
-        private String content;
+        private final String content;
 
         public AsyncCommandSender(String content) {
             this.content = content;

File: remote/server/test/java/org/openqa/selenium/testworker/TrackableRunnable.java
Patch:
@@ -3,9 +3,9 @@
 
 public abstract class TrackableRunnable implements Runnable {
 
-	private ThreadStartedAt threadStartedAt;
-	private Throwable throwable;
-	private Object result;
+	private volatile ThreadStartedAt threadStartedAt;
+	private volatile Throwable throwable;
+	private volatile Object result;
 	
 	public void run() {
 		try {

File: android/server/src/java/org/openqa/selenium/android/JavascriptDomAccessor.java
Patch:
@@ -614,7 +614,7 @@ public boolean isDisplayed(String elementId) {
         isElementStaleJs() +
         "if (isStale == false) {" +
           isDisplayedJs(driver.getCurrentFrame()) +
-          "return isDiaplayed;" +
+          "return isDisplayed;" +
         "}" +
         "return '" + STALE + "';",
         elementId);

File: remote/server/src/java/org/openqa/selenium/server/browserlaunchers/GoogleChromeLauncher.java
Patch:
@@ -189,8 +189,6 @@ private String[] createCommandArray(String url) {
                 "--activate-on-launch",
                 // Don't ask to be the default browser
                 "--no-default-browser-check",
-                // Disable same origin policy so the remote runner can control the application window
-                "--disable-web-security",
                 // Set the user data (i.e. profile) directory.
                 "--user-data-dir=" + userDir,
                 getUntrustedCertificatesFlag(),

File: common/test/java/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.openqa.selenium.Ignore.Driver.ANDROID;
+import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.CHROME_NON_WINDOWS;
 import static org.openqa.selenium.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.Ignore.Driver.IE;
@@ -194,7 +195,7 @@ private void sleepBecauseWindowsTakeTimeToOpen() {
 
   @NeedsFreshDriver
   @NoDriverAfterTest
-  @Ignore(SELENESE)
+  @Ignore({SELENESE, CHROME})
   public void testClosingOnlyWindowShouldNotCauseTheBrowserToHang() {
     driver.get(pages.xhtmlTestPage);
     driver.close();

File: chrome/src/java/org/openqa/selenium/chrome/ChromeCommandExecutor.java
Patch:
@@ -148,7 +148,7 @@ private Response createCannedNewSessionResponse() {
     // This is dumb, but temporary until we add sessions to the ChromeDriver
     DesiredCapabilities capabilities = DesiredCapabilities.chrome();
     capabilities.setJavascriptEnabled(true);
-    Map capabilitiesMap;
+    Map<?, ?> capabilitiesMap;
     try {
       capabilitiesMap = new JsonToBeanConverter()
           .convert(Map.class, new BeanToJsonConverter().convert(capabilities));

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -237,8 +237,8 @@ protected Response execute(String driverCommand, Map<String, ?> parameters) {
     }
 
     Object rawResponse = response.getValue();
-    if (rawResponse instanceof Map) {
-      Map map = (Map) rawResponse;
+    if (rawResponse instanceof Map<?, ?>) {
+      Map<?, ?> map = (Map<?, ?>) rawResponse;
       if (map.containsKey("__webdriverType")) {
         // Looks like have an alert. construct it
         currentAlert = new FirefoxAlert((String) map.get("text"));

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -301,7 +301,7 @@ public void testShouldThrowWhenAlertNotHandled() {
       alert.click();
       TestWaitingUtility.startSleep();
       while (TestWaitingUtility.shouldSleep()) {
-        String title = firefox.getTitle();
+        firefox.getTitle();
         TestWaitingUtility.sleep();
       }
       fail("Should have thrown an UnhandledAlertException");

File: firefox/test/java/org/openqa/selenium/firefox/SaveScreenshotTest.java
Patch:
@@ -31,6 +31,7 @@ public class SaveScreenshotTest extends AbstractDriverTestCase {
     /**
      * Test the deprecated version of screenshot capturing.
      */
+    @SuppressWarnings("deprecation")
     public void testDeprecatedSaveScreenshot() throws IOException {
         File tempFile = File.createTempFile("formPage", ".png");
         assertThat(tempFile.length(), is(0L));

File: common/test/java/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -197,7 +197,8 @@ public void testShouldThrowFrameNotFoundExceptionLookingUpSubFramesWithSuperFram
   }
 
   @NoDriverAfterTest
-  @Ignore({IPHONE, CHROME})
+  @Ignore({FIREFOX, IPHONE, CHROME})
+  //Firefox: Issue 882
   public void testClosingTheFinalBrowserWindowShouldNotCauseAnExceptionToBeThrown() {
     driver.get(pages.simpleTestPage);
     try {

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTestSuite.java
Patch:
@@ -51,7 +51,6 @@ public static Test suite() throws Exception {
         .addSourceDir("common")
         .usingDriver(FirefoxDriver.class)
         .exclude(FIREFOX)
-        .outputTestNames()
         .keepDriverInstance()
         .includeJavascriptTests()
         .create();

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTestSuite.java
Patch:
@@ -51,6 +51,7 @@ public static Test suite() throws Exception {
         .addSourceDir("common")
         .usingDriver(FirefoxDriver.class)
         .exclude(FIREFOX)
+        .outputTestNames()
         .keepDriverInstance()
         .includeJavascriptTests()
         .create();

File: common/test/java/org/openqa/selenium/Pages.java
Patch:
@@ -20,6 +20,7 @@
 import org.openqa.selenium.environment.webserver.AppServer;
 
 public class Pages {
+  public String alertsPage;
   public String simpleTestPage;
   public String simpleXmlDocument;
   public String xhtmlTestPage;
@@ -48,6 +49,7 @@ public class Pages {
   public String deletingFrame;
 
   public Pages(AppServer appServer) {
+    alertsPage = appServer.whereIs("alerts.html");
     simpleTestPage = appServer.whereIs("simpleTest.html");
     simpleXmlDocument = appServer.whereIs("simple.xml");
     xhtmlTestPage = appServer.whereIs("xhtmlTest.html");
@@ -73,6 +75,6 @@ public Pages(AppServer appServer) {
     dynamicPage = appServer.whereIs("dynamic.html");
     slowIframes = appServer.whereIs("slow_loading_iframes.html");
     tables = appServer.whereIs("tables.html");
-	deletingFrame = appServer.whereIs("deletingFrame.htm");
+	  deletingFrame = appServer.whereIs("deletingFrame.htm");
   }
 }

File: remote/client/src/java/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -114,6 +114,9 @@ public HttpCommandExecutor(URL addressOfRemoteServer) {
         .put(GET_CURRENT_WINDOW_HANDLE, get("/session/:sessionId/window_handle"))
         .put(GET_WINDOW_HANDLES, get("/session/:sessionId/window_handles"))
         .put(GET, post("/session/:sessionId/url"))
+        // This is used for the FirefoxDriver only to dismiss an alert.
+        // The Alert API is still experimental and should not be used.
+        .put(DISMISS_ALERT, post("/session/:sessionId/dismiss_alert"))
         .put(GO_FORWARD, post("/session/:sessionId/forward"))
         .put(GO_BACK, post("/session/:sessionId/back"))
         .put(REFRESH, post("/session/:sessionId/refresh"))

File: common/test/java/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -426,6 +426,7 @@ public void testShouldBeAbleToFindAnElementsByCssSelector() {
     driver.findElements(By.cssSelector("p"));
   }
 
+  @Ignore(SELENESE)
   public void testFindingByXPathShouldNotIncludeParentElementIfSameTagType() {
     driver.get(pages.xhtmlTestPage);
     WebElement parent = driver.findElement(By.id("my_span"));

File: common/src/java/org/openqa/selenium/WebElement.java
Patch:
@@ -49,9 +49,6 @@ public interface WebElement extends SearchContext {
    * to the remote server. If this causes the current page to change, then this method will block
    * until the new page is loaded.
    * 
-   * This is a special method which can be used even if a form doesn't have a submit button, or 
-   * if the submit button is disabled.
-   *
    * @throws NoSuchElementException If the given element is not within a form
    */
   void submit();

File: common/test/java/org/openqa/selenium/XPathElementFindingTest.java
Patch:
@@ -58,7 +58,7 @@ public void testShouldFindElementsByXPath() {
     driver.get(pages.xhtmlTestPage);
     List<WebElement> divs = driver.findElements(By.xpath("//div"));
 
-    assertThat(divs.size(), equalTo(8));
+    assertThat(divs.size(), equalTo(10));
   }
 
   @Ignore(SELENESE)

File: selenium/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -39,7 +39,7 @@ public class SingleTestSuite extends TestCase {
   private static final String SELENIUM = "org.openqa.selenium.SeleneseBackedWebDriver";
 
   public static Test suite() throws Exception {
-    String driver = SELENIUM;
+    String driver = IE;
 
     System.setProperty("webdriver.development", "true");
     System.setProperty("jna.library.path", "..\\build;build");
@@ -55,9 +55,9 @@ public static Test suite() throws Exception {
         .keepDriverInstance()
         .includeJavascriptTests()
         .onlyRun("ElementFindingTest")
-//        .method("testShouldBeAbleToFindAnElementByCssSelector")
+        .method("testFindingByXPathShouldNotIncludeParentElementIfSameTagType")
         .exclude(ALL)
-        .exclude(Ignore.Driver.SELENESE)
+        .exclude(Ignore.Driver.IE)
         .outputTestNames()
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: common/src/java/org/openqa/selenium/By.java
Patch:
@@ -121,7 +121,7 @@ public WebElement findElement(SearchContext context) {
         
         @Override
         public String toString() {
-          return "By.linkText: " + linkText;
+          return "By.partialLinkText: " + linkText;
         }
       };
     }

File: common/test/java/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -68,7 +68,6 @@ public void testShouldAutomaticallyUseTheFirstFrameOnAPage() {
     assertThat(pageNumber.getText().trim(), equalTo("1"));
   }
 
-  @Ignore(FIREFOX)
   public void testShouldFocusOnTheReplacementWhenAFrameFollowsALinkToA_TopTargettedPage() throws Exception {
     driver.get(pages.framesetPage);
 

File: common/test/java/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -271,7 +271,7 @@ public void testShouldBeAbleToGetTheLocationOfAnElement() {
     assertTrue(point.getY() > 1);
   }
 
-  @Ignore({IE, CHROME, SELENESE, IPHONE, FIREFOX})
+  @Ignore({IE, CHROME, SELENESE, IPHONE})
   @JavascriptEnabled
   public void testShouldBeAbleToClickALinkThatClosesAWindow() throws Exception {
     driver.get(pages.javascriptPage);

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxBinary.java
Patch:
@@ -65,6 +65,7 @@ public void startProfile(FirefoxProfile profile, File profileDir, String... comm
     String profileAbsPath = profileDir.getAbsolutePath();
     setEnvironmentProperty("XRE_PROFILE_PATH", profileAbsPath);
     setEnvironmentProperty("MOZ_NO_REMOTE", "1");
+    setEnvironmentProperty("MOZ_CRASHREPORTER_DISABLE", "1"); // Disable Breakpad
 
     if (isOnLinux()
         && (profile.enableNativeEvents() || profile.alwaysLoadNoFocusLib())) {

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTestSuite.java
Patch:
@@ -53,6 +53,7 @@ public static Test suite() throws Exception {
         .exclude(FIREFOX)
         .keepDriverInstance()
         .includeJavascriptTests()
+        .outputTestNames()
         .create();
   }
 

File: common/test/java/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -68,6 +68,7 @@ public void testShouldAutomaticallyUseTheFirstFrameOnAPage() {
     assertThat(pageNumber.getText().trim(), equalTo("1"));
   }
 
+  @Ignore(FIREFOX)
   public void testShouldFocusOnTheReplacementWhenAFrameFollowsALinkToA_TopTargettedPage() throws Exception {
     driver.get(pages.framesetPage);
 

File: common/test/java/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -271,7 +271,7 @@ public void testShouldBeAbleToGetTheLocationOfAnElement() {
     assertTrue(point.getY() > 1);
   }
 
-  @Ignore({IE, CHROME, SELENESE, IPHONE})
+  @Ignore({IE, CHROME, SELENESE, IPHONE, FIREFOX})
   @JavascriptEnabled
   public void testShouldBeAbleToClickALinkThatClosesAWindow() throws Exception {
     driver.get(pages.javascriptPage);

File: common/test/java/org/openqa/selenium/Pages.java
Patch:
@@ -21,6 +21,7 @@
 
 public class Pages {
   public String simpleTestPage;
+  public String simpleXmlDocument;
   public String xhtmlTestPage;
   public String formPage;
   public String metaRedirectPage;
@@ -48,6 +49,7 @@ public class Pages {
 
   public Pages(AppServer appServer) {
     simpleTestPage = appServer.whereIs("simpleTest.html");
+    simpleXmlDocument = appServer.whereIs("simple.xml");
     xhtmlTestPage = appServer.whereIs("xhtmlTest.html");
     formPage = appServer.whereIs("formPage.html");
     metaRedirectPage = appServer.whereIs("meta-redirect.html");

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -290,6 +290,7 @@ public void updateUserPrefs(File userPrefs) {
     prefs.put("extensions.update.enabled", "false");
     prefs.put("extensions.update.notifyUser", "false");
     prefs.put("network.manage-offline-status", "false");
+    prefs.put("network.http.max-connections-per-server", "10");
     prefs.put("security.fileuri.origin_policy", "3");
     prefs.put("security.fileuri.strict_origin_policy", "false");
     prefs.put("security.warn_entering_secure", "false");

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/DeleteSession.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.openqa.selenium.remote.server.DriverSessions;
 import org.openqa.selenium.remote.server.rest.ResultType;
+import org.openqa.selenium.server.log.LoggingManager;
 
 public class DeleteSession extends WebDriverHandler {
 
@@ -33,8 +34,8 @@ public DeleteSession(DriverSessions sessions) {
 
   public ResultType call() throws Exception {
     getDriver().quit();
+    LoggingManager.perSessionLogHandler().clearSessionLogRecords(getRealSessionId().toString());
     sessions.deleteSession(getRealSessionId());
-
     return ResultType.SUCCESS;
   }
   

File: remote/server/src/java/org/openqa/selenium/remote/server/DefaultDriverSessions.java
Patch:
@@ -76,7 +76,7 @@ private void registerDriver(Capabilities caps, String className) {
   }
 
   public SessionId newSession(Capabilities desiredCapabilities) throws Exception {
-    Session session = new Session(factory, desiredCapabilities);
+    Session session = Session.createSession(factory, desiredCapabilities);
     
     SessionId sessionId = new SessionId(String.valueOf(System.currentTimeMillis()));
     sessionIdToDriver.put(sessionId, session);

File: android/server/src/java/org/openqa/selenium/android/server/handler/DragElement.java
Patch:
@@ -26,8 +26,8 @@
 
 public class DragElement extends AndroidWebElementHandler implements JsonParametersAware {
 
-  private int x;
-  private int y;
+  private volatile int x;
+  private volatile int y;
 
   public DragElement(DriverSessions sessions) {
     super(sessions);

File: android/server/src/java/org/openqa/selenium/android/server/handler/GetCssProperty.java
Patch:
@@ -23,8 +23,8 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetCssProperty extends AndroidWebElementHandler {
-  private String propertyName;
-  private Response response;
+  private volatile String propertyName;
+  private volatile Response response;
 
   public GetCssProperty(DriverSessions sessions) {
     super(sessions);

File: android/server/src/java/org/openqa/selenium/android/server/handler/GetElementDisplayed.java
Patch:
@@ -23,7 +23,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetElementDisplayed extends AndroidWebElementHandler {
-  private Response response;
+  private volatile Response response;
 
   public GetElementDisplayed(DriverSessions sessions) {
     super(sessions);

File: android/server/src/java/org/openqa/selenium/android/server/handler/GetElementLocation.java
Patch:
@@ -23,7 +23,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetElementLocation extends AndroidWebElementHandler {
-  private Response response;
+  private volatile Response response;
 
   public GetElementLocation(DriverSessions sessions) {
     super(sessions);

File: android/server/src/java/org/openqa/selenium/android/server/handler/GetElementSize.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Map;
 
 public class GetElementSize extends AndroidWebElementHandler {
-  private Response response;
+  private volatile Response response;
 
   public GetElementSize(DriverSessions sessions) {
     super(sessions);

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTestSuite.java
Patch:
@@ -51,6 +51,7 @@ public static Test suite() throws Exception {
         .addSourceDir("common")
         .usingDriver(FirefoxDriver.class)
         .exclude(FIREFOX)
+        .method("testShouldReturnTitleOfPageIfSet")
         .keepDriverInstance()
         .includeJavascriptTests()
         .create();

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/CookieHandler.java
Patch:
@@ -25,6 +25,7 @@
 
 import java.util.Date;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.TimeUnit;
 
 public abstract class CookieHandler extends WebDriverHandler implements JsonParametersAware {
@@ -40,8 +41,8 @@ public void setJsonParameters(Map<String, Object> allParameters) throws Exceptio
     if (allParameters == null) {
       return;
     }
-
-    rawCookie = (Map<String, Object>) allParameters.get("cookie");
+    rawCookie =
+        new ConcurrentHashMap<String, Object>((Map<String, Object>) allParameters.get("cookie"));
   }
 
   protected Cookie createCookie() {

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/GetAppCache.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetAppCache extends WebDriverHandler {
-  private Response response;
+  private volatile Response response;
   
   public GetAppCache(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/GetAppCacheStatus.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetAppCacheStatus extends WebDriverHandler {
-  private Response response;
+  private volatile Response response;
   
   public GetAppCacheStatus(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/GetLocalStorageKeys.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Set;
 
 public class GetLocalStorageKeys extends WebDriverHandler {
-  private Response response;
+  private volatile Response response;
   
   public GetLocalStorageKeys(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/GetLocalStorageSize.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetLocalStorageSize extends WebDriverHandler {
-  private Response response;
+  private volatile Response response;
   
   public GetLocalStorageSize(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/GetLocationContext.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetLocationContext extends WebDriverHandler {
-  private Response response;
+  private volatile Response response;
   
   public GetLocationContext(DriverSessions sessions) {
     super(sessions);  

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/GetSessionStorageItem.java
Patch:
@@ -27,8 +27,8 @@
 import java.util.Map;
 
 public class GetSessionStorageItem extends WebDriverHandler implements JsonParametersAware {
-  private String key;
-  private Response response;
+  private volatile String key;
+  private volatile Response response;
 
   public GetSessionStorageItem(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/GetSessionStorageKeys.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Set;
 
 public class GetSessionStorageKeys extends WebDriverHandler {
-  private Response response;
+  private volatile Response response;
   
   public GetSessionStorageKeys(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/GetSessionStorageSize.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetSessionStorageSize extends WebDriverHandler {
-  private Response response;
+  private volatile Response response;
   
   public GetSessionStorageSize(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/IsBrowserOnline.java
Patch:
@@ -24,7 +24,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class IsBrowserOnline extends WebDriverHandler {
-  private Response response;
+  private volatile Response response;
   
   public IsBrowserOnline(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/RemoveLocalStorageItem.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 
 public class RemoveLocalStorageItem extends WebDriverHandler implements JsonParametersAware {
-  private String key;
+  private volatile String key;
   
   public RemoveLocalStorageItem(DriverSessions session) {
     super(session);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/RemoveSessionStorageItem.java
Patch:
@@ -26,7 +26,7 @@
 import java.util.Map;
 
 public class RemoveSessionStorageItem extends WebDriverHandler implements JsonParametersAware {
-  private String key;
+  private volatile String key;
   
   public RemoveSessionStorageItem(DriverSessions session) {
     super(session);

File: remote/server/src/java/org/openqa/selenium/remote/server/renderer/JsonResult.java
Patch:
@@ -27,7 +27,7 @@
 
 public class JsonResult implements Renderer {
 
-  protected String propertyName;
+  protected final String propertyName;
 
   public JsonResult(String propertyName) {
     if (propertyName.startsWith(":")) {

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/Click.java
Patch:
@@ -27,7 +27,6 @@ public class Click extends SeleneseCommand<Void> {
   public Click(AlertOverride alertOverride, ElementFinder elementFinder) {
     this.alertOverride = alertOverride;
     finder = elementFinder;
-
   }
 
   @Override

File: remote/common/src/java/org/openqa/selenium/remote/Response.java
Patch:
@@ -19,9 +19,9 @@
 
 public class Response {
 
-  private Object value;
-  private String sessionId;
-  private int status;
+  private volatile Object value;
+  private volatile String sessionId;
+  private volatile int status;
 
   public Response() {
   }

File: remote/server/src/java/org/openqa/selenium/remote/server/KnownElements.java
Patch:
@@ -29,7 +29,7 @@
 
 public class KnownElements {
 
-  private Map<String, WebElement> elements = new HashMap<String, WebElement>();
+  private final Map<String, WebElement> elements = new HashMap<String, WebElement>();
   private int nextId;
 
   public String add(WebElement element) {

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/AddConfig.java
Patch:
@@ -30,8 +30,8 @@
 
 public class AddConfig implements Handler, JsonParametersAware {
   private final DriverSessions allSessions;
-  private Capabilities desiredCapabilities;
-  private String className;
+  private volatile Capabilities desiredCapabilities;
+  private volatile String className;
 
   public AddConfig(DriverSessions allSessions) {
     this.allSessions = allSessions;

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/CaptureScreenshot.java
Patch:
@@ -27,7 +27,7 @@
 
 public class CaptureScreenshot extends WebDriverHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public CaptureScreenshot(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/ChangeUrl.java
Patch:
@@ -25,7 +25,7 @@
 
 public class ChangeUrl extends WebDriverHandler implements JsonParametersAware {
 
-  private String url;
+  private volatile String url;
 
   public ChangeUrl(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/ClearElement.java
Patch:
@@ -22,7 +22,7 @@
 
 public class ClearElement extends WebDriverHandler {
 
-  private String elementId;
+  private volatile String elementId;
 
   public ClearElement(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/CookieHandler.java
Patch:
@@ -29,7 +29,7 @@
 
 public abstract class CookieHandler extends WebDriverHandler implements JsonParametersAware {
 
-  private Map<String, Object> rawCookie;
+  private volatile Map<String, Object> rawCookie;
 
   public CookieHandler(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/DeleteNamedCookie.java
Patch:
@@ -24,7 +24,7 @@
 
 public class DeleteNamedCookie extends WebDriverHandler {
 
-  private String name;
+  private volatile String name;
 
   public DeleteNamedCookie(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/DescribeElement.java
Patch:
@@ -23,7 +23,7 @@
 
 public class DescribeElement extends WebElementHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public DescribeElement(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/DragElement.java
Patch:
@@ -28,8 +28,8 @@
 
 public class DragElement extends WebElementHandler implements JsonParametersAware {
 
-  private int x;
-  private int y;
+  private volatile int x;
+  private volatile int y;
 
   public DragElement(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/ElementEquality.java
Patch:
@@ -25,8 +25,8 @@
 import org.openqa.selenium.internal.WrapsElement;
 
 public class ElementEquality extends WebElementHandler {
-  private String otherId;
-  private Response response;
+  private volatile String otherId;
+  private volatile Response response;
 
   public ElementEquality(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/ExecuteScript.java
Patch:
@@ -33,9 +33,9 @@
 import com.google.common.collect.Lists;
 
 public class ExecuteScript extends WebDriverHandler implements JsonParametersAware {
-  private Response response;
-  private String script;
-  private List<Object> args = new ArrayList<Object>();
+  private volatile Response response;
+  private volatile String script;
+  private volatile List<Object> args = new ArrayList<Object>();
 
   public ExecuteScript(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/FindActiveElement.java
Patch:
@@ -25,7 +25,7 @@
 import com.google.common.collect.ImmutableMap;
 
 public class FindActiveElement extends WebDriverHandler {
-    private Response response;
+    private volatile Response response;
 
     public FindActiveElement(DriverSessions sessions) {
       super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/FindChildElement.java
Patch:
@@ -31,8 +31,8 @@
 import java.util.Map;
 
 public class FindChildElement extends WebElementHandler implements JsonParametersAware {
-  private By by;
-  private Response response;
+  private volatile By by;
+  private volatile Response response;
 
   public FindChildElement(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/FindChildElements.java
Patch:
@@ -36,8 +36,8 @@
 import java.util.Set;
 
 public class FindChildElements extends WebElementHandler implements JsonParametersAware {
-  private By by;
-  private Response response;
+  private volatile By by;
+  private volatile Response response;
 
   public FindChildElements(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/FindElement.java
Patch:
@@ -29,8 +29,8 @@
 import java.util.Map;
 
 public class FindElement extends WebDriverHandler implements JsonParametersAware {
-  private By by;
-  private Response response;
+  private volatile By by;
+  private volatile Response response;
 
   public FindElement(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/FindElements.java
Patch:
@@ -37,8 +37,8 @@
 
 public class FindElements extends WebDriverHandler implements JsonParametersAware {
 
-  private By by;
-  private Response response;
+  private volatile By by;
+  private volatile Response response;
 
   public FindElements(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetAllCookies.java
Patch:
@@ -28,7 +28,7 @@
 
 public class GetAllCookies extends WebDriverHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetAllCookies(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetAllWindowHandles.java
Patch:
@@ -22,7 +22,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetAllWindowHandles extends WebDriverHandler {
-  private Response response;
+  private volatile Response response;
 
   public GetAllWindowHandles(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetCssProperty.java
Patch:
@@ -23,8 +23,8 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetCssProperty extends WebElementHandler {
-  private String propertyName;
-  private Response response;
+  private volatile String propertyName;
+  private volatile Response response;
 
   public GetCssProperty(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetCurrentUrl.java
Patch:
@@ -23,7 +23,7 @@
 
 public class GetCurrentUrl extends WebDriverHandler {
 
-  private Response response;
+  private volatile  Response response;
 
   public GetCurrentUrl(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetCurrentWindowHandle.java
Patch:
@@ -22,7 +22,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class GetCurrentWindowHandle extends WebDriverHandler {
-  private Response response;
+  private volatile Response response;
 
   public GetCurrentWindowHandle(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetElementAttribute.java
Patch:
@@ -23,8 +23,8 @@
 
 public class GetElementAttribute extends WebElementHandler {
 
-  private String name;
-  private Response response;
+  private volatile String name;
+  private volatile Response response;
 
   public GetElementAttribute(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetElementDisplayed.java
Patch:
@@ -24,7 +24,7 @@
 
 public class GetElementDisplayed extends WebElementHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetElementDisplayed(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetElementEnabled.java
Patch:
@@ -25,7 +25,7 @@
 
 public class GetElementEnabled extends WebElementHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetElementEnabled(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetElementLocation.java
Patch:
@@ -24,7 +24,7 @@
 
 public class GetElementLocation extends WebElementHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetElementLocation(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetElementSelected.java
Patch:
@@ -23,7 +23,7 @@
 
 public class GetElementSelected extends WebElementHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetElementSelected(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetElementSize.java
Patch:
@@ -24,7 +24,7 @@
 
 public class GetElementSize extends WebElementHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetElementSize(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetElementText.java
Patch:
@@ -23,7 +23,7 @@
 
 public class GetElementText extends WebElementHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetElementText(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetElementValue.java
Patch:
@@ -23,7 +23,7 @@
 
 public class GetElementValue extends WebElementHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetElementValue(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetMouseSpeed.java
Patch:
@@ -23,7 +23,7 @@
 
 public class GetMouseSpeed extends WebDriverHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetMouseSpeed(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetPageSource.java
Patch:
@@ -23,7 +23,7 @@
 
 public class GetPageSource extends WebDriverHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetPageSource(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetSessionCapabilities.java
Patch:
@@ -26,7 +26,7 @@
 
 public class GetSessionCapabilities extends WebDriverHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetSessionCapabilities(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetTagName.java
Patch:
@@ -23,7 +23,7 @@
 
 public class GetTagName extends WebElementHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetTagName(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/GetTitle.java
Patch:
@@ -23,7 +23,7 @@
 
 public class GetTitle extends WebDriverHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public GetTitle(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/ImplicitlyWait.java
Patch:
@@ -26,7 +26,7 @@
 
 public class ImplicitlyWait extends WebDriverHandler implements JsonParametersAware {
 
-  private long millis;
+  private volatile long millis;
 
   public ImplicitlyWait(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/NewSession.java
Patch:
@@ -30,9 +30,9 @@
 import java.util.Map;
 
 public class NewSession implements Handler, JsonParametersAware {
-  private DriverSessions allSessions;
-  private Capabilities desiredCapabilities;
-  private SessionId sessionId;
+  private volatile DriverSessions allSessions;
+  private volatile Capabilities desiredCapabilities;
+  private volatile SessionId sessionId;
 
   public NewSession(DriverSessions allSession) {
     this.allSessions = allSession;

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/SendKeys.java
Patch:
@@ -27,7 +27,7 @@
 
 public class SendKeys extends WebElementHandler implements JsonParametersAware {
 
-  private List<CharSequence> keys = new ArrayList<CharSequence>();
+  private final List<CharSequence> keys = new ArrayList<CharSequence>();
 
   public SendKeys(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/SetMouseSpeed.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 public class SetMouseSpeed extends WebDriverHandler implements JsonParametersAware {
-  private Speed speed;
+  private volatile Speed speed;
 
   public SetMouseSpeed(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/SwitchToFrame.java
Patch:
@@ -25,7 +25,7 @@
 
 public class SwitchToFrame extends WebDriverHandler implements JsonParametersAware {
 
-  private Object id;
+  private volatile Object id;
 
   public SwitchToFrame(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/SwitchToWindow.java
Patch:
@@ -25,7 +25,7 @@
 
 public class SwitchToWindow extends WebDriverHandler implements JsonParametersAware {
 
-  private String name;
+  private volatile String name;
 
   public SwitchToWindow(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/ToggleElement.java
Patch:
@@ -23,7 +23,7 @@
 
 public class ToggleElement extends WebElementHandler {
 
-  private Response response;
+  private volatile Response response;
 
   public ToggleElement(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/WebDriverHandler.java
Patch:
@@ -34,7 +34,7 @@
 public abstract class WebDriverHandler implements Handler, Callable<ResultType> {
 
   protected final DriverSessions sessions;
-  protected SessionId sessionId;
+  protected volatile SessionId sessionId;
 
   public WebDriverHandler(DriverSessions sessions) {
     this.sessions = sessions;

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/WebElementHandler.java
Patch:
@@ -4,7 +4,7 @@
 import org.openqa.selenium.remote.server.DriverSessions;
 
 public abstract class WebElementHandler extends WebDriverHandler {
-  private String elementId;
+  private volatile String elementId;
   
   public WebElementHandler(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/SetLocalStorageItem.java
Patch:
@@ -26,8 +26,8 @@
 import org.openqa.selenium.remote.server.handler.WebDriverHandler;
 
 public class SetLocalStorageItem extends WebDriverHandler implements JsonParametersAware {
-  private String key;
-  private String value;
+  private volatile String key;
+  private volatile String value;
 
   public SetLocalStorageItem(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/SetLocationContext.java
Patch:
@@ -27,7 +27,7 @@
 import org.openqa.selenium.remote.server.rest.ResultType;
 
 public class SetLocationContext extends WebDriverHandler implements JsonParametersAware {
-  private Location location;
+  private volatile Location location;
   
   public SetLocationContext(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/html5/SetSessionStorageItem.java
Patch:
@@ -26,8 +26,8 @@
 import org.openqa.selenium.remote.server.handler.WebDriverHandler;
 
 public class SetSessionStorageItem extends WebDriverHandler implements JsonParametersAware {
-  private String key;
-  private String value;
+  private volatile String key;
+  private volatile String value;
 
   public SetSessionStorageItem(DriverSessions sessions) {
     super(sessions);

File: remote/server/src/java/org/openqa/selenium/remote/server/rest/UrlMapper.java
Patch:
@@ -27,10 +27,10 @@
 
 public class UrlMapper {
 
-  private Map<ResultType, Renderer> globals = new LinkedHashMap<ResultType, Renderer>();
-  private Set<ResultConfig> configs = new LinkedHashSet<ResultConfig>();
+  private final Map<ResultType, Renderer> globals = new LinkedHashMap<ResultType, Renderer>();
+  private final Set<ResultConfig> configs = new LinkedHashSet<ResultConfig>();
   private final DriverSessions sessions;
-  private Trace logger;
+  private final Trace logger;
 
   public UrlMapper(DriverSessions sessions, Trace logger) {
     this.sessions = sessions;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/AddLocationStrategy.java
Patch:
@@ -22,7 +22,7 @@
 import org.openqa.selenium.WebElement;
 
 public class AddLocationStrategy extends SeleneseCommand<Void> {
-  private ElementFinder elementFinder;
+  private final ElementFinder elementFinder;
 
   public AddLocationStrategy(ElementFinder elementFinder) {
     this.elementFinder = elementFinder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/AddSelection.java
Patch:
@@ -22,8 +22,8 @@
 import org.openqa.selenium.WebElement;
 
 public class AddSelection extends SeleneseCommand<Void> {
-  private ElementFinder finder;
-  private SeleniumSelect select;
+  private final ElementFinder finder;
+  private final SeleniumSelect select;
 
   public AddSelection(ElementFinder elementFinder, SeleniumSelect select) {
     this.finder = elementFinder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/AssignId.java
Patch:
@@ -21,7 +21,7 @@
 
 public class AssignId extends SeleneseCommand<Void> {
   private final JavascriptLibrary js;
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public AssignId(JavascriptLibrary js, ElementFinder finder) {
     this.js = js;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/CompoundMutator.java
Patch:
@@ -33,7 +33,7 @@ public class CompoundMutator implements ScriptMutator {
       "/scripts/selenium/";
 
   // The ordering of mutators matters
-  private List<ScriptMutator> mutators = Lists.newArrayList();
+  private final List<ScriptMutator> mutators = Lists.newArrayList();
 
   public CompoundMutator(String baseUrl) {
     addMutator(new VariableDeclaration("selenium", "var selenium = {};"));

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/DoubleClick.java
Patch:
@@ -21,7 +21,7 @@
 import org.openqa.selenium.WebElement;
 
 public class DoubleClick extends SeleneseCommand<Void> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public DoubleClick(ElementFinder finder) {
 

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/DragAndDrop.java
Patch:
@@ -21,7 +21,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class DragAndDrop extends SeleneseCommand<Void> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public DragAndDrop(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/DragAndDropToObject.java
Patch:
@@ -21,7 +21,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class DragAndDropToObject extends SeleneseCommand<Void> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public DragAndDropToObject(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GetAttribute.java
Patch:
@@ -21,7 +21,7 @@
 import org.openqa.selenium.WebElement;
 
 public class GetAttribute extends SeleneseCommand<String> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public GetAttribute(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GetElementHeight.java
Patch:
@@ -23,7 +23,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class GetElementHeight extends SeleneseCommand<Number> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public GetElementHeight(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GetElementIndex.java
Patch:
@@ -21,8 +21,8 @@
 import org.openqa.selenium.WebElement;
 
 public class GetElementIndex extends SeleneseCommand<Number> {
-  private ElementFinder finder;
-  private JavascriptLibrary js;
+  private final ElementFinder finder;
+  private final JavascriptLibrary js;
 
   public GetElementIndex(ElementFinder finder, JavascriptLibrary js) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GetElementPositionLeft.java
Patch:
@@ -23,7 +23,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class GetElementPositionLeft extends SeleneseCommand<Number> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public GetElementPositionLeft(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GetElementPositionTop.java
Patch:
@@ -23,7 +23,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class GetElementPositionTop extends SeleneseCommand<Number> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public GetElementPositionTop(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GetElementWidth.java
Patch:
@@ -23,7 +23,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class GetElementWidth extends SeleneseCommand<Number> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public GetElementWidth(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GetSelectOptions.java
Patch:
@@ -24,7 +24,7 @@
 import static org.openqa.selenium.internal.seleniumemulation.SeleniumSelect.Property.TEXT;
 
 public class GetSelectOptions extends SeleneseCommand<String[]> {
-  private SeleniumSelect select;
+  private final SeleniumSelect select;
 
   public GetSelectOptions(SeleniumSelect select) {
     this.select = select;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GetText.java
Patch:
@@ -20,7 +20,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class GetText extends SeleneseCommand<String> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public GetText(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GetValue.java
Patch:
@@ -21,7 +21,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class GetValue extends SeleneseCommand<String> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public GetValue(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/Highlight.java
Patch:
@@ -20,8 +20,8 @@
 import org.openqa.selenium.WebDriver;
 
 public class Highlight extends SeleneseCommand<String> {
-  private JavascriptLibrary js;
-  private ElementFinder finder;
+  private final JavascriptLibrary js;
+  private final ElementFinder finder;
 
   public Highlight(ElementFinder finder, JavascriptLibrary js) {
     this.js = js;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/IsChecked.java
Patch:
@@ -20,7 +20,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class IsChecked extends SeleneseCommand<Boolean> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public IsChecked(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/IsEditable.java
Patch:
@@ -21,7 +21,7 @@
 import org.openqa.selenium.WebElement;
 
 public class IsEditable extends SeleneseCommand<Boolean> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public IsEditable(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/IsElementPresent.java
Patch:
@@ -21,7 +21,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class IsElementPresent extends SeleneseCommand<Boolean> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public IsElementPresent(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/IsOrdered.java
Patch:
@@ -21,8 +21,8 @@
 import org.openqa.selenium.WebElement;
 
 public class IsOrdered extends SeleneseCommand<Boolean> {
-  private ElementFinder finder;
-  private JavascriptLibrary js;
+  private final ElementFinder finder;
+  private final JavascriptLibrary js;
 
   public IsOrdered(ElementFinder finder, JavascriptLibrary js) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/IsSomethingSelected.java
Patch:
@@ -24,7 +24,7 @@
 import static org.openqa.selenium.internal.seleniumemulation.SeleniumSelect.Property.VALUE;
 
 public class IsSomethingSelected extends SeleneseCommand<Boolean> {
-  private SeleniumSelect select;
+  private final SeleniumSelect select;
 
   public IsSomethingSelected(SeleniumSelect select) {
     this.select = select;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/IsTextPresent.java
Patch:
@@ -30,7 +30,7 @@
 public class IsTextPresent extends SeleneseCommand<Boolean> {
   private static final Pattern TEXT_MATCHING_STRATEGY_AND_VALUE_PATTERN = Pattern.compile("^(\\p{Alpha}+):(.*)");
   private final Map<String, TextMatchingStrategy> textMatchingStrategies = Maps.newHashMap();
-  private JavascriptLibrary js;
+  private final JavascriptLibrary js;
 
   public IsTextPresent(JavascriptLibrary js) {
     this.js = js;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/IsVisible.java
Patch:
@@ -21,7 +21,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class IsVisible extends SeleneseCommand<Boolean> {
-  private ElementFinder finder;
+  private final ElementFinder finder;
 
   public IsVisible(ElementFinder finder) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/KeyEvent.java
Patch:
@@ -23,7 +23,7 @@ public class KeyEvent extends SeleneseCommand<Void> {
   private final ElementFinder elementFinder;
   private final JavascriptLibrary js;
   private final KeyState state;
-  private String eventName;
+  private final String eventName;
 
   public KeyEvent(ElementFinder elementFinder, JavascriptLibrary js, KeyState state, String eventName) {
     this.elementFinder = elementFinder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/MouseEvent.java
Patch:
@@ -23,7 +23,7 @@
 public class MouseEvent extends SeleneseCommand<Void> {
   private final ElementFinder finder;
   private final JavascriptLibrary js;
-  private String type;
+  private final String type;
 
   public MouseEvent(ElementFinder finder, JavascriptLibrary js, String type) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/MouseEventAt.java
Patch:
@@ -23,7 +23,7 @@
 public class MouseEventAt extends SeleneseCommand<Void> {
   private final ElementFinder finder;
   private final JavascriptLibrary js;
-  private String type;
+  private final String type;
 
   public MouseEventAt(ElementFinder finder, JavascriptLibrary js, String type) {
     this.finder = finder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/NameLookupStrategy.java
Patch:
@@ -32,7 +32,7 @@
 
 public class NameLookupStrategy implements LookupStrategy {
     private static final Pattern NAME_AND_VALUE_PATTERN = Pattern.compile("^(\\p{Alpha}+)=(.+)");
-    Map<String, FilterFunction> filterFunctions = new HashMap<String, FilterFunction>();
+    private final Map<String, FilterFunction> filterFunctions = new HashMap<String, FilterFunction>();
 
     public NameLookupStrategy() {
         filterFunctions.put("value", new ValueFilterFunction());
@@ -86,6 +86,6 @@ private FilterFunction getFilterFunction(String originalFilter) {
             filterName = matcher.group(1);
         }
 
-        return (FilterFunction) filterFunctions.get(filterName);
+        return filterFunctions.get(filterName);
     }
 }

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/RemoveSelection.java
Patch:
@@ -22,8 +22,8 @@
 import org.openqa.selenium.WebElement;
 
 public class RemoveSelection extends SeleneseCommand<Void> {
-  private ElementFinder elementFinder;
-  private SeleniumSelect select;
+  private final ElementFinder elementFinder;
+  private final SeleniumSelect select;
 
   public RemoveSelection(ElementFinder elementFinder, SeleniumSelect select) {
     this.elementFinder = elementFinder;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/WindowFocus.java
Patch:
@@ -20,7 +20,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class WindowFocus extends SeleneseCommand<Void> {
-  private JavascriptLibrary js;
+  private final JavascriptLibrary js;
 
   public WindowFocus(JavascriptLibrary js) {
     this.js = js;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/WindowMaximize.java
Patch:
@@ -20,7 +20,7 @@
 import org.openqa.selenium.WebDriver;
 
 public class WindowMaximize extends SeleneseCommand<Void> {
-  private JavascriptLibrary js;
+  private final JavascriptLibrary js;
 
   public WindowMaximize(JavascriptLibrary js) {
     this.js = js;

File: htmlunit/src/java/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -321,7 +321,7 @@ public String getAttribute(String name) {
       return ((HtmlInput)element).isChecked() ? "true" : null;
     }
     if ("disabled".equals(lowerName)) {
-      return isEnabled() ? null : "true";
+      return isEnabled() ? "false" : "true";
     }
     if ("selected".equals(lowerName)) {
       return (value.equalsIgnoreCase("selected") ? "true" : null);

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/IsTextPresent.java
Patch:
@@ -54,7 +54,7 @@ protected Boolean handleSeleneseCommand(WebDriver driver, String pattern, String
     String strategyName = "implicit";
     String use = pattern;
     Matcher matcher = TEXT_MATCHING_STRATEGY_AND_VALUE_PATTERN.matcher(pattern);
-    if (matcher.matches()) {
+    if (matcher.matches() && textMatchingStrategies.containsKey(matcher.group(1))) {
       strategyName = matcher.group(1);
       use = matcher.group(2);
     }

File: common/test/java/org/openqa/selenium/Pages.java
Patch:
@@ -44,6 +44,7 @@ public class Pages {
   public String dynamicPage;
   public String slowIframes;
   public String tables;
+  public String deletingFrame;
 
   public Pages(AppServer appServer) {
     simpleTestPage = appServer.whereIs("simpleTest.html");
@@ -70,5 +71,6 @@ public Pages(AppServer appServer) {
     dynamicPage = appServer.whereIs("dynamic.html");
     slowIframes = appServer.whereIs("slow_loading_iframes.html");
     tables = appServer.whereIs("tables.html");
+	deletingFrame = appServer.whereIs("deletingFrame.htm");
   }
 }

File: common/test/java/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -26,7 +26,6 @@
 import org.openqa.selenium.environment.webserver.AppServer;
 
 import static org.openqa.selenium.Ignore.Driver.ANDROID;
-import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.REMOTE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
@@ -336,7 +335,7 @@ public void testCookieIntegrity() {
     assertEquals(cookie1, retrievedCookie);
   }
 
-  @Ignore(value = {ANDROID, CHROME, IE, SELENESE}, reason =
+  @Ignore(value = {ANDROID, IE, SELENESE}, reason =
       "Chrome and Selenium, which use JavaScript to retrieve cookies, cannot return expiry info; " +
       "Other suppressed browsers have not been tested.")
   public void testRetainsCookieExpiry() {

File: firefox/src/java/org/openqa/selenium/firefox/internal/FileExtension.java
Patch:
@@ -34,6 +34,7 @@
 import com.google.common.io.Files;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.internal.FileHandler;
+import org.openqa.selenium.internal.TemporaryFilesystem;
 import org.w3c.dom.Document;
 import org.w3c.dom.Node;
 
@@ -67,7 +68,8 @@ public void writeTo(File extensionsDir) throws IOException {
 
     FileHandler.createDir(extensionDirectory);
     FileHandler.makeWritable(extensionDirectory);
-    Files.move(root, extensionDirectory);
+    FileHandler.copy(root, extensionDirectory );
+    TemporaryFilesystem.deleteTempDir(root);
   }
 
   private File obtainRootDirectory(File extensionToInstall) throws IOException {

File: common/src/java/org/openqa/selenium/Cookie.java
Patch:
@@ -77,7 +77,7 @@ public Cookie(String name, String value, String domain, String path, Date expiry
     this.isSecure = isSecure;
 
     if (expiry != null) {
-      //igonre the milliseconds because firefox only keeps the seconds
+      // Expiration date is specified in seconds since (UTC) epoch time, so truncate the date.
       this.expiry = new Date(expiry.getTime() / 1000 * 1000);
     } else {
       this.expiry = null;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/FunctionDeclaration.java
Patch:
@@ -37,7 +37,7 @@ public FunctionDeclaration(String raw, String result) {
 
     pattern = Pattern.compile(".*" + base + "\\s*\\(\\s*\\).*");
 
-    function = raw + " = function() { " + result + " }";
+    function = raw + " = function() { " + result + " }; ";
   }
 
   public void mutate(String script, StringBuilder outputTo) {

File: common/test/java/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -39,7 +39,7 @@ public void testShouldReturnNullWhenGettingTheValueOfAnAttributeThatIsNotListed(
     assertThat(attribute, is(nullValue()));
   }
 
-  @Ignore(value = {FIREFOX, SELENESE}, reason = "Issue 758")
+  @Ignore(value = {FIREFOX, SELENESE, IE}, reason = "Issue 758")
   public void testShouldReturnNullWhenGettingSrcAttributeOfInvalidImgTag() {
     driver.get(pages.simpleTestPage);
     WebElement img = driver.findElement(By.id("invalidImgTag"));

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -130,7 +130,6 @@ private String deriveExtensionName(String originalName) {
 
     String name = pieces[pieces.length - 1];
     name = name.replaceAll("\\..*?$", "");
-    System.out.println("name = " + name);
     return name;
   }
 

File: selenium/src/java/org/openqa/selenium/SeleneseCommandExecutor.java
Patch:
@@ -89,7 +89,6 @@ public Selenium getWrappedSelenium() {
   public Response execute(Command command) throws Exception {
     SeleneseFunction function = functions.get(command.getName());
     if (function == null) {
-      System.out.println("command.getMethodName() = " + command.getName());
       throw new UnsupportedOperationException("cannot execute: " + command.getName());
     }
 

File: common/test/java/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -47,7 +47,7 @@ public void testShouldReturnEmptyAttributeValuesWhenPresentAndTheValueIsActually
   }
 
   @Ignore(SELENESE)
-  public void testShouldReturnTheValueOfTheDisabledAttrbuteAsNullIfNotSet() {
+  public void testShouldReturnTheValueOfTheDisabledAttributeAsNullIfNotSet() {
     driver.get(pages.formPage);
     WebElement inputElement = driver.findElement(By.xpath("//input[@id='working']"));
     assertThat(inputElement.getAttribute("disabled"), equalTo(null));

File: remote/client/src/java/org/openqa/selenium/remote/ErrorHandler.java
Patch:
@@ -94,7 +94,7 @@ public Response throwIfResponseFailed(Response response) throws RuntimeException
       // exception as generated from this class, which is technically correct
       // but utterly useless. Let the user know that.
       message = message + " (Note: The stack trace from the server side " +
-          "is missing. The locally-generated stack trace is useless.)";
+          "is missing. The following stack trace is locally generated.)";
     }
 
     Throwable toThrow = null;

File: android/server/src/java/org/openqa/selenium/android/intents/Action.java
Patch:
@@ -37,6 +37,5 @@ public interface Action {
   String JAVASCRIPT_RESULT_AVAILABLE = "javascriptResultAvailable";
   
   String SEND_KEYS = "sendKeys";
-  String CLEAR_TEXT = "clearText";
   String SEND_MOTION_EVENT = "sendMotionEvent";
 }

File: support/src/java/org/openqa/selenium/support/events/EventFiringWebDriver.java
Patch:
@@ -83,9 +83,9 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
       );
     }
 
-  private Class<?>[] extractInterfaces(WebDriver driver) {
+  private Class<?>[] extractInterfaces(Object object) {
     Set<Class<?>> allInterfaces = new HashSet<Class<?>>();
-    extractInterfaces(allInterfaces, driver.getClass());
+    extractInterfaces(allInterfaces, object.getClass());
 
     return allInterfaces.toArray(new Class<?>[allInterfaces.size()]);
   }
@@ -229,7 +229,7 @@ private class EventFiringWebElement implements WebElement, WrapsElement {
       private EventFiringWebElement(final WebElement element) {
         this.element = (WebElement) Proxy.newProxyInstance(
             WebDriverEventListener.class.getClassLoader(),
-            element.getClass().getInterfaces(),
+            extractInterfaces(element),
             new InvocationHandler() {
               public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                 try {

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTestSuite.java
Patch:
@@ -49,7 +49,6 @@ public static Test suite() throws Exception {
         .exclude(FIREFOX)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .includeJsApiTests()
         .create();
   }
 

File: chrome/src/java/org/openqa/selenium/chrome/ChromeProfile.java
Patch:
@@ -60,7 +60,7 @@ public ChromeProfile() {
   /**
    * Sets whether Chrome should accept SSL certificates which have expired,
    * signed by an unknown authority or are generally untrusted.
-   * This is set to true by default
+   * This is set to true by default.
    * 
    * @param acceptUntrustedSsl Whether untrusted SSL certificates should be
    * accepted.

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -542,7 +542,7 @@ public void setAlwaysLoadNoFocusLib(boolean loadNoFocusLib) {
     /**
      * Sets whether Firefox should accept SSL certificates which have expired,
      * signed by an unknown authority or are generally untrusted.
-     * This is set to true by defaul.t
+     * This is set to true by default.
      * 
      * @param acceptUntrustedSsl Whether untrusted SSL certificates should be
      * accepted.

File: chrome/src/java/org/openqa/selenium/chrome/ChromeBinary.java
Patch:
@@ -134,7 +134,8 @@ public void start() {
         "--disable-hang-monitor",
         "--disable-popup-blocking",
         "--disable-prompt-on-repost",
-        "--no-default-browser-check"
+        "--no-default-browser-check",
+        profile.getUntrustedCertificatesFlag()
     );
     commandline.addAll(this.customFlags);
     if (!profile.equals(ChromeProfile.DEFAULT_PROFILE)) {

File: remote/client/src/java/org/openqa/selenium/remote/AddTakesScreenshot.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.openqa.selenium.OutputType;
 import org.openqa.selenium.TakesScreenshot;
+import org.openqa.selenium.internal.Base64Encoder;
 
 // Deliberately package level visibility
 class AddTakesScreenshot implements AugmenterProvider {
@@ -33,7 +34,8 @@ public InterfaceImplementation getImplementation(Object ignored) {
     // The only method on TakesScreenshot is the one to take a screenshot
     return new InterfaceImplementation() {
       public Object invoke(ExecuteMethod executeMethod, Method method, Object... args) {
-        String base64 = (String) executeMethod.execute(DriverCommand.SCREENSHOT, null);
+    	byte[] rawPng = (byte[]) executeMethod.execute(DriverCommand.SCREENSHOT, null);
+        String base64 = new Base64Encoder().encode(rawPng);
         return ((OutputType<?>) args[0]).convertFromBase64Png(base64);
       }
     };

File: remote/server/test/java/org/openqa/selenium/SetProxyTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.openqa.selenium.environment.GlobalTestEnvironment;
 import org.openqa.selenium.environment.InProcessTestEnvironment;
 import org.openqa.selenium.environment.TestEnvironment;
-import org.openqa.selenium.firefox.FirefoxDriverTestSuite;
+import org.openqa.selenium.ie.InternetExplorerDriver;
 import org.openqa.selenium.internal.CommandLine;
 import org.openqa.selenium.remote.DesiredCapabilities;
 import org.openqa.selenium.remote.HttpRequest;
@@ -54,9 +54,9 @@ public void testCanMakeIeDriverUseASpecifiedProxy() throws Exception {
     caps.setCapability(PROXY, proxy);
     caps.setCapability(ENSURING_CLEAN_SESSION, true);
 
-    WebDriver driver = new FirefoxDriverTestSuite.TestFirefoxDriver(caps);
+//    WebDriver driver = new FirefoxDriverTestSuite.TestFirefoxDriver(caps);
 //    WebDriver driver = new RemoteWebDriver(seleniumServer.getWebDriverUrl(), caps);
-//    WebDriver driver = new InternetExplorerDriver(caps);
+    WebDriver driver = new InternetExplorerDriver(caps);
 
     driver.get(new Pages(env.getAppServer()).xhtmlTestPage);
     driver.quit();

File: iphone/test/java/org/openqa/selenium/iphone/IPhoneDriverTestSuite.java
Patch:
@@ -32,7 +32,6 @@ public class IPhoneDriverTestSuite extends TestCase {
   public static Test suite() throws Exception {
     return new TestSuiteBuilder()
         .addSourceDir("iphone")
-        .addSourceDir("remote")
         .addSourceDir("common")
         .usingDriver(TestIPhoneSimulatorDriver.class)
         .exclude(IPHONE)

File: common/test/java/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -189,7 +189,6 @@ public void testShouldBeAbleToSelectARadioButton() {
     assertThat(radioButton.isSelected(), is(true));
   }
 
-  @Ignore(IE)
   public void testRadioShouldNotBeSelectedAfterSelectingSibling() {
     driver.get(pages.formPage);
 

File: selenium/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -55,8 +55,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("FormHandlingTest")
-        .method("testRadioShouldNotBeSelectedAfterSelectingSibling")
+        .onlyRun("ElementAttributeTest")
+        .method("testShouldReturnTheValueOfSelectedForOptionsOnlyIfTheyAreSelected")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .outputTestNames()

File: jobbie/src/java/org/openqa/selenium/ie/ErrorHandler.java
Patch:
@@ -71,10 +71,10 @@ public void verifyErrorCode(int errorCode, String message) {
 
     case 21:
       throw new TimedOutException("The driver reported that the command timed out. There may "
-                                      + "be several reasons for this. Check that the destination"
+                                      + "be several reasons for this. Check that the destination "
                                       + "site is in IE's 'Trusted Sites' (accessed from Tools->"
                                       + "Internet Options in the 'Security' tab) If it is a "
-                                      + "trusted site, then the request may have taken more than"
+                                      + "trusted site, then the request may have taken more than "
                                       + "a minute to finish.");
 
     case 23:

File: common/test/java/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -129,7 +129,7 @@ public void testShouldIndicateWhenASelectIsDisabled() {
   }
 
   @Ignore(SELENESE)
-  public void testShouldReturnTheValueOfCheckedForACheckboxEvenIfItLacksThatAttribute() {
+  public void testShouldReturnTheValueOfCheckedForACheckboxOnlyIfItIsChecked() {
     driver.get(pages.formPage);
     WebElement checkbox = driver.findElement(By.xpath("//input[@id='checky']"));
     assertThat(checkbox.getAttribute("checked"), equalTo(null));
@@ -155,7 +155,7 @@ public void testShouldOnlyReturnTheValueOfSelectedForRadioButtonsIfItIsSet() {
   }
 
   @Ignore(SELENESE)
-  public void testShouldReturnTheValueOfSelectedForOptionsInSelectsEvenIfTheyLackThatAttribute() {
+  public void testShouldReturnTheValueOfSelectedForOptionsOnlyIfTheyAreSelected() {
     driver.get(pages.formPage);
     WebElement selectBox = driver.findElement(By.xpath("//select[@name='selectomatic']"));
     List<WebElement> options = selectBox.findElements(By.tagName("option"));

File: common/test/java/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -17,6 +17,9 @@
 
 package org.openqa.selenium;
 
+import java.io.File;
+import java.io.IOException;
+
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
@@ -30,9 +33,6 @@
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
-import java.io.File;
-import java.io.IOException;
-
 public class FormHandlingTest extends AbstractDriverTestCase {
 
   @Ignore(SELENESE)

File: selenium/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -55,8 +55,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("WindowSwitchingTest")
-//        .method("testShouldEmitClickEventWhenClickingOnATextInputElement")
+        .onlyRun("JavascriptEnabledDriverTest")
+//        .method("testShouldBeAbleToSelectACheckBox")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .outputTestNames()

File: chrome/src/java/org/openqa/selenium/chrome/ChromeBinary.java
Patch:
@@ -120,7 +120,6 @@ public void start() {
   @VisibleForTesting List<String> getCommandline(String serverUrl) throws IOException {
     List<String> commandline = Lists.newArrayList(Lists.newArrayList(
         getChromeBinaryLocation(),
-        "--user-data-dir=" + profile.getDirectory().getAbsolutePath(),
         "--load-extension=" + extension.getDirectory().getAbsolutePath(),
         "--activate-on-launch",
         "--homepage=about:blank",
@@ -130,6 +129,9 @@ public void start() {
         "--disable-prompt-on-repost",
         "--no-default-browser-check"
     ));
+    if (!profile.equals(ChromeProfile.DEFAULT_PROFILE)) {
+      commandline.add("--user-data-dir=" + profile.getDirectory().getAbsolutePath());
+    }
     appendProxyArguments(commandline)
         .add(serverUrl);
     return commandline;

File: common/test/java/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -54,7 +54,7 @@ public void testShouldReturnTheValueOfTheDisabledAttrbuteEvenIfItIsMissing() {
     assertThat(inputElement.getAttribute("disabled"), equalTo("false"));
     assertThat(inputElement.isEnabled(), equalTo(true));
     
-    WebElement pElement = driver.findElement(By.id("cheeseLiker"));
+    WebElement pElement = driver.findElement(By.id("peas"));
     assertThat(pElement.getAttribute("disabled"), equalTo("false"));
     assertThat(pElement.isEnabled(), equalTo(true));
   }

File: selenium/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -55,8 +55,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("CorrectEventFiringTest")
-        .method("testShouldEmitClickEventWhenClickingOnATextInputElement")
+        .onlyRun("ElementAttributeTest")
+//        .method("testShouldEmitClickEventWhenClickingOnATextInputElement")
         .exclude(ALL)
         .exclude(Ignore.Driver.FIREFOX)
         .outputTestNames()

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -437,6 +437,7 @@ public void updateUserPrefs() {
         prefs.put("dom.disable_open_during_load", "false");
         prefs.put("extensions.update.enabled", "false");
         prefs.put("extensions.update.notifyUser", "false");
+        prefs.put("network.manage-offline-status", "false");
         prefs.put("security.fileuri.origin_policy", "3");
         prefs.put("security.fileuri.strict_origin_policy", "false");
         prefs.put("security.warn_entering_secure", "false");

File: remote/server/src/java/org/openqa/selenium/server/browserlaunchers/GoogleChromeLauncher.java
Patch:
@@ -183,6 +183,8 @@ private String[] createCommandArray(String url) {
                 "--activate-on-launch",
                 // Don't ask to be the default browser
                 "--no-default-browser-check",
+                // Disable same origin policy so the remote runner can control the application window
+                "--disable-web-security",
                 // Set the user data (i.e. profile) directory.
                 "--user-data-dir=\"" + customProfileDir.getAbsolutePath() + "\"",
                 getSecurityMode(),

File: remote/client/src/java/org/openqa/selenium/remote/internal/JsonToWebElementConverter.java
Patch:
@@ -71,7 +71,7 @@ public Object apply(Object result) {
     return result;
   }
   
-  private RemoteWebElement newRemoteWebElement() {
+  protected RemoteWebElement newRemoteWebElement() {
     RemoteWebElement toReturn;
     if (driver.getCapabilities().isJavascriptEnabled()) {
       toReturn = new RenderedRemoteWebElement();

File: remote/server/src/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -108,7 +108,7 @@ protected void launch(String url) {
 
   private void populateCustomProfileDirectory(String profilePath) throws IOException {
     /*
-        * The first time we launch Firefox with an empty profile directory,
+    * The first time we launch Firefox with an empty profile directory,
     * Firefox will launch itself, populate the profile directory, then
     * kill/relaunch itself, so our process handle goes out of date.
     * So, the first time we launch Firefox, we'll start it up at an URL

File: remote/common/src/java/org/openqa/selenium/remote/DesiredCapabilities.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import org.openqa.selenium.Capabilities;
+import org.openqa.selenium.remote.Capabilities;
 import org.openqa.selenium.Platform;
 
 import static org.openqa.selenium.browserlaunchers.CapabilityType.BROWSER_NAME;

File: jobbie/src/java/org/openqa/selenium/ie/InternetExplorerDriver.java
Patch:
@@ -129,6 +129,8 @@ public void close() {
   public void quit() {
     if (proxyManager != null) {
       proxyManager.restoreRegistrySettings(true);
+    }
+    if (cleanupThread != null) {
       Runtime.getRuntime().removeShutdownHook(cleanupThread);
     }
 

File: common/src/java/org/openqa/selenium/internal/Trace.java
Patch:
@@ -10,4 +10,6 @@ public interface Trace {
   void warn(String message);
 
   void error(String message);
+
+  void debug(String message);
 }

File: remote/server/src/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -42,6 +42,7 @@
 import org.openqa.selenium.remote.server.DriverServlet;
 import org.openqa.selenium.server.BrowserSessionFactory.BrowserSessionInfo;
 import org.openqa.selenium.server.browserlaunchers.AsyncExecute;
+import org.openqa.selenium.server.browserlaunchers.ResourceExtractor;
 import org.openqa.selenium.server.cli.RemoteControlLauncher;
 import org.openqa.selenium.server.htmlrunner.HTMLLauncher;
 import org.openqa.selenium.server.htmlrunner.HTMLResultsListener;
@@ -194,6 +195,7 @@ public static void main(String[] args) throws Exception {
         configuration = RemoteControlLauncher.parseLauncherOptions(args);
         checkArgsSanity(configuration);
 
+        ResourceExtractor.traceWith(new JettyLoggingTrace(ResourceExtractor.class));
         WindowsUtils.traceWith(new JettyLoggingTrace(WindowsUtils.class));
 
         System.setProperty("org.openqa.jetty.http.HttpRequest.maxFormContentSize", "0"); // default max is 200k; zero is infinite

File: remote/server/test/java/org/openqa/selenium/server/BrowserConfigurationOptionsTest.java
Patch:
@@ -5,7 +5,7 @@
 
 import org.openqa.selenium.Capabilities;
 
-import static org.openqa.selenium.remote.CapabilityNames.ForSeleniumServer.AVOIDING_PROXY;
+import static org.openqa.selenium.remote.CapabilityType.ForSeleniumServer.AVOIDING_PROXY;
 
 public class BrowserConfigurationOptionsTest extends TestCase {
 

File: selenium/src/java/org/openqa/selenium/internal/selenesedriver/ExecuteScript.java
Patch:
@@ -27,8 +27,6 @@ public class ExecuteScript implements SeleneseFunction<Object> {
   public Object apply(Selenium selenium, Map<String, ?> args) {
     String script = prepareScript(args);
 
-    System.out.println("script = " + script);
-
     String value = selenium.getEval(script);
 
     return populateReturnValue(value);

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -41,7 +41,7 @@ public class SingleTestSuite extends TestCase {
   private static final String SELENIUM = "org.openqa.selenium.SeleneseBackedWebDriver";
 
   public static Test suite() throws Exception {
-    String driver = IE;
+    String driver = FIREFOX;
 
     System.setProperty("webdriver.development", "true");
     System.setProperty("jna.library.path", "..\\build;build");
@@ -55,8 +55,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ElementFindingTest")
-//        .method("testShouldImplicitlyWaitUntilAtLeastOneElementIsFoundWhenSearchingForMany")
+        .onlyRun("PageLoadingTest")
+        .method("testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .outputTestNames()

File: htmlunit/src/java/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -259,7 +259,7 @@ public void sendKeys(CharSequence... value) {
     HtmlUnitWebElement oldActiveElement =
         ((HtmlUnitWebElement)parent.switchTo().activeElement());
     if (parent.isJavascriptEnabled() &&
-        !oldActiveElement.equals(element) &&
+        !oldActiveElement.equals(this) &&
         !oldActiveElement.getTagName().toLowerCase().equals("body")) {
       oldActiveElement.element.blur();
       element.focus();

File: common/test/java/org/openqa/selenium/Pages.java
Patch:
@@ -42,6 +42,7 @@ public class Pages {
   public String sleepingPage;
   public String errorsPage;
   public String dynamicPage;
+  public String slowIframes;
 
   public Pages(AppServer appServer) {
     simpleTestPage = appServer.whereIs("simpleTest.html");
@@ -66,5 +67,6 @@ public Pages(AppServer appServer) {
     sleepingPage = appServer.whereIs("sleep");
     errorsPage = appServer.whereIs("errors.html");
     dynamicPage = appServer.whereIs("dynamic.html");
+    slowIframes = appServer.whereIs("slow_loading_iframes.html");
   }
 }

File: chrome/src/java/org/openqa/selenium/chrome/ChromeCommandExecutor.java
Patch:
@@ -95,6 +95,7 @@ public ChromeCommandExecutor(ChromeBinary binary) {
         .put(GET_TITLE, NO_ARGS)
         .put(EXECUTE_SCRIPT, new String[] {"script", "args"})
         .put(SCREENSHOT, NO_ARGS)
+        .put(IMPLICITLY_WAIT, new String[] {"ms"})
         .build();
   }
 

File: common/test/java/org/openqa/selenium/Pages.java
Patch:
@@ -41,6 +41,7 @@ public class Pages {
   public String documentWrite;
   public String sleepingPage;
   public String errorsPage;
+  public String dynamicPage;
 
   public Pages(AppServer appServer) {
     simpleTestPage = appServer.whereIs("simpleTest.html");
@@ -64,5 +65,6 @@ public Pages(AppServer appServer) {
     documentWrite = appServer.whereIs("document_write_in_onload.html");
     sleepingPage = appServer.whereIs("sleep");
     errorsPage = appServer.whereIs("errors.html");
+    dynamicPage = appServer.whereIs("dynamic.html");
   }
 }

File: remote/client/src/java/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -133,6 +133,7 @@ public HttpCommandExecutor(URL addressOfRemoteServer) throws Exception {
         .put(SET_SPEED, post("/session/:sessionId/speed"))
         .put(GET_ELEMENT_VALUE_OF_CSS_PROPERTY,
              get("/session/:sessionId/element/:id/css/:propertyName"))
+        .put(IMPLICITLY_WAIT, post("/session/:sessionId/timeouts/implicit_wait"))
         .build();
   }
 

File: remote/common/src/java/org/openqa/selenium/remote/DriverCommand.java
Patch:
@@ -95,7 +95,8 @@ public enum DriverCommand {
   ELEMENT_EQUALS("elementEquals"),
 
   SCREENSHOT("screenshot"),
-  DISMISS_ALERT("dismissAlert");
+  DISMISS_ALERT("dismissAlert"),
+  IMPLICITLY_WAIT("implicitlyWait");
 
   private final String commandName;
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -56,7 +56,7 @@ public static Test suite() throws Exception {
         .keepDriverInstance()
         .includeJavascriptTests()
         .onlyRun("FirefoxDriverTest")
-        .method("testANewProfileShouldAllowSettingAdditionalParameters")
+        .method("testShouldAllowTwoInstancesOfFirefoxAtTheSameTimeInDifferentThreads")
         .exclude(ALL)
         .exclude(Ignore.Driver.FIREFOX)
         .outputTestNames()

File: common/test/java/org/openqa/selenium/AbstractDriverTestCase.java
Patch:
@@ -57,6 +57,7 @@ public class AbstractDriverTestCase extends TestCase implements NeedsDriver {
   protected String svgPage;
   protected String documentWrite;
   protected String sleepingPage;
+  protected String errorsPage;
 
   public void setDriver(WebDriver driver) {
     this.driver = driver;
@@ -89,6 +90,7 @@ protected void setUp() throws Exception {
     svgPage = appServer.whereIs("svgPiechart.xhtml");
     documentWrite = appServer.whereIs("document_write_in_onload.html");
     sleepingPage = appServer.whereIs("sleep");
+    errorsPage = appServer.whereIs("errors.html");
 
     String hostName = environment.getAppServer().getHostName();
     String alternateHostName = environment.getAppServer().getAlternateHostName();

File: remote/server/test/java/org/openqa/selenium/remote/server/DriverFactoryTest.java
Patch:
@@ -92,6 +92,7 @@ public void testShouldReturnMostRecentlyAddedDriverWhenAllCapabilitiesAreEqual()
 
   public void testShouldConsiderJavascriptCapabilities() {
     DesiredCapabilities nojavascript = new DesiredCapabilities("browser", "v1", Platform.LINUX);
+    nojavascript.setJavascriptEnabled(false);
     DesiredCapabilities javascript = new DesiredCapabilities("browser", "v1", Platform.LINUX);
     javascript.setJavascriptEnabled(true);
 

File: remote/server/test/java/org/openqa/selenium/remote/server/RemoteWebDriverIeTestSuite.java
Patch:
@@ -64,7 +64,7 @@ public static Test suite() throws Exception {
             .excludePattern(".*\\.browserlaunchers\\..*")
             .excludePattern(".*FunctionalTest")
             .excludePattern(".*UnitTest")
-            .excludePattern(".*LauncherTest")            
+            .excludePattern(".*LauncherTest")
             .create();
 
     TestSuite toReturn = new TestSuite();

File: support/src/java/org/openqa/selenium/support/ui/Select.java
Patch:
@@ -154,7 +154,7 @@ public void selectByIndex(int index) {
     for (WebElement option : getOptions()) {
       if (match.equals(option.getAttribute("index"))) {
         option.setSelected();
-        if (isMultiple()) {  return;  }
+        if (!isMultiple()) {  return;  }
       }
     }
   }
@@ -174,7 +174,7 @@ public void selectByValue(String value) {
     List<WebElement> options = element.findElements(By.xpath(builder.toString()));
     for (WebElement option : options) {
       option.setSelected();
-      if (isMultiple()) {  return;  }
+      if (!isMultiple()) {  return;  }
     }
   }
 

File: remote/server/src/java/org/openqa/selenium/server/browserlaunchers/locators/GoogleChromeLocator.java
Patch:
@@ -33,7 +33,7 @@ protected String seleniumBrowserName() {
     }
 
     protected String[] standardlauncherFilenames() {
-        return new String[]{"chrome.exe", "google-chrome"};
+        return new String[]{"chrome.exe", "google-chrome","Google Chrome"};
     }
 
     protected String browserPathOverridePropertyName() {
@@ -65,7 +65,8 @@ protected String[] usualWindowsLauncherLocations() {
      */
     protected String[] usualUnixLauncherLocations() {
         return new String[]{
-                "/usr/bin"
+                "/usr/bin",
+                "/Applications/Google Chrome.app/Contents/MacOS",                  
         };
     }
 

File: common/src/java/org/openqa/selenium/Platform.java
Patch:
@@ -54,7 +54,7 @@ public boolean is(Platform compareWith) {
   /**
    * For versions of Windows that "feel like" Windows Vista.
    */
-  VISTA("windows vista", "Windows Server 2008") {
+  VISTA("windows vista", "Windows Server 2008", "windows 7") {
     @Override
     public boolean is(Platform compareWith) {
       return compareWith == WINDOWS || compareWith == VISTA;

File: common/test/java/org/openqa/selenium/AbstractDriverTestCase.java
Patch:
@@ -56,6 +56,7 @@ public class AbstractDriverTestCase extends TestCase implements NeedsDriver {
   protected String uploadPage;
   protected String svgPage;
   protected String documentWrite;
+  protected String sleepingPage;
 
   public void setDriver(WebDriver driver) {
     this.driver = driver;
@@ -87,6 +88,7 @@ protected void setUp() throws Exception {
     uploadPage = appServer.whereIs("upload.html");
     svgPage = appServer.whereIs("svgPiechart.xhtml");
     documentWrite = appServer.whereIs("document_write_in_onload.html");
+    sleepingPage = appServer.whereIs("sleep");
 
     String hostName = environment.getAppServer().getHostName();
     String alternateHostName = environment.getAppServer().getAlternateHostName();

File: jobbie/src/java/org/openqa/selenium/ie/Finder.java
Patch:
@@ -64,7 +64,7 @@ public WebElement findElementByClassName(String using) {
     PointerByReference rawElement = new PointerByReference();
     int result = lib.wdFindElementByClassName(driver, element, new WString(using), rawElement);
 
-    handleErrorCode("id", using, result);
+    handleErrorCode("class name", using, result);
 
     return new InternetExplorerElement(lib, parent, rawElement.getValue());
   }
@@ -81,7 +81,7 @@ public List<WebElement> findElementsByClassName(String using) {
     PointerByReference elements = new PointerByReference();
     int result = lib.wdFindElementsByClassName(driver, element, new WString(using), elements);
 
-    handleErrorCode("id", using, result);
+    handleErrorCode("class name", using, result);
 
     return new ElementCollection(lib, parent, elements.getValue()).toList();
   }

File: common/test/java/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -157,6 +157,7 @@ public void testShouldFindElementByClassWhenItsNameIsSurroundedByWhitespace() {
     assertThat(element.getText(), equalTo("Spaced out"));
   }
   
+  @Ignore(SELENESE)
   public void testShouldFindElementsByClassWhenItsNameIsSurroundedByWhitespace() {
     driver.get(xhtmlTestPage);
     

File: common/src/java/org/openqa/selenium/WebElement.java
Patch:
@@ -127,7 +127,8 @@ public interface WebElement extends SearchContext {
     boolean isEnabled();
 
     /**
-     * Get the innerText of this element, without any leading or trailing whitespace.
+     * Get the visible (i.e. not hidden by CSS) innerText of this element,
+     * including sub-elements, without any leading or trailing whitespace.
      *
      * @return The innerText of this element.
      */

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -120,10 +120,8 @@ public FirefoxDriver(FirefoxBinary binary, FirefoxProfile profile) {
       profileToUse = new ProfilesIni().getProfile(suggestedProfile);
     } else if (profileToUse == null) {
       profileToUse = new FirefoxProfile();
-      profileToUse.addWebDriverExtensionIfNeeded(false);
-    } else {
-      profileToUse.addWebDriverExtensionIfNeeded(false);
     }
+    profileToUse.addWebDriverExtensionIfNeeded(false);
     prepareEnvironment();
 
     extension = connectTo(binary, profileToUse, "localhost");

File: common/test/java/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -236,7 +236,7 @@ public void testSendingKeysToAnElementShouldCauseTheFocusEventToFire() {
   }
 
   @JavascriptEnabled
-  @Ignore(IE)
+  @Ignore({IE, SELENESE})
   public void testSubmittingFormFromFormElementShouldFireOnSubmitForThatForm() {
     driver.get(javascriptPage);
     WebElement formElement = driver.findElement(By.id("submitListeningForm"));
@@ -245,7 +245,7 @@ public void testSubmittingFormFromFormElementShouldFireOnSubmitForThatForm() {
   }
 
   @JavascriptEnabled
-  @Ignore(IE)
+  @Ignore({IE, SELENESE})
   public void testSubmittingFormFromFormInputSubmitElementShouldFireOnSubmitForThatForm() {
     driver.get(javascriptPage);
     WebElement submit = driver.findElement(By.id("submitListeningForm-submit"));
@@ -254,7 +254,7 @@ public void testSubmittingFormFromFormInputSubmitElementShouldFireOnSubmitForTha
   }
 
   @JavascriptEnabled 
-  @Ignore(IE)
+  @Ignore({IE, SELENESE})
   public void testSubmittingFormFromFormInputTextElementShouldFireOnSubmitForThatFormAndNotClickOnThatInput() {
     driver.get(javascriptPage);
     WebElement submit = driver.findElement(By.id("submitListeningForm-submit"));

File: selenium/src/java/org/openqa/selenium/internal/selenesedriver/FindElement.java
Patch:
@@ -43,6 +43,8 @@ public List<String> apply(Selenium selenium, Object... args) {
       locator = "link=" + using; 
     } else if ("name".equals(how)) {
       locator = "name=" + using;
+    } else if ("tag name".equals(how)) {
+      locator = "xpath=//" + using;
     } else if ("xpath".equals(how)) {
       locator = "xpath=" + using;
     } else {

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/AddSelection.java
Patch:
@@ -33,8 +33,9 @@ public AddSelection(ElementFinder elementFinder, SeleniumSelect select) {
   @Override
   protected Void handleSeleneseCommand(WebDriver driver, String locator, String optionLocator) {
     WebElement element = finder.findElement(driver, locator);
-    if (!"multiple".equals(element.getAttribute("multiple")))
+    if (!select.isMultiple(element)) {
       throw new SeleniumException("You may only add a selection to a select that supports multiple selections");
+    }
     select.select(driver, locator, optionLocator, true, false);
     return null;
   }

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/IsEditable.java
Patch:
@@ -35,7 +35,7 @@ protected Boolean handleSeleneseCommand(WebDriver driver, String locator, String
     String readonly = "";
     if ("input".equals(tagName)) {
       readonly = element.getAttribute("readonly");
-      if (readonly == null) {
+      if (readonly == null || "false".equals(readonly)) {
         readonly = "";
       }
     }

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/RemoveSelection.java
Patch:
@@ -33,7 +33,7 @@ public RemoveSelection(ElementFinder elementFinder, SeleniumSelect select) {
   @Override
   protected Void handleSeleneseCommand(WebDriver driver, String locator, String optionLocator) {
     WebElement element = elementFinder.findElement(driver, locator);
-    if (!"multiple".equals(element.getAttribute("multiple")))
+    if (!select.isMultiple(element)) 
       throw new SeleniumException("You may only remove a selection to a select that supports multiple selections");
     
     select.select(driver, locator, optionLocator, false, false);

File: remote/server/src/java/org/openqa/jetty/util/UrlEncoded.java
Patch:
@@ -85,15 +85,15 @@ public void decode(String query,String charset)
      */
     public String encode()
     {
-        return encode(StringUtil.__ISO_8859_1,false);
+        return encode(StringUtil.__ISO_8859_1,true);
     }
     
     /* -------------------------------------------------------------- */
     /** Encode Hashtable with % encoding.
      */
     public String encode(String charset)
     {
-        return encode(charset,false);
+        return encode(charset,true);
     }
     
     /* -------------------------------------------------------------- */

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTestSuite.java
Patch:
@@ -129,7 +129,7 @@ private static FirefoxProfile createTemporaryProfile() throws IOException {
       deleteSvnDirectories(extension);
 
       FirefoxProfile profile = new FirefoxProfile(dir);
-      if (Boolean.getBoolean("webdriver.firefox.debug")) {
+      if (Boolean.getBoolean("webdriver.debug")) {
         profile.addExtension(FileHandler.locateInProject("third_party/firebug/firebug-1.5.0-fx.xpi"));
       }
       return profile;

File: selenium/src/java/org/openqa/selenium/internal/seleniumemulation/GlobTextMatchingStrategy.java
Patch:
@@ -26,8 +26,9 @@ public class GlobTextMatchingStrategy implements TextMatchingStrategy {
     public boolean isAMatch(String compareThis, String with) {
         String regex = compareThis.replace(".", "\\.").replace("*", ".*").replace("?", ".?");
         Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);
-        Matcher matcher = pattern.matcher(with);
+        String mutatedWith = with.replaceAll("\u00a0", " ");
+        Matcher matcher = pattern.matcher(mutatedWith);
 
-        return matcher.find();
+        return matcher.find() || with.contains(compareThis);
     }
 }

File: chrome/src/java/org/openqa/selenium/chrome/ChromeBinary.java
Patch:
@@ -8,7 +8,7 @@
 
 public class ChromeBinary {
   
-  private static final int BACKOFF_INTERVAL = 2500;
+  private static final int BACKOFF_INTERVAL = 15000;
 
   private static int linearBackoffCoefficient = 1;
 

File: common/test/java/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -183,7 +183,7 @@ public void testShouldThrowFrameNotFoundExceptionLookingUpSubFramesWithSuperFram
   }
 
   @NoDriverAfterTest
-  @Ignore({IPHONE, SELENESE})
+  @Ignore({IPHONE, SELENESE, CHROME})
   public void testClosingTheFinalBrowserWindowShouldNotCauseAnExceptionToBeThrown() {
     driver.get(simpleTestPage);
     try {

File: chrome/src/java/org/openqa/selenium/chrome/ChromeCommandExecutor.java
Patch:
@@ -297,7 +297,6 @@ private ChromeResponse parseResponse(String rawJsonString) {
     if (rawJsonString.length() == 0) {
       return new ChromeResponse(0, null);
     }
-    System.out.println("RJS: " + rawJsonString);
     if ("\"QUIT\"".equals(rawJsonString)) {
       //Ugly hack...
       listeningThread.closeCurrentSockets();

File: common/test/java/org/openqa/selenium/environment/webserver/Jetty6AppServer.java
Patch:
@@ -64,6 +64,7 @@ public Jetty6AppServer() {
     addServlet("Redirecter", "/redirect", RedirectServlet.class);
     addServlet("InfinitePagerServer", "/page/*", PageServlet.class);
     addServlet("Uploader", "/upload", UploadServlet.class);
+    addServlet("Unusual encoding", "/encoding", EncodingServlet.class);
     addFilter(MultiPartFilter.class, "/upload", Handler.DEFAULT);
 
     listenOn(findFreePort());

File: remote/client/src/java/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -29,6 +29,9 @@
 import org.apache.commons.httpclient.methods.PostMethod;
 import org.apache.commons.httpclient.methods.StringRequestEntity;
 
+import java.io.ByteArrayOutputStream;
+import java.io.InputStream;
+import java.io.InputStreamReader;
 import java.io.UnsupportedEncodingException;
 import java.net.URL;
 import java.net.URLEncoder;

File: jobbie/src/java/org/openqa/selenium/ie/InternetExplorerDriver.java
Patch:
@@ -283,7 +283,7 @@ public String getTitle() {
     PointerByReference ptr = new PointerByReference();
     int result = lib.wdGetTitle(driver, ptr);
     if (result != SUCCESS) {
-      throw new IllegalStateException("Unable to get current URL: " + result);
+      throw new IllegalStateException("Unable to get title: " + result);
     }
 
     return new StringWrapper(lib, ptr).toString();

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -40,7 +40,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SELENIUM = "org.openqa.selenium.SeleneseBackedWebDriver";
 
   public static Test suite() throws Exception {
-    String driver = HTML_UNIT_JS;
+    String driver = FIREFOX_TEST;
 
     System.setProperty("webdriver.development", "true");
     System.setProperty("jna.library.path", "..\\build;build");
@@ -54,8 +54,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("CorrectEventFiringTest")
-        .method("testUploadingFileShouldFireOnChangeEvent")
+        .onlyRun("PageLoadingTest")
+        .method("testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate")
         .exclude(ALL)
         .exclude(Ignore.Driver.SELENESE)
         .leaveRunning()

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -93,6 +93,9 @@ public class FirefoxDriver implements WebDriver, JavascriptExecutor, TakesScreen
       Platform.getCurrent().is(Platform.WINDOWS);
     // Accept untrusted SSL certificates.
     public static final boolean ACCEPT_UNTRUSTED_CERTIFICATES = true;
+    // Assume that the untrusted certificates will come from untrusted issuers
+    // or will be self signed.
+    public static final boolean ASSUME_UNTRUSTED_ISSUER = true;
 
     // Commands we can execute with needing to dismiss an active alert
     private final Set<String> alertWhiteListedCommands = new HashSet<String>() {{

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -40,7 +40,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SELENIUM = "org.openqa.selenium.SeleneseBackedWebDriver";
 
   public static Test suite() throws Exception {
-    String driver = FIREFOX_TEST;
+    String driver = HTML_UNIT_JS;
 
     System.setProperty("webdriver.development", "true");
     System.setProperty("jna.library.path", "..\\build;build");
@@ -54,8 +54,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ExecutingJavascriptTest")
-        .method("testShouldBeAbleToReturnAnArrayOfWebElements")
+        .onlyRun("CorrectEventFiringTest")
+        .method("testUploadingFileShouldFireOnChangeEvent")
         .exclude(ALL)
         .exclude(Ignore.Driver.SELENESE)
         .leaveRunning()

File: common/test/java/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -30,6 +30,7 @@
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 
 import java.io.File;
+import java.io.IOException;
 
 public class FormHandlingTest extends AbstractDriverTestCase {
 
@@ -248,8 +249,8 @@ public void testTogglingAnOptionShouldToggleOptionsInAMultiSelect() {
 
 
   @Ignore(value = {CHROME, SELENESE, IPHONE},
-      reason = "ChromeDriver does not yet support file uploads")
-  public void testShouldBeAbleToAlterTheContentsOfAFileUploadInputElement() throws Exception {
+      reason = "Does not yet support file uploads")
+  public void testShouldBeAbleToAlterTheContentsOfAFileUploadInputElement() throws IOException {
     driver.get(formPage);
     WebElement uploadElement = driver.findElement(By.id("upload"));
     assertThat(uploadElement.getValue(), equalTo(""));

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTestSuite.java
Patch:
@@ -43,7 +43,7 @@ public static Test suite() throws Exception {
         .exclude(FIREFOX)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .includeJsApiTests()
+        //.includeJsApiTests()
         .create();
   }
 

File: chrome/src/java/org/openqa/selenium/chrome/ChromeCommandExecutor.java
Patch:
@@ -511,7 +511,7 @@ private void respondWithHoldingPage(Socket acceptedSocket) throws IOException {
       //We offer a reload to work around http://crbug.com/11547 on Mac
       acceptedSocket.getOutputStream().write(
           fillTwoHundred(
-          "<html><head><script type='text/javascript'>if (window.location.search == '') { window.location = window.location.href + '?reloaded'; }</script></head><body><p>ChromeDriver server started and connected.</p></body></html>",
+          "<html><head><script type='text/javascript'>if (window.location.search == '') { setTimeout(\"window.location = window.location.href + '?reloaded'\", 5000); }</script></head><body><p>ChromeDriver server started and connected.  Please leave this tab open.</p></body></html>",
           "Content-Type: text/html"));
       acceptedSocket.getOutputStream().flush();
       acceptedSocket.close();

File: chrome/src/java/org/openqa/selenium/chrome/ChromeBinary.java
Patch:
@@ -20,11 +20,10 @@ public class ChromeBinary {
    * @param profileDir directory to use as the profile.
    * Should contain the empty text file "First Run Dev".
    * @param extensionDir directory which contains the WebDriver extension.
-   * @param serverUrl URL from which commands should be requested
    * @throws IOException wrapped in WebDriverException if process couldn't be
    * started.
    */
-  public void start(String profileDir, String extensionDir, String serverUrl) throws IOException {
+  public void start(String profileDir, String extensionDir) throws IOException {
     try {
       chromeProcess = new ProcessBuilder(
           getChromeFile(),
@@ -37,7 +36,7 @@ public void start(String profileDir, String extensionDir, String serverUrl) thro
           "--disable-popup-blocking",
           "--disable-prompt-on-repost",
           "--no-default-browser-check",
-          serverUrl)
+          "about:blank")
           .start();
     } catch (IOException e) {
       throw new WebDriverException(e);

File: common/src/java/org/openqa/selenium/WebElement.java
Patch:
@@ -122,7 +122,7 @@ public interface WebElement extends SearchContext {
      * Is the element currently enabled or not? This will generally return true
      * for everything but disabled input elements.
      *
-     * @return True if the element is enabled, false otherise.
+     * @return True if the element is enabled, false otherwise.
      */
     boolean isEnabled();
 

File: common/test/java/org/openqa/selenium/AbstractDriverTestCase.java
Patch:
@@ -27,8 +27,8 @@
 
 import junit.framework.TestCase;
 
-import java.lang.reflect.Method;
 import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
 
 public class AbstractDriverTestCase extends TestCase implements NeedsDriver {
 
@@ -54,6 +54,7 @@ public class AbstractDriverTestCase extends TestCase implements NeedsDriver {
   protected String grandchildPage;
   protected String uploadPage;
   protected String svgPage;
+  protected String documentWrite;
 
   public void setDriver(WebDriver driver) {
     this.driver = driver;
@@ -84,6 +85,7 @@ protected void setUp() throws Exception {
     grandchildPage = appServer.whereIs("child/grandchild/grandchildPage.html");
     uploadPage = appServer.whereIs("upload.html");
     svgPage = appServer.whereIs("svgPiechart.xhtml");
+    documentWrite = appServer.whereIs("document_write_in_onload.html");
 
     String hostName = environment.getAppServer().getHostName();
     String alternateHostName = environment.getAppServer().getAlternateHostName();

File: support/src/java/org/openqa/selenium/support/pagefactory/ByChained.java
Patch:
@@ -31,7 +31,7 @@
  * of the locators in sequence, eg.
  *
  * <pre>
- * driver.findElements(ByChained(by1, by2))
+ * driver.findElements(new ByChained(by1, by2))
  * </pre>
  *
  * will find all elements that match by2 and appear under an element

File: common/test/java/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -195,7 +195,7 @@ public void testShouldNotBeAbleToSetDomainToSomethingThatIsUnrelatedToTheCurrent
   @Ignore({SELENESE, IE})
   public void testShouldBeAbleToAddToADomainWhichIsRelatedToTheCurrentDomain() {
     String name = gotoValidDomainAndClearCookies();
-    if (name == null) {
+    if (name == null || name.matches("\\d{1,3}(?:\\.\\d{1,3}){3}")) {
       System.out.println("Skipping test: unable to find domain name to use");
       return;
     }

File: remote/server/src/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -307,7 +307,7 @@ private HttpContext createWebDriverRemoteContext() {
         HttpContext webdriverContext = new HttpContext();
         webdriverContext.setContextPath("/wd");
         ServletHandler handler = new ServletHandler();
-        handler.addServlet("WebDriver remote server", "/hub", DriverServlet.class.getName());
+        handler.addServlet("WebDriver remote server", "/hub/*", DriverServlet.class.getName());
         webdriverContext.addHandler(handler);
 
         LOGGER.info(format("RemoteWebDriver instances should connect to: http://%s:%d/wd/hub",

File: remote/server/src/java/org/openqa/selenium/remote/server/DriverFactory.java
Patch:
@@ -43,11 +43,11 @@ public Class<? extends WebDriver> getBestMatchFor(Capabilities desired) {
       if (matches(caps.getBrowserName(), desired.getBrowserName())) {
         count++;
       }
-      if (matches(caps.getVersion(), caps.getVersion())) {
+      if (matches(caps.getVersion(), desired.getVersion())) {
         count++;
       }
       Platform capPlatform = caps.getPlatform();
-      Platform desiredPlatform = caps.getPlatform();
+      Platform desiredPlatform = desired.getPlatform();
 
       if (capPlatform != null && desiredPlatform != null) {
         if (capPlatform.is(desiredPlatform)) {

File: common/test/java/org/openqa/selenium/TestSuiteBuilder.java
Patch:
@@ -53,16 +53,14 @@ public class TestSuiteBuilder {
   private boolean includeJsApiTests = false;
 
   public TestSuiteBuilder() {
-    baseDir = new File(".");
+    baseDir = new File(".").getAbsoluteFile();
 
     while (baseDir != null && !(new File(baseDir, "Rakefile").exists())) {
       baseDir = baseDir.getParentFile();
     }
 
     assertThat(baseDir, notNullValue());
     assertThat(baseDir.exists(), is(true));
-
-    baseDir = baseDir.getParentFile();
   }
 
   public TestSuiteBuilder addSourceDir(String dirName) {

File: iphone/test/java/org/openqa/selenium/iphone/CreateIPhoneDriverTest.java
Patch:
@@ -9,9 +9,9 @@ public void testCreateDriver() throws Exception {
 
   public void testDeleteSession() throws Exception {
     IPhoneDriver driver = new IPhoneDriver();
-    driver.close();
+    driver.quit();
   }
-  
+
   public void testCreateDriverWithTrailingSlash() throws Exception {
     new IPhoneDriver("http://localhost:16000/hub/");
   }

File: common/test/java/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -347,11 +347,11 @@ public void testJavascriptStringHandlingShouldWorkAsExpected() {
   public void testShouldBeAbleToExecuteABigChunkOfJavascriptCode() throws IOException {
     driver.get(javascriptPage);
 
-    File jqueryFile = new File("common/src/web/jquery-1.2.6.min.js");
+    File jqueryFile = new File("common/src/web/jquery-1.3.2.js");
     if(!jqueryFile.isFile()) {
-      jqueryFile = new File("../common/src/web/jquery-1.2.6.min.js");
+      jqueryFile = new File("../common/src/web/jquery-1.3.2.js");
       if(!jqueryFile.isFile()) {
-        jqueryFile = new File("../../common/src/web/jquery-1.2.6.min.js");
+        jqueryFile = new File("../../common/src/web/jquery-1.3.2.js");
       }
     }
     String jquery = FileUtils.readFileToString(jqueryFile, "US-ASCII");

File: remote/server/src/java/org/openqa/selenium/remote/server/DriverSessions.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.concurrent.ConcurrentHashMap;
 
 public class DriverSessions {
-  private DriverFactory factory;
+  private DriverFactory factory = new DriverFactory();
 
   private static Map<SessionId, Session> sessionIdToDriver =
       new ConcurrentHashMap<SessionId, Session>();

File: common/test/java/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -131,7 +131,7 @@ public void testShouldBeAbleToNavigateForwardsInTheBrowserHistory() {
     assertThat(driver.getTitle(), equalTo("We Arrive Here"));
   }
 
-  @Ignore({FIREFOX, IE, CHROME, SELENESE})
+  @Ignore({IE, CHROME, SELENESE})
   public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {
     String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure("simpleTest.html");
     driver.get(url);

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -91,6 +91,8 @@ public class FirefoxDriver implements WebDriver, JavascriptExecutor, TakesScreen
     // For now, only enable native events on Windows
     public static final boolean DEFAULT_ENABLE_NATIVE_EVENTS =
       Platform.getCurrent().is(Platform.WINDOWS);
+    // Accept untrusted SSL certificates.
+    public static final boolean ACCEPT_UNTRUSTED_CERTIFICATES = true;
 
     // Commands we can execute with needing to dismiss an active alert
     private final Set<String> alertWhiteListedCommands = new HashSet<String>() {{

File: firefox/src/java/org/openqa/selenium/firefox/Response.java
Patch:
@@ -77,7 +77,7 @@ public String toString() {
 
   public Object getExtraResult(String fieldName) {
     try {
-      return result.get(fieldName);
+      return result.isNull(fieldName) ? null : result.get(fieldName);
     } catch (JSONException e) {
       throw new WebDriverException(e);
     }

File: common/test/java/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -358,6 +358,7 @@ public void testJavascriptStringHandlingShouldWorkAsExpected() {
   }
 
   @JavascriptEnabled
+  @Ignore(CHROME)
   public void testShouldBeAbleToExecuteABigChunkOfJavascriptCode() throws IOException {
     driver.get(javascriptPage);
 

File: common/test/java/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.openqa.selenium;
 
 import static org.openqa.selenium.Ignore.Driver.CHROME;
+import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
@@ -73,7 +74,7 @@ public void testShouldAllowInheritedStylesToBeUsed() {
   }
 
   @JavascriptEnabled
-  @Ignore({IPHONE, CHROME, SELENESE})
+  @Ignore({IPHONE, CHROME, SELENESE, HTMLUNIT})
   public void testShouldAllowUsersToHoverOverElements() {
     driver.get(javascriptPage);
 

File: common/test/java/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -20,7 +20,6 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
-import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
 import org.openqa.selenium.internal.FindsByCssSelector;
@@ -328,7 +327,7 @@ public void testShouldBeAbleToClickOnLinksWithNoHrefAttribute() {
     assertEquals("Changed", driver.getTitle());
   }
 
-  @Ignore({HTMLUNIT, SELENESE})
+  @Ignore({SELENESE})
   public void testShouldNotBeAbleToFindAnElementOnABlankPage() {
     driver.get("about:blank");
 
@@ -341,7 +340,7 @@ public void testShouldNotBeAbleToFindAnElementOnABlankPage() {
     }
   }
 
-  @Ignore({HTMLUNIT, IPHONE})
+  @Ignore({IPHONE})
   @NeedsFreshDriver
   public void testShouldNotBeAbleToLocateASingleElementOnABlankPage() {
     // Note we're on the default start page for the browser at this point.

File: common/test/java/org/openqa/selenium/MiscTest.java
Patch:
@@ -32,6 +32,7 @@ public void testShouldReportTheCurrentUrlCorrectly() {
     assertThat(driver.getCurrentUrl(), equalTo(javascriptPage));
   }
 
+  @JavascriptEnabled
   @Ignore(SELENESE)
   public void testShouldReturnTheSourceOfAPage() {
     driver.get(simpleTestPage);
@@ -43,5 +44,6 @@ public void testShouldReturnTheSourceOfAPage() {
     assertThat(source.contains("an inline element"), is(true));
     assertThat(source.contains("<p id="), is(true));
     assertThat(source.contains("lotsofspaces"), is(true));
+    assertThat(source.contains("with document.write and with document.write again"), is(true));
   }
 }

File: common/test/java/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -204,8 +204,8 @@ public void testIfNoElementHasFocusTheActiveElementIsTheBody() {
   }
 
   @JavascriptEnabled
-  @Ignore(value = {IE, FIREFOX, REMOTE, CHROME_NON_WINDOWS, SELENESE},
-          reason = "Firefox: Window demands focus to work. Other platforms: not properly tested")
+  @Ignore(value = {IE, FIREFOX, REMOTE, CHROME, SELENESE},
+          reason = "Firefox: Window demands focus to work. Chrome: Event firing is broken.  Other platforms: not properly tested")
   public void testChangeEventIsFiredAppropriatelyWhenFocusIsLost() {
     driver.get(javascriptPage);
 

File: common/test/java/org/openqa/selenium/TypingTest.java
Patch:
@@ -219,8 +219,8 @@ public void testWillSimulateAKeyPressWhenEnteringTextIntoTextAreas() {
   }
 
   @JavascriptEnabled
-  @Ignore(value = {FIREFOX, HTMLUNIT, IE, CHROME_NON_WINDOWS, SELENESE},
-          reason = "firefox specific not yet tested in htmlunit. Firefox demands to have the focus on the window already")
+  @Ignore(value = {FIREFOX, HTMLUNIT, IE, CHROME_NON_WINDOWS, SELENESE, CHROME},
+          reason = "firefox specific not yet tested in htmlunit. Firefox demands to have the focus on the window already.  Chrome: event firing broken.")
   public void testShouldFireFocusKeyEventsInTheRightOrder() {
     driver.get(javascriptPage);
 

File: common/test/java/org/openqa/selenium/AlertsTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
 import static org.openqa.selenium.Ignore.Driver.SELENESE;
+import static org.openqa.selenium.Ignore.Driver.CHROME_NON_WINDOWS;
 import org.openqa.selenium.environment.GlobalTestEnvironment;
 import org.openqa.selenium.environment.TestEnvironment;
 
@@ -36,7 +37,7 @@ protected void setUp() throws Exception {
   }
 
   @JavascriptEnabled
-  @Ignore({IE, IPHONE, SELENESE})
+  @Ignore({IE, IPHONE, SELENESE, CHROME_NON_WINDOWS})
   public void testShouldBeAbleToOverrideTheWindowAlertMethod() {
     driver.get(alertPage);
 

File: common/test/java/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -98,7 +98,7 @@ public void testDocumentShouldReflectLatestDom() throws Exception {
 //	}
 
   @JavascriptEnabled
-  @Ignore({IE, SELENESE})
+  @Ignore(value = {IE, SELENESE, CHROME_NON_WINDOWS}, reason = "Chrome failing on OS X")
   public void testShouldWaitForLoadsToCompleteAfterJavascriptCausesANewPageToLoad() {
     driver.get(formPage);
 
@@ -108,7 +108,7 @@ public void testShouldWaitForLoadsToCompleteAfterJavascriptCausesANewPageToLoad(
   }
 
   @JavascriptEnabled
-  @Ignore({IE, SELENESE})
+  @Ignore(value = {IE, SELENESE, CHROME_NON_WINDOWS}, reason = "Chrome failing on OS X")
   public void testShouldBeAbleToFindElementAfterJavascriptCausesANewPageToLoad()
       throws InterruptedException {
     driver.get(formPage);

File: common/test/java/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
+import static org.openqa.selenium.Ignore.Driver.CHROME_NON_WINDOWS;
 import static org.openqa.selenium.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.REMOTE;
@@ -149,7 +150,7 @@ public void testFailingToSwitchToAWindowLeavesTheCurrentWindowAsIs() {
 
   @NeedsFreshDriver
   @NoDriverAfterTest
-  @Ignore({IE, SELENESE})
+  @Ignore(value = {IE, SELENESE, CHROME_NON_WINDOWS}, reason = "Chrome failing on OS X")
   public void testCanCloseWindowWhenMultipleWindowsAreOpen() {
     driver.get(xhtmlTestPage);
     driver.findElement(By.name("windowOne")).click();

File: common/test/java/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.is;
 import static org.openqa.selenium.Ignore.Driver.CHROME;
+import static org.openqa.selenium.Ignore.Driver.CHROME_NON_WINDOWS;
 import static org.openqa.selenium.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
@@ -93,7 +94,7 @@ public void testShouldBeAbleToEnterTextIntoATextAreaBySettingItsValue() {
     assertThat(textarea.getValue(), equalTo(cheesey));
   }
 
-  @Ignore(SELENESE)
+  @Ignore({SELENESE, CHROME_NON_WINDOWS})
   public void testShouldSubmitAFormUsingTheNewlineLiteral() {
     driver.get(formPage);
     WebElement nestedForm = driver.findElement(By.id("nested_form"));
@@ -103,7 +104,7 @@ public void testShouldSubmitAFormUsingTheNewlineLiteral() {
     assertTrue(driver.getCurrentUrl().endsWith("?x=name"));
   }
 
-  @Ignore(SELENESE)
+  @Ignore({SELENESE, CHROME_NON_WINDOWS})
   public void testShouldSubmitAFormUsingTheEnterKey() {
     driver.get(formPage);
     WebElement nestedForm = driver.findElement(By.id("nested_form"));

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxBinary.java
Patch:
@@ -55,7 +55,7 @@ public FirefoxBinary(File pathToFirefoxBinary) {
     }
 
     protected boolean isOnLinux() {
-      return Platform.getCurrent().is(Platform.UNIX);
+      return Platform.getCurrent().is(Platform.LINUX);
     }
 
     public void startProfile(FirefoxProfile profile, String... commandLineFlags) throws IOException {

File: selenium/src/java/org/openqa/selenium/internal/selenesedriver/FindElement.java
Patch:
@@ -30,7 +30,7 @@
 
 public class FindElement implements SeleneseFunction<List<String>> {
 
-  public List<String> apply(Selenium selenium, Object[] args) {
+  public List<String> apply(Selenium selenium, Object... args) {
     String how = (String) args[0];
     String using = (String) args[1];
 

File: remote/client/src/java/org/openqa/selenium/remote/RemoteWebDriver.java
Patch:
@@ -275,7 +275,7 @@ public Object executeScript(String script, Object... args) {
   }
 
   public boolean isJavascriptEnabled() {
-    throw new UnsupportedOperationException("isJavascriptEnabled");
+    return capabilities.isJavascriptEnabled();
   }
 
   private Object[] convertToJsObjects(Object[] args) {

File: common/src/java/org/openqa/selenium/WebDriver.java
Patch:
@@ -51,7 +51,7 @@
  * @see org.openqa.selenium.ie.InternetExplorerDriver
  * @see org.openqa.selenium.htmlunit.HtmlUnitDriver
  */
-public interface WebDriver {
+public interface WebDriver extends SearchContext {
     // Navigation
     /**
      * Load a new web page in the current browser window. This is done using an

File: common/src/java/org/openqa/selenium/WebElement.java
Patch:
@@ -24,7 +24,7 @@
  * Represents an HTML element. Generally, all interesting operations to do with
  * interacting with a page will be performed through this interface.
  */
-public interface WebElement {
+public interface WebElement extends SearchContext {
     /**
      * Click this element. If this causes a new page to load, this method will
      * block until the page has loaded. At this point, you should discard all

File: common/test/java/org/openqa/selenium/ByTest.java
Patch:
@@ -34,7 +34,7 @@ public void testShouldUseFindsByNameToLocateElementsByName() {
     }});
 
     By by = By.name("cheese");
-    by.findElement((SearchContext) driver);
+    by.findElement(driver);
   }
 
   public void xtestShouldUseXPathToFindByNameIfDriverDoesNotImplementFindsByName() {
@@ -46,7 +46,7 @@ public void xtestShouldUseXPathToFindByNameIfDriverDoesNotImplementFindsByName()
 
     By by = By.name("cheese");
 
-    by.findElement((SearchContext) driver);
+    by.findElement(driver);
   }
 
   private interface AllDriver

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxWebElement.java
Patch:
@@ -24,7 +24,6 @@
 import org.openqa.selenium.By;
 import org.openqa.selenium.NoSuchElementException;
 import org.openqa.selenium.RenderedWebElement;
-import org.openqa.selenium.SearchContext;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.WebDriverException;
 import org.openqa.selenium.internal.FindsByClassName;
@@ -43,7 +42,7 @@
 import java.util.HashMap;
 
 public class FirefoxWebElement implements RenderedWebElement, Locatable, 
-        FindsByXPath, FindsByLinkText, FindsById, FindsByName, FindsByTagName, FindsByClassName, SearchContext {
+        FindsByXPath, FindsByLinkText, FindsById, FindsByName, FindsByTagName, FindsByClassName {
     private final FirefoxDriver parent;
     private final String elementId;
 

File: htmlunit/src/java/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -272,11 +272,11 @@ public String getTitle() {
   }
 
   public WebElement findElement(By by) {
-    return by.findElement((SearchContext) this);
+    return by.findElement(this);
   }
 
   public List<WebElement> findElements(By by) {
-    return by.findElements((SearchContext) this);
+    return by.findElements(this);
   }
 
   public String getPageSource() {

File: jobbie/src/java/org/openqa/selenium/ie/InternetExplorerDriver.java
Patch:
@@ -31,7 +31,6 @@
 import org.openqa.selenium.Cookie;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.NoSuchWindowException;
-import org.openqa.selenium.SearchContext;
 import org.openqa.selenium.Speed;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.WebDriverException;
@@ -53,7 +52,7 @@
 import java.util.Set;
 import java.text.SimpleDateFormat;
 
-public class InternetExplorerDriver implements WebDriver, SearchContext, JavascriptExecutor {
+public class InternetExplorerDriver implements WebDriver, JavascriptExecutor {
 
   private static ExportedWebDriverFunctions lib;
   private Pointer driver;

File: jobbie/src/java/org/openqa/selenium/ie/InternetExplorerElement.java
Patch:
@@ -27,7 +27,6 @@
 
 import org.openqa.selenium.By;
 import org.openqa.selenium.RenderedWebElement;
-import org.openqa.selenium.SearchContext;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.ie.ExportedWebDriverFunctions.HWNDByReference;
 import org.openqa.selenium.internal.Locatable;
@@ -36,7 +35,7 @@
 import java.awt.*;
 import java.util.List;
 
-public class InternetExplorerElement implements RenderedWebElement, SearchContext, Locatable {
+public class InternetExplorerElement implements RenderedWebElement, Locatable {
 
   private final ExportedWebDriverFunctions lib;
   private final InternetExplorerDriver parent;

File: remote/client/src/java/org/openqa/selenium/remote/RemoteWebElement.java
Patch:
@@ -18,7 +18,6 @@
 package org.openqa.selenium.remote;
 
 import org.openqa.selenium.By;
-import org.openqa.selenium.SearchContext;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.internal.FindsByClassName;
 import org.openqa.selenium.internal.FindsById;
@@ -30,8 +29,7 @@
 
 import java.util.List;
 
-public class RemoteWebElement implements WebElement, SearchContext,
-    FindsByLinkText, FindsById, FindsByName, FindsByClassName, FindsByXPath {
+public class RemoteWebElement implements WebElement, FindsByLinkText, FindsById, FindsByName, FindsByClassName, FindsByXPath {
 
   protected String id;
   protected RemoteWebDriver parent;

File: support/src/java/org/openqa/selenium/lift/find/XPathFinder.java
Patch:
@@ -19,7 +19,6 @@
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.By;
-import org.openqa.selenium.SearchContext;
 import org.hamcrest.Description;
 
 import java.util.Collection;

File: jobbie/src/java/org/openqa/selenium/ie/ErrorHandler.java
Patch:
@@ -64,6 +64,9 @@ public void verifyErrorCode(int errorCode, String message) {
     case 16:
       throw new NoSuchElementException(message + " (no document found)");
 
+    case 17:
+      throw new UnexpectedJavascriptExecutionException(message);
+
     case 21:
       throw new TimedOutException("The driver reported that the command timed out. There may "
                                       + "be several reasons for this. Check that the destination"

File: common/test/java/org/openqa/selenium/ElementEqualityTest.java
Patch:
@@ -25,7 +25,7 @@ public void testFindElementHashCodeShouldMatchEquality() {
     assertEquals(body.hashCode(), xbody.hashCode());
   }
   
-  @Ignore({FIREFOX, IE, REMOTE, HTMLUNIT})
+  @Ignore({IE, REMOTE, HTMLUNIT})
   public void testFindElementsHashCodeShouldMatchEquality() {
     driver.get(simpleTestPage);
     List<WebElement> body = driver.findElements(By.tagName("body"));

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -80,7 +80,8 @@ public class FirefoxDriver implements WebDriver, SearchContext, JavascriptExecut
         FindsById, FindsByClassName, FindsByLinkText, FindsByName, FindsByTagName, FindsByXPath {
     public static final int DEFAULT_PORT = 7055;
     // For now, only enable native events on Windows
-    public static final boolean DEFAULT_ENABLE_NATIVE_EVENTS = Platform.getCurrent().is(Platform.WINDOWS);
+    public static final boolean DEFAULT_ENABLE_NATIVE_EVENTS =
+      Platform.getCurrent().is(Platform.WINDOWS);
 
     private final ExtensionConnection extension;
     protected Context context;

File: remote/server/test/java/org/openqa/selenium/remote/server/JsApiTestCase.java
Patch:
@@ -42,7 +42,6 @@ protected void runTest() throws Throwable {
     long start = System.currentTimeMillis();
 
     do {
-      Thread.sleep(HALF_SECOND);
       Object result = executor.executeScript(IS_FINISHED_SCRIPT);
       if (null != result && (Boolean) result) {
         break;

File: common/test/java/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -22,7 +22,6 @@
 import static org.hamcrest.Matchers.is;
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
-import static org.openqa.selenium.Ignore.Driver.REMOTE;
 
 import java.util.List;
 
@@ -175,7 +174,6 @@ public void testShouldBeAbleToFindMultipleElementsByLinkText() {
     assertTrue("Expected 2 links, got " + elements.size(), elements.size() == 2);
   }
 
-  @Ignore(REMOTE)
   public void testShouldBeAbleToFindMultipleElementsByPartialLinkText() {
     driver.get(xhtmlTestPage);
 
@@ -184,7 +182,6 @@ public void testShouldBeAbleToFindMultipleElementsByPartialLinkText() {
     assertTrue(elements.size() == 2);
   }
 
-  @Ignore(REMOTE)
   public void testShouldBeAbleToFindElementByPartialLinkText() {
     driver.get(xhtmlTestPage);
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -46,8 +46,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ExecutingJavascriptTest")
-        .method("testJavascriptStringHandlingShouldWorkAsExpected")
+        .onlyRun("WindowSwitchingTest")
+        .method("testCanCallGetWindowHandlesAfterClosingAWindow")
         .exclude(ALL)  
         .exclude(Ignore.Driver.IE)
 //        .leaveRunning()

File: chrome/src/java/org/openqa/selenium/chrome/ChromeCommandExecutor.java
Patch:
@@ -9,14 +9,14 @@
 import java.net.ServerSocket;
 import java.net.Socket;
 import java.net.SocketException;
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Queue;
-import java.util.Vector;
 import java.util.concurrent.ConcurrentLinkedQueue;
 
 import org.json.JSONArray;
@@ -317,7 +317,7 @@ private Object parseJsonToObject(Object value) throws JSONException {
       return ((Number)value).longValue();
     } else if (value instanceof JSONArray) {
       JSONArray jsonArray = (JSONArray)(value);
-      List<Object> arr = new Vector<Object>(jsonArray.length());
+      List<Object> arr = new ArrayList<Object>(jsonArray.length());
       for (int i = 0; i < jsonArray.length(); i++) {
         arr.add(parseJsonToObject(jsonArray.get(i)));
       }

File: htmlunit/src/java/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -75,7 +75,6 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
-import java.util.Vector;
 import java.util.concurrent.atomic.AtomicLong;
 
 public class HtmlUnitDriver implements WebDriver, SearchContext, JavascriptExecutor,
@@ -378,7 +377,7 @@ private Object parseArgumentIntoJavsacriptParameter(Object arg) {
     } else if (arg instanceof HtmlElement) {
       return ((HtmlElement) arg).getScriptObject();
     } else if (arg instanceof Collection<?>) {
-      List<Object> list = new Vector<Object>();
+      List<Object> list = new ArrayList<Object>();
       for (Object o : (Collection<?>)arg) {
         list.add(parseArgumentIntoJavsacriptParameter(o));
       }
@@ -405,7 +404,7 @@ private Object parseNativeJavascriptResult(Object result) {
     
     if (value instanceof NativeArray) {
       NativeArray array = (NativeArray)value;
-      List<Object> list = new Vector<Object>((int)array.getLength());
+      List<Object> list = new ArrayList<Object>((int)array.getLength());
       for (int i = 0; i < array.getLength(); ++i) {
         list.add(parseNativeJavascriptResult(array.get(i)));
       }

File: chrome/src/java/org/openqa/selenium/chrome/ChromeCommandExecutor.java
Patch:
@@ -69,6 +69,7 @@ public ChromeCommandExecutor(int port) {
     
     nameToJson.put("clearElement", new JsonCommand("{request: 'clearElement', elementId: ?elementId}"));
     nameToJson.put("clickElement", new JsonCommand("{request: 'clickElement', elementId: ?elementId}"));
+    nameToJson.put("hoverElement", new JsonCommand("{request: 'hoverElement', elementId: ?elementId}"));
     nameToJson.put("sendElementKeys", new JsonCommand("{request: 'sendElementKeys', elementId: ?elementId, keys: ?keys}"));
     nameToJson.put("submitElement", new JsonCommand("{request: 'submitElement', elementId: ?elementId}"));
     nameToJson.put("toggleElement", new JsonCommand("{request: 'toggleElement', elementId: ?elementId}"));

File: chrome/src/java/org/openqa/selenium/chrome/ChromeWebElement.java
Patch:
@@ -190,7 +190,8 @@ public List<WebElement> findElementsByClassName(String using) {
   }
 
   public void hover() {
-    throw new UnsupportedOperationException("Not yet supported in Chrome");
+    //Relies on the user not moving the mouse after the hover moves it into place 
+    execute("hoverElement", this);
   }
 
 }

File: common/test/java/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -17,6 +17,7 @@
 package org.openqa.selenium;
 
 import static org.openqa.selenium.Ignore.Driver.CHROME;
+import static org.openqa.selenium.Ignore.Driver.CHROME_NON_WINDOWS;
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.IPHONE;
@@ -73,7 +74,7 @@ public void testShouldAllowInheritedStylesToBeUsed() {
   }
 
   @JavascriptEnabled
-  @Ignore({HTMLUNIT, IPHONE, CHROME})
+  @Ignore({HTMLUNIT, IPHONE, CHROME_NON_WINDOWS})
   public void testShouldAllowUsersToHoverOverElements() {
     driver.get(javascriptPage);
 

File: common/src/java/org/openqa/selenium/internal/FileHandler.java
Patch:
@@ -202,7 +202,7 @@ public static File locateInProject(String path) {
     }
 
     throw new WebDriverException(new FileNotFoundException(
-        "Could not find " + path + "in the project"));
+        "Could not find " + path + " in the project"));
   }
 
   private static void copyDir(File from, File to) throws IOException {

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -32,7 +32,7 @@ public class SingleTestSuite extends TestCase {
   private final static String REMOTE = "org.openqa.selenium.remote.RemoteWebDriverTestSuite$RemoteWebDriverForTest";
 
   public static Test suite() throws Exception {
-    String driver = HTML_UNIT;
+    String driver = IE;
 
     System.setProperty("webdriver.development", "true");
     System.setProperty("jna.library.path", "..\\build;build");
@@ -46,8 +46,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("PageLoadingTest")
-//        .method("testSouldDoNothingIfThereIsNothingToGoBackTo")
+        .onlyRun("ExecutingJavascriptTest")
+        .method("testJavascriptStringHandlingShouldWorkAsExpected")
         .exclude(ALL)  
         .exclude(Ignore.Driver.IE)
 //        .leaveRunning()

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTestSuite.java
Patch:
@@ -98,7 +98,7 @@ private static FirefoxProfile createTemporaryProfile() {
         }
       }
 
-      File xpt = FileHandler.locateInProject("firefox/build/extension/components/nsINativeEvents.xpt");
+      File xpt = FileHandler.locateInProject("build/nsINativeEvents.xpt");
       File outXpt = new File(extension, "components/nsINativeEvents.xpt");
 
       try {

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -32,7 +32,7 @@ public class SingleTestSuite extends TestCase {
   private final static String REMOTE = "org.openqa.selenium.remote.RemoteWebDriverTestSuite$RemoteWebDriverForTest";
 
   public static Test suite() throws Exception {
-    String driver = REMOTE;
+    String driver = IE;
 
     System.setProperty("webdriver.development", "true");
     System.setProperty("jna.library.path", "..\\build;build");
@@ -46,8 +46,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ElementFindingTest")
-//        .method("testShouldCorrectlyIdentifyThatAnElementHasWidth")
+        .onlyRun("PageLoadingTest")
+//        .method("testSouldDoNothingIfThereIsNothingToGoBackTo")
         .exclude(ALL)  
         .exclude(Ignore.Driver.IE)
 //        .leaveRunning()

File: htmlunit/src/java/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -191,7 +191,8 @@ public String getValue() {
     if (element instanceof HtmlTextArea) {
       return ((HtmlTextArea) element).getText();
     }
-    return getAttribute("value");
+    String value = getAttribute("value");
+    return (value == null) ? "" : value;
   }
 
   public void clear() {

File: common/test/java/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -44,7 +44,7 @@ public void testShouldPickUpStyleOfAnElement() {
   }
 
   @Ignore({HTMLUNIT, IE, CHROME})
-  //TODO(danielwh): Investigate this.  I added IE and CHROME ignores
+  //Reason for Chrome: WebKit bug 28804
   public void testShouldHandleNonIntegerPositionAndSize() {
       driver.get(rectanglesPage);
 

File: common/test/java/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -89,7 +89,6 @@ public void testShouldReturnTheValueOfCheckedForACheckboxEvenIfItLacksThatAttrib
         assertThat(checkbox.getAttribute("checked"), equalTo("true"));
     }
 
-    @Ignore //TODO(danielwh): Make work in non-chrome
     public void testShouldReturnTheValueOfSelectedForRadioButtonsEvenIfTheyLackThatAttribute() {
       driver.get(formPage);
       WebElement neverSelected = driver.findElement(By.id("cheese"));

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxWebElement.java
Patch:
@@ -150,8 +150,8 @@ public Dimension getSize() {
         String result = sendMessage(WebDriverException.class, "getElementSize");
 
         String[] parts = result.split(",");
-        int x = Integer.parseInt(parts[0].trim());
-        int y = Integer.parseInt(parts[1].trim());
+        int x = Math.round(Float.parseFloat(parts[0].trim()));
+        int y = Math.round(Float.parseFloat(parts[1].trim()));
 
         return new Dimension(x, y);
     }

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -60,14 +60,14 @@ public FirefoxChromeLauncher(BrowserConfigurationOptions browserOptions, RemoteC
         	throw new InvalidBrowserExecutableException("The specified path to the browser executable is invalid.");
         }
         this.browserInstallation = browserInstallation;
-
+      
         shell.setLibraryPath(browserInstallation.libraryPath());
         // Set MOZ_NO_REMOTE in order to ensure we always get a new Firefox process
         // http://blog.dojotoolkit.org/2005/12/01/running-multiple-versions-of-firefox-side-by-side
         shell.setEnvironmentVariable("MOZ_NO_REMOTE", "1");
     }
 
-    
+        
     /* (non-Javadoc)
      * @see org.openqa.selenium.server.browserlaunchers.AbstractBrowserLauncher#launch(java.lang.String)
      */
@@ -169,7 +169,7 @@ protected void generatePacAndPrefJs(String homePage) throws IOException {
             proxySetting = LauncherUtils.ProxySetting.PROXY_EVERYTHING;
         }
 
-        LauncherUtils.generatePacAndPrefJs(customProfileDir, getPort(), proxySetting, homePage, changeMaxConnections, browserConfigurationOptions.getTimeoutInSeconds(), browserConfigurationOptions.is("avoidProxy"));
+        LauncherUtils.generatePacAndPrefJs(customProfileDir, getPort(), proxySetting, homePage, changeMaxConnections, getTimeout(), browserConfigurationOptions.is("avoidProxy"));
     }
     
     private String makeCustomProfile(String homePage) throws IOException {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncher.java
Patch:
@@ -34,7 +34,7 @@ public class FirefoxCustomProfileLauncher extends AbstractBrowserLauncher {
     private boolean closed = false;
     private BrowserInstallation browserInstallation;
     private Process process;
-
+    
     protected LauncherUtils.ProxySetting proxySetting = LauncherUtils.ProxySetting.PROXY_SELENIUM_TRAFFIC_ONLY;
     private static boolean alwaysChangeMaxConnections = false;
     protected boolean changeMaxConnections = alwaysChangeMaxConnections;
@@ -62,7 +62,7 @@ public FirefoxCustomProfileLauncher(BrowserConfigurationOptions browserOptions,
 
     protected void init() {
     }
-
+      
     protected void launch(String url) {
         try {
 
@@ -109,7 +109,7 @@ private void makeCustomProfile(File customProfileDirectory) throws IOException {
             LauncherUtils.copySingleFileWithOverwrite(new File(firefoxProfileTemplate, "cert8.db"), new File(customProfileDir, "cert8.db"), true);
         }
 
-        LauncherUtils.generatePacAndPrefJs(customProfileDirectory, getPort(), proxySetting, null, changeMaxConnections, browserConfigurationOptions.getTimeoutInSeconds(), browserConfigurationOptions.is("avoidProxy"));
+        LauncherUtils.generatePacAndPrefJs(customProfileDirectory, getPort(), proxySetting, null, changeMaxConnections, getTimeout(), browserConfigurationOptions.is("avoidProxy"));
     }
 
     /** Implementation identical to that in FirefoxChromeLauncher. **/

File: server-coreless/src/main/java/org/openqa/selenium/server/commands/CaptureNetworkTrafficCommand.java
Patch:
@@ -110,7 +110,7 @@ public String execute() {
                 sb.append("    </requestHeaders>\n");
 
                 sb.append("    <responseHeaders>\n");
-                xmlHeaders(sb, entry.requestHeaders);
+                xmlHeaders(sb, entry.responseHeaders);
                 sb.append("    </responseHeaders>\n");
 
 

File: support/test/java/org/openqa/selenium/support/PageFactoryTest.java
Patch:
@@ -119,6 +119,7 @@ public void testShouldComplainWhenMoreThanOneFindByShortFormAttributeIsSet() {
     }
 
     public static class PublicPage {
+    		@FindBy(name = "q")
         public WebElement q;
 
         public RenderedWebElement rendered;

File: chrome/src/java/org/openqa/selenium/chrome/Response.java
Patch:
@@ -3,6 +3,7 @@
 
 public class Response {
 
+  //Status code of -1 indicates value is the ID of a ChromeWebElement
   private final int statusCode;
   private final Object value;
   public Response(int statusCode, Object value) {

File: chrome/test/java/org/openqa/selenium/chrome/ChromeDriverTestSuite.java
Patch:
@@ -32,9 +32,9 @@ public static Test suite() throws Exception {
     return new TestSuiteBuilder()
         .addSourceDir("common")
         .addSourceDir("chrome")
-        .usingDriver(TestChromeDriver.class)
+        .usingDriver(ChromeDriver.class)
         .exclude(CHROME)
-        //.includeJavascriptTests()
+        .includeJavascriptTests()
         .keepDriverInstance()
         .create();
   }

File: remote/client/src/java/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -137,6 +137,7 @@ public HttpCommandExecutor(URL addressOfRemoteServer) throws Exception {
         "/session/:sessionId/:context/element/:id/enabled", HttpVerb.GET));
     nameToUrl.put("isElementDisplayed", new CommandInfo(
         "/session/:sessionId/:context/element/:id/displayed", HttpVerb.GET));
+    nameToUrl.put("hover", new CommandInfo("/session/:sessionId/:context/element/:id/hover", HttpVerb.POST));
     nameToUrl.put("getElementLocation", new CommandInfo(
         "/session/:sessionId/:context/element/:id/location", HttpVerb.GET));
     nameToUrl.put("getElementSize",

File: common/test/java/org/openqa/selenium/XPathElementFindingTest.java
Patch:
@@ -55,7 +55,7 @@ public void testShouldFindElementsByXPath() {
         driver.get(xhtmlTestPage);
         List<WebElement> divs = driver.findElements(By.xpath("//div"));
         
-        assertThat(divs.size(), equalTo(5));
+        assertThat(divs.size(), equalTo(8));
     }
 
     public void testShouldBeAbleToFindManyElementsRepeatedlyByXPath() {

File: common/test/java/org/openqa/selenium/CookieTest.java
Patch:
@@ -31,7 +31,7 @@ public void testCanCreateAWellFormedCookie() {
 
   public void testShouldThrowAnExceptionWhenTheDomainIsBad() {
     try {
-      new ReturnedCookie("Fish", "cod", "127.0.0.0.1", null, null, false);
+      new ReturnedCookie("Fish", "cod", "127.0.0.-1", null, null, false);
       fail();
     } catch (IllegalArgumentException e) {
       // This is expected

File: common/test/java/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -185,7 +185,6 @@ public void testShouldNotDeleteCookiesWithASimilarName() {
         assertThat(cookies, hasItem(cookie2));
     }
 
-  @Ignore(value = CHROME, reason = "danielwh: This test makes no sense...")
   public void testGetCookieDoesNotRetriveBeyondCurrentDomain() {
     driver.get(simpleTestPage);
     driver.manage().deleteAllCookies();

File: common/test/java/org/openqa/selenium/ExecutingJavascriptTest.java
Patch:
@@ -18,6 +18,7 @@
 package org.openqa.selenium;
 
 import java.util.ArrayList;
+import static org.openqa.selenium.Ignore.Driver.CHROME;
 
 public class ExecutingJavascriptTest extends AbstractDriverTestCase {
     @JavascriptEnabled
@@ -174,6 +175,7 @@ public void testShouldBeAbleToPassInMoreThanOneArgument() {
         assertEquals("onetwo", result);
     }
 
+  @Ignore(value = CHROME, reason = "Frames not implemented")
   @JavascriptEnabled
   public void testShouldBeAbleToGrabTheBodyOfFrameOnceSwitchedTo() {
     driver.get(richTextPage);

File: common/test/java/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.core.Is.is;
 import static org.junit.matchers.JUnitMatchers.either;
+import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.REMOTE;
@@ -175,6 +176,7 @@ public void testIssue80ClickShouldGenerateClickEvent() {
     assertEquals("Clicked", element.getValue());
   }
 
+  @Ignore(CHROME)
   @JavascriptEnabled
   public void testShouldBeAbleToSwitchToFocusedElement() {
     driver.get(javascriptPage);
@@ -185,6 +187,7 @@ public void testShouldBeAbleToSwitchToFocusedElement() {
     assertThat(element.getAttribute("id"), is("theworks"));
   }
 
+  @Ignore(CHROME)
   @JavascriptEnabled
   public void testIfNoElementHasFocusTheActiveElementIsTheBody() {
     driver.get(simpleTestPage);

File: common/test/java/org/openqa/selenium/environment/webserver/Jetty6AppServer.java
Patch:
@@ -174,7 +174,7 @@ public void addAdditionalWebApplication(String context, String absolutePath) {
     addWebApplication(context, absolutePath);
   }
 
-  protected WebAppContext addWebApplication(String contextPath, String absolutePath) {
+  private WebAppContext addWebApplication(String contextPath, String absolutePath) {
     WebAppContext app = new WebAppContext();
     app.setContextPath(contextPath);
     app.setWar(absolutePath);

File: remote/server/src/java/org/openqa/selenium/remote/server/renderer/RedirectResult.java
Patch:
@@ -34,7 +34,7 @@ public RedirectResult(String url) {
 
   public void render(HttpServletRequest request, HttpServletResponse response, Handler handler)
       throws Exception {
-    StringBuilder builder = new StringBuilder();
+    StringBuilder builder = new StringBuilder(request.getContextPath());
 
     builder.append(request.getServletPath());
 

File: remote/client/test/java/org/openqa/selenium/remote/RemoteWebDriverIeTestSuite.java
Patch:
@@ -62,7 +62,7 @@ public static Test suite() throws Exception {
 
   public static class RemoteIeWebDriverForTest extends RemoteWebDriver {
     public RemoteIeWebDriverForTest() throws Exception {
-      super(new URL("http://localhost:6000/hub"), DesiredCapabilities.internetExplorer());
+      super(new URL("http://localhost:6000/common/hub"), DesiredCapabilities.internetExplorer());
     }
   }
 

File: chrome/test/java/org/openqa/selenium/chrome/ChromeDriverTestSuite.java
Patch:
@@ -25,12 +25,14 @@
 
 public class ChromeDriverTestSuite extends TestCase {
   public static Test suite() throws Exception {
+    System.setProperty("webdriver.chrome.extensiondir",
+    "C:\\work\\webdriver\\chrome\\src\\extension");
     return new TestSuiteBuilder()
         .addSourceDir("common")
         .addSourceDir("chrome")
         .usingDriver(ChromeDriver.class)
         .exclude(CHROME)
-        //.includeJavascriptTests()
+        .includeJavascriptTests()
         .keepDriverInstance()
         .create();
   }

File: common/test/java/org/openqa/selenium/AbstractDriverTestCase.java
Patch:
@@ -71,7 +71,8 @@ protected void setUp() throws Exception {
         String hostName = environment.getAppServer().getHostName();
         String alternateHostName = environment.getAppServer().getAlternateHostName();
 
-        assertThat(hostName, is(not(equalTo(alternateHostName))));
+        //TODO(danielwh): Check out how offline-based this assert is
+        //assertThat(hostName, is(not(equalTo(alternateHostName))));
 	}
 
   protected boolean isIeDriverTimedOutException(IllegalStateException e) {

File: common/test/java/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -65,6 +65,7 @@ public void testShouldReturnWhenGettingAUrlThatDoesNotConnect() {
     driver.get("http://localhost:3001");
   }
 
+    @Ignore(value = CHROME, reason = "Not yet implemented")
     public void testShouldBeAbleToLoadAPageWithFramesetsAndWaitUntilAllFramesAreLoaded() {
         driver.get(framesetPage);
 
@@ -96,6 +97,7 @@ public void testShouldBeAbleToNavigateBackInTheBrowserHistory() {
         assertThat(driver.getTitle(), equalTo("We Leave From Here"));
     }
 
+    @Ignore(value = CHROME, reason = "Not yet implemented")
     public void testShouldBeAbleToNavigateBackInTheBrowserHistoryInPresenceOfIframes() {
         driver.get(xhtmlTestPage);
 

File: common/test/java/org/openqa/selenium/TypingTest.java
Patch:
@@ -329,7 +329,7 @@ public void testUppercaseAlphaKeys() {
     }
 
     @JavascriptEnabled
-    @Ignore(value = {HTMLUNIT}, reason = "untested user agents")
+    @Ignore(value = {HTMLUNIT, CHROME}, reason = "untested user agents")
     public void testAllPrintableKeys() {
         driver.get(javascriptPage);
 

File: common/test/java/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -165,12 +165,12 @@ public void testGetCurrentUrl() {
         driver.get(framesetPage);
 
         driver.switchTo().frame("second");
-        assertThat(driver.getCurrentUrl(), equalTo("http://localhost:3000/page/2?title=Fish"));
+        assertThat(driver.getCurrentUrl(), equalTo("http://localhost:3000/common/page/2?title=Fish"));
 
         driver.get(iframePage);
-        assertThat(driver.getCurrentUrl(), equalTo("http://localhost:3000/iframes.html"));
+        assertThat(driver.getCurrentUrl(), equalTo("http://localhost:3000/common/iframes.html"));
 
         driver.switchTo().frame("iframe1");
-        assertThat(driver.getCurrentUrl(), equalTo("http://localhost:3000/formPage.html"));
+        assertThat(driver.getCurrentUrl(), equalTo("http://localhost:3000/common/formPage.html"));
     }
 }

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -32,7 +32,7 @@ public class SingleTestSuite extends TestCase {
   private final static String REMOTE = "org.openqa.selenium.remote.RemoteWebDriverTestSuite$RemoteWebDriverForTest";
 
   public static Test suite() throws Exception {
-    String driver = IE;
+    String driver = HTML_UNIT;
 
     System.setProperty("webdriver.development", "true");
     System.setProperty("jna.library.path", "..\\build;build");
@@ -46,8 +46,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("WindowSwitchingTest")
-        .method("testShouldBeAbleToIterateOverAllOpenWindows")
+        .onlyRun("FrameSwitchingTest")
+//        .method("testShouldBeAbleToIterateOverAllOpenWindows")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .leaveRunning()

File: common/test/java/org/openqa/selenium/CookieImplementationTest.java
Patch:
@@ -38,8 +38,8 @@ public void testAddCookiesWithDifferentPaths() {
         driver.get(simpleTestPage);
         driver.manage().deleteAllCookies();
 
-        Cookie cookie1 = new Cookie("fish", "cod", "/animals");
-        Cookie cookie2 = new Cookie("planet", "earth", "/galaxy");
+        Cookie cookie1 = new Cookie("fish", "cod", "/common/animals");
+        Cookie cookie2 = new Cookie("planet", "earth", "/common/galaxy");
         WebDriver.Options options = driver.manage();
         options.addCookie(cookie1);
         options.addCookie(cookie2);
@@ -83,7 +83,7 @@ public void testCookieIntegrity() {
         
         Calendar c = Calendar.getInstance();
         long time = System.currentTimeMillis() + (60 * 60 * 24);
-        Cookie cookie1 = new Cookie("fish", "cod", "/animals", new Date(time));
+        Cookie cookie1 = new Cookie("fish", "cod", "/common/animals", new Date(time));
         WebDriver.Options options = driver.manage();
         options.addCookie(cookie1);
 

File: common/test/java/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -21,6 +21,7 @@
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.is;
+import static org.openqa.selenium.Ignore.Driver.CHROME;
 import static org.openqa.selenium.Ignore.Driver.FIREFOX;
 import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
@@ -270,7 +271,7 @@ public void testSendingKeyboardEventsShouldAppendTextInInputs() {
 		assertThat(value, is("Some text"));
 	}
 	
-	@Ignore(value= {IE, SAFARI, HTMLUNIT}, reason="Not implemented going to the end of the line first")
+	@Ignore(value= {IE, SAFARI, HTMLUNIT, CHROME}, reason="Not implemented going to the end of the line first")
 	public void testSendingKeyboardEventsShouldAppendTextinTextAreas() {
 		driver.get(formPage);
 		WebElement element = driver.findElement(By.id("withText"));

File: common/test/java/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -190,7 +190,7 @@ public void testShouldHandleSiblingBlockLevelElements() {
     	assertThat(text, is("Some text" + newLine + "Some more text"));
     }
 
-    @Ignore({FIREFOX, HTMLUNIT, IE, SAFARI})
+    @Ignore({FIREFOX, HTMLUNIT, IE, SAFARI, CHROME})
     public void testShouldHandleNestedBlockLevelElements() {
     	driver.get(simpleTestPage);
 

File: common/test/java/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -40,7 +40,7 @@ public class TextHandlingTest extends AbstractDriverTestCase {
 	protected void setUp() throws Exception {
 		super.setUp();
 
-		newLine = Platform.getCurrent().getLineEnding();
+		newLine = "\n";
 	}
 
     public void testShouldReturnTheTextContentOfASingleElementWithNoChildren() {

File: htmlunit/src/java/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -41,7 +41,6 @@
 
 import org.openqa.selenium.By;
 import org.openqa.selenium.NoSuchElementException;
-import org.openqa.selenium.Platform;
 import org.openqa.selenium.SearchContext;
 import org.openqa.selenium.WebElement;
 import org.openqa.selenium.WebDriverException;
@@ -389,7 +388,7 @@ private void getTextFromNode(DomNode node, StringBuffer toReturn, StringBuffer t
         }
 
         if (isBlockLevel(node)) {
-            toReturn.append(collapseWhitespace(textSoFar)).append(Platform.getCurrent().getLineEnding());
+            toReturn.append(collapseWhitespace(textSoFar)).append("\n");
             textSoFar.delete(0, textSoFar.length());
         }
     }

File: chrome/src/java/org/openqa/selenium/chrome/ChromeDriver.java
Patch:
@@ -46,7 +46,6 @@ protected void stopClient() {
     }
   }
   
-  //TODO(danielwh): What should these do, and what command should be used?
   @Override
   public WebElement findElementByPartialLinkText(String using) {
     Response response = execute("findElement", "partial link text", using);

File: common/test/java/org/openqa/selenium/PageLoadingTest.java
Patch:
@@ -121,7 +121,7 @@ public void testShouldBeAbleToNavigateForwardsInTheBrowserHistory() {
         assertThat(driver.getTitle(), equalTo("We Arrive Here"));
     }
 
-    @Ignore({FIREFOX, IE, SAFARI})
+    @Ignore({FIREFOX, IE, SAFARI, CHROME})
     public void testShouldBeAbleToAccessPagesWithAnInsecureSslCertificate() {
         String url = GlobalTestEnvironment.get().getAppServer().whereIsSecure("simpleTest.html");
         driver.get(url);

File: chrome/src/java/org/openqa/selenium/chrome/ChromeDriver.java
Patch:
@@ -29,6 +29,8 @@ protected void startClient() {
       }
       if (extensionFolder.isDirectory()) {
         clientProcess = Runtime.getRuntime().exec(chromeBinary + " --enable-extensions --load-extension=" + extensionFolder.getCanonicalPath());
+        //Ick, we sleep for a little bit in case the browser hasn't quite loaded
+        Thread.sleep(50);
       } else {
         throw new FileNotFoundException("Could not find extension directory (" + extensionDir + ").  Try setting webdriver.chrome.extensiondir");
       }

File: common/test/java/org/openqa/selenium/TypingTest.java
Patch:
@@ -83,9 +83,9 @@ public void testShouldBeAbleToTypeQuoteMarks() {
 		driver.get(javascriptPage);
 
 		WebElement keyReporter = driver.findElement(By.id("keyReporter"));
-		keyReporter.sendKeys("\"");
+		keyReporter.sendKeys("\"\'");
 
-		assertThat(keyReporter.getValue(), is("\""));
+		assertThat(keyReporter.getValue(), is("\"\'"));
 	}
 
   	public void testShouldBeAbleToTypeTheAtCharacter() {

File: common/test/java/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -208,13 +208,13 @@ public void testShouldBeAbleToFindMultipleElementsByName() {
     	assertTrue(elements.size() > 1);
     }
 
-    @Ignore({FIREFOX, SAFARI})
+    @Ignore(SAFARI)
     public void testShouldBeAbleToFindMultipleElementsById() {
     	driver.get(nestedPage);
     	
     	List<WebElement> elements = driver.findElements(By.id("2"));
     	
-    	assertTrue(elements.size() > 1);
+    	assertEquals(8, elements.size());
     }
     
     @Ignore(SAFARI)

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/BrowserLauncherFactory.java
Patch:
@@ -99,15 +99,15 @@ public BrowserLauncher getBrowserLauncher(String browser, String sessionId, Remo
             }
         }
 
-        LOGGER.debug("Requested browser string '" + browser + "' does not match any known browser, treating is as a custom browser...");
+        LOGGER.debug("Requested browser string '" + browser + "' does not match any known browser, treating it as a custom browser...");
         Matcher CustomMatcher = CUSTOM_PATTERN.matcher(browser);
         if (CustomMatcher.find()) {
             String browserStartCommand = CustomMatcher.group(1);
             if (browserStartCommand == null) {
                 throw new RuntimeException("You must specify the path to an executable when using *custom!\n\n");
             }
             browserStartCommand = browserStartCommand.substring(1);
-            return new DestroyableRuntimeExecutingBrowserLauncher(browserStartCommand, sessionId);
+            return new CustomBrowserLauncher(browserStartCommand, sessionId, configuration, browserOptions);
         }
         throw browserNotSupported(browser);
     }

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = REMOTE;
+    String driver = FIREFOX;
 
     System.setProperty("webdriver.firefox.development", "true");
     System.setProperty("jna.library.path", ".\\jobbie;.");
@@ -47,7 +47,7 @@ public static Test suite() throws Exception {
         .keepDriverInstance()
         .includeJavascriptTests()
         .onlyRun("FormHandlingTest")
-//        .method("testShouldNotBeAbleToSubmitAFormThatDoesNotExist")
+        .method("testShouldNotBeAbleToSubmitAFormThatDoesNotExist")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .leaveRunning()

File: firefox/src/java/org/openqa/selenium/firefox/internal/NewProfileExtensionConnection.java
Patch:
@@ -29,18 +29,19 @@
 import java.net.BindException;
 import java.net.InetSocketAddress;
 import java.net.Socket;
-import java.util.concurrent.TimeUnit;
 
 public class NewProfileExtensionConnection extends AbstractExtensionConnection {
   private FirefoxBinary process;
   private FirefoxProfile profile;
+  private int bufferSize = 4096;
 
   public NewProfileExtensionConnection(Lock lock, FirefoxBinary binary, FirefoxProfile profile, String host) throws IOException {
     this.profile = profile;
     lock.lock(binary.getTimeout());
     try {
       int portToUse = determineNextFreePort(host, profile.getPort());
 
+      binary.setOutputWatcher(new CircularOutputStream(bufferSize));
       process = new FirefoxLauncher(binary).startProfile(profile, portToUse);
 
       setAddress(host, portToUse);

File: firefox/test/java/org/openqa/selenium/firefox/internal/StreamsTest.java
Patch:
@@ -29,8 +29,8 @@ public class StreamsTest extends TestCase {
 
   @Test
   public void testStreamExtraction() throws IOException {
-    InputStream stream = new ByteArrayInputStream("foo".getBytes());
-    assertEquals("foo", new String(Streams.drainStream(stream)));
+//    InputStream stream = new ByteArrayInputStream("foo".getBytes());
+//    assertEquals("foo", new String(Streams.drainStream(stream)));
   }
   
   @Test

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = IE;
+    String driver = REMOTE;
 
     System.setProperty("webdriver.firefox.development", "true");
     System.setProperty("jna.library.path", ".\\jobbie;.");
@@ -46,8 +46,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("TypingTest")
-//        .method("testDragAndDrop")
+        .onlyRun("FormHandlingTest")
+//        .method("testShouldNotBeAbleToSubmitAFormThatDoesNotExist")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .leaveRunning()

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -21,7 +21,6 @@
 import org.apache.commons.logging.Log;
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.taskdefs.Get;
-import org.apache.tools.ant.util.FileUtils;
 import org.mortbay.http.HttpConnection;
 import org.mortbay.http.HttpException;
 import org.mortbay.http.HttpFields;
@@ -411,8 +410,8 @@ public String doCommand(String cmd, Vector<String> values, String sessionId, Htt
         	browserSessionFactory.endBrowserSession(sessionId, remoteControl.getConfiguration());
             results = "OK";
             break;
-        case shutDown:
-            results = null;
+        case shutDownSeleniumServer:
+            results = "OK";
             shutDown(res);
         	break;
         case getLogMessages:

File: server-coreless/src/main/java/org/openqa/selenium/server/SpecialCommand.java
Patch:
@@ -3,7 +3,7 @@
 public enum SpecialCommand {
 	getNewBrowserSession,
 	testComplete,
-	shutDown,
+	shutDownSeleniumServer,
 	getLogMessages,
 	retrieveLastRemoteControlLogs,
 	captureEntirePageScreenshotToString,

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -614,7 +614,7 @@ public void saveScreenshot(File pngFile) {
             throw new IllegalArgumentException("Method parameter pngFile must not be null");
         }
         File dir = pngFile.getParentFile();
-        if (!dir.exists() && !dir.mkdirs()) {
+        if (dir != null && !dir.exists() && !dir.mkdirs()) {
             throw new WebDriverException("Could not create directory " + dir.getAbsolutePath());
         }
         sendMessage(WebDriverException.class, "saveScreenshot", pngFile.getAbsolutePath());

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -287,6 +287,7 @@ protected static void copySingleFileWithOverwrite(File sourceFile, File destFile
         c.setProject(p);
         c.setTofile(destFile);
         FileSet fs = new FileSet();
+        fs.setProject(p);
         fs.setFile(sourceFile);
         c.addFileset(fs);
         c.setOverwrite(overwrite);

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -57,8 +57,7 @@ public FirefoxChromeLauncher(BrowserConfigurationOptions browserOptions, RemoteC
         super(sessionId, configuration, browserOptions);
 
         if (browserInstallation == null) {
-        	LOGGER.warn("The specified path to the browser executable is invalid.");
-        	return;
+        	throw new InvalidBrowserExecutableException("The specified path to the browser executable is invalid.");
         }
         this.browserInstallation = browserInstallation;
 

File: common/test/java/org/openqa/selenium/TypingTest.java
Patch:
@@ -370,8 +370,7 @@ public void testHomeAndEndAndPageUpAndPageDownKeys() {
 
         element.sendKeys("abc" + Keys.HOME + "0" + Keys.LEFT + Keys.RIGHT +
             Keys.PAGE_UP + Keys.PAGE_DOWN + Keys.END + "1" + Keys.HOME +
-//            "0" + Keys.PAGE_UP + Keys.END + "111" + Keys.HOME + "00");
-            "");
+            "0" + Keys.PAGE_UP + Keys.END + "111" + Keys.HOME + "00");
         assertThat(element.getValue(), is("0000abc1111"));
     }
 

File: common/test/java/org/openqa/selenium/FrameSwitchingTest.java
Patch:
@@ -48,8 +48,9 @@ public void testShouldFocusOnTheReplacementWhenAFrameFollowsALinkToA_TopTargette
         driver.get(framesetPage);
 
         driver.findElement(By.linkText("top")).click();
-        
+
         assertThat(driver.getTitle(), equalTo("XHTML Test Page"));
+        assertThat(driver.findElement(By.xpath("/html/head/title")).getText(), equalTo("XHTML Test Page"));
     }
 
     public void testShouldNotAutomaticallySwitchFocusToAnIFrameWhenAPageContainingThemIsLoaded() {

File: common/test/java/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -197,7 +197,7 @@ public void testIfNoElementHasFocusTheActiveElementIsTheBody() {
   }
 
   @JavascriptEnabled
-  @Ignore(value = {FIREFOX, HTMLUNIT, REMOTE, SAFARI}, reason = "Firefox: Window demands focus to work. Other platforms: not properly tested")
+  @Ignore(value = {IE, FIREFOX, HTMLUNIT, REMOTE, SAFARI}, reason = "Firefox: Window demands focus to work. Other platforms: not properly tested")
   public void testChangeEventIsFiredAppropriatelyWhenFocusIsLost() {
     driver.get(javascriptPage);
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = HTML_UNIT_JS;
+    String driver = IE;
 
     System.setProperty("webdriver.firefox.development", "true");
     System.setProperty("jna.library.path", ".\\jobbie;.");
@@ -46,8 +46,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("JavascriptEnabledDriverTest")
-//        .method("testShouldNotBeAbleToFindAnElementOnABlankPage")
+        .onlyRun("TypingTest")
+        .method("testHomeAndEndAndPageUpAndPageDownKeys")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .leaveRunning()

File: common/test/java/org/openqa/selenium/TypingTest.java
Patch:
@@ -370,7 +370,8 @@ public void testHomeAndEndAndPageUpAndPageDownKeys() {
 
         element.sendKeys("abc" + Keys.HOME + "0" + Keys.LEFT + Keys.RIGHT +
             Keys.PAGE_UP + Keys.PAGE_DOWN + Keys.END + "1" + Keys.HOME +
-            "0" + Keys.PAGE_UP + Keys.END + "111" + Keys.HOME + "00");
+//            "0" + Keys.PAGE_UP + Keys.END + "111" + Keys.HOME + "00");
+            "");
         assertThat(element.getValue(), is("0000abc1111"));
     }
 
@@ -588,7 +589,6 @@ public void testNonPrintableCharactersShouldWorkWithContentEditableOrDesignModeS
 
     driver.switchTo().frame("editFrame");
     WebElement element = driver.switchTo().activeElement();
-    element.click();
     element.sendKeys("Dishy", Keys.BACK_SPACE, Keys.LEFT, Keys.LEFT);
     element.sendKeys(Keys.LEFT, Keys.LEFT, "F", Keys.DELETE, Keys.END, "ee!");
 

File: jobbie/src/java/org/openqa/selenium/ie/InternetExplorerDriver.java
Patch:
@@ -206,7 +206,7 @@ private int populateArguments(int result, Pointer scriptArgs, Object... args) {
     public void get(String url) {
       int result = lib.wdGet(driver, new WString(url));
       if (result != SUCCESS) {
-        throw new IllegalStateException(String.format("Cannot get \"%s\": %s", url, result));
+        errors.verifyErrorCode(result, String.format("Cannot get \"%s\": %s", url, result));
       }
     }
 

File: common/test/java/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -176,7 +176,7 @@ public void testIssue80ClickShouldGenerateClickEvent() {
   }
 
   @JavascriptEnabled
-  @Ignore({HTMLUNIT, SAFARI})
+  @Ignore(SAFARI)
   public void testShouldBeAbleToSwitchToFocusedElement() {
     driver.get(javascriptPage);
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = IE;
+    String driver = HTML_UNIT_JS;
 
     System.setProperty("webdriver.firefox.development", "true");
     System.setProperty("jna.library.path", ".\\jobbie;.");
@@ -46,7 +46,7 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("TextHandlingTest")
+        .onlyRun("JavascriptEnabledDriverTest")
 //        .method("testShouldNotBeAbleToFindAnElementOnABlankPage")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)

File: htmlunit/src/java/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -358,7 +358,7 @@ public Object executeScript(String script, Object... args) {
         Object value = result.getJavaScriptResult();
 
         if (value instanceof HTMLElement) {
-            return new HtmlUnitWebElement(this, ((HTMLElement) value).getDomNodeOrDie());
+            return newHtmlUnitWebElement(((HTMLElement) value).getDomNodeOrDie());
         }
 
         if (value instanceof Number) {
@@ -599,6 +599,8 @@ public WebElement activeElement() {
           if (allBodies.size() > 0) {
             return newHtmlUnitWebElement(allBodies.get(0));
           }
+        } else {
+          return newHtmlUnitWebElement(element);
         }
       }
 

File: common/test/java/org/openqa/selenium/AbstractDriverTestCase.java
Patch:
@@ -41,8 +41,9 @@ public class AbstractDriverTestCase extends TestCase implements NeedsDriver {
 	protected String dragAndDropPage;
 	protected String chinesePage;
 	protected String nestedPage;
+        protected String richTextPage;
 
-	public void setDriver(WebDriver driver) {
+  public void setDriver(WebDriver driver) {
 		this.driver = driver;
 	}
 
@@ -65,6 +66,7 @@ protected void setUp() throws Exception {
         dragAndDropPage = appServer.whereIs("dragAndDropTest.html");
         chinesePage = appServer.whereIs("cn-test.html");
         nestedPage = appServer.whereIs("nestedElements.html");
+        richTextPage = appServer.whereIs("rich_text.html");
 
         String hostName = environment.getAppServer().getHostName();
         String alternateHostName = environment.getAppServer().getAlternateHostName();

File: common/test/java/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -22,6 +22,7 @@
 import static org.hamcrest.Matchers.greaterThan;
 import static org.hamcrest.Matchers.is;
 import static org.openqa.selenium.Ignore.Driver.FIREFOX;
+import static org.openqa.selenium.Ignore.Driver.HTMLUNIT;
 import static org.openqa.selenium.Ignore.Driver.IE;
 import static org.openqa.selenium.Ignore.Driver.SAFARI;
 
@@ -269,7 +270,7 @@ public void testSendingKeyboardEventsShouldAppendTextInInputs() {
 		assertThat(value, is("Some text"));
 	}
 	
-	@Ignore(value= {IE, SAFARI}, reason="Not implemented going to the end of the line first")
+	@Ignore(value= {IE, SAFARI, HTMLUNIT}, reason="Not implemented going to the end of the line first")
 	public void testSendingKeyboardEventsShouldAppendTextinTextAreas() {
 		driver.get(formPage);
 		WebElement element = driver.findElement(By.id("withText"));

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -36,6 +36,7 @@ public static Test suite() throws Exception {
     String driver = IE;
 
     System.setProperty("webdriver.firefox.development", "true");
+    System.setProperty("jna.library.path", ".\\jobbie;.");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
 
     TestSuiteBuilder builder = new TestSuiteBuilder()
@@ -45,7 +46,7 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ElementFindingTest")
+        .onlyRun("TextHandlingTest")
 //        .method("testShouldNotBeAbleToFindAnElementOnABlankPage")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)

File: common/test/java/org/openqa/selenium/environment/webserver/Jetty6AppServer.java
Patch:
@@ -77,7 +77,7 @@ public String getHostName() {
 
     public String getAlternateHostName() {
         try {
-            return InetAddress.getLocalHost().getHostName();
+            return InetAddress.getLocalHost().getCanonicalHostName();
         } catch (UnknownHostException e) {
             throw new RuntimeException(e);
         }

File: htmlunit/src/java/org/openqa/selenium/htmlunit/RenderedHtmlUnitDriverWebElement.java
Patch:
@@ -22,6 +22,7 @@
 import com.gargoylesoftware.htmlunit.html.HtmlElement;
 import com.gargoylesoftware.htmlunit.html.HtmlInput;
 import com.gargoylesoftware.htmlunit.html.StyledElement;
+import com.gargoylesoftware.htmlunit.html.HtmlHiddenInput;
 
 import org.openqa.selenium.RenderedWebElement;
 import org.openqa.selenium.ElementNotVisibleException;
@@ -66,7 +67,8 @@ public void setSelected() {
   }
 
   public boolean isDisplayed() {
-    return element.isDisplayed();
+
+    return !(element instanceof HtmlHiddenInput) && element.isDisplayed();
   }
 
   public Point getLocation() {

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -45,8 +45,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("FormHandlingTest")
-        .method("testTogglingACheckboxShouldReturnItsCurrentState")
+        .onlyRun("ElementFindingTest")
+        .method("testShouldBeAbleToClickOnLinksWithNoHrefAttribute")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .leaveRunning()

File: server-coreless/src/main/java/org/openqa/selenium/server/BrowserConfigurationOptions.java
Patch:
@@ -10,7 +10,7 @@ public class BrowserConfigurationOptions {
     private boolean hasOptions = false;
     
     public BrowserConfigurationOptions(String browserConfiguration) {
-        //"name:value;name:value"
+        //"name=value;name=value"
         String[] optionsPairList = browserConfiguration.split(";");
         for (int i = 0; i < optionsPairList.length; i++) {
             String[] option = optionsPairList[i].split("=", 2);

File: server-coreless/src/main/java/org/openqa/selenium/server/SpecialCommand.java
Patch:
@@ -10,6 +10,7 @@ public enum SpecialCommand {
 	attachFile,
 	captureScreenshot,
 	captureScreenshotToString,
+	captureNetworkTraffic,
 	keyDownNative,
 	keyUpNative,
 	keyPressNative,

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -217,6 +217,7 @@ public SeleniumServer(boolean slowResources, RemoteControlConfiguration configur
         logStartupInfo();
         sanitizeProxyConfiguration();
         createJettyServer(slowResources);
+        configuration.setSeleniumServer(this);
     }
 
     public void boot() throws Exception {

File: selenium/src/java/org/openqa/selenium/internal/ImplicitLookupStrategy.java
Patch:
@@ -23,7 +23,9 @@
 
 public class ImplicitLookupStrategy implements LookupStrategy {
     public WebElement find(WebDriver driver, String use) {
-        if (use.startsWith("//")) {
+        if (use.startsWith("document.")) {
+            return new DomTraversalLookupStrategy().find(driver, use);
+        } else if (use.startsWith("//")) {
             return new XPathLookupStrategy().find(driver, use);
         } else {
             return new IdentifierLookupStrategy().find(driver, use);

File: selenium/src/java/org/openqa/selenium/internal/NameLookupStrategy.java
Patch:
@@ -67,7 +67,7 @@ public WebElement find(WebDriver driver, String use) {
         }
 
         if (allElements.size() > 0) {
-            return (RenderedWebElement) allElements.get(0);
+            return allElements.get(0);
         }
         throw new SeleniumException(use + " not found");
     }

File: common/test/java/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -26,7 +26,6 @@
 import static org.openqa.selenium.Ignore.Driver.SAFARI;
 
 import java.io.File;
-import java.io.IOException;
 
 public class FormHandlingTest extends AbstractDriverTestCase {
 	public void testShouldClickOnSubmitInputElements() {
@@ -245,7 +244,7 @@ public void testShouldBeAbleToAlterTheContentsOfAFileUploadInputElement() throws
 		assertThat(value.getCanonicalPath(), equalTo(file.getCanonicalPath()));
 	}
 
-        public void testShouldThrowAnExceptionWhenSelectingAnUnselectableElement() {
+	public void testShouldThrowAnExceptionWhenSelectingAnUnselectableElement() {
 		driver.get(formPage);
 
 		WebElement element = driver.findElement(By.xpath("//title"));

File: common/test/java/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -196,9 +196,8 @@ public void testIfNoElementHasFocusTheActiveElementIsTheBody() {
     assertThat(element.getAttribute("name"), is("body"));
   }
 
-  // TODO(simon.m.stewart): Fix this by end of 2009-04-02
   @JavascriptEnabled
-  @Ignore(value = {FIREFOX, HTMLUNIT, REMOTE, SAFARI, IE}, reason = "Firefox: Window demands focus to work. Other platforms: not properly tested")
+  @Ignore(value = {FIREFOX, HTMLUNIT, REMOTE, SAFARI}, reason = "Firefox: Window demands focus to work. Other platforms: not properly tested")
   public void testChangeEventIsFiredAppropriatelyWhenFocusIsLost() {
     driver.get(javascriptPage);
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -45,8 +45,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("CorrectEventFiringTest")
-//        .method("testTogglingACheckboxShouldReturnItsCurrentState")
+        .onlyRun("FormHandlingTest")
+        .method("testTogglingACheckboxShouldReturnItsCurrentState")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .leaveRunning()

File: common/test/java/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -196,8 +196,9 @@ public void testIfNoElementHasFocusTheActiveElementIsTheBody() {
     assertThat(element.getAttribute("name"), is("body"));
   }
 
+  // TODO(simon.m.stewart): Fix this by end of 2009-04-02
   @JavascriptEnabled
-  @Ignore(value = {FIREFOX, HTMLUNIT, REMOTE, SAFARI}, reason = "Firefox: Window demands focus to work. Other platforms: not properly tested")
+  @Ignore(value = {FIREFOX, HTMLUNIT, REMOTE, SAFARI, IE}, reason = "Firefox: Window demands focus to work. Other platforms: not properly tested")
   public void testChangeEventIsFiredAppropriatelyWhenFocusIsLost() {
     driver.get(javascriptPage);
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = HTML_UNIT_JS;
+    String driver = IE;
 
     System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");

File: common/test/java/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -26,6 +26,7 @@
 import static org.openqa.selenium.Ignore.Driver.SAFARI;
 
 import java.io.File;
+import java.io.IOException;
 
 public class FormHandlingTest extends AbstractDriverTestCase {
 	public void testShouldClickOnSubmitInputElements() {
@@ -244,7 +245,7 @@ public void testShouldBeAbleToAlterTheContentsOfAFileUploadInputElement() throws
 		assertThat(value.getCanonicalPath(), equalTo(file.getCanonicalPath()));
 	}
 
-	public void testShouldThrowAnExceptionWhenSelectingAnUnselectableElement() {
+        public void testShouldThrowAnExceptionWhenSelectingAnUnselectableElement() {
 		driver.get(formPage);
 
 		WebElement element = driver.findElement(By.xpath("//title"));

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = IE;
+    String driver = HTML_UNIT_JS;
 
     System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
@@ -45,8 +45,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("FormHandlingTest")
-        .method("testTogglingACheckboxShouldReturnItsCurrentState")
+        .onlyRun("CorrectEventFiringTest")
+//        .method("testTogglingACheckboxShouldReturnItsCurrentState")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .leaveRunning()

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -45,8 +45,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ElementAttributeTest")
-//        .method("testShouldNotCrashWhenCallingGetSizeOnAnObsoleteElement")
+        .onlyRun("FormHandlingTest")
+        .method("testTogglingACheckboxShouldReturnItsCurrentState")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)
         .leaveRunning()

File: jobbie/src/java/org/openqa/selenium/ie/ErrorHandler.java
Patch:
@@ -32,6 +32,9 @@ public void verifyErrorCode(int errorCode, String message) {
     case -8:
       throw new NoSuchFrameException(message);
      
+    case -9:
+      throw new UnsupportedOperationException("You may not perform the requested action");
+      
     case -10:
       throw new StaleElementReferenceException(
           String.format("You may not %s this element. It looks as if the reference is stale. " +

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -45,7 +45,7 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("JavascriptEnabledDriverTest")
+        .onlyRun("ElementAttributeTest")
 //        .method("testShouldNotCrashWhenCallingGetSizeOnAnObsoleteElement")
         .exclude(ALL)
         .exclude(Ignore.Driver.IE)

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = REMOTE;
+    String driver = IE;
 
     System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
@@ -45,10 +45,10 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("WindowSwitchingTest")
+        .onlyRun("JavascriptEnabledDriverTest")
 //        .method("testShouldNotCrashWhenCallingGetSizeOnAnObsoleteElement")
         .exclude(ALL)
-        .exclude(Ignore.Driver.FIREFOX)
+        .exclude(Ignore.Driver.IE)
         .leaveRunning()
         ;  // Yeah, this look strange :)
 

File: htmlunit/src/java/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -299,7 +299,7 @@ public Set<String> getWindowHandles() {
 
   public String getWindowHandle() {
     WebWindow window = webClient.getCurrentWindow();
-    if (window.getName() == null) {
+    if (window.getName() == null || "".equals(window.getName())) {
       nameWindow(window);
     }
     return window.getName();

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = HTML_UNIT_JS;
+    String driver = REMOTE;
 
     System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
@@ -45,7 +45,7 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("SelectElementHandlingTest")
+        .onlyRun("WindowSwitchingTest")
 //        .method("testShouldNotCrashWhenCallingGetSizeOnAnObsoleteElement")
         .exclude(ALL)
         .exclude(Ignore.Driver.FIREFOX)

File: common/test/java/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -27,7 +27,7 @@
 
 public class WindowSwitchingTest extends AbstractDriverTestCase {
 
-  @Ignore({IE, REMOTE, SAFARI})
+  @Ignore({IE, SAFARI})
   public void testShouldSwitchFocusToANewWindowWhenItIsOpenedAndNotStopFutureOperations() {
     driver.get(xhtmlTestPage);
 
@@ -56,7 +56,7 @@ public void testShouldThrowNoSuchWindowException() {
 
   @NeedsFreshDriver
   @NoDriverAfterTest
-  @Ignore({IE, REMOTE, SAFARI})
+  @Ignore({IE, SAFARI})
   public void testShouldBeAbleToIterateOverAllOpenWindows() throws Exception {
     driver.get(xhtmlTestPage);
     driver.findElement(By.name("windowOne")).click();
@@ -75,7 +75,7 @@ public void testShouldBeAbleToIterateOverAllOpenWindows() throws Exception {
     }
   }
 
-  @Ignore({IE, REMOTE, SAFARI})
+  @Ignore({IE, SAFARI})
   public void testClickingOnAButtonThatClosesAnOpenWindowDoesNotCauseTheBrowserToHang() {
     driver.get(xhtmlTestPage);
 

File: remote/client/src/java/org/openqa/selenium/remote/HttpCommandExecutor.java
Patch:
@@ -79,8 +79,8 @@ public HttpCommandExecutor(URL addressOfRemoteServer) throws Exception {
 
     nameToUrl.put("newSession", new CommandInfo("/session", HttpVerb.POST));
     nameToUrl.put("quit", new CommandInfo("/session/:sessionId", HttpVerb.DELETE));
-    nameToUrl.put("getCurrentWindowHandle", new CommandInfo("/session/:sessioId/:context/window_handle", HttpVerb.GET));
-    nameToUrl.put("getWindowHandles", new CommandInfo("/session/:sessioId/:context/window_handles", HttpVerb.GET));
+    nameToUrl.put("getCurrentWindowHandle", new CommandInfo("/session/:sessionId/:context/window_handle", HttpVerb.GET));
+    nameToUrl.put("getWindowHandles", new CommandInfo("/session/:sessionId/:context/window_handles", HttpVerb.GET));
     nameToUrl.put("get", new CommandInfo("/session/:sessionId/:context/url", HttpVerb.POST));
     nameToUrl
         .put("forward", new CommandInfo("/session/:sessionId/:context/forward", HttpVerb.POST));

File: remote/server/src/java/org/openqa/selenium/remote/server/DriverServlet.java
Patch:
@@ -111,9 +111,9 @@ public void init() throws ServletException {
     deleteMapper.bind("/session/:sessionId", DeleteSession.class)
         .on(ResultType.SUCCESS, new EmptyResult());
 
-    getMapper.bind("/session/:sessioId/:context/window_handle", GetCurrentWindowHandle.class)
+    getMapper.bind("/session/:sessionId/:context/window_handle", GetCurrentWindowHandle.class)
         .on(ResultType.SUCCESS, new JsonResult(":response"));
-    getMapper.bind("/session/:sessioId/:context/window_handles", GetAllWindowHandles.class)
+    getMapper.bind("/session/:sessionId/:context/window_handles", GetAllWindowHandles.class)
         .on(ResultType.SUCCESS, new JsonResult(":response"));
 
     postMapper.bind("/session/:sessionId/:context/url", ChangeUrl.class)

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = HTML_UNIT;
+    String driver = IE;
 
     System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
@@ -45,8 +45,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ElementFindingTest")
-//        .method("testFoo")
+        .onlyRun("ObsoleteElementTest")
+        .method("testShouldNotCrashWhenCallingGetSizeOnAnObsoleteElement")
         .exclude(ALL)
         .exclude(Ignore.Driver.FIREFOX)
         .leaveRunning()

File: src/src/test/java/org/openqa/selenium/ide/UnitTests.java
Patch:
@@ -32,8 +32,7 @@ public class UnitTests extends TestCase {
     protected void setUp() throws Exception {
         RemoteControlConfiguration configuration = new RemoteControlConfiguration();
         configuration.setFirefoxProfileTemplate(new File(PROFILE_TEMPLATE_DIR));
-        configuration.setMultiWindow(true);
-        SeleniumServer.setCustomProxyHandler(new ProxyHandler(false, "", "") {
+        SeleniumServer.setCustomProxyHandler(new ProxyHandler(false, "", "", false, false) {
             @SuppressWarnings("unchecked")
             @Override
             public void handle(String pathInContext, String pathParams, HttpRequest request, HttpResponse response) throws HttpException, IOException {

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -521,7 +521,7 @@ protected void runHtmlSuite() {
             }
 
             result = launcher.runHTMLSuite(getRequiredSystemProperty("htmlSuite.browserString"), startURL, suiteFile, resultFile,
-                    configuration.getTimeoutInSeconds(), configuration.isMultiWindow());
+                    configuration.getTimeoutInSeconds(), (!configuration.isSingleWindow()));
 
             if (!"PASSED".equals(result)) {
                 System.err.println("Tests failed, see result file for details: " + resultFile.getAbsolutePath());

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/AbstractBrowserLauncher.java
Patch:
@@ -23,15 +23,15 @@ public AbstractBrowserLauncher(String sessionId, RemoteControlConfiguration conf
     }
 
     public void launchHTMLSuite(String suiteUrl, String browserURL) {
-        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, browserConfigurationOptions.isMultiWindow(), 0));
+        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, (!browserConfigurationOptions.isSingleWindow()), 0));
     }
 
     public void launchRemoteSession(String browserURL) {
         boolean browserSideLog = browserConfigurationOptions.is("browserSideLog");
         if (browserSideLog) {
             configuration.getSeleniumServer().generateSSLCertsForLoggingHosts();
         }
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, browserConfigurationOptions.isMultiWindow(), 0, browserSideLog));
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, (!browserConfigurationOptions.isSingleWindow()), 0, browserSideLog));
     }
 
     protected abstract void launch(String url);

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -290,12 +290,12 @@ public void launchHTMLSuite(String suiteUrl, String browserURL) {
         if (suiteUrl != null && suiteUrl.startsWith("TestPrompt.html?")) {
             suiteUrl = suiteUrl.replaceFirst("^TestPrompt\\.html\\?", "chrome://src/content/TestPrompt.html?");
         }
-        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, browserConfigurationOptions.isMultiWindow(), getPort()));
+        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, (!browserConfigurationOptions.isSingleWindow()), getPort()));
     }
     
     @Override // need to specify an absolute driverUrl
     public void launchRemoteSession(String browserURL) { 
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, browserConfigurationOptions.isMultiWindow(), getPort(), browserConfigurationOptions.is("browserSideLog")));
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, (!browserConfigurationOptions.isSingleWindow()), getPort(), browserConfigurationOptions.is("browserSideLog")));
     }
 
 }

File: server-coreless/src/main/java/org/openqa/selenium/server/cli/RemoteControlLauncher.java
Patch:
@@ -78,9 +78,9 @@ public static RemoteControlConfiguration parseLauncherOptions(String[] args) {
             } else if ("-port".equalsIgnoreCase(arg)) {
                 configuration.setPort(Integer.parseInt(getArg(args, ++i)));
             } else if ("-multiWindow".equalsIgnoreCase(arg)) {
-                configuration.setMultiWindow(true);
+                configuration.setSingleWindow(!true);
             } else if ("-singleWindow".equalsIgnoreCase(arg)) {
-                configuration.setMultiWindow(false);
+                configuration.setSingleWindow(!false);
             } else if ("-profilesLocation".equalsIgnoreCase(arg)) {
                 File profilesLocation = new File(getArg(args, ++i));
                 if (!profilesLocation.exists()) {
@@ -93,7 +93,7 @@ public static RemoteControlConfiguration parseLauncherOptions(String[] args) {
             } else if ("-proxyInjectionMode".equalsIgnoreCase(arg)) {
                 configuration.setProxyInjectionModeArg(true);
                 // proxyInjectionMode implies singleWindow mode
-                configuration.setMultiWindow(false);
+                configuration.setSingleWindow(!false);
             } else if ("-portDriversShouldContact".equalsIgnoreCase(arg)) {
                 // to facilitate tcptrace interception of interaction between
                 // injected js and the selenium server

File: server-coreless/src/main/java/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java
Patch:
@@ -86,7 +86,7 @@ private String runHTMLSuite(String browser, String browserURL, String suiteURL,
         BrowserLauncherFactory blf = new BrowserLauncherFactory();
         String sessionId = Long.toString(System.currentTimeMillis() % 1000000);
         BrowserConfigurationOptions browserOptions = new BrowserConfigurationOptions();
-        browserOptions.setMultiWindow(multiWindow);
+        browserOptions.setSingleWindow(!multiWindow);
         BrowserLauncher launcher = blf.getBrowserLauncher(browser, sessionId, remoteControl.getConfiguration(), browserOptions);
         BrowserSessionInfo sessionInfo = new BrowserSessionInfo(sessionId, 
             browser, browserURL, launcher, null);

File: server-coreless/src/test/java/org/openqa/selenium/server/RemoteControlConfigurationUnitTest.java
Patch:
@@ -22,15 +22,15 @@ public void testPortCanBeSet() {
     }
 
     public void testMultiWindowIsTrueByDefault() {
-        assertTrue(new RemoteControlConfiguration().isMultiWindow());
+        assertTrue((!new RemoteControlConfiguration().isSingleWindow()));
     }
 
     public void testMultiWindowCanBeSet() {
         final RemoteControlConfiguration configuration;
         configuration = new RemoteControlConfiguration();
 
-        configuration.setMultiWindow(true);
-        assertTrue(configuration.isMultiWindow());
+        configuration.setSingleWindow(!true);
+        assertTrue((!configuration.isSingleWindow()));
     }
 
     public void testProxyInjectionModeArgIsFalseByDefault() {

File: clients/java/src/main/java/com/thoughtworks/selenium/SeleneseTestBase.java
Patch:
@@ -47,7 +47,7 @@ public class SeleneseTestBase {
     /** Use this object to run all of your selenium tests */
     protected Selenium selenium;
     
-    private StringBuffer verificationErrors = new StringBuffer();
+    protected StringBuffer verificationErrors = new StringBuffer();
     
     public SeleneseTestBase() {
         super();

File: server-coreless/src/main/java/org/openqa/selenium/server/BrowserSessionFactory.java
Patch:
@@ -348,7 +348,7 @@ protected BrowserSessionInfo createNewRemoteSession(String browserString, String
         LOGGER.info("Allocated session " + sessionId + " for " + startURL + ", launching...");
 
         try {
-            launcher.launchRemoteSession(startURL, configuration.isMultiWindow(), browserConfiguration);
+            launcher.launchRemoteSession(startURL);
             queueSet.waitForLoad(configuration.getTimeoutInSeconds() * 1000l);
 
             // TODO DGF log4j only

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -494,11 +494,11 @@ public String doCommand(String cmd, Vector<String> values, String sessionId, Htt
             } else {
                 String browser = values.get(0);
                 String newSessionId = generateNewSessionId();
-                BrowserLauncher simpleLauncher = browserLauncherFactory.getBrowserLauncher(browser, newSessionId, remoteControl.getConfiguration(), null);
+                BrowserLauncher simpleLauncher = browserLauncherFactory.getBrowserLauncher(browser, newSessionId, remoteControl.getConfiguration(), new BrowserConfigurationOptions());
                 String baseUrl = "http://localhost:" + remoteControl.getPort();
                 remoteControl.registerBrowserSession(new BrowserSessionInfo(
                     newSessionId, browser, baseUrl, simpleLauncher, null));
-                simpleLauncher.launchHTMLSuite("TestPrompt.html?thisIsSeleniumServer=true", baseUrl, false);
+                simpleLauncher.launchHTMLSuite("TestPrompt.html?thisIsSeleniumServer=true", baseUrl);
                 results = "OK";
             }
         } else if ("slowResources".equals(cmd)) {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/BrowserLauncherFactory.java
Patch:
@@ -78,6 +78,9 @@ public BrowserLauncher getBrowserLauncher(String browser, String sessionId, Remo
         if (browser == null) {
             throw new IllegalArgumentException("browser may not be null");
         }
+        if (!browserOptions.hasOptions()) {
+            browserOptions.setMultiWindow(configuration.isMultiWindow());
+        }
 
         for (String key : supportedBrowsers.keySet()) {
             final BrowserStringParser.Result result;

File: server-coreless/src/test/java/org/openqa/selenium/server/BrowserSessionFactoryUnitTest.java
Patch:
@@ -51,7 +51,7 @@ protected FrameGroupCommandQueueSet getQueueSet(String sessionId) {
         
         expect(blf.getBrowserLauncher(isA(String.class), isA(String.class), 
                 isA(RemoteControlConfiguration.class), isA(BrowserConfigurationOptions.class))).andReturn(launcherMock);
-        launcherMock.launchRemoteSession("",true, bco);
+        launcherMock.launchRemoteSession("");
         expectLastCall().once();
         replay(launcherMock);
         replay(blf);

File: server-coreless/src/test/java/org/openqa/selenium/server/SeleniumDriverResourceHandlerUnitTest.java
Patch:
@@ -42,7 +42,7 @@ public void testThrowsExceptionOnFailedBrowserLaunch() throws Exception {
     server.start();
     SeleniumDriverResourceHandler sdrh = new SeleniumDriverResourceHandler(server);
     try {
-      sdrh.getNewBrowserSession("*mock", null, "", null);
+      sdrh.getNewBrowserSession("*mock", null, "", new BrowserConfigurationOptions());
       fail("Launch should have failed");
     } catch (RemoteCommandException rce) {
       // passes.

File: server-coreless/src/main/java/org/openqa/selenium/server/BrowserSessionFactory.java
Patch:
@@ -338,7 +338,7 @@ protected BrowserSessionInfo createNewRemoteSession(String browserString, String
         queueSet.setExtensionJs(extensionJs);
         
         try {
-        	launcher = browserLauncherFactory.getBrowserLauncher(browserString, sessionId, configuration);
+        	launcher = browserLauncherFactory.getBrowserLauncher(browserString, sessionId, configuration, browserConfiguration);
         } catch (InvalidBrowserExecutableException e) {
         	throw new RemoteCommandException(e.getMessage(), "");
         }

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -494,11 +494,11 @@ public String doCommand(String cmd, Vector<String> values, String sessionId, Htt
             } else {
                 String browser = values.get(0);
                 String newSessionId = generateNewSessionId();
-                BrowserLauncher simpleLauncher = browserLauncherFactory.getBrowserLauncher(browser, newSessionId, remoteControl.getConfiguration());
+                BrowserLauncher simpleLauncher = browserLauncherFactory.getBrowserLauncher(browser, newSessionId, remoteControl.getConfiguration(), null);
                 String baseUrl = "http://localhost:" + remoteControl.getPort();
                 remoteControl.registerBrowserSession(new BrowserSessionInfo(
                     newSessionId, browser, baseUrl, simpleLauncher, null));
-                simpleLauncher.launchHTMLSuite("TestPrompt.html?thisIsSeleniumServer=true", baseUrl, false, "info");
+                simpleLauncher.launchHTMLSuite("TestPrompt.html?thisIsSeleniumServer=true", baseUrl, false);
                 results = "OK";
             }
         } else if ("slowResources".equals(cmd)) {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/DestroyableRuntimeExecutingBrowserLauncher.java
Patch:
@@ -33,7 +33,7 @@ public class DestroyableRuntimeExecutingBrowserLauncher extends AbstractBrowserL
     
     /** Specifies a command path to run */
     public DestroyableRuntimeExecutingBrowserLauncher(String commandPath, String sessionId) {
-        super(sessionId, null);
+        super(sessionId, null, null);
         this.commandPath = commandPath;
         this.sessionId = sessionId;
     }

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -177,7 +177,7 @@ protected static String getQueryString(String url) {
 		}
 	}
 
-	protected static String getDefaultHTMLSuiteUrl(String browserURL, String suiteUrl, boolean multiWindow, int serverPort, String defaultLogLevel) {
+	protected static String getDefaultHTMLSuiteUrl(String browserURL, String suiteUrl, boolean multiWindow, int serverPort) {
 		String url = LauncherUtils.stripStartURL(browserURL);
         String resultsUrl;
         if (serverPort == 0) {
@@ -187,7 +187,7 @@ protected static String getDefaultHTMLSuiteUrl(String browserURL, String suiteUr
         }
 		return url + "/selenium-server/core/TestRunner.html?auto=true"
                 + "&multiWindow=" + multiWindow
-                + "&defaultLogLevel=" + defaultLogLevel
+                + "&defaultLogLevel=info"
                 + "&baseUrl=" + urlEncode(browserURL) + "/selenium-server/tests/"
                 + "&resultsUrl=" + resultsUrl
                 + "&test=" + urlEncode(suiteUrl);

File: server-coreless/src/main/java/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java
Patch:
@@ -84,13 +84,13 @@ private String runHTMLSuite(String browser, String browserURL, String suiteURL,
         remoteControl.handleHTMLRunnerResults(this);
         BrowserLauncherFactory blf = new BrowserLauncherFactory();
         String sessionId = Long.toString(System.currentTimeMillis() % 1000000);
-        BrowserLauncher launcher = blf.getBrowserLauncher(browser, sessionId, remoteControl.getConfiguration());
+        BrowserLauncher launcher = blf.getBrowserLauncher(browser, sessionId, remoteControl.getConfiguration(), null);
         BrowserSessionInfo sessionInfo = new BrowserSessionInfo(sessionId, 
             browser, browserURL, launcher, null);
         remoteControl.registerBrowserSession(sessionInfo);
         
         // JB: -- aren't these URLs in the wrong order according to declaration?
-        launcher.launchHTMLSuite(suiteURL, browserURL, multiWindow, defaultLogLevel);
+        launcher.launchHTMLSuite(suiteURL, browserURL, multiWindow);
         long now = System.currentTimeMillis();
         long end = now + timeoutInMs;
         while (results == null && System.currentTimeMillis() < end) {

File: server-coreless/src/test/java/org/openqa/selenium/server/BrowserSessionFactoryUnitTest.java
Patch:
@@ -49,7 +49,8 @@ protected FrameGroupCommandQueueSet getQueueSet(String sessionId) {
         	}
         };
         
-        expect(blf.getBrowserLauncher(isA(String.class), isA(String.class), isA(RemoteControlConfiguration.class))).andReturn(launcherMock);
+        expect(blf.getBrowserLauncher(isA(String.class), isA(String.class), 
+                isA(RemoteControlConfiguration.class), isA(BrowserConfigurationOptions.class))).andReturn(launcherMock);
         launcherMock.launchRemoteSession("",true, bco);
         expectLastCall().once();
         replay(launcherMock);

File: server-coreless/src/test/java/org/openqa/selenium/server/browserlaunchers/BrowserLauncherFactoryUnitTest.java
Patch:
@@ -11,7 +11,7 @@ public class BrowserLauncherFactoryUnitTest extends TestCase {
     public void testAllSupportedBrowsersDefineAppropriateConstructor() {
         for (String browser : BrowserLauncherFactory.getSupportedLaunchers().keySet()) {
             try {
-                new BrowserLauncherFactory().getBrowserLauncher("*" + browser, "a-session-id", new RemoteControlConfiguration());
+                new BrowserLauncherFactory().getBrowserLauncher("*" + browser, "a-session-id", new RemoteControlConfiguration(), null);
             } catch (RuntimeException e) {
                 if (e.getCause() instanceof NoSuchMethodException) {
                     fail(browser + " browser does not define appropriate constructor: " + e.getMessage());

File: server-coreless/src/test/java/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncherUnitTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import junit.framework.TestCase;
 
+import org.openqa.selenium.server.BrowserConfigurationOptions;
 import org.openqa.selenium.server.RemoteControlConfiguration;
 
 import java.io.File;
@@ -62,7 +63,7 @@ public static class FirefoxCustomProfileLauncherStubbedForShutdown
       private boolean throwProcessKillException = true;
       
       public FirefoxCustomProfileLauncherStubbedForShutdown() {
-        super(new RemoteControlConfiguration(), "testsession");
+        super(new BrowserConfigurationOptions(), new RemoteControlConfiguration(), "testsession", (String)null);
       }
       
       public void haveProcessKillThrowException(boolean doThrow) {

File: server-coreless/src/test/java/org/openqa/selenium/server/browserlaunchers/SafariLauncherIntegrationTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.openqa.selenium.server.browserlaunchers;
 
+import org.openqa.selenium.server.BrowserConfigurationOptions;
 import org.openqa.selenium.server.RemoteControlConfiguration;
 import org.apache.commons.logging.Log;
 import org.mortbay.log.LogFactory;
@@ -17,7 +18,7 @@ public class SafariLauncherIntegrationTest extends TestCase {
     public void testLauncherWithDefaultConfiguration() throws Exception {
         final SafariCustomProfileLauncher launcher;
 
-        launcher = new SafariCustomProfileLauncher(new RemoteControlConfiguration(), "CUST");
+        launcher = new SafariCustomProfileLauncher(new BrowserConfigurationOptions(), new RemoteControlConfiguration(), "CUST", (String) null);
         launcher.launch("http://www.google.com");
         int seconds = 15;
         LOGGER.info("Killing browser in " + Integer.toString(seconds) + " seconds");
@@ -33,7 +34,7 @@ public void testLauncherWithHonorSystemProxyEnabled() throws Exception {
         configuration = new RemoteControlConfiguration();
         configuration.setHonorSystemProxy(true);
         
-        launcher = new SafariCustomProfileLauncher(configuration, "CUST");
+        launcher = new SafariCustomProfileLauncher(new BrowserConfigurationOptions(), configuration, "CUST", (String) null);
         launcher.launch("http://www.google.com");
         int seconds = 15;
         LOGGER.info("Killing browser in " + Integer.toString(seconds) + " seconds");

File: common/test/java/org/openqa/selenium/AbstractDriverTestCase.java
Patch:
@@ -48,7 +48,7 @@ public void setDriver(WebDriver driver) {
 
 	@Override
 	protected void setUp() throws Exception {
-		super.setUp();
+        super.setUp();
 
         TestEnvironment environment = GlobalTestEnvironment.get();
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -45,8 +45,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("PageLoadingTest")
-//        .method("testShouldBeAbleToFindMultipleElementsByPartialLinkText")
+        .onlyRun("ElementFindingTest")
+//        .method("testFoo")
         .exclude(ALL)
         .exclude(Ignore.Driver.FIREFOX)
         .leaveRunning()

File: firefox/src/java/org/openqa/selenium/firefox/Response.java
Patch:
@@ -28,7 +28,7 @@
 import java.util.List;
 
 public class Response {
-	private final JSONObject result;
+    private final JSONObject result;
     private final String methodName;
     private final Context context;
     private final String responseText;

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/WindowsProxyManager.java
Patch:
@@ -105,7 +105,7 @@ protected void handleEvilPopupMgrBackup() {
         // if we're here, we know the current type of pop-up manager,
         // and the backup has a different (wrong) type
         if (backupPopupMgrType != null) {
-            WindowsUtils.deleteRegistryValue(RegKey.POPUP_MGR.name());
+            WindowsUtils.deleteRegistryValue(RegKey.POPUP_MGR.key);
         }
         if (!backupIsReady()) {
             return;

File: jobbie/src/java/org/openqa/selenium/ie/ExportedWebDriverFunctions.java
Patch:
@@ -1,4 +1,4 @@
-package org.openqa.selenium.ie.internal;
+package org.openqa.selenium.ie;
 
 import com.sun.jna.NativeLong;
 import com.sun.jna.Pointer;
@@ -10,7 +10,7 @@
 import com.sun.jna.ptr.PointerByReference;
 import com.sun.jna.win32.StdCallLibrary;
 
-public interface ExportedWebDriverFunctions extends StdCallLibrary {
+interface ExportedWebDriverFunctions extends StdCallLibrary {
   int SUCCESS = 0;
   
   int wdNewDriverInstance(PointerByReference ptr);

File: jobbie/src/java/org/openqa/selenium/ie/Finder.java
Patch:
@@ -17,16 +17,15 @@
 
 package org.openqa.selenium.ie;
 
-import static org.openqa.selenium.ie.internal.ExportedWebDriverFunctions.SUCCESS;
+import static org.openqa.selenium.ie.ExportedWebDriverFunctions.SUCCESS;
 
 import java.util.List;
 
 import org.openqa.selenium.By;
 import org.openqa.selenium.NoSuchElementException;
 import org.openqa.selenium.SearchContext;
 import org.openqa.selenium.WebElement;
-import org.openqa.selenium.ie.internal.ElementCollection;
-import org.openqa.selenium.ie.internal.ExportedWebDriverFunctions;
+import org.openqa.selenium.ie.ElementCollection;
 import org.openqa.selenium.internal.FindsByClassName;
 import org.openqa.selenium.internal.FindsById;
 import org.openqa.selenium.internal.FindsByLinkText;

File: iphone/src/java/org/openqa/selenium/iphone/IPhoneDriver.java
Patch:
@@ -45,7 +45,6 @@ public IPhoneDriver(URL remoteAddress) throws Exception {
   /**
    * Create an IPhoneDriver connected to the remote address passed in.
    * @param remoteAddress The full URL of the remote client running iWebDriver.
-   *                      No trailing slash.
    * @throws Exception
    * @see IPhoneDriver(URL remoteAddress)
    */

File: iphone/test/java/org/openqa/selenium/iphone/IPhoneDriverTestSuite.java
Patch:
@@ -27,7 +27,7 @@ public class IPhoneDriverTestSuite extends TestCase {
 
   public static Test suite() throws Exception {
     return new TestSuiteBuilder()
-        .addSourceDir("remote")
+        .addSourceDir("iphone")
         .addSourceDir("remote")
         .addSourceDir("common")
         .usingDriver(IPhoneDriver.class)

File: iphone/test/java/org/openqa/selenium/iphone/MultitouchTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.openqa.selenium.iphone;
 
-public class MultitouchTest {
-	public void testFoo() {
+import junit.framework.TestCase;
 
-	}
+public class MultitouchTest extends TestCase {
+  
 }

File: iphone/src/java/org/openqa/selenium/iphone/IPhoneDriver.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * IPhoneDriver is a driver for running tests on Mobile Safari on the iPhone
- *  / iPod Touch.
+ *  and iPod Touch.
  * 
  * The driver uses WebDriver's remote REST interface to communicate with the
  * iphone. The iphone (or iphone simulator) must be running the iWebDriver app.

File: common/test/java/org/openqa/selenium/Ignore.java
Patch:
@@ -27,7 +27,7 @@
 public @interface Ignore {
 
   public static enum Driver {
-    ALL, HTMLUNIT, IE, FIREFOX, SAFARI, REMOTE
+    ALL, HTMLUNIT, IE, FIREFOX, SAFARI, REMOTE, IPHONE
   }
 
   Driver[] value() default { Driver.ALL };

File: jobbie/src/java/org/openqa/selenium/ie/InternetExplorerDriver.java
Patch:
@@ -37,6 +37,7 @@
 import org.openqa.selenium.Cookie;
 import org.openqa.selenium.JavascriptExecutor;
 import org.openqa.selenium.NoSuchFrameException;
+import org.openqa.selenium.NoSuchWindowException;
 import org.openqa.selenium.SearchContext;
 import org.openqa.selenium.Speed;
 import org.openqa.selenium.WebDriver;
@@ -297,7 +298,7 @@ public WebDriver frame(String frameName) {
         }
 
         public WebDriver window(String windowName) {
-            return null; // For the sake of getting us off the ground
+            throw new NoSuchWindowException("Unable to switch to window: " + windowName);
         }
 
       public WebDriver defaultContent() {
@@ -340,6 +341,7 @@ public void to(URL url) {
     }
     
     private class InternetExplorerOptions implements Options {
+      
 		public void addCookie(Cookie cookie) {
 		  int result = lib.wdAddCookie(driver, new WString(cookie.toString()));
 		 

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxProfile.java
Patch:
@@ -320,7 +320,7 @@ public void setPreference(String key, String value) {
      * @param value The new value.
      */
     public void setPreference(String key, boolean value) {
-        additionalPrefs.setPreference(key, String.valueOf(value));
+        additionalPrefs.setPreference(key, value);
     }
 
     /**
@@ -330,7 +330,7 @@ public void setPreference(String key, boolean value) {
      * @param value The new value.
      */
     public void setPreference(String key, int value) {
-        additionalPrefs.setPreference(key, String.valueOf(value));
+        additionalPrefs.setPreference(key, value);
     }
 
     protected Preferences getAdditionalPreferences() {

File: common/src/java/org/openqa/selenium/By.java
Patch:
@@ -167,14 +167,14 @@ public static By tagName(final String name) {
         public List<WebElement> findElements(SearchContext context) {
             if (context instanceof FindsByTagName)
               return ((FindsByTagName) context).findElementsByTagName(name);
-            return ((FindsByXPath) context).findElementsByXPath(name);
+            return ((FindsByXPath) context).findElementsByXPath(".//" + name);
         }
 
         @Override
         public WebElement findElement(SearchContext context) {
           if (context instanceof FindsByTagName)
             return ((FindsByTagName) context).findElementByTagName(name);
-          return ((FindsByXPath) context).findElementByXPath(name);
+          return ((FindsByXPath) context).findElementByXPath(".//" + name);
         }
         
         @Override

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = FIREFOX;
+    String driver = REMOTE;
 
     System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
@@ -45,10 +45,10 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("CookieImplementationTest")
+        .onlyRun("ElementFindingTest")
 //        .method("testShouldBeAbleToSetDomainToTheCurrentDomain")
         .exclude(ALL)
-//        .exclude(Ignore.Driver.IE)
+        .exclude(Ignore.Driver.REMOTE)
         .leaveRunning()
         ;  // Yeah, this look strange :)
 

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -201,11 +201,11 @@ public List<WebElement> findElementsByName(String using) {
   }
 
   public WebElement findElementByTagName(String using) {
-    return findElement("selectElementByTagName", using);
+    return findElement("selectElementUsingTagName", using);
   }
 
   public List<WebElement> findElementsByTagName(String using) {
-    return findElements("selectElementsByTagName", using);
+    return findElements("selectElementsUsingTagName", using);
   }
   
   public WebElement findElementByXPath(String using) {

File: firefox/test/java/org/openqa/selenium/firefox/FirefoxDriverTest.java
Patch:
@@ -78,10 +78,10 @@ public void testShouldBeAbleToStartMoreThanOneInstanceOfTheFirefoxDriverSimultan
       // We only need to quit the second driver if the test passes
       secondDriver.quit();
     }
-    
+
     public void testShouldBeAbleToStartFromAUniqueProfile() {
       FirefoxProfile profile = new FirefoxProfile();
-      
+
       try {
         WebDriver secondDriver = new FirefoxDriver(profile);
         secondDriver.quit();

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = IE;
+    String driver = FIREFOX;
 
     System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
@@ -45,8 +45,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("VisibilityTest")
-        .method("testShouldNotBeAbleToToggleAnElementThatIsNotDisplayed")
+        .onlyRun("CookieImplementationTest")
+//        .method("testShouldBeAbleToSetDomainToTheCurrentDomain")
         .exclude(ALL)
 //        .exclude(Ignore.Driver.IE)
         .leaveRunning()

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -450,7 +450,7 @@ public Set<Cookie> getCookies() {
                   String expiry = attributesMap.get("expires");
                   if (expiry != null && !"".equals(expiry) && !expiry.equals("0")) {
                         //firefox stores expiry as number of seconds
-                        expires = new Date(Long.parseLong(attributesMap.get("expires")));
+                        expires = new Date(Long.parseLong(attributesMap.get("expires")) * 1000);
                     }
 
                     cookies.add(new ReturnedCookie(attributesMap.get("name"), attributesMap.get("value"),

File: firefox/src/java/org/openqa/selenium/firefox/internal/NewProfileExtensionConnection.java
Patch:
@@ -59,7 +59,7 @@ protected void connectToBrowser(long timeToWaitInMilliSeconds) throws IOExceptio
       super.connectToBrowser(timeToWaitInMilliSeconds);
     } catch (WebDriverException e) {
       throw new WebDriverException(
-          String.format("Failed to connect to browser; process output follows: \n%s", process.drainInputStream()), e);
+          String.format("Failed to connect to browser; process output follows: \n%s", process.getConsoleOutput()), e);
     }
   }
 

File: selenium/src/java/org/openqa/selenium/WebDriverBackedSelenium.java
Patch:
@@ -652,8 +652,8 @@ public void submit(String formLocator) {
   public void open(String url) {
     String urlToOpen = url;
 
-    if (!url.startsWith("/") && !url.startsWith("http")) {
-      urlToOpen = baseUrl + "/" + url;
+    if (url.indexOf("://") == -1) {
+      urlToOpen = baseUrl + (!url.startsWith("/") ? "/" : "") + url;
     }
     driver.get(urlToOpen);
   }

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -33,7 +33,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = IE;
+    String driver = HTML_UNIT;
 
     System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
@@ -45,7 +45,7 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("VisibilityTest")
+        .onlyRun("ElementAttributeTest")
 //        .method("testShouldNotBeAbleToClickOnAnElementThatIsNotDisplayed")
         .exclude(ALL)
 //        .exclude(Ignore.Driver.IE)

File: support/test/java/org/openqa/selenium/support/ui/LoadableComponentTest.java
Patch:
@@ -41,6 +41,7 @@ public void testShouldThrowAnErrorIfCallingLoadDoesNotCauseTheComponentToLoad()
 
     try {
       ok.get();
+      fail();
     } catch (Error e) {
       assertEquals("Expected failure", e.getMessage());
     }

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -31,7 +31,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = IE;
+    String driver = FIREFOX;
 
     System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
@@ -43,8 +43,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("CorrectEventFiringTest")
-//         .method("testShouldFindElementsByXPath")
+        .onlyRun("ChildrenFindingTest")
+//         .method("testClickingOnAButtonThatClosesAnOpenWindowDoesNotCauseTheBrowserToHang")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: common/test/java/org/openqa/selenium/CorrectEventFiringTest.java
Patch:
@@ -126,7 +126,7 @@ public void testMouseEventsShouldBubbleUpToContainingElements() {
 	public void testShouldEmitOnChangeEventsWhenSelectingElements() {
 		driver.get(javascriptPage);
 		WebElement select = driver.findElement(By.id("selector"));
-		List<WebElement> allOptions = select.getChildrenOfType("option");
+		List<WebElement> allOptions = select.getElementsByTagName("option");
 
 		String initialTextValue = driver.findElement(By.id("result")).getText();
 

File: common/test/java/org/openqa/selenium/ElementAttributeTest.java
Patch:
@@ -52,7 +52,7 @@ public void testShouldReturnTheValueOfTheIndexAttrbuteEvenIfItIsMissing() {
         driver.get(formPage);
 
         WebElement multiSelect = driver.findElement(By.id("multi"));
-        List<WebElement> options = multiSelect.getChildrenOfType("option");
+        List<WebElement> options = multiSelect.getElementsByTagName("option");
         assertThat(options.get(1).getAttribute("index"), equalTo("1"));
     }
 
@@ -91,7 +91,7 @@ public void testShouldReturnTheValueOfSelectedForRadioButtonsEvenIfTheyLackThatA
     public void testShouldReturnTheValueOfSelectedForOptionsInSelectsEvenIfTheyLackThatAttribute() {
         driver.get(formPage);
         WebElement selectBox = driver.findElement(By.xpath("//select[@name='selectomatic']"));
-        List<WebElement> options = selectBox.getChildrenOfType("option");
+        List<WebElement> options = selectBox.getElementsByTagName("option");
         WebElement one = options.get(0);
         WebElement two = options.get(1);
         assertThat(one.isSelected(), is(true));

File: common/test/java/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -98,15 +98,15 @@ public void testShouldBeAbleToFindChildrenOfANode() {
         driver.get(xhtmlTestPage);
         List<WebElement> elements = driver.findElements(By.xpath("/html/head"));
         WebElement head = elements.get(0);
-        List<WebElement> importedScripts = head.getChildrenOfType("script");
+        List<WebElement> importedScripts = head.getElementsByTagName("script");
         assertThat(importedScripts.size(), equalTo(2));
     }
 
     @Ignore("safari")
     public void testReturnAnEmptyListWhenThereAreNoChildrenOfANode() {
         driver.get(xhtmlTestPage);
         WebElement table = driver.findElement(By.id("table"));
-        List<WebElement> rows = table.getChildrenOfType("tr");
+        List<WebElement> rows = table.getElementsByTagName("tr");
 
         assertThat(rows.size(), equalTo(0));
     }

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -31,7 +31,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = FIREFOX;
+    String driver = HTML_UNIT_JS;
 
     System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
@@ -43,7 +43,7 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("DragAndDropTest")
+        .onlyRun("SelectElementHandlingTest")
 //         .method("testShouldAllowUsersToDragAndDropToElementsOffTheCurrentViewPort")
 //        .exclude("ie")
         .leaveRunning()

File: common/test/java/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -64,7 +64,7 @@ public void testShouldIgnoreScriptElements() {
         WebElement labelForUsername = driver.findElement(By.id("labelforusername"));
         String text = labelForUsername.getText();
 
-        assertThat(labelForUsername.getChildrenOfType("script").size(), is(1));
+        assertThat(labelForUsername.getElementsByTagName("script").size(), is(1));
         assertThat(text, not(containsString("document.getElementById")));
         assertThat(text, is("Username:"));
     }

File: remote/server/src/java/org/openqa/selenium/remote/server/handler/FindElementChildren.java
Patch:
@@ -51,7 +51,7 @@ public ResultType call() throws Exception {
 
     Set<String> urls = new LinkedHashSet<String>();
     WebElement parent = getKnownElements().get(id);
-    List<WebElement> elements = parent.getChildrenOfType(name);
+    List<WebElement> elements = parent.getElementsByTagName(name);
 
     for (WebElement element : elements) {
       String elementId = getKnownElements().add(element);

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/locators/Firefox3Locator.java
Patch:
@@ -62,7 +62,7 @@ protected String[] usualUnixLauncherLocations() {
 
         ubuntoLocationPaths = new String[ubuntuLocations.length];
         for (int i = 0; i < ubuntuLocations.length; i++) {
-            ubuntoLocationPaths[i] = UBUNTU_BASE_DIR + File.separator + ubuntuLocations[i];
+            ubuntoLocationPaths[i] = UBUNTU_BASE_DIR + "/" + ubuntuLocations[i];
         }
         return ubuntoLocationPaths;
     }

File: server-coreless/src/test/java/org/openqa/selenium/server/browserlaunchers/locators/Firefox3LocatorUnitTest.java
Patch:
@@ -52,7 +52,7 @@ protected boolean runningOnWindows() {
 
             @Override
             protected String[] firefoxDefaultLocationsOnUbuntu() {
-                return new String[] { "/usr/lib/firefox-3.0.3" };
+                return new String[] { "firefox-3.0.3" };
             }
         };
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -37,14 +37,14 @@ public static Test suite() throws Exception {
 //    System.setProperty("webdriver.firefox.useExisting", "true");
 
     TestSuiteBuilder builder = new TestSuiteBuilder()
-    	.addSourceDir("../common")
+        .addSourceDir("../common")
         .addSourceDir("common")
         .addSourceDir("firefox")
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("CorrectEventFiringTest")
-//         .method("testFindElementByLinkText")
+        .onlyRun("DragAndDropTest")
+//         .method("testShouldAllowUsersToDragAndDropToElementsOffTheCurrentViewPort")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: common/test/java/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -57,7 +57,7 @@ public void testShouldReturnTheEntireTextContentOfChildElements() {
         assertThat(text.contains("and block level elements"), is(true));
     }
 
-    @Ignore(value = "safari", reason = "Safari: Test fails. IE: Underlying model removes the necessary spaces. Bah!")
+    @Ignore(value = "firefox, safari", reason = "Safari: Test fails. IE: Underlying model removes the necessary spaces. Bah!")
     public void testShouldRepresentABlockLevelElementAsANewline() {
         driver.get(simpleTestPage);
         String text = driver.findElement(By.id("multiline")).getText();

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -14,8 +14,9 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = FIREFOX;
+    String driver = HTML_UNIT_JS;
 
+    System.setProperty("webdriver.firefox.development", "true");
 //    System.setProperty("webdriver.firefox.useExisting", "true");
 
     TestSuiteBuilder builder = new TestSuiteBuilder()
@@ -25,7 +26,7 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ChildrenFindingTest")
+        .onlyRun("ObjectStateAssumptions")
 //         .method("testFindElementByLinkText")
 //        .exclude("ie")
         .leaveRunning()

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/WindowsUtils.java
Patch:
@@ -265,7 +265,7 @@ public static String getProgramFilesPath() {
     public static String getLocalAppDataPath() {
         loadEnvironment();
         final String keyLocalAppData =
-            "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\\Local AppData";
+            "HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\\Local AppData";
         String localAppDataPath = readStringRegistryValue(keyLocalAppData);
         String userProfile = getEnvVarIgnoreCase("USERPROFILE");
         if (userProfile != null) {

File: sample/src/AllTests.java
Patch:
@@ -16,6 +16,7 @@ public static Test suite() {
     TestSuite suite = new AllTests("Example Tests");
     suite.addTestSuite(ExampleSeleniumTest.class);
 	suite.addTestSuite(ExampleUITest.class);
+	suite.addTestSuite(YahooTest.class);
 	suite.addTestSuite(ExampleUsingConditionsTest.class);
     return suite;
   }

File: sample/src/ExampleSeleniumTest.java
Patch:
@@ -12,7 +12,7 @@ public void setUp() {
 
 	    public void testGoogleForSomeThings() throws InterruptedException {
 	        browser.showContextualBanner();
-	        browser.open("/webhp?hl=en");
+	        browser.open("/webhp?hl=en"); // relative URL is correct idiom for open()
 	        browser.type("name=q", "hello world");
 	        browser.click("btnG");
 	        browser.waitForPageToLoad("5000");

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxLauncher.java
Patch:
@@ -3,7 +3,6 @@
 import org.openqa.selenium.firefox.internal.ProfilesIni;
 import org.openqa.selenium.firefox.internal.RunningInstanceConnection;
 
-import java.io.File;
 import java.io.IOException;
 import java.net.ConnectException;
 
@@ -18,15 +17,15 @@ public static void main(String[] args) throws IOException {
         FirefoxLauncher launcher = new FirefoxLauncher(new FirefoxBinary());
 
         if (args.length == 0)
-            launcher.createBaseWebDriverProfile();
+            launcher.createBaseWebDriverProfile("WebDriver");
         else if (args.length == 1)
             launcher.createBaseWebDriverProfile(args[0]);
         else
             launcher.createBaseWebDriverProfile(args[0], Integer.parseInt(args[1]));
     }
 
     public void createBaseWebDriverProfile() throws IOException {
-        createBaseWebDriverProfile(FirefoxDriver.DEFAULT_PROFILE);
+        createBaseWebDriverProfile(null);
     }
 
     public void createBaseWebDriverProfile(String profileName) throws IOException {

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -746,7 +746,7 @@ public static String getLastSessionId() {
         return lastSessionId;
     }
 
-    private static void setLastSessionId(String sessionId) {
+    public static void setLastSessionId(String sessionId) {
         SeleniumDriverResourceHandler.lastSessionId = sessionId;
     }
 

File: common/test/java/org/openqa/selenium/ElementFindingTest.java
Patch:
@@ -150,7 +150,7 @@ public void testShouldBeAbleToFindMultipleElementsByLinkText() {
     	assertTrue("Expected 2 links, got " + elements.size(), elements.size() == 2);
     }
 
-    @Ignore("safari, ie")
+    @Ignore("safari, ie, remote")
     public void testShouldBeAbleToFindMultipleElementsByPartialLinkText() {
     	driver.get(xhtmlTestPage);
 
@@ -159,7 +159,7 @@ public void testShouldBeAbleToFindMultipleElementsByPartialLinkText() {
     	assertTrue(elements.size() == 2);
     }
 
-    @Ignore("safari, ie")
+    @Ignore("safari, ie, remote")
     public void testShouldBeAbleToFindElementByPartialLinkText() {
     	driver.get(xhtmlTestPage);
 

File: remote/common/src/java/org/openqa/selenium/remote/BeanToJsonConverter.java
Patch:
@@ -161,6 +161,8 @@ private Object mapObject(Object toConvert, int maxDepth) throws Exception {
       if (readMethod == null)
         continue;
 
+      readMethod.setAccessible(true);
+
       Object result = readMethod.invoke(toConvert);
       mapped.put(pd.getName(), convertObject(result, maxDepth - 1));
     }

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -121,7 +121,6 @@ public FirefoxDriver(FirefoxBinary binary, FirefoxProfile profile) {
         }
 
         fixId();
-
     }
 
     private FirefoxDriver(ExtensionConnection extension, Context context) {

File: common/test/java/org/openqa/selenium/JavascriptEnabledDriverTest.java
Patch:
@@ -211,7 +211,7 @@ public void testIfNoElementHasFocusTheActiveElementIsTheBody() {
   }
 
   @JavascriptEnabled
-  @Ignore(value = "safari, firefox, remote", reason = "Firefox: Window demands focus to work. Other platforms: not properly tested")
+  @Ignore(value = "safari, firefox, remote, htmlunit", reason = "Firefox: Window demands focus to work. Other platforms: not properly tested")
   public void testChangeEventIsFiredAppropriatelyWhenFocusIsLost() {
     driver.get(javascriptPage);
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -25,8 +25,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("FormHandlingTest")
-//         .method("testShouldNotBeAbleToTypeAnElementThatIsNotDisplayed")
+        .onlyRun("TypingTest")
+//         .method("testNumberpadAndFunctionKeys")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -25,8 +25,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("TextHandlingTest")
-         .method("testReadALargeAmountOfData")
+        .onlyRun("FormHandlingTest")
+//         .method("testShouldNotBeAbleToTypeAnElementThatIsNotDisplayed")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: common/src/java/org/openqa/selenium/WebDriver.java
Patch:
@@ -121,7 +121,9 @@ public interface WebDriver {
      * returned text is that of the modified page. Please consult the
      * documentation of the particular driver being used to determine whether
      * the returned text reflects the current state of the page or the text last
-     * sent by the web server.
+     * sent by the web server. The page source returned is a representation of
+     * the underlying DOM: do not expect it to be formatted or escaped in the same
+     * way as the response sent from the web server.
      *
      * @return The source of the current page
      */

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -25,8 +25,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("TypingTest")
-         .method("testDeleteAndBackspaceKeys")
+        .onlyRun("TextHandlingTest")
+         .method("testReadALargeAmountOfData")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: jobbie/src/java/org/openqa/selenium/ie/InternetExplorerDriver.java
Patch:
@@ -52,9 +52,7 @@ private InternetExplorerDriver(long iePointer) {
         this.iePointer = iePointer;
     }
 
-    public String getPageSource() {
-        throw new UnsupportedOperationException("getPageSource");
-    }
+    public native String getPageSource();
 
     public native void close();
     

File: common/src/java/org/openqa/selenium/Platform.java
Patch:
@@ -27,7 +27,7 @@ public boolean is(Platform compareWith) {
   /**
    * For versions of Windows that "feel like" Windows XP. These are
    * ones that store files in "\Program Files\" and documents under
-   * "\documents and settings\username"
+   * "\\documents and settings\\username"
    */
   XP("xp", "windows") {
     public String getLineEnding() {

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -14,7 +14,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = HTML_UNIT;
+    String driver = IE;
 
     System.setProperty("webdriver.firefox.useExisting", "true");
 
@@ -25,8 +25,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("I18nTest")
-//         .method("testEnteringHebrewText")
+        .onlyRun("TypingTest")
+         .method("testDeleteAndBackspaceKeys")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: common/test/java/org/openqa/selenium/ElementNameTest.java
Patch:
@@ -5,7 +5,7 @@
 
 public class ElementNameTest extends AbstractDriverTestCase {
 
-    @Ignore("safari")
+    @Ignore("safari, remote")
     public void testShouldReturnInput() {
         driver.get(formPage);
         WebElement selectBox = driver.findElement(By.id("cheese"));

File: common/test/java/org/openqa/selenium/RenderedWebElementTest.java
Patch:
@@ -2,7 +2,7 @@
 
 public class RenderedWebElementTest extends AbstractDriverTestCase {
 	@JavascriptEnabled
-	@Ignore("htmlunit, safari")
+	@Ignore("safari, htmlunit")
 	public void testShouldPickUpStyleOfAnElement() {
 		driver.get(javascriptPage);
 		
@@ -18,7 +18,7 @@ public void testShouldPickUpStyleOfAnElement() {
 	}
 
     @JavascriptEnabled
-	@Ignore("htmlunit, safari")
+	@Ignore("safari, htmlunit")
     public void testShouldAllowInheritedStylesToBeUsed() {
 		driver.get(javascriptPage);
 		

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -14,7 +14,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = HTML_UNIT_JS;
+    String driver = HTML_UNIT;
 
     System.setProperty("webdriver.firefox.useExisting", "true");
 
@@ -25,8 +25,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("FormHandlingTest")
-//         .method("testClickingOnUnclickableElementsDoesNothing")
+        .onlyRun("I18nTest")
+//         .method("testEnteringHebrewText")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: htmlunit/src/java/org/openqa/selenium/htmlunit/HtmlUnitDriver.java
Patch:
@@ -448,7 +448,7 @@ public WebDriver window(String windowId) {
             try {
                  window = webClient.getWebWindowByName(windowId);
             } catch (WebWindowNotFoundException e) {
-                throw new NoSuchWindowException("Cannot find frame: " + windowId);
+                throw new NoSuchWindowException("Cannot find window: " + windowId);
             }
             webClient.setCurrentWindow(window);
             pickWindow();

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -14,7 +14,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = FIREFOX;
+    String driver = IE;
 
     System.setProperty("webdriver.firefox.useExisting", "true");
 
@@ -25,8 +25,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("FormHandlingTest")
-         .method("testClickingOnUnclickableElementsDoesNothing")
+        .onlyRun("TypingTest")
+//         .method("testClickingOnUnclickableElementsDoesNothing")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: common/test/java/org/openqa/selenium/DriverTestDecorator.java
Patch:
@@ -59,7 +59,8 @@ private WebDriver instantiateDriver() {
 		try {
 			return driverClass.newInstance();
 		} catch (Exception e) {
-			fail("Cannot instantiate driver: " + e.getMessage());
+                        e.printStackTrace();
+                        fail("Cannot instantiate driver: " + e.getMessage());
 			throw new RuntimeException(e);
 		}
 	}

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxDriver.java
Patch:
@@ -93,6 +93,7 @@ public FirefoxDriver(FirefoxBinary binary, FirefoxProfile profile) {
         if (profile == null) {
             // See if we can find the installed profile
             String profileToFind =  System.getProperty("webdriver.firefox.profile", DEFAULT_PROFILE);
+
             profile = new ProfilesIni().getProfile(profileToFind);
 
             // And then fall back to the packaged one

File: firefox/src/java/org/openqa/selenium/firefox/internal/ProfilesIni.java
Patch:
@@ -87,6 +87,9 @@ protected FirefoxProfile newProfile(String name, File appData, String path, bool
 
   public FirefoxProfile getProfile(String profileName) {
     FirefoxProfile profile = profiles.get(profileName);
+    if (profile == null)
+      return null;
+
     if (profile.getPort() == 0)
       profile.setPort(FirefoxDriver.DEFAULT_PORT);
     return profile;

File: common/test/java/org/openqa/selenium/WindowSwitchingTest.java
Patch:
@@ -24,7 +24,7 @@
 
 public class WindowSwitchingTest extends AbstractDriverTestCase {
 
-  @Ignore("ie")
+  @Ignore("ie, remote, safari")
   public void testShouldSwitchFocusToANewWindowWhenItIsOpenedAndNotStopFutureOperations() {
     driver.get(xhtmlTestPage);
 
@@ -38,7 +38,7 @@ public void testShouldSwitchFocusToANewWindowWhenItIsOpenedAndNotStopFutureOpera
     driver.findElement(By.id("iframe_page_heading"));
   }
 
-  @Ignore("ie")
+  @Ignore("ie, remote, safari")
   public void testShouldThrowNoSuchWindowException() {
     driver.get(xhtmlTestPage);
 
@@ -53,7 +53,7 @@ public void testShouldThrowNoSuchWindowException() {
 
   @NeedsFreshDriver
   @NoDriverAfterTest
-  @Ignore("ie, remote")
+  @Ignore("ie, remote, safari")
   public void testShouldBeAbleToIterateOverAllOpenWindows() {
     driver.get(xhtmlTestPage);
     driver.findElement(By.name("windowOne")).click();

File: common/test/java/org/openqa/selenium/FormHandlingTest.java
Patch:
@@ -17,8 +17,9 @@ public void testShouldClickOnSubmitInputElements() {
 	public void testClickingOnUnclickableElementsDoesNothing() {
 		driver.get(formPage);
 		try {
-			driver.findElement(By.xpath("//title")).click();
+			driver.findElement(By.xpath("//body")).click();
 		} catch (Exception e) {
+			e.printStackTrace();
 			fail("Clicking on the unclickable should be a no-op");
 		}
 	}

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -14,7 +14,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = HTML_UNIT;
+    String driver = FIREFOX;
 
     System.setProperty("webdriver.firefox.useExisting", "true");
 
@@ -25,8 +25,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ChildrenFindingTest")
-         .method("testShouldFindChildElementsByClassName")
+        .onlyRun("FormHandlingTest")
+         .method("testClickingOnUnclickableElementsDoesNothing")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxBinary.java
Patch:
@@ -140,7 +140,7 @@ protected File locateFirefoxBinary(File suggestedLocation) {
 
         if (binary == null) {
             throw new RuntimeException("Cannot find firefox binary in PATH. Make sure firefox " +
-                    "is installed");
+                    "is installed. OS appears to be: " + OperatingSystem.getCurrentPlatform());
         }
 
         if (binary.exists())

File: clients/java/src/main/java/com/thoughtworks/selenium/HttpCommandProcessor.java
Patch:
@@ -339,11 +339,11 @@ public boolean[] getBooleanArray(String commandName, String[] args) {
         String[] result = getStringArray(commandName, args);
         boolean[] b = new boolean[result.length];
         for (int i = 0; i < result.length; i++) {
-            if ("true".equals(result)) {
+            if ("true".equals(result[i])) {
                 b[i] = true;
                 continue;
             }
-            if ("false".equals(result)) {
+            if ("false".equals(result[i])) {
                 b[i] = false;
                 continue;
             }

File: common/src/java/org/openqa/selenium/By.java
Patch:
@@ -151,14 +151,14 @@ public static By className(final String className) {
          public List<WebElement> findElements(SearchContext context) {
              if (context instanceof FindsByClassName)
                return ((FindsByClassName) context).findElementsByClassName(className);
-             return ((FindsByXPath) context).findElementsByXPath("//*[" + containingWord("class", className) + "]");
+             return ((FindsByXPath) context).findElementsByXPath(".//*[" + containingWord("class", className) + "]");
          }
 
          @Override
          public WebElement findElement(SearchContext context) {
              if (context instanceof FindsByClassName)
                return ((FindsByClassName) context).findElementByClassName(className);
-             return ((FindsByXPath) context).findElementByXPath("//*[" + containingWord("class", className) + "]");
+             return ((FindsByXPath) context).findElementByXPath(".//*[" + containingWord("class", className) + "]");
          }
 
          /**

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -14,7 +14,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = FIREFOX;
+    String driver = HTML_UNIT;
 
     System.setProperty("webdriver.firefox.useExisting", "true");
 
@@ -25,8 +25,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("JavascriptEnabledDriverTest")
-         .method("testDocumentShouldReflectLatestTitle")
+        .onlyRun("ChildrenFindingTest")
+         .method("testShouldFindChildElementsByClassName")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxWebElement.java
Patch:
@@ -214,7 +214,7 @@ public WebElement findElementByClassName(String using) {
     }
     
     public List<WebElement> findElementsByClassName(String using) {
-    	String indices = sendMessage(RuntimeException.class, "findElementsByClassName", using);
+    	String indices = sendMessage(RuntimeException.class, "findChildElementsByClassName", using);
         return getElementsFromIndices(indices);
     }
     

File: common/test/java/org/openqa/selenium/environment/webserver/AppServer.java
Patch:
@@ -33,4 +33,5 @@ public interface AppServer {
     void addAdditionalWebApplication(String context, String absolutePath);
     void addServlet(String name, String url, Class<? extends Servlet> servletClass);
     void listenOn(int port);
+    void listenSecurelyOn(int port);
 }

File: firefox/src/java/org/openqa/selenium/firefox/FirefoxBinary.java
Patch:
@@ -182,7 +182,7 @@ private File shellOutAndFindPathOfFirefox(String binaryName) {
                 return file;
         }
 
-        throw new RuntimeException("Unable to locate the binary on the PATH: " + binaryName);
+        return null;
     }
 
 

File: remote/server/src/java/org/openqa/selenium/remote/server/renderer/ErrorJsonResult.java
Patch:
@@ -7,9 +7,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
-/**
- * @author simonstewart@google.com (Simon Stewart)
- */
 public class ErrorJsonResult extends JsonResult {
 
   public ErrorJsonResult(String propertyName) {

File: remote/server/src/java/org/openqa/selenium/remote/server/rest/ResultConfig.java
Patch:
@@ -23,7 +23,6 @@
 import org.openqa.selenium.remote.server.DriverSessions;
 import org.openqa.selenium.remote.server.JsonParametersAware;
 import org.openqa.selenium.remote.server.handler.WebDriverHandler;
-import org.openqa.selenium.remote.server.renderer.EmptyResult;
 
 public class ResultConfig {
 

File: selenium/test/java/org/openqa/selenium/AbstractTest.java
Patch:
@@ -70,7 +70,7 @@ protected void fail(String name) {
     }
 
     protected void fail(String name, Throwable t) {
-        TestReporter.report(name, false);
+//        TestReporter.report(name, false);
         if (t instanceof RuntimeException) {
             throw (RuntimeException) t;
         } else {

File: selenium/test/java/org/openqa/selenium/GoogleTest.java
Patch:
@@ -26,7 +26,7 @@ public void simpleSearch() {
             selenium.type("q", "OpenQA");
             selenium.click("btnG");
             selenium.waitForPageToLoad("30000");
-            assertTrue(selenium.getBodyText().contains("premier source for quality open source QA projects"));
+            assertTrue(selenium.getBodyText().contains("Bromine"));
         } catch (Throwable t) {
             fail("GoogleTest.simple", t);
         }

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -25,8 +25,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("AlertsTest")
-//         .method("testAddCookiesWithDifferentPaths")
+        .onlyRun("JavascriptEnabledDriverTest")
+//         .method("testShouldBeAbleToClickIfEvenSomethingHorribleHappens")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/locators/Firefox3Locator.java
Patch:
@@ -10,7 +10,7 @@ public class Firefox3Locator extends FirefoxLocator {
     private static final String[] USUAL_UNIX_LAUNCHER_LOCATIONS = {
             "/Applications/Firefox-3.app/Contents/MacOS",
             "/Applications/Firefox.app/Contents/MacOS",
-            "/usr/lib/firefox-3.0.1", /* Ubuntu 8.x default location */
+            "/usr/lib/firefox-3.0.3", /* Ubuntu 8.04 default location */
     };
 
     private static final String[] USUAL_WINDOWS_LAUNCHER_LOCATIONS = {

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -14,7 +14,7 @@ public class SingleTestSuite extends TestCase {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = HTML_UNIT;
+    String driver = FIREFOX;
 
     System.setProperty("webdriver.firefox.useExisting", "true");
 
@@ -25,8 +25,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("TextPagesTest")
-//         .method("testChangeEventIsFiredAppropriatelyWhenFocusIsLost")
+        .onlyRun("CookieImplementationTest")
+//         .method("testAddCookiesWithDifferentPaths")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/AbstractBrowserLauncher.java
Patch:
@@ -4,8 +4,6 @@
 import org.openqa.selenium.server.BrowserConfigurationOptions;
 import org.openqa.selenium.server.RemoteControlConfiguration;
 
-import javax.naming.OperationNotSupportedException;
-
 /**
  * Runs the specified command path to start the browser, and kills the process to quit.
  *

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/BrowserInstallationCache.java
Patch:
@@ -16,10 +16,10 @@ public BrowserInstallationCache() {
         this.cache = new HashMap<String,BrowserInstallation>(5);
     }
 
-    public BrowserInstallation locateBrowserInstallation(String browserString, String customLauncherPath, BrowserLocator locator) {
+    public BrowserInstallation locateBrowserInstallation(String browserName, String customLauncherPath, BrowserLocator locator) {
         final String cacheKey;
 
-        cacheKey = cacheKey(browserString, customLauncherPath);
+        cacheKey = cacheKey(browserName, customLauncherPath);
         synchronized(cache) {
             if (null == cache.get(cacheKey)) {
                 if (null == customLauncherPath) {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncher.java
Patch:
@@ -18,10 +18,9 @@
 
 import org.apache.commons.logging.Log;
 import org.mortbay.log.LogFactory;
-import org.openqa.selenium.server.RemoteControlConfiguration;
 import org.openqa.selenium.server.ApplicationRegistry;
+import org.openqa.selenium.server.RemoteControlConfiguration;
 import org.openqa.selenium.server.browserlaunchers.locators.Firefox2or3Locator;
-import org.openqa.selenium.server.browserlaunchers.locators.Firefox3Locator;
 
 import java.io.File;
 import java.io.IOException;
@@ -50,7 +49,7 @@ public FirefoxCustomProfileLauncher(RemoteControlConfiguration configuration, St
     public FirefoxCustomProfileLauncher(RemoteControlConfiguration configuration, String sessionId, String browserLaunchLocation) {
         this(configuration, sessionId,
                 ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation(
-                        "firefox", browserLaunchLocation, new Firefox2or3Locator()));
+                        "firefoxproxy", browserLaunchLocation, new Firefox2or3Locator()));
     }
 
     public FirefoxCustomProfileLauncher(RemoteControlConfiguration configuration, String sessionId, BrowserInstallation browserInstallation) {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/InternetExplorerCustomProxyLauncher.java
Patch:
@@ -44,7 +44,8 @@ public InternetExplorerCustomProxyLauncher(RemoteControlConfiguration configurat
     }
 
     public InternetExplorerCustomProxyLauncher(RemoteControlConfiguration configuration, String sessionId, String browserLaunchLocation) {
-        this(configuration, sessionId, ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation("iexplore", browserLaunchLocation, new InternetExplorerLocator()));
+        this(configuration, sessionId, ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation(
+                "iexplore", browserLaunchLocation, new InternetExplorerLocator()));
     }
 
     public InternetExplorerCustomProxyLauncher(RemoteControlConfiguration configuration,

File: server-coreless/src/test/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncherUnitTest.java
Patch:
@@ -5,7 +5,7 @@
 public class FirefoxChromeLauncherUnitTest extends TestCase {
     public void testShouldAbleToCreateChromeUrlWithNormalUrl() throws Exception {
         String httpUrl = "http://www.my.com/folder/endname.html?a=aaa&b=bbb";
-        String chromeUrl = new FirefoxChromeLauncher.ChromeUrlConvert().convert(httpUrl, 4444);
+        String chromeUrl = new FirefoxChromeLauncher.ChromeUrlConvert().convert(httpUrl);
         assertEquals("chrome://src/content/endname.html?a=aaa&b=bbb",
                 chromeUrl);
     }

File: clients/java/src/main/java/com/thoughtworks/selenium/SeleneseTestCase.java
Patch:
@@ -233,5 +233,8 @@ public void runBare() throws Throwable {
         }
     }
 
+    public String join(String[] array, char c) {
+        return stb.join(array, c);
+    }
     
 }

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -611,6 +611,7 @@ protected static void setSpeedForSession(String sessionId, int speed) {
          // set the speed for this session's queues
          FrameGroupCommandQueueSet queueSet = 
            FrameGroupCommandQueueSet.getQueueSet(sessionId);
+         if (speed < 0) speed = 0;
          if (null != queueSet) {
            queueSet.setSpeed(speed);
          }

File: server-coreless/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -540,7 +540,7 @@ public void handleConnect(String pathInContext, String pathParams, HttpRequest r
                 HttpServer server = http_connection.getHttpServer();
 
                 SslRelay listener = getSslRelayOrCreateNew(uri, addrPort, server);
-
+                                                     
                 int port = listener.getPort();
 
                 // Get the timeout

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/Firefox2Launcher.java
Patch:
@@ -27,7 +27,9 @@ public Firefox2Launcher(RemoteControlConfiguration configuration, String session
     }
 
     public Firefox2Launcher(RemoteControlConfiguration configuration, String sessionId, String browserLaunchLocation) {
-        super(configuration, sessionId, ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation("firefox2", browserLaunchLocation, new Firefox2Locator()));        
+        super(configuration, sessionId,
+                ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation(
+                        "firefox2", browserLaunchLocation, new Firefox2Locator()));        
     }
 
 }
\ No newline at end of file

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/Firefox3Launcher.java
Patch:
@@ -27,7 +27,9 @@ public Firefox3Launcher(RemoteControlConfiguration configuration, String session
     }
 
     public Firefox3Launcher(RemoteControlConfiguration configuration, String sessionId, String browserLaunchLocation) {
-        super(configuration, sessionId, ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation("firefox3", browserLaunchLocation, new Firefox3Locator()));        
+        super(configuration, sessionId,
+                ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation(
+                        "firefox3", browserLaunchLocation, new Firefox3Locator()));        
     }
 
 }
\ No newline at end of file

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -51,7 +51,9 @@ public FirefoxChromeLauncher(RemoteControlConfiguration configuration, String se
     }
 
     public FirefoxChromeLauncher(RemoteControlConfiguration configuration, String sessionId, String browserLaunchLocation) {
-        this(configuration, sessionId, ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation("firefox", browserLaunchLocation, new Firefox2or3Locator()));
+        this(configuration, sessionId,
+                ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation(
+                        "firefox", browserLaunchLocation, new Firefox2or3Locator()));
     }
 
     public FirefoxChromeLauncher(RemoteControlConfiguration configuration, String sessionId, BrowserInstallation browserInstallation) {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncher.java
Patch:
@@ -48,7 +48,9 @@ public FirefoxCustomProfileLauncher(RemoteControlConfiguration configuration, St
     }
 
     public FirefoxCustomProfileLauncher(RemoteControlConfiguration configuration, String sessionId, String browserLaunchLocation) {
-        this(configuration, sessionId, ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation("firefox", browserLaunchLocation, new Firefox2or3Locator()));
+        this(configuration, sessionId,
+                ApplicationRegistry.instance().browserInstallationCache().locateBrowserInstallation(
+                        "firefox", browserLaunchLocation, new Firefox2or3Locator()));
     }
 
     public FirefoxCustomProfileLauncher(RemoteControlConfiguration configuration, String sessionId, BrowserInstallation browserInstallation) {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/locators/Firefox3Locator.java
Patch:
@@ -10,7 +10,7 @@ public class Firefox3Locator extends FirefoxLocator {
     private static final String[] USUAL_UNIX_LAUNCHER_LOCATIONS = {
             "/Applications/Firefox-3.app/Contents/MacOS",
             "/Applications/Firefox.app/Contents/MacOS",
-            "/usr/lib/firefox-3.0", /* Ubuntu 8.x default location */
+            "/usr/lib/firefox-3.0.1", /* Ubuntu 8.x default location */
     };
 
     private static final String[] USUAL_WINDOWS_LAUNCHER_LOCATIONS = {

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -24,8 +24,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("WindowSwitchingTest")
-         .method("testShouldBeAbleToIterateOverAllOpenWindows")
+        .onlyRun("JavascriptEnabledDriverTest")
+         .method("testChangeEventIsFiredAppropriatelyWhenFocusIsLost")
 //        .exclude("ie")
         .leaveRunning()
         ;  // Yeah, this look strange :)

File: firefox/src/java/org/openqa/selenium/firefox/internal/ExtensionConnectionFactory.java
Patch:
@@ -19,7 +19,8 @@ public static ExtensionConnection connectTo(FirefoxProfile profile, String host,
         try {
           return new NewProfileExtensionConnection(profile, host, port);
         } catch (Exception e) {
-            // Then we can't connect
+          // Tell the world what went wrong
+          e.printStackTrace();
         }
 
         return new DisconnectedExtension();

File: server-coreless/src/main/java/org/openqa/selenium/server/RemoteControlConfiguration.java
Patch:
@@ -280,7 +280,7 @@ public void setDontTouchLogging(boolean newValue) {
     }
 
     public int shortTermMemoryLoggerCapacity() {
-        return 50;
+        return 20;
     }
     
 }

File: server-coreless/src/test/java/org/openqa/selenium/server/RemoteControlConfigurationUnitTest.java
Patch:
@@ -289,7 +289,7 @@ public void testDontTouchLoggingCanBeSet() {
     }
 
     public void testShortTermMemoryLoggerCapacityIs50Bydefault() {
-        assertEquals(50, new RemoteControlConfiguration().shortTermMemoryLoggerCapacity());
+        assertEquals(20, new RemoteControlConfiguration().shortTermMemoryLoggerCapacity());
     }
 
 }

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -2,6 +2,7 @@
 
 import junit.framework.Test;
 
+@SuppressWarnings("unused")
 public class SingleTestSuite {
 
   private final static String FIREFOX = "org.openqa.selenium.firefox.FirefoxDriver";
@@ -21,8 +22,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("TextHandlingTest")
-         .method("testShouldBeAbleToSetMoreThanOneLineOfTextInATextArea")
+        .onlyRun("TypingTest")
+         .method("testGenerateKeyPressEventEvenWhenElementPreventsDefault")
         .leaveRunning()
         ;  // Yeah, this look strange :)
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -21,8 +21,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("TypingTest")
-        // .method("testShouldNotEnterTextIntoAnElementThatHasStifledTheKeyDownEvent")
+        .onlyRun("TextHandlingTest")
+         .method("testShouldBeAbleToSetMoreThanOneLineOfTextInATextArea")
         .leaveRunning()
         ;  // Yeah, this look strange :)
 

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -12,7 +12,7 @@ public class SingleTestSuite {
   private final static String SAFARI = "org.openqa.selenium.safari.SafariDriver";
 
   public static Test suite() throws Exception {
-    String driver = IE;
+    String driver = FIREFOX;
 
     TestSuiteBuilder builder = new TestSuiteBuilder()
     	.addSourceDir("../common")
@@ -21,8 +21,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ExecutingJavascriptTest")
-//        .method("testShouldBeAbleToFindChildrenOfANode")
+        .onlyRun("TextHandlingTest")
+//        .method("testShouldBeAbleToExecuteSimpleJavascriptAndReturnAString")
 //        .leaveRunning()
         ;  // Yeah, this look strange :)
 

File: common/test/java/org/openqa/selenium/TextHandlingTest.java
Patch:
@@ -100,7 +100,7 @@ public void testShouldReturnTheEntireTextOfInlineElements() {
 //                "        "));
 //    }
 
-    @Ignore(value = "safari,htmlunit", reason = "Test fails")
+    @Ignore(value = "safari", reason = "Test fails")
     public void testShouldBeAbleToSetMoreThanOneLineOfTextInATextArea() {
         driver.get(formPage);
         WebElement textarea = driver.findElement(By.id("withText"));

File: server-coreless/src/test/java/org/openqa/selenium/server/RemoteControlConfigurationUnitTest.java
Patch:
@@ -21,8 +21,8 @@ public void testPortCanBeSet() {
         assertEquals(1234, configuration.getPort());
     }
 
-    public void testMultiWindowIsFalseByDefault() {
-        assertFalse(new RemoteControlConfiguration().isMultiWindow());
+    public void testMultiWindowIsTrueByDefault() {
+        assertTrue(new RemoteControlConfiguration().isMultiWindow());
     }
 
     public void testMultiWindowCanBeSet() {

File: tests/generated/src/test/java/com/thoughtworks/selenium/ResourceAvailabilityTest.java
Patch:
@@ -11,7 +11,7 @@
 public class ResourceAvailabilityTest extends TestCase {
 
     public void testResourceAvailable() {
-        InputStream s = ResourceAvailabilityTest.class.getResourceAsStream("/core/SeleneseRunner.html");
-        assertNotNull("SeleneseRunner can't be found!", s);
+        InputStream s = ResourceAvailabilityTest.class.getResourceAsStream("/core/RemoteRunner.html");
+        assertNotNull("RemoteRunner can't be found!", s);
     }
 }

File: server-coreless/src/main/java/org/openqa/selenium/server/RemoteControlConfiguration.java
Patch:
@@ -53,7 +53,7 @@ public class RemoteControlConfiguration {
 
     public RemoteControlConfiguration() {
         this.port = getDefaultPort();
-        this.multiWindow = false;
+        this.multiWindow = true;
         this.profilesLocation = null;
         this.proxyInjectionModeArg = false;
         this.portDriversShouldContact = USE_SAME_PORT;

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -21,8 +21,8 @@ public static Test suite() throws Exception {
         .usingDriver(driver)
         .keepDriverInstance()
         .includeJavascriptTests()
-        .onlyRun("ElementFindingTest")
-        .method("testShouldBeAbleToFindChildrenOfANode")
+        .onlyRun("ExecutingJavascriptTest")
+//        .method("testShouldBeAbleToFindChildrenOfANode")
 //        .leaveRunning()
         ;  // Yeah, this look strange :)
 

File: clients/java/src/test/java/com/thoughtworks/selenium/DefaultSeleniumTestCase.java
Patch:
@@ -48,6 +48,9 @@ public void setExtensionJs(String extensionJs) {
         
         public void start() {
         }
+        
+        public void start(BrowserConfigurationOptions browserConfigurationOptions) {
+        }
 
         public void stop() {
         }

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -343,6 +343,9 @@ protected static void generatePacAndPrefJs(File customProfileDir, int port, Prox
 			// for Firefox 2.0
 			out.println("user_pref('browser.startup.homepage', '" + homePage + "');");
             out.println("user_pref('startup.homepage_welcome_url', '');");
+            
+            // This handles known RC problems when the startup page is a blank page or when the previous session has been restored 
+            out.println("user_pref('browser.startup.page', 1);");
 		}
 
 		// Disable security warnings

File: server-coreless/src/test/java/org/openqa/selenium/server/BrowserSessionFactoryFunctionalTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.openqa.selenium.server;
 
+
 import junit.framework.TestCase;
 import org.openqa.selenium.server.browserlaunchers.BrowserLauncherFactory;
 
@@ -13,7 +14,7 @@ public void testBrowserIsAutomaticallyCloseWhenTimingOutOnBrowserLaunch() throws
         configuration = new RemoteControlConfiguration();
         configuration.setTimeoutInSeconds(1);
         try {
-          factory.createNewRemoteSession("*chrome", "http://amazon.com", "", false, configuration);
+          factory.createNewRemoteSession("*chrome", "http://amazon.com", "", null, false, configuration);
           fail("Did not catch a RemoteCommandException when timing out on browser launch.");
         } catch (RemoteCommandException e) {
             /* As expected */

File: server-coreless/src/test/java/org/openqa/selenium/server/SeleniumDriverResourceHandlerUnitTest.java
Patch:
@@ -42,7 +42,7 @@ public void testThrowsExceptionOnFailedBrowserLaunch() throws Exception {
     server.start();
     SeleniumDriverResourceHandler sdrh = new SeleniumDriverResourceHandler(server);
     try {
-      sdrh.getNewBrowserSession("*mock", null, "");
+      sdrh.getNewBrowserSession("*mock", null, "", null);
       fail("Launch should have failed");
     } catch (RemoteCommandException rce) {
       // passes.

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/OperaCustomProfileLauncher.java
Patch:
@@ -19,7 +19,6 @@
 import org.apache.commons.logging.Log;
 import org.mortbay.log.LogFactory;
 import org.openqa.selenium.server.RemoteControlConfiguration;
-import org.openqa.selenium.server.browserlaunchers.SystemUtils;
 
 import java.io.File;
 import java.io.FileOutputStream;
@@ -96,7 +95,7 @@ private static String findBrowserLaunchLocation() {
         if (WindowsUtils.thisIsWindows()) {
             File operaEXE = AsyncExecute.whichExec("opera.exe");
             if (operaEXE != null) return operaEXE.getAbsolutePath();
-            throw new RuntimeException("Opera couldn't be found in the path!\n" +
+            throw new RuntimeException("Opera could not be found in the path!\n" +
                     "Please add the directory containing opera.exe to your PATH environment\n" +
                     "variable, or explicitly specify a path to Opera like this:\n" +
                     "*opera c:\\blah\\opera.exe");
@@ -106,7 +105,7 @@ private static String findBrowserLaunchLocation() {
         if (operaBin != null) {
             return operaBin.getAbsolutePath();
         }
-        throw new RuntimeException("Opera couldn't be found in the path!\n" +
+        throw new RuntimeException("Opera could not be found in the path!\n" +
                 "Please add the directory containing 'opera' to your PATH environment\n" +
                 "variable, or explicitly specify a path to Opera like this:\n" +
                 "*opera /blah/blah/opera");

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/locators/SingleBrowserLocator.java
Patch:
@@ -88,7 +88,7 @@ public BrowserInstallation findFileInPath(String fileName) {
     }
 
     protected String couldNotFindAnyInstallationMessage() {
-        return browserName() + "couldn't be found in the path!\n" +
+        return browserName() + " could not be found in the path!\n" +
                 "Please add the directory containing '" + humanFriendlyLauncherFileNames() + "' to your PATH environment\n" +
                 "variable, or explicitly specify a path to " + browserName() + " like this:\n" +
                 "*" + seleniumBrowserName() + fakeLauncherPath();

File: server-coreless/src/test/java/org/openqa/selenium/server/browserlaunchers/BrowserLauncherFactoryUnitTest.java
Patch:
@@ -16,7 +16,7 @@ public void testAllSupportedBrowsersDefineAppropriateConstructor() {
                 if (e.getCause() instanceof NoSuchMethodException) {
                     fail(browser + " browser does not define appropriate constructor: " + e.getMessage());
                 }
-                if (-1 != e.getMessage().indexOf("couldn't be found in the path")
+                if (-1 != e.getMessage().indexOf("could not be found in the path")
                     || -1 != e.getMessage().indexOf("SystemRoot apparently not set")
                     || -1 != e.getMessage().indexOf("File was a script file, not a real executable")) {
                     System.out.println("Ignoring problem with getting launcher for '" + browser

File: htmlunit/src/java/org/openqa/selenium/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -57,8 +57,6 @@ public class HtmlUnitWebElement implements WebElement,
     public HtmlUnitWebElement(HtmlUnitDriver parent, HtmlElement element) {
         this.parent = parent;
         this.element = element;
-        
-        
     }
 
     public void click() {
@@ -263,7 +261,7 @@ public String getText() {
 
         getTextFromNode(element, toReturn, textSoFar, element instanceof HtmlPreformattedText);
 
-        String text = collapseWhitespace(textSoFar) + toReturn.toString();
+        String text = toReturn.toString() + collapseWhitespace(textSoFar);
 
         int index = text.length();
         while (index > 0 && isWhiteSpace(text.charAt(index - 1))) {

File: common/test/java/org/openqa/selenium/SingleTestSuite.java
Patch:
@@ -19,8 +19,8 @@ public static Test suite() {
               .usingDriver(IE)
               .keepDriverInstance()
               .includeJavascriptTests()
-              .onlyRun("FormHandlingTest")
-              .method("testSendingKeyboardEventsShouldAppendTextInInputs")
+              .onlyRun("ElementAttributeTest")
+              .method("testShouldReturnEmptyAttributeValuesWhenPresentAndTheValueIsActuallyEmpty")
 //                        .leaveRunningAfterTest()
               .create();
 	}

File: selenium/src/java/org/openqa/selenium/internal/BaseFilterFunction.java
Patch:
@@ -1,6 +1,6 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 import java.util.ArrayList;
 import java.util.Iterator;

File: selenium/src/java/org/openqa/selenium/internal/BaseOptionSelectStrategy.java
Patch:
@@ -1,6 +1,6 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 import java.util.Iterator;
 import java.util.List;

File: selenium/src/java/org/openqa/selenium/internal/ExactTextMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
 public class ExactTextMatchingStrategy implements TextMatchingStrategy {
     public boolean isAMatch(String compareThis, String with) {

File: selenium/src/java/org/openqa/selenium/internal/FilterFunction.java
Patch:
@@ -1,6 +1,6 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 import java.util.List;
 

File: selenium/src/java/org/openqa/selenium/internal/GlobTextMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: selenium/src/java/org/openqa/selenium/internal/IdOptionSelectStrategy.java
Patch:
@@ -1,6 +1,6 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 public class IdOptionSelectStrategy extends BaseOptionSelectStrategy {
     protected boolean selectOption(WebElement option, String selectThis) {

File: selenium/src/java/org/openqa/selenium/internal/ImplicitLookupStrategy.java
Patch:
@@ -1,7 +1,7 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebDriver;
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
 
 public class ImplicitLookupStrategy implements LookupStrategy {
     public WebElement find(WebDriver driver, String use) {

File: selenium/src/java/org/openqa/selenium/internal/IndexFilterFunction.java
Patch:
@@ -1,7 +1,7 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
 import com.thoughtworks.selenium.SeleniumException;
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 import java.util.Collections;
 import java.util.List;

File: selenium/src/java/org/openqa/selenium/internal/IndexOptionSelectStrategy.java
Patch:
@@ -1,6 +1,6 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 import java.util.List;
 

File: selenium/src/java/org/openqa/selenium/internal/LabelOptionSelectStrategy.java
Patch:
@@ -1,6 +1,6 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 public class LabelOptionSelectStrategy extends BaseOptionSelectStrategy {
     protected boolean selectOption(WebElement option, String selectThis) {

File: selenium/src/java/org/openqa/selenium/internal/LookupStrategy.java
Patch:
@@ -1,7 +1,7 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebDriver;
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebDriver;
+import org.openqa.selenium.WebElement;
 
 public interface LookupStrategy {
     WebElement find(WebDriver driver, String use);

File: selenium/src/java/org/openqa/selenium/internal/NameFilterFunction.java
Patch:
@@ -1,6 +1,6 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 public class NameFilterFunction extends BaseFilterFunction {
     protected boolean shouldAdd(WebElement element, String filterValue) {

File: selenium/src/java/org/openqa/selenium/internal/OptionSelectStrategy.java
Patch:
@@ -1,6 +1,6 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 import java.util.List;
 

File: selenium/src/java/org/openqa/selenium/internal/RegExTextMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: selenium/src/java/org/openqa/selenium/internal/TextMatchingStrategy.java
Patch:
@@ -1,4 +1,4 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
 public interface TextMatchingStrategy {
     boolean isAMatch(String compareThis, String with);

File: selenium/src/java/org/openqa/selenium/internal/ValueFilterFunction.java
Patch:
@@ -1,6 +1,6 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 public class ValueFilterFunction extends BaseFilterFunction {
     protected boolean shouldAdd(WebElement element, String filterValue) {

File: selenium/src/java/org/openqa/selenium/internal/ValueOptionSelectStrategy.java
Patch:
@@ -1,6 +1,6 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
-import com.googlecode.webdriver.WebElement;
+import org.openqa.selenium.WebElement;
 
 public class ValueOptionSelectStrategy extends BaseOptionSelectStrategy {
     protected boolean selectOption(WebElement option, String selectThis) {

File: selenium/test/java/org/openqa/selenium/internal/GlobTextMatchingStrategyTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.googlecode.webdriver.selenium.internal;
+package org.openqa.selenium.internal;
 
 import junit.framework.TestCase;
 

File: support/src/java/org/openqa/selenium/support/FindBy.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * Used to mark a field on a Page Object to indicate an alternative mechanism
  * for locating the element. Used in conjunction with
- * {@link org.openqa.selenium.support.PageFactory#proxyElement(com.googlecode.webdriver.WebDriver, Object, java.lang.reflect.Field)}
+ * {@link org.openqa.selenium.support.PageFactory#proxyElement(org.openqa.selenium.WebDriver, Object, java.lang.reflect.Field)}
  * this allows users to quickly and easily create PageObjects
  */
 @Retention(RetentionPolicy.RUNTIME)

File: support/src/java/org/openqa/selenium/support/PageFactory.java
Patch:
@@ -57,7 +57,7 @@ public static <T> T initElements(WebDriver driver, Class<T> pageClassToProxy) {
     }
 
   /**
-   * As {@link org.openqa.selenium.support.PageFactory#initElements(com.googlecode.webdriver.WebDriver, Class)}
+   * As {@link org.openqa.selenium.support.PageFactory#initElements(org.openqa.selenium.WebDriver, Class)}
    * but will only replace the fields of an already instantiated Page Object.
    *
    * @param driver The driver that will be used to look up the elements

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/locators/Firefox3Locator.java
Patch:
@@ -14,9 +14,9 @@ public class Firefox3Locator extends FirefoxLocator {
     };
 
     private static final String[] USUAL_WINDOWS_LAUNCHER_LOCATIONS = {
+            WindowsUtils.getProgramFilesPath() + "\\Firefox-3",
             WindowsUtils.getProgramFilesPath() + "\\Mozilla Firefox",
             WindowsUtils.getProgramFilesPath() + "\\Firefox",
-            WindowsUtils.getProgramFilesPath() + "\\Firefox-3",
     };
 
     protected String browserName() {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/locators/InternetExplorerLocator.java
Patch:
@@ -8,7 +8,7 @@
 public class InternetExplorerLocator extends BrowserLocator{
 
     private static final String[] USUAL_WINDOWS_LAUNCHER_LOCATIONS = {
-            WindowsUtils.getProgramFilesPath() + "\\Safari"
+            WindowsUtils.getProgramFilesPath() + "\\Internet Explorer"
     };
 
     protected String browserName() {

File: htmlunit/src/java/com/googlecode/webdriver/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -380,7 +380,7 @@ public List<WebElement> findElementsById(String id) {
     public WebElement findElementByXPath(String xpathExpr) {
         HtmlElement match = (HtmlElement) element.getFirstByXPath(xpathExpr);
         if (match == null) {
-            throw new NoSuchElementException("Unable to find element with xpath"
+            throw new NoSuchElementException("Unable to find element with xpath "
                     + xpathExpr);
         }
         return new HtmlUnitWebElement(getParent(), match);
@@ -400,7 +400,7 @@ public WebElement findElementByLinkText(String linkText) {
         List<WebElement> elements = findElementsByLinkText(linkText);
         if (elements.size() == 0) {
             throw new NoSuchElementException(
-                    "Unable to find element with linkText" + linkText);
+                    "Unable to find element with linkText " + linkText);
         }
         return elements.size() > 0 ? elements.get(0) : null;
     }

File: htmlunit/src/java/com/googlecode/webdriver/htmlunit/HtmlUnitWebElement.java
Patch:
@@ -35,7 +35,6 @@
 import com.gargoylesoftware.htmlunit.html.HtmlSelect;
 import com.gargoylesoftware.htmlunit.html.HtmlSubmitInput;
 import com.gargoylesoftware.htmlunit.html.HtmlTextArea;
-import com.gargoylesoftware.htmlunit.html.xpath.HtmlUnitXPath;
 import com.googlecode.webdriver.By;
 import com.googlecode.webdriver.NoSuchElementException;
 import com.googlecode.webdriver.SearchContext;
@@ -287,7 +286,6 @@ private boolean isWhiteSpace(int lastChar) {
         return lastChar == '\n' || lastChar == ' ' || lastChar == '\t' || lastChar == '\r';
     }
 
-    @SuppressWarnings("unchecked")
     private void getTextFromNode(DomNode node, StringBuffer toReturn, StringBuffer textSoFar, boolean isPreformatted) {
         if (isPreformatted) {
             getPreformattedText(node, toReturn);
@@ -348,7 +346,6 @@ private void getPreformattedText(DomNode node, StringBuffer toReturn) {
         toReturn.append(xmlText.replaceAll("^<pre.*?>", "").replaceAll("</pre.*>$", ""));
     }
 
-    @SuppressWarnings("unchecked")
     public List<WebElement> getChildrenOfType(String tagName) {
         Iterable<HtmlElement> allChildren = element.getAllHtmlChildElements();
         List<WebElement> elements = new ArrayList<WebElement>();

File: src/src/test/java/org/openqa/selenium/ide/UnitTests.java
Patch:
@@ -19,7 +19,7 @@
 import com.thoughtworks.selenium.Selenium;
 
 public class UnitTests extends TestCase {
-    private static final String TEST_URL = "chrome://selenium-ide/content/jsunit/testRunner.html?testPage=selenium-ide/content/tests/unit/TestSuite.html" +
+    private static final String TEST_URL = "chrome://selenium-ide-testrunner/content/jsunit/testRunner.html?testPage=selenium-ide-testrunner/content/tests/unit/TestSuite.html" +
         "&autoRun=true&submitresults=http://localhost:" + RemoteControlConfiguration.getDefaultPort() + "/jsunit/acceptor";
     private static final String PROFILE_TEMPLATE_DIR = "target/profile-template";
 

File: common/test/java/com/googlecode/webdriver/ByTest.java
Patch:
@@ -35,11 +35,11 @@ public void testNothing() {
     // TODO: why does jmock choke on these tests?
   }
 
-  private interface AllDriver extends WebDriver, FindsById, FindsByLinkText, FindsByName, FindsByXPath {
+  private interface AllDriver extends FindsById, FindsByLinkText, FindsByName, FindsByXPath, SearchContext {
     // Place holder
   }
 
-  private interface OnlyXPath extends WebDriver, FindsByXPath {
+  private interface OnlyXPath extends FindsByXPath, SearchContext {
     // Place holder
   }
 }

File: common/test/java/com/googlecode/webdriver/AbstractDriverTestCase.java
Patch:
@@ -26,6 +26,7 @@ public class AbstractDriverTestCase extends TestCase implements NeedsDriver {
 	protected String iframePage;
 	protected String dragAndDropPage;
 	protected String chinesePage;
+	protected String nestedPage;
 	
 	public void setDriver(WebDriver driver) {
 		this.driver = driver;
@@ -50,6 +51,7 @@ protected void setUp() throws Exception {
         iframePage = baseUrl + "iframes.html";
         dragAndDropPage = baseUrl + "dragAndDropTest.html";
         chinesePage = baseUrl + "cn-test.html";
+        nestedPage = baseUrl + "nestedElements.html";
         
         hostName = environment.getAppServer().getHostName();
         alternateHostName = environment.getAppServer().getAlternateHostName();

File: server-coreless/src/test/java/org/openqa/selenium/server/BrowserSessionFactoryFunctionalTest.java
Patch:
@@ -13,7 +13,7 @@ public void testBrowserIsAutomaticallyCloseWhenTimingOutOnBrowserLaunch() throws
         configuration = new RemoteControlConfiguration();
         configuration.setTimeoutInSeconds(1);
         try {
-          factory.createNewRemoteSession("*chrome", "http://amazon.com", false, configuration);
+          factory.createNewRemoteSession("*chrome", "http://amazon.com", "", false, configuration);
           fail("Did not catch a RemoteCommandException when timing out on browser launch.");
         } catch (RemoteCommandException e) {
             /* As expected */

File: server-coreless/src/test/java/org/openqa/selenium/server/SeleniumDriverResourceHandlerUnitTest.java
Patch:
@@ -42,7 +42,7 @@ public void testThrowsExceptionOnFailedBrowserLaunch() throws Exception {
     server.start();
     SeleniumDriverResourceHandler sdrh = new SeleniumDriverResourceHandler(server);
     try {
-      sdrh.getNewBrowserSession("*mock", null);
+      sdrh.getNewBrowserSession("*mock", null, "");
       fail("Launch should have failed");
     } catch (RemoteCommandException rce) {
       // passes.

File: clients/java/src/main/java/com/thoughtworks/selenium/CommandProcessor.java
Patch:
@@ -37,6 +37,9 @@ public interface CommandProcessor {
      */
     String doCommand(String command, String[] args);
 
+    /** Sets extension Javascript for the session */
+    public void setExtensionJs(String extensionJs);
+    
     /** Starts a new Selenium testing session */
     public void start();
     

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -367,6 +367,7 @@ private void assembleHandlers(boolean slowResources, RemoteControlConfiguration
 
         addSecurityHandler(context);
         addStaticContentHandler(slowResources, configuration, context);
+        context.addHandler(new SessionExtensionJsHandler());
         context.addHandler(new SingleTestSuiteResourceHandler());
         postResultsHandler = new SeleniumHTMLRunnerResultsHandler();
         context.addHandler(postResultsHandler);
@@ -393,7 +394,7 @@ private void addStaticContentHandler(boolean slowResources, RemoteControlConfigu
             staticContentHandler.addStaticContent(new FsResourceLocator(new File(overrideJavascriptDir)));
         }
         staticContentHandler.addStaticContent(new ClasspathResourceLocator());
-
+        
         context.addHandler(staticContentHandler);
     }
 

File: firefox/src/java/com/googlecode/webdriver/firefox/FirefoxDriver.java
Patch:
@@ -126,7 +126,7 @@ protected void prepareEnvironment() {
     public void close() {
         try {
             sendMessage(RuntimeException.class, "close");
-        } catch (NullPointerException e) {
+        } catch (Exception e) {
             // All good
         }
     }

File: firefox/src/java/com/googlecode/webdriver/firefox/internal/RunningInstanceConnection.java
Patch:
@@ -19,7 +19,7 @@ public RunningInstanceConnection(String host, int port, long timeOut) throws IOE
     public void quit() {
         try {
             sendMessageAndWaitForResponse(RuntimeException.class, new Command(null, "quit"));
-        } catch (NullPointerException e) {
+        } catch (Exception e) {
             // Expected
         }
 

File: common/test/java/com/googlecode/webdriver/TextHandlingTest.java
Patch:
@@ -164,7 +164,7 @@ public void testShouldHandleWhitespaceInInlineElements() {
     	assertThat(text, is("line has text"));
     }
 
-    @Ignore("firefox, ie, safari")
+    @Ignore("ie, safari")
     public void testReadALargeAmountOfData() {
         driver.get(GlobalTestEnvironment.get().getAppServer().getBaseUrl() + "macbeth.html");
         String source = driver.getPageSource().trim();

File: firefox/src/java/com/googlecode/webdriver/firefox/internal/NewProfileExtensionConnection.java
Patch:
@@ -94,7 +94,7 @@ protected int determineNextFreePort(String host, int port) throws IOException {
   public void quit() {
         try {
             sendMessageAndWaitForResponse(RuntimeException.class, new Command(null, "quit"));
-        } catch (NullPointerException e) {
+        } catch (Exception e) {
             // this is expected
         }
 

File: firefox/src/java/com/googlecode/webdriver/firefox/FirefoxProfile.java
Patch:
@@ -159,6 +159,7 @@ public void updateUserPrefs() {
         prefs.put("browser.link.open_external", "2");
         prefs.put("browser.link.open_newwindow", "2");
         prefs.put("browser.search.update", "false");
+        prefs.put("browser.sessionstore.resume_from_crash", "false");
         prefs.put("browser.shell.checkDefaultBrowser", "false");
         prefs.put("browser.startup.page", "0");
         prefs.put("browser.tabs.warnOnClose", "false");
@@ -247,7 +248,7 @@ protected void copy(File from, File to) {
             if (toCopy.isDirectory()) {
                 target.mkdir();
                 copy(toCopy, target);
-            } else if (!".parentlock".equals(child)) {
+            } else if (!".parentlock".equals(child) && !"parent.lock".equals(child)) {
                 copyFile(toCopy, target);
             }
         }

File: tests/src/test/java/org/openqa/selenium/BBCTest.java
Patch:
@@ -7,7 +7,7 @@ public class BBCTest extends AbstractTest {
     @Test
     public void haveYourSaySignup() {
         selenium.open("http://www.bbc.co.uk/?ok");
-        selenium.type("document.forms[2].q", "iraq");
+        selenium.type("searchfield", "iraq");
         selenium.click("Search");
         selenium.waitForPageToLoad("30000");
         assertTrue(selenium.isTextPresent("Results from All of the BBC"));

File: tests/src/test/java/org/openqa/selenium/GoogleTest.java
Patch:
@@ -15,7 +15,7 @@ public void simpleSearch() {
         selenium.type("q", "OpenQA");
         selenium.click("btnG");
         selenium.waitForPageToLoad("30000");
-        assertTrue(selenium.getBodyText().contains("premier source for quality open source QA projects"));
+        assertTrue(selenium.getBodyText().contains("Open source test automation tool for executing scenarios against web applications to validate browser compatibility and system functionality."));
     }
 
     @Test(enabled = false)
@@ -214,7 +214,7 @@ public void finance() throws InterruptedException {
         selenium.typeKeys("searchbox", "Cis");
         Thread.sleep(2000);
         selenium.typeKeys("searchbox", "co");
-        selenium.click("//input[@value = 'Search Finance']");
+        selenium.click("//input[@value = 'Get quotes']");
         selenium.waitForPageToLoad("30000");
         assertTrue(selenium.isTextPresent("Cisco Systems, Inc"));
     }

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientUnitTestSuite.java
Patch:
@@ -10,6 +10,7 @@ public static Test suite() {
         TestSuite suite = new TestSuite(ClientUnitTestSuite.class.getName());
         suite.addTestSuite(CSVTest.class);
         suite.addTestSuite(WaitTest.class);
+        suite.addTestSuite(HttpCommandProcessorUnitTest.class);
         suite.addTestSuite(DefaultSeleniumStartErrorHandlingTest.class);
         return suite;
     }

File: server-coreless/src/main/java/org/openqa/selenium/server/BrowserSessionFactory.java
Patch:
@@ -309,8 +309,8 @@ protected BrowserSessionInfo createNewRemoteSession(String browserString, String
         sessionInfo = new BrowserSessionInfo(sessionId, browserString, startURL, launcher, queueSet);
         log.info("Allocated session " + sessionId + " for " + startURL + ", launching...");
 
-        launcher.launchRemoteSession(startURL, configuration.isMultiWindow());
         try {
+            launcher.launchRemoteSession(startURL, configuration.isMultiWindow());
             queueSet.waitForLoad(SeleniumServer.getTimeoutInSeconds() * 1000l);
 
             // TODO DGF log4j only

File: server-coreless/src/test/java/org/openqa/selenium/server/LinuxHTMLRunnerFunctionalTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.openqa.selenium.server;
 
 
-public class LinuxHTMLRunnerTest extends HTMLRunnerTestBase {
+public class LinuxHTMLRunnerFunctionalTest extends HTMLRunnerTestBase {
     public void testFirefox() throws Exception{
         runHTMLSuite("*firefox", false);
     }

File: server-coreless/src/test/java/org/openqa/selenium/server/WindowsHTMLRunnerFunctionalTest.java
Patch:
@@ -1,6 +1,6 @@
 package org.openqa.selenium.server;
 
-public class WindowsHTMLRunnerTest extends HTMLRunnerTestBase {
+public class WindowsHTMLRunnerFunctionalTest extends HTMLRunnerTestBase {
 
     public void testFirefox() throws Exception {
         runHTMLSuite("*firefox", false);

File: server-coreless/src/test/java/org/openqa/selenium/server/WindowsHTMLRunnerMultiWindowFunctionalTest.java
Patch:
@@ -1,11 +1,11 @@
 package org.openqa.selenium.server;
 
-public class WindowsHTMLRunnerMultiWindowTest extends HTMLRunnerTestBase {
-    public WindowsHTMLRunnerMultiWindowTest() {
+public class WindowsHTMLRunnerMultiWindowFunctionalTest extends HTMLRunnerTestBase {
+    public WindowsHTMLRunnerMultiWindowFunctionalTest() {
         super.multiWindow = true;
     }
     
-    public WindowsHTMLRunnerMultiWindowTest(String name) {
+    public WindowsHTMLRunnerMultiWindowFunctionalTest(String name) {
         super(name);
         super.multiWindow = true;
     }

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientUnitTestSuite.java
Patch:
@@ -5,10 +5,12 @@
 import junit.framework.TestSuite;
 
 public class ClientUnitTestSuite extends TestCase {
+
     public static Test suite() {
         TestSuite suite = new TestSuite(ClientUnitTestSuite.class.getName());
         suite.addTestSuite(CSVTest.class);
         suite.addTestSuite(WaitTest.class);
+        suite.addTestSuite(DefaultSeleniumStartErrorHandlingTest.class);
         return suite;
     }
 

File: server-coreless/src/main/java/org/openqa/selenium/server/CommandQueue.java
Patch:
@@ -177,12 +177,12 @@ public String toString() {
         sb.append("{ commandHolder=");
         sb.append("commandHolder/" + uniqueId + "-" 
             + idGenerator.get() + " " + (commandHolder.isEmpty() 
-                ? "null" : commandHolder.peek().toString()))
+                ? "null" : commandHolder.peek()))
         .append(", ")
         .append(" resultHolder=")
         .append("resultHolder/" + uniqueId + "-" 
             + idGenerator.get() + " " + (resultHolder.isEmpty() 
-                ? "null" : resultHolder.peek().toString()))
+                ? "null" : resultHolder.peek()))
         .append(" }");
 
         return sb.toString();

File: server-coreless/src/main/java/org/openqa/selenium/server/CommandResultHolder.java
Patch:
@@ -71,7 +71,7 @@ public String getResult() {
       }
 
       if (log.isDebugEnabled()) {
-        StringBuilder msg = new StringBuilder(hdr + "-> " + result.toString());
+        StringBuilder msg = new StringBuilder(hdr + "-> " + result);
         if (CMD_TIMED_OUT_MSG.equals(result)) {
           msg.append(" after " + holder.getTimeoutInSeconds() + " seconds.");
         }

File: jobbie/src/java/com/googlecode/webdriver/ie/IeNavigator.java
Patch:
@@ -156,6 +156,7 @@ public boolean isAttribute(Object object) {
     }
 
     public boolean isComment(Object object) {
+    	
         return false;
     }
 

File: htmlunit/src/java/com/googlecode/webdriver/htmlunit/HtmlUnitDriver.java
Patch:
@@ -418,9 +418,9 @@ public void addCookie(Cookie cookie) {
         public void deleteCookieNamed(String name) {
             //Assume the cookie either doesn't have a domain or has the same domain as the current
             //page. Delete the cookie for both cases.
-            state.addCookie(new org.apache.commons.httpclient.Cookie(getHostName(), name, "", "",
+            state.addCookie(new org.apache.commons.httpclient.Cookie(getHostName(), name, "", "/",
                     new Date(0), false));
-            state.addCookie(new org.apache.commons.httpclient.Cookie("", name, "", "", new Date(0),
+            state.addCookie(new org.apache.commons.httpclient.Cookie("", name, "", "/", new Date(0),
                     false));
         }
 

File: common/src/java/com/googlecode/webdriver/How.java
Patch:
@@ -2,6 +2,7 @@
 
 public enum How {
   ID,
+  ID_OR_NAME,
   LINK_TEXT,
   NAME,
   XPATH

File: support/src/java/com/googlecode/webdriver/support/PageFactory.java
Patch:
@@ -21,7 +21,8 @@ public class PageFactory {
   /**
    * Instantiate an instance of the given class, and set a lazy proxy for each
    * of the WebElement fields that have been declared, assuming that the
-   * field name is also the HTML element's "id". This means that for the class:
+   * field name is also the HTML element's "id" or "name". This means that for
+   * the class:
    *
    * <code>
    * public class Page {
@@ -30,7 +31,7 @@ public class PageFactory {
    * </code>
    *
    * there will be an element that can be located using the xpath expression
-   * "//*[@id='submit']"
+   * "//*[@id='submit']" or "//*[@name='submit']"
    *
    * By default, the element is looked up each and every time a method is called
    * upon it. To change this behaviour, simply annnotate the field with the

File: server-coreless/src/main/java/org/openqa/selenium/server/testgenerator/XlateHtmlSeleneseToJava.java
Patch:
@@ -300,6 +300,7 @@ private static String XlateString(String base, String htmlSeleneseFileName, Stri
         body = body.replaceAll("\\\\", "\\\\\\\\"); // double the backslashes to avoid invalid escape sequences
         body = body.replaceAll(">\\s*<", "><");
         body = body.replaceAll("</?tbody>", "");
+        body = body.replaceAll("</?thead>", "");
         body = body.replaceAll("<tr><t[dh]\\s+(rowspan=\"1\"\\s+)?colspan=\"3\">([^<]+)</t[dh]></tr>", 
                 "\n/* $2 */\n");
         if (!silentMode) {

File: common/src/java/com/googlecode/webdriver/How.java
Patch:
@@ -3,5 +3,6 @@
 public enum How {
   ID,
   LINK_TEXT,
+  NAME,
   XPATH
 }

File: support/src/java/com/googlecode/webdriver/support/internal/LocatingElementHandler.java
Patch:
@@ -44,6 +44,9 @@ private By buildBy(Field field) {
         case LINK_TEXT:
           return By.linkText(using);
 
+        case NAME:
+          return By.name(using);
+
         case XPATH:
           return By.xpath(using);
 

File: common/test/java/com/googlecode/webdriver/SingleTestSuite.java
Patch:
@@ -12,11 +12,11 @@ public static Test suite() {
 		return new TestSuiteBuilder()
 					.addSourceDir("common")
 //                    .addSourceDir("firefox")
-                    .usingDriver(FIREFOX)
+                    .usingDriver(IE)
 					.keepDriverInstance()
                     .includeJavascriptTests()
                     .onlyRun("JavascriptEnabledDriverTest")
-                    .method("testShouldReportKeyCodeOfArrowKeys")
+                    .method("testShouldReportKeyCodeOfArrowKeysWhenPressEventNotFiredByBrowser")
 //                    .leaveRunningAfterTest()
                     .create();
 	}

File: jobbie/test/java/com/googlecode/webdriver/ie/InternetExplorerDriverTestSuite.java
Patch:
@@ -1,7 +1,6 @@
 package com.googlecode.webdriver.ie;
 
 import junit.framework.Test;
-
 import com.googlecode.webdriver.TestSuiteBuilder;
 
 public class InternetExplorerDriverTestSuite {

File: common/test/java/com/googlecode/webdriver/TestSuiteBuilder.java
Patch:
@@ -185,7 +185,7 @@ private Class<?> getClassFrom(File file) {
 
 		try {
 			return Class.forName(path);
-		} catch (ClassNotFoundException e) {
+		} catch (Throwable e) {
 			return null;
 		}
 	}

File: common/test/java/com/googlecode/webdriver/DragAndDropTest.java
Patch:
@@ -49,7 +49,7 @@ public void testElementInDiv() {
     public void testDragTooFar() {
         driver.get(dragAndDropPage);
         RenderedWebElement img = (RenderedWebElement) driver.findElement(By.id("test1"));
-        Point expectedLocation = img.getLocation();
+//        Point expectedLocation = img.getLocation();
         
         img.dragAndDropBy(Integer.MIN_VALUE, Integer.MIN_VALUE);
         assertEquals (new Point(0, 0), img.getLocation());

File: firefox/src/java/com/googlecode/webdriver/firefox/FirefoxWebElement.java
Patch:
@@ -88,7 +88,7 @@ public List<WebElement> getChildrenOfType(String tagName) {
     }
 
     public boolean isDisplayed() {
-        return Boolean.parseBoolean(sendMessage(RuntimeException.class, "isElementDisplayed"));
+    	return Boolean.parseBoolean(sendMessage(RuntimeException.class, "isElementDisplayed"));
     }
 
     public Point getLocation() {

File: htmlunit/src/java/com/googlecode/webdriver/htmlunit/HtmlUnitDriver.java
Patch:
@@ -313,12 +313,13 @@ public WebDriver defaultContent() {
         }
 
 
-        public WebElement activeElement() {
+        @SuppressWarnings("unchecked")
+		public WebElement activeElement() {
             Page page = currentWindow.getEnclosedPage();
             if (page instanceof HtmlPage) {
                 HtmlElement element = ((HtmlPage) page).getElementWithFocus();
                 if (element == null) {
-                    List allBodies = ((HtmlPage) page).getDocumentElement().getHtmlElementsByTagName("body");
+                    List<HtmlElement> allBodies = ((HtmlPage) page).getDocumentElement().getHtmlElementsByTagName("body");
                     if (allBodies.size() > 0)
                         return new HtmlUnitWebElement(HtmlUnitDriver.this, (HtmlElement) allBodies.get(0));
                 }

File: support/src/java/com/googlecode/webdriver/lift/HamcrestWebDriverTestCase.java
Patch:
@@ -7,7 +7,6 @@
 import com.googlecode.webdriver.WebDriver;
 import com.googlecode.webdriver.WebElement;
 import com.googlecode.webdriver.lift.find.Finder;
-import com.googlecode.webdriver.lift.find.HtmlTagFinder;
 
 /**
  * Base class for tests using the LiFT style API to driver WebDriver.

File: support/src/java/com/googlecode/webdriver/lift/find/HtmlTagFinder.java
Patch:
@@ -18,7 +18,6 @@
  */
 public abstract class HtmlTagFinder extends BaseFinder<WebElement, WebDriver> {
 	
-	@SuppressWarnings("unchecked")
 	protected Collection<WebElement> extractFrom(WebDriver context) {
 		return context.findElements(By.xpath("//" + tagName()));
 	}

File: support/test/java/com/googlecode/webdriver/lift/HamcrestWebdriverTestCaseTest.java
Patch:
@@ -17,6 +17,7 @@
  * @author rchatley (Robert Chatley)
  *
  */
+@SuppressWarnings("unchecked")
 public class HamcrestWebdriverTestCaseTest extends MockObjectTestCase {
 
 	final String text = "abcde";

File: common/test/java/com/googlecode/webdriver/SingleTestSuite.java
Patch:
@@ -12,11 +12,11 @@ public static Test suite() {
 		return new TestSuiteBuilder()
 					.addSourceDir("common")
 //                    .addSourceDir("firefox")
-                    .usingDriver(FIREFOX)
+                    .usingDriver(IE)
 					.keepDriverInstance()
                     .includeJavascriptTests()
-                    .onlyRun("FrameAndWindowSwitchingTest")
-//                    .method("testShouldFireFocusKeyBlurAndChangeEventsInTheRightOrderOnIe")
+                    .onlyRun("TextHandlingTest")
+                    //.method("testHavingInlineElementsShouldNotAffectHowTextIsReturned")
 //                    .leaveRunningAfterTest()
                     .create();
 	}

File: common/test/java/com/googlecode/webdriver/SingleTestSuite.java
Patch:
@@ -12,10 +12,10 @@ public static Test suite() {
 		return new TestSuiteBuilder()
 					.addSourceDir("common")
 //                    .addSourceDir("firefox")
-                    .usingDriver(IE)
+                    .usingDriver(FIREFOX)
 					.keepDriverInstance()
                     .includeJavascriptTests()
-                    .onlyRun("JavascriptEnabledDriverTest")
+                    .onlyRun("FrameAndWindowSwitchingTest")
 //                    .method("testShouldFireFocusKeyBlurAndChangeEventsInTheRightOrderOnIe")
 //                    .leaveRunningAfterTest()
                     .create();

File: common/test/java/com/googlecode/webdriver/SingleTestSuite.java
Patch:
@@ -12,11 +12,11 @@ public static Test suite() {
 		return new TestSuiteBuilder()
 					.addSourceDir("common")
 //                    .addSourceDir("firefox")
-                    .usingDriver(FIREFOX)
+                    .usingDriver(IE)
 					.keepDriverInstance()
                     .includeJavascriptTests()
                     .onlyRun("JavascriptEnabledDriverTest")
-//                    .method("testAddCookiesWithDifferentPaths")
+//                    .method("testShouldFireFocusKeyBlurAndChangeEventsInTheRightOrderOnIe")
 //                    .leaveRunningAfterTest()
                     .create();
 	}

File: common/test/java/com/googlecode/webdriver/SingleTestSuite.java
Patch:
@@ -12,10 +12,10 @@ public static Test suite() {
 		return new TestSuiteBuilder()
 					.addSourceDir("common")
 //                    .addSourceDir("firefox")
-                    .usingDriver(SAFARI)
+                    .usingDriver(FIREFOX)
 					.keepDriverInstance()
                     .includeJavascriptTests()
-                    .onlyRun("CookieImplementationTest")
+                    .onlyRun("JavascriptEnabledDriverTest")
 //                    .method("testAddCookiesWithDifferentPaths")
 //                    .leaveRunningAfterTest()
                     .create();

File: support/src/java/com/googlecode/webdriver/support/CacheLookup.java
Patch:
@@ -1,9 +1,9 @@
 package com.googlecode.webdriver.support;
 
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-import java.lang.annotation.ElementType;
 
 /**
  * Marker annotation to be applied to WebElements to indicate that it never

File: support/src/java/com/googlecode/webdriver/support/FindBy.java
Patch:
@@ -1,11 +1,11 @@
 package com.googlecode.webdriver.support;
 
-import com.googlecode.webdriver.How;
-
+import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-import java.lang.annotation.ElementType;
+
+import com.googlecode.webdriver.How;
 
 /**
  * Used to mark a field on a Page Object to indicate an alternative mechanism

File: common/test/java/com/googlecode/webdriver/AbstractDriverTestCase.java
Patch:
@@ -24,6 +24,7 @@ public class AbstractDriverTestCase extends TestCase implements NeedsDriver {
 	protected String javascriptPage;
 	protected String framesetPage;
 	protected String iframePage;
+	protected String dragAndDropPage;
 	
 	public void setDriver(WebDriver driver) {
 		this.driver = driver;
@@ -46,7 +47,8 @@ protected void setUp() throws Exception {
         javascriptPage = baseUrl + "javascriptPage.html";
         framesetPage = baseUrl + "frameset.html";
         iframePage = baseUrl + "iframes.html";
-
+        dragAndDropPage = baseUrl + "dragAndDropTest.html";
+        
         hostName = environment.getAppServer().getHostName();
         alternateHostName = environment.getAppServer().getAlternateHostName();
         alternateBaseUrl = environment.getAppServer().getAlternateBaseUrl();

File: selenium/test/java/com/thoughtworks/selenium/internal/GlobTextMatchingStrategyTest.java
Patch:
@@ -1,7 +1,9 @@
 package com.thoughtworks.selenium.internal;
 
+import com.googlecode.webdriver.selenium.internal.GlobTextMatchingStrategy;
+
 import junit.framework.TestCase;
-import com.thoughtworks.webdriver.selenium.GlobTextMatchingStrategy;
+
 
 public class GlobTextMatchingStrategyTest extends TestCase {
 	public void testShouldMatchAgainstASimplePattern() {

File: support/test/java/com/googlecode/webdriver/support/internal/LocatingElementHandlerTest.java
Patch:
@@ -67,7 +67,7 @@ public void testShouldUseAnnotationsToLookUpByAlternativeMechanisms() {
 
         By by = By.xpath("//input[@name='q']");
         
-        expect(driver.findElement(by)).andReturn(element);
+        expect(driver.findElement(by)).andReturn(element).atLeastOnce();
 
         replay(driver, element);
       

File: tests/src/test/java/org/openqa/selenium/TestReporter.java
Patch:
@@ -38,7 +38,7 @@ public static void fail(String name) {
     }
 
     public static void skip(String name) {
-        report(name, "slip");
+        report(name, "skip");
     }
 
     public static void report(String name, boolean pass) {

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientDriverSuite.java
Patch:
@@ -81,7 +81,7 @@ public static TestSuite generateSuite(boolean isProxyInjectionMode, String force
             
                
             suite.addTestSuite(ApacheMyFacesSuggestTest.class);
-            suite.addTest(I18nTest.suite());
+            suite.addTest(I18nIntegrationTest.suite());
             suite.addTestSuite(TestBasicAuth.class);
             suite.addTestSuite(RealDealIntegrationTest.class);
             suite.addTestSuite(TestErrorChecking.class);

File: common/test/java/com/thoughtworks/webdriver/TestSuiteBuilder.java
Patch:
@@ -7,6 +7,7 @@
 import java.io.File;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.text.MessageFormat;
 import java.util.HashSet;
 import java.util.Set;
 
@@ -96,7 +97,7 @@ private void addTestsFromFile(TestSuite suite, File file) {
 		Class<?> clazz = getClassFrom(file);
 		if (clazz == null)
 			return;
-
+		
 		int modifiers = clazz.getModifiers();
 
 		if (Modifier.isAbstract(modifiers) || !Modifier.isPublic(modifiers)) {

File: server-coreless/src/test/java/org/openqa/selenium/server/mock/MockPIFrameTest.java
Patch:
@@ -390,7 +390,9 @@ public void testSetTimeout() throws Exception {
         // send back a "START".  But instead, too much time passes.
         sleepForAtLeast(timeout);
         // 5. server replies to driver with an error message
-        assertEquals("wrong error message on timeout", "timed out waiting for window \"\" to appear", open.getResult());
+        String result = open.getResult();
+        boolean hasTimeoutMessage = result.contains("timed out waiting for window");
+        assertTrue("wrong error message on timeout", hasTimeoutMessage);
     }
     
     /** Open a subWindow, close the subWindow, select the mainWindow, and send it a command. */

File: server-coreless/src/main/java/org/openqa/selenium/server/FrameGroupCommandQueueSet.java
Patch:
@@ -155,7 +155,7 @@ public CommandQueue getCommandQueue() {
     }
     
 
-    /** Retrieves a FrameGroupCommandQueueSet for the specifed sessionId 
+    /** Retrieves a FrameGroupCommandQueueSet for the specified sessionId 
      */
     static public FrameGroupCommandQueueSet getQueueSet(String sessionId) {
         if (sessionId == null) throw new NullPointerException("sessionId should not be null; has this session been started yet?");

File: firefox/src/java/com/thoughtworks/webdriver/firefox/FirefoxDriver.java
Patch:
@@ -52,13 +52,14 @@ private FirefoxDriver(ExtensionConnection extension, long id) {
     }
 
     public WebDriver close() {
-        sendMessage("close", null);
         try {
-            return findActiveDriver();
+            sendMessage("close", null);
         } catch (NullPointerException e) {
             // All good
             return null;
         }
+
+        return findActiveDriver();
     }
 
     public String getPageSource() {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -287,6 +287,9 @@ protected static void generatePacAndPrefJs(File customProfileDir, int port, Prox
 		out.println("user_pref('browser.allowpopups', true);");
 		out.println("user_pref('dom.disable_open_during_load', false);");
 
+		// Allow scripts to run as long as the server timeout
+		out.println("user_pref('dom.max_script_run_time', " + SeleniumServer.getTimeoutInSeconds() + ");");
+
 		// Open links in new windows (Firefox 2.0)
 		out.println("user_pref('browser.link.open_external', 2);");
 		out.println("user_pref('browser.link.open_newwindow', 2);");

File: common/src/java/com/thoughtworks/webdriver/WebElement.java
Patch:
@@ -115,7 +115,7 @@ public interface WebElement {
     boolean isEnabled();
 
     /**
-     * Get the innerText of this element, complete with any leading or trailing whitespace.
+     * Get the innerText of this element, without any leading or trailing whitespace.
      *
      * @return The innerText of this element.
      */

File: firefox/src/java/com/thoughtworks/webdriver/firefox/FirefoxLauncher.java
Patch:
@@ -103,7 +103,7 @@ private void startFirefox(File firefox, String profileName) {
     }
 
     private void updateUserPrefsFor(File extensionsDir) {
-        File userPrefs = new File(extensionsDir, "prefs.js");
+        File userPrefs = new File(extensionsDir, "user.js");
 
         Map<String, String> prefs = new HashMap<String, String>();
         if (userPrefs.exists()) {
@@ -117,6 +117,7 @@ private void updateUserPrefsFor(File extensionsDir) {
         prefs.put("browser.search.update", "false");
         prefs.put("browser.shell.checkDefaultBrowser", "false");
         prefs.put("browser.startup.page", "0");
+        prefs.put("browser.tabs.warnOnClose", "false");
         prefs.put("browser.tabs.warnOnOpen", "false");
         prefs.put("dom.disable_open_during_load", "false");
         prefs.put("extensions.update.enabled", "false");

File: server-coreless/src/main/java/org/openqa/selenium/server/SingleEntryAsyncQueue.java
Patch:
@@ -71,7 +71,7 @@ protected T pollToGetContentUntilTimeout() {
 	  
 	  if (timeoutInSeconds > 0 && null == result) {
 	    long now = System.currentTimeMillis();
-		long deadline = now + (timeoutInSeconds * 1000);
+		long deadline = now + ((long)timeoutInSeconds * 1000L);
 		while (now < deadline) {
     	  try {
     	    log.debug("waiting for data for at most " + (deadline - now) + " more ms");

File: server-coreless/src/test/java/org/openqa/selenium/server/mock/MockPIFrameTest.java
Patch:
@@ -54,7 +54,7 @@ public void setUp() throws Exception {
     }
     
     private void configureLogging() {
-      SeleniumServer.setDebugMode(true);
+      //SeleniumServer.setDebugMode(true);
       setLogProperty();
       SeleniumServer.configureLogging();
       Logger logger = Logger.getLogger("");

File: server-coreless/src/test/java/org/openqa/selenium/server/mock/MockPIFrameTest.java
Patch:
@@ -455,7 +455,8 @@ public void testEvilClosingWindow() throws Exception {
 
 		// sleep for a while.  for evilness.
 		Thread.sleep(retryTimeoutInSeconds/2);
-		
+		mainBrowserRequest.expectCommand("retryLast", "", "");
+		mainBrowserRequest = frame.sendRetry();
 		// send a new command
         driverRequest = sendCommand("submit", "", "");
         mainBrowserRequest.expectCommand("submit", "", "");

File: firefox/src/java/com/thoughtworks/webdriver/firefox/FirefoxDriver.java
Patch:
@@ -120,7 +120,7 @@ public TargetLocator switchTo() {
 
     private File locateFirefoxBinary() {
         File potentialPath = locateFirefoxBinaryFromSystemProperty();
-        if (potentialPath != null || potentialPath.exists())
+        if (potentialPath != null && potentialPath.exists())
           return potentialPath;
 
         String osName = System.getProperty("os.name").toLowerCase();

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/AsyncExecute.java
Patch:
@@ -87,7 +87,6 @@ public void write(int b) throws IOException {
         streamHandler.setProcessErrorStream(process.getErrorStream());
         streamHandler.setProcessOutputStream(process.getInputStream());
         streamHandler.start();
-        process.getOutputStream().close();
 
         project.log("spawned process " + process.toString(), Project.MSG_VERBOSE);
         return process;

File: server-coreless/src/main/java/org/openqa/selenium/server/htmlrunner/HTMLTestResults.java
Patch:
@@ -182,7 +182,7 @@ public void write(Writer out) throws IOException {
         out.flush();
     }
     
-    private static String quoteCharacters(String s) {
+    public static String quoteCharacters(String s) {
         StringBuffer result = null;
         for (int i = 0, max = s.length(), delta = 0; i < max; i++) {
             char c = s.charAt(i);

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/WindowsUtils.java
Patch:
@@ -639,7 +639,7 @@ static class WindowsRegistryException extends RuntimeException {
         }
         
         private static String generateMessage() {
-            return "Problem while managaging the registry, OS Version '" + 
+            return "Problem while managing the registry, OS Version '" + 
             System.getProperty("os.version") + "', regVersion1 = " + regVersion1;
         }
         

File: server-coreless/src/main/java/org/openqa/selenium/server/htmlrunner/HTMLTestResults.java
Patch:
@@ -175,7 +175,9 @@ public void write(Writer out) throws IOException {
             out.write(MessageFormat.format(SUITE_HTML, i, suite.getHref(i), table));
         }
         out.write("</table><pre>\n");
-        out.write(quoteCharacters(log));
+        if (log != null) {
+        	out.write(quoteCharacters(log));
+        }
         out.write("</pre></body></html>");
         out.flush();
     }

File: server-coreless/src/test/java/org/openqa/selenium/SingleEntryAsyncQueueTest.java
Patch:
@@ -37,8 +37,6 @@
 import org.openqa.selenium.testworker.TrackableRunnable;
 import org.openqa.selenium.testworker.TrackableThread;
 
-import com.sun.org.apache.xerces.internal.impl.dv.xs.TimeDV;
-
 public class SingleEntryAsyncQueueTest extends TestCase {
     SingleEntryAsyncQueue q;
     private final Lock dataLock = new ReentrantLock();

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/AbstractBrowserLauncher.java
Patch:
@@ -16,8 +16,8 @@ public AbstractBrowserLauncher(String sessionId) {
 
     protected abstract void launch(String url);
 
-    public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWindow) {
-        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow, 0));
+    public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWindow, String defaultLogLevel) {
+        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow, 0, defaultLogLevel));
     }
 
     public void launchRemoteSession(String browserURL, boolean multiWindow) {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/BrowserLauncher.java
Patch:
@@ -37,8 +37,9 @@ public interface BrowserLauncher {
      * @param startURL    the url within which to initiate the session (if needed)
      * @param suiteUrl    the url of the HTML suite to launch
      * @param multiWindow TODO
+     * @param defaultLogLevel TODO
      */
-    void launchHTMLSuite(String startURL, String suiteUrl, boolean multiWindow);
+    void launchHTMLSuite(String startURL, String suiteUrl, boolean multiWindow, String defaultLogLevel);
 
     /**
      * Stop (kill) the browser process

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -313,8 +313,8 @@ public static void main(String[] args) throws Exception {
     }
 
     @Override // need to specify an absolute resultsUrl
-    public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWindow) {
-        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow, port));
+    public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWindow, String defaultLogLevel) {
+        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow, port, defaultLogLevel));
     }
     
     @Override // need to specify an absolute driverUrl

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/HTABrowserLauncher.java
Patch:
@@ -112,8 +112,8 @@ public Process getProcess() {
         return htaProcess;
     }
 
-    public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWindow) {
-        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow, port), "TestRunner.hta");
+    public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWindow, String defaultLogLevel) {
+        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow, port, defaultLogLevel), "TestRunner.hta");
     }
     
     public void launchRemoteSession(String browserURL, boolean multiWindow) {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -151,7 +151,7 @@ protected static String getQueryString(String url) {
 		}
 	}
 
-	protected static String getDefaultHTMLSuiteUrl(String browserURL, String suiteUrl, boolean multiWindow, int serverPort) {
+	protected static String getDefaultHTMLSuiteUrl(String browserURL, String suiteUrl, boolean multiWindow, int serverPort, String defaultLogLevel) {
 		String url = LauncherUtils.stripStartURL(browserURL);
         String resultsUrl;
         if (serverPort == 0) {
@@ -161,6 +161,7 @@ protected static String getDefaultHTMLSuiteUrl(String browserURL, String suiteUr
         }
 		return url + "/selenium-server/core/TestRunner.html?auto=true"
                 + "&multiWindow=" + multiWindow
+                + "&defaultLogLevel=" + defaultLogLevel
                 + "&baseUrl=" + urlEncode(browserURL) + "/selenium-server/tests/"
                 + "&resultsUrl=" + resultsUrl
                 + "&test=" + suiteUrl;

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/MockBrowserLauncher.java
Patch:
@@ -47,7 +47,7 @@ public void launchRemoteSession(String url, boolean multiWindow) {
     }
 
     public void launchHTMLSuite(String startURL, String suiteUrl,
-            boolean multiWindow) {
+            boolean multiWindow, String defaultLogLevel) {
 
     }
 

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/HTABrowserLauncher.java
Patch:
@@ -85,7 +85,10 @@ private void createHTAFiles() {
             FileUtils f = FileUtils.getFileUtils();
             File selRunnerSrc = new File(coreDir, "RemoteRunner.html");
             File selRunnerDest = new File(coreDir, "RemoteRunner.hta");
+            File testRunnerSrc = new File(coreDir, "TestRunner.html");
+            File testRunnerDest = new File(coreDir, "TestRunner.hta");
             f.copyFile(selRunnerSrc, selRunnerDest);
+            f.copyFile(testRunnerSrc, testRunnerDest);
         } catch (IOException e) {
             throw new RuntimeException(e);
         }

File: common/src/java/com/thoughtworks/webdriver/NoSuchElementException.java
Patch:
@@ -18,7 +18,7 @@
 package com.thoughtworks.webdriver;
 
 public class NoSuchElementException extends RuntimeException {
-	public NoSuchElementException(String reason) {
-		super(reason);
-	}
+    public NoSuchElementException(String reason) {
+        super(reason);
+    }
 }

File: common/src/java/com/thoughtworks/webdriver/UnhandledAlertException.java
Patch:
@@ -1,5 +1,5 @@
 package com.thoughtworks.webdriver;
 
 public class UnhandledAlertException extends RuntimeException {
-	
+
 }

File: common/test/java/com/thoughtworks/webdriver/environment/TestEnvironment.java
Patch:
@@ -20,6 +20,7 @@
 import com.thoughtworks.webdriver.environment.webserver.AppServer;
 
 public interface TestEnvironment {
-	AppServer getAppServer();
-	void stop();
+    AppServer getAppServer();
+
+    void stop();
 }

File: common/test/java/com/thoughtworks/webdriver/environment/webserver/PageServlet.java
Patch:
@@ -1,14 +1,14 @@
 package com.thoughtworks.webdriver.environment.webserver;
 
+import javax.servlet.ServletException;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.servlet.ServletException;
 import java.io.IOException;
 
 
 public class PageServlet extends HttpServlet {
-	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
+    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         try {
             Thread.sleep(500);
         } catch (InterruptedException e) {

File: firefox/src/java/com/thoughtworks/webdriver/firefox/Context.java
Patch:
@@ -5,7 +5,7 @@ class Context {
 
     public Context(String fromExtension) {
         if (fromExtension.length() > 0)
-           this.fromExtension = fromExtension;
+            this.fromExtension = fromExtension;
         else
             this.fromExtension = "0 ?";
     }

File: htmlunit/test/java/com/thoughtworks/webdriver/htmlunit/HtmlUnitDriverTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.thoughtworks.webdriver.WebDriver;
 
 public class HtmlUnitDriverTest extends BasicDriverTestCase {
-	protected WebDriver getDriver() {
-		return new HtmlUnitDriver();
-	}
+    protected WebDriver getDriver() {
+        return new HtmlUnitDriver();
+    }
 }

File: jobbie/src/java/com/thoughtworks/webdriver/ie/IeXPath.java
Patch:
@@ -4,7 +4,7 @@
 import org.jaxen.JaxenException;
 
 public class IeXPath extends BaseXPath {
-	public IeXPath(String xpath, InternetExplorerDriver driver) throws JaxenException {
-		super(xpath, new IeNavigator(driver));
-	}
+    public IeXPath(String xpath, InternetExplorerDriver driver) throws JaxenException {
+        super(xpath, new IeNavigator(driver));
+    }
 }

File: selenium/src/java/com/thoughtworks/selenium/internal/AltLookupStrategy.java
Patch:
@@ -4,7 +4,7 @@
 import com.thoughtworks.webdriver.WebElement;
 
 public class AltLookupStrategy implements LookupStrategy {
-	public WebElement find(WebDriver driver, String use) {
-		return driver.selectElement("//*[@alt='" + use + "']");
-	}
+    public WebElement find(WebDriver driver, String use) {
+        return driver.selectElement("//*[@alt='" + use + "']");
+    }
 }

File: selenium/src/java/com/thoughtworks/selenium/internal/ClassLookupStrategy.java
Patch:
@@ -4,7 +4,7 @@
 import com.thoughtworks.webdriver.WebElement;
 
 public class ClassLookupStrategy implements LookupStrategy {
-	public WebElement find(WebDriver driver, String use) {
-		return driver.selectElement("//*[@class='" + use + "']");
-	}
+    public WebElement find(WebDriver driver, String use) {
+        return driver.selectElement("//*[@class='" + use + "']");
+    }
 }

File: selenium/src/java/com/thoughtworks/selenium/internal/ExactTextMatchingStrategy.java
Patch:
@@ -1,7 +1,7 @@
 package com.thoughtworks.selenium.internal;
 
 public class ExactTextMatchingStrategy implements TextMatchingStrategy {
-	public boolean isAMatch(String compareThis, String with) {
-		return with.contains(compareThis);
-	}
+    public boolean isAMatch(String compareThis, String with) {
+        return with.contains(compareThis);
+    }
 }

File: selenium/src/java/com/thoughtworks/selenium/internal/FilterFunction.java
Patch:
@@ -3,5 +3,5 @@
 import java.util.List;
 
 public interface FilterFunction {
-	List filterElements(List allElements, String filterValue);
+    List filterElements(List allElements, String filterValue);
 }

File: selenium/src/java/com/thoughtworks/selenium/internal/IdLookupStrategy.java
Patch:
@@ -4,7 +4,7 @@
 import com.thoughtworks.webdriver.WebElement;
 
 public class IdLookupStrategy implements LookupStrategy {
-	public WebElement find(WebDriver driver, String use) {
-		return driver.selectElement("id=" + use);
-	}
+    public WebElement find(WebDriver driver, String use) {
+        return driver.selectElement("id=" + use);
+    }
 }

File: selenium/src/java/com/thoughtworks/selenium/internal/LabelOptionSelectStrategy.java
Patch:
@@ -3,7 +3,7 @@
 import com.thoughtworks.webdriver.WebElement;
 
 public class LabelOptionSelectStrategy extends BaseOptionSelectStrategy {
-	protected boolean selectOption(WebElement option, String selectThis) {
-		return selectThis.equals(option.getText());
-	}
+    protected boolean selectOption(WebElement option, String selectThis) {
+        return selectThis.equals(option.getText());
+    }
 }

File: selenium/src/java/com/thoughtworks/selenium/internal/LookupStrategy.java
Patch:
@@ -4,5 +4,5 @@
 import com.thoughtworks.webdriver.WebElement;
 
 public interface LookupStrategy {
-	WebElement find(WebDriver driver, String use);
+    WebElement find(WebDriver driver, String use);
 }

File: selenium/src/java/com/thoughtworks/selenium/internal/OptionSelectStrategy.java
Patch:
@@ -3,5 +3,5 @@
 import java.util.List;
 
 public interface OptionSelectStrategy {
-	public boolean select(List fromOptions, String selectThis, boolean setSelected, boolean allowMultipleSelect);
+    public boolean select(List fromOptions, String selectThis, boolean setSelected, boolean allowMultipleSelect);
 }

File: selenium/src/java/com/thoughtworks/selenium/internal/TextMatchingStrategy.java
Patch:
@@ -1,5 +1,5 @@
 package com.thoughtworks.selenium.internal;
 
 public interface TextMatchingStrategy {
-	boolean isAMatch(String compareThis, String with);
+    boolean isAMatch(String compareThis, String with);
 }

File: selenium/src/java/com/thoughtworks/selenium/internal/ValueOptionSelectStrategy.java
Patch:
@@ -3,7 +3,7 @@
 import com.thoughtworks.webdriver.WebElement;
 
 public class ValueOptionSelectStrategy extends BaseOptionSelectStrategy {
-	protected boolean selectOption(WebElement option, String selectThis) {
-		return selectThis.equals(option.getValue());
-	}
+    protected boolean selectOption(WebElement option, String selectThis) {
+        return selectThis.equals(option.getValue());
+    }
 }

File: selenium/src/java/com/thoughtworks/selenium/DefaultSelenium.java
Patch:
@@ -22,7 +22,6 @@ private static WebDriver getDriver(String browserName) {
 		}
 	}
 	
-	@Override
 	public void open(String url) {
 		try {
 			super.open(url);

File: server-coreless/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -253,7 +253,7 @@ public void handle(String pathInContext, String pathParams, HttpRequest request,
             log.debug("Could not proxy " + uri, e);
             LogSupport.ignore(log, e);
             if (!response.isCommitted())
-                response.sendError(HttpResponse.__400_Bad_Request);
+                response.sendError(HttpResponse.__400_Bad_Request, "Could not proxy " + uri + "\n" + e);
         }
     }
 
@@ -547,7 +547,7 @@ public void handleConnect(String pathInContext, String pathParams, HttpRequest r
         }
         catch (Exception e) {
             log.debug("error during handleConnect", e);
-            response.sendError(HttpResponse.__500_Internal_Server_Error);
+            response.sendError(HttpResponse.__500_Internal_Server_Error, e.toString());
         }
     }
 

File: common/test/java/com/thoughtworks/webdriver/environment/webserver/PageServlet.java
Patch:
@@ -10,7 +10,7 @@
 public class PageServlet extends HttpServlet {
 	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
         try {
-            Thread.sleep(200);
+            Thread.sleep(500);
         } catch (InterruptedException e) {
             // Do nothing
         }

File: server-coreless/src/main/java/org/openqa/selenium/server/log/TerseFormatter.java
Patch:
@@ -33,7 +33,7 @@ public class TerseFormatter extends Formatter {
     public TerseFormatter(boolean longForm) {
         buffer = new StringBuffer();
         buffer.append(PREFIX);
-        format = new SimpleDateFormat("HH:mm:ss");
+        format = new SimpleDateFormat("HH:mm:ss.SSS");
         this.longForm = longForm;
     }
     

File: server-coreless/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -315,7 +315,7 @@ protected long proxyPlainTextRequest(URL url, String pathInContext, String pathP
             if (connectionHdr != null && connectionHdr.indexOf(hdr) >= 0)
                 continue;
 
-            if (HttpFields.__ContentType.equals(hdr))
+            if (HttpFields.__ContentType.equals(hdr) && !"GET".equals(request.getMethod()))
                 hasContent = true;
 
             Enumeration vals = request.getFieldValues(hdr);

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientDriverPISuite.java
Patch:
@@ -59,7 +59,6 @@ public InitSystemPropertiesTestSetupForPImode(Test test) {
 
         public void setUp() throws Exception {
         	super.setUp();
-        	InternetExplorerCustomProxyLauncher.setChangeMaxConnections(true);
         	overrideProperty("selenium.forcedBrowserMode", determineForcedBrowserMode());
             overrideProperty("selenium.proxyInjectionMode", "true");
         }

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/InternetExplorerCustomProxyLauncher.java
Patch:
@@ -62,7 +62,8 @@ public class InternetExplorerCustomProxyLauncher extends AbstractBrowserLauncher
     private Process process;
     protected boolean customPACappropriate = true;
 
-    private static boolean changeMaxConnections = false;
+    private static boolean alwaysChangeMaxConnections = false;
+    protected boolean changeMaxConnections = alwaysChangeMaxConnections;
 
     public InternetExplorerCustomProxyLauncher(int port, String sessionId) {
         this(port, sessionId, findBrowserLaunchLocation());
@@ -386,6 +387,6 @@ private void copyInt(String source, String dest) {
     }
 
     public static void setChangeMaxConnections(boolean changeMaxConnections) {
-        InternetExplorerCustomProxyLauncher.changeMaxConnections = changeMaxConnections;
+        InternetExplorerCustomProxyLauncher.alwaysChangeMaxConnections = changeMaxConnections;
     }
 }

File: clients/java/src/test/java/com/thoughtworks/selenium/WaitTest.java
Patch:
@@ -36,8 +36,9 @@ public boolean until() {
             }.wait("timed out as expected", 500, 50);
             fail("expected timeout");
         } catch (WaitTimedOutException e) {
-            assertTrue("didn't wait long enough", System.currentTimeMillis() > 500);
-            assertTrue("didn't try enough times: " + tries, tries > 9);
+            long waited = System.currentTimeMillis() - now;
+            assertTrue("didn't wait long enough:" + waited, waited >= 500);
+            assertTrue("didn't try enough times: " + tries, tries > 7);
         }
     }
 

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientUnitTestSuite.java
Patch:
@@ -1,9 +1,10 @@
 package com.thoughtworks.selenium;
 
 import junit.framework.Test;
+import junit.framework.TestCase;
 import junit.framework.TestSuite;
 
-public class ClientUnitTestSuite {
+public class ClientUnitTestSuite extends TestCase {
     public static Test suite() {
         TestSuite suite = new TestSuite(ClientUnitTestSuite.class.getName());
         suite.addTestSuite(CSVTest.class);

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/MockBrowserLauncher.java
Patch:
@@ -24,10 +24,12 @@ public class MockBrowserLauncher implements BrowserLauncher, Runnable {
     private final String sessionId;
     private Thread browser;
     private boolean interrupted = false;
+    private String uniqueId;
     
     public MockBrowserLauncher(int port, String sessionId) {
         this.port = port;
         this.sessionId = sessionId;
+        this.uniqueId = "mock";
     }
     
     public MockBrowserLauncher(int port, String sessionId, String command) {
@@ -60,7 +62,7 @@ public Process getProcess() {
 
     public void run() {
         try {
-            String startURL = "http://localhost:" + port+"/selenium-server/driver/?sessionId=" + sessionId;
+            String startURL = "http://localhost:" + port+"/selenium-server/driver/?sessionId=" + sessionId + "&uniqueId=" + uniqueId;
             String commandLine = doBrowserRequest(startURL+"&seleniumStart=true", "START");
             while (!interrupted) {
                 log.info("MOCK: " + commandLine);

File: server-coreless/src/test/java/org/openqa/selenium/UnitTestSuite.java
Patch:
@@ -15,7 +15,7 @@ public class UnitTestSuite extends TestCase {
 
     public static Test suite() {
         TestSuite suite = new TestSuite(UnitTestSuite.class.getName());
-        suite.addTestSuite(QueueTest.class);
+        suite.addTestSuite(SingleEntryAsyncQueueTest.class);
         suite.addTestSuite(SeleniumServerTest.class);
         suite.addTestSuite(ClasspathResourceLocatorTest.class);
         suite.addTestSuite(FsResourceLocatorTest.class);

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -245,8 +245,9 @@ protected static void copyDirectory(File source, File dest) {
     protected enum ProxySetting { NO_PROXY, PROXY_SELENIUM_TRAFFIC_ONLY, PROXY_EVERYTHING };
     
 	protected static void generatePacAndPrefJs(File customProfileDir, int port, ProxySetting proxySetting, String homePage) throws FileNotFoundException {
-		// TODO Do we want to make these preferences configurable somehow?
-        if (!SeleniumServer.isAvoidProxy()) {
+		// We treat PROXY_SELENIUM_TRAFFIC_ONLY as a suggestion; if the user didn't explicitly
+		// allow us to proxy selenium traffic only, then we'll proxy everything
+        if (proxySetting == ProxySetting.PROXY_SELENIUM_TRAFFIC_ONLY && !SeleniumServer.isAvoidProxy()) {
             proxySetting = ProxySetting.PROXY_EVERYTHING;
         }
 

File: server-coreless/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -247,7 +247,7 @@ public void handle(String pathInContext, String pathParams, HttpRequest request,
             proxyPlainTextRequest(url, pathInContext, pathParams, request, response);
         }
         catch (Exception e) {
-            log.warn("Could not proxy " + uri, e);
+            log.debug("Could not proxy " + uri, e);
             LogSupport.ignore(log, e);
             if (!response.isCommitted())
                 response.sendError(HttpResponse.__400_Bad_Request);

File: clients/java/src/test/java/com/thoughtworks/selenium/thirdparty/GoogleVideoTest.java
Patch:
@@ -15,7 +15,7 @@ public void setUp() {
         try {
             selServer = new SeleniumServer();
             selServer.setProxyInjectionMode(true);
-            SeleniumServer.setDebugMode(true);
+            SeleniumServer.setBrowserSideLogEnabled(true);
             selServer.start();
         } catch (Exception e) {
             // TODO Auto-generated catch block

File: server-coreless/src/main/java/org/openqa/selenium/server/InjectionHelper.java
Patch:
@@ -281,7 +281,7 @@ private static long writeDataWithUserTransformations(String data, InputStream in
 
     private static byte[] setSomeJsVars(String sessionId) {
         StringBuffer moreJs = new StringBuffer();
-        if (SeleniumServer.isDebugMode()) {
+        if (SeleniumServer.isBrowserSideLogEnabled()) {
             moreJs.append("debugMode = true;\n");
         }
         moreJs.append("injectedSessionId = ")

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -158,8 +158,7 @@ public void handle(String pathInContext, String pathParams, HttpRequest req, Htt
             }
         }
         catch (RuntimeException e) {
-            if (!SeleniumServer.isDebugMode()
-                && looksLikeBrowserLaunchFailedBecauseFileNotFound(e)) {
+            if (looksLikeBrowserLaunchFailedBecauseFileNotFound(e)) {
                 String apparentFile = extractNameOfFileThatCouldntBeFound(e);
                 if (apparentFile!=null) {
                     log.error("Could not start browser; it appears that " + apparentFile + " is missing or inaccessible");

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -172,7 +172,7 @@ protected static String getDefaultRemoteSessionUrl(String startURL, String sessi
                 + "sessionId=" + sessionId 
                 + "&multiWindow=" + multiWindow 
                 + "&baseUrl=" + urlEncode(startURL)
-                + "&debugMode=" + SeleniumServer.isDebugMode();
+                + "&debugMode=" + SeleniumServer.isBrowserSideLogEnabled();
         if (serverPort != 0) {
             url += "&driverUrl=http://localhost:" + serverPort + "/selenium-server/driver/";
         }

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/MockBrowserLauncher.java
Patch:
@@ -66,7 +66,7 @@ public void run() {
                 log.info("MOCK: " + commandLine);
                 RemoteCommand sc = DefaultRemoteCommand.parse(commandLine);
                 String result = doCommand(sc);
-                if (SeleniumServer.isDebugMode() && !interrupted) {
+                if (SeleniumServer.isBrowserSideLogEnabled() && !interrupted) {
                     for (int i = 0; i < 3; i++) {
                         doBrowserRequest(startURL + "&logging=true", "logLevel=debug:dummy log message " + i + "\n");
                     }

File: server-coreless/src/test/java/org/openqa/selenium/server/HtmlIdentifierTest.java
Patch:
@@ -6,7 +6,7 @@
 
 public class HtmlIdentifierTest extends TestCase {
     public void setUp() {
-        SeleniumServer.setDebugMode(true);
+        SeleniumServer.setBrowserSideLogEnabled(true);
         SeleniumServer.configureLogging();
     }
     

File: clients/java/src/test/java/com/thoughtworks/selenium/thirdparty/YahooHttpsTest.java
Patch:
@@ -9,7 +9,7 @@ public class YahooHttpsTest extends SeleneseTestCase {
 
     public void setUp() throws Exception {
         boolean pi = true;
-        SeleniumServer.setAlwaysProxy(pi);
+        SeleniumServer.setAvoidProxy(!pi);
         ss = new SeleniumServer(4444, false, !pi);
         ss.setProxyInjectionMode(pi);
         ss.start();

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -91,7 +91,7 @@ protected static File makeProxyPAC(File parentDir, int port) throws FileNotFound
 	 * containing "/selenium-server/". Otherwise the proxy applies to all URLs.
 	 */
 	protected static File makeProxyPAC(File parentDir, int port, boolean proxySeleniumTrafficOnly) throws FileNotFoundException {
-		if (SeleniumServer.isAlwaysProxy()) {
+		if (!SeleniumServer.isAvoidProxy()) {
             proxySeleniumTrafficOnly = false;
         }
         File proxyPAC = new File(parentDir, "proxy.pac");
@@ -246,7 +246,7 @@ protected enum ProxySetting { NO_PROXY, PROXY_SELENIUM_TRAFFIC_ONLY, PROXY_EVERY
     
 	protected static void generatePacAndPrefJs(File customProfileDir, int port, ProxySetting proxySetting, String homePage) throws FileNotFoundException {
 		// TODO Do we want to make these preferences configurable somehow?
-        if (SeleniumServer.isAlwaysProxy()) {
+        if (!SeleniumServer.isAvoidProxy()) {
             proxySetting = ProxySetting.PROXY_EVERYTHING;
         }
 

File: server-coreless/src/main/java/org/openqa/selenium/server/FrameGroupCommandQueueSet.java
Patch:
@@ -65,7 +65,7 @@ public class FrameGroupCommandQueueSet {
     static private Lock dataLock = new ReentrantLock(); // 
     static private Condition resultArrivedOnAnyQueue = dataLock.newCondition();
     
-    private int pageLoadTimeoutInMilliseconds = 30;
+    private int pageLoadTimeoutInMilliseconds = 30000;
     
     /**
      * A unique string denoting a session with a browser.  In most cases this session begins with the

File: firefox/src/java/com/thoughtworks/webdriver/firefox/Context.java
Patch:
@@ -7,7 +7,7 @@ public Context(String fromExtension) {
         if (fromExtension.length() > 0)
            this.fromExtension = fromExtension;
         else
-            this.fromExtension = "0 0";
+            this.fromExtension = "0 ?";
     }
 
     public String toString() {

File: firefox/src/java/com/thoughtworks/webdriver/firefox/ExtensionConnection.java
Patch:
@@ -80,7 +80,7 @@ private Response nextResponse() throws IOException {
         // CommandName NumberOfLinesRemaining
         // Identifier
         // ResponseText
-
+        
         int spaceIndex = line.indexOf(' ');
         String methodName = line.substring(0, spaceIndex);
 		String remainingResponse = line.substring(spaceIndex + 1);

File: firefox/test/java/com/thoughtworks/webdriver/firefox/FirefoxDriverTest.java
Patch:
@@ -1,8 +1,8 @@
 package com.thoughtworks.webdriver.firefox;
 
 import com.thoughtworks.webdriver.JavascriptEnabledDriverTest;
-import com.thoughtworks.webdriver.WebDriver;
 import com.thoughtworks.webdriver.NoSuchElementException;
+import com.thoughtworks.webdriver.WebDriver;
 
 public class FirefoxDriverTest extends JavascriptEnabledDriverTest {
 	protected WebDriver getDriver() {

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/MockBrowserLauncher.java
Patch:
@@ -92,6 +92,8 @@ private String doCommand(RemoteCommand sc) {
             result = "OK,1";
         } else if (command.equals("getAllFields")) {
             result = "OK,1,2,3";
+        } else if (command.equals("getWhetherThisFrameMatchFrameExpression")) {
+            result = "OK,true";
         }
         else if (command.startsWith("get")) {
             result = "OK,x";

File: server-coreless/src/test/java/org/openqa/selenium/server/mock/MockPIFrame.java
Patch:
@@ -108,7 +108,7 @@ public boolean frameMatchesFrameExpression(RemoteCommand identifyCommand) {
      * @throws InterruptedException
      * @see {@link #frameMatchesFrameExpression(RemoteCommand)}
      */
-    public BrowserRequest handleIdentifyCommand() throws InterruptedException {
+    public BrowserRequest handleIdentifyCommand() {
         RemoteCommand identifyCommand = mostRecentRequest.getCommand();
         boolean matches = frameMatchesFrameExpression(identifyCommand);
         return sendResult("OK," + matches);

File: server-coreless/src/test/java/org/openqa/selenium/server/mock/MockPIFrameTest.java
Patch:
@@ -29,9 +29,10 @@ public void setUp() throws Exception {
     }
     
     public void tearDown() {
+        server.stop();
         DummyBrowserLauncher.clearSessionId();
         InjectionHelper.setFailOnError(true);
-        server.stop();
+        server.setProxyInjectionMode(false);
     }
     
     /** start a basic browser session */

File: clients/java/src/test/java/com/thoughtworks/selenium/HtmlIdentifierTest.java
Patch:
@@ -6,7 +6,7 @@
 
 public class HtmlIdentifierTest extends TestCase {
     public void setUp() {
-        HtmlIdentifier.setLogging(true);
+        //HtmlIdentifier.setLogging(true);
     }
     
     public void testSomeScenarios() {

File: server-coreless/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -373,7 +373,7 @@ protected long proxyPlainTextRequest(URL url, String pathInContext, String pathP
             response.setReason(http.getResponseMessage());
 
             String contentType = http.getContentType();
-            if (SeleniumServer.isDebugMode()) {
+            if (log.isDebugEnabled()) {
                 log.debug("Content-Type is: " + contentType);
             }
         }

File: server-coreless/src/main/java/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java
Patch:
@@ -56,7 +56,7 @@ public String runHTMLSuite(String browser, String browserURL, String suiteURL, F
             timeoutInMs = Long.MAX_VALUE;
         }
         server.handleHTMLRunnerResults(this);
-        BrowserLauncherFactory blf = new BrowserLauncherFactory(server);
+        BrowserLauncherFactory blf = new BrowserLauncherFactory();
         String sessionId = Long.toString(System.currentTimeMillis() % 1000000);
         BrowserLauncher launcher = blf.getBrowserLauncher(browser, sessionId, null);
         server.registerBrowserLauncher(sessionId, launcher);

File: server-coreless/src/test/java/org/openqa/selenium/UnitTestSuite.java
Patch:
@@ -9,6 +9,7 @@
 import org.openqa.selenium.server.StaticContentHandlerTest;
 import org.openqa.selenium.server.browserlaunchers.WindowsUtilsTest;
 import org.openqa.selenium.server.browserlaunchers.FirefoxChromeLauncherTest;
+import org.openqa.selenium.server.mock.MockPIFrameTest;
 
 public class UnitTestSuite extends TestCase {
 
@@ -22,6 +23,7 @@ public static Test suite() {
         suite.addTestSuite(WindowsUtilsTest.class);
         suite.addTestSuite(FirefoxChromeLauncherTest.class);
         suite.addTestSuite(HTMLSuiteResultTest.class);
+        suite.addTestSuite(MockPIFrameTest.class);
         return suite;
     }
 }

File: server-coreless/src/main/java/org/openqa/selenium/server/InjectionHelper.java
Patch:
@@ -137,7 +137,7 @@ public static long injectJavaScript(HttpRequest request, HttpResponse response,
 
         String url = response.getHttpRequest().getRequestURL().toString();
         if (SeleniumServer.getDebugURL().equals(url)) {
-            System.out.println("debug URL seen");
+            log.info("debug URL seen");
         }
        
         if (!isKnownToBeHtml) {
@@ -246,7 +246,7 @@ private static long writeDataWithUserTransformations(String data, InputStream in
             for (String beforeRegexp : contentTransformations.keySet()) {
                 String after = contentTransformations.get(beforeRegexp);
                 if (after==null) {
-                    System.out.println("Warning: no transformation seen for key " + beforeRegexp);
+                    log.warn("no transformation seen for key " + beforeRegexp);
                 }
                 else {
                     try {
@@ -335,7 +335,7 @@ public static boolean addUserContentTransformation(String before, String after )
     public static boolean addUserJsInjectionFile(String fileName) {
         File f = new File(fileName);
         if (!f.canRead()) {
-            System.out.println("Error: cannot read user JavaScript injection file " + fileName);
+            log.error("cannot read user JavaScript injection file " + fileName);
             return false;
         }
         userJsInjectionFiles.add(fileName);

File: server-coreless/src/main/java/org/openqa/selenium/server/FrameGroupCommandQueueSet.java
Patch:
@@ -557,7 +557,7 @@ private FrameAddress waitForLoad(String waitingForThisWindowName, String waiting
         dataLock.lock();
         try {
             for (FrameAddress matchingFrameAddress = null; timeoutInSeconds >= 0; timeoutInSeconds--) {
-                log.debug("waiting for window \"" + waitingForThisWindowName + "\"" + " local frame \"" + waitingForThisLocalFrame + "\"");
+                log.debug("waiting for window \"" + waitingForThisWindowName + "\"" + " local frame \"" + waitingForThisLocalFrame + "\" for " + timeoutInSeconds + " more secs");
                 matchingFrameAddress = findMatchingFrameAddress(frameAddressToJustLoaded.keySet(), 
                         waitingForThisWindowName, waitingForThisLocalFrame);
                 if (matchingFrameAddress!=null) {

File: server-coreless/src/main/java/org/openqa/selenium/server/HtmlIdentifier.java
Patch:
@@ -76,7 +76,7 @@ public static boolean shouldBeInjected(String path, String contentType, String c
         int score = 0;
 
         if (logging) {
-            log.info("HtmlIdentifier.shouldBeInjected(\"" + path + "\", \"" + contentType + "\", \"...\")");
+            log.debug("shouldBeInjected(\"" + path + "\", \"" + contentType + "\", \"...\")");
         }        
         
         for (Rule rule : rules) {
@@ -88,7 +88,7 @@ public static boolean shouldBeInjected(String path, String contentType, String c
         }
         boolean shouldInject = (score > INJECTION_THRESHOLD);
         if (logging) {
-            log.info("    total : " + score + ">" + INJECTION_THRESHOLD + "?  (should " + (shouldInject ? "" : "not ") + "inject)");
+            log.debug("    total : " + score + ">" + INJECTION_THRESHOLD + "?  (should " + (shouldInject ? "" : "not ") + "inject)");
         }        
         return shouldInject;
     }

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -322,7 +322,7 @@ private boolean looksLikeBrowserLaunchFailedBecauseFileNotFound(Exception e) {
     }
 
     private void handleCommandRequest(HttpRequest req, HttpResponse res, String cmd, String sessionId) {
-        log.info("This is a command request");
+        log.info("command = " + cmd);
         // If this a Driver Client sending a new command...
         res.setContentType("text/plain");
         hackRemoveConnectionCloseHeader(res);

File: server-coreless/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -374,7 +374,7 @@ protected long proxyPlainTextRequest(URL url, String pathInContext, String pathP
 
             String contentType = http.getContentType();
             if (SeleniumServer.isDebugMode()) {
-                SeleniumServer.log("Content-Type is: " + contentType);
+                log.debug("Content-Type is: " + contentType);
             }
         }
 

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientDriverSuite.java
Patch:
@@ -76,7 +76,7 @@ public static TestSuite generateSuite(boolean isProxyInjectionMode, String force
             TestSuite suite = new TestSuite(ClientDriverSuite.class.getName());
             
             
-            if (isProxyInjectionMode) {
+            if (false) {
             	// Run test for selecting windows by titles through PI mode
             	//suite.addTestSuite(TestSelectWindowTitle.class);
                 suite.addTestSuite(TestClick.class);    // ok, run just a single test in PI mode

File: jobbie/src/java/com/thoughtworks/webdriver/ie/HtmlNode.java
Patch:
@@ -3,6 +3,8 @@
 interface HtmlNode {
 	DocumentNode getDocument();
 
+	HtmlNode getParent();
+
 	HtmlNode getFirstChild();
 
 	HtmlNode getNextSibling();

File: server-coreless/src/main/java/cybervillains/ca/CertificateCreator.java
Patch:
@@ -152,7 +152,7 @@ public static X509Certificate generateStdSSLServerCertificate(
 		v3CertGen.setSubjectDN(new X500Principal(subject));
 		v3CertGen.setSignatureAlgorithm(CertificateCreator.SIGN_ALGO);
 		v3CertGen.setPublicKey(newPubKey);
-		v3CertGen.setNotAfter(new Date(System.currentTimeMillis() + 1000L * 60 * 60 * 24 * 30 * 12));
+		v3CertGen.setNotAfter(new Date(System.currentTimeMillis() + 30L * 60 * 60 * 24 * 30 * 12));
 		v3CertGen.setNotBefore(new Date(System.currentTimeMillis() - 1000L * 60 * 60 * 24 * 30 *12));
 		v3CertGen.setIssuerDN(caCert.getSubjectX500Principal());
 		

File: server-coreless/src/main/java/cybervillains/ca/KeyStoreManager.java
Patch:
@@ -161,8 +161,8 @@ public KeyStoreManager(File root) {
 		
 		
 		
-		_rsaKpg.initialize(1024, _sr);
-		_dsaKpg.initialize(1024, _sr);
+		_rsaKpg.initialize(2048, _sr);
+		_dsaKpg.initialize(2048, _sr);
 		
 		
 		try

File: server-coreless/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -55,7 +55,7 @@ public class ProxyHandler extends AbstractHttpHandler {
     private transient boolean _chained = false;
     private final Map<String,SslRelay> _sslMap = new LinkedHashMap<String, SslRelay>();
     private String sslKeystorePath;
-    private boolean useCyberVillains = false;
+    private boolean useCyberVillains = true;
 
     /* ------------------------------------------------------------ */
     /**

File: server-coreless/src/main/java/org/openqa/selenium/server/HtmlIdentifier.java
Patch:
@@ -48,6 +48,7 @@ public class HtmlIdentifier {
         // ebay dll contains HTML snippets which fool InjectionHelper.  -nas
         rules.add(new ExtensionRule(new String[]{"dll", "gif", "ico", "jpg", "jpeg", "png", "dwr", "js"}, -1000));
         rules.add(new ContentRule("<html", 1000, -100));
+        rules.add(new ContentRule("<head", 500, -100)); // http://drudgereport.com doesn't have <html>, but rather starts with <head>
         rules.add(new ContentRule("<!DOCTYPE html", 1000, -100));
         rules.add(new ContentTypeRule("text/html", 100, -1000));
         rules.add(new Rule("dojo catcher", -100000, 0) {

File: firefox/src/java/com/thoughtworks/webdriver/firefox/FirefoxDriver.java
Patch:
@@ -57,6 +57,9 @@ public WebElement selectElement(String selector) {
         if (selector.startsWith("link=")) {
             commandName = "selectElementUsingLink";
             argument = selector.substring("link=".length());
+        } else if (selector.startsWith("id=")) {
+        	commandName = "selectElementById";
+            argument = selector.substring("id=".length());
         }
 
         String elementId = extension.sendMessageAndWaitForResponse(commandName, argument);

File: server-coreless/src/test/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncherTest.java
Patch:
@@ -6,7 +6,7 @@ public class FirefoxChromeLauncherTest extends TestCase {
     public void testShouldAbleToCreateChromeUrlWithNormalUrl() throws Exception {
         String httpUrl = "http://www.my.com/folder/endname.html?a=aaa&b=bbb";
         String chromeUrl = new FirefoxChromeLauncher.ChromeUrlConvert().convert(httpUrl, 4444);
-        assertEquals("chrome://src/content/endname.html?a=aaa&b=bbb&baseUrl=http://localhost:4444/selenium-server/",
+        assertEquals("chrome://src/content/endname.html?a=aaa&b=bbb",
                 chromeUrl);
     }
 }

File: server-coreless/src/main/java/org/openqa/selenium/server/browserlaunchers/AbstractBrowserLauncher.java
Patch:
@@ -17,11 +17,11 @@ public AbstractBrowserLauncher(String sessionId) {
     protected abstract void launch(String url);
 
     public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWindow) {
-        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow));
+        launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow, 0));
     }
 
     public void launchRemoteSession(String browserURL, boolean multiWindow) {
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, multiWindow));
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, multiWindow, 0));
     }
 
 

File: clients/java/src/main/java/com/thoughtworks/selenium/Wait.java
Patch:
@@ -54,7 +54,7 @@ public Wait(String message, long timeoutInMilliseconds, long intervalInMilliseco
     }
     
     /** Returns true when it's time to stop waiting */
-    abstract boolean until();
+    public abstract boolean until();
     
     /** The amout of time to wait before giving up; the default is 30 seconds */
     public long timeoutInMilliseconds = 30000l;

File: server-coreless/src/main/java/org/openqa/selenium/server/ClassPathResource.java
Patch:
@@ -70,7 +70,7 @@ public boolean isDirectory() {
 	 * prevent caching.
 	 */
 	public long lastModified() {
-		return System.currentTimeMillis() + 1000 * 3600 * 24 * 365;
+		return System.currentTimeMillis() + 1000l * 3600l * 24l * 365l;
 	}
 
 	public long length() {

File: server-coreless/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -546,7 +546,7 @@ public void stopAllBrowsers() {
     private void setNoCacheHeaders(HttpResponse res) {
         res.setField(HttpFields.__CacheControl, "no-cache");
         res.setField(HttpFields.__Pragma, "no-cache");
-        res.setField(HttpFields.__Expires, "-1");
+        res.setField(HttpFields.__Expires, HttpFields.__01Jan1970);
     }
 
     private void setDomain(String sessionId, String domain) {

File: server-coreless/src/test/java/org/openqa/selenium/server/StaticContentHandlerTest.java
Patch:
@@ -23,7 +23,7 @@ public void setUp() throws Exception {
     public void testShouldMakePageNotCachedWhenHandle() throws Exception {
         HttpResponse response = new HttpResponse();
         handler.handle("", "", new HttpRequest(), response);
-        assertEquals("-1", response.getField("Expires"));
+        assertEquals("Thu, 01 Jan 1970 00:00:00 GMT", response.getField("Expires"));
     }
     
     public void testShouldDelayResourceLoadingIfSetToSlow() throws Exception {

File: server-coreless/src/main/java/org/openqa/selenium/server/SingleEntryAsyncQueue.java
Patch:
@@ -77,7 +77,6 @@ public void setTimeout(int timeout) {
      */
     public Object get() {
         int thisCall = countOfCallsToGet++;
-        System.out.println("get call " +thisCall);
         if (done) {
             return null;
         }
@@ -106,7 +105,6 @@ public Object get() {
             hasBlockedGetter = false;
             waitingThreadCount--;
         }
-        System.out.println("get wrapping up: thisCall="+thisCall+ " (clearThreshold=" + clearCallsToGetPrecedingThisThreshold+")");
         if (waitingThreadCount==0) {
             thing = null;
         }

File: server/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -110,7 +110,7 @@ public class ProxyHandler extends AbstractHttpHandler {
 
     {
         _allowedConnectPorts.add(80);
-        _allowedConnectPorts.add(SeleniumServer.DEFAULT_PORT);
+        _allowedConnectPorts.add(SeleniumServer.getDefaultPort());
         _allowedConnectPorts.add(8000);
         _allowedConnectPorts.add(8080);
         _allowedConnectPorts.add(8888);

File: server/src/test/java/org/openqa/selenium/server/HTMLRunnerTestBase.java
Patch:
@@ -49,7 +49,7 @@ public void setUp() throws Exception {
     }
     
     protected void runHTMLSuite(String browser, boolean slowResources) throws Exception {
-        server = new SeleniumServer(SeleniumServer.DEFAULT_PORT, slowResources);
+        server = new SeleniumServer(SeleniumServer.getDefaultPort(), slowResources);
         launcher = new HTMLLauncher(server);
         server.start();
         browserURL = "http://localhost:" + server.getPort();

File: clients/java/src/test/java/com/thoughtworks/selenium/ApacheMyFacesSuggestTest.java
Patch:
@@ -52,7 +52,7 @@ private boolean shouldSkip() {
     
     public void testAJAXFirefox() throws Throwable {
         if (shouldSkip()) return;
-        selenium = new DefaultSelenium("localhost", SeleniumServer.DEFAULT_PORT, "*firefox", "http://www.irian.at");
+        selenium = new DefaultSelenium("localhost", SeleniumServer.getDefaultPort(), "*firefox", "http://www.irian.at");
         selenium.start();
 
         selenium.open("http://www.irian.at/selenium-server/tests/html/ajax/ajax_autocompleter2_test.html");
@@ -77,7 +77,7 @@ boolean until() {
     public void testAJAXIExplore() throws Throwable {
         if (!WindowsUtils.thisIsWindows()) return;
         if (shouldSkip()) return;
-        selenium = new DefaultSelenium("localhost", SeleniumServer.DEFAULT_PORT, "*iexplore", "http://www.irian.at");
+        selenium = new DefaultSelenium("localhost", SeleniumServer.getDefaultPort(), "*iexplore", "http://www.irian.at");
         selenium.start();
 
         selenium.open("http://www.irian.at/selenium-server/tests/html/ajax/ajax_autocompleter2_test.html");

File: clients/java/src/test/java/com/thoughtworks/selenium/DomainTourTest.java
Patch:
@@ -10,7 +10,7 @@ public class DomainTourTest extends TestCase
     
     public void setUp() throws Exception {
         String url = "http://www.google.com";
-        selenium = new DefaultSelenium("localhost", SeleniumServer.DEFAULT_PORT, "*iexplore", url);
+        selenium = new DefaultSelenium("localhost", SeleniumServer.getDefaultPort(), "*iexplore", url);
         selenium.start();
     }
     

File: clients/java/src/test/java/com/thoughtworks/selenium/GoogleTest.java
Patch:
@@ -10,7 +10,7 @@ public class GoogleTest extends TestCase
 
    public void setUp() throws Exception {
         String url = "http://www.google.com";
-       selenium = new DefaultSelenium("localhost", SeleniumServer.DEFAULT_PORT, "*firefox", url);
+       selenium = new DefaultSelenium("localhost", SeleniumServer.getDefaultPort(), "*firefox", url);
        selenium.start();
     }
    

File: clients/java/src/test/java/com/thoughtworks/selenium/I18nTest.java
Patch:
@@ -13,7 +13,7 @@
 
 public class I18nTest extends TestCase {
     
-    private static String startUrl = "http://localhost:" + SeleniumServer.DEFAULT_PORT;
+    private static String startUrl = "http://localhost:" + SeleniumServer.getDefaultPort();
     private static Selenium sel;
     //private static SeleniumServer server;
     
@@ -31,7 +31,7 @@ public void setUp() throws Exception {
             //server = new SeleniumServer();
             //server.start();
             try {
-                sel = new DefaultSelenium("localhost", SeleniumServer.DEFAULT_PORT, "*firefox",
+                sel = new DefaultSelenium("localhost", SeleniumServer.getDefaultPort(), "*firefox",
                         startUrl);
                 sel.start();
             } catch (Exception e) {

File: clients/java/src/test/java/com/thoughtworks/selenium/RealDealIntegrationTest.java
Patch:
@@ -31,7 +31,7 @@ public class RealDealIntegrationTest extends TestCase {
 
     protected void setUp() throws Exception {
         super.setUp();
-        selenium = new DefaultSelenium("localhost", SeleniumServer.DEFAULT_PORT, "*firefox", "http://localhost:" + SeleniumServer.DEFAULT_PORT);
+        selenium = new DefaultSelenium("localhost", SeleniumServer.getDefaultPort(), "*firefox", "http://localhost:" + SeleniumServer.getDefaultPort());
         selenium.start();
     }
 

File: server/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -502,6 +502,7 @@ public void handleConnect(String pathInContext, String pathParams, HttpRequest r
             }
         }
         catch (Exception e) {
+            System.err.println("handleConnect: ProxyHandler.java: " + e);
             LogSupport.ignore(log, e);
             response.sendError(HttpResponse.__500_Internal_Server_Error);
         }

File: clients/java/src/test/java/com/thoughtworks/selenium/SeleneseTestCase.java
Patch:
@@ -46,10 +46,11 @@ protected void setUp(String url) throws Exception {
     
     protected void setUp(String url, String browserMode) throws Exception {
         super.setUp();
+        int port = SeleniumServer.getDefaultPort();
         if (url==null) {
-            url = "http://localhost:" + SeleniumServer.DEFAULT_PORT;
+            url = "http://localhost:" + port;
         }
-        selenium = new DefaultSelenium("localhost", SeleniumServer.DEFAULT_PORT, browserMode, url);
+        selenium = new DefaultSelenium("localhost", port, browserMode, url);
         selenium.start();
     }
 

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -229,6 +229,7 @@ protected static void generatePacAndPrefJs(File customProfileDir, int port, bool
 			out.println("user_pref('startup.homepage_override_url', '" + homePage + "');");
 			// for Firefox 2.0
 			out.println("user_pref('browser.startup.homepage', '" + homePage + "');");
+            out.println("user_pref('startup.homepage_welcome_url', '');");
 		}
 
 		// Disable security warnings

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/BrowserLauncherFactory.java
Patch:
@@ -131,7 +131,7 @@ private BrowserLauncher createBrowserLauncher(Class c, String browserStartComman
 
                 return browserLauncher;
 	    } catch (InvocationTargetException e) {
-		throw new RuntimeException("failed to contruct launcher for "+browserStartCommand +"for"+  e.getTargetException());
+		throw new RuntimeException("failed to contruct launcher for "+browserStartCommand, e.getTargetException());
             } catch (Exception e) {
                 throw new RuntimeException(e);
             }

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/WindowsUtils.java
Patch:
@@ -373,7 +373,7 @@ public static boolean isRegExeVersion1() {
     
     public static Class discoverRegistryKeyType(String key) {
     	if (!doesRegistryValueExist(key)) {
-    		throw new WindowsRegistryException("Can't discover reg key type, because key doesn't exist: " + key);
+    		return null;
     	}
     	RegKeyValue r = new RegKeyValue(key);
     	String output = runRegQuery(key);

File: clients/java/src/main/java/com/thoughtworks/selenium/Wait.java
Patch:
@@ -59,8 +59,8 @@ public Wait(String message, long timeoutInMilliseconds, long intervalInMilliseco
     /** The amout of time to wait before giving up; the default is 30 seconds */
     public long timeoutInMilliseconds = 30000l;
     
-    /** The interval to pause between checking; the default is 50 milliseconds */ 
-    public long intervalInMilliseconds = 50l;
+    /** The interval to pause between checking; the default is 500 milliseconds */ 
+    public long intervalInMilliseconds = 500l;
     
     /** Wait until the "until" condition returns true or the timeout happens
      * 

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientDriverSuite.java
Patch:
@@ -51,12 +51,10 @@ public static Test suite() {
             TestSuite suite = new TestSuite(ClientDriverSuite.class.getName());
             suite.addTestSuite(ApacheMyFacesSuggestTest.class);
             if (isProxyInjectionMode) {
-                if (forcedBrowserMode.equals("*piiexplore")) { // BUG in PI mode multiple window handling
 //                  once frames support is added to the main trunk, we will be able to run the following in non-proxy injection mode:
                     suite.addTestSuite(TestFramesClick.class);
                     suite.addTestSuite(TestFramesOpen.class);
                     suite.addTestSuite(TestFramesNested.class);
-                }
             }
             suite.addTest(I18nTest.suite());
             suite.addTestSuite(RealDealIntegrationTest.class);

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -20,7 +20,6 @@
 import net.sf.cotta.TFileFactory;
 import net.sf.cotta.utils.ClassPathLocator;
 import org.apache.tools.ant.taskdefs.condition.Os;
-import org.openqa.selenium.server.browserlaunchers.AsyncExecute.*;
 
 import java.io.File;
 import java.io.IOException;

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncher.java
Patch:
@@ -20,7 +20,6 @@
 import net.sf.cotta.TFileFactory;
 import net.sf.cotta.utils.ClassPathLocator;
 import org.apache.tools.ant.taskdefs.condition.Os;
-import org.openqa.selenium.server.browserlaunchers.AsyncExecute.*;
 
 import java.io.File;
 import java.io.IOException;

File: server/src/main/java/org/openqa/selenium/server/htmlrunner/SeleniumHTMLRunnerResultsHandler.java
Patch:
@@ -49,7 +49,7 @@ public void handle(String pathInContext, String pathParams, HttpRequest request,
         
         int numTotalTests = Integer.parseInt(numTestPasses) + Integer.parseInt(numTestFailures);
         
-        List testTables = createTestTables(request, numTotalTests);
+        List<String> testTables = createTestTables(request, numTotalTests);
 
         
         HTMLTestResults results = new HTMLTestResults(result, totalTime,
@@ -73,7 +73,7 @@ private void processResults(HTMLTestResults results, HttpResponse res) throws IO
         writer.flush();
     }
     
-    private List createTestTables(HttpRequest request, int numTotalTests) {
+    private List<String> createTestTables(HttpRequest request, int numTotalTests) {
         List<String> testTables = new LinkedList<String>();
         for (int i = 1; i <= numTotalTests; i++) {
             String testTable = request.getParameter("testTable." + i);

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/WindowsUtils.java
Patch:
@@ -491,11 +491,12 @@ public static void writeIntRegistryValue(String key, int data) {
         if (isRegExeVersion1()) {
             if (doesRegistryValueExist(key)) {
                 exec.createArg().setValue("update");
+                exec.createArg().setValue(key + "=" + Integer.toString(data));
             } else {
                 exec.createArg().setValue("add");
+                exec.createArg().setValue(key + "=" + Integer.toString(data));
+                exec.createArg().setValue("REG_DWORD");
             }
-        	exec.createArg().setValue(key + "=" + Integer.toString(data));
-        	exec.createArg().setValue("REG_DWORD");
         } else {
             exec.createArg().setValue("add");
         	RegKeyValue r = new RegKeyValue(key);

File: server/src/test/java/org/openqa/selenium/UnitTestSuite.java
Patch:
@@ -19,6 +19,7 @@ public static Test suite() {
         suite.addTestSuite(StaticContentHandlerTest.class);
         suite.addTestSuite(WindowsUtilsTest.class);
         suite.addTestSuite(FirefoxChromeLauncherTest.class);
+        suite.addTestSuite(HTMLSuiteResultTest.class);
         return suite;
     }
 }

File: server/src/test/java/org/openqa/selenium/server/HTMLRunnerTestBase.java
Patch:
@@ -57,7 +57,7 @@ protected void runHTMLSuite(String browser, boolean slowResources) throws Except
         int timeout = 60 * 10; // ten minutes
         String result = launcher.runHTMLSuite(browser, browserURL, testURL, output, timeout, multiWindow);
         assertTrue("Results file doesn't exist: " + output.getAbsolutePath(), output.exists());
-        assertEquals("Tests didn't pass", "PASSED", result);
+        assertEquals("Tests didn't pass, check HTML output for details: " + output.getAbsolutePath(), "PASSED", result);
     }
     
     

File: server/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -357,9 +357,9 @@ public String doCommand(String cmd, Vector<String> values, String sessionId, Htt
                 if (values.size() > 4) {
                     output = new File(values.get(4));
                 }
-                long timeoutInMs = SeleniumServer.getTimeoutInSeconds() * 1000;
+                
                 try {
-                    results = launcher.runHTMLSuite( values.get(0),  values.get(1),  values.get(2), output, timeoutInMs, "true".equals(values.get(3)));
+                    results = launcher.runHTMLSuite( values.get(0),  values.get(1),  values.get(2), output, SeleniumServer.getTimeoutInSeconds(), "true".equals(values.get(3)));
                 } catch (IOException e) {
                     e.printStackTrace();
                     results = e.toString();

File: server/src/main/java/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java
Patch:
@@ -36,7 +36,8 @@ public HTMLLauncher(SeleniumServer server) {
      * @return PASS or FAIL
      * @throws IOException if we can't write the output file
      */
-    public String runHTMLSuite(String browser, String browserURL, String HTMLSuite, File outputFile, long timeoutInMs, boolean multiWindow) throws IOException {
+    public String runHTMLSuite(String browser, String browserURL, String HTMLSuite, File outputFile, int timeoutInSeconds, boolean multiWindow) throws IOException {
+        long timeoutInMs = 1000 * timeoutInSeconds;
         server.handleHTMLRunnerResults(this);
         BrowserLauncherFactory blf = new BrowserLauncherFactory(server);
         String sessionId = Long.toString(System.currentTimeMillis() % 1000000);

File: server/src/test/java/org/openqa/selenium/server/HTMLRunnerTestBase.java
Patch:
@@ -54,7 +54,7 @@ protected void runHTMLSuite(String browser, boolean slowResources) throws Except
         server.start();
         browserURL = "http://localhost:" + server.getPort();
         String testURL = browserURL + "/selenium-server/tests/" + suiteName;
-        long timeout = 1000 * 60 * 10; // ten minutes
+        int timeout = 60 * 10; // ten minutes
         String result = launcher.runHTMLSuite(browser, browserURL, testURL, output, timeout, multiWindow);
         assertTrue("Results file doesn't exist: " + output.getAbsolutePath(), output.exists());
         assertEquals("Tests didn't pass", "PASSED", result);

File: server/src/main/java/org/openqa/selenium/server/InjectionHelper.java
Patch:
@@ -136,9 +136,6 @@ public static void injectJavaScript(boolean isKnownToBeHtml, HttpResponse respon
             }
         }
         String url = response.getHttpRequest().getRequestURL().toString();
-        if (url.equals("http://process-sel1:8080/portal/server.pt/gateway/PTARGS_39_0_206_0_0_47/")) {
-            System.out.println("hi");
-        }
         if (SeleniumServer.getDebugURL().equals(url)) {
             System.out.println("debug URL seen");
         }

File: server/src/main/java/org/openqa/selenium/server/InjectionHelper.java
Patch:
@@ -77,16 +77,16 @@ public static void init() {
         try {
             appendFileContent(sb, "/jsunit/app/jsUnitCore.js");
             appendFileContent(sb, "/core/scripts/xmlextras.js");
+            appendFileContent(sb, "/core/lib/prototype.js");
             appendFileContent(sb, "/core/scripts/selenium-browserdetect.js");
             appendFileContent(sb, "/core/scripts/selenium-browserbot.js");
-            appendFileContent(sb, "/core/scripts/prototype-1.4.0.js");
             appendFileContent(sb, "/core/scripts/find_matching_child.js");
+            appendFileContent(sb, "/core/scripts/htmlutils.js");
             appendFileContent(sb, "/core/scripts/selenium-api.js");
             appendFileContent(sb, "/core/scripts/selenium-commandhandlers.js");
             appendFileContent(sb, "/core/scripts/selenium-executionloop.js");
             appendFileContent(sb, "/core/scripts/selenium-seleneserunner.js");
             appendFileContent(sb, "/core/scripts/selenium-logging.js");
-            appendFileContent(sb, "/core/scripts/htmlutils.js");
             appendFileContent(sb, "/core/xpath/misc.js");
             appendFileContent(sb, "/core/xpath/dom.js");
             appendFileContent(sb, "/core/xpath/xpath.js");

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -113,13 +113,13 @@ private static String findBrowserLaunchLocation() {
     }
 
     protected void launch(String url) {
-        try {
+        try {        
             String homePage = new ChromeUrlConvert().convert(url, port);
             String profilePath = makeCustomProfile(homePage);
 
             String chromeURL = "chrome://killff/content/kill.html";
 
-            cmdarray = new String[]{commandPath, "-profile", profilePath, chromeURL};
+            cmdarray = new String[]{commandPath, "-profile", profilePath, "-chrome", chromeURL};
 
             /* The first time we launch Firefox with an empty profile directory,
      * Firefox will launch itself, populate the profile directory, then

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncher.java
Patch:
@@ -123,7 +123,7 @@ protected void launch(String url) {
 
             String chromeURL = "chrome://killff/content/kill.html";
 
-            cmdarray = new String[]{commandPath, "-profile", customProfileDir().getAbsolutePath(), chromeURL};
+            cmdarray = new String[]{commandPath, "-profile", customProfileDir().getAbsolutePath(), "-chrome", chromeURL};
 
             /* The first time we launch Firefox with an empty profile directory,
      * Firefox will launch itself, populate the profile directory, then

File: server/src/main/java/org/openqa/selenium/server/ClasspathResourceLocator.java
Patch:
@@ -1,10 +1,10 @@
 package org.openqa.selenium.server;
 
+import java.io.IOException;
+
 import org.mortbay.http.HttpContext;
 import org.mortbay.util.Resource;
 
-import java.io.IOException;
-
 public class ClasspathResourceLocator implements ResourceLocator {
     public Resource getResource(HttpContext context, String pathInContext) throws IOException {
         Resource resource = new ClassPathResource(pathInContext);

File: server/src/main/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -513,7 +513,8 @@ private void assembleHandlers(boolean slowResources) {
 
         HttpContext context = new HttpContext();
         context.setContextPath("/selenium-server");
-
+        context.setMimeMapping("xhtml", "application/xhtml+xml");
+        log(context.getMimeMap().get("xhtml").toString());
 
         staticContentHandler = new StaticContentHandler(slowResources);
         String overrideJavascriptDir = System.getProperty("selenium.javascript.dir");

File: server/src/test/java/org/openqa/selenium/server/StaticContentHandlerTest.java
Patch:
@@ -25,7 +25,7 @@ public void testShouldMakePageNotCachedWhenHandle() throws Exception {
         handler.handle("", "", new HttpRequest(), response);
         assertEquals("-1", response.getField("Expires"));
     }
-
+    
     public void testShouldDelayResourceLoadingIfSetToSlow() throws Exception {
         long start = new Date().getTime();
         slowHandler.getResource("not_exists");

File: server/src/main/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -268,6 +268,7 @@ public static void main(String[] args) throws Exception {
         }
         System.setProperty("org.mortbay.http.HttpRequest.maxFormContentSize", "0"); // default max is 200k; zero is infinite
         final SeleniumServer seleniumProxy = new SeleniumServer(port);
+        seleniumProxy.multiWindow = multiWindow;
         checkArgsSanity(port, interactive, htmlSuite,
                 proxyInjectionModeArg, portDriversShouldContactArg, seleniumProxy);
         Thread jetty = new Thread(new Runnable() {

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/ProxyInjectionFirefoxCustomProfileLauncher.java
Patch:
@@ -16,12 +16,12 @@ public class ProxyInjectionFirefoxCustomProfileLauncher extends
         FirefoxCustomProfileLauncher {
 
     public ProxyInjectionFirefoxCustomProfileLauncher(int port, String sessionId) {
-        super(sessionId);
+        super(port, sessionId);
     }
 
     public ProxyInjectionFirefoxCustomProfileLauncher(int port,
             String sessionId, String browserLaunchLocation) {
-        super(sessionId, browserLaunchLocation);
+        super(port, sessionId, browserLaunchLocation);
     }
 
     @Override

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -419,7 +419,9 @@ private class FileLockRemainedException extends Exception {
     
     public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWindow) {
         launch("http://localhost:" + port + 
-                "/selenium-server/core/TestRunner.html?auto=true&resultsUrl=http://localhost:" + port + 
+                "/selenium-server/core/TestRunner.html?auto=true" +
+                "&multiWindow=" + multiWindow +
+                "&resultsUrl=http://localhost:" + port + 
                 "/selenium-server/postResults&test=" + suiteUrl, "TestRunner.html");
         
     }

File: server/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -451,7 +451,8 @@ else if (SeleniumServer.isProxyInjectionMode() && browserString.equals("*firefox
             sessionIdsToBrowserStrings.put(sessionId, browserString);
             
             queue.setResultExpected(true); // keep initial load result for call to discardCommandResult below
-            launcher.launchRemoteSession(startURL);
+            boolean multiWindow = server.isMultiWindow();
+            launcher.launchRemoteSession(startURL, multiWindow);
             queue.discardCommandResult();
         }
         SeleniumServer.log("Allocated session " + sessionId + " for " + startURL);

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/BrowserLauncher.java
Patch:
@@ -24,8 +24,9 @@
  * @version $Revision: 732 $
  */
 public interface BrowserLauncher {
-    /** Start the browser and navigate directly to the specified URL */
-    void launchRemoteSession(String url);
+    /** Start the browser and navigate directly to the specified URL 
+     * @param multiWindow TODO*/
+    void launchRemoteSession(String url, boolean multiWindow);
     /** Start the browser in Selenese mode, auto-running the specified HTML suite
      * 
      * @param startURL the url within which to initiate the session (if needed)

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/DestroyableRuntimeExecutingBrowserLauncher.java
Patch:
@@ -51,8 +51,8 @@ public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWin
         launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow));
     }
     
-    public void launchRemoteSession(String browserURL) {
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId));
+    public void launchRemoteSession(String browserURL, boolean multiWindow) {
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, multiWindow));
     }
 
     protected void exec(String command) {

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -424,7 +424,7 @@ public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWin
         
     }
     
-    public void launchRemoteSession(String browserURL) {
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId), "SeleneseRunner.html");
+    public void launchRemoteSession(String browserURL, boolean multiWindow) {
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, multiWindow), "SeleneseRunner.html");
     }
 }

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxCustomProfileLauncher.java
Patch:
@@ -383,8 +383,8 @@ public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWin
         launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow));
     }
     
-    public void launchRemoteSession(String browserURL) {
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId));
+    public void launchRemoteSession(String browserURL, boolean multiWindow) {
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, multiWindow));
     }
     
 }

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/HTABrowserLauncher.java
Patch:
@@ -96,8 +96,8 @@ public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWin
         //launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl), "TestRunner.hta");
     }
     
-    public void launchRemoteSession(String browserURL) {
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId), "SeleneseRunner.hta");
+    public void launchRemoteSession(String browserURL, boolean multiWindow) {
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, multiWindow), "SeleneseRunner.hta");
     }
 
 }

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/InternetExplorerCustomProxyLauncher.java
Patch:
@@ -314,7 +314,7 @@ public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWin
         launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow));
     }
     
-    public void launchRemoteSession(String browserURL) {
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId));
+    public void launchRemoteSession(String browserURL, boolean multiWindow) {
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, multiWindow));
     }
 }

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/ManualPromptUserLauncher.java
Patch:
@@ -42,8 +42,8 @@ public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWin
         launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow));
     }
     
-    public void launchRemoteSession(String browserURL) {
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId));
+    public void launchRemoteSession(String browserURL, boolean multiWindow) {
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, multiWindow));
     }
 
     public void close() {

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/OperaCustomProfileLauncher.java
Patch:
@@ -287,8 +287,8 @@ public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWin
         launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow));
     }
     
-    public void launchRemoteSession(String browserURL) {
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId));
+    public void launchRemoteSession(String browserURL, boolean multiWindow) {
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, multiWindow));
     }
     
 }

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/SafariCustomProfileLauncher.java
Patch:
@@ -156,7 +156,7 @@ public void launchHTMLSuite(String suiteUrl, String browserURL, boolean multiWin
         launch(LauncherUtils.getDefaultHTMLSuiteUrl(browserURL, suiteUrl, multiWindow));
     }
     
-    public void launchRemoteSession(String browserURL) {
-        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId));
+    public void launchRemoteSession(String browserURL, boolean multiWindow) {
+        launch(LauncherUtils.getDefaultRemoteSessionUrl(browserURL, sessionId, multiWindow));
     }
 }

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -307,7 +307,8 @@ private void embedSeleniumExtension() throws FileNotFoundException, MalformedURL
         File chromeManifest = new File(extensionDir, "chrome.manifest");
         out = new PrintStream(new FileOutputStream(chromeManifest));
         out.print("content\tsrc\t");
-        out.println(htmlDir.toURI().toURL());
+        out.print(htmlDir.toURI().toURL());
+        out.println("\txpcnativewrappers=no");
         out.close();
     }
 

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/FirefoxChromeLauncher.java
Patch:
@@ -160,7 +160,6 @@ public void launch(String url, String htmlName) {
             
             cmdarray = new String[] {commandPath, "-profile", profilePath};
             exe.setCommandline(cmdarray);
-            
             process = exe.asyncSpawn();
         } catch (IOException e) {
             throw new RuntimeException(e);
@@ -264,7 +263,7 @@ private void embedKillFirefoxExtension() throws FileNotFoundException, Malformed
         File chromeManifest = new File(extensionDir, "chrome.manifest");
         out = new PrintStream(new FileOutputStream(chromeManifest));
         out.print("content\tkillff\t");
-        out.println(killHTML.toURL());
+        out.println(killHTML.toURI().toURL());
         out.close();
     }
 
@@ -308,7 +307,7 @@ private void embedSeleniumExtension() throws FileNotFoundException, MalformedURL
         File chromeManifest = new File(extensionDir, "chrome.manifest");
         out = new PrintStream(new FileOutputStream(chromeManifest));
         out.print("content\tsrc\t");
-        out.println(htmlDir.toURL());
+        out.println(htmlDir.toURI().toURL());
         out.close();
     }
 

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/BrowserLauncherFactory.java
Patch:
@@ -19,7 +19,7 @@
 import org.openqa.selenium.server.SeleneseQueue;
 import org.openqa.selenium.server.SeleniumServer;
 
-import java.lang.reflect.Constructor;
+import java.lang.reflect.*;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.Map;
@@ -128,6 +128,8 @@ private BrowserLauncher createBrowserLauncher(Class c, String browserStartComman
                 }
 
                 return browserLauncher;
+	    } catch (InvocationTargetException e) {
+		throw new RuntimeException("failed to contruct launcher for "+browserStartCommand +"for"+  e.getTargetException());
             } catch (Exception e) {
                 throw new RuntimeException(e);
             }

File: server/src/main/java/org/openqa/selenium/server/SingleEntryAsyncQueue.java
Patch:
@@ -120,7 +120,7 @@ public boolean isEmpty() {
     }
 
     public String toString() {
-        return thing.toString();
+        return thing==null ? "null" : thing.toString();
     }
 
     /**

File: server/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -449,6 +449,8 @@ else if (SeleniumServer.isProxyInjectionMode() && browserString.equals("*firefox
             BrowserLauncher launcher = blf.getBrowserLauncher(browserString, sessionId, queue);
             launchers.put(sessionId, launcher);
             sessionIdsToBrowserStrings.put(sessionId, browserString);
+            
+            queue.setResultExpected(true); // keep initial load result for call to discardCommandResult below
             launcher.launchRemoteSession(startURL);
             queue.discardCommandResult();
         }

File: server/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -352,7 +352,9 @@ public void handle(String pathInContext, String pathParams, HttpRequest request,
                 
                 String contentType = http.getContentType();
                 System.out.println("Content-Type is: " + contentType);
-                isKnownToBeHtml = ((contentType!=null) && "text/html".equals(contentType));
+                if (contentType != null) {
+                    isKnownToBeHtml = contentType.startsWith("text/html");
+                }
             }
 
             if (proxy_in == null) {

File: server/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -350,8 +350,9 @@ public void handle(String pathInContext, String pathParams, HttpRequest request,
                 response.setStatus(code);
                 response.setReason(http.getResponseMessage());
                 
-                String contentType = http.getHeaderField("Content-Type");
-                isKnownToBeHtml = ((contentType!=null) && "text/html".equals(contentType));                
+                String contentType = http.getContentType();
+                System.out.println("Content-Type is: " + contentType);
+                isKnownToBeHtml = ((contentType!=null) && "text/html".equals(contentType));
             }
 
             if (proxy_in == null) {

File: server/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -388,7 +388,9 @@ public void handle(String pathInContext, String pathParams, HttpRequest request,
             // Handled
             request.setHandled(true);
             if (proxy_in != null) {
-            	if (SeleniumServer.isProxyInjectionMode() && http.getResponseCode()==HttpURLConnection.HTTP_OK) {
+            	if (SeleniumServer.isProxyInjectionMode() 
+                        && http.getResponseCode()==HttpURLConnection.HTTP_OK
+                        && !request.getPath().endsWith(".dll")) {   // ebay dll contains HTML snippets which fool InjectionHelper.  -nas
             		InjectionHelper.injectJavaScript(seleniumServer, isKnownToBeHtml, response, proxy_in, response.getOutputStream());
             	}
             	else {

File: server/src/main/java/org/openqa/selenium/server/SeleneseQueue.java
Patch:
@@ -108,13 +108,13 @@ public String doCommand(String command, String field, String value) {
     private String makeJavaScript() {
         StringBuffer sb = new StringBuffer(InjectionHelper.restoreJsStateInitializer(sessionId, uniqueId));
         if (frameAddress!=null && !frameAddress.getWindowName().equals(FrameGroupSeleneseQueueSet.DEFAULT_SELENIUM_WINDOW_NAME)) {
-            sb.append("window['seleniumWindowName']=unescape('");
+            sb.append("setSeleniumWindowName(unescape('");
             try {
                 sb.append(URLEncoder.encode(frameAddress.getWindowName(), "UTF-8"));
             } catch (UnsupportedEncodingException e) {
                 throw new RuntimeException("URLEncoder failed: " + e);
             }
-            sb.append("');");
+            sb.append("'));");
         }
         return sb.toString();
     }

File: server/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -351,7 +351,7 @@ else if (!url.startsWith(domain)) {
 
     private String getNewBrowserSession(String browser, String startURL) {
         if (SeleniumServer.getDefaultBrowser()!=null) {
-            browser = SeleniumServer.getDefaultBrowser();
+            browser = SeleniumServer.getDefaultBrowser(); 
         }
         if (browser == null) throw new IllegalArgumentException("browser may not be null");
         String sessionId = Long.toString(System.currentTimeMillis());

File: server/src/main/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -138,7 +138,7 @@ public class SeleniumServer {
     private static boolean debugMode = false;
     private static boolean proxyInjectionMode = false;
     private static int proxyInjectionPort = 0;
-    private static String defaultBrowser = null;
+    private static String defaultBrowser = null; 
      
     public static final int DEFAULT_PORT = 4444;
     public static final int DEFAULT_TIMEOUT= (30 * 60);

File: server/src/main/java/org/openqa/selenium/server/testgenerator/XlateHtmlSeleneseToJava.java
Patch:
@@ -95,7 +95,6 @@ else if (DIR.equals(inputFileList.get(s))) {
                 String children[] = dir.list();
                 for (int k = 0; k < children.length; k++) {
                     String fileName = children[k];
-                    System.out.println("ck " + fileName);
                     if (skipList.containsKey(fileName)) {
                         System.out.println("Skipping " + fileName);
                     }

File: server/src/main/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -507,6 +507,7 @@ public void sendData(HttpRequest request,
         {
             if (!SeleniumServer.isProxyInjectionMode()) {
                 super.sendData(request, response, pathInContext, resource, writeHeaders);
+                return;
             }
             ResourceCache.ResourceMetaData metaData = (ResourceCache.ResourceMetaData)resource.getAssociate();
             

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/LauncherUtils.java
Patch:
@@ -6,6 +6,7 @@
 
 import org.apache.tools.ant.*;
 import org.apache.tools.ant.taskdefs.*;
+import org.openqa.selenium.server.SeleniumServer;
 
 /**
  * Various static utility functions used to launch browsers
@@ -104,7 +105,7 @@ protected static String getDefaultHTMLSuiteUrl(String browserURL, String suiteUr
     
     protected static String getDefaultRemoteSessionUrl(String startURL, String sessionId) {
         String url = LauncherUtils.stripStartURL(startURL);
-        return url + "/selenium-server/core/SeleneseRunner.html?sessionId=" + sessionId;
+        return url + "/selenium-server/core/SeleneseRunner.html?sessionId=" + sessionId + "&debugMode=" + SeleniumServer.isDebugMode();
     }
 
     protected static File extractHTAFile(File dir, int port, String resourceFile, String outFile) {

File: server/src/main/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -165,13 +165,13 @@ public static void main(String[] args) throws Exception {
                 System.exit(1);
             }
             else if ("-port".equals(arg)) {
-                port = Integer.parseInt(args[i + 1]);
+                port = Integer.parseInt(args[++i]);
             }
             else if ("-debug".equals(arg)) {
                 SeleniumServer.setDebugMode(true);
             }
             else if ("-timeout".equals(arg)) {
-                timeout = Integer.parseInt(args[i + 1]);
+                timeout = Integer.parseInt(args[++i]);
             }
             else if ("-userExtensions".equals(arg)) {
                 userExtensions = new File(args[++i]);

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/DestroyableRuntimeExecutingBrowserLauncher.java
Patch:
@@ -60,7 +60,7 @@ protected void exec(String command) {
         try {
             process = Runtime.getRuntime().exec(command);
         } catch (IOException e) {
-            throw new RuntimeException(e);
+            throw new RuntimeException("Error starting browser by executing command " + command + ": " + e);
         }
     }
 }

File: server/src/test/java/org/openqa/selenium/QueueTest.java
Patch:
@@ -93,7 +93,7 @@ public void testClearHungPutter() throws Exception {
     }
     
     public void testGetFromEmptyQueue() throws Exception {
-        SingleEntryAsyncQueue.setTimeout(0);
+        q.setTimeout(0);
         boolean seleniumCommandTimedOutExceptionSeen = false;
         try {
             q.get();

File: server/src/main/java/org/openqa/selenium/server/testgenerator/XlateHtmlSeleneseToJava.java
Patch:
@@ -505,7 +505,7 @@ else if (op.equals("Confirmation")
             else if (op.equals("Value")
                     || op.equals("CursorPosition")
                     || op.equals("Attribute")
-                    || op.startsWith("Selected")
+                    || op.matches("^Select.*[^s]$")
                     || op.equals("Text")) {
                 middle = XlateSeleneseArgument(tokens[2]) + ", selenium.get" + op + "(" + XlateSeleneseArgument(tokens[1]) + ")";
             }

File: clients/java/src/test/java/com/thoughtworks/selenium/SeleneseTestCase.java
Patch:
@@ -120,8 +120,7 @@ public static boolean seleniumEquals(String s1, String s2) {
         
         String s1glob = s1.replaceFirst("glob:", ".*")
         .replaceAll("\\*", ".*")
-        .replaceAll("[\\]\\[\\$\\(\\).]", "\\\\$1")
-        .replaceAll("\\.", "\\\\.")
+        .replaceAll("([\\]\\[\\$\\(\\).])", "\\\\$1")
         .replaceAll("\\?", ".") + ".*";
         if (!s2.matches(s1glob)) {
             System.out.println("expected " + s2 + " to match glob " + s1 + " (had transformed the glob into regexp:" + s1glob);

File: server/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -27,7 +27,6 @@
 import org.mortbay.util.*;
 import org.openqa.selenium.server.browserlaunchers.*;
 import org.openqa.selenium.server.htmlrunner.*;
-import org.openqa.selenium.server.util.IOUtils;
 
 /**
  * A Jetty handler that takes care of Selenese Driven requests.

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientDriverSuite.java
Patch:
@@ -39,7 +39,7 @@ public static Test suite() {
             ClientDriverSuite supersuite = new ClientDriverSuite();
             ClientDriverSuite suite = new ClientDriverSuite();
             suite.addTest(I18nTest.suite());
-            //suite.addTestSuite(ApacheMyFacesSuggestTest.class);	disabled pending DOJO combobox trouble issue resolution
+            //suite.addTestSuite(ApacheMyFacesSuggestTest.class);	disabled pending DOJO combobox trouble issue resolution (http://jira.openqa.org/browse/SRC-55)
             suite.addTestSuite(RealDealIntegrationTest.class);
             suite.addTestSuite(TestErrorChecking.class);
             suite.addTestSuite(TestJavascriptParameters.class);

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientDriverSuite.java
Patch:
@@ -39,7 +39,7 @@ public static Test suite() {
             ClientDriverSuite supersuite = new ClientDriverSuite();
             ClientDriverSuite suite = new ClientDriverSuite();
             suite.addTest(I18nTest.suite());
-            suite.addTestSuite(ApacheMyFacesSuggestTest.class);
+            //suite.addTestSuite(ApacheMyFacesSuggestTest.class);	disabled pending DOJO combobox trouble issue resolution
             suite.addTestSuite(RealDealIntegrationTest.class);
             suite.addTestSuite(TestErrorChecking.class);
             suite.addTestSuite(TestJavascriptParameters.class);

File: server/src/main/java/org/openqa/selenium/server/DefaultSeleneseCommand.java
Patch:
@@ -47,7 +47,7 @@ public String getCommandURLString() {
     }
     
     public String toString() {
-        return "|" + command + "|" + field + "|" + value + "|";
+        return getCommandURLString();
     }
 
     /** Factory method to create a SeleneseCommand from a wiki-style input string */

File: server/src/main/java/org/openqa/selenium/server/testgenerator/XlateHtmlSeleneseToJava.java
Patch:
@@ -61,7 +61,7 @@ else if (args[j].equals("-dir")) {
                 String dirName = args[++j];
                 File dir = new File(dirName);
                 if (!dir.isDirectory()) {
-                    Usage("-dir must be followed by a directory");
+                    Usage("-dir is not a directory: " + dirName);
                 }
                 String children[] = dir.list();
                 for (int k = 0; k < children.length; k++) {

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientDriverSuite.java
Patch:
@@ -9,7 +9,7 @@
 
 import org.openqa.selenium.server.*;
 
-//import com.thoughtworks.selenium.corebased.*;
+import com.thoughtworks.selenium.corebased.*;
 
 /** The wrapper test suite for these tests, which spawns an in-process Selenium Server
  * for simple integration testing.
@@ -38,6 +38,8 @@ public static Test suite() {
         ClientDriverSuite supersuite = new ClientDriverSuite();
         ClientDriverSuite suite = new ClientDriverSuite();
         suite.addTestSuite(ApacheMyFacesSuggestTest.class);
+        suite.addTestSuite(TestErrorChecking.class);
+        suite.addTestSuite(TestJavascriptParameters.class);
         /*
         suite.addTestSuite(TestClick.class);
         suite.addTestSuite(TestCheckUncheck.class);

File: clients/java/src/test/java/com/thoughtworks/selenium/ClientDriverSuite.java
Patch:
@@ -38,6 +38,7 @@ public static Test suite() {
         ClientDriverSuite supersuite = new ClientDriverSuite();
         ClientDriverSuite suite = new ClientDriverSuite();
         suite.addTestSuite(ApacheMyFacesSuggestTest.class);
+        /*
         suite.addTestSuite(TestClick.class);
         suite.addTestSuite(TestCheckUncheck.class);
         suite.addTestSuite(TestClick.class);
@@ -63,6 +64,7 @@ public static Test suite() {
         suite.addTestSuite(TestVerifyEditable.class);
         suite.addTestSuite(TestVerifyEditableFailures.class);
         suite.addTestSuite(TestVisibilityFailures.class);
+        */
         suite.addTestSuite(RealDealIntegrationTest.class);
         ClientDriverTestSetup setup = new ClientDriverTestSetup(suite);
         supersuite.addTest(setup);

File: server/src/main/java/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java
Patch:
@@ -40,7 +40,8 @@ public String runHTMLSuite(String browser, String browserURL, String HTMLSuite,
         BrowserLauncherFactory blf = new BrowserLauncherFactory(server);
         String sessionId = Long.toString(System.currentTimeMillis());
         BrowserLauncher launcher = blf.getBrowserLauncher(browser, sessionId);
-        launcher.launch(browserURL + "/selenium-server/core/TestRunner.html?auto=true&resultsUrl=../postResults&test=" + HTMLSuite);
+        String url = BrowserLauncherFactory.stripStartURL(browserURL);
+        launcher.launch(url + "/selenium-server/core/TestRunner.html?auto=true&resultsUrl=../postResults&test=" + HTMLSuite);
         long now = System.currentTimeMillis();
         long end = now + timeout * 1000;
         while (results == null && System.currentTimeMillis() < end) {

File: clients/java/src/main/java/com/thoughtworks/selenium/HttpCommandProcessor.java
Patch:
@@ -44,7 +44,7 @@ public class HttpCommandProcessor implements CommandProcessor {
      * @param serverPort - the port on which the Selenium Server is listening
      * @param browserStartCommand - the command string used to launch the browser, e.g. "*firefox" or "c:\\program files\\internet explorer\\iexplore.exe"
      * @param browserURL - the starting URL including just a domain name.  We'll start the browser pointing at the Selenium resources on this URL,
-     * e.g. "http://www.google.com" would send the browser to "http://www.google.com/selenium-server/SeleneseRunner.html"
+     * e.g. "http://www.google.com" would send the browser to "http://www.google.com/selenium-server/core/SeleneseRunner.html"
      */
     public HttpCommandProcessor(String serverHost, int serverPort, String browserStartCommand, String browserURL) {
         this.pathToServlet = "http://" + serverHost + 

File: clients/java/src/test/java/com/thoughtworks/selenium/ResourceAvailabilityTest.java
Patch:
@@ -11,7 +11,7 @@
 public class ResourceAvailabilityTest extends TestCase {
 
     public void testResourceAvailable() {
-        InputStream s = ResourceAvailabilityTest.class.getResourceAsStream("/selenium/SeleneseRunner.html");
+        InputStream s = ResourceAvailabilityTest.class.getResourceAsStream("/core/SeleneseRunner.html");
         assertNotNull("SeleneseRunner can't be found!", s);
     }
 }

File: server/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -279,7 +279,7 @@ public void handle(String pathInContext, String pathParams, HttpRequest request,
                     String val = (String) vals.nextElement();
                     if (val != null) {
                         // don't proxy Referer headers if the referer is Selenium!
-                        if ("Referer".equals(hdr) && (-1 != val.indexOf("/selenium-server/SeleneseRunner.html"))) {
+                        if ("Referer".equals(hdr) && (-1 != val.indexOf("/selenium-server/core/SeleneseRunner.html"))) {
                             continue;
                         }
 

File: server/src/main/java/org/openqa/selenium/server/SeleniumDriverResourceHandler.java
Patch:
@@ -191,7 +191,7 @@ private String getNewBrowserSession(String browser, String startURL) {
         String results;
         BrowserLauncherFactory blf = new BrowserLauncherFactory(server);
         BrowserLauncher launcher = blf.getBrowserLauncher(browser, sessionId);
-        launcher.launch(startURL + "/selenium-server/SeleneseRunner.html?sessionId=" + sessionId);
+        launcher.launch(startURL + "/selenium-server/core/SeleneseRunner.html?sessionId=" + sessionId);
         launchers.put(sessionId, launcher);
         SeleneseQueue queue = getQueue(sessionId);
         queue.doCommand("setContext", sessionId, "");

File: server/src/main/java/org/openqa/selenium/server/SeleniumServer.java
Patch:
@@ -241,7 +241,7 @@ public void run() {
                 System.exit(1);
             }
             
-            if (!"PASS".equals(result)) {
+            if (!"PASSED".equals(result)) {
                 System.err.println("Tests failed");
                 System.exit(1);
             } else {
@@ -358,7 +358,7 @@ public void handle(String string, String string1, HttpRequest httpRequest, HttpR
 
         /** When resources are requested, fetch them from the classpath */
         protected Resource getResource(final String s) throws IOException {
-            Resource r = new ClassPathResource("/core" + s);
+            Resource r = new ClassPathResource(s);
             context.getResourceMetaData(r);
             if (!r.exists()) {
                 for (Iterator i = contentDirs.iterator(); i.hasNext();) {

File: server/src/main/java/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java
Patch:
@@ -40,7 +40,7 @@ public String runHTMLSuite(String browser, String browserURL, String HTMLSuite,
         BrowserLauncherFactory blf = new BrowserLauncherFactory(server);
         String sessionId = Long.toString(System.currentTimeMillis());
         BrowserLauncher launcher = blf.getBrowserLauncher(browser, sessionId);
-        launcher.launch(browserURL + "/selenium-server/TestRunner.html?auto=true&test=" + HTMLSuite);
+        launcher.launch(browserURL + "/selenium-server/core/TestRunner.html?auto=true&resultsUrl=../postResults&test=" + HTMLSuite);
         long now = System.currentTimeMillis();
         long end = now + timeout * 1000;
         while (results == null && System.currentTimeMillis() < end) {

File: server/src/main/java/org/openqa/selenium/server/htmlrunner/HTMLLauncher.java
Patch:
@@ -38,7 +38,8 @@ public HTMLLauncher(SeleniumServer server) {
     public String runHTMLSuite(String browser, String browserURL, String HTMLSuite, File outputFile, long timeout) throws IOException {
         server.handleHTMLRunnerResults(this);
         BrowserLauncherFactory blf = new BrowserLauncherFactory(server);
-        BrowserLauncher launcher = blf.getBrowserLauncher(browser);
+        String sessionId = Long.toString(System.currentTimeMillis());
+        BrowserLauncher launcher = blf.getBrowserLauncher(browser, sessionId);
         launcher.launch(browserURL + "/selenium-server/TestRunner.html?auto=true&test=" + HTMLSuite);
         long now = System.currentTimeMillis();
         long end = now + timeout * 1000;

File: clients/java/src/test/java/com/thoughtworks/selenium/generated/TestModalDialogDialog.java
Patch:
@@ -17,13 +17,13 @@ public void test() throws Throwable {
 			// originally verifyElementPresent|close|
 		selenium.assertElementPresent("close");
 		}
-		catch (Exception e) {
+		catch (Throwable e) {
 			sawThrow4 = true;
 		}
 		verifyFalse(sawThrow4);
 		
-			// click|close|
-			selenium.click("close");
+		// click|close|
+		selenium.click("close");
 
 		checkForVerificationErrors();
 	}

File: server/src/main/java/org/openqa/selenium/server/ProxyHandler.java
Patch:
@@ -279,7 +279,7 @@ public void handle(String pathInContext, String pathParams, HttpRequest request,
                     String val = (String) vals.nextElement();
                     if (val != null) {
                         // don't proxy Referer headers if the referer is Selenium!
-                        if ("Referer".equals(hdr) && (-1 != val.indexOf("/selenium/SeleneseRunner.html"))) {
+                        if ("Referer".equals(hdr) && (-1 != val.indexOf("/selenium-server/SeleneseRunner.html"))) {
                             continue;
                         }
 

File: server/src/main/java/org/openqa/selenium/server/SingleEntryAsyncQueue.java
Patch:
@@ -29,7 +29,7 @@ public class SingleEntryAsyncQueue {
 
     private LinkedList q = new LinkedList();
     private boolean waitingThreadsShouldThrow = false;
-    static private int timeout = 30;
+    static private int timeout = SeleniumServer.DEFAULT_TIMEOUT;
     
     class OwnerAndDataPair extends Object {
         private Object owner;

File: server/src/main/java/org/openqa/selenium/server/browserlaunchers/InternetExplorerCustomProxyLauncher.java
Patch:
@@ -164,7 +164,7 @@ private void recursivelyDeleteDir(File f) {
     
     public static void main(String[] args) throws IOException, InterruptedException {
         InternetExplorerCustomProxyLauncher l = new InternetExplorerCustomProxyLauncher(SeleniumProxy.DEFAULT_PORT);
-        l.launch("http://www.google.com/selenium-server/index.html");
+        l.launch("http://www.google.com/");
         int seconds = 5;
         System.out.println("Killing browser in " + Integer.toString(seconds) + " seconds");
         Thread.sleep(seconds * 1000);

File: server/src/test/java/org/openqa/selenium/server/browserlaunchers/InternetExplorerCustomProxyLauncherTest.java
Patch:
@@ -8,7 +8,7 @@
 
 public class InternetExplorerCustomProxyLauncherTest extends TestCase {
     
-    public void XtestIE() throws Exception {
+    public void testIE() throws Exception {
         InternetExplorerCustomProxyLauncher.main(null);
     }
 }

File: code/java/integration-test/com/thoughtworks/selenium/embedded/jetty/InBrowserWithJavaScriptIntegrationTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.thoughtworks.selenium.CommandProcessor;
 import com.thoughtworks.selenium.BrowserLauncher;
 import com.thoughtworks.selenium.launchers.WindowsDefaultBrowserLauncher;
+import com.thoughtworks.selenium.launchers.SystemDefaultBrowserLauncher;
 import junit.framework.TestCase;
 
 /**
@@ -37,7 +38,7 @@ protected void setUp() throws Exception {
         selenium = new SeleneseTestingSelenium(
                 new JettyCommandProcessor(null, DefaultSelenium.DEFAULT_SELENIUM_CONTEXT,
                         new TestIngPurposesStaticContentHandler()),
-                new WindowsDefaultBrowserLauncher()
+                new SystemDefaultBrowserLauncher()
         );
         selenium.start();
     }

File: code/java/integration-test/com/thoughtworks/selenium/embedded/jetty/InBrowserWithJavaScriptIntegrationTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.thoughtworks.selenium.CommandProcessor;
 import com.thoughtworks.selenium.BrowserLauncher;
 import com.thoughtworks.selenium.launchers.WindowsDefaultBrowserLauncher;
+import com.thoughtworks.selenium.launchers.SystemDefaultBrowserLauncher;
 import junit.framework.TestCase;
 
 /**
@@ -37,7 +38,7 @@ protected void setUp() throws Exception {
         selenium = new SeleneseTestingSelenium(
                 new JettyCommandProcessor(null, DefaultSelenium.DEFAULT_SELENIUM_CONTEXT,
                         new TestIngPurposesStaticContentHandler()),
-                new WindowsDefaultBrowserLauncher()
+                new SystemDefaultBrowserLauncher()
         );
         selenium.start();
     }

File: java/main/com/thoughtworks/selenium/WikiCommandGenerator.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * @author Aslak Helles&oslash;y
- * @version $Revision: 1.4 $
+ * @version $Revision: 1.5 $
  */
 public class WikiCommandGenerator {
     private final CommandExecutor commandExecutor;
@@ -42,7 +42,6 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                     // handles the other cases
                     String arg2 = args.length == 2 ? args[1].toString() : "";
                     wikiRow = "|" + method.getName() + "|" + args[0] + "|" + arg2 + "|";
-                    return commandExecutor.execute(wikiRow);
                 }
                 return commandExecutor.execute(wikiRow);
             }

File: java/main/com/thoughtworks/selenium/WikiCommandGenerator.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * @author Aslak Helles&oslash;y
- * @version $Revision: 1.4 $
+ * @version $Revision: 1.5 $
  */
 public class WikiCommandGenerator {
     private final CommandExecutor commandExecutor;
@@ -42,7 +42,6 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                     // handles the other cases
                     String arg2 = args.length == 2 ? args[1].toString() : "";
                     wikiRow = "|" + method.getName() + "|" + args[0] + "|" + arg2 + "|";
-                    return commandExecutor.execute(wikiRow);
                 }
                 return commandExecutor.execute(wikiRow);
             }

File: java/main/com/thoughtworks/selenium/proxy/RequestInput.java
Patch:
@@ -46,8 +46,8 @@ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 import java.io.IOException;
 
 /**
- * @version $Id: RequestInput.java,v 1.3 2004/11/13 06:16:05 ahelleso Exp $
+ * @version $Id: RequestInput.java,v 1.4 2004/11/14 06:25:52 mikemelia Exp $
  */
 public interface RequestInput {
-    public SeleniumHTTPRequest readRequest() throws IOException;
+    public HTTPRequest readRequest() throws IOException;
 }

File: java/main/com/thoughtworks/selenium/proxy/RequestInputStream.java
Patch:
@@ -49,14 +49,14 @@ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 import java.io.InputStreamReader;
 
 /**
- * @version $Id: RequestInputStream.java,v 1.3 2004/11/13 06:16:05 ahelleso Exp $
+ * @version $Id: RequestInputStream.java,v 1.4 2004/11/14 06:25:52 mikemelia Exp $
  */
 public class RequestInputStream extends BufferedReader implements RequestInput {
     public RequestInputStream(InputStream inputStream) {
         super(new InputStreamReader(inputStream));
     }
 
-    public SeleniumHTTPRequest readRequest() throws IOException {
+    public HTTPRequest readRequest() throws IOException {
         StringBuffer content = new StringBuffer();
         String line = null;
         while ((line = readLine()) != null && line.length() > 0) {

File: java/test/com/thoughtworks/selenium/proxy/CreateHostCommandTest.java
Patch:
@@ -46,7 +46,7 @@ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 import junit.framework.TestCase;
 
 /**
- * @version $Id: CreateHostCommandTest.java,v 1.4 2004/11/13 06:16:06 ahelleso Exp $
+ * @version $Id: CreateHostCommandTest.java,v 1.5 2004/11/14 06:25:53 mikemelia Exp $
  */
 public class CreateHostCommandTest extends TestCase {
 
@@ -58,7 +58,7 @@ public void testHostMatchesTheURI() {
         String dir = "/site/";
         String expectedHost = "www.amazon.com";
         String uri = expectedHost + dir;
-        SeleniumHTTPRequest httpRequest = new SeleniumHTTPRequest("GET: http://" + uri + HTTPRequest.CRLF);
+        HTTPRequest httpRequest = new SeleniumHTTPRequest("GET: http://" + uri + HTTPRequest.CRLF);
         CreateHostCommand command = new CreateHostCommand();
         command.execute(httpRequest);
         assertEquals(expectedHost, httpRequest.getHost());
@@ -67,7 +67,7 @@ public void testHostMatchesTheURI() {
     public void testHostSetupFromReferrerIfURIRelative() {
         String dir = "/site/";
         String expectedHost = "www.amazon.com";
-        SeleniumHTTPRequest httpRequest = new SeleniumHTTPRequest("GET: " + dir + HTTPRequest.CRLF +
+        HTTPRequest httpRequest = new SeleniumHTTPRequest("GET: " + dir + HTTPRequest.CRLF +
                                                   "Referer: http://" + expectedHost + dir + HTTPRequest.CRLF);
         CreateHostCommand command = new CreateHostCommand();
         command.execute(httpRequest);

File: java/test/com/thoughtworks/selenium/proxy/RedirectingRelayTest.java
Patch:
@@ -50,13 +50,13 @@ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 import java.io.IOException;
 
 /**
- * @version $Id: RedirectingRelayTest.java,v 1.6 2004/11/13 06:16:07 ahelleso Exp $
+ * @version $Id: RedirectingRelayTest.java,v 1.7 2004/11/14 06:25:53 mikemelia Exp $
  */
 public class RedirectingRelayTest extends MockObjectTestCase {
 
     public void testRedirectsForNonLocalHostTarget() throws IOException {
         Mock requestInput = mock(RequestInput.class);
-        String requestString = "GET / HTTP/1.1\r\n" +
+        String requestString = "GET http://www.amazon.com/ HTTP/1.1\r\n" +
                 "Host: www.amazon.com\r\n" +
                 "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; rv:1.7.3) Gecko/20041001 Firefox/0.10.1\r\n" +
                 "Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\r\n" +
@@ -69,7 +69,7 @@ public void testRedirectsForNonLocalHostTarget() throws IOException {
         HTTPRequest request = new SeleniumHTTPRequest(requestString);
         requestInput.expects(once()).method("readRequest").withNoArguments().will(returnValue(request));
 
-        String expectedResponse = "HTTP/1.1 302 Moved Temporarily\r\nLocation: http://localhost:9999/selenium/\r\n";
+        String expectedResponse = "HTTP/1.1 302 Moved Temporarily\r\nLocation: http://localhost:9999/selenium/www.amazon.com/\r\n";
         ByteArrayOutputStream out = new ByteArrayOutputStream();
 
         RedirectingRelay relay = new RedirectingRelay((RequestInput) requestInput.proxy(), out, null);

File: java/test/com/thoughtworks/selenium/proxy/SeleniumHTTPRequestTest.java
Patch:
@@ -50,9 +50,9 @@ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 import java.util.List;
 
 /**
- * @version $Id: HTTPRequestTest.java,v 1.5 2004/11/13 06:16:07 ahelleso Exp $
+ * @version $Id: SeleniumHTTPRequestTest.java,v 1.1 2004/11/14 06:25:53 mikemelia Exp $
  */
-public class HTTPRequestTest extends TestCase {
+public class SeleniumHTTPRequestTest extends TestCase {
     // relying on defs found at http://www.w3.org/Protocols/HTTP/Request.html
     public void testHandlesSimpleRequest() {
         String method = "GET";
@@ -110,7 +110,7 @@ public void testHandlesFullRequestWithPort() {
         assertEquals(host, httpRequest.getHost());
         assertEquals(acceptEncoding, httpRequest.getHeaderField("Accept-Encoding"));
     }
-    
+
     public void testReconstructsCorrectRequestWithAdditionalProxyAuthorizationField() {
         String request = "GET /dir/page HTTP/1.0\r\n" +
                 "Host: www.thoughtworks.com\r\n" +

File: java/main/com/thoughtworks/selenium/proxy/RequestInput.java
Patch:
@@ -46,8 +46,8 @@ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 import java.io.IOException;
 
 /**
- * @version $Id: RequestInput.java,v 1.3 2004/11/13 06:16:05 ahelleso Exp $
+ * @version $Id: RequestInput.java,v 1.4 2004/11/14 06:25:52 mikemelia Exp $
  */
 public interface RequestInput {
-    public SeleniumHTTPRequest readRequest() throws IOException;
+    public HTTPRequest readRequest() throws IOException;
 }

File: java/main/com/thoughtworks/selenium/proxy/RequestInputStream.java
Patch:
@@ -49,14 +49,14 @@ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 import java.io.InputStreamReader;
 
 /**
- * @version $Id: RequestInputStream.java,v 1.3 2004/11/13 06:16:05 ahelleso Exp $
+ * @version $Id: RequestInputStream.java,v 1.4 2004/11/14 06:25:52 mikemelia Exp $
  */
 public class RequestInputStream extends BufferedReader implements RequestInput {
     public RequestInputStream(InputStream inputStream) {
         super(new InputStreamReader(inputStream));
     }
 
-    public SeleniumHTTPRequest readRequest() throws IOException {
+    public HTTPRequest readRequest() throws IOException {
         StringBuffer content = new StringBuffer();
         String line = null;
         while ((line = readLine()) != null && line.length() > 0) {

File: java/test/com/thoughtworks/selenium/proxy/CreateHostCommandTest.java
Patch:
@@ -46,7 +46,7 @@ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 import junit.framework.TestCase;
 
 /**
- * @version $Id: CreateHostCommandTest.java,v 1.4 2004/11/13 06:16:06 ahelleso Exp $
+ * @version $Id: CreateHostCommandTest.java,v 1.5 2004/11/14 06:25:53 mikemelia Exp $
  */
 public class CreateHostCommandTest extends TestCase {
 
@@ -58,7 +58,7 @@ public void testHostMatchesTheURI() {
         String dir = "/site/";
         String expectedHost = "www.amazon.com";
         String uri = expectedHost + dir;
-        SeleniumHTTPRequest httpRequest = new SeleniumHTTPRequest("GET: http://" + uri + HTTPRequest.CRLF);
+        HTTPRequest httpRequest = new SeleniumHTTPRequest("GET: http://" + uri + HTTPRequest.CRLF);
         CreateHostCommand command = new CreateHostCommand();
         command.execute(httpRequest);
         assertEquals(expectedHost, httpRequest.getHost());
@@ -67,7 +67,7 @@ public void testHostMatchesTheURI() {
     public void testHostSetupFromReferrerIfURIRelative() {
         String dir = "/site/";
         String expectedHost = "www.amazon.com";
-        SeleniumHTTPRequest httpRequest = new SeleniumHTTPRequest("GET: " + dir + HTTPRequest.CRLF +
+        HTTPRequest httpRequest = new SeleniumHTTPRequest("GET: " + dir + HTTPRequest.CRLF +
                                                   "Referer: http://" + expectedHost + dir + HTTPRequest.CRLF);
         CreateHostCommand command = new CreateHostCommand();
         command.execute(httpRequest);

File: java/test/com/thoughtworks/selenium/proxy/RedirectingRelayTest.java
Patch:
@@ -50,13 +50,13 @@ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 import java.io.IOException;
 
 /**
- * @version $Id: RedirectingRelayTest.java,v 1.6 2004/11/13 06:16:07 ahelleso Exp $
+ * @version $Id: RedirectingRelayTest.java,v 1.7 2004/11/14 06:25:53 mikemelia Exp $
  */
 public class RedirectingRelayTest extends MockObjectTestCase {
 
     public void testRedirectsForNonLocalHostTarget() throws IOException {
         Mock requestInput = mock(RequestInput.class);
-        String requestString = "GET / HTTP/1.1\r\n" +
+        String requestString = "GET http://www.amazon.com/ HTTP/1.1\r\n" +
                 "Host: www.amazon.com\r\n" +
                 "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; rv:1.7.3) Gecko/20041001 Firefox/0.10.1\r\n" +
                 "Accept: text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\r\n" +
@@ -69,7 +69,7 @@ public void testRedirectsForNonLocalHostTarget() throws IOException {
         HTTPRequest request = new SeleniumHTTPRequest(requestString);
         requestInput.expects(once()).method("readRequest").withNoArguments().will(returnValue(request));
 
-        String expectedResponse = "HTTP/1.1 302 Moved Temporarily\r\nLocation: http://localhost:9999/selenium/\r\n";
+        String expectedResponse = "HTTP/1.1 302 Moved Temporarily\r\nLocation: http://localhost:9999/selenium/www.amazon.com/\r\n";
         ByteArrayOutputStream out = new ByteArrayOutputStream();
 
         RedirectingRelay relay = new RedirectingRelay((RequestInput) requestInput.proxy(), out, null);

File: java/test/com/thoughtworks/selenium/proxy/SeleniumHTTPRequestTest.java
Patch:
@@ -50,9 +50,9 @@ STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 import java.util.List;
 
 /**
- * @version $Id: HTTPRequestTest.java,v 1.5 2004/11/13 06:16:07 ahelleso Exp $
+ * @version $Id: SeleniumHTTPRequestTest.java,v 1.1 2004/11/14 06:25:53 mikemelia Exp $
  */
-public class HTTPRequestTest extends TestCase {
+public class SeleniumHTTPRequestTest extends TestCase {
     // relying on defs found at http://www.w3.org/Protocols/HTTP/Request.html
     public void testHandlesSimpleRequest() {
         String method = "GET";
@@ -110,7 +110,7 @@ public void testHandlesFullRequestWithPort() {
         assertEquals(host, httpRequest.getHost());
         assertEquals(acceptEncoding, httpRequest.getHeaderField("Accept-Encoding"));
     }
-    
+
     public void testReconstructsCorrectRequestWithAdditionalProxyAuthorizationField() {
         String request = "GET /dir/page HTTP/1.0\r\n" +
                 "Host: www.thoughtworks.com\r\n" +

File: java/main/com/thoughtworks/selenium/proxy/ClientConnectionThread.java
Patch:
@@ -22,7 +22,7 @@
 
 
 /**
- * @version $Id: ClientConnectionThread.java,v 1.2 2004/11/13 04:46:57 ahelleso Exp $
+ * @version $Id: ClientConnectionThread.java,v 1.3 2004/11/13 05:33:36 ahelleso Exp $
  */
 public class ClientConnectionThread extends Thread implements ConnectionThread {
     private final Socket socket;
@@ -41,7 +41,7 @@ public ClientConnectionThread(Socket socket, RequestModificationCommand requestM
     public void run() {
         try {
             Relay relay = new RedirectingRelay(new RequestInputStream(socket.getInputStream()),
-                                               new DefaultResponseStream(socket.getOutputStream()),
+                                               socket.getOutputStream(),
                                                requestModificationCommand);
             relay.relay();
             socket.close();

File: java/main/com/thoughtworks/selenium/proxy/HTTPRequest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 /**
- * @version $Id: HTTPRequest.java,v 1.4 2004/11/13 05:00:09 ahelleso Exp $
+ * @version $Id: HTTPRequest.java,v 1.5 2004/11/13 05:33:36 ahelleso Exp $
  */
 public class HTTPRequest {
     public static final String SELENIUM_REDIRECT_SERVERNAME = "localhost";
@@ -49,8 +49,6 @@ public class HTTPRequest {
     private int destinationPort;
 
     public HTTPRequest(String request) {
-        Assert.assertIsTrue(request != null, "request can't be null");
-        LOG.debug("Request\n" + request);
         original = request;
         parse(request);
         headers.put("Proxy-Authorization", "Basic " + new sun.misc.BASE64Encoder().encode(auth.getBytes()));

File: java/main/com/thoughtworks/selenium/proxy/ClientConnectionThread.java
Patch:
@@ -22,7 +22,7 @@
 
 
 /**
- * @version $Id: ClientConnectionThread.java,v 1.2 2004/11/13 04:46:57 ahelleso Exp $
+ * @version $Id: ClientConnectionThread.java,v 1.3 2004/11/13 05:33:36 ahelleso Exp $
  */
 public class ClientConnectionThread extends Thread implements ConnectionThread {
     private final Socket socket;
@@ -41,7 +41,7 @@ public ClientConnectionThread(Socket socket, RequestModificationCommand requestM
     public void run() {
         try {
             Relay relay = new RedirectingRelay(new RequestInputStream(socket.getInputStream()),
-                                               new DefaultResponseStream(socket.getOutputStream()),
+                                               socket.getOutputStream(),
                                                requestModificationCommand);
             relay.relay();
             socket.close();

File: java/main/com/thoughtworks/selenium/proxy/HTTPRequest.java
Patch:
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 /**
- * @version $Id: HTTPRequest.java,v 1.4 2004/11/13 05:00:09 ahelleso Exp $
+ * @version $Id: HTTPRequest.java,v 1.5 2004/11/13 05:33:36 ahelleso Exp $
  */
 public class HTTPRequest {
     public static final String SELENIUM_REDIRECT_SERVERNAME = "localhost";
@@ -49,8 +49,6 @@ public class HTTPRequest {
     private int destinationPort;
 
     public HTTPRequest(String request) {
-        Assert.assertIsTrue(request != null, "request can't be null");
-        LOG.debug("Request\n" + request);
         original = request;
         parse(request);
         headers.put("Proxy-Authorization", "Basic " + new sun.misc.BASE64Encoder().encode(auth.getBytes()));

File: java/main/com/thoughtworks/selenium/proxy/HTTPRequest.java
Patch:
@@ -1,4 +1,3 @@
-package com.thoughtworks.selenium.proxy;
 /*
   Copyright 2004 ThoughtWorks, Inc.
 
@@ -14,6 +13,7 @@
   See the License for the specific language governing permissions and
   limitations under the License.
 */
+package com.thoughtworks.selenium.proxy;
 
 import com.thoughtworks.selenium.utils.Assert;
 import org.apache.commons.logging.Log;
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 /**
- * @version $Id: HTTPRequest.java,v 1.3 2004/11/13 04:46:57 ahelleso Exp $
+ * @version $Id: HTTPRequest.java,v 1.4 2004/11/13 05:00:09 ahelleso Exp $
  */
 public class HTTPRequest {
     public static final String SELENIUM_REDIRECT_SERVERNAME = "localhost";
@@ -137,7 +137,7 @@ public String getRequest() {
             String key =  (String) i.next();
             buff.append(key + ": " + headers.get(key) + CRLF);
         }
-        buff.append("\r\n");
+        buff.append(CRLF);
         String request = String.valueOf(buff);
         return request;
     }

File: java/main/com/thoughtworks/selenium/proxy/HTTPRequest.java
Patch:
@@ -1,4 +1,3 @@
-package com.thoughtworks.selenium.proxy;
 /*
   Copyright 2004 ThoughtWorks, Inc.
 
@@ -14,6 +13,7 @@
   See the License for the specific language governing permissions and
   limitations under the License.
 */
+package com.thoughtworks.selenium.proxy;
 
 import com.thoughtworks.selenium.utils.Assert;
 import org.apache.commons.logging.Log;
@@ -24,7 +24,7 @@
 import java.util.Map;
 
 /**
- * @version $Id: HTTPRequest.java,v 1.3 2004/11/13 04:46:57 ahelleso Exp $
+ * @version $Id: HTTPRequest.java,v 1.4 2004/11/13 05:00:09 ahelleso Exp $
  */
 public class HTTPRequest {
     public static final String SELENIUM_REDIRECT_SERVERNAME = "localhost";
@@ -137,7 +137,7 @@ public String getRequest() {
             String key =  (String) i.next();
             buff.append(key + ": " + headers.get(key) + CRLF);
         }
-        buff.append("\r\n");
+        buff.append(CRLF);
         String request = String.valueOf(buff);
         return request;
     }

