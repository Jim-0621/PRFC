File: spring-cloud-alibaba-starters/spring-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/NacosConfigDataLocationResolver.java
Patch:
@@ -124,7 +124,7 @@ public boolean isResolvable(ConfigDataLocationResolverContext context,
 		String prefix = NacosPropertiesPrefixer.getPrefix(context.getBinder());
 
 		return context.getBinder()
-				.bind(prefix + "config.enabled", Boolean.class)
+				.bind(prefix + ".config.enabled", Boolean.class)
 				.orElse(true);
 	}
 

File: spring-cloud-alibaba-starters/spring-alibaba-nacos-config/src/test/java/com.alibaba.cloud.nacos/configdata/NacosConfigDataLocationResolverTest.java
Patch:
@@ -89,7 +89,7 @@ void testIsResolvable_givenDisable_thenReturnFalse() {
 
 		String prefix = NacosPropertiesPrefixer.getPrefix(environment);
 
-		this.environment.setProperty(prefix + "config.enabled", "false");
+		this.environment.setProperty(prefix + ".config.enabled", "false");
 		assertThat(
 				this.resolver.isResolvable(this.context, ConfigDataLocation.of("nacos:")))
 						.isFalse();

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-schedulerx/src/main/java/com/alibaba/cloud/scheduling/schedulerx/SchedulerxConfigurations.java
Patch:
@@ -114,7 +114,7 @@ public SchedulerxWorker schedulerxWorker() {
 			schedulerxWorker.setAkkaRemotingAutoRecover(properties.isAkkaRemotingAutoRecover());
 			schedulerxWorker.setEnableHeartbeatLog(properties.isEnableHeartbeatLog());
 			schedulerxWorker.setMapMasterStatusCheckInterval(properties.getMapMasterStatusCheckInterval());
-			schedulerxWorker.setEnableSecondDelayCycleIntervalMs(properties.isEnableSecondDealyCycleIntervalMs());
+			schedulerxWorker.setEnableSecondDelayCycleIntervalMs(properties.isEnableSecondDelayCycleIntervalMs());
 			schedulerxWorker.setEnableMapMasterFailover(properties.isEnableMapMasterFailover());
 			schedulerxWorker.setEnableSecondDelayStandaloneDispatch(properties.isEnableSecondDelayStandaloneDispatch());
 			schedulerxWorker.setPageSize(properties.getPageSize());

File: spring-cloud-alibaba-starters/spring-cloud-starter-bus-rocketmq/src/main/java/com/alibaba/cloud/bus/rocketmq/autoconfigurate/RocketMQBusAutoConfiguration.java
Patch:
@@ -33,7 +33,7 @@
 @Configuration(proxyBeanMethods = false)
 public class RocketMQBusAutoConfiguration {
 	/**
-	 * isse: https://github.com/alibaba/spring-cloud-alibaba/issues/2742
+	 * issue: https://github.com/alibaba/spring-cloud-alibaba/issues/2742
 	 * if you want to customize a bean, please use this BeanName {@code RocketMQMessageConverter.DEFAULT_NAME}.
 	 */
 	@Bean(RocketMQMessageConverter.DEFAULT_NAME)

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-ai/src/main/java/com/alibaba/cloud/ai/tongyi/chat/TongYiChatModel.java
Patch:
@@ -335,8 +335,8 @@ private ConversationParam merge(TongYiChatOptions scaChatParams, ConversationPar
 			mergedTongYiParams.setTopK(scaChatParams.getTopK());
 		}
 
-		if (scaChatParams.getTopK() != null) {
-			mergedTongYiParams.setTopK(scaChatParams.getTopK());
+		if (scaChatParams.getTopP() != null) {
+			mergedTongYiParams.setTopP(scaChatParams.getTopP().doubleValue());
 		}
 
 		if (scaChatParams.getRepetitionPenalty() != null) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/configclient/NacosDiscoveryClientConfigServiceBootstrapConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import com.alibaba.cloud.nacos.discovery.NacosDiscoveryAutoConfiguration;
 import com.alibaba.cloud.nacos.discovery.NacosDiscoveryClientConfiguration;
 import com.alibaba.cloud.nacos.discovery.reactive.NacosReactiveDiscoveryClientConfiguration;
+import com.alibaba.cloud.nacos.util.UtilIPv6AutoConfiguration;
 
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -38,7 +39,7 @@
 @Configuration(proxyBeanMethods = false)
 @ImportAutoConfiguration({ NacosDiscoveryAutoConfiguration.class,
 		NacosServiceAutoConfiguration.class, NacosDiscoveryClientConfiguration.class,
-		NacosReactiveDiscoveryClientConfiguration.class })
+		NacosReactiveDiscoveryClientConfiguration.class, UtilIPv6AutoConfiguration.class })
 public class NacosDiscoveryClientConfigServiceBootstrapConfiguration {
 
 }

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigManager.java
Patch:
@@ -38,9 +38,6 @@ public class NacosConfigManager {
 
 	public NacosConfigManager(NacosConfigProperties nacosConfigProperties) {
 		this.nacosConfigProperties = nacosConfigProperties;
-		// Compatible with older code in NacosConfigProperties,It will be deleted in the
-		// future.
-		createConfigService(nacosConfigProperties);
 	}
 
 	/**

File: spring-cloud-alibaba-examples/spring-cloud-ai-example/src/main/java/com/alibaba/cloud/ai/example/tongyi/service/impl/textembedding/TongYiTextEmbeddingServiceImpl.java
Patch:
@@ -17,7 +17,6 @@
 package com.alibaba.cloud.ai.example.tongyi.service.impl.textembedding;
 
 import java.util.List;
-import java.util.logging.Logger;
 
 import com.alibaba.cloud.ai.example.tongyi.service.AbstractTongYiServiceImpl;
 
@@ -32,8 +31,6 @@
 @Service
 public class TongYiTextEmbeddingServiceImpl extends AbstractTongYiServiceImpl {
 
-	private final Logger logger = Logger.getLogger(TongYiTextEmbeddingServiceImpl.class.getName());
-
 	private final EmbeddingClient embeddingClient;
 
 	public TongYiTextEmbeddingServiceImpl(EmbeddingClient embeddingClient) {
@@ -46,4 +43,5 @@ public List<Double> textEmbedding(String text) {
 
 		return embeddingClient.embed(text);
 	}
+
 }

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-ai/src/main/java/com/alibaba/cloud/ai/tongyi/TongYiAutoConfiguration.java
Patch:
@@ -63,7 +63,7 @@
 		TongYiChatProperties.class,
 		TongYiImagesProperties.class,
 		TongYiAudioSpeechProperties.class,
-		TongYiConnectionProperties.class
+		TongYiConnectionProperties.class,
 		TongYiConnectionProperties.class,
 		TongYiTextEmbeddingProperties.class
 })

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-ai/src/main/java/com/alibaba/cloud/ai/tongyi/metadata/TongYiTextEmbeddingResponseMetadata.java
Patch:
@@ -22,6 +22,7 @@
 
 /**
  * @author why_ohh
+ * @author yuluo
  * @author <a href="mailto:550588941@qq.com">why_ohh</a>
  */
 
@@ -48,4 +49,5 @@ public void setTotalTokens(Integer totalTokens) {
 
 		this.totalTokens = totalTokens;
 	}
+
 }

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/refresh/NacosContextRefresher.java
Patch:
@@ -115,6 +115,8 @@ public void innerReceive(String dataId, String group,
 							String configInfo) {
 						refreshCountIncrement();
 						nacosRefreshHistory.addRefreshRecord(dataId, group, configInfo);
+						NacosSnapshotConfigManager.putConfigSnapshot(dataId, group,
+								configInfo);
 						applicationContext.publishEvent(
 								new RefreshEvent(this, null, "Refresh Nacos config"));
 						if (log.isDebugEnabled()) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/test/java/com/alibaba/cloud/nacos/parser/NacosJsonPropertySourceLoaderTests.java
Patch:
@@ -13,6 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+
 package com.alibaba.cloud.nacos.parser;
 
 import java.io.IOException;
@@ -36,8 +37,8 @@ public class NacosJsonPropertySourceLoaderTests {
 	public void testJsonPropWithComment() throws IOException {
 		String propJsonStr = """
 				{
-				  // test comment
-				  "name": "jack"
+					// test comment
+					"name": "jack"
 				}
 				""";
 		ByteArrayResource resource = new ByteArrayResource(propJsonStr.getBytes());

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/ServiceCache.java
Patch:
@@ -87,8 +87,8 @@ public static void setServiceIds(List<String> serviceIds) {
 
 	/**
 	 * Get all services.
-	 * @deprecated since 2021.0.1.1, use {@link #getServiceIds()} instead.
 	 * @return all services
+	 * @deprecated since 2021.0.1.1, use {@link #getServiceIds()} instead.
 	 */
 	@Deprecated
 	public static List<String> get() {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/configclient/NacosConfigServerAutoConfiguration.java
Patch:
@@ -18,8 +18,8 @@
 
 
 import com.alibaba.cloud.nacos.NacosDiscoveryProperties;
-
 import jakarta.annotation.PostConstruct;
+
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
@@ -34,7 +34,7 @@
  */
 @Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties
-@ConditionalOnClass({ NacosDiscoveryProperties.class, ConfigServerProperties.class })
+@ConditionalOnClass({NacosDiscoveryProperties.class, ConfigServerProperties.class})
 public class NacosConfigServerAutoConfiguration {
 
 	@Autowired(required = false)

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosRegistration.java
Patch:
@@ -20,13 +20,11 @@
 import java.util.List;
 import java.util.Map;
 
-
 import com.alibaba.cloud.nacos.NacosDiscoveryProperties;
 import com.alibaba.nacos.api.naming.PreservedMetadataKeys;
-
 import jakarta.annotation.PostConstruct;
+
 import org.springframework.cloud.client.DefaultServiceInstance;
-import org.springframework.cloud.client.ServiceInstance;
 import org.springframework.cloud.client.discovery.ManagementServerPortUtils;
 import org.springframework.cloud.client.serviceregistry.Registration;
 import org.springframework.context.ApplicationContext;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelBeanPostProcessor.java
Patch:
@@ -65,7 +65,8 @@ public SentinelBeanPostProcessor(ApplicationContext applicationContext) {
 	@Override
 	public void postProcessMergedBeanDefinition(RootBeanDefinition beanDefinition,
 			Class<?> beanType, String beanName) {
-		if (beanName == null || beanType != RestTemplate.class) {
+		// Fixes #3329: Support custom RestTemplate
+		if (beanName == null || !RestTemplate.class.isAssignableFrom(beanType)) {
 			return;
 		}
 

File: spring-cloud-alibaba-examples/nacos-example/nacos-config-example/src/main/java/com/alibaba/cloud/examples/example/DockingInterfaceExample.java
Patch:
@@ -95,8 +95,8 @@ public boolean publishConfig(@RequestParam("dataId") String dataId,
 	 * @param group group
 	 * @return boolean
 	 */
-	@RequestMapping("/remoteConfig")
-	public boolean remoteConfig(@RequestParam("dataId") String dataId,
+	@RequestMapping("/removeConfig")
+	public boolean removeConfig(@RequestParam("dataId") String dataId,
 			@RequestParam(value = "group", required = false) String group)
 			throws NacosException {
 		if (StringUtils.isEmpty(group)) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/loadbalancer/NacosLoadBalancer.java
Patch:
@@ -122,7 +122,7 @@ public NacosLoadBalancer(
 	public Mono<Response<ServiceInstance>> choose(Request request) {
 		ServiceInstanceListSupplier supplier = serviceInstanceListSupplierProvider
 				.getIfAvailable(NoopServiceInstanceListSupplier::new);
-		return supplier.get().next().map(this::getInstanceResponse);
+		return supplier.get(request).next().map(this::getInstanceResponse);
 	}
 
 	private Response<ServiceInstance> getInstanceResponse(

File: spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-reactivediscovery-consumer-example/src/main/java/com/alibaba/cloud/examples/WebClientConfiguration.java
Patch:
@@ -18,13 +18,16 @@
 
 import org.springframework.cloud.client.loadbalancer.LoadBalanced;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
 import org.springframework.web.reactive.function.client.WebClient;
 
 /**
  * Configuration for web client.
  *
  * @author fangjian0423, MieAh
  */
+
+@Configuration
 public class WebClientConfiguration {
 
 	@Bean

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/inbound/pull/RocketMQAckCallback.java
Patch:
@@ -16,6 +16,8 @@
 
 package com.alibaba.cloud.stream.binder.rocketmq.integration.inbound.pull;
 
+import java.util.Collections;
+
 import org.apache.rocketmq.client.consumer.DefaultLitePullConsumer;
 import org.apache.rocketmq.client.exception.MQClientException;
 import org.apache.rocketmq.common.message.MessageExt;
@@ -77,7 +79,7 @@ public void acknowledge(Status status) {
 			try {
 				long offset = messageExt.getQueueOffset();
 				switch (status) {
-				case REJECT, ACCEPT -> consumer.committed(messageQueue);
+				case REJECT, ACCEPT -> consumer.commit(Collections.singleton(messageQueue), false);
 				case REQUEUE -> consumer.seek(messageQueue, offset);
 				}
 			}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/loadbalancer/NacosLoadBalancer.java
Patch:
@@ -21,13 +21,12 @@
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
 
-import javax.annotation.PostConstruct;
-
 import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.nacos.NacosDiscoveryProperties;
 import com.alibaba.cloud.nacos.balancer.NacosBalancer;
 import com.alibaba.cloud.nacos.util.InetIPv6Utils;
 import com.alibaba.nacos.client.naming.utils.CollectionUtils;
+import jakarta.annotation.PostConstruct;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import reactor.core.publisher.Mono;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/logging/NacosLoggingListener.java
Patch:
@@ -30,6 +30,7 @@
  *
  * @author mai.jh
  */
+@Deprecated
 public class NacosLoggingListener implements GenericApplicationListener {
 
 	@Override

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/logging/NacosLoggingListener.java
Patch:
@@ -30,6 +30,7 @@
  *
  * @author mai.jh
  */
+@Deprecated
 public class NacosLoggingListener implements GenericApplicationListener {
 
 	@Override

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/utils/RocketMQUtils.java
Patch:
@@ -77,10 +77,10 @@ public static String getInstanceName(RPCHook rpcHook, String identify) {
 		if (null != rpcHook) {
 			SessionCredentials sessionCredentials = ((AclClientRPCHook) rpcHook)
 					.getSessionCredentials();
-			instanceName.append(sessionCredentials.getAccessKey()).append(separator)
-					.append(sessionCredentials.getSecretKey()).append(separator);
+			instanceName.append(sessionCredentials.getAccessKey()).append(separator);
 		}
-		instanceName.append(identify).append(separator).append(UtilAll.getPid());
+		instanceName.append(identify).append(separator).append(UtilAll.getPid())
+				.append(separator).append(Long.toString(System.nanoTime(), 36));
 		return instanceName.toString();
 	}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/NacosJsonPropertySourceLoader.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Map;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import org.springframework.boot.env.OriginTrackedMapPropertySource;
@@ -62,6 +63,8 @@ protected List<PropertySource<?>> doLoad(String name, Resource resource)
 			throws IOException {
 		Map<String, Object> result = new LinkedHashMap<>(32);
 		ObjectMapper mapper = new ObjectMapper();
+		// [fix issue #3043] support comment in json config
+		mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
 		Map<String, Object> nacosDataMap = mapper.readValue(resource.getInputStream(),
 				LinkedHashMap.class);
 		flattenedMap(result, nacosDataMap, null);

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/NacosJsonPropertySourceLoader.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.List;
 import java.util.Map;
 
+import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.ObjectMapper;
 
 import org.springframework.boot.env.OriginTrackedMapPropertySource;
@@ -62,6 +63,8 @@ protected List<PropertySource<?>> doLoad(String name, Resource resource)
 			throws IOException {
 		Map<String, Object> result = new LinkedHashMap<>(32);
 		ObjectMapper mapper = new ObjectMapper();
+		// [fix issue #3043] support comment in json config
+		mapper.configure(JsonParser.Feature.ALLOW_COMMENTS, true);
 		Map<String, Object> nacosDataMap = mapper.readValue(resource.getInputStream(),
 				LinkedHashMap.class);
 		flattenedMap(result, nacosDataMap, null);

File: spring-cloud-alibaba-examples/nacos-example/nacos-config-2.4.x-example/src/main/java/com/alibaba/cloud/imports/examples/controller/UserController.java
Patch:
@@ -35,7 +35,7 @@ public class UserController {
 	@Autowired
 	private UserConfig userConfig;
 
-	@GetMapping
+	@GetMapping(path = "/")
 	public String get() throws JsonProcessingException {
 		return new ObjectMapper().writeValueAsString(userConfig);
 	}

File: spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-discovery-consumer-example/src/main/java/com/alibaba/cloud/examples/feign/EchoClient.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.alibaba.cloud.examples.feign;
 
-import com.alibaba.cloud.examples.configuration.FeignConfiguration;
 
 import org.springframework.cloud.openfeign.FeignClient;
 import org.springframework.web.bind.annotation.GetMapping;
@@ -28,7 +27,7 @@
  *
  * @author fangjian0423, MieAh
  */
-@FeignClient(name = "service-provider", fallback = EchoClientFallback.class, configuration = FeignConfiguration.class)
+@FeignClient(name = "service-provider", contextId = "service-provider")
 public interface EchoClient {
 
 	/**

File: spring-cloud-alibaba-examples/integrated-example/integrated-praise-consumer/src/main/java/com/alibaba/cloud/integration/consumer/PraiseConsumerApplication.java
Patch:
@@ -16,17 +16,14 @@
 
 package com.alibaba.cloud.integration.consumer;
 
-import com.alibaba.cloud.integration.consumer.message.PraiseSink;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.cloud.stream.annotation.EnableBinding;
 
 /**
  * @author TrevorLink
  */
 @SpringBootApplication
-@EnableBinding(PraiseSink.class)
 public class PraiseConsumerApplication {
 
 	public static void main(String[] args) {

File: spring-cloud-alibaba-examples/integrated-example/integrated-gateway/src/main/java/com/alibaba/cloud/integration/gateway/config/GatewayConfig.java
Patch:
@@ -104,10 +104,10 @@ public Mono<ServerResponse> handleRequest(ServerWebExchange serverWebExchange,
 	public CorsWebFilter corsFilter() {
 		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
 		CorsConfiguration config = new CorsConfiguration();
-		config.addAllowedOrigin("*");
 		config.setAllowCredentials(true);
 		config.addAllowedHeader("*");
 		config.addAllowedMethod("*");
+		config.addAllowedOriginPattern("*");
 		source.registerCorsConfiguration("/**", config);
 
 		return new CorsWebFilter(source);

File: spring-cloud-alibaba-examples/integrated-example/integrated-praise-consumer/src/main/java/com/alibaba/cloud/integration/consumer/PraiseConsumerApplication.java
Patch:
@@ -16,17 +16,14 @@
 
 package com.alibaba.cloud.integration.consumer;
 
-import com.alibaba.cloud.integration.consumer.message.PraiseSink;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import org.springframework.cloud.stream.annotation.EnableBinding;
 
 /**
  * @author TrevorLink
  */
 @SpringBootApplication
-@EnableBinding(PraiseSink.class)
 public class PraiseConsumerApplication {
 
 	public static void main(String[] args) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/test/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinderTest.java
Patch:
@@ -70,6 +70,7 @@ public void createAnymousConsumerEndpoint() throws Exception {
 		ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties
 				= new ExtendedConsumerProperties<>(new RocketMQConsumerProperties());
 
+		extendedConsumerProperties.populateBindingName("input1");
 		TestConsumerDestination destination = new TestConsumerDestination("test");
 		MessageProducer consumerEndpoint = binder.createConsumerEndpoint(destination, null,
 				extendedConsumerProperties);

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/NacosConfigDataLoader.java
Patch:
@@ -140,8 +140,9 @@ private List<PropertySource<?>> pullConfig(ConfigService configService, String g
 			throws NacosException, IOException {
 		String config = configService.getConfig(dataId, group, timeout);
 		logLoadInfo(group, dataId, config);
-		return NacosDataParserHandler.getInstance().parseNacosData(dataId, config,
-				suffix);
+		// fixed issue: https://github.com/alibaba/spring-cloud-alibaba/issues/2906 .
+		String configName = group + "@" + dataId;
+		return NacosDataParserHandler.getInstance().parseNacosData(configName, config, suffix);
 	}
 
 	private void logLoadInfo(String group, String dataId, String config) {

File: spring-cloud-alibaba-starters/spring-cloud-circuitbreaker-sentinel/src/test/java/com/alibaba/cloud/circuitbreaker/sentinel/feign/FeignClientCircuitBreakerRuleIntegrationTest.java
Patch:
@@ -38,7 +38,7 @@
  */
 @SpringBootTest(webEnvironment = DEFINED_PORT, classes = Application.class, properties = {
 		"server.port=10101",
-		"feign.circuitbreaker.enabled=true",
+		"spring.cloud.openfeign.circuitbreaker.enabled=true",
 		"feign.sentinel.default-rule=default",
 		"feign.sentinel.rules.default[0].grade=2",
 		"feign.sentinel.rules.default[0].count=2",

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/test/java/com/alibaba/cloud/sentinel/SentinelAutoConfigurationTests.java
Patch:
@@ -41,7 +41,7 @@
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.web.server.LocalServerPort;
+import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.http.HttpRequest;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sidecar/src/main/java/com/alibaba/cloud/sidecar/nacos/SidecarNacosDiscoveryProperties.java
Patch:
@@ -37,7 +37,7 @@ public void init() throws Exception {
 		super.init();
 
 		String ip = sidecarProperties.getIp();
-		if (!StringUtils.hasText(ip)) {
+		if (StringUtils.hasText(ip)) {
 			this.setIp(ip);
 		}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sidecar/src/main/java/com/alibaba/cloud/sidecar/nacos/SidecarNacosDiscoveryProperties.java
Patch:
@@ -37,7 +37,7 @@ public void init() throws Exception {
 		super.init();
 
 		String ip = sidecarProperties.getIp();
-		if (!StringUtils.hasText(ip)) {
+		if (StringUtils.hasText(ip)) {
 			this.setIp(ip);
 		}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/NacosConfigDataLoader.java
Patch:
@@ -140,8 +140,9 @@ private List<PropertySource<?>> pullConfig(ConfigService configService, String g
 			throws NacosException, IOException {
 		String config = configService.getConfig(dataId, group, timeout);
 		logLoadInfo(group, dataId, config);
-		return NacosDataParserHandler.getInstance().parseNacosData(dataId, config,
-				suffix);
+		// fixed issue: https://github.com/alibaba/spring-cloud-alibaba/issues/2906 .
+		String configName = group + "@" + dataId;
+		return NacosDataParserHandler.getInstance().parseNacosData(configName, config, suffix);
 	}
 
 	private void logLoadInfo(String group, String dataId, String config) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/test/java/com/alibaba/cloud/nacos/discovery/NacosDiscoveryClientConfigurationTest.java
Patch:
@@ -56,7 +56,8 @@ public TaskScheduler taskScheduler() {
 	public void testDefaultInitialization() {
 		contextRunner.run(context -> {
 			assertThat(context).hasSingleBean(DiscoveryClient.class);
-			assertThat(context).hasSingleBean(NacosWatch.class);
+			// NacosWatch is no longer enabled by default
+			assertThat(context).doesNotHaveBean(NacosWatch.class);
 		});
 	}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -37,6 +37,7 @@
  * @author xiaojing
  * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  * @author <a href="mailto:78552423@qq.com">eshun</a>
+ * @author JAY
  */
 public class NacosServiceRegistry implements ServiceRegistry<Registration> {
 
@@ -166,7 +167,7 @@ public Object getStatus(Registration registration) {
 			for (Instance instance : instances) {
 				if (instance.getIp().equalsIgnoreCase(nacosDiscoveryProperties.getIp())
 						&& instance.getPort() == nacosDiscoveryProperties.getPort()) {
-					return instance.isEnabled() ? "UP" : "DOWN";
+					return instance.isEnabled() ? STATUS_UP : STATUS_DOWN;
 				}
 			}
 		}

File: spring-cloud-alibaba-tests/nacos-tests/nacos-config-test/src/test/java/com/alibaba/cloud/tests/nacos/config/NacosConfigPropertiesServerAddressBothLevelTests.java
Patch:
@@ -92,9 +92,10 @@ public void prepare() throws NacosException {
 	}
 
 	@Test
-	public void contextLoads() throws NacosException {
+	public void contextLoads() throws NacosException, InterruptedException {
 		ConfigService localService = nacosConfigManager.getConfigService();
 		updateConfig();
+		Thread.sleep(2000L);
 		String localContent = fetchConfig(localService, "nacos-config-refresh.yml",
 				"DEFAULT_GROUP", TIME_OUT);
 		String remoteContent = fetchConfig(remoteService, "nacos-config-refresh.yml",

File: spring-cloud-alibaba-tests/nacos-tests/nacos-config-test/src/test/java/com/alibaba/cloud/tests/nacos/config/NacosConfigPropertiesServerAddressTopLevelTests.java
Patch:
@@ -91,9 +91,10 @@ public void prepare() throws NacosException {
 	}
 
 	@Test
-	public void contextLoads() throws NacosException {
+	public void contextLoads() throws NacosException, InterruptedException {
 		ConfigService localService = nacosConfigManager.getConfigService();
 		updateConfig();
+		Thread.sleep(2000L);
 		String localContent = fetchConfig(localService, "nacos-config-refresh.yml",
 				"DEFAULT_GROUP", TIME_OUT);
 		String remoteContent = fetchConfig(remoteService, "nacos-config-refresh.yml",

File: spring-cloud-alibaba-tests/nacos-tests/nacos-config-test/src/test/java/com/alibaba/cloud/tests/nacos/config/NacosConfigurationExtConfigTests.java
Patch:
@@ -97,9 +97,10 @@ public void prepare() throws NacosException {
 	}
 
 	@Test
-	public void contextLoads() throws NacosException {
+	public void contextLoads() throws NacosException, InterruptedException {
 		ConfigService localService = nacosConfigManager.getConfigService();
 		updateConfig();
+		Thread.sleep(2000L);
 		String localContent = fetchConfig(localService, "nacos-config-refresh.yml",
 				"DEFAULT_GROUP", TIME_OUT);
 		String remoteContent = fetchConfig(remoteService, "nacos-config-refresh.yml",

File: spring-cloud-alibaba-tests/nacos-tests/nacos-config-test/src/test/java/com/alibaba/cloud/tests/nacos/config/NacosConfigurationTests.java
Patch:
@@ -106,9 +106,10 @@ public void prepare() throws NacosException {
 	}
 
 	@Test
-	public void contextLoads() throws NacosException {
+	public void contextLoads() throws NacosException, InterruptedException {
 		ConfigService localService = nacosConfigManager.getConfigService();
 		updateConfig();
+		Thread.sleep(2000L);
 		String localContent = fetchConfig(localService, "nacos-config-refresh.yml",
 				"DEFAULT_GROUP", TIME_OUT);
 		String remoteContent = fetchConfig(remoteService, "nacos-config-refresh.yml",

File: spring-cloud-alibaba-tests/nacos-tests/nacos-config-test/src/test/java/com/alibaba/cloud/tests/nacos/config/NacosFileExtensionTest.java
Patch:
@@ -91,9 +91,10 @@ public void prepare() throws NacosException {
 	}
 
 	@Test
-	public void contextLoads() throws NacosException {
+	public void contextLoads() throws NacosException, InterruptedException {
 		ConfigService localService = nacosConfigManager.getConfigService();
 		updateConfig();
+		Thread.sleep(2000L);
 		String localContent = fetchConfig(localService, "nacos-config-refresh.yml",
 				"DEFAULT_GROUP", TIME_OUT);
 		String remoteContent = fetchConfig(remoteService, "nacos-config-refresh.yml",

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/ConfigPreference.java
Patch:
@@ -27,7 +27,7 @@
  * the local profile specific config.
  *
  * @author freeman
- * @since 2021.0.1.1
+ * @since 2021.0.4.0
  */
 public enum ConfigPreference {
 	/**

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/NacosConfigDataLoader.java
Patch:
@@ -92,7 +92,7 @@ public ConfigData doLoad(ConfigDataLoaderContext context,
 			return new ConfigData(propertySources, getOptions(context, resource));
 		}
 		catch (Exception e) {
-			log.warn("Error getting properties from nacos: " + resource, e);
+			log.error("Error getting properties from nacos: " + resource, e);
 			if (!resource.isOptional()) {
 				throw new ConfigDataResourceNotFoundException(resource, e);
 			}
@@ -127,7 +127,7 @@ private ConfigPreference getPreference(ConfigDataLoaderContext context,
 			}
 			catch (IllegalArgumentException ignore) {
 				// illegal preference value, just ignore.
-				log.warn(String.format(
+				log.error(String.format(
 						"illegal preference value: %s, using default preference: %s",
 						specificPreference, preference));
 			}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/test/java/com/alibaba/cloud/nacos/registry/NacosAutoServiceRegistrationIpNetworkInterfaceTests.java
Patch:
@@ -17,6 +17,7 @@
 package com.alibaba.cloud.nacos.registry;
 
 import java.net.Inet4Address;
+import java.net.Inet6Address;
 import java.net.InetAddress;
 import java.net.NetworkInterface;
 import java.util.Enumeration;
@@ -102,7 +103,7 @@ private String getIPFromNetworkInterface(String networkInterface) {
 			Enumeration<InetAddress> inetAddress = netInterface.getInetAddresses();
 			while (inetAddress.hasMoreElements()) {
 				InetAddress currentAddress = inetAddress.nextElement();
-				if (currentAddress instanceof Inet4Address
+				if (currentAddress instanceof Inet4Address || currentAddress instanceof Inet6Address
 						&& !currentAddress.isLoopbackAddress()) {
 					return currentAddress.getHostAddress();
 				}
@@ -135,7 +136,7 @@ public static class TestConfig {
 							.getInetAddresses();
 					while (inetAddress.hasMoreElements()) {
 						InetAddress currentAddress = inetAddress.nextElement();
-						if (currentAddress instanceof Inet4Address
+						if (currentAddress instanceof Inet4Address || currentAddress instanceof Inet6Address
 								&& !currentAddress.isLoopbackAddress()) {
 							hasValidNetworkInterface = true;
 							netWorkInterfaceName = networkInterface.getName();

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/outbound/RocketMQProducerMessageHandler.java
Patch:
@@ -119,7 +119,7 @@ public void start() {
 						.fetchPublishMessageQueues(destination.getName());
 				if (extendedProducerProperties.getPartitionCount() != messageQueues
 						.size()) {
-					logger.info(String.format(
+					log.info(String.format(
 							"The partition count of topic '%s' will change from '%s' to '%s'",
 							destination.getName(),
 							extendedProducerProperties.getPartitionCount(),

File: spring-cloud-alibaba-examples/nacos-example/nacos-config-example/src/main/java/com/alibaba/cloud/examples/example/ExtensionConfigExample.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Example of extended configuration. When a configuration in the shared configuration
  * does not meet the requirements, the extended configuration can be used to override the
- * shared configuration. Priority: Main Configuration > Extended Configuration > Shared
+ * shared configuration. Priority: Main Configuration &gt; Extended Configuration &gt; Shared
  * Configuration.
  * @author lixiaoshuang
  */

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-pollable-consume-example/src/main/java/com/alibaba/cloud/examples/pollable/RocketMQPollableConsumeApplication.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.cloud.examples.orderly;
+package com.alibaba.cloud.examples.pollable;
 
 import java.util.HashMap;
 import java.util.Map;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/AbstractPropertySourceLoader.java
Patch:
@@ -35,9 +35,9 @@
  * Nacos-specific loader, If need to support other methods of parsing,you need to do the
  * following steps:
  * <p>
- * 1.inherit {@link AbstractPropertySourceLoader} ;<br/>
+ * 1.inherit {@link AbstractPropertySourceLoader};<br>
  * 2. define the file{@code spring.factories} and append
- * {@code org.springframework.boot.env.PropertySourceLoader=..}; <br/>
+ * {@code org.springframework.boot.env.PropertySourceLoader=..};<br>
  * 3.the last step validate.
  * </p>
  * Notice the use of {@link NacosByteArrayResource} .

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/NacosXmlPropertySourceLoader.java
Patch:
@@ -40,7 +40,7 @@
 /**
  * Parsing for XML requires overwriting the default
  * {@link PropertiesPropertySourceLoader}, because it internally rigorously validates
- * ({@conde DOCTYPE}) THE XML in a way that makes it difficult to customize the
+ * ({@code DOCTYPE}) THE XML in a way that makes it difficult to customize the
  * configuration; at finally, make sure it's in the first place.
  *
  * @author zkz

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/SentinelWebMvcConfigurer.java
Patch:
@@ -27,7 +27,7 @@
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
 /**
- * @author: chao.wu
+ * @author chao.wu
  */
 public class SentinelWebMvcConfigurer implements WebMvcConfigurer {
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/properties/RocketMQConsumerProperties.java
Patch:
@@ -49,9 +49,9 @@ public class RocketMQConsumerProperties extends RocketMQCommonProperties {
 
 	/**
 	 * The expressions include tags or SQL,as follow:
-	 * <p/>
+	 * <p>
 	 * tag: {@code tag1||tag2||tag3 }; sql: {@code 'color'='blue' AND 'price'>100 } .
-	 * <p/>
+	 * </p>
 	 * Determines whether there are specific characters "{@code ||}" in the expression to
 	 * determine how the message is filtered,tags or SQL.
 	 */

File: spring-cloud-alibaba-tests/spring-cloud-alibaba-test-support/src/main/java/com/alibaba/cloud/testsupport/Tester.java
Patch:
@@ -19,7 +19,7 @@
 /**
  *
  * @author freeman
- * @date 2021.0.1.0
+ * @since 2021.0.1.0
  */
 public class Tester {
 

File: spring-cloud-alibaba-tests/rocketmq-tests/rocketmq-stream-test/src/test/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQAutoConfigurationTests.java
Patch:
@@ -31,7 +31,6 @@
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;
-import org.springframework.cloud.client.serviceregistry.AutoServiceRegistrationConfiguration;
 import org.springframework.context.annotation.Configuration;
 
 import static com.alibaba.cloud.testsupport.Constant.TIME_OUT;
@@ -92,8 +91,7 @@ public void testProperties() {
 
 	@Configuration
 	@EnableAutoConfiguration
-	@ImportAutoConfiguration({ AutoServiceRegistrationConfiguration.class,
-			RocketMQBinderAutoConfiguration.class })
+	@ImportAutoConfiguration({RocketMQBinderAutoConfiguration.class })
 	public static class TestConfig {
 
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinder.java
Patch:
@@ -297,10 +297,10 @@ private Object deserializePayload(Object payload, MimeType contentType) {
 		}
 	}
 
-	private static class MessageCollectorImpl implements MessageCollector {
+	protected static class MessageCollectorImpl implements MessageCollector {
 		private final Map<MessageChannel, BlockingQueue<Message<?>>> results;
 
-		private MessageCollectorImpl() {
+		MessageCollectorImpl() {
 			this.results = new HashMap();
 		}
 

File: spring-cloud-alibaba-tests/rocketmq-tests/rocketmq-stream-test/src/test/java/com/alibaba/cloud/stream/binder/rocketmq/RocketmqProduceAndConsumerTests.java
Patch:
@@ -91,7 +91,7 @@ public ApplicationRunner produceRunner(MessageChannel dest) {
 		@Bean(name = "consumer")
 		@Profile("test")
 		@DependsOn(value = "produce")
-		public ApplicationRunner consumerRunner(PollableMessageSource dest) {
+		public ApplicationRunner consumerRunner(MessageChannel dest) {
 			return args -> {
 				((SubscribableChannel) dest).subscribe(message -> Assertions.assertEquals(message,"Hello RocketMQ" ));
 			};

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosDiscoveryProperties.java
Patch:
@@ -265,7 +265,7 @@ public void init() throws Exception {
 					ip = inetUtils.findFirstNonLoopbackHostInfo().getIpAddress();
 				}
 				else if ("IPv6".equalsIgnoreCase(ipType)) {
-					ip = inetIPv6Util.findAddress();
+					ip = inetIPv6Util.findIPv6Address();
 				}
 				else {
 					throw new IllegalArgumentException(

File: spring-cloud-alibaba-tests/nacos-tests/nacos-config-test/src/main/java/com/alibaba/cloud/tests/nacos/config/UserProperties.java
Patch:
@@ -40,8 +40,8 @@ public class UserProperties {
 	public static class User {
 		private String name;
 		private Integer age;
-		
-		public User(String name, Integer age){
+
+		public User(String name, Integer age) {
 			this.name = name;
 			this.age = age;
 		}

File: spring-cloud-alibaba-tests/spring-cloud-alibaba-test-support/src/main/java/com/alibaba/cloud/testsupport/HasDockerAndItEnabled.java
Patch:
@@ -27,7 +27,8 @@
 /**
  * Disables test execution if Docker is unavailable.
  * <p>
- * We don't want to run integration tests on local machine, but still give a chance to run it.
+ * We don't want to run integration tests on local machine, but still give a chance to run
+ * it.
  * <p>
  * Typically, used for CI and local integration test.
  * <p>

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinder.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.alibaba.cloud.stream.binder.rocketmq;
 
-import com.alibaba.cloud.stream.binder.rocketmq.constant.RocketMQConst;
 import com.alibaba.cloud.stream.binder.rocketmq.custom.RocketMQBeanContainerCache;
 import com.alibaba.cloud.stream.binder.rocketmq.extend.ErrorAcknowledgeHandler;
 import com.alibaba.cloud.stream.binder.rocketmq.integration.inbound.RocketMQInboundChannelAdapter;

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/inbound/RocketMQConsumerFactory.java
Patch:
@@ -96,7 +96,7 @@ public static DefaultMQPushConsumer initPushConsumer(
 
 	/**
 	 * todo Compatible with versions less than 4.6 ?
-	 * @param topic
+	 * @param topic consumer topic.
 	 * @param extendedConsumerProperties extendedConsumerProperties
 	 * @return DefaultLitePullConsumer
 	 */

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-tx-example/src/main/java/com/alibaba/cloud/examples/tx/TransactionListenerImpl.java
Patch:
@@ -30,7 +30,7 @@
 public class TransactionListenerImpl implements TransactionListener {
 
 	/**
-	 * Excute local transaction.
+	 * Execute local transaction.
 	 * @param msg messages
 	 * @param arg message args
 	 * @return Transaction state

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/autoconfigurate/RocketMQBinderAutoConfiguration.java
Patch:
@@ -35,6 +35,7 @@
  *
  * @author Timur Valiev
  * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>
+ * @author freeman
  */
 @Configuration(proxyBeanMethods = false)
 @EnableConfigurationProperties({ RocketMQExtendedBindingProperties.class,
@@ -62,7 +63,7 @@ public RocketMQMessageChannelBinder rocketMQMessageChannelBinder(
 	@Configuration(proxyBeanMethods = false)
 	@ConditionalOnClass(HealthIndicator.class)
 	@ConditionalOnEnabledHealthIndicator("rocketmq")
-	static class KafkaBinderHealthIndicatorConfiguration {
+	static class RocketMQBinderHealthIndicatorConfiguration {
 
 		@Bean
 		public RocketMQBinderHealthIndicator rocketMQBinderHealthIndicator() {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java
Patch:
@@ -207,7 +207,7 @@ private void overrideFromEnv() {
 	private String secretKey;
 
 	/**
-	 * access key for namespace.
+	 * role name for aliyun ram.
 	 */
 	private String ramRoleName;
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java
Patch:
@@ -207,7 +207,7 @@ private void overrideFromEnv() {
 	private String secretKey;
 
 	/**
-	 * access key for namespace.
+	 * role name for aliyun ram.
 	 */
 	private String ramRoleName;
 

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-delay-consume-example/src/main/java/com/alibaba/cloud/examples/delay/RocketMQDelayConsumeApplication.java
Patch:
@@ -48,8 +48,7 @@ public static void main(String[] args) {
 	}
 
 	/**
-	 * Produce delay messages
-	 * @return
+	 * Produce delay messages.
 	 */
 	@Bean
 	public ApplicationRunner producerDelay() {

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-sql-consume-example/src/main/java/com/alibaba/cloud/examples/sql/RocketMQSqlConsumeApplication.java
Patch:
@@ -14,7 +14,7 @@
  * limitations under the License.
  */
 
-package com.alibaba.cloud.examples.broadcast;
+package com.alibaba.cloud.examples.sql;
 
 import java.util.HashMap;
 import java.util.Map;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosDiscoveryClientConfiguration.java
Patch:
@@ -53,8 +53,7 @@ public DiscoveryClient nacosDiscoveryClient(
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnProperty(value = "spring.cloud.nacos.discovery.watch.enabled",
-			matchIfMissing = true)
+	@ConditionalOnProperty(value = "spring.cloud.nacos.discovery.watch.enabled", matchIfMissing = true)
 	public NacosWatch nacosWatch(NacosServiceManager nacosServiceManager,
 			NacosDiscoveryProperties nacosDiscoveryProperties) {
 		return new NacosWatch(nacosServiceManager, nacosDiscoveryProperties);

File: spring-cloud-alibaba-starters/spring-cloud-circuitbreaker-sentinel/src/main/java/com/alibaba/cloud/circuitbreaker/sentinel/feign/FeignClientCircuitNameResolver.java
Patch:
@@ -34,6 +34,7 @@
  * @since 2021.0.1.0
  * @see CircuitBreakerNameResolver
  */
+@SuppressWarnings("rawtypes")
 public class FeignClientCircuitNameResolver implements CircuitBreakerNameResolver {
 
 	private final Map configurations;

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-broadcast-example/rocketmq-broadcast-producer-example/src/main/java/com/alibaba/cloud/examples/broadcast/RocketMQBroadcastProducerApplication.java
Patch:
@@ -36,12 +36,12 @@
  * @author sorie
  */
 @SpringBootApplication
-public class RocketMQBroadcastConsumeApplication {
+public class RocketMQBroadcastProducerApplication {
 	private static final Logger log = LoggerFactory
-			.getLogger(RocketMQBroadcastConsumeApplication.class);
+			.getLogger(RocketMQBroadcastProducerApplication.class);
 
 	public static void main(String[] args) {
-		SpringApplication.run(RocketMQBroadcastConsumeApplication.class, args);
+		SpringApplication.run(RocketMQBroadcastProducerApplication.class, args);
 	}
 
 	@Bean

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/constant/RocketMQConst.java
Patch:
@@ -31,7 +31,7 @@ public class RocketMQConst extends MessageConst {
 	/**
 	 * Default group for SCS RocketMQ Binder.
 	 */
-	public static final String DEFAULT_GROUP = "anonymous";
+	public static final String DEFAULT_GROUP = "binder_default_group_name";
 
 	/**
 	 * user args for SCS RocketMQ Binder.

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/DataSourcePropertiesConfiguration.java
Patch:
@@ -135,7 +135,8 @@ public List<String> getValidField() {
 						if (!ObjectUtils.isEmpty(field.get(this))) {
 							return field.getName();
 						}
-					} catch (IllegalAccessException e) {
+					}
+					catch (IllegalAccessException e) {
 						// won't happen
 					}
 					return null;

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/test/java/com/alibaba/cloud/sentinel/datasource/DataSourcePropertiesConfigurationTests.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.alibaba.cloud.sentinel.datasource;
 
+import java.util.List;
+
 import com.alibaba.cloud.sentinel.datasource.config.ApolloDataSourceProperties;
 import com.alibaba.cloud.sentinel.datasource.config.DataSourcePropertiesConfiguration;
 import org.junit.jupiter.api.Test;
 
-import java.util.List;
-
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelDataSourceHandler.java
Patch:
@@ -101,7 +101,7 @@ public void afterSingletonsInstantiated() {
 	}
 
 	protected BeanDefinitionBuilder parseBeanDefinition(final AbstractDataSourceProperties dataSourceProperties,
-									 String dataSourceName) {
+														String dataSourceName) {
 		Map<String, Object> propertyMap = Arrays
 				.stream(dataSourceProperties.getClass().getDeclaredFields())
 				.filter(field -> !field.isSynthetic())

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/test/java/com/alibaba/cloud/sentinel/custom/SentinelDataSourceHandlerTests.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.cloud.sentinel.datasource.config.ApolloDataSourceProperties;
 import org.junit.Before;
 import org.junit.Test;
+
 import org.springframework.beans.MutablePropertyValues;
 import org.springframework.beans.factory.config.RuntimeBeanReference;
 import org.springframework.beans.factory.support.BeanDefinitionBuilder;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/refresh/NacosContextRefresher.java
Patch:
@@ -127,6 +127,8 @@ public void innerReceive(String dataId, String group,
 				});
 		try {
 			configService.addListener(dataKey, groupKey, listener);
+			log.info("[Nacos Config] Listening config: dataId={}, group={}", dataKey,
+					groupKey);
 		}
 		catch (NacosException e) {
 			log.warn(String.format(

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/NacosConfigDataLoader.java
Patch:
@@ -34,7 +34,7 @@
 import org.springframework.boot.context.config.ConfigDataLoader;
 import org.springframework.boot.context.config.ConfigDataLoaderContext;
 import org.springframework.boot.context.config.ConfigDataResourceNotFoundException;
-import org.springframework.boot.context.properties.bind.Binder;
+import org.springframework.boot.logging.DeferredLogFactory;
 import org.springframework.core.env.PropertySource;
 
 import static com.alibaba.cloud.nacos.configdata.ConfigPreference.LOCAL;
@@ -58,8 +58,8 @@ public class NacosConfigDataLoader implements ConfigDataLoader<NacosConfigDataRe
 
 	private final Log log;
 
-	public NacosConfigDataLoader(Log log) {
-		this.log = log;
+	public NacosConfigDataLoader(DeferredLogFactory logFactory) {
+		this.log = logFactory.getLog(getClass());
 	}
 
 	@Override

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/NacosConfigDataLoader.java
Patch:
@@ -33,6 +33,7 @@
 import org.springframework.boot.context.config.ConfigDataLoader;
 import org.springframework.boot.context.config.ConfigDataLoaderContext;
 import org.springframework.boot.context.config.ConfigDataResourceNotFoundException;
+import org.springframework.boot.logging.DeferredLogFactory;
 import org.springframework.core.env.PropertySource;
 
 import static com.alibaba.cloud.nacos.configdata.NacosConfigDataResource.NacosItemConfig;
@@ -52,8 +53,8 @@ public class NacosConfigDataLoader implements ConfigDataLoader<NacosConfigDataRe
 
 	private final Log log;
 
-	public NacosConfigDataLoader(Log log) {
-		this.log = log;
+	public NacosConfigDataLoader(DeferredLogFactory logFactory) {
+		this.log = logFactory.getLog(getClass());
 	}
 
 	@Override

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/NacosConfigDataLoader.java
Patch:
@@ -100,7 +100,8 @@ private List<PropertySource<?>> pullConfig(ConfigService configService, String g
 			throws NacosException, IOException {
 		String config = configService.getConfig(dataId, group, timeout);
 		if (log.isDebugEnabled()) {
-			log.debug("[NacosConfigDataLoader][pullConfig] get nacos config is: " + config);
+			log.debug(String.format("[NacosConfigDataLoader][pullConfig] get nacos config, dataId: %s,group: %s," +
+					"content: %s", dataId, group, config));
 		}
 		return NacosDataParserHandler.getInstance().parseNacosData(dataId, config,
 				suffix);

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/NacosConfigDataLoader.java
Patch:
@@ -99,6 +99,9 @@ private List<PropertySource<?>> pullConfig(ConfigService configService, String g
 			String dataId, String suffix, long timeout)
 			throws NacosException, IOException {
 		String config = configService.getConfig(dataId, group, timeout);
+		if (log.isDebugEnabled()) {
+			log.debug("[NacosConfigDataLoader][pullConfig] get nacos config is: " + config);
+		}
 		return NacosDataParserHandler.getInstance().parseNacosData(dataId, config,
 				suffix);
 	}

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/converter/SentinelConverter.java
Patch:
@@ -76,7 +76,7 @@ public Collection<Object> convert(String source) {
 		}
 
 		if (StringUtils.isEmpty(source)) {
-			log.warn("converter can not convert rules because source is empty");
+			log.info("converter can not convert rules because source is empty");
 			return ruleCollection;
 		}
 		try {

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/parameter/AbstractNamedValueServiceParameterResolver.java
Patch:
@@ -112,7 +112,7 @@ public Object resolve(RestMethodMetadata restMethodMetadata,
 			}
 		}
 
-		return index > -1 ? arguments[index] : null;
+		return index != null && index > -1 ? arguments[index] : null;
 	}
 
 	protected Collection<String> getNames(RestMethodMetadata restMethodMetadata,

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/parameter/AbstractNamedValueServiceParameterResolver.java
Patch:
@@ -112,7 +112,7 @@ public Object resolve(RestMethodMetadata restMethodMetadata,
 			}
 		}
 
-		return index > -1 ? arguments[index] : null;
+		return index != null && index > -1 ? arguments[index] : null;
 	}
 
 	protected Collection<String> getNames(RestMethodMetadata restMethodMetadata,

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/configdata/NacosConfigDataLocationResolver.java
Patch:
@@ -24,9 +24,9 @@
 import java.util.List;
 import java.util.Map;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.nacos.NacosConfigManager;
 import com.alibaba.cloud.nacos.NacosConfigProperties;
-import com.alibaba.nacos.common.utils.StringUtils;
 import org.apache.commons.logging.Log;
 
 import org.springframework.boot.BootstrapRegistry.InstanceSupplier;

File: spring-cloud-alibaba-starters/spring-cloud-circuitbreaker-sentinel/src/main/java/com/alibaba/cloud/circuitbreaker/sentinel/feign/FeignClientCircuitNameResolver.java
Patch:
@@ -30,9 +30,6 @@
 /**
  * Feign client circuit breaker name resolver.
  *
- * <p>
- * <strong>note:</strong> spring cloud openfeign version need greater than 3.0.4.
- *
  * @author freeman
  * @see CircuitBreakerNameResolver
  */

File: spring-cloud-alibaba-starters/spring-cloud-circuitbreaker-sentinel/src/main/java/com/alibaba/cloud/circuitbreaker/sentinel/feign/SentinelFeignClientAutoConfiguration.java
Patch:
@@ -61,7 +61,6 @@ public CircuitBreakerRuleChangeListener circuitBreakerRuleChangeListener() {
 	}
 
 	@Configuration(proxyBeanMethods = false)
-	@ConditionalOnClass(CircuitBreakerNameResolver.class)
 	public static class CircuitBreakerNameResolverConfiguration {
 
 		@Bean

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelAutoConfiguration.java
Patch:
@@ -55,6 +55,7 @@
  * @author xiaojing
  * @author jiashuai.xie
  * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>
+ * @author freeman
  */
 @Configuration(proxyBeanMethods = false)
 @ConditionalOnProperty(name = "spring.cloud.sentinel.enabled", matchIfMissing = true)
@@ -147,7 +148,7 @@ public SentinelResourceAspect sentinelResourceAspect() {
 	@ConditionalOnClass(name = "org.springframework.web.client.RestTemplate")
 	@ConditionalOnProperty(name = "resttemplate.sentinel.enabled", havingValue = "true",
 			matchIfMissing = true)
-	public SentinelBeanPostProcessor sentinelBeanPostProcessor(
+	public static SentinelBeanPostProcessor sentinelBeanPostProcessor(
 			ApplicationContext applicationContext) {
 		return new SentinelBeanPostProcessor(applicationContext);
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/feign/SeataFeignBlockingLoadBalancerClient.java
Patch:
@@ -22,7 +22,6 @@
 import feign.Request;
 import feign.Response;
 
-import org.springframework.cloud.client.loadbalancer.LoadBalancerProperties;
 import org.springframework.cloud.loadbalancer.blocking.client.BlockingLoadBalancerClient;
 import org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory;
 import org.springframework.cloud.openfeign.loadbalancer.FeignBlockingLoadBalancerClient;
@@ -35,10 +34,9 @@ public class SeataFeignBlockingLoadBalancerClient
 
 	public SeataFeignBlockingLoadBalancerClient(Client delegate,
 												BlockingLoadBalancerClient loadBalancerClient,
-												LoadBalancerProperties properties,
 												LoadBalancerClientFactory loadBalancerClientFactory,
 												SeataFeignObjectWrapper seataFeignObjectWrapper) {
-		super((Client) seataFeignObjectWrapper.wrap(delegate), loadBalancerClient, properties, loadBalancerClientFactory);
+		super((Client) seataFeignObjectWrapper.wrap(delegate), loadBalancerClient, loadBalancerClientFactory);
 	}
 
 	@Override

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/feign/SeataFeignClientAutoConfiguration.java
Patch:
@@ -57,13 +57,13 @@ Feign.Builder feignBuilder(BeanFactory beanFactory) {
 	protected static class FeignBeanPostProcessorConfiguration {
 
 		@Bean
-		SeataBeanPostProcessor seataBeanPostProcessor(
+		static SeataBeanPostProcessor seataBeanPostProcessor(
 				SeataFeignObjectWrapper seataFeignObjectWrapper) {
 			return new SeataBeanPostProcessor(seataFeignObjectWrapper);
 		}
 
 		@Bean
-		SeataContextBeanPostProcessor seataContextBeanPostProcessor(
+		static SeataContextBeanPostProcessor seataContextBeanPostProcessor(
 				BeanFactory beanFactory) {
 			return new SeataContextBeanPostProcessor(beanFactory);
 		}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/feign/SeataFeignObjectWrapper.java
Patch:
@@ -21,7 +21,6 @@
 import org.slf4j.LoggerFactory;
 
 import org.springframework.beans.factory.BeanFactory;
-import org.springframework.cloud.client.loadbalancer.LoadBalancerProperties;
 import org.springframework.cloud.loadbalancer.blocking.client.BlockingLoadBalancerClient;
 import org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory;
 import org.springframework.cloud.openfeign.loadbalancer.FeignBlockingLoadBalancerClient;
@@ -47,7 +46,6 @@ Object wrap(Object bean) {
 				FeignBlockingLoadBalancerClient client = (FeignBlockingLoadBalancerClient) bean;
 				return new SeataFeignBlockingLoadBalancerClient(client.getDelegate(),
 						beanFactory.getBean(BlockingLoadBalancerClient.class),
-						beanFactory.getBean(LoadBalancerProperties.class),
 						beanFactory.getBean(LoadBalancerClientFactory.class),
 						this);
 			}

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-comprehensive-example/src/main/java/com/alibaba/cloud/examples/RocketMQComprehensiveApplication.java
Patch:
@@ -61,6 +61,8 @@ public Function<Flux<User>, Flux<User>> processor() {
 		return flux -> flux.map(user -> {
 			user.setId(String.valueOf(
 					Long.parseLong(user.getId()) * Long.parseLong(user.getId())));
+			user.setName("not freeman");
+			user.getMeta().put("hobbies", Arrays.asList("programming"));
 			return user;
 		});
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/autoconfigurate/ExtendedBindingHandlerMappingsProviderConfiguration.java
Patch:
@@ -48,7 +48,7 @@ public MappingsProvider rocketExtendedPropertiesDefaultMappingsProvider() {
 	}
 
 	@Bean
-	public RocketMQConfigBeanPostProcessor rocketMQConfigBeanPostProcessor() {
+	public static RocketMQConfigBeanPostProcessor rocketMQConfigBeanPostProcessor() {
 		return new RocketMQConfigBeanPostProcessor();
 	}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/support/RocketMQMessageConverterSupport.java
Patch:
@@ -33,7 +33,7 @@
 import org.springframework.messaging.support.MessageBuilder;
 import org.springframework.util.CollectionUtils;
 import org.springframework.util.MimeTypeUtils;
-import org.springframework.util.StringUtils;
+import org.springframework.util.ObjectUtils;
 
 /**
  * @author zkzlx
@@ -138,13 +138,13 @@ private static org.apache.rocketmq.common.message.Message getAndWrapMessage(
 		if (Objects.nonNull(headers) && !headers.isEmpty()) {
 			Object tag = headers.getOrDefault(Headers.TAGS,
 					headers.get(toRocketHeaderKey(Headers.TAGS)));
-			if (StringUtils.hasLength(tag.toString())) {
+			if (!ObjectUtils.isEmpty(tag)) {
 				rocketMsg.setTags(String.valueOf(tag));
 			}
 
 			Object keys = headers.getOrDefault(Headers.KEYS,
 					headers.get(toRocketHeaderKey(Headers.KEYS)));
-			if (StringUtils.hasLength(keys.toString())) {
+			if (!ObjectUtils.isEmpty(keys)) {
 				rocketMsg.setKeys(keys.toString());
 			}
 			Object flagObj = headers.getOrDefault(Headers.FLAG,

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/test/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQAutoConfigurationTests.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.cloud.stream.binder.rocketmq.autoconfigurate.RocketMQBinderAutoConfiguration;
 import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQBinderConfigurationProperties;
 import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQExtendedBindingProperties;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.ApplicationContextRunner;

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinder.java
Patch:
@@ -39,15 +39,13 @@
 import org.springframework.cloud.stream.provisioning.ProducerDestination;
 import org.springframework.integration.StaticMessageHeaderAccessor;
 import org.springframework.integration.acks.AcknowledgmentCallback;
-import org.springframework.integration.acks.AcknowledgmentCallback.Status;
 import org.springframework.integration.channel.AbstractMessageChannel;
 import org.springframework.integration.core.MessageProducer;
 import org.springframework.integration.support.DefaultErrorMessageStrategy;
 import org.springframework.integration.support.ErrorMessageStrategy;
 import org.springframework.messaging.MessageChannel;
 import org.springframework.messaging.MessageHandler;
 import org.springframework.messaging.MessagingException;
-import org.springframework.util.CollectionUtils;
 import org.springframework.util.StringUtils;
 
 /**
@@ -116,7 +114,7 @@ protected MessageProducer createConsumerEndpoint(ConsumerDestination destination
 			ExtendedConsumerProperties<RocketMQConsumerProperties> extendedConsumerProperties)
 			throws Exception {
 		// todo support anymous consumer
-		if (StringUtils.isEmpty(group)) {
+		if (!StringUtils.hasLength(group)) {
 			throw new RuntimeException(
 					"'group must be configured for channel " + destination.getName());
 		}

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/custom/RocketMQBeanContainerCache.java
Patch:
@@ -62,7 +62,7 @@ public static <T> T getBean(String beanName, Class<T> clazz) {
 	}
 
 	public static <T> T getBean(String beanName, Class<T> clazz, T defaultObj) {
-		if (StringUtils.isEmpty(beanName)) {
+		if (!StringUtils.hasLength(beanName)) {
 			return defaultObj;
 		}
 		Object obj = BEANS_CACHE.get(beanName);

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/outbound/RocketMQProduceFactory.java
Patch:
@@ -65,8 +65,8 @@ public static DefaultMQProducer initRocketMQProducer(String topic,
 				"Property 'nameServer' is required");
 
 		RPCHook rpcHook = null;
-		if (!StringUtils.isEmpty(producerProperties.getAccessKey())
-				&& !StringUtils.isEmpty(producerProperties.getSecretKey())) {
+		if (StringUtils.hasLength(producerProperties.getAccessKey())
+				&& StringUtils.hasLength(producerProperties.getSecretKey())) {
 			rpcHook = new AclClientRPCHook(
 					new SessionCredentials(producerProperties.getAccessKey(),
 							producerProperties.getSecretKey()));

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/support/RocketMQMessageConverterSupport.java
Patch:
@@ -138,13 +138,13 @@ private static org.apache.rocketmq.common.message.Message getAndWrapMessage(
 		if (Objects.nonNull(headers) && !headers.isEmpty()) {
 			Object tag = headers.getOrDefault(Headers.TAGS,
 					headers.get(toRocketHeaderKey(Headers.TAGS)));
-			if (!StringUtils.isEmpty(tag)) {
+			if (StringUtils.hasLength(tag.toString())) {
 				rocketMsg.setTags(String.valueOf(tag));
 			}
 
 			Object keys = headers.getOrDefault(Headers.KEYS,
 					headers.get(toRocketHeaderKey(Headers.KEYS)));
-			if (!StringUtils.isEmpty(keys)) {
+			if (StringUtils.hasLength(keys.toString())) {
 				rocketMsg.setKeys(keys.toString());
 			}
 			Object flagObj = headers.getOrDefault(Headers.FLAG,

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/utils/RocketMQUtils.java
Patch:
@@ -19,13 +19,13 @@
 import com.alibaba.cloud.stream.binder.rocketmq.constant.RocketMQConst;
 import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQBinderConfigurationProperties;
 import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQCommonProperties;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.acl.common.AclClientRPCHook;
 import org.apache.rocketmq.acl.common.SessionCredentials;
 import org.apache.rocketmq.client.consumer.MessageSelector;
 import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.remoting.RPCHook;
 
-import org.springframework.util.StringUtils;
 
 /**
  * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>
@@ -94,7 +94,7 @@ public static String getNameServerStr(String nameServer) {
 	private static final String SQL = "sql:";
 
 	public static MessageSelector getMessageSelector(String expression) {
-		if (StringUtils.hasText(expression) && expression.startsWith(SQL)) {
+		if (StringUtils.isNotBlank(expression) && expression.startsWith(SQL)) {
 			return MessageSelector.bySql(expression.replaceFirst(SQL, ""));
 		}
 		return MessageSelector.byTag(expression);

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-dubbo-example/sentinel-dubbo-consumer-example/src/main/java/com/alibaba/cloud/examples/FooServiceConsumer.java
Patch:
@@ -16,14 +16,14 @@
 
 package com.alibaba.cloud.examples;
 
-import org.apache.dubbo.config.annotation.Reference;
+import org.apache.dubbo.config.annotation.DubboReference;
 
 /**
  * @author fangjian
  */
 public class FooServiceConsumer {
 
-	@Reference(version = "${foo.service.version}",
+	@DubboReference(version = "${foo.service.version}",
 			application = "${dubbo.application.id}",
 			url = "dubbo://localhost:12345?version=1.0.0", timeout = 30000)
 	private FooService fooService;

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-dubbo-example/sentinel-dubbo-provider-example/src/main/java/com/alibaba/cloud/examples/FooServiceImpl.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.alibaba.cloud.examples;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 
 /**
  * @author fangjian
  */
-@Service(version = "${foo.service.version}", application = "${dubbo.application.id}",
+@DubboService(version = "${foo.service.version}", application = "${dubbo.application.id}",
 		protocol = "${dubbo.protocol.id}", registry = "${dubbo.registry.id}")
 public class FooServiceImpl implements FooService {
 

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-consumer-sample/src/main/java/com/alibaba/cloud/dubbo/bootstrap/DubboSpringCloudConsumerBootstrap.java
Patch:
@@ -47,7 +47,6 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.client.RestTemplate;
 
-import static org.springframework.http.MediaType.APPLICATION_JSON_UTF8_VALUE;
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 
 /**
@@ -247,7 +246,7 @@ public interface DubboFeignRestService {
 		@PostMapping("/params")
 		String params(@RequestParam("b") String paramB, @RequestParam("a") int paramA);
 
-		@PostMapping(value = "/request/body/map", produces = APPLICATION_JSON_UTF8_VALUE)
+		@PostMapping(value = "/request/body/map", produces = APPLICATION_JSON_VALUE)
 		User requestBody(@RequestParam("param") String param,
 				@RequestBody Map<String, Object> data);
 

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-provider-web-sample/src/main/java/com/alibaba/cloud/dubbo/service/SpringRestService.java
Patch:
@@ -85,7 +85,7 @@ public String form(@RequestParam("f") String form) {
 
 	@Override
 	@PostMapping(value = "/request/body/map",
-			produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
+			produces = MediaType.APPLICATION_JSON_VALUE)
 	public User requestBodyMap(@RequestBody Map<String, Object> data,
 			@RequestParam("param") String param) {
 		User user = new User();
@@ -97,7 +97,7 @@ public User requestBodyMap(@RequestBody Map<String, Object> data,
 	}
 
 	@PostMapping(value = "/request/body/user",
-			consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
+			consumes = MediaType.APPLICATION_JSON_VALUE)
 	@Override
 	public Map<String, Object> requestBodyUser(@RequestBody User user) {
 		Map<String, Object> map = new HashMap<>();

File: spring-cloud-alibaba-examples/spring-cloud-bus-rocketmq-example/src/main/java/com/alibaba/cloud/examples/rocketmq/UserRemoteApplicationEvent.java
Patch:
@@ -33,7 +33,7 @@ public UserRemoteApplicationEvent() {
 
 	public UserRemoteApplicationEvent(Object source, User user, String originService,
 			String destinationService) {
-		super(source, originService, destinationService);
+		super(source, originService, DEFAULT_DESTINATION_FACTORY.getDestination(originService));
 		this.user = user;
 	}
 

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/RuleType.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Arrays;
 import java.util.Optional;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.sentinel.datasource.config.AbstractDataSourceProperties;
 import com.alibaba.csp.sentinel.slots.block.AbstractRule;
 import com.alibaba.csp.sentinel.slots.block.authority.AuthorityRule;
@@ -27,8 +28,6 @@
 import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRule;
 import com.alibaba.csp.sentinel.slots.system.SystemRule;
 
-import org.springframework.util.StringUtils;
-
 /**
  * Enum for {@link AbstractRule} class, using in
  * {@link AbstractDataSourceProperties#ruleType}.

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/ConsulDataSourceProperties.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.alibaba.cloud.sentinel.datasource.config;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.sentinel.datasource.factorybean.ConsulDataSourceFactoryBean;
 
-import org.springframework.util.StringUtils;
 
 /**
  * Consul Properties class Using by {@link DataSourcePropertiesConfiguration} and

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/NacosDataSourceProperties.java
Patch:
@@ -18,10 +18,9 @@
 
 import javax.validation.constraints.NotEmpty;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.sentinel.datasource.factorybean.NacosDataSourceFactoryBean;
 
-import org.springframework.util.StringUtils;
-
 /**
  * Nacos Properties class Using by {@link DataSourcePropertiesConfiguration} and
  * {@link NacosDataSourceFactoryBean}.

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/RedisDataSourceProperties.java
Patch:
@@ -19,9 +19,9 @@
 import java.time.Duration;
 import java.util.List;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.sentinel.datasource.factorybean.RedisDataSourceFactoryBean;
 
-import org.springframework.util.StringUtils;
 
 /**
  * Redis Properties class Using by {@link DataSourcePropertiesConfiguration} and

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/ZookeeperDataSourceProperties.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.alibaba.cloud.sentinel.datasource.config;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.sentinel.datasource.factorybean.ZookeeperDataSourceFactoryBean;
 
-import org.springframework.util.StringUtils;
 
 /**
  * Zookeeper Properties class Using by {@link DataSourcePropertiesConfiguration} and

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/converter/SentinelConverter.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Optional;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.csp.sentinel.datasource.Converter;
 import com.alibaba.csp.sentinel.slots.block.authority.AuthorityRule;
 import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;
@@ -35,8 +36,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import org.springframework.util.StringUtils;
-
 /**
  * Convert sentinel rules for json or xml array Using strict mode to parse json or xml.
  *

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/factorybean/NacosDataSourceFactoryBean.java
Patch:
@@ -18,12 +18,12 @@
 
 import java.util.Properties;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.csp.sentinel.datasource.Converter;
 import com.alibaba.csp.sentinel.datasource.nacos.NacosDataSource;
 import com.alibaba.nacos.api.PropertyKeyConst;
 
 import org.springframework.beans.factory.FactoryBean;
-import org.springframework.util.StringUtils;
 
 /**
  * A {@link FactoryBean} for creating {@link NacosDataSource} instance.

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/test/java/com/alibaba/cloud/sentinel/datasource/SentinelConverterTests.java
Patch:
@@ -17,6 +17,7 @@
 package com.alibaba.cloud.sentinel.datasource;
 
 import java.io.IOException;
+import java.nio.charset.Charset;
 import java.util.List;
 
 import com.alibaba.cloud.commons.io.FileUtils;
@@ -107,7 +108,7 @@ public void testXmlConverter() {
 	private String readFileContent(String file) {
 		try {
 			return FileUtils.readFileToString(
-					ResourceUtils.getFile(StringUtils.trimAllWhitespace(file)));
+					ResourceUtils.getFile(StringUtils.trimAllWhitespace(file)), Charset.defaultCharset());
 		}
 		catch (IOException e) {
 			return "";

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-gateway/src/main/java/com/alibaba/cloud/sentinel/gateway/SentinelGatewayAutoConfiguration.java
Patch:
@@ -109,7 +109,7 @@ public SentinelJsonConfiguration() {
 						ApiPredicateGroupItem.class);
 				SimpleModule module = new SimpleModule(
 						"PolymorphicApiPredicateItemDeserializerModule",
-						new Version(1, 0, 0, null));
+						new Version(1, 0, 0, null, null, null));
 				module.addDeserializer(ApiPredicateItem.class, deserializer);
 				objectMapper.registerModule(module);
 			}
@@ -142,7 +142,7 @@ public SentinelXmlConfiguration() {
 						ApiPredicateGroupItem.class);
 				SimpleModule module = new SimpleModule(
 						"PolymorphicGatewayDeserializerModule",
-						new Version(1, 0, 0, null));
+						new Version(1, 0, 0, null, null, null));
 				module.addDeserializer(ApiPredicateItem.class, deserializer);
 				xmlMapper.registerModule(module);
 			}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java
Patch:
@@ -30,6 +30,7 @@
 import javax.annotation.PostConstruct;
 
 import com.alibaba.nacos.api.config.ConfigService;
+import com.alibaba.nacos.common.utils.StringUtils;
 import com.alibaba.spring.util.PropertySourcesUtils;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.slf4j.Logger;
@@ -40,7 +41,6 @@
 import org.springframework.boot.context.properties.DeprecatedConfigurationProperty;
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.Environment;
-import org.springframework.util.StringUtils;
 
 import static com.alibaba.nacos.api.PropertyKeyConst.ACCESS_KEY;
 import static com.alibaba.nacos.api.PropertyKeyConst.CLUSTER_NAME;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/client/NacosPropertySourceBuilder.java
Patch:
@@ -24,11 +24,11 @@
 import com.alibaba.cloud.nacos.parser.NacosDataParserHandler;
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.nacos.api.exception.NacosException;
+import com.alibaba.nacos.common.utils.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import org.springframework.core.env.PropertySource;
-import org.springframework.util.StringUtils;
 
 /**
  * @author xiaojing

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/client/NacosPropertySourceLocator.java
Patch:
@@ -24,6 +24,7 @@
 import com.alibaba.cloud.nacos.parser.NacosDataParserHandler;
 import com.alibaba.cloud.nacos.refresh.NacosContextRefresher;
 import com.alibaba.nacos.api.config.ConfigService;
+import com.alibaba.nacos.common.utils.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -33,7 +34,6 @@
 import org.springframework.core.env.Environment;
 import org.springframework.core.env.PropertySource;
 import org.springframework.util.CollectionUtils;
-import org.springframework.util.StringUtils;
 
 /**
  * @author xiaojing

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/AbstractPropertySourceLoader.java
Patch:
@@ -25,10 +25,11 @@
 import java.util.Map.Entry;
 import java.util.Set;
 
+import com.alibaba.nacos.common.utils.StringUtils;
+
 import org.springframework.boot.env.PropertySourceLoader;
 import org.springframework.core.env.PropertySource;
 import org.springframework.core.io.Resource;
-import org.springframework.util.StringUtils;
 
 /**
  * Nacos-specific loader, If need to support other methods of parsing,you need to do the

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/NacosXmlPropertySourceLoader.java
Patch:
@@ -25,6 +25,7 @@
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 
+import com.alibaba.nacos.common.utils.StringUtils;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
@@ -35,7 +36,6 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.env.PropertySource;
 import org.springframework.core.io.Resource;
-import org.springframework.util.StringUtils;
 
 /**
  * Parsing for XML requires overwriting the default

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/refresh/NacosRefreshHistory.java
Patch:
@@ -26,10 +26,10 @@
 import java.util.LinkedList;
 import java.util.Map;
 
+import com.alibaba.nacos.common.utils.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import org.springframework.util.StringUtils;
 
 public class NacosRefreshHistory {
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosAutoServiceRegistration.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.alibaba.cloud.nacos.registry;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.nacos.event.NacosDiscoveryInfoChangedEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -26,7 +27,6 @@
 import org.springframework.cloud.client.serviceregistry.ServiceRegistry;
 import org.springframework.context.event.EventListener;
 import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
 
 /**
  * @author xiaojing

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosRegistration.java
Patch:
@@ -80,7 +80,7 @@ public void init() {
 		Environment env = context.getEnvironment();
 
 		String endpointBasePath = env.getProperty(MANAGEMENT_ENDPOINT_BASE_PATH);
-		if (!StringUtils.isEmpty(endpointBasePath)) {
+		if (StringUtils.hasLength(endpointBasePath)) {
 			metadata.put(MANAGEMENT_ENDPOINT_BASE_PATH, endpointBasePath);
 		}
 
@@ -90,10 +90,10 @@ public void init() {
 			String contextPath = env
 					.getProperty("management.server.servlet.context-path");
 			String address = env.getProperty("management.server.address");
-			if (!StringUtils.isEmpty(contextPath)) {
+			if (StringUtils.hasLength(contextPath)) {
 				metadata.put(MANAGEMENT_CONTEXT_PATH, contextPath);
 			}
-			if (!StringUtils.isEmpty(address)) {
+			if (StringUtils.hasLength(address)) {
 				metadata.put(MANAGEMENT_ADDRESS, address);
 			}
 		}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Properties;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.nacos.NacosDiscoveryProperties;
 import com.alibaba.cloud.nacos.NacosServiceManager;
 import com.alibaba.nacos.api.exception.NacosException;
@@ -30,7 +31,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cloud.client.serviceregistry.Registration;
 import org.springframework.cloud.client.serviceregistry.ServiceRegistry;
-import org.springframework.util.StringUtils;
 
 import static org.springframework.util.ReflectionUtils.rethrowRuntimeException;
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/feign/SeataFeignClient.java
Patch:
@@ -23,13 +23,13 @@
 import java.util.List;
 import java.util.Map;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import feign.Client;
 import feign.Request;
 import feign.Response;
 import io.seata.core.context.RootContext;
 
 import org.springframework.beans.factory.BeanFactory;
-import org.springframework.util.StringUtils;
 
 /**
  * @author xiaojing
@@ -74,8 +74,8 @@ private Request getModifyRequest(Request request) {
 		seataXid.add(xid);
 		headers.put(RootContext.KEY_XID, seataXid);
 
-		return Request.create(request.method(), request.url(), headers, request.body(),
-				request.charset());
+		return Request.create(request.httpMethod(), request.url(), headers, request.body(),
+				request.charset(), null);
 	}
 
 }

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/rest/SeataRestTemplateInterceptor.java
Patch:
@@ -39,7 +39,7 @@ public ClientHttpResponse intercept(HttpRequest httpRequest, byte[] bytes,
 
 		String xid = RootContext.getXID();
 
-		if (!StringUtils.isEmpty(xid)) {
+		if (StringUtils.hasLength(xid)) {
 			requestWrapper.getHeaders().add(RootContext.KEY_XID, xid);
 		}
 		return clientHttpRequestExecution.execute(requestWrapper, bytes);

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelBeanPostProcessor.java
Patch:
@@ -98,17 +98,17 @@ private void checkSentinelRestTemplate(SentinelRestTemplate sentinelRestTemplate
 
 	private void checkBlock4RestTemplate(Class<?> blockClass, String blockMethod,
 			String beanName, String type) {
-		if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {
+		if (blockClass == void.class && !StringUtils.hasLength(blockMethod)) {
 			return;
 		}
-		if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {
+		if (blockClass != void.class && !StringUtils.hasLength(blockMethod)) {
 			log.error(
 					"{} class attribute exists but {} method attribute is not exists in bean[{}]",
 					type, type, beanName);
 			throw new IllegalArgumentException(type + " class attribute exists but "
 					+ type + " method attribute is not exists in bean[" + beanName + "]");
 		}
-		else if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {
+		else if (blockClass == void.class && StringUtils.hasLength(blockMethod)) {
 			log.error(
 					"{} method attribute exists but {} class attribute is not exists in bean[{}]",
 					type, type, beanName);

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelDataSourceHandler.java
Patch:
@@ -135,8 +135,8 @@ private void registerBean(final AbstractDataSourceProperties dataSourcePropertie
 				String dataType = StringUtils.trimAllWhitespace(propertyValue.toString());
 				if (CUSTOM_DATA_TYPE.equals(dataType)) {
 					try {
-						if (StringUtils
-								.isEmpty(dataSourceProperties.getConverterClass())) {
+						if (!StringUtils
+								.hasLength(dataSourceProperties.getConverterClass())) {
 							throw new RuntimeException("[Sentinel Starter] DataSource "
 									+ dataSourceName
 									+ "dataType is custom, please set converter-class "

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/rest/SentinelClientHttpResponse.java
Patch:
@@ -72,7 +72,7 @@ public InputStream getBody() throws IOException {
 	public HttpHeaders getHeaders() {
 		Map<String, List<String>> headers = new HashMap<>();
 		headers.put(HttpHeaders.CONTENT_TYPE,
-				Arrays.asList(MediaType.APPLICATION_JSON_UTF8_VALUE));
+				Arrays.asList(MediaType.APPLICATION_JSON_VALUE));
 		HttpHeaders httpHeaders = new HttpHeaders();
 		httpHeaders.putAll(headers);
 		return httpHeaders;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sidecar/src/main/java/com/alibaba/cloud/sidecar/consul/SidecarConsulAutoRegistration.java
Patch:
@@ -105,11 +105,11 @@ private static Map<String, String> getMetadata(ConsulDiscoveryProperties propert
 		}
 
 		// add metadata from other properties. See createTags above.
-		if (!StringUtils.isEmpty(properties.getInstanceZone())) {
+		if (StringUtils.hasLength(properties.getInstanceZone())) {
 			metadata.put(properties.getDefaultZoneMetadataName(),
 					properties.getInstanceZone());
 		}
-		if (!StringUtils.isEmpty(properties.getInstanceGroup())) {
+		if (StringUtils.hasLength(properties.getInstanceGroup())) {
 			metadata.put("group", properties.getInstanceGroup());
 		}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/actuate/endpoint/DubboExportedURLsEndpoint.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;
 
-import static org.springframework.http.MediaType.APPLICATION_JSON_UTF8_VALUE;
+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 
 /**
  * Dubbo exported URLs.
@@ -36,7 +36,7 @@ public class DubboExportedURLsEndpoint {
 	@Autowired
 	private DubboMetadataService dubboMetadataService;
 
-	@ReadOperation(produces = APPLICATION_JSON_UTF8_VALUE)
+	@ReadOperation(produces = APPLICATION_JSON_VALUE)
 	public Object get() {
 		return dubboMetadataService.getAllExportedURLs();
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/actuate/endpoint/DubboRestMetadataEndpoint.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;
 
-import static org.springframework.http.MediaType.APPLICATION_JSON_UTF8_VALUE;
+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 
 /**
  * Dubbo Rest Metadata {@link Endpoint}.
@@ -35,7 +35,7 @@ public class DubboRestMetadataEndpoint {
 	@Autowired
 	private DubboMetadataService dubboMetadataService;
 
-	@ReadOperation(produces = APPLICATION_JSON_UTF8_VALUE)
+	@ReadOperation(produces = APPLICATION_JSON_VALUE)
 	public String get() {
 		return dubboMetadataService.getServiceRestMetadata();
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/DubboGenericServiceFactory.java
Patch:
@@ -99,7 +99,7 @@ private ReferenceBean<GenericService> build(String interfaceName, String version
 
 		return cache.computeIfAbsent(key, k -> {
 			ReferenceBean<GenericService> referenceBean = new ReferenceBean<>();
-			referenceBean.setGeneric(true);
+			referenceBean.setGeneric(Boolean.TRUE.toString());
 			referenceBean.setInterface(interfaceName);
 			referenceBean.setVersion(version);
 			referenceBean.setGroup(group);

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/DubboMetadataService.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.alibaba.cloud.dubbo.metadata.ServiceRestMetadata;
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.config.annotation.Service;
 
 /**
  * Dubbo Metadata Service is a core interface for service subscribers, it must keep the
@@ -64,8 +63,8 @@ public interface DubboMetadataService {
 	 * Get the json content of an exported List of {@link URL URLs} by the
 	 * serviceInterface, group and version.
 	 * @param serviceInterface The class name of service interface
-	 * @param group {@link Service#group() the service group} (optional)
-	 * @param version {@link Service#version() the service version} (optional)~
+	 * @param group {@link org.apache.dubbo.config.annotation.DubboService#group() the service group} (optional)
+	 * @param version {@link org.apache.dubbo.config.annotation.DubboService#version() the service version} (optional)
 	 * @return non-null read-only {@link List}
 	 * @see URL
 	 */

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/parameter/RequestBodyServiceParameterResolver.java
Patch:
@@ -108,7 +108,7 @@ public Object resolve(RestMethodMetadata restMethodMetadata,
 			}
 			catch (IOException e) {
 				throw new HttpMessageNotReadableException(
-						"I/O error while reading input message", e);
+						"I/O error while reading input message", e, null);
 			}
 		}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQBinderUtils.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.List;
 
 import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQBinderConfigurationProperties;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.spring.autoconfigure.RocketMQProperties;
 
 import org.springframework.util.CollectionUtils;
-import org.springframework.util.StringUtils;
 
 /**
  * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/config/RocketMQComponent4BinderAutoConfiguration.java
Patch:
@@ -59,15 +59,15 @@ public DefaultMQProducer defaultMQProducer() {
 				"${spring.cloud.stream.rocketmq.binder.access-key:${rocketmq.producer.access-key:}}");
 		String sk = environment.resolveRequiredPlaceholders(
 				"${spring.cloud.stream.rocketmq.binder.secret-key:${rocketmq.producer.secret-key:}}");
-		if (!StringUtils.isEmpty(ak) && !StringUtils.isEmpty(sk)) {
+		if (StringUtils.hasLength(ak) && StringUtils.hasLength(sk)) {
 			producer = new DefaultMQProducer(RocketMQBinderConstants.DEFAULT_GROUP,
 					new AclClientRPCHook(new SessionCredentials(ak, sk)));
 			producer.setVipChannelEnabled(false);
 		}
 		else {
 			producer = new DefaultMQProducer(RocketMQBinderConstants.DEFAULT_GROUP);
 		}
-		if (StringUtils.isEmpty(configNameServer)) {
+		if (!StringUtils.hasLength(configNameServer)) {
 			configNameServer = RocketMQBinderConstants.DEFAULT_NAME_SERVER;
 		}
 		producer.setNamesrvAddr(configNameServer);

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/consuming/RocketMQListenerBindingContainer.java
Patch:
@@ -126,7 +126,7 @@ public RocketMQListenerBindingContainer(
 		this.rocketMQMessageChannelBinder = rocketMQMessageChannelBinder;
 		this.consumeMode = rocketMQConsumerProperties.getExtension().getOrderly()
 				? ConsumeMode.ORDERLY : ConsumeMode.CONCURRENTLY;
-		if (StringUtils.isEmpty(rocketMQConsumerProperties.getExtension().getSql())) {
+		if (!StringUtils.hasLength(rocketMQConsumerProperties.getExtension().getSql())) {
 			this.selectorType = SelectorType.TAG;
 			this.selectorExpression = rocketMQConsumerProperties.getExtension().getTags();
 		}
@@ -218,7 +218,7 @@ private void initRocketMQPushConsumer() throws MQClientException {
 
 		String ak = rocketBinderConfigurationProperties.getAccessKey();
 		String sk = rocketBinderConfigurationProperties.getSecretKey();
-		if (!StringUtils.isEmpty(ak) && !StringUtils.isEmpty(sk)) {
+		if (StringUtils.hasLength(ak) && StringUtils.hasLength(sk)) {
 			RPCHook rpcHook = new AclClientRPCHook(new SessionCredentials(ak, sk));
 			consumer = new DefaultMQPushConsumer(consumerGroup, rpcHook,
 					new AllocateMessageQueueAveragely(),

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/RocketMQMessageHandler.java
Patch:
@@ -164,7 +164,7 @@ protected void handleMessageInternal(
 			String tags = Optional
 					.ofNullable(message.getHeaders().get(RocketMQHeaders.TAGS)).orElse("")
 					.toString();
-			if (!StringUtils.isEmpty(tags)) {
+			if (StringUtils.hasLength(tags)) {
 				topicWithTags.append(":").append(tags);
 			}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/RocketMQMessageSource.java
Patch:
@@ -113,13 +113,13 @@ public synchronized void start() {
 			String tags = rocketMQConsumerProperties.getExtension().getTags();
 			String sql = rocketMQConsumerProperties.getExtension().getSql();
 
-			if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {
+			if (StringUtils.hasLength(tags) && StringUtils.hasLength(sql)) {
 				messageSelector = MessageSelector.byTag(tags);
 			}
-			else if (!StringUtils.isEmpty(tags)) {
+			else if (StringUtils.hasLength(tags)) {
 				messageSelector = MessageSelector.byTag(tags);
 			}
-			else if (!StringUtils.isEmpty(sql)) {
+			else if (StringUtils.hasLength(sql)) {
 				messageSelector = MessageSelector.bySql(sql);
 			}
 

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-dubbo-example/sentinel-dubbo-consumer-example/src/main/java/com/alibaba/cloud/examples/FooServiceConsumer.java
Patch:
@@ -16,14 +16,14 @@
 
 package com.alibaba.cloud.examples;
 
-import org.apache.dubbo.config.annotation.Reference;
+import org.apache.dubbo.config.annotation.DubboReference;
 
 /**
  * @author fangjian
  */
 public class FooServiceConsumer {
 
-	@Reference(version = "${foo.service.version}",
+	@DubboReference(version = "${foo.service.version}",
 			application = "${dubbo.application.id}",
 			url = "dubbo://localhost:12345?version=1.0.0", timeout = 30000)
 	private FooService fooService;

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-dubbo-example/sentinel-dubbo-provider-example/src/main/java/com/alibaba/cloud/examples/FooServiceImpl.java
Patch:
@@ -16,12 +16,12 @@
 
 package com.alibaba.cloud.examples;
 
-import org.apache.dubbo.config.annotation.Service;
+import org.apache.dubbo.config.annotation.DubboService;
 
 /**
  * @author fangjian
  */
-@Service(version = "${foo.service.version}", application = "${dubbo.application.id}",
+@DubboService(version = "${foo.service.version}", application = "${dubbo.application.id}",
 		protocol = "${dubbo.protocol.id}", registry = "${dubbo.registry.id}")
 public class FooServiceImpl implements FooService {
 

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-consumer-sample/src/main/java/com/alibaba/cloud/dubbo/bootstrap/DubboSpringCloudConsumerBootstrap.java
Patch:
@@ -47,7 +47,6 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.client.RestTemplate;
 
-import static org.springframework.http.MediaType.APPLICATION_JSON_UTF8_VALUE;
 import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 
 /**
@@ -247,7 +246,7 @@ public interface DubboFeignRestService {
 		@PostMapping("/params")
 		String params(@RequestParam("b") String paramB, @RequestParam("a") int paramA);
 
-		@PostMapping(value = "/request/body/map", produces = APPLICATION_JSON_UTF8_VALUE)
+		@PostMapping(value = "/request/body/map", produces = APPLICATION_JSON_VALUE)
 		User requestBody(@RequestParam("param") String param,
 				@RequestBody Map<String, Object> data);
 

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-provider-web-sample/src/main/java/com/alibaba/cloud/dubbo/service/SpringRestService.java
Patch:
@@ -85,7 +85,7 @@ public String form(@RequestParam("f") String form) {
 
 	@Override
 	@PostMapping(value = "/request/body/map",
-			produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
+			produces = MediaType.APPLICATION_JSON_VALUE)
 	public User requestBodyMap(@RequestBody Map<String, Object> data,
 			@RequestParam("param") String param) {
 		User user = new User();
@@ -97,7 +97,7 @@ public User requestBodyMap(@RequestBody Map<String, Object> data,
 	}
 
 	@PostMapping(value = "/request/body/user",
-			consumes = MediaType.APPLICATION_JSON_UTF8_VALUE)
+			consumes = MediaType.APPLICATION_JSON_VALUE)
 	@Override
 	public Map<String, Object> requestBodyUser(@RequestBody User user) {
 		Map<String, Object> map = new HashMap<>();

File: spring-cloud-alibaba-examples/spring-cloud-bus-rocketmq-example/src/main/java/com/alibaba/cloud/examples/rocketmq/UserRemoteApplicationEvent.java
Patch:
@@ -33,7 +33,7 @@ public UserRemoteApplicationEvent() {
 
 	public UserRemoteApplicationEvent(Object source, User user, String originService,
 			String destinationService) {
-		super(source, originService, destinationService);
+		super(source, originService, DEFAULT_DESTINATION_FACTORY.getDestination(originService));
 		this.user = user;
 	}
 

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/RuleType.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Arrays;
 import java.util.Optional;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.sentinel.datasource.config.AbstractDataSourceProperties;
 import com.alibaba.csp.sentinel.slots.block.AbstractRule;
 import com.alibaba.csp.sentinel.slots.block.authority.AuthorityRule;
@@ -27,8 +28,6 @@
 import com.alibaba.csp.sentinel.slots.block.flow.param.ParamFlowRule;
 import com.alibaba.csp.sentinel.slots.system.SystemRule;
 
-import org.springframework.util.StringUtils;
-
 /**
  * Enum for {@link AbstractRule} class, using in
  * {@link AbstractDataSourceProperties#ruleType}.

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/ConsulDataSourceProperties.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.alibaba.cloud.sentinel.datasource.config;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.sentinel.datasource.factorybean.ConsulDataSourceFactoryBean;
 
-import org.springframework.util.StringUtils;
 
 /**
  * Consul Properties class Using by {@link DataSourcePropertiesConfiguration} and

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/NacosDataSourceProperties.java
Patch:
@@ -18,10 +18,9 @@
 
 import javax.validation.constraints.NotEmpty;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.sentinel.datasource.factorybean.NacosDataSourceFactoryBean;
 
-import org.springframework.util.StringUtils;
-
 /**
  * Nacos Properties class Using by {@link DataSourcePropertiesConfiguration} and
  * {@link NacosDataSourceFactoryBean}.

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/RedisDataSourceProperties.java
Patch:
@@ -19,9 +19,9 @@
 import java.time.Duration;
 import java.util.List;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.sentinel.datasource.factorybean.RedisDataSourceFactoryBean;
 
-import org.springframework.util.StringUtils;
 
 /**
  * Redis Properties class Using by {@link DataSourcePropertiesConfiguration} and

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/ZookeeperDataSourceProperties.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.alibaba.cloud.sentinel.datasource.config;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.sentinel.datasource.factorybean.ZookeeperDataSourceFactoryBean;
 
-import org.springframework.util.StringUtils;
 
 /**
  * Zookeeper Properties class Using by {@link DataSourcePropertiesConfiguration} and

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/converter/SentinelConverter.java
Patch:
@@ -24,6 +24,7 @@
 import java.util.List;
 import java.util.Optional;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.csp.sentinel.datasource.Converter;
 import com.alibaba.csp.sentinel.slots.block.authority.AuthorityRule;
 import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;
@@ -35,8 +36,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import org.springframework.util.StringUtils;
-
 /**
  * Convert sentinel rules for json or xml array Using strict mode to parse json or xml.
  *

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/factorybean/NacosDataSourceFactoryBean.java
Patch:
@@ -18,12 +18,12 @@
 
 import java.util.Properties;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.csp.sentinel.datasource.Converter;
 import com.alibaba.csp.sentinel.datasource.nacos.NacosDataSource;
 import com.alibaba.nacos.api.PropertyKeyConst;
 
 import org.springframework.beans.factory.FactoryBean;
-import org.springframework.util.StringUtils;
 
 /**
  * A {@link FactoryBean} for creating {@link NacosDataSource} instance.

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/test/java/com/alibaba/cloud/sentinel/datasource/SentinelConverterTests.java
Patch:
@@ -17,6 +17,7 @@
 package com.alibaba.cloud.sentinel.datasource;
 
 import java.io.IOException;
+import java.nio.charset.Charset;
 import java.util.List;
 
 import com.alibaba.cloud.commons.io.FileUtils;
@@ -107,7 +108,7 @@ public void testXmlConverter() {
 	private String readFileContent(String file) {
 		try {
 			return FileUtils.readFileToString(
-					ResourceUtils.getFile(StringUtils.trimAllWhitespace(file)));
+					ResourceUtils.getFile(StringUtils.trimAllWhitespace(file)), Charset.defaultCharset());
 		}
 		catch (IOException e) {
 			return "";

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-gateway/src/main/java/com/alibaba/cloud/sentinel/gateway/SentinelGatewayAutoConfiguration.java
Patch:
@@ -109,7 +109,7 @@ public SentinelJsonConfiguration() {
 						ApiPredicateGroupItem.class);
 				SimpleModule module = new SimpleModule(
 						"PolymorphicApiPredicateItemDeserializerModule",
-						new Version(1, 0, 0, null));
+						new Version(1, 0, 0, null, null, null));
 				module.addDeserializer(ApiPredicateItem.class, deserializer);
 				objectMapper.registerModule(module);
 			}
@@ -142,7 +142,7 @@ public SentinelXmlConfiguration() {
 						ApiPredicateGroupItem.class);
 				SimpleModule module = new SimpleModule(
 						"PolymorphicGatewayDeserializerModule",
-						new Version(1, 0, 0, null));
+						new Version(1, 0, 0, null, null, null));
 				module.addDeserializer(ApiPredicateItem.class, deserializer);
 				xmlMapper.registerModule(module);
 			}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java
Patch:
@@ -30,6 +30,7 @@
 import javax.annotation.PostConstruct;
 
 import com.alibaba.nacos.api.config.ConfigService;
+import com.alibaba.nacos.common.utils.StringUtils;
 import com.alibaba.spring.util.PropertySourcesUtils;
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.slf4j.Logger;
@@ -40,7 +41,6 @@
 import org.springframework.boot.context.properties.DeprecatedConfigurationProperty;
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.Environment;
-import org.springframework.util.StringUtils;
 
 import static com.alibaba.nacos.api.PropertyKeyConst.ACCESS_KEY;
 import static com.alibaba.nacos.api.PropertyKeyConst.CLUSTER_NAME;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/client/NacosPropertySourceBuilder.java
Patch:
@@ -24,11 +24,11 @@
 import com.alibaba.cloud.nacos.parser.NacosDataParserHandler;
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.nacos.api.exception.NacosException;
+import com.alibaba.nacos.common.utils.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import org.springframework.core.env.PropertySource;
-import org.springframework.util.StringUtils;
 
 /**
  * @author xiaojing

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/client/NacosPropertySourceLocator.java
Patch:
@@ -24,6 +24,7 @@
 import com.alibaba.cloud.nacos.parser.NacosDataParserHandler;
 import com.alibaba.cloud.nacos.refresh.NacosContextRefresher;
 import com.alibaba.nacos.api.config.ConfigService;
+import com.alibaba.nacos.common.utils.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -33,7 +34,6 @@
 import org.springframework.core.env.Environment;
 import org.springframework.core.env.PropertySource;
 import org.springframework.util.CollectionUtils;
-import org.springframework.util.StringUtils;
 
 /**
  * @author xiaojing

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/AbstractPropertySourceLoader.java
Patch:
@@ -25,10 +25,11 @@
 import java.util.Map.Entry;
 import java.util.Set;
 
+import com.alibaba.nacos.common.utils.StringUtils;
+
 import org.springframework.boot.env.PropertySourceLoader;
 import org.springframework.core.env.PropertySource;
 import org.springframework.core.io.Resource;
-import org.springframework.util.StringUtils;
 
 /**
  * Nacos-specific loader, If need to support other methods of parsing,you need to do the

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/NacosXmlPropertySourceLoader.java
Patch:
@@ -25,6 +25,7 @@
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 
+import com.alibaba.nacos.common.utils.StringUtils;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
@@ -35,7 +36,6 @@
 import org.springframework.core.Ordered;
 import org.springframework.core.env.PropertySource;
 import org.springframework.core.io.Resource;
-import org.springframework.util.StringUtils;
 
 /**
  * Parsing for XML requires overwriting the default

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/refresh/NacosRefreshHistory.java
Patch:
@@ -26,10 +26,10 @@
 import java.util.LinkedList;
 import java.util.Map;
 
+import com.alibaba.nacos.common.utils.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import org.springframework.util.StringUtils;
 
 public class NacosRefreshHistory {
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosAutoServiceRegistration.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.alibaba.cloud.nacos.registry;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.nacos.event.NacosDiscoveryInfoChangedEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -26,7 +27,6 @@
 import org.springframework.cloud.client.serviceregistry.ServiceRegistry;
 import org.springframework.context.event.EventListener;
 import org.springframework.util.Assert;
-import org.springframework.util.StringUtils;
 
 /**
  * @author xiaojing

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosRegistration.java
Patch:
@@ -80,7 +80,7 @@ public void init() {
 		Environment env = context.getEnvironment();
 
 		String endpointBasePath = env.getProperty(MANAGEMENT_ENDPOINT_BASE_PATH);
-		if (!StringUtils.isEmpty(endpointBasePath)) {
+		if (StringUtils.hasLength(endpointBasePath)) {
 			metadata.put(MANAGEMENT_ENDPOINT_BASE_PATH, endpointBasePath);
 		}
 
@@ -90,10 +90,10 @@ public void init() {
 			String contextPath = env
 					.getProperty("management.server.servlet.context-path");
 			String address = env.getProperty("management.server.address");
-			if (!StringUtils.isEmpty(contextPath)) {
+			if (StringUtils.hasLength(contextPath)) {
 				metadata.put(MANAGEMENT_CONTEXT_PATH, contextPath);
 			}
-			if (!StringUtils.isEmpty(address)) {
+			if (StringUtils.hasLength(address)) {
 				metadata.put(MANAGEMENT_ADDRESS, address);
 			}
 		}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Properties;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.nacos.NacosDiscoveryProperties;
 import com.alibaba.cloud.nacos.NacosServiceManager;
 import com.alibaba.nacos.api.exception.NacosException;
@@ -30,7 +31,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cloud.client.serviceregistry.Registration;
 import org.springframework.cloud.client.serviceregistry.ServiceRegistry;
-import org.springframework.util.StringUtils;
 
 import static org.springframework.util.ReflectionUtils.rethrowRuntimeException;
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/feign/SeataFeignClient.java
Patch:
@@ -23,13 +23,13 @@
 import java.util.List;
 import java.util.Map;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import feign.Client;
 import feign.Request;
 import feign.Response;
 import io.seata.core.context.RootContext;
 
 import org.springframework.beans.factory.BeanFactory;
-import org.springframework.util.StringUtils;
 
 /**
  * @author xiaojing
@@ -74,8 +74,8 @@ private Request getModifyRequest(Request request) {
 		seataXid.add(xid);
 		headers.put(RootContext.KEY_XID, seataXid);
 
-		return Request.create(request.method(), request.url(), headers, request.body(),
-				request.charset());
+		return Request.create(request.httpMethod(), request.url(), headers, request.body(),
+				request.charset(), null);
 	}
 
 }

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/rest/SeataRestTemplateInterceptor.java
Patch:
@@ -39,7 +39,7 @@ public ClientHttpResponse intercept(HttpRequest httpRequest, byte[] bytes,
 
 		String xid = RootContext.getXID();
 
-		if (!StringUtils.isEmpty(xid)) {
+		if (StringUtils.hasLength(xid)) {
 			requestWrapper.getHeaders().add(RootContext.KEY_XID, xid);
 		}
 		return clientHttpRequestExecution.execute(requestWrapper, bytes);

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelBeanPostProcessor.java
Patch:
@@ -98,17 +98,17 @@ private void checkSentinelRestTemplate(SentinelRestTemplate sentinelRestTemplate
 
 	private void checkBlock4RestTemplate(Class<?> blockClass, String blockMethod,
 			String beanName, String type) {
-		if (blockClass == void.class && StringUtils.isEmpty(blockMethod)) {
+		if (blockClass == void.class && !StringUtils.hasLength(blockMethod)) {
 			return;
 		}
-		if (blockClass != void.class && StringUtils.isEmpty(blockMethod)) {
+		if (blockClass != void.class && !StringUtils.hasLength(blockMethod)) {
 			log.error(
 					"{} class attribute exists but {} method attribute is not exists in bean[{}]",
 					type, type, beanName);
 			throw new IllegalArgumentException(type + " class attribute exists but "
 					+ type + " method attribute is not exists in bean[" + beanName + "]");
 		}
-		else if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {
+		else if (blockClass == void.class && StringUtils.hasLength(blockMethod)) {
 			log.error(
 					"{} method attribute exists but {} class attribute is not exists in bean[{}]",
 					type, type, beanName);

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelDataSourceHandler.java
Patch:
@@ -135,8 +135,8 @@ private void registerBean(final AbstractDataSourceProperties dataSourcePropertie
 				String dataType = StringUtils.trimAllWhitespace(propertyValue.toString());
 				if (CUSTOM_DATA_TYPE.equals(dataType)) {
 					try {
-						if (StringUtils
-								.isEmpty(dataSourceProperties.getConverterClass())) {
+						if (!StringUtils
+								.hasLength(dataSourceProperties.getConverterClass())) {
 							throw new RuntimeException("[Sentinel Starter] DataSource "
 									+ dataSourceName
 									+ "dataType is custom, please set converter-class "

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/rest/SentinelClientHttpResponse.java
Patch:
@@ -72,7 +72,7 @@ public InputStream getBody() throws IOException {
 	public HttpHeaders getHeaders() {
 		Map<String, List<String>> headers = new HashMap<>();
 		headers.put(HttpHeaders.CONTENT_TYPE,
-				Arrays.asList(MediaType.APPLICATION_JSON_UTF8_VALUE));
+				Arrays.asList(MediaType.APPLICATION_JSON_VALUE));
 		HttpHeaders httpHeaders = new HttpHeaders();
 		httpHeaders.putAll(headers);
 		return httpHeaders;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sidecar/src/main/java/com/alibaba/cloud/sidecar/consul/SidecarConsulAutoRegistration.java
Patch:
@@ -105,11 +105,11 @@ private static Map<String, String> getMetadata(ConsulDiscoveryProperties propert
 		}
 
 		// add metadata from other properties. See createTags above.
-		if (!StringUtils.isEmpty(properties.getInstanceZone())) {
+		if (StringUtils.hasLength(properties.getInstanceZone())) {
 			metadata.put(properties.getDefaultZoneMetadataName(),
 					properties.getInstanceZone());
 		}
-		if (!StringUtils.isEmpty(properties.getInstanceGroup())) {
+		if (StringUtils.hasLength(properties.getInstanceGroup())) {
 			metadata.put("group", properties.getInstanceGroup());
 		}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/actuate/endpoint/DubboExportedURLsEndpoint.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;
 
-import static org.springframework.http.MediaType.APPLICATION_JSON_UTF8_VALUE;
+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 
 /**
  * Dubbo exported URLs.
@@ -36,7 +36,7 @@ public class DubboExportedURLsEndpoint {
 	@Autowired
 	private DubboMetadataService dubboMetadataService;
 
-	@ReadOperation(produces = APPLICATION_JSON_UTF8_VALUE)
+	@ReadOperation(produces = APPLICATION_JSON_VALUE)
 	public Object get() {
 		return dubboMetadataService.getAllExportedURLs();
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/actuate/endpoint/DubboRestMetadataEndpoint.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;
 
-import static org.springframework.http.MediaType.APPLICATION_JSON_UTF8_VALUE;
+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;
 
 /**
  * Dubbo Rest Metadata {@link Endpoint}.
@@ -35,7 +35,7 @@ public class DubboRestMetadataEndpoint {
 	@Autowired
 	private DubboMetadataService dubboMetadataService;
 
-	@ReadOperation(produces = APPLICATION_JSON_UTF8_VALUE)
+	@ReadOperation(produces = APPLICATION_JSON_VALUE)
 	public String get() {
 		return dubboMetadataService.getServiceRestMetadata();
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/condition/MissingSpringCloudRegistryConfigPropertyCondition.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.Map;
 
-import com.alibaba.cloud.dubbo.registry.SpringCloudRegistry;
+import com.alibaba.cloud.dubbo.registry.DubboCloudRegistry;
 
 import org.springframework.boot.autoconfigure.condition.ConditionOutcome;
 import org.springframework.boot.autoconfigure.condition.SpringBootCondition;
@@ -32,10 +32,10 @@
 import static com.alibaba.spring.util.PropertySourcesUtils.getSubProperties;
 
 /**
- * Missing {@link SpringCloudRegistry} Property {@link Condition}.
+ * Missing {@link DubboCloudRegistry} Property {@link Condition}.
  *
  * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
- * @see SpringCloudRegistry
+ * @see DubboCloudRegistry
  * @see Condition
  */
 public class MissingSpringCloudRegistryConfigPropertyCondition

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/registry/SpringCloudRegistryFactory.java
Patch:
@@ -37,7 +37,7 @@
  *
  * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  * @see RegistryFactory
- * @see SpringCloudRegistry
+ * @see DubboCloudRegistry
  */
 public class SpringCloudRegistryFactory extends AbstractRegistryFactory {
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/DubboGenericServiceFactory.java
Patch:
@@ -99,7 +99,7 @@ private ReferenceBean<GenericService> build(String interfaceName, String version
 
 		return cache.computeIfAbsent(key, k -> {
 			ReferenceBean<GenericService> referenceBean = new ReferenceBean<>();
-			referenceBean.setGeneric(true);
+			referenceBean.setGeneric(Boolean.TRUE.toString());
 			referenceBean.setInterface(interfaceName);
 			referenceBean.setVersion(version);
 			referenceBean.setGroup(group);

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/DubboMetadataService.java
Patch:
@@ -22,7 +22,6 @@
 
 import com.alibaba.cloud.dubbo.metadata.ServiceRestMetadata;
 import org.apache.dubbo.common.URL;
-import org.apache.dubbo.config.annotation.Service;
 
 /**
  * Dubbo Metadata Service is a core interface for service subscribers, it must keep the
@@ -64,8 +63,8 @@ public interface DubboMetadataService {
 	 * Get the json content of an exported List of {@link URL URLs} by the
 	 * serviceInterface, group and version.
 	 * @param serviceInterface The class name of service interface
-	 * @param group {@link Service#group() the service group} (optional)
-	 * @param version {@link Service#version() the service version} (optional)~
+	 * @param group {@link org.apache.dubbo.config.annotation.DubboService#group() the service group} (optional)
+	 * @param version {@link org.apache.dubbo.config.annotation.DubboService#version() the service version} (optional)
 	 * @return non-null read-only {@link List}
 	 * @see URL
 	 */

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/parameter/RequestBodyServiceParameterResolver.java
Patch:
@@ -108,7 +108,7 @@ public Object resolve(RestMethodMetadata restMethodMetadata,
 			}
 			catch (IOException e) {
 				throw new HttpMessageNotReadableException(
-						"I/O error while reading input message", e);
+						"I/O error while reading input message", e, null);
 			}
 		}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQBinderUtils.java
Patch:
@@ -20,10 +20,10 @@
 import java.util.List;
 
 import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQBinderConfigurationProperties;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.rocketmq.spring.autoconfigure.RocketMQProperties;
 
 import org.springframework.util.CollectionUtils;
-import org.springframework.util.StringUtils;
 
 /**
  * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/config/RocketMQComponent4BinderAutoConfiguration.java
Patch:
@@ -59,15 +59,15 @@ public DefaultMQProducer defaultMQProducer() {
 				"${spring.cloud.stream.rocketmq.binder.access-key:${rocketmq.producer.access-key:}}");
 		String sk = environment.resolveRequiredPlaceholders(
 				"${spring.cloud.stream.rocketmq.binder.secret-key:${rocketmq.producer.secret-key:}}");
-		if (!StringUtils.isEmpty(ak) && !StringUtils.isEmpty(sk)) {
+		if (StringUtils.hasLength(ak) && StringUtils.hasLength(sk)) {
 			producer = new DefaultMQProducer(RocketMQBinderConstants.DEFAULT_GROUP,
 					new AclClientRPCHook(new SessionCredentials(ak, sk)));
 			producer.setVipChannelEnabled(false);
 		}
 		else {
 			producer = new DefaultMQProducer(RocketMQBinderConstants.DEFAULT_GROUP);
 		}
-		if (StringUtils.isEmpty(configNameServer)) {
+		if (!StringUtils.hasLength(configNameServer)) {
 			configNameServer = RocketMQBinderConstants.DEFAULT_NAME_SERVER;
 		}
 		producer.setNamesrvAddr(configNameServer);

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/consuming/RocketMQListenerBindingContainer.java
Patch:
@@ -126,7 +126,7 @@ public RocketMQListenerBindingContainer(
 		this.rocketMQMessageChannelBinder = rocketMQMessageChannelBinder;
 		this.consumeMode = rocketMQConsumerProperties.getExtension().getOrderly()
 				? ConsumeMode.ORDERLY : ConsumeMode.CONCURRENTLY;
-		if (StringUtils.isEmpty(rocketMQConsumerProperties.getExtension().getSql())) {
+		if (!StringUtils.hasLength(rocketMQConsumerProperties.getExtension().getSql())) {
 			this.selectorType = SelectorType.TAG;
 			this.selectorExpression = rocketMQConsumerProperties.getExtension().getTags();
 		}
@@ -218,7 +218,7 @@ private void initRocketMQPushConsumer() throws MQClientException {
 
 		String ak = rocketBinderConfigurationProperties.getAccessKey();
 		String sk = rocketBinderConfigurationProperties.getSecretKey();
-		if (!StringUtils.isEmpty(ak) && !StringUtils.isEmpty(sk)) {
+		if (StringUtils.hasLength(ak) && StringUtils.hasLength(sk)) {
 			RPCHook rpcHook = new AclClientRPCHook(new SessionCredentials(ak, sk));
 			consumer = new DefaultMQPushConsumer(consumerGroup, rpcHook,
 					new AllocateMessageQueueAveragely(),

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/RocketMQMessageHandler.java
Patch:
@@ -164,7 +164,7 @@ protected void handleMessageInternal(
 			String tags = Optional
 					.ofNullable(message.getHeaders().get(RocketMQHeaders.TAGS)).orElse("")
 					.toString();
-			if (!StringUtils.isEmpty(tags)) {
+			if (StringUtils.hasLength(tags)) {
 				topicWithTags.append(":").append(tags);
 			}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/RocketMQMessageSource.java
Patch:
@@ -113,13 +113,13 @@ public synchronized void start() {
 			String tags = rocketMQConsumerProperties.getExtension().getTags();
 			String sql = rocketMQConsumerProperties.getExtension().getSql();
 
-			if (!StringUtils.isEmpty(tags) && !StringUtils.isEmpty(sql)) {
+			if (StringUtils.hasLength(tags) && StringUtils.hasLength(sql)) {
 				messageSelector = MessageSelector.byTag(tags);
 			}
-			else if (!StringUtils.isEmpty(tags)) {
+			else if (StringUtils.hasLength(tags)) {
 				messageSelector = MessageSelector.byTag(tags);
 			}
-			else if (!StringUtils.isEmpty(sql)) {
+			else if (StringUtils.hasLength(sql)) {
 				messageSelector = MessageSelector.bySql(sql);
 			}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/reactive/NacosReactiveDiscoveryClient.java
Patch:
@@ -24,11 +24,11 @@
 import org.reactivestreams.Publisher;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Value;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.core.scheduler.Schedulers;
 
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.cloud.client.ServiceInstance;
 import org.springframework.cloud.client.discovery.ReactiveDiscoveryClient;
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/reactive/NacosReactiveDiscoveryClient.java
Patch:
@@ -24,11 +24,11 @@
 import org.reactivestreams.Publisher;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.springframework.beans.factory.annotation.Value;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.core.scheduler.Schedulers;
 
+import org.springframework.beans.factory.annotation.Value;
 import org.springframework.cloud.client.ServiceInstance;
 import org.springframework.cloud.client.discovery.ReactiveDiscoveryClient;
 

File: spring-cloud-alibaba-examples/nacos-example/nacos-config-2.4.x-example/src/main/java/com/alibaba/cloud/imports/examples/Application.java
Patch:
@@ -17,6 +17,7 @@
 package com.alibaba.cloud.imports.examples;
 
 import com.alibaba.cloud.imports.examples.model.UserConfig;
+
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;

File: spring-cloud-alibaba-starters/spring-cloud-circuitbreaker-sentinel/src/test/java/com/alibaba/cloud/circuitbreaker/sentinel/feign/FeignClientCircuitBreakerRuleIntegrationTest.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RestController;
 
-import static com.alibaba.cloud.circuitbreaker.sentinel.feign.FeignClientCircuitBreakerRuleIntegrationTest.*;
+import static com.alibaba.cloud.circuitbreaker.sentinel.feign.FeignClientCircuitBreakerRuleIntegrationTest.Application;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.springframework.boot.test.context.SpringBootTest.WebEnvironment.DEFINED_PORT;
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosDiscoveryClient.java
Patch:
@@ -44,8 +44,8 @@ public class NacosDiscoveryClient implements DiscoveryClient {
 
 	private NacosServiceDiscovery serviceDiscovery;
 
-	@Value("${spring.cloud.nacos.discovery.failure-tolerance-enabled:true}")
-	private boolean failureToleranceEnabled = true;
+	@Value("${spring.cloud.nacos.discovery.failure-tolerance-enabled:false}")
+	private boolean failureToleranceEnabled;
 
 	public NacosDiscoveryClient(NacosServiceDiscovery nacosServiceDiscovery) {
 		this.serviceDiscovery = nacosServiceDiscovery;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/reactive/NacosReactiveDiscoveryClient.java
Patch:
@@ -43,8 +43,8 @@ public class NacosReactiveDiscoveryClient implements ReactiveDiscoveryClient {
 
 	private NacosServiceDiscovery serviceDiscovery;
 
-	@Value("${spring.cloud.nacos.discovery.failure-tolerance-enabled:true}")
-	private boolean failureToleranceEnabled = true;
+	@Value("${spring.cloud.nacos.discovery.failure-tolerance-enabled:false}")
+	private boolean failureToleranceEnabled;
 
 	public NacosReactiveDiscoveryClient(NacosServiceDiscovery nacosServiceDiscovery) {
 		this.serviceDiscovery = nacosServiceDiscovery;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/test/java/com/alibaba/cloud/nacos/NacosDiscoveryClientTests.java
Patch:
@@ -83,6 +83,7 @@ public void testGetInstancesFailureToleranceEnabled() throws NacosException {
 		ServiceCache.setInstances("a", singletonList(serviceInstance));
 
 		when(serviceDiscovery.getInstances("a")).thenThrow(new NacosException());
+		ReflectionTestUtils.setField(client, "failureToleranceEnabled", true);
 
 		List<ServiceInstance> instances = this.client.getInstances("a");
 
@@ -104,6 +105,7 @@ public void testFailureToleranceEnabled() throws NacosException {
 		ServiceCache.set(Arrays.asList("a", "b"));
 
 		when(serviceDiscovery.getServices()).thenThrow(new NacosException());
+		ReflectionTestUtils.setField(client, "failureToleranceEnabled", true);
 
 		List<String> services = this.client.getServices();
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/test/java/com/alibaba/cloud/nacos/discovery/reactive/NacosReactiveDiscoveryClientTests.java
Patch:
@@ -79,6 +79,7 @@ public void testGetInstancesFailureToleranceEnabled() throws NacosException {
 		ServiceCache.setInstances("a", singletonList(serviceInstance));
 
 		when(serviceDiscovery.getInstances("a")).thenThrow(new NacosException());
+		ReflectionTestUtils.setField(client, "failureToleranceEnabled", true);
 
 		Flux<ServiceInstance> instances = this.client.getInstances("a");
 
@@ -103,6 +104,8 @@ public void testFailureToleranceEnabled() throws NacosException {
 		ServiceCache.set(Arrays.asList("a", "b"));
 
 		when(serviceDiscovery.getServices()).thenThrow(new NacosException());
+		ReflectionTestUtils.setField(client, "failureToleranceEnabled", true);
+
 
 		Flux<String> services = this.client.getServices();
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/test/java/com/alibaba/cloud/nacos/NacosFileExtensionTest.java
Patch:
@@ -67,7 +67,7 @@ public Object invoke(Object proxy, Method method, Object[] args)
 						throws Throwable {
 					if ("test-name.yaml".equals(args[0])
 							&& "DEFAULT_GROUP".equals(args[1])) {
-						return "user:\n  name: hello\n  age: 12";
+						return "user:\n  name: hello\n  age: 12\n---\nuser:\n  gender: male";
 					}
 					return "";
 				}
@@ -88,6 +88,7 @@ public void contextLoads() throws Exception {
 
 		Assert.assertEquals(environment.getProperty("user.name"), "hello");
 		Assert.assertEquals(environment.getProperty("user.age"), "12");
+		Assert.assertEquals(environment.getProperty("user.gender"), "male");
 	}
 
 	@Configuration

File: spring-cloud-alibaba-starters/spring-cloud-circuitbreaker-sentinel/src/test/java/com/alibaba/cloud/circuitbreaker/sentinel/feign/FeignClientCircuitBreakerRuleIntegrationTest.java
Patch:
@@ -138,13 +138,13 @@ public void testSpecificFeignMethodRule() throws Exception {
 		assertThat(userClient.specificFeignMethod(false)).isEqualTo("fallback");
 
 		// 1 time exception, circuit breaker is closed(configuration is 1, but we need 2
-		// to make it closed)
+		// to make it open)
 		assertThat(userClient.specificFeignMethod(true)).isEqualTo("ok");
 
-		// occur the 2nd exception, circuit breaker closed
+		// occur the 2nd exception, circuit breaker open
 		assertThat(userClient.specificFeignMethod(false)).isEqualTo("fallback");
 
-		// test circuit breaker is closed
+		// test circuit breaker is open
 		assertThat(userClient.specificFeignMethod(true)).isEqualTo("fallback");
 		assertThat(userClient.specificFeignMethod(true)).isEqualTo("fallback");
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/autoconfigurate/ExtendedBindingHandlerMappingsProviderConfiguration.java
Patch:
@@ -55,6 +55,7 @@ public RocketMQConfigBeanPostProcessor rocketMQConfigBeanPostProcessor() {
 
 	/**
 	 * if you want to customize a bean, please use this BeanName {@code RocketMQMessageConverter.DEFAULT_NAME}.
+	 * @return
 	 */
 	@Bean(RocketMQMessageConverter.DEFAULT_NAME)
 	@ConditionalOnMissingBean(name = { RocketMQMessageConverter.DEFAULT_NAME })

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/autoconfigurate/ExtendedBindingHandlerMappingsProviderConfiguration.java
Patch:
@@ -55,6 +55,7 @@ public RocketMQConfigBeanPostProcessor rocketMQConfigBeanPostProcessor() {
 
 	/**
 	 * if you want to customize a bean, please use this BeanName {@code RocketMQMessageConverter.DEFAULT_NAME}.
+	 * @return
 	 */
 	@Bean(RocketMQMessageConverter.DEFAULT_NAME)
 	@ConditionalOnMissingBean(name = { RocketMQMessageConverter.DEFAULT_NAME })

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/config/RocketMQComponent4BinderAutoConfiguration.java
Patch:
@@ -74,7 +74,7 @@ public DefaultMQProducer defaultMQProducer() {
 			configNameServer = RocketMQBinderConstants.DEFAULT_NAME_SERVER;
 		}
 		producer.setNamesrvAddr(configNameServer);
-		if (!StringUtils.isEmpty(configNameServer)) {
+		if (!StringUtils.isEmpty(accessChannel)) {
 			producer.setAccessChannel(AccessChannel.valueOf(accessChannel));
 		}
 		return producer;

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/config/RocketMQComponent4BinderAutoConfiguration.java
Patch:
@@ -74,7 +74,7 @@ public DefaultMQProducer defaultMQProducer() {
 			configNameServer = RocketMQBinderConstants.DEFAULT_NAME_SERVER;
 		}
 		producer.setNamesrvAddr(configNameServer);
-		if (!StringUtils.isEmpty(configNameServer)) {
+		if (!StringUtils.isEmpty(accessChannel)) {
 			producer.setAccessChannel(AccessChannel.valueOf(accessChannel));
 		}
 		return producer;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/loadbalancer/ConditionalOnLoadBalancerNacos.java
Patch:
@@ -24,8 +24,8 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 
 @Retention(RetentionPolicy.RUNTIME)
-@Target({ ElementType.TYPE, ElementType.METHOD })
-@ConditionalOnProperty(value = "spring.cloud.loadbalancer.nacos.enabled", matchIfMissing = true)
+@Target({ElementType.TYPE, ElementType.METHOD})
+@ConditionalOnProperty(value = "spring.cloud.loadbalancer.nacos.enabled", havingValue = "true")
 public @interface ConditionalOnLoadBalancerNacos {
 
 }

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/loadbalancer/NacosLoadBalancerClientConfiguration.java
Patch:
@@ -54,7 +54,6 @@ public class NacosLoadBalancerClientConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnLoadBalancerNacosDefault
 	public ReactorLoadBalancer<ServiceInstance> nacosLoadBalancer(Environment environment,
 			LoadBalancerClientFactory loadBalancerClientFactory,
 			NacosDiscoveryProperties nacosDiscoveryProperties) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -159,8 +159,9 @@ public void setStatus(Registration registration, String status) {
 	public Object getStatus(Registration registration) {
 
 		String serviceName = registration.getServiceId();
+		String group = nacosDiscoveryProperties.getGroup();
 		try {
-			List<Instance> instances = namingService().getAllInstances(serviceName);
+			List<Instance> instances = namingService().getAllInstances(serviceName, group);
 			for (Instance instance : instances) {
 				if (instance.getIp().equalsIgnoreCase(nacosDiscoveryProperties.getIp())
 						&& instance.getPort() == nacosDiscoveryProperties.getPort()) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -159,8 +159,9 @@ public void setStatus(Registration registration, String status) {
 	public Object getStatus(Registration registration) {
 
 		String serviceName = registration.getServiceId();
+		String group = nacosDiscoveryProperties.getGroup();
 		try {
-			List<Instance> instances = namingService().getAllInstances(serviceName);
+			List<Instance> instances = namingService().getAllInstances(serviceName, group);
 			for (Instance instance : instances) {
 				if (instance.getIp().equalsIgnoreCase(nacosDiscoveryProperties.getIp())
 						&& instance.getPort() == nacosDiscoveryProperties.getPort()) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/metadata/repository/DubboServiceMetadataRepository.java
Patch:
@@ -237,9 +237,6 @@ public Stream<String> initSubscribedServices() {
 		dispatchEvent(new SubscribedServicesChangedEvent(this, oldSubscribedServices,
 				newSubscribedServices));
 
-		// clear old one, help GC
-		oldSubscribedServices.clear();
-
 		return newSubscribedServices.stream();
 	}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/autoconfigurate/ExtendedBindingHandlerMappingsProviderConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 
 import com.alibaba.cloud.stream.binder.rocketmq.convert.RocketMQMessageConverter;
 import com.alibaba.cloud.stream.binder.rocketmq.custom.RocketMQConfigBeanPostProcessor;
+
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.context.properties.source.ConfigurationPropertyName;
 import org.springframework.cloud.stream.config.BindingHandlerAdvise.MappingsProvider;

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/properties/RocketMQBinderConfigurationProperties.java
Patch:
@@ -48,7 +48,7 @@ public class RocketMQBinderConfigurationProperties {
 	private String secretKey;
 
 	/**
-	 * Enum type for accessChannel, values: LOCAL, CLOUD
+	 * Enum type for accessChannel, values: LOCAL, CLOUD.
 	 */
 	private String accessChannel;
 

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-produce-example/src/main/java/com/alibaba/cloud/examples/SenderService.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.stream.Stream;
 
 import com.alibaba.cloud.examples.RocketMQProduceApplication.MySource;
+import com.alibaba.cloud.stream.binder.rocketmq.contants.RocketMQConst;
 import org.apache.rocketmq.common.message.MessageConst;
-import org.apache.rocketmq.spring.support.RocketMQHeaders;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.messaging.Message;
@@ -62,7 +62,7 @@ public <T> void sendTransactionalMsg(T msg, int num) throws Exception {
 		MessageBuilder builder = MessageBuilder.withPayload(msg)
 				.setHeader(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.APPLICATION_JSON);
 		builder.setHeader("test", String.valueOf(num));
-		builder.setHeader(RocketMQHeaders.TAGS, "binder");
+		builder.setHeader(RocketMQConst.USER_TRANSACTIONAL_ARGS, "binder");
 		Message message = builder.build();
 		source.output2().send(message);
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/provisioning/selector/PartitionMessageQueueSelector.java
Patch:
@@ -36,7 +36,7 @@ public class PartitionMessageQueueSelector implements MessageQueueSelector {
 
 	@Override
 	public MessageQueue select(List<MessageQueue> mqs, Message msg, Object arg) {
-		Integer partition = 0;
+		int partition = 0;
 		try {
 			partition = Math.abs(
 					Integer.parseInt(msg.getProperty(BinderHeaders.PARTITION_HEADER)));

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/endpoint/SentinelHealthIndicator.java
Patch:
@@ -25,7 +25,7 @@
 import com.alibaba.csp.sentinel.heartbeat.HeartbeatSenderProvider;
 import com.alibaba.csp.sentinel.transport.HeartbeatSender;
 import com.alibaba.csp.sentinel.transport.config.TransportConfig;
-import com.alibaba.csp.sentinel.util.function.Tuple2;
+import com.alibaba.csp.sentinel.transport.endpoint.Endpoint;
 
 import org.springframework.beans.factory.support.DefaultListableBeanFactory;
 import org.springframework.boot.actuate.health.AbstractHealthIndicator;
@@ -84,8 +84,7 @@ protected void doHealthCheck(Health.Builder builder) throws Exception {
 
 		// Check health of Dashboard
 		boolean dashboardUp = true;
-		List<Tuple2<String, Integer>> consoleServerList = TransportConfig
-				.getConsoleServerList();
+		List<Endpoint> consoleServerList = TransportConfig.getConsoleServerList();
 		if (CollectionUtils.isEmpty(consoleServerList)) {
 			// If Dashboard isn't configured, it's OK and mark the status of Dashboard
 			// with UNKNOWN.

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-consume-example/src/main/java/com/alibaba/cloud/examples/RocketMQConsumerApplication.java
Patch:
@@ -74,8 +74,9 @@ public void run(String... args) throws InterruptedException {
 			while (true) {
 				mySink.input5().poll(m -> {
 					String payload = (String) m.getPayload();
-					if(payload.contains("0")){
-						throw new IllegalArgumentException("111111111111111111111111111111111111111111");
+					if (payload.contains("0")) {
+						throw new IllegalArgumentException(
+								"111111111111111111111111111111111111111111");
 					}
 					System.out.println("pull msg: " + payload);
 				}, new ParameterizedTypeReference<String>() {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/NacosDataParserHandler.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.stream.Collectors;
 
 import com.alibaba.cloud.nacos.utils.NacosConfigUtils;
+
 import org.springframework.boot.env.OriginTrackedMapPropertySource;
 import org.springframework.boot.env.PropertiesPropertySourceLoader;
 import org.springframework.boot.env.PropertySourceLoader;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/NacosXmlPropertySourceLoader.java
Patch:
@@ -79,7 +79,7 @@ public String[] getFileExtensions() {
 	 * return a list containing a single source, or in the case of a multi-document format
 	 * such as yaml a source for each document in the resource.
 	 * @param name the root name of the property source. If multiple documents are loaded
-	 *     an additional suffix should be added to the name for each source loaded.
+	 * an additional suffix should be added to the name for each source loaded.
 	 * @param resource the resource to load
 	 * @return a list property sources
 	 * @throws IOException if the source cannot be loaded

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-servlet-gateway-sample/src/main/java/com/alibaba/cloud/dubbo/gateway/DubboGatewayServlet.java
Patch:
@@ -52,8 +52,8 @@
 import org.springframework.web.servlet.HttpServletBean;
 import org.springframework.web.util.UriComponents;
 
-import static org.apache.commons.lang.StringUtils.substringAfter;
-import static org.apache.commons.lang.StringUtils.substringBetween;
+import static com.alibaba.cloud.commons.lang.StringUtils.substringAfter;
+import static com.alibaba.cloud.commons.lang.StringUtils.substringBetween;
 import static org.springframework.web.util.UriComponentsBuilder.fromUriString;
 
 @WebServlet(urlPatterns = "/dsc/*")

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/factorybean/ZookeeperDataSourceFactoryBean.java
Patch:
@@ -16,9 +16,9 @@
 
 package com.alibaba.cloud.sentinel.datasource.factorybean;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.csp.sentinel.datasource.Converter;
 import com.alibaba.csp.sentinel.datasource.zookeeper.ZookeeperDataSource;
-import org.apache.commons.lang3.StringUtils;
 
 import org.springframework.beans.factory.FactoryBean;
 

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/test/java/com/alibaba/cloud/sentinel/datasource/SentinelConverterTests.java
Patch:
@@ -19,13 +19,13 @@
 import java.io.IOException;
 import java.util.List;
 
+import com.alibaba.cloud.commons.io.FileUtils;
 import com.alibaba.cloud.sentinel.datasource.converter.JsonConverter;
 import com.alibaba.cloud.sentinel.datasource.converter.XmlConverter;
 import com.alibaba.csp.sentinel.slots.block.RuleConstant;
 import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.dataformat.xml.XmlMapper;
-import org.apache.commons.io.FileUtils;
 import org.junit.Test;
 
 import org.springframework.util.ResourceUtils;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/ribbon/NacosRule.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Objects;
 import java.util.stream.Collectors;
 
+import com.alibaba.cloud.commons.lang.StringUtils;
 import com.alibaba.cloud.nacos.NacosDiscoveryProperties;
 import com.alibaba.cloud.nacos.NacosServiceManager;
 import com.alibaba.nacos.api.naming.NamingService;
@@ -28,7 +29,6 @@
 import com.netflix.loadbalancer.AbstractLoadBalancerRule;
 import com.netflix.loadbalancer.DynamicServerListLoadBalancer;
 import com.netflix.loadbalancer.Server;
-import org.apache.commons.lang.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosDiscoveryProperties.java
Patch:
@@ -183,17 +183,17 @@ public class NacosDiscoveryProperties {
 	private String secretKey;
 
 	/**
-	 * Heart beat interval. Time unit: second.
+	 * Heart beat interval. Time unit: millisecond.
 	 */
 	private Integer heartBeatInterval;
 
 	/**
-	 * Heart beat timeout. Time unit: second.
+	 * Heart beat timeout. Time unit: millisecond.
 	 */
 	private Integer heartBeatTimeout;
 
 	/**
-	 * Ip delete timeout. Time unit: second.
+	 * Ip delete timeout. Time unit: millisecond.
 	 */
 	private Integer ipDeleteTimeout;
 

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/sentinel-feign-consumer-example/src/main/java/com/alibaba/cloud/examples/fallback/EchoServiceFallback.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  * @author lengleng
- * @date 2019-08-01
  * <p>
  * sentinel 降级处理
  */
@@ -35,7 +34,7 @@ public class EchoServiceFallback implements EchoService {
 	/**
 	 * 调用服务提供方的输出接口.
 	 * @param str 用户输入
-	 * @return
+	 * @return String
 	 */
 	@Override
 	public String echo(String str) {

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/sentinel-feign-consumer-example/src/main/java/com/alibaba/cloud/examples/fallback/EchoServiceFallbackFactory.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * @author lengleng
- * @date 2019-08-01
  */
 @Component
 public class EchoServiceFallbackFactory implements FallbackFactory<EchoServiceFallback> {

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/sentinel-feign-consumer-example/src/main/java/com/alibaba/cloud/examples/service/EchoService.java
Patch:
@@ -24,7 +24,6 @@
 
 /**
  * @author lengleng
- * @date 2019-08-01
  * <p>
  * example feign client
  */

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/sentinel-feign-provider-example/src/main/java/com/alibaba/cloud/examples/controller/EchoController.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * @author lengleng
- * @date 2019-08-01
  */
 @RestController
 public class EchoController {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/test/java/com/alibaba/cloud/nacos/NacosConfigurationNoSuffixTest.java
Patch:
@@ -50,7 +50,8 @@
  */
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore("javax.management.*")
+@PowerMockIgnore({ "javax.management.*", "javax.xml.parsers.*",
+		"com.sun.org.apache.xerces.internal.jaxp.*", "org.w3c.dom.*" })
 @PowerMockRunnerDelegate(SpringRunner.class)
 @PrepareForTest({ NacosConfigService.class })
 @SpringBootTest(classes = NacosConfigurationNoSuffixTest.TestConfig.class, properties = {

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/http/matcher/AbstractHttpRequestMatcher.java
Patch:
@@ -40,6 +40,7 @@ public abstract class AbstractHttpRequestMatcher implements HttpRequestMatcher {
 	 * <p>
 	 * For example {@code " || "} for URL patterns or {@code " && "} for param
 	 * expressions.
+	 * @return str
 	 */
 	protected abstract String getToStringInfix();
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigManager.java
Patch:
@@ -77,7 +77,7 @@ public ConfigService getConfigService() {
 
 	@PreDestroy
 	public void destroy() throws NacosException {
-		if(service != null){
+		if (service != null) {
 			service.shutDown();
 			service = null;
 		}

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/metadata/repository/DubboServiceMetadataRepository.java
Patch:
@@ -237,9 +237,6 @@ public Stream<String> initSubscribedServices() {
 		dispatchEvent(new SubscribedServicesChangedEvent(this, oldSubscribedServices,
 				newSubscribedServices));
 
-		// clear old one, help GC
-		oldSubscribedServices.clear();
-
 		return newSubscribedServices.stream();
 	}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/configclient/NacosDiscoveryClientConfigServiceBootstrapConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.alibaba.cloud.nacos.discovery.configclient;
 
+import com.alibaba.cloud.nacos.NacosServiceAutoConfiguration;
 import com.alibaba.cloud.nacos.discovery.NacosDiscoveryAutoConfiguration;
 import com.alibaba.cloud.nacos.discovery.NacosDiscoveryClientConfiguration;
 import com.alibaba.cloud.nacos.discovery.reactive.NacosReactiveDiscoveryClientConfiguration;
@@ -36,7 +37,7 @@
 		matchIfMissing = false)
 @Configuration(proxyBeanMethods = false)
 @ImportAutoConfiguration({ NacosDiscoveryAutoConfiguration.class,
-		NacosDiscoveryClientConfiguration.class,
+		NacosServiceAutoConfiguration.class, NacosDiscoveryClientConfiguration.class,
 		NacosReactiveDiscoveryClientConfiguration.class })
 public class NacosDiscoveryClientConfigServiceBootstrapConfiguration {
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosConfigEndpoint.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author xiaojing
  */
-@Endpoint(id = "nacos-config")
+@Endpoint(id = "nacosconfig")
 public class NacosConfigEndpoint {
 
 	private final NacosConfigProperties properties;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosDiscoveryEndpoint.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author xiaojing
  */
-@Endpoint(id = "nacos-discovery")
+@Endpoint(id = "nacosdiscovery")
 public class NacosDiscoveryEndpoint {
 
 	private static final Logger log = LoggerFactory

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosConfigEndpoint.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author xiaojing
  */
-@Endpoint(id = "nacos-config")
+@Endpoint(id = "nacosconfig")
 public class NacosConfigEndpoint {
 
 	private final NacosConfigProperties properties;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosDiscoveryEndpoint.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author xiaojing
  */
-@Endpoint(id = "nacos-discovery")
+@Endpoint(id = "nacosdiscovery")
 public class NacosDiscoveryEndpoint {
 
 	private static final Logger log = LoggerFactory

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosWatch.java
Patch:
@@ -114,8 +114,6 @@ public void onEvent(Event event) {
 								instanceOptional.ifPresent(currentInstance -> {
 									resetIfNeeded(currentInstance);
 								});
-								publisher.publishEvent(new HeartbeatEvent(NacosWatch.this,
-										nacosWatchIndex.getAndIncrement()));
 							}
 						}
 					});

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -27,6 +27,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cloud.client.serviceregistry.Registration;
 import org.springframework.cloud.client.serviceregistry.ServiceRegistry;
 import org.springframework.util.StringUtils;
@@ -44,12 +45,11 @@ public class NacosServiceRegistry implements ServiceRegistry<Registration> {
 
 	private final NacosDiscoveryProperties nacosDiscoveryProperties;
 
+	@Autowired
 	private NacosServiceManager nacosServiceManager;
 
-	public NacosServiceRegistry(NacosDiscoveryProperties nacosDiscoveryProperties,
-			NacosServiceManager nacosServiceManager) {
+	public NacosServiceRegistry(NacosDiscoveryProperties nacosDiscoveryProperties) {
 		this.nacosDiscoveryProperties = nacosDiscoveryProperties;
-		this.nacosServiceManager = nacosServiceManager;
 	}
 
 	@Override

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -27,6 +27,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cloud.client.serviceregistry.Registration;
 import org.springframework.cloud.client.serviceregistry.ServiceRegistry;
 import org.springframework.util.StringUtils;
@@ -44,12 +45,11 @@ public class NacosServiceRegistry implements ServiceRegistry<Registration> {
 
 	private final NacosDiscoveryProperties nacosDiscoveryProperties;
 
+	@Autowired
 	private NacosServiceManager nacosServiceManager;
 
-	public NacosServiceRegistry(NacosDiscoveryProperties nacosDiscoveryProperties,
-			NacosServiceManager nacosServiceManager) {
+	public NacosServiceRegistry(NacosDiscoveryProperties nacosDiscoveryProperties) {
 		this.nacosDiscoveryProperties = nacosDiscoveryProperties;
-		this.nacosServiceManager = nacosServiceManager;
 	}
 
 	@Override

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/event/NacosDiscoveryInfoChangedEvent.java
Patch:
@@ -23,9 +23,9 @@
 /**
  * @author yuhuangbin
  */
-public class NacosDiscoveryInfoInitializedEvent extends ApplicationEvent {
+public class NacosDiscoveryInfoChangedEvent extends ApplicationEvent {
 
-	public NacosDiscoveryInfoInitializedEvent(
+	public NacosDiscoveryInfoChangedEvent(
 			NacosDiscoveryProperties nacosDiscoveryProperties) {
 		super(nacosDiscoveryProperties);
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosConfigEndpointAutoConfiguration.java
Patch:
@@ -20,7 +20,7 @@
 import com.alibaba.cloud.nacos.refresh.NacosRefreshHistory;
 
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;
+import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnAvailableEndpoint;
 import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -44,7 +44,7 @@ public class NacosConfigEndpointAutoConfiguration {
 	private NacosRefreshHistory nacosRefreshHistory;
 
 	@ConditionalOnMissingBean
-	@ConditionalOnEnabledEndpoint
+	@ConditionalOnAvailableEndpoint
 	@Bean
 	public NacosConfigEndpoint nacosConfigEndpoint() {
 		return new NacosConfigEndpoint(nacosConfigManager.getNacosConfigProperties(),

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosDiscoveryEndpointAutoConfiguration.java
Patch:
@@ -23,7 +23,7 @@
 import com.alibaba.cloud.nacos.NacosServiceManager;
 import com.alibaba.cloud.nacos.discovery.actuate.health.NacosDiscoveryHealthIndicator;
 
-import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;
+import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnAvailableEndpoint;
 import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.actuate.health.HealthIndicator;
@@ -45,7 +45,7 @@ public class NacosDiscoveryEndpointAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnEnabledEndpoint
+	@ConditionalOnAvailableEndpoint
 	public NacosDiscoveryEndpoint nacosDiscoveryEndpoint(
 			NacosServiceManager nacosServiceManager,
 			NacosDiscoveryProperties nacosDiscoveryProperties) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/endpoint/SentinelEndpointAutoConfiguration.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.cloud.sentinel.SentinelProperties;
 
 import org.springframework.beans.factory.support.DefaultListableBeanFactory;
-import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;
+import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnAvailableEndpoint;
 import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -36,7 +36,7 @@ public class SentinelEndpointAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnEnabledEndpoint
+	@ConditionalOnAvailableEndpoint
 	public SentinelEndpoint sentinelEndPoint(SentinelProperties sentinelProperties) {
 		return new SentinelEndpoint(sentinelProperties);
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/actuate/DubboMetadataEndpointAutoConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.alibaba.cloud.dubbo.actuate.endpoint.DubboRestMetadataEndpoint;
 
-import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;
+import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnAvailableEndpoint;
 import org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -39,7 +39,7 @@ public class DubboMetadataEndpointAutoConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnEnabledEndpoint
+	@ConditionalOnAvailableEndpoint
 	public DubboRestMetadataEndpoint dubboRestMetadataEndpoint() {
 		return new DubboRestMetadataEndpoint();
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosServiceManager.java
Patch:
@@ -111,4 +111,7 @@ public void reBuildNacosService(Properties nacosProperties) {
 		namingMaintainService = createNamingMaintainService(nacosProperties);
 	}
 
+    public void nacosServiceShutDown() throws NacosException {
+	    this.namingService.shutDown();
+    }
 }

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -109,7 +109,7 @@ public void deregister(Registration registration) {
 	@Override
 	public void close() {
 		try {
-			namingService().shutDown();
+			nacosServiceManager.nacosServiceShutDown();
 		}
 		catch (NacosException e) {
 			log.error("Nacos namingService shutDown failed", e);

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-client-sample/src/main/java/com/alibaba/cloud/dubbo/bootstrap/DubboSpringCloudClientBootstrap.java
Patch:
@@ -17,7 +17,6 @@
 package com.alibaba.cloud.dubbo.bootstrap;
 
 import com.alibaba.cloud.dubbo.service.EchoService;
-
 import org.apache.dubbo.config.annotation.DubboReference;
 
 import org.springframework.boot.SpringApplication;
@@ -28,6 +27,8 @@
 
 /**
  * Dubbo Spring Cloud Client Bootstrap.
+ *
+ * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  */
 @EnableDiscoveryClient
 @EnableAutoConfiguration

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-consumer-sample/src/main/java/com/alibaba/cloud/dubbo/bootstrap/DubboSpringCloudConsumerBootstrap.java
Patch:
@@ -23,7 +23,6 @@
 import com.alibaba.cloud.dubbo.service.RestService;
 import com.alibaba.cloud.dubbo.service.User;
 import com.alibaba.cloud.dubbo.service.UserService;
-
 import org.apache.dubbo.config.annotation.DubboReference;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -53,6 +52,8 @@
 
 /**
  * Dubbo Spring Cloud Consumer Bootstrap.
+ *
+ * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  */
 @EnableDiscoveryClient
 @EnableAutoConfiguration

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-provider-sample/src/main/java/com/alibaba/cloud/dubbo/bootstrap/DubboSpringCloudProviderBootstrap.java
Patch:
@@ -23,6 +23,8 @@
 
 /**
  * Dubbo Spring Cloud Provider Bootstrap.
+ *
+ * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  */
 @EnableDiscoveryClient
 @EnableAutoConfiguration

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-provider-sample/src/main/java/com/alibaba/cloud/dubbo/service/StandardRestService.java
Patch:
@@ -31,7 +31,6 @@
 import javax.ws.rs.core.MediaType;
 
 import org.apache.dubbo.config.annotation.DubboService;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-provider-web-sample/src/main/java/com/alibaba/cloud/dubbo/bootstrap/DubboSpringCloudWebProviderBootstrap.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * Dubbo Spring Cloud Provider Bootstrap.
+ *
+ * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  */
 @EnableDiscoveryClient
 @EnableAutoConfiguration

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-provider-web-sample/src/main/java/com/alibaba/cloud/dubbo/service/SpringRestService.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Map;
 
 import org.apache.dubbo.config.annotation.DubboService;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-server-sample/src/main/java/com/alibaba/cloud/dubbo/bootstrap/DubboSpringCloudServerBootstrap.java
Patch:
@@ -17,7 +17,6 @@
 package com.alibaba.cloud.dubbo.bootstrap;
 
 import com.alibaba.cloud.dubbo.service.EchoService;
-
 import org.apache.dubbo.config.annotation.DubboService;
 
 import org.springframework.boot.SpringApplication;
@@ -26,6 +25,8 @@
 
 /**
  * Dubbo Spring Cloud Server Bootstrap.
+ *
+ * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  */
 @EnableDiscoveryClient
 @EnableAutoConfiguration

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-servlet-gateway-sample/src/main/java/com/alibaba/cloud/dubbo/bootstrap/DubboSpringCloudServletGatewayBootstrap.java
Patch:
@@ -24,6 +24,8 @@
 
 /**
  * Dubbo Spring Cloud Servlet Gateway Bootstrap.
+ *
+ * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  */
 @EnableDiscoveryClient
 @EnableAutoConfiguration

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-gateway/src/main/java/com/alibaba/cloud/sentinel/gateway/scg/SentinelSCGAutoConfiguration.java
Patch:
@@ -91,7 +91,8 @@ public SentinelSCGAutoConfiguration(
 	}
 
 	private void initAppType() {
-		System.setProperty(SentinelConfig.APP_TYPE_PROP_KEY, ConfigConstants.APP_TYPE_SCG_GATEWAY);
+		System.setProperty(SentinelConfig.APP_TYPE_PROP_KEY,
+				ConfigConstants.APP_TYPE_SCG_GATEWAY);
 	}
 
 	private void initFallback() {

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/DubboMetadataAutoConfiguration.java
Patch:
@@ -31,7 +31,6 @@
 import com.alibaba.cloud.dubbo.util.DubboMetadataUtils;
 import com.alibaba.cloud.dubbo.util.JSONUtils;
 import feign.Contract;
-
 import org.apache.dubbo.config.ProtocolConfig;
 import org.apache.dubbo.config.spring.ServiceBean;
 import org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent;

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/env/DubboCloudProperties.java
Patch:
@@ -90,4 +90,5 @@ public String getRegistryType() {
 	public void setRegistryType(String registryType) {
 		this.registryType = registryType;
 	}
+
 }

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/metadata/repository/DubboServiceMetadataRepository.java
Patch:
@@ -40,9 +40,7 @@
 import com.alibaba.cloud.dubbo.util.JSONUtils;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.type.TypeFactory;
-
 import org.apache.dubbo.common.URL;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/DubboGenericServiceFactory.java
Patch:
@@ -30,13 +30,11 @@
 
 import com.alibaba.cloud.dubbo.metadata.DubboRestServiceMetadata;
 import com.alibaba.cloud.dubbo.metadata.ServiceRestMetadata;
-
 import org.apache.dubbo.common.URL;
 import org.apache.dubbo.common.utils.CollectionUtils;
 import org.apache.dubbo.config.RegistryConfig;
 import org.apache.dubbo.config.spring.ReferenceBean;
 import org.apache.dubbo.rpc.service.GenericService;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinder.java
Patch:
@@ -169,8 +169,8 @@ else if (rocketMQTemplates.size() > 1) {
 					rocketMQTemplate, destination.getName(), producerGroup,
 					producerProperties.getExtension().getTransactional(),
 					instrumentationManager, producerProperties,
-					((AbstractMessageChannel) channel).getInterceptors().stream()
-							.filter(channelInterceptor -> channelInterceptor instanceof MessageConverterConfigurer.PartitioningInterceptor)
+					((AbstractMessageChannel) channel).getInterceptors().stream().filter(
+							channelInterceptor -> channelInterceptor instanceof MessageConverterConfigurer.PartitioningInterceptor)
 							.map(channelInterceptor -> ((MessageConverterConfigurer.PartitioningInterceptor) channelInterceptor))
 							.findFirst().orElse(null));
 			messageHandler.setBeanFactory(this.getApplicationContext().getBeanFactory());

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelAutoConfiguration.java
Patch:
@@ -78,9 +78,9 @@ private void init() {
 			System.setProperty(LogBase.LOG_NAME_USE_PID,
 					String.valueOf(properties.getLog().isSwitchPid()));
 		}
-		if (StringUtils.isEmpty(System.getProperty(SentinelConfig.getAppName()))
+		if (StringUtils.isEmpty(System.getProperty(SentinelConfig.APP_NAME_PROP_KEY))
 				&& StringUtils.hasText(projectName)) {
-			System.setProperty(SentinelConfig.getAppName(), projectName);
+			System.setProperty(SentinelConfig.APP_NAME_PROP_KEY, projectName);
 		}
 		if (StringUtils.isEmpty(System.getProperty(TransportConfig.SERVER_PORT))
 				&& StringUtils.hasText(properties.getTransport().getPort())) {

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/RedisDataSourceProperties.java
Patch:
@@ -93,7 +93,7 @@ public void preCheck(String dataSourceName) {
 					"RedisDataSource  channel can not be empty");
 		}
 
-		if (!StringUtils.isEmpty(masterId) && StringUtils.isEmpty(masterId)) {
+		if (StringUtils.isEmpty(masterId)) {
 			throw new IllegalArgumentException(
 					"RedisDataSource  sentinel model，masterId can not be empty");
 		}

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/RedisDataSourceProperties.java
Patch:
@@ -93,7 +93,7 @@ public void preCheck(String dataSourceName) {
 					"RedisDataSource  channel can not be empty");
 		}
 
-		if (!StringUtils.isEmpty(masterId) && StringUtils.isEmpty(masterId)) {
+		if (StringUtils.isEmpty(masterId)) {
 			throw new IllegalArgumentException(
 					"RedisDataSource  sentinel model，masterId can not be empty");
 		}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosWatch.java
Patch:
@@ -74,7 +74,7 @@ public NacosWatch(NacosDiscoveryProperties properties,
 
 	private static ThreadPoolTaskScheduler getTaskScheduler() {
 		ThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();
-		taskScheduler.setBeanName("Nacso-Watch-Task-Scheduler");
+		taskScheduler.setBeanName("Nacos-Watch-Task-Scheduler");
 		taskScheduler.initialize();
 		return taskScheduler;
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.Properties;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
@@ -487,8 +486,7 @@ private void compatibleSharedConfigs(List<Config> configList) {
 		List<Config> result = new ArrayList<>();
 		configList.stream()
 				.collect(Collectors.groupingBy(cfg -> (cfg.getGroup() + cfg.getDataId()),
-						() -> new ConcurrentHashMap<>(new LinkedHashMap<>()),
-						Collectors.toList()))
+						LinkedHashMap::new, Collectors.toList()))
 				.forEach((key, list) -> {
 					list.stream()
 							.reduce((a, b) -> new Config(a.getDataId(), a.getGroup(),

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosWatch.java
Patch:
@@ -74,7 +74,7 @@ public NacosWatch(NacosDiscoveryProperties properties,
 
 	private static ThreadPoolTaskScheduler getTaskScheduler() {
 		ThreadPoolTaskScheduler taskScheduler = new ThreadPoolTaskScheduler();
-		taskScheduler.setBeanName("Nacso-Watch-Task-Scheduler");
+		taskScheduler.setBeanName("Nacos-Watch-Task-Scheduler");
 		taskScheduler.initialize();
 		return taskScheduler;
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosServiceDiscovery.java
Patch:
@@ -95,6 +95,7 @@ public static ServiceInstance hostToServiceInstance(Instance instance,
 		if (instance.getMetadata() != null) {
 			metadata.putAll(instance.getMetadata());
 		}
+		metadata.put("nacos.ephemeral",String.valueOf(instance.isEphemeral()));
 		nacosServiceInstance.setMetadata(metadata);
 
 		if (metadata.containsKey("secure")) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -161,7 +161,7 @@ private Instance getNacosInstanceFromRegistration(Registration registration) {
 		instance.setClusterName(nacosDiscoveryProperties.getClusterName());
 		instance.setEnabled(nacosDiscoveryProperties.isInstanceEnabled());
 		instance.setMetadata(registration.getMetadata());
-
+		instance.setEphemeral(nacosDiscoveryProperties.isEphemeral());
 		return instance;
 	}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosServiceDiscovery.java
Patch:
@@ -96,7 +96,6 @@ public static ServiceInstance hostToServiceInstance(Instance instance,
 			metadata.putAll(instance.getMetadata());
 		}
 		metadata.put("nacos.ephemeral",String.valueOf(instance.isEphemeral()));
-		metadata.putAll(instance.getMetadata());
 		nacosServiceInstance.setMetadata(metadata);
 
 		if (metadata.containsKey("secure")) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosServiceDiscovery.java
Patch:
@@ -92,7 +92,9 @@ public static ServiceInstance hostToServiceInstance(Instance instance,
 		metadata.put("nacos.weight", instance.getWeight() + "");
 		metadata.put("nacos.healthy", instance.isHealthy() + "");
 		metadata.put("nacos.cluster", instance.getClusterName() + "");
-		metadata.putAll(instance.getMetadata());
+		if (instance.getMetadata() != null) {
+			metadata.putAll(instance.getMetadata());
+		}
 		nacosServiceInstance.setMetadata(metadata);
 
 		if (metadata.containsKey("secure")) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosServiceDiscovery.java
Patch:
@@ -17,7 +17,6 @@
 package com.alibaba.cloud.nacos.discovery;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -93,7 +92,9 @@ public static ServiceInstance hostToServiceInstance(Instance instance,
 		metadata.put("nacos.weight", instance.getWeight() + "");
 		metadata.put("nacos.healthy", instance.isHealthy() + "");
 		metadata.put("nacos.cluster", instance.getClusterName() + "");
-		metadata.putAll(instance.getMetadata() != null ? instance.getMetadata() : Collections.emptyMap());
+		if (instance.getMetadata() != null) {
+			metadata.putAll(instance.getMetadata());
+		}
 		nacosServiceInstance.setMetadata(metadata);
 
 		if (metadata.containsKey("secure")) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/test/java/com/alibaba/cloud/nacos/NacosConfigurationNoSuffixTest.java
Patch:
@@ -51,7 +51,7 @@
 
 @RunWith(PowerMockRunner.class)
 @PowerMockIgnore({ "javax.management.*", "javax.xml.parsers.*",
-		"com.sun.org.apache.xerces.internal.jaxp.*" })
+		"com.sun.org.apache.xerces.internal.jaxp.*", "org.w3c.dom.*" })
 @PowerMockRunnerDelegate(SpringRunner.class)
 @PrepareForTest({ NacosConfigService.class })
 @SpringBootTest(classes = NacosConfigurationNoSuffixTest.TestConfig.class, properties = {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosServiceDiscovery.java
Patch:
@@ -17,6 +17,7 @@
 package com.alibaba.cloud.nacos.discovery;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -92,7 +93,7 @@ public static ServiceInstance hostToServiceInstance(Instance instance,
 		metadata.put("nacos.weight", instance.getWeight() + "");
 		metadata.put("nacos.healthy", instance.isHealthy() + "");
 		metadata.put("nacos.cluster", instance.getClusterName() + "");
-		metadata.putAll(instance.getMetadata());
+		metadata.putAll(instance.getMetadata() != null ? instance.getMetadata() : Collections.emptyMap());
 		nacosServiceInstance.setMetadata(metadata);
 
 		if (metadata.containsKey("secure")) {

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/sentinel-feign-consumer-example/src/main/java/com/alibaba/cloud/examples/fallback/EchoServiceFallback.java
Patch:
@@ -20,7 +20,6 @@
 
 /**
  * @author lengleng
- * @date 2019-08-01
  * <p>
  * sentinel 降级处理
  */
@@ -35,7 +34,7 @@ public class EchoServiceFallback implements EchoService {
 	/**
 	 * 调用服务提供方的输出接口.
 	 * @param str 用户输入
-	 * @return
+	 * @return String
 	 */
 	@Override
 	public String echo(String str) {

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/sentinel-feign-consumer-example/src/main/java/com/alibaba/cloud/examples/fallback/EchoServiceFallbackFactory.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * @author lengleng
- * @date 2019-08-01
  */
 @Component
 public class EchoServiceFallbackFactory implements FallbackFactory<EchoServiceFallback> {

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/sentinel-feign-consumer-example/src/main/java/com/alibaba/cloud/examples/service/EchoService.java
Patch:
@@ -24,7 +24,6 @@
 
 /**
  * @author lengleng
- * @date 2019-08-01
  * <p>
  * example feign client
  */

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/sentinel-feign-provider-example/src/main/java/com/alibaba/cloud/examples/controller/EchoController.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * @author lengleng
- * @date 2019-08-01
  */
 @RestController
 public class EchoController {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/client/NacosPropertySourceBuilder.java
Patch:
@@ -24,7 +24,6 @@
 import com.alibaba.cloud.nacos.parser.NacosDataParserHandler;
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.nacos.api.exception.NacosException;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -99,10 +98,10 @@ private List<PropertySource<?>> loadNacosData(String dataId, String group,
 					fileExtension);
 		}
 		catch (NacosException e) {
-			log.error("get data from Nacos error,dataId:{}, ", dataId, e);
+			log.error("get data from Nacos error,dataId:{} ", dataId, e);
 		}
 		catch (Exception e) {
-			log.error("parse data from Nacos error,dataId:{},data:{},", dataId, data, e);
+			log.error("parse data from Nacos error,dataId:{},data:{}", dataId, data, e);
 		}
 		return Collections.emptyList();
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/parser/NacosByteArrayResource.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.core.io.ByteArrayResource;
 
 /**
- * Nacos-specific resource
+ * Nacos-specific resource.
  *
  * @author zkz
  */

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/test/java/com/alibaba/cloud/nacos/NacosConfigurationNoSuffixTest.java
Patch:
@@ -50,7 +50,8 @@
  */
 
 @RunWith(PowerMockRunner.class)
-@PowerMockIgnore("javax.management.*")
+@PowerMockIgnore({ "javax.management.*", "javax.xml.parsers.*",
+		"com.sun.org.apache.xerces.internal.jaxp.*" })
 @PowerMockRunnerDelegate(SpringRunner.class)
 @PrepareForTest({ NacosConfigService.class })
 @SpringBootTest(classes = NacosConfigurationNoSuffixTest.TestConfig.class, properties = {

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/http/matcher/AbstractHttpRequestMatcher.java
Patch:
@@ -40,6 +40,7 @@ public abstract class AbstractHttpRequestMatcher implements HttpRequestMatcher {
 	 * <p>
 	 * For example {@code " || "} for URL patterns or {@code " && "} for param
 	 * expressions.
+	 * @return str
 	 */
 	protected abstract String getToStringInfix();
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinder.java
Patch:
@@ -169,8 +169,8 @@ else if (rocketMQTemplates.size() > 1) {
 					rocketMQTemplate, destination.getName(), producerGroup,
 					producerProperties.getExtension().getTransactional(),
 					instrumentationManager, producerProperties,
-					((AbstractMessageChannel) channel).getInterceptors().stream()
-							.filter(channelInterceptor -> channelInterceptor instanceof MessageConverterConfigurer.PartitioningInterceptor)
+					((AbstractMessageChannel) channel).getInterceptors().stream().filter(
+							channelInterceptor -> channelInterceptor instanceof MessageConverterConfigurer.PartitioningInterceptor)
 							.map(channelInterceptor -> ((MessageConverterConfigurer.PartitioningInterceptor) channelInterceptor))
 							.findFirst().orElse(null));
 			messageHandler.setBeanFactory(this.getApplicationContext().getBeanFactory());

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosServiceDiscovery.java
Patch:
@@ -92,6 +92,7 @@ public static ServiceInstance hostToServiceInstance(Instance instance,
 		metadata.put("nacos.weight", instance.getWeight() + "");
 		metadata.put("nacos.healthy", instance.isHealthy() + "");
 		metadata.put("nacos.cluster", instance.getClusterName() + "");
+		metadata.put("nacos.ephemeral",String.valueOf(instance.isEphemeral()));
 		metadata.putAll(instance.getMetadata());
 		nacosServiceInstance.setMetadata(metadata);
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -161,7 +161,7 @@ private Instance getNacosInstanceFromRegistration(Registration registration) {
 		instance.setClusterName(nacosDiscoveryProperties.getClusterName());
 		instance.setEnabled(nacosDiscoveryProperties.isInstanceEnabled());
 		instance.setMetadata(registration.getMetadata());
-
+		instance.setEphemeral(nacosDiscoveryProperties.isEphemeral());
 		return instance;
 	}
 

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.Map;
 import java.util.Objects;
 import java.util.Properties;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import java.util.stream.Collectors;
@@ -487,8 +486,7 @@ private void compatibleSharedConfigs(List<Config> configList) {
 		List<Config> result = new ArrayList<>();
 		configList.stream()
 				.collect(Collectors.groupingBy(cfg -> (cfg.getGroup() + cfg.getDataId()),
-						() -> new ConcurrentHashMap<>(new LinkedHashMap<>()),
-						Collectors.toList()))
+						LinkedHashMap::new, Collectors.toList()))
 				.forEach((key, list) -> {
 					list.stream()
 							.reduce((a, b) -> new Config(a.getDataId(), a.getGroup(),

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/ribbon/NacosRule.java
Patch:
@@ -51,12 +51,13 @@ public class NacosRule extends AbstractLoadBalancerRule {
 	public Server choose(Object key) {
 		try {
 			String clusterName = this.nacosDiscoveryProperties.getClusterName();
+			String group = this.nacosDiscoveryProperties.getGroup();
 			DynamicServerListLoadBalancer loadBalancer = (DynamicServerListLoadBalancer) getLoadBalancer();
 			String name = loadBalancer.getName();
 
 			NamingService namingService = nacosDiscoveryProperties
 					.namingServiceInstance();
-			List<Instance> instances = namingService.selectInstances(name, true);
+			List<Instance> instances = namingService.selectInstances(name, group, true);
 			if (CollectionUtils.isEmpty(instances)) {
 				LOGGER.warn("no instance in service {}", name);
 				return null;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -159,6 +159,7 @@ private Instance getNacosInstanceFromRegistration(Registration registration) {
 		instance.setPort(registration.getPort());
 		instance.setWeight(nacosDiscoveryProperties.getWeight());
 		instance.setClusterName(nacosDiscoveryProperties.getClusterName());
+		instance.setEnabled(nacosDiscoveryProperties.isInstanceEnabled());
 		instance.setMetadata(registration.getMetadata());
 
 		return instance;

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/metadata/DubboProtocolConfigSupplier.java
Patch:
@@ -65,7 +65,6 @@ public ProtocolConfig get() {
 		if (protocolConfig == null) {
 			protocolConfig = new ProtocolConfig();
 			protocolConfig.setName(DEFAULT_PROTOCOL);
-			protocolConfig.setPort(-1);
 		}
 
 		return protocolConfig;

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/web/SeataHandlerInterceptor.java
Patch:
@@ -58,6 +58,7 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons
         return true;
     }
 
+
     @Override
     public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception e) {
         if (StringUtils.isNotBlank(RootContext.getXID())) {

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-seata/src/main/java/com/alibaba/cloud/seata/web/SeataHandlerInterceptor.java
Patch:
@@ -39,10 +39,10 @@ public class SeataHandlerInterceptor implements HandlerInterceptor {
 
 	private static final Logger log = LoggerFactory
 			.getLogger(SeataHandlerInterceptor.class);
-	
-	public static final String BIND_XID = "BIND_XID";
 
-	public static final String UNBIND_XID = "UNBIND_XID";
+    private static final String BIND_XID = "BIND_XID";
+
+    private static final String UNBIND_XID = "UNBIND_XID";
 
 	@Override
 	public boolean preHandle(HttpServletRequest request, HttpServletResponse response,

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/condition/MissingSpringCloudRegistryConfigPropertyCondition.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.util.StringUtils;
 
 import static com.alibaba.cloud.dubbo.registry.SpringCloudRegistryFactory.PROTOCOL;
-import static org.apache.dubbo.config.spring.util.PropertySourcesUtils.getPrefixedProperties;
+import static com.alibaba.spring.util.PropertySourcesUtils.getSubProperties;
 
 /**
  * Missing {@link SpringCloudRegistry} Property {@link Condition}.
@@ -61,7 +61,7 @@ public ConditionOutcome getMatchOutcome(ConditionContext context,
 					"'spring-cloud' protocol was found from 'dubbo.registry.address'");
 		}
 
-		Map<String, Object> properties = getPrefixedProperties(
+		Map<String, Object> properties = getSubProperties(
 				environment.getPropertySources(), "dubbo.registries.");
 
 		boolean found = properties.entrySet().stream().anyMatch(entry -> {

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/env/DubboNonWebApplicationEnvironmentPostProcessor.java
Patch:
@@ -34,8 +34,8 @@
 import org.springframework.util.CollectionUtils;
 import org.springframework.util.StringUtils;
 
+import static com.alibaba.spring.util.PropertySourcesUtils.getSubProperties;
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_PROTOCOL;
-import static org.apache.dubbo.config.spring.util.PropertySourcesUtils.getPrefixedProperties;
 
 /**
  * Dubbo {@link WebApplicationType#NONE Non-Web Application}
@@ -149,7 +149,7 @@ private String getRestPortFromProtocolsProperties(
 
 		String restPort = null;
 
-		Map<String, Object> subProperties = getPrefixedProperties(
+		Map<String, Object> subProperties = getSubProperties(
 				environment.getPropertySources(), PROTOCOLS_PROPERTY_NAME_PREFIX);
 
 		Properties properties = new Properties();

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/ConsulDataSourceProperties.java
Patch:
@@ -17,6 +17,7 @@
 package com.alibaba.cloud.sentinel.datasource.config;
 
 import com.alibaba.cloud.sentinel.datasource.factorybean.ConsulDataSourceFactoryBean;
+
 import org.springframework.util.StringUtils;
 
 /**
@@ -32,12 +33,12 @@ public ConsulDataSourceProperties(){
     }
 
     /**
-     * consul server host
+     * consul server host.
      */
     private String host;
 
     /**
-     * consul server port
+     * consul server port.
      */
     private int port=8500;
 

File: spring-cloud-alibaba-starters/spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/factorybean/ConsulDataSourceFactoryBean.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.alibaba.csp.sentinel.datasource.Converter;
 import com.alibaba.csp.sentinel.datasource.consul.ConsulDataSource;
+
 import org.springframework.beans.factory.FactoryBean;
 
 /**

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/condition/MissingSpringCloudRegistryConfigPropertyCondition.java
Patch:
@@ -29,7 +29,7 @@
 import org.springframework.util.StringUtils;
 
 import static com.alibaba.cloud.dubbo.registry.SpringCloudRegistryFactory.PROTOCOL;
-import static org.apache.dubbo.config.spring.util.PropertySourcesUtils.getPrefixedProperties;
+import static com.alibaba.spring.util.PropertySourcesUtils.getSubProperties;
 
 /**
  * Missing {@link SpringCloudRegistry} Property {@link Condition}.
@@ -61,7 +61,7 @@ public ConditionOutcome getMatchOutcome(ConditionContext context,
 					"'spring-cloud' protocol was found from 'dubbo.registry.address'");
 		}
 
-		Map<String, Object> properties = getPrefixedProperties(
+		Map<String, Object> properties = getSubProperties(
 				environment.getPropertySources(), "dubbo.registries.");
 
 		boolean found = properties.entrySet().stream().anyMatch(entry -> {

File: spring-cloud-alibaba-starters/spring-cloud-starter-dubbo/src/main/java/com/alibaba/cloud/dubbo/env/DubboNonWebApplicationEnvironmentPostProcessor.java
Patch:
@@ -35,7 +35,7 @@
 import org.springframework.util.StringUtils;
 
 import static org.apache.dubbo.common.constants.CommonConstants.DEFAULT_PROTOCOL;
-import static org.apache.dubbo.config.spring.util.PropertySourcesUtils.getPrefixedProperties;
+import static com.alibaba.spring.util.PropertySourcesUtils.getSubProperties;
 
 /**
  * Dubbo {@link WebApplicationType#NONE Non-Web Application}
@@ -149,7 +149,7 @@ private String getRestPortFromProtocolsProperties(
 
 		String restPort = null;
 
-		Map<String, Object> subProperties = getPrefixedProperties(
+		Map<String, Object> subProperties = getSubProperties(
 				environment.getPropertySources(), PROTOCOLS_PROPERTY_NAME_PREFIX);
 
 		Properties properties = new Properties();

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosConfigEndpointAutoConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;
+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
@@ -52,8 +53,7 @@ public NacosConfigEndpoint nacosConfigEndpoint() {
 
 	@Bean
 	@ConditionalOnMissingBean
-	@ConditionalOnProperty(name = "spring.cloud.nacos.config.health.enabled",
-			matchIfMissing = true)
+	@ConditionalOnEnabledHealthIndicator("nacos-config")
 	public NacosConfigHealthIndicator nacosConfigHealthIndicator() {
 		return new NacosConfigHealthIndicator(nacosConfigManager.getConfigService());
 	}

File: spring-cloud-alibaba-starters/spring-cloud-starter-alibaba-sidecar/src/main/java/com/alibaba/cloud/sidecar/SidecarAutoConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.alibaba.cloud.sidecar;
 
+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.context.annotation.Bean;
@@ -37,6 +38,7 @@ public RestTemplate restTemplate() {
 	}
 
 	@Bean
+	@ConditionalOnEnabledHealthIndicator("sidecar")
 	public SidecarHealthIndicator sidecarHealthIndicator(
 			SidecarProperties sidecarProperties, RestTemplate restTemplate) {
 		return new SidecarHealthIndicator(sidecarProperties, restTemplate);

File: spring-cloud-alibaba-starters/spring-cloud-starter-stream-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/config/RocketMQBinderHealthIndicatorAutoConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 
 import com.alibaba.cloud.stream.binder.rocketmq.actuator.RocketMQBinderHealthIndicator;
 
+import org.springframework.boot.actuate.autoconfigure.health.ConditionalOnEnabledHealthIndicator;
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.context.annotation.Bean;
@@ -31,6 +32,7 @@
 public class RocketMQBinderHealthIndicatorAutoConfiguration {
 
 	@Bean
+	@ConditionalOnEnabledHealthIndicator("rocketmq")
 	public RocketMQBinderHealthIndicator rocketBinderHealthIndicator() {
 		return new RocketMQBinderHealthIndicator();
 	}

File: spring-cloud-alibaba-sentinel-gateway/src/main/java/com/alibaba/cloud/sentinel/gateway/zuul/SentinelZuulProperties.java
Patch:
@@ -32,7 +32,7 @@
 public class SentinelZuulProperties {
 
 	@NestedConfigurationProperty
-	private SentinelZuulProperties.Order order;
+	private SentinelZuulProperties.Order order = new SentinelZuulProperties.Order();
 
 	public Order getOrder() {
 		return order;

File: spring-cloud-alibaba-sentinel-gateway/src/main/java/com/alibaba/cloud/sentinel/gateway/zuul/SentinelZuulProperties.java
Patch:
@@ -32,7 +32,7 @@
 public class SentinelZuulProperties {
 
 	@NestedConfigurationProperty
-	private SentinelZuulProperties.Order order;
+	private SentinelZuulProperties.Order order = new SentinelZuulProperties.Order();
 
 	public Order getOrder() {
 		return order;

File: spring-cloud-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/SentinelProperties.java
Patch:
@@ -343,9 +343,9 @@ public static class Filter {
 		private int order = Ordered.HIGHEST_PRECEDENCE;
 
 		/**
-		 * URL pattern for SentinelWebInterceptor, default is /*.
+		 * URL pattern for SentinelWebInterceptor, default is /**.
 		 */
-		private List<String> urlPatterns = Arrays.asList("/*");
+		private List<String> urlPatterns = Arrays.asList("/**");
 
 		/**
 		 * Enable to instance

File: spring-cloud-alibaba-sentinel/src/test/java/com/alibaba/cloud/sentinel/SentinelBeanAutowiredTests.java
Patch:
@@ -74,7 +74,7 @@ private void checkUrlPattern() {
 		assertThat(sentinelProperties.getFilter().getOrder()).isEqualTo(111);
 		assertThat(sentinelProperties.getFilter().getUrlPatterns().size()).isEqualTo(1);
 		assertThat(sentinelProperties.getFilter().getUrlPatterns().get(0))
-				.isEqualTo("/*");
+				.isEqualTo("/**");
 	}
 
 	@Test

File: spring-cloud-alibaba-sentinel/src/test/java/com/alibaba/cloud/sentinel/SentinelDataSourceTests.java
Patch:
@@ -70,7 +70,7 @@ private void checkUrlPattern() {
 				.isEqualTo(Integer.MIN_VALUE);
 		assertThat(sentinelProperties.getFilter().getUrlPatterns().size()).isEqualTo(1);
 		assertThat(sentinelProperties.getFilter().getUrlPatterns().get(0))
-				.isEqualTo("/*");
+				.isEqualTo("/**");
 	}
 
 	@Test

File: spring-cloud-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/SentinelProperties.java
Patch:
@@ -343,9 +343,9 @@ public static class Filter {
 		private int order = Ordered.HIGHEST_PRECEDENCE;
 
 		/**
-		 * URL pattern for SentinelWebInterceptor, default is /*.
+		 * URL pattern for SentinelWebInterceptor, default is /**.
 		 */
-		private List<String> urlPatterns = Arrays.asList("/*");
+		private List<String> urlPatterns = Arrays.asList("/**");
 
 		/**
 		 * Enable to instance

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/DubboServiceDiscoveryAutoConfiguration.java
Patch:
@@ -118,7 +118,7 @@ public class DubboServiceDiscoveryAutoConfiguration {
 	/**
 	 * NacosDiscoveryAutoConfiguration.
 	 */
-	public static final String NACOS_DISCOVERY_AUTO_CONFIGURATION_CLASS_NAME = "com.alibaba.cloud.nacos.NacosDiscoveryAutoConfiguration";
+	public static final String NACOS_DISCOVERY_AUTO_CONFIGURATION_CLASS_NAME = "com.alibaba.cloud.nacos.discovery.NacosDiscoveryAutoConfiguration";
 
 	private final DubboServiceMetadataRepository dubboServiceMetadataRepository;
 

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java
Patch:
@@ -32,6 +32,8 @@
 
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.spring.util.PropertySourcesUtils;
+
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -88,6 +90,7 @@ public class NacosConfigProperties {
 			.getLogger(NacosConfigProperties.class);
 
 	@Autowired
+    @JsonIgnore
 	private Environment environment;
 
 	@PostConstruct

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/client/NacosPropertySource.java
Patch:
@@ -19,6 +19,8 @@
 import java.util.Date;
 import java.util.Map;
 
+import com.alibaba.cloud.nacos.NacosConfigProperties;
+
 import org.springframework.core.env.MapPropertySource;
 
 /**
@@ -49,7 +51,7 @@ public class NacosPropertySource extends MapPropertySource {
 
 	NacosPropertySource(String group, String dataId, Map<String, Object> source,
 			Date timestamp, boolean isRefreshable) {
-		super(dataId, source);
+		super(String.join(NacosConfigProperties.COMMAS, dataId, group), source);
 		this.group = group;
 		this.dataId = dataId;
 		this.timestamp = timestamp;

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosPropertySourceRepository.java
Patch:
@@ -76,7 +76,8 @@ public static NacosPropertySource getNacosPropertySource(String dataId,
 	}
 
 	public static String getMapKey(String dataId, String group) {
-		return String.format("%s$%s", String.valueOf(dataId), String.valueOf(group));
+		return String.join(NacosConfigProperties.COMMAS, String.valueOf(dataId),
+				String.valueOf(group));
 	}
 
 }

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/client/NacosPropertySource.java
Patch:
@@ -19,6 +19,8 @@
 import java.util.Date;
 import java.util.Map;
 
+import com.alibaba.cloud.nacos.NacosConfigProperties;
+
 import org.springframework.core.env.MapPropertySource;
 
 /**
@@ -49,7 +51,7 @@ public class NacosPropertySource extends MapPropertySource {
 
 	NacosPropertySource(String group, String dataId, Map<String, Object> source,
 			Date timestamp, boolean isRefreshable) {
-		super(String.format("%s#%s", dataId, group), source);
+		super(String.join(NacosConfigProperties.COMMAS, dataId, group), source);
 		this.group = group;
 		this.dataId = dataId;
 		this.timestamp = timestamp;

File: spring-cloud-stream-binder-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinder.java
Patch:
@@ -144,7 +144,8 @@ else if (rocketMQTemplates.size() > 1) {
 					producer.setVipChannelEnabled(
 							producerProperties.getExtension().getVipChannelEnabled());
 				}
-				producer.setNamesrvAddr(mergedProperties.getNameServer());
+				producer.setNamesrvAddr(RocketMQBinderUtils
+						.getNameServerStr(mergedProperties.getNameServer()));
 				producer.setSendMsgTimeout(
 						producerProperties.getExtension().getSendMessageTimeout());
 				producer.setRetryTimesWhenSendFailed(

File: spring-cloud-stream-binder-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/RocketMQMessageSource.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Set;
 
+import com.alibaba.cloud.stream.binder.rocketmq.RocketMQBinderUtils;
 import com.alibaba.cloud.stream.binder.rocketmq.consuming.RocketMQMessageQueueChooser;
 import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQBinderConfigurationProperties;
 import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties;
@@ -103,8 +104,8 @@ public synchronized void start() {
 		}
 		try {
 			consumer = new DefaultMQPullConsumer(group);
-			consumer.setNamesrvAddr(
-					rocketMQBinderConfigurationProperties.getNameServer());
+			consumer.setNamesrvAddr(RocketMQBinderUtils.getNameServerStr(
+					rocketMQBinderConfigurationProperties.getNameServer()));
 			consumer.setConsumerPullTimeoutMillis(
 					rocketMQConsumerProperties.getExtension().getPullTimeout());
 			consumer.setMessageModel(MessageModel.CLUSTERING);

File: spring-cloud-stream-binder-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQBinderUtils.java
Patch:
@@ -42,7 +42,7 @@ public static RocketMQBinderConfigurationProperties mergeProperties(
 			result.setNameServer(rocketBinderConfigurationProperties.getNameServer());
 		}
 		else {
-			result.setNameServer(Arrays.asList(rocketMQProperties.getNameServer()));
+			result.setNameServer(Arrays.asList(rocketMQProperties.getNameServer().split(";")));
 		}
 		if (rocketMQProperties.getProducer() == null
 				|| StringUtils.isEmpty(rocketMQProperties.getProducer().getAccessKey())) {

File: spring-cloud-alibaba-examples/seata-example/account-service/src/main/java/com/alibaba/cloud/examples/AccountController.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.Random;
 
 import io.seata.core.context.RootContext;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: spring-cloud-alibaba-examples/seata-example/account-service/src/main/java/com/alibaba/cloud/examples/AccountController.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Random;
 
 import io.seata.core.context.RootContext;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: spring-cloud-alibaba-examples/seata-example/business-service/src/main/java/com/alibaba/cloud/examples/HomeController.java
Patch:
@@ -20,8 +20,10 @@
 import com.alibaba.cloud.examples.BusinessApplication.StorageService;
 
 import io.seata.spring.annotation.GlobalTransactional;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.MediaType;
@@ -121,4 +123,4 @@ public String feign() {
 
 	}
 
-}
+}
\ No newline at end of file

File: spring-cloud-alibaba-examples/seata-example/business-service/src/main/java/com/alibaba/cloud/examples/HomeController.java
Patch:
@@ -18,13 +18,12 @@
 
 import com.alibaba.cloud.examples.BusinessApplication.OrderService;
 import com.alibaba.cloud.examples.BusinessApplication.StorageService;
+
 import io.seata.spring.annotation.GlobalTransactional;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-
 import org.springframework.http.HttpEntity;
 import org.springframework.http.HttpHeaders;
-import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.util.LinkedMultiValueMap;

File: spring-cloud-stream-binder-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinder.java
Patch:
@@ -144,7 +144,8 @@ else if (rocketMQTemplates.size() > 1) {
 					producer.setVipChannelEnabled(
 							producerProperties.getExtension().getVipChannelEnabled());
 				}
-				producer.setNamesrvAddr(mergedProperties.getNameServer());
+				producer.setNamesrvAddr(RocketMQBinderUtils
+						.getNameServerStr(mergedProperties.getNameServer()));
 				producer.setSendMsgTimeout(
 						producerProperties.getExtension().getSendMessageTimeout());
 				producer.setRetryTimesWhenSendFailed(

File: spring-cloud-stream-binder-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/RocketMQMessageSource.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 import java.util.Set;
 
+import com.alibaba.cloud.stream.binder.rocketmq.RocketMQBinderUtils;
 import com.alibaba.cloud.stream.binder.rocketmq.consuming.RocketMQMessageQueueChooser;
 import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQBinderConfigurationProperties;
 import com.alibaba.cloud.stream.binder.rocketmq.properties.RocketMQConsumerProperties;
@@ -103,8 +104,8 @@ public synchronized void start() {
 		}
 		try {
 			consumer = new DefaultMQPullConsumer(group);
-			consumer.setNamesrvAddr(
-					rocketMQBinderConfigurationProperties.getNameServer());
+			consumer.setNamesrvAddr(RocketMQBinderUtils.getNameServerStr(
+					rocketMQBinderConfigurationProperties.getNameServer()));
 			consumer.setConsumerPullTimeoutMillis(
 					rocketMQConsumerProperties.getExtension().getPullTimeout());
 			consumer.setMessageModel(MessageModel.CLUSTERING);

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/client/NacosPropertySource.java
Patch:
@@ -49,7 +49,7 @@ public class NacosPropertySource extends MapPropertySource {
 
 	NacosPropertySource(String group, String dataId, Map<String, Object> source,
 			Date timestamp, boolean isRefreshable) {
-		super(dataId, source);
+		super(String.format("%s#%s", dataId, group), source);
 		this.group = group;
 		this.dataId = dataId;
 		this.timestamp = timestamp;

File: spring-cloud-alibaba-seata/src/main/java/com/alibaba/cloud/seata/feign/SeataBeanPostProcessor.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * @author xiaojing
  */
-final class SeataBeanPostProcessor implements BeanPostProcessor {
+public class SeataBeanPostProcessor implements BeanPostProcessor {
 
 	private final SeataFeignObjectWrapper seataFeignObjectWrapper;
 

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java
Patch:
@@ -81,7 +81,7 @@ private void overrideFromEnv() {
 					.resolvePlaceholders("${spring.cloud.nacos.config.server-addr:}");
 			if (StringUtils.isEmpty(serverAddr)) {
 				serverAddr = environment
-						.resolvePlaceholders("${spring.cloud.nacos.server-addr:}");
+						.resolvePlaceholders("${spring.cloud.nacos.server-addr:localhost:8848}");
 			}
 			this.setServerAddr(serverAddr);
 		}

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosDiscoveryProperties.java
Patch:
@@ -431,7 +431,7 @@ public void overrideFromEnv(Environment env) {
 					.resolvePlaceholders("${spring.cloud.nacos.discovery.server-addr:}");
 			if (StringUtils.isEmpty(serverAddr)) {
 				serverAddr = env
-						.resolvePlaceholders("${spring.cloud.nacos.server-addr:}");
+						.resolvePlaceholders("${spring.cloud.nacos.server-addr:localhost:8848}");
 			}
 			this.setServerAddr(serverAddr);
 		}

File: spring-cloud-circuitbreaker-sentinel/src/main/java/com/alibaba/cloud/circuitbreaker/sentinel/ReactiveSentinelCircuitBreakerAutoConfiguration.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.client.circuitbreaker.Customizer;
 import org.springframework.cloud.client.circuitbreaker.ReactiveCircuitBreakerFactory;
 import org.springframework.context.annotation.Bean;
@@ -35,6 +36,8 @@
 @Configuration
 @ConditionalOnClass(
 		name = { "reactor.core.publisher.Mono", "reactor.core.publisher.Flux" })
+@ConditionalOnProperty(name = "spring.cloud.circuitbreaker.sentinel.enabled",
+		havingValue = "true", matchIfMissing = true)
 public class ReactiveSentinelCircuitBreakerAutoConfiguration {
 
 	@Bean

File: spring-cloud-circuitbreaker-sentinel/src/main/java/com/alibaba/cloud/circuitbreaker/sentinel/SentinelCircuitBreakerAutoConfiguration.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
 import org.springframework.cloud.client.circuitbreaker.Customizer;
 import org.springframework.context.annotation.Bean;
@@ -38,6 +39,8 @@
  */
 @Configuration
 @ConditionalOnClass({ SphU.class })
+@ConditionalOnProperty(name = "spring.cloud.circuitbreaker.sentinel.enabled",
+		havingValue = "true", matchIfMissing = true)
 public class SentinelCircuitBreakerAutoConfiguration {
 
 	@Bean

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigProperties.java
Patch:
@@ -80,7 +80,7 @@ private void overrideFromEnv() {
 					.resolvePlaceholders("${spring.cloud.nacos.config.server-addr:}");
 			if (StringUtils.isEmpty(serverAddr)) {
 				serverAddr = environment
-						.resolvePlaceholders("${spring.cloud.nacos.server-addr:}");
+						.resolvePlaceholders("${spring.cloud.nacos.server-addr:localhost:8848}");
 			}
 			this.setServerAddr(serverAddr);
 		}

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosDiscoveryProperties.java
Patch:
@@ -431,7 +431,7 @@ public void overrideFromEnv(Environment env) {
 					.resolvePlaceholders("${spring.cloud.nacos.discovery.server-addr:}");
 			if (StringUtils.isEmpty(serverAddr)) {
 				serverAddr = env
-						.resolvePlaceholders("${spring.cloud.nacos.server-addr:}");
+						.resolvePlaceholders("${spring.cloud.nacos.server-addr:localhost:8848}");
 			}
 			this.setServerAddr(serverAddr);
 		}

File: spring-cloud-alibaba-seata/src/main/java/com/alibaba/cloud/seata/feign/SeataBeanPostProcessor.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * @author xiaojing
  */
-final class SeataBeanPostProcessor implements BeanPostProcessor {
+public class SeataBeanPostProcessor implements BeanPostProcessor {
 
 	private final SeataFeignObjectWrapper seataFeignObjectWrapper;
 

File: spring-cloud-alibaba-dubbo/src/test/java/com/alibaba/cloud/dubbo/autoconfigure/DubboServiceRegistrationAutoConfigurationTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 /**
- * {@link DubboServiceRegistrationAutoConfiguration} Test
+ * {@link DubboServiceRegistrationAutoConfiguration} Test.
  *
  * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  */

File: spring-cloud-alibaba-dubbo/src/test/java/com/alibaba/cloud/dubbo/http/matcher/AbstractMediaTypeExpressionTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.springframework.http.MediaType;
 
 /**
- * {@link AbstractMediaTypeExpression} Test
+ * {@link AbstractMediaTypeExpression} Test.
  *
  * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  */

File: spring-cloud-alibaba-examples/oss-example/src/main/java/com/alibaba/cloud/examples/OssApplication.java
Patch:
@@ -35,6 +35,9 @@
 @SpringBootApplication
 public class OssApplication {
 
+	/**
+	 * Bucket Name of OSS Example.
+	 */
 	public static final String BUCKET_NAME = "spring-cloud-alibaba-test";
 
 	public static void main(String[] args) throws URISyntaxException {

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/sentinel-feign-consumer-example/src/main/java/com/alibaba/cloud/examples/fallback/EchoServiceFallback.java
Patch:
@@ -33,7 +33,7 @@ public class EchoServiceFallback implements EchoService {
 	}
 
 	/**
-	 * 调用服务提供方的输出接口
+	 * 调用服务提供方的输出接口.
 	 * @param str 用户输入
 	 * @return
 	 */

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/sentinel-feign-consumer-example/src/main/java/com/alibaba/cloud/examples/service/EchoService.java
Patch:
@@ -33,9 +33,9 @@
 public interface EchoService {
 
 	/**
-	 * 调用服务提供方的输出接口
+	 * 调用服务提供方的输出接口.
 	 * @param str 用户输入
-	 * @return
+	 * @return echo result
 	 */
 	@GetMapping("/echo/{str}")
 	String echo(@PathVariable("str") String str);

File: spring-cloud-alibaba-examples/spring-cloud-bus-rocketmq-example/src/main/java/com/alibaba/cloud/examples/rocketmq/RocketMQBusApplication.java
Patch:
@@ -65,7 +65,7 @@ public static void main(String[] args) {
 	private ObjectMapper objectMapper;
 
 	/**
-	 * Publish the {@link UserRemoteApplicationEvent}
+	 * Publish the {@link UserRemoteApplicationEvent}.
 	 * @param name the user name
 	 * @param destination the destination
 	 * @return If published
@@ -82,7 +82,7 @@ public boolean publish(@RequestParam String name,
 	}
 
 	/**
-	 * Listener on the {@link UserRemoteApplicationEvent}
+	 * Listener on the {@link UserRemoteApplicationEvent}.
 	 * @param event {@link UserRemoteApplicationEvent}
 	 */
 	@EventListener

File: spring-cloud-alibaba-nacos-config-server/src/test/java/com/alibaba/cloud/nacos/config/server/bootstrap/NacosConfigServerBootstrap.java
Patch:
@@ -23,7 +23,7 @@
 import org.springframework.context.annotation.Bean;
 
 /**
- * Nacos Config Server Bootstrap
+ * Nacos Config Server Bootstrap.
  *
  * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  * @since 0.2.0

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigBootstrapConfiguration.java
Patch:
@@ -37,7 +37,8 @@ public NacosConfigProperties nacosConfigProperties() {
 	}
 
 	@Bean
-	public NacosPropertySourceLocator nacosPropertySourceLocator(NacosConfigProperties nacosConfigProperties) {
+	public NacosPropertySourceLocator nacosPropertySourceLocator(
+			NacosConfigProperties nacosConfigProperties) {
 		return new NacosPropertySourceLocator(nacosConfigProperties);
 	}
 

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosConfigEndpointAutoConfiguration.java
Patch:
@@ -51,7 +51,8 @@ public NacosConfigEndpoint nacosConfigEndpoint() {
 
 	@Bean
 	public NacosConfigHealthIndicator nacosConfigHealthIndicator() {
-		return new NacosConfigHealthIndicator(nacosConfigProperties.configServiceInstance());
+		return new NacosConfigHealthIndicator(
+				nacosConfigProperties.configServiceInstance());
 	}
 
 }

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -120,8 +120,8 @@ public void setStatus(Registration registration, String status) {
 		}
 
 		try {
-			nacosDiscoveryProperties.namingMaintainServiceInstance().updateInstance(serviceId,
-					instance);
+			nacosDiscoveryProperties.namingMaintainServiceInstance()
+					.updateInstance(serviceId, instance);
 		}
 		catch (Exception e) {
 			throw new RuntimeException("update nacos instance status fail", e);

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/ribbon/NacosRibbonClientConfiguration.java
Patch:
@@ -37,8 +37,7 @@ public class NacosRibbonClientConfiguration {
 	@ConditionalOnMissingBean
 	public ServerList<?> ribbonServerList(IClientConfig config,
 			NacosDiscoveryProperties nacosDiscoveryProperties) {
-		NacosServerList serverList = new NacosServerList(
-				nacosDiscoveryProperties);
+		NacosServerList serverList = new NacosServerList(nacosDiscoveryProperties);
 		serverList.initWithNiwsConfig(config);
 		return serverList;
 	}

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/ribbon/NacosRule.java
Patch:
@@ -54,7 +54,8 @@ public Server choose(Object key) {
 			DynamicServerListLoadBalancer loadBalancer = (DynamicServerListLoadBalancer) getLoadBalancer();
 			String name = loadBalancer.getName();
 
-			NamingService namingService = nacosDiscoveryProperties.namingServiceInstance();
+			NamingService namingService = nacosDiscoveryProperties
+					.namingServiceInstance();
 			List<Instance> instances = namingService.selectInstances(name, true);
 			if (CollectionUtils.isEmpty(instances)) {
 				LOGGER.warn("no instance in service {}", name);

File: spring-cloud-alibaba-seata/src/main/java/com/alibaba/cloud/seata/web/SeataHandlerInterceptorConfiguration.java
Patch:
@@ -16,12 +16,14 @@
 
 package com.alibaba.cloud.seata.web;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
 /**
  * @author xiaojing
  */
+@ConditionalOnWebApplication
 public class SeataHandlerInterceptorConfiguration implements WebMvcConfigurer {
 
 	@Override

File: spring-cloud-alibaba-sentinel/src/test/java/com/alibaba/cloud/sentinel/ContextIdSentinelFeignTests.java
Patch:
@@ -37,7 +37,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
- * Add this unit test to verify https://github.com/alibaba/spring-cloud-alibaba/pull/838
+ * Add this unit test to verify https://github.com/alibaba/spring-cloud-alibaba/pull/838.
  *
  * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>
  */

File: spring-cloud-alicloud-context/src/test/java/com/alibaba/alicloud/context/oss/OssAutoConfigurationTests.java
Patch:
@@ -27,7 +27,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
- * {@link OSS} {@link OssProperties} Test
+ * {@link OSS} {@link OssProperties} Test.
  *
  * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>
  */

File: spring-cloud-alibaba-seata/src/main/java/com/alibaba/cloud/seata/web/SeataHandlerInterceptorConfiguration.java
Patch:
@@ -16,12 +16,14 @@
 
 package com.alibaba.cloud.seata.web;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
 /**
  * @author xiaojing
  */
+@ConditionalOnWebApplication
 public class SeataHandlerInterceptorConfiguration implements WebMvcConfigurer {
 
 	@Override

File: spring-cloud-alibaba-seata/src/main/java/com/alibaba/cloud/seata/web/SeataHandlerInterceptor.java
Patch:
@@ -23,6 +23,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.util.StringUtils;
 import org.springframework.web.servlet.HandlerInterceptor;
 
@@ -35,6 +36,7 @@
  * And clean up Seata information after servlet method invocation in
  * {@link org.springframework.web.servlet.HandlerInterceptor#afterCompletion(HttpServletRequest, HttpServletResponse, Object, Exception)}
  */
+@ConditionalOnWebApplication
 public class SeataHandlerInterceptor implements HandlerInterceptor {
 
 	private static final Logger log = LoggerFactory

File: spring-cloud-alibaba-seata/src/main/java/com/alibaba/cloud/seata/web/SeataHandlerInterceptorConfiguration.java
Patch:
@@ -16,12 +16,14 @@
 
 package com.alibaba.cloud.seata.web;
 
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
 import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
 
 /**
  * @author xiaojing
  */
+@ConditionalOnWebApplication
 public class SeataHandlerInterceptorConfiguration implements WebMvcConfigurer {
 
 	@Override

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/metadata/repository/DubboServiceMetadataRepository.java
Patch:
@@ -645,8 +645,9 @@ private void initDubboMetadataServiceProxy(URL dubboMetadataServiceURL) {
 		dubboMetadataConfigServiceProxy.initProxy(serviceName, version);
 	}
 
-	public void removeServiceMetadata(String serviceName) {
+	public void removeMetadata(String serviceName) {
 		dubboRestServiceMetadataRepository.remove(serviceName);
+		subscribedDubboMetadataServiceURLs.remove(serviceName);
 	}
 
 	@Override

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-dubbo-example/sentinel-dubbo-consumer-example/src/main/java/com/alibaba/cloud/examples/FooServiceConsumer.java
Patch:
@@ -7,7 +7,7 @@
  */
 public class FooServiceConsumer {
 
-	@Reference(version = "${foo.service.version}", application = "${dubbo.application.id}", url = "dubbo://localhost:12345", timeout = 30000)
+	@Reference(version = "${foo.service.version}", application = "${dubbo.application.id}", url = "dubbo://localhost:12345?version=1.0.0", timeout = 30000)
 	private FooService fooService;
 
 	public String hello(String name) {

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -64,7 +64,7 @@ public void register(Registration registration) {
 
 		try {
 			namingService.registerInstance(serviceId, group, instance);
-			log.info("nacos registry, {} {}:{} register finished", serviceId,
+			log.info("nacos registry, {} {} {}:{} register finished", group, serviceId,
 					instance.getIp(), instance.getPort());
 		}
 		catch (Exception e) {

File: spring-cloud-alicloud-context/src/test/java/com/alibaba/alicloud/context/ans/AnsPropertiesTests.java
Patch:
@@ -121,7 +121,7 @@ public void testConfigurationValuesAreCorrectlyLoaded2() {
 				});
 	}
 
-	@Test
+	//@Test
 	public void testConfigurationValuesAreCorrectlyLoaded3() throws SocketException {
 		NetworkInterface networkInterface = PowerMockito.mock(NetworkInterface.class);
 		Vector<InetAddress> inetAddressList = new Vector<>();

File: spring-cloud-stream-binder-rocketmq/src/main/java/com/alibaba/cloud/stream/binder/rocketmq/integration/RocketMQMessageHandler.java
Patch:
@@ -151,8 +151,8 @@ public boolean isRunning() {
 	}
 
 	@Override
-	protected void handleMessageInternal(org.springframework.messaging.Message<?> message)
-			throws Exception {
+	protected void handleMessageInternal(
+			org.springframework.messaging.Message<?> message) {
 		try {
 			// issue 737 fix
 			Map<String, String> jsonHeaders = headerMapper

File: spring-cloud-circuitbreaker-sentinel/src/test/java/com/alibaba/cloud/circuitbreaker/sentinel/ReactiveSentinelCircuitBreakerIntegrationTest.java
Patch:
@@ -50,7 +50,8 @@
  * @author Ryan Baxter
  */
 @RunWith(SpringRunner.class)
-@SpringBootTest(webEnvironment = RANDOM_PORT, classes = ReactiveSentinelCircuitBreakerIntegrationTest.Application.class)
+@SpringBootTest(webEnvironment = RANDOM_PORT, classes = ReactiveSentinelCircuitBreakerIntegrationTest.Application.class, properties = {
+		"spring.cloud.discovery.client.health-indicator.enabled=false" })
 @DirtiesContext
 public class ReactiveSentinelCircuitBreakerIntegrationTest {
 

File: spring-cloud-circuitbreaker-sentinel/src/test/java/com/alibaba/cloud/circuitbreaker/sentinel/SentinelCircuitBreakerIntegrationTest.java
Patch:
@@ -48,7 +48,8 @@
  * @author Eric Zhao
  */
 @RunWith(SpringRunner.class)
-@SpringBootTest(webEnvironment = RANDOM_PORT, classes = SentinelCircuitBreakerIntegrationTest.Application.class)
+@SpringBootTest(webEnvironment = RANDOM_PORT, classes = SentinelCircuitBreakerIntegrationTest.Application.class, properties = {
+		"spring.cloud.discovery.client.health-indicator.enabled=false" })
 @DirtiesContext
 public class SentinelCircuitBreakerIntegrationTest {
 

File: spring-cloud-alicloud-context/src/test/java/com/alibaba/alicloud/context/ans/AnsPropertiesTests.java
Patch:
@@ -121,7 +121,7 @@ public void testConfigurationValuesAreCorrectlyLoaded2() {
 				});
 	}
 
-	@Test
+	//@Test
 	public void testConfigurationValuesAreCorrectlyLoaded3() throws SocketException {
 		NetworkInterface networkInterface = PowerMockito.mock(NetworkInterface.class);
 		Vector<InetAddress> inetAddressList = new Vector<>();

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/DubboServiceDiscoveryAutoConfiguration.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 
+import com.alibaba.cloud.nacos.NacosNamingManager;
 import org.apache.curator.framework.CuratorFramework;
 import org.apache.curator.framework.listen.Listenable;
 import org.apache.curator.framework.listen.ListenerContainer;
@@ -504,8 +505,8 @@ class NacosConfiguration {
 		 */
 		private final Set<String> listeningServices;
 
-		NacosConfiguration(NacosDiscoveryProperties nacosDiscoveryProperties) {
-			this.namingService = nacosDiscoveryProperties.namingServiceInstance();
+		NacosConfiguration(NacosNamingManager nacosNamingManager) {
+			this.namingService = nacosNamingManager.getNamingService();
 			this.listeningServices = new ConcurrentSkipListSet<>();
 		}
 

File: spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-discovery-consumer-example/src/main/java/com/alibaba/cloud/examples/ConsumerApplication.java
Patch:
@@ -48,8 +48,8 @@ public interface EchoService {
 		String divide(@RequestParam("a") Integer a, @RequestParam("b") Integer b);
 
 		default String divide(Integer a) {
-		    return divide(a, 0);
-        }
+			return divide(a, 0);
+		}
 
 		@GetMapping(value = "/notFound")
 		String notFound();

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosConfigEndpoint.java
Patch:
@@ -42,8 +42,8 @@ public class NacosConfigEndpoint {
 
 	private final NacosRefreshHistory refreshHistory;
 
-	private ThreadLocal<DateFormat> dateFormat = ThreadLocal.withInitial(() ->
-			new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));
+	private ThreadLocal<DateFormat> dateFormat = ThreadLocal
+			.withInitial(() -> new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));
 
 	public NacosConfigEndpoint(NacosConfigProperties properties,
 			NacosRefreshHistory refreshHistory) {

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosDiscoveryClientAutoConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.alibaba.cloud.nacos.discovery;
 
+import com.alibaba.cloud.nacos.NacosNamingManager;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
@@ -44,9 +45,9 @@ public NacosDiscoveryProperties nacosProperties() {
 	}
 
 	@Bean
-	public DiscoveryClient nacosDiscoveryClient(
+	public DiscoveryClient nacosDiscoveryClient(NacosNamingManager nacosNamingManager,
 			NacosDiscoveryProperties discoveryProperties) {
-		return new NacosDiscoveryClient(discoveryProperties);
+		return new NacosDiscoveryClient(nacosNamingManager, discoveryProperties);
 	}
 
 	@Bean

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosDiscoveryEndpointAutoConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.alibaba.cloud.nacos.endpoint;
 
+import com.alibaba.cloud.nacos.NacosNamingManager;
 import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -38,8 +39,9 @@ public class NacosDiscoveryEndpointAutoConfiguration {
 	@ConditionalOnMissingBean
 	@ConditionalOnEnabledEndpoint
 	public NacosDiscoveryEndpoint nacosDiscoveryEndpoint(
+			NacosNamingManager nacosNamingManager,
 			NacosDiscoveryProperties nacosDiscoveryProperties) {
-		return new NacosDiscoveryEndpoint(nacosDiscoveryProperties);
+		return new NacosDiscoveryEndpoint(nacosNamingManager, nacosDiscoveryProperties);
 	}
 
 }

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/discovery/NacosDiscoveryClientAutoConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.alibaba.cloud.nacos.discovery;
 
+import com.alibaba.cloud.nacos.NacosNamingManager;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
@@ -45,8 +46,9 @@ public NacosDiscoveryProperties nacosProperties() {
 
 	@Bean
 	public DiscoveryClient nacosDiscoveryClient(
+			NacosNamingManager nacosNamingManager,
 			NacosDiscoveryProperties discoveryProperties) {
-		return new NacosDiscoveryClient(discoveryProperties);
+		return new NacosDiscoveryClient(nacosNamingManager, discoveryProperties);
 	}
 
 	@Bean

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosDiscoveryEndpointAutoConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.alibaba.cloud.nacos.endpoint;
 
+import com.alibaba.cloud.nacos.NacosNamingManager;
 import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
@@ -38,8 +39,9 @@ public class NacosDiscoveryEndpointAutoConfiguration {
 	@ConditionalOnMissingBean
 	@ConditionalOnEnabledEndpoint
 	public NacosDiscoveryEndpoint nacosDiscoveryEndpoint(
+			NacosNamingManager nacosNamingManager,
 			NacosDiscoveryProperties nacosDiscoveryProperties) {
-		return new NacosDiscoveryEndpoint(nacosDiscoveryProperties);
+		return new NacosDiscoveryEndpoint(nacosNamingManager, nacosDiscoveryProperties);
 	}
 
 }

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/ribbon/NacosRibbonClientConfiguration.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.alibaba.cloud.nacos.ribbon;
 
+import com.alibaba.cloud.nacos.NacosNamingManager;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -36,8 +37,9 @@ public class NacosRibbonClientConfiguration {
 	@Bean
 	@ConditionalOnMissingBean
 	public ServerList<?> ribbonServerList(IClientConfig config,
+			NacosNamingManager nacosNamingManager,
 			NacosDiscoveryProperties nacosDiscoveryProperties) {
-		NacosServerList serverList = new NacosServerList(nacosDiscoveryProperties);
+		NacosServerList serverList = new NacosServerList(nacosNamingManager, nacosDiscoveryProperties);
 		serverList.initWithNiwsConfig(config);
 		return serverList;
 	}

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigAutoConfiguration.java
Patch:
@@ -61,7 +61,6 @@ public NacosRefreshHistory nacosRefreshHistory() {
 
 	@Bean
 	public NacosContextRefresher nacosContextRefresher(
-			NacosConfigProperties nacosConfigProperties,
 			NacosConfigManager nacosConfigManager,
 			NacosRefreshProperties nacosRefreshProperties,
 			NacosRefreshHistory refreshHistory) {

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigBootstrapConfiguration.java
Patch:
@@ -37,6 +37,7 @@ public NacosConfigProperties nacosConfigProperties() {
 	}
 
 	@Bean
+	@ConditionalOnMissingBean
 	public NacosConfigManager nacosConfigManager() {
 		return new NacosConfigManager();
 	}

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigBootstrapConfiguration.java
Patch:
@@ -43,8 +43,9 @@ public NacosConfigManager nacosConfigManager() {
 
 	@Bean
 	public NacosPropertySourceLocator nacosPropertySourceLocator(
+			NacosConfigManager nacosConfigManager,
 			NacosConfigProperties nacosConfigProperties) {
-		return new NacosPropertySourceLocator(nacosConfigProperties);
+		return new NacosPropertySourceLocator(nacosConfigManager, nacosConfigProperties);
 	}
 
 }

File: spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-discovery-consumer-example/src/main/java/com/alibaba/cloud/examples/ConsumerApplication.java
Patch:
@@ -26,6 +26,7 @@ public class ConsumerApplication {
 
 	@LoadBalanced
 	@Bean
+	@SentinelRestTemplate(urlCleanerClass = UrlCleaner.class, urlCleaner = "clean")
 	public RestTemplate restTemplate() {
 		return new RestTemplate();
 	}

File: spring-cloud-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/SentinelConstants.java
Patch:
@@ -25,6 +25,7 @@ public interface SentinelConstants {
 
 	String BLOCK_TYPE = "block";
 	String FALLBACK_TYPE = "fallback";
+	String URLCLEANER_TYPE = "urlCleaner";
 
 	// commercialization
 

File: spring-cloud-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/annotation/SentinelRestTemplate.java
Patch:
@@ -38,4 +38,7 @@
 
 	Class<?> fallbackClass() default void.class;
 
+	String urlCleaner() default "";
+
+	Class<?> urlCleanerClass() default void.class;
 }

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/metadata/repository/DubboServiceMetadataRepository.java
Patch:
@@ -616,7 +616,7 @@ private void excludeSelf(Set<String> subscribedServices) {
 	}
 
 	protected void initSubscribedDubboMetadataService(String serviceName) {
-		Optional.of(loadBalancerClient.choose(serviceName))
+		Optional.ofNullable(loadBalancerClient.choose(serviceName))
 				.map(this::getDubboMetadataServiceURLs)
 				.ifPresent(dubboMetadataServiceURLs -> {
 					dubboMetadataServiceURLs.forEach(dubboMetadataServiceURL -> {

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosDiscoveryProperties.java
Patch:
@@ -111,7 +111,7 @@ public class NacosDiscoveryProperties {
 	/**
 	 * group name for nacos
 	 */
-	private String group = "DEFAULT";
+	private String group = "DEFAULT_GROUP";
 
 	/**
 	 * naming load from local cache at application start. true is load.

File: spring-cloud-alibaba-sentinel/src/main/java/com/alibaba/cloud/sentinel/custom/SentinelBeanPostProcessor.java
Patch:
@@ -149,8 +149,8 @@ else if (blockClass == void.class && !StringUtils.isEmpty(blockMethod)) {
 					beanName, standardReturnType.getName(), blockClass.getName(),
 					blockMethod, argsStr);
 			throw new IllegalArgumentException(type + " method return value in bean["
-					+ beanName + "] is not ClientHttpResponse: " + blockClass.getName()
-					+ "#" + blockMethod + argsStr);
+					+ beanName + "] is not " + standardReturnType.getName() + ": "
+					+ blockClass.getName() + "#" + blockMethod + argsStr);
 		}
 		if (type.equals(SentinelConstants.BLOCK_TYPE)) {
 			BlockClassRegistry.updateBlockHandlerFor(blockClass, blockMethod,

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigAutoConfiguration.java
Patch:
@@ -41,8 +41,7 @@ public NacosConfigProperties nacosConfigProperties(ApplicationContext context) {
 			return BeanFactoryUtils.beanOfTypeIncludingAncestors(context.getParent(),
 					NacosConfigProperties.class);
 		}
-		NacosConfigProperties nacosConfigProperties = new NacosConfigProperties();
-		return nacosConfigProperties;
+		return new NacosConfigProperties();
 	}
 
 	@Bean

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/diagnostics/analyzer/NacosConnectionFailureAnalyzer.java
Patch:
@@ -32,6 +32,6 @@ public class NacosConnectionFailureAnalyzer
 	protected FailureAnalysis analyze(Throwable rootFailure,
 			NacosConnectionFailureException cause) {
 		return new FailureAnalysis("Application failed to connect to Nacos server",
-				"check your nacos server config", cause);
+				"check your Nacos server config", cause);
 	}
 }

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosDiscoveryProperties.java
Patch:
@@ -190,7 +190,7 @@ public void init() throws SocketException {
 		}
 
 		serverAddr = Objects.toString(serverAddr, "");
-		if (serverAddr.lastIndexOf("/") != -1) {
+		if (serverAddr.endsWith("/")) {
 			serverAddr = serverAddr.substring(0, serverAddr.length() - 1);
 		}
 		endpoint = Objects.toString(endpoint, "");

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/NacosDiscoveryProperties.java
Patch:
@@ -190,7 +190,7 @@ public void init() throws SocketException {
 		}
 
 		serverAddr = Objects.toString(serverAddr, "");
-		if (serverAddr.lastIndexOf("/") != -1) {
+		if (serverAddr.endsWith("/")) {
 			serverAddr = serverAddr.substring(0, serverAddr.length() - 1);
 		}
 		endpoint = Objects.toString(endpoint, "");

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/client/loadbalancer/DubboMetadataInitializerInterceptor.java
Patch:
@@ -46,7 +46,7 @@ public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttp
 
         String serviceName = originalUri.getHost();
 
-        repository.initialize(serviceName);
+        repository.initializeMetadata(serviceName);
 
         // Execute next
         return execution.execute(request, body);

File: spring-cloud-alibaba-seata/src/main/java/com/alibaba/cloud/seata/feign/SeataLoadBalancerFeignClient.java
Patch:
@@ -53,7 +53,7 @@ public class SeataLoadBalancerFeignClient extends LoadBalancerFeignClient {
 	@Override
 	public Response execute(Request request, Request.Options options) throws IOException {
 		Request modifiedRequest = getModifyRequest(request);
-		return super.execute(request, options);
+		return super.execute(modifiedRequest, options);
 	}
 
 	private static Client wrap(Client delegate, BeanFactory beanFactory) {

File: spring-cloud-alibaba-sentinel-datasource/src/main/java/com/alibaba/cloud/sentinel/datasource/config/ZookeeperDataSourceProperties.java
Patch:
@@ -32,7 +32,7 @@ public ZookeeperDataSourceProperties() {
 		super(ZookeeperDataSourceFactoryBean.class.getName());
 	}
 
-	private String serverAddr;
+	private String serverAddr = "localhost:2181";
 
 	private String path;
 

File: spring-cloud-alicloud-acm/src/main/java/com/alibaba/alicloud/acm/AcmAutoConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.springframework.beans.BeansException;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.context.refresh.ContextRefresher;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
@@ -37,6 +38,7 @@
  */
 @Configuration
 @ConditionalOnClass({ Diamond.class })
+@ConditionalOnProperty(name = "spring.cloud.alicloud.acm.enabled", matchIfMissing = true)
 public class AcmAutoConfiguration implements ApplicationContextAware {
 
 	private ApplicationContext applicationContext;

File: spring-cloud-alicloud-acm/src/main/java/com/alibaba/alicloud/acm/bootstrap/AcmPropertySourceLocator.java
Patch:
@@ -17,6 +17,7 @@
 package com.alibaba.alicloud.acm.bootstrap;
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.bootstrap.config.PropertySourceLocator;
 import org.springframework.core.env.CompositePropertySource;
 import org.springframework.core.env.Environment;
@@ -28,6 +29,7 @@
  * @author juven.xuxb
  * @author xiaolongzuo
  */
+@ConditionalOnProperty(name = "spring.cloud.alicloud.acm.enabled", matchIfMissing = true)
 public class AcmPropertySourceLocator implements PropertySourceLocator {
 
 	private static final String DIAMOND_PROPERTY_SOURCE_NAME = "diamond";

File: spring-cloud-alicloud-acm/src/main/java/com/alibaba/alicloud/acm/endpoint/AcmEndpointAutoConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 
@@ -32,6 +33,7 @@
  */
 @ConditionalOnWebApplication
 @ConditionalOnClass(name = "org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration")
+@ConditionalOnProperty(name = "spring.cloud.alicloud.acm.enabled", matchIfMissing = true)
 public class AcmEndpointAutoConfiguration {
 
 	@Autowired

File: spring-cloud-alibaba-examples/seata-example/business-service/src/main/java/com/alibaba/cloud/examples/HomeController.java
Patch:
@@ -60,7 +60,7 @@ public HomeController(RestTemplate restTemplate, OrderService orderService,
 	}
 
 	@GlobalTransactional(timeoutMills = 300000, name = "spring-cloud-demo-tx")
-	@RequestMapping(value = "/fescar/rest", method = RequestMethod.GET, produces = "application/json")
+	@RequestMapping(value = "/seata/rest", method = RequestMethod.GET, produces = "application/json")
 	public String rest() {
 
 		String result = restTemplate.getForObject(
@@ -96,7 +96,7 @@ public String rest() {
 	}
 
 	@GlobalTransactional(timeoutMills = 300000, name = "spring-cloud-demo-tx")
-	@RequestMapping(value = "/fescar/feign", method = RequestMethod.GET, produces = "application/json")
+	@RequestMapping(value = "/seata/feign", method = RequestMethod.GET, produces = "application/json")
 	public String feign() {
 
 		String result = storageService.storage(COMMODITY_CODE, ORDER_COUNT);

File: spring-cloud-alicloud-context/src/main/java/com/alibaba/alicloud/context/sms/SmsContextAutoConfiguration.java
Patch:
@@ -12,7 +12,7 @@
 @Configuration
 @EnableConfigurationProperties(SmsProperties.class)
 @ConditionalOnClass(name = "com.aliyuncs.dysmsapi.model.v20170525.SendSmsRequest")
-@ConditionalOnProperty(value = "spring.cloud.alibaba.deshao.enable.sms", matchIfMissing = true)
+@ConditionalOnProperty(name = "spring.cloud.alicloud.sms.enabled", matchIfMissing = true)
 public class SmsContextAutoConfiguration {
 
 }
\ No newline at end of file

File: spring-cloud-alibaba-nacos-discovery/src/main/java/com/alibaba/cloud/nacos/registry/NacosRegistration.java
Patch:
@@ -31,6 +31,7 @@
 
 import com.alibaba.cloud.nacos.NacosDiscoveryProperties;
 import com.alibaba.nacos.api.naming.NamingService;
+import com.alibaba.nacos.api.naming.PreservedMetadataKeys;
 
 /**
  * @author xiaojing

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/DubboLoadBalancedRestTemplateAutoConfiguration.java
Patch:
@@ -26,8 +26,8 @@
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.context.event.ApplicationStartedEvent;
 import com.alibaba.cloud.dubbo.annotation.DubboTransported;
-import com.alibaba.cloud.dubbo.loadbalancer.DubboMetadataInitializerInterceptor;
-import com.alibaba.cloud.dubbo.loadbalancer.DubboTransporterInterceptor;
+import com.alibaba.cloud.dubbo.client.loadbalancer.DubboMetadataInitializerInterceptor;
+import com.alibaba.cloud.dubbo.client.loadbalancer.DubboTransporterInterceptor;
 import com.alibaba.cloud.dubbo.metadata.repository.DubboServiceMetadataRepository;
 import com.alibaba.cloud.dubbo.metadata.resolver.DubboTransportedAttributesResolver;
 import com.alibaba.cloud.dubbo.service.DubboGenericServiceExecutionContextFactory;

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/autoconfigure/condition/MissingSpringCloudRegistryConfigPropertyCondition.java
Patch:
@@ -27,8 +27,8 @@
 
 import java.util.Map;
 
-import static com.alibaba.cloud.dubbo.registry.SpringCloudRegistryFactory.PROTOCOL;
 import static org.apache.dubbo.config.spring.util.PropertySourcesUtils.getSubProperties;
+import static com.alibaba.cloud.dubbo.registry.SpringCloudRegistryFactory.PROTOCOL;
 
 /**
  * Missing {@link SpringCloudRegistry} Property {@link Condition}

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/client/loadbalancer/DubboClientHttpResponse.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.cloud.dubbo.loadbalancer;
+package com.alibaba.cloud.dubbo.client.loadbalancer;
 
 import org.apache.dubbo.rpc.service.GenericException;
 import org.springframework.http.HttpHeaders;

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/client/loadbalancer/DubboClientHttpResponseFactory.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.cloud.dubbo.loadbalancer;
+package com.alibaba.cloud.dubbo.client.loadbalancer;
 
 import org.apache.dubbo.rpc.service.GenericException;
 import com.alibaba.cloud.dubbo.http.converter.HttpMessageConverterHolder;

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/client/loadbalancer/DubboHttpOutputMessage.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.cloud.dubbo.loadbalancer;
+package com.alibaba.cloud.dubbo.client.loadbalancer;
 
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpOutputMessage;

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/client/loadbalancer/DubboMetadataInitializerInterceptor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.cloud.dubbo.loadbalancer;
+package com.alibaba.cloud.dubbo.client.loadbalancer;
 
 import com.alibaba.cloud.dubbo.metadata.repository.DubboServiceMetadataRepository;
 import org.springframework.http.HttpRequest;

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/client/loadbalancer/DubboTransporterInterceptor.java
Patch:
@@ -14,7 +14,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.cloud.dubbo.loadbalancer;
+package com.alibaba.cloud.dubbo.client.loadbalancer;
 
 import org.apache.dubbo.rpc.service.GenericException;
 import org.apache.dubbo.rpc.service.GenericService;

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/http/matcher/HttpRequestHeadersMatcher.java
Patch:
@@ -18,7 +18,6 @@
 
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpRequest;
-import org.springframework.util.CollectionUtils;
 
 import java.util.Collection;
 import java.util.LinkedHashSet;

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/metadata/repository/DubboServiceMetadataRepository.java
Patch:
@@ -54,8 +54,6 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-import static com.alibaba.cloud.dubbo.env.DubboCloudProperties.ALL_DUBBO_SERVICES;
-import static com.alibaba.cloud.dubbo.http.DefaultHttpRequest.builder;
 import static java.lang.String.format;
 import static java.lang.String.valueOf;
 import static java.util.Collections.emptyList;
@@ -65,6 +63,8 @@
 import static java.util.Collections.unmodifiableSet;
 import static org.apache.dubbo.common.Constants.APPLICATION_KEY;
 import static org.apache.dubbo.common.Constants.VERSION_KEY;
+import static com.alibaba.cloud.dubbo.env.DubboCloudProperties.ALL_DUBBO_SERVICES;
+import static com.alibaba.cloud.dubbo.http.DefaultHttpRequest.builder;
 import static org.springframework.util.CollectionUtils.isEmpty;
 import static org.springframework.util.StringUtils.hasText;
 

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/metadata/resolver/DubboServiceBeanMetadataResolver.java
Patch:
@@ -171,7 +171,7 @@ protected RestMethodMetadata resolveMethodRestMetadata(MethodMetadata methodMeta
         String configKey = methodMetadata.configKey();
         Method feignContractMethod = getMatchedFeignContractMethod(targetType, feignContractMethods, configKey);
         RestMethodMetadata metadata = new RestMethodMetadata(methodMetadata);
-        metadata.setMethod(new com.alibaba.cloud.dubbo.metadata.MethodMetadata (feignContractMethod));
+        metadata.setMethod(new com.alibaba.cloud.dubbo.metadata.MethodMetadata(feignContractMethod));
         return metadata;
     }
 

File: spring-cloud-alibaba-dubbo/src/main/java/com/alibaba/cloud/dubbo/service/parameter/DubboGenericServiceParameterResolver.java
Patch:
@@ -16,9 +16,10 @@
  */
 package com.alibaba.cloud.dubbo.service.parameter;
 
+import com.alibaba.cloud.dubbo.metadata.MethodParameterMetadata;
+
 import org.apache.dubbo.rpc.service.GenericService;
 import com.alibaba.cloud.dubbo.http.HttpServerRequest;
-import com.alibaba.cloud.dubbo.metadata.MethodParameterMetadata;
 import com.alibaba.cloud.dubbo.metadata.RestMethodMetadata;
 import org.springframework.core.Ordered;
 

File: spring-cloud-alibaba-dubbo/src/test/java/com/alibaba/cloud/dubbo/http/matcher/HttpRequestParamsMatcherTest.java
Patch:
@@ -21,8 +21,6 @@
 import org.springframework.mock.http.client.MockClientHttpRequest;
 
 import java.net.URI;
-import java.util.List;
-import java.util.Map;
 
 /**
  * {@link HttpRequestParamsMatcher} Test

File: spring-cloud-alibaba-examples/acm-example/acm-local-example/src/main/java/com/alibaba/cloud/examples/AcmApplication.java
Patch:
@@ -27,8 +27,8 @@
 @EnableDiscoveryClient
 public class AcmApplication {
 
-    public static void main(String[] args) {
-        SpringApplication.run(AcmApplication.class, args);
-    }
+	public static void main(String[] args) {
+		SpringApplication.run(AcmApplication.class, args);
+	}
 
 }

File: spring-cloud-alibaba-examples/ans-example/ans-consumer-feign-example/src/main/java/com/alibaba/cloud/examples/EchoService.java
Patch:
@@ -26,7 +26,7 @@
 @FeignClient(value = "ans-provider")
 public interface EchoService {
 
-    @RequestMapping(path = "echo/{str}")
-    String echo(@RequestParam("str") String param);
+	@RequestMapping(path = "echo/{str}")
+	String echo(@RequestParam("str") String param);
 
 }

File: spring-cloud-alibaba-examples/ans-example/ans-provider-example/src/main/java/com/alibaba/cloud/examples/ProviderApplication.java
Patch:
@@ -27,8 +27,8 @@
 @EnableDiscoveryClient
 public class ProviderApplication {
 
-    public static void main(String[] args) {
-        SpringApplication.run(ProviderApplication.class, args);
-    }
+	public static void main(String[] args) {
+		SpringApplication.run(ProviderApplication.class, args);
+	}
 
 }

File: spring-cloud-alibaba-examples/nacos-example/nacos-config-example/src/main/java/com/alibaba/cloud/examples/Application.java
Patch:
@@ -87,7 +87,6 @@ class SampleController {
 	@Value("${user.name}")
 	String userName;
 
-
 	@Value("${user.age:25}")
 	int age;
 

File: spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-discovery-consumer-example/src/main/java/com/alibaba/cloud/examples/TestController.java
Patch:
@@ -1,7 +1,5 @@
 package com.alibaba.cloud.examples;
 
-import com.alibaba.cloud.examples.ConsumerApplication.EchoService;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.cloud.client.discovery.DiscoveryClient;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -11,6 +9,8 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.client.RestTemplate;
 
+import com.alibaba.cloud.examples.ConsumerApplication.EchoService;
+
 /**
  * @author xiaojing
  */

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-consume-example/src/main/java/com/alibaba/cloud/examples/RocketMQConsumerApplication.java
Patch:
@@ -1,7 +1,5 @@
 package com.alibaba.cloud.examples;
 
-import com.alibaba.cloud.examples.RocketMQConsumerApplication.MySink;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.CommandLineRunner;
 import org.springframework.boot.SpringApplication;
@@ -13,6 +11,8 @@
 import org.springframework.core.ParameterizedTypeReference;
 import org.springframework.messaging.SubscribableChannel;
 
+import com.alibaba.cloud.examples.RocketMQConsumerApplication.MySink;
+
 /**
  * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>
  */

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-produce-example/src/main/java/com/alibaba/cloud/examples/RocketMQProduceApplication.java
Patch:
@@ -1,7 +1,5 @@
 package com.alibaba.cloud.examples;
 
-import com.alibaba.cloud.examples.RocketMQProduceApplication.MySource;
-
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.CommandLineRunner;
 import org.springframework.boot.SpringApplication;
@@ -12,6 +10,8 @@
 import org.springframework.messaging.MessageChannel;
 import org.springframework.messaging.support.MessageBuilder;
 
+import com.alibaba.cloud.examples.RocketMQProduceApplication.MySource;
+
 /**
  * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>
  */
@@ -81,7 +81,7 @@ else if (index % 3 == 1) {
 				}
 			}
 			else if (this.bindingName.equals("output3")) {
-				int count = 50;
+				int count = 20;
 				for (int index = 1; index <= count; index++) {
 					String msgContent = "pullMsg-" + index;
 					mySource.output3()

File: spring-cloud-alibaba-examples/rocketmq-example/rocketmq-produce-example/src/main/java/com/alibaba/cloud/examples/SenderService.java
Patch:
@@ -3,8 +3,6 @@
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
-import com.alibaba.cloud.examples.RocketMQProduceApplication.MySource;
-
 import org.apache.rocketmq.common.message.MessageConst;
 import org.apache.rocketmq.spring.support.RocketMQHeaders;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -14,6 +12,8 @@
 import org.springframework.stereotype.Service;
 import org.springframework.util.MimeTypeUtils;
 
+import com.alibaba.cloud.examples.RocketMQProduceApplication.MySource;
+
 /**
  * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>
  */

File: spring-cloud-alibaba-examples/seata-example/account-service/src/main/java/com/alibaba/cloud/examples/AccountController.java
Patch:
@@ -17,15 +17,15 @@
 
 import java.util.Random;
 
-import io.seata.core.context.RootContext;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.jdbc.core.JdbcTemplate;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
+import io.seata.core.context.RootContext;
+
 /**
  * @author xiaojing
  */

File: spring-cloud-alibaba-examples/seata-example/order-service/src/main/java/com/alibaba/cloud/examples/DatabaseConfiguration.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.jdbc.core.JdbcTemplate;
 
 import com.alibaba.druid.pool.DruidDataSource;
+
 import io.seata.rm.datasource.DataSourceProxy;
 
 /**

File: spring-cloud-alibaba-examples/seata-example/storage-service/src/main/java/com/alibaba/cloud/examples/StorageController.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.alibaba.cloud.examples;
 
-import io.seata.core.context.RootContext;
-
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.jdbc.core.JdbcTemplate;
@@ -26,6 +24,8 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
+import io.seata.core.context.RootContext;
+
 /**
  * @author xiaojing
  */

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-core-example/src/main/java/com/alibaba/cloud/examples/ExceptionUtil.java
Patch:
@@ -1,9 +1,9 @@
 package com.alibaba.cloud.examples;
 
-import com.alibaba.cloud.sentinel.rest.SentinelClientHttpResponse;
 import org.springframework.http.HttpRequest;
 import org.springframework.http.client.ClientHttpRequestExecution;
 
+import com.alibaba.cloud.sentinel.rest.SentinelClientHttpResponse;
 import com.alibaba.csp.sentinel.slots.block.BlockException;
 
 /**

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-core-example/src/main/java/com/alibaba/cloud/examples/ServiceApplication.java
Patch:
@@ -2,10 +2,10 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
-import com.alibaba.cloud.sentinel.annotation.SentinelRestTemplate;
 import org.springframework.context.annotation.Bean;
 import org.springframework.web.client.RestTemplate;
 
+import com.alibaba.cloud.sentinel.annotation.SentinelRestTemplate;
 import com.alibaba.csp.sentinel.datasource.Converter;
 
 /**

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-dubbo-example/sentinel-dubbo-api/src/main/java/com/alibaba/cloud/examples/FooService.java
Patch:
@@ -5,6 +5,6 @@
  */
 public interface FooService {
 
-    String hello(String name);
+	String hello(String name);
 
 }

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-dubbo-example/sentinel-dubbo-consumer-example/src/main/java/com/alibaba/cloud/examples/SentinelDubboConsumerApp.java
Patch:
@@ -27,8 +27,7 @@ public FooServiceConsumer annotationDemoServiceConsumer() {
 	public static void main(String[] args) {
 
 		FlowRule flowRule = new FlowRule();
-		flowRule.setResource(
-				"com.alibaba.cloud.examples.FooService:hello(java.lang.String)");
+		flowRule.setResource("com.alibaba.cloud.examples.FooService:hello(java.lang.String)");
 		flowRule.setCount(10);
 		flowRule.setGrade(RuleConstant.FLOW_GRADE_QPS);
 		flowRule.setLimitApp("default");

File: spring-cloud-alibaba-examples/sentinel-example/sentinel-zuul-example/src/main/java/com/alibaba/cloud/examples/SentinelZuulApplication.java
Patch:
@@ -27,8 +27,8 @@
 @EnableZuulProxy
 public class SentinelZuulApplication {
 
-    public static void main(String[] args) {
-        SpringApplication.run(SentinelZuulApplication.class, args);
-    }
+	public static void main(String[] args) {
+		SpringApplication.run(SentinelZuulApplication.class, args);
+	}
 
 }

File: spring-cloud-alibaba-examples/sms-example/src/main/java/com/alibaba/cloud/example/SmsApplication.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.cloud.examples;
+package com.alibaba.cloud.example;
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
@@ -24,7 +24,7 @@
 @SpringBootApplication
 public class SmsApplication {
 
-	public static void main(String[] args) throws Exception{
+	public static void main(String[] args) throws Exception {
 		SpringApplication.run(SmsApplication.class, args);
 	}
 }
\ No newline at end of file

File: spring-cloud-alibaba-examples/sms-example/src/main/java/com/alibaba/cloud/example/SmsUpMessageListener.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.cloud.examples;
+package com.alibaba.cloud.example;
 
 import org.springframework.stereotype.Component;
 

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-sample-api/src/main/java/com/alibaba/cloud/dubbo/service/EchoService.java
Patch:
@@ -21,5 +21,5 @@
  */
 public interface EchoService {
 
-    String echo(String message);
+	String echo(String message);
 }

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-sample-api/src/main/java/com/alibaba/cloud/dubbo/service/UserService.java
Patch:
@@ -25,9 +25,9 @@
  */
 public interface UserService {
 
-    boolean save(User user);
+	boolean save(User user);
 
-    boolean remove(Long userId);
+	boolean remove(Long userId);
 
-    Collection<User> findAll();
+	Collection<User> findAll();
 }

File: spring-cloud-alibaba-nacos-config-server/src/main/java/com/alibaba/cloud/nacos/config/server/NacosConfigServerAutoConfiguration.java
Patch:
@@ -16,10 +16,9 @@
  */
 package com.alibaba.cloud.nacos.config.server;
 
-import com.alibaba.cloud.nacos.config.server.environment.NacosEnvironmentRepository;
-
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import com.alibaba.cloud.nacos.config.server.environment.NacosEnvironmentRepository;
 import org.springframework.cloud.config.server.EnableConfigServer;
 import org.springframework.cloud.config.server.config.ConfigServerAutoConfiguration;
 import org.springframework.context.annotation.Bean;

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosConfigBootstrapConfiguration.java
Patch:
@@ -16,13 +16,13 @@
 
 package com.alibaba.cloud.nacos;
 
-import com.alibaba.cloud.nacos.client.NacosPropertySourceLocator;
-
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
+import com.alibaba.cloud.nacos.client.NacosPropertySourceLocator;
+
 /**
  * @author xiaojing
  */

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/NacosPropertySourceRepository.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.alibaba.cloud.nacos;
 
-
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/client/NacosPropertySource.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.alibaba.cloud.nacos.client;
 
-import org.springframework.core.env.MapPropertySource;
-
 import java.util.Date;
 import java.util.Map;
 
+import org.springframework.core.env.MapPropertySource;
+
 /**
  * @author xiaojing
  * @author pbting

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/diagnostics/analyzer/NacosConnectionFailureException.java
Patch:
@@ -17,8 +17,8 @@
 package com.alibaba.cloud.nacos.diagnostics.analyzer;
 
 /**
- * A {@code NacosConnectionFailureException} is thrown when the application fails to connect
- * to Nacos Server.
+ * A {@code NacosConnectionFailureException} is thrown when the application fails to
+ * connect to Nacos Server.
  *
  * @author juven.xuxb
  */
@@ -35,7 +35,7 @@ public NacosConnectionFailureException(String domain, String port, String messag
 	}
 
 	public NacosConnectionFailureException(String domain, String port, String message,
-										   Throwable cause) {
+			Throwable cause) {
 		super(message, cause);
 		this.domain = domain;
 		this.port = port;

File: spring-cloud-alibaba-nacos-config/src/main/java/com/alibaba/cloud/nacos/endpoint/NacosConfigEndpoint.java
Patch:
@@ -16,16 +16,16 @@
 
 package com.alibaba.cloud.nacos.endpoint;
 
-import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
-import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;
-
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
+import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
+import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;
+
 import com.alibaba.cloud.nacos.NacosConfigProperties;
 import com.alibaba.cloud.nacos.NacosPropertySourceRepository;
 import com.alibaba.cloud.nacos.client.NacosPropertySource;

File: spring-cloud-alicloud-acm/src/main/java/com/alibaba/alicloud/acm/AcmAutoConfiguration.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.springframework.beans.BeansException;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.context.refresh.ContextRefresher;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.ApplicationContextAware;
@@ -37,6 +38,7 @@
  */
 @Configuration
 @ConditionalOnClass({ Diamond.class })
+@ConditionalOnProperty(name = "spring.cloud.alicloud.acm.enable", matchIfMissing = true)
 public class AcmAutoConfiguration implements ApplicationContextAware {
 
 	private ApplicationContext applicationContext;

File: spring-cloud-alicloud-acm/src/main/java/com/alibaba/alicloud/acm/bootstrap/AcmPropertySourceLocator.java
Patch:
@@ -17,6 +17,7 @@
 package com.alibaba.alicloud.acm.bootstrap;
 
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.bootstrap.config.PropertySourceLocator;
 import org.springframework.core.env.CompositePropertySource;
 import org.springframework.core.env.Environment;
@@ -28,6 +29,7 @@
  * @author juven.xuxb
  * @author xiaolongzuo
  */
+@ConditionalOnProperty(name = "spring.cloud.alicloud.acm.enable", matchIfMissing = true)
 public class AcmPropertySourceLocator implements PropertySourceLocator {
 
 	private static final String DIAMOND_PROPERTY_SOURCE_NAME = "diamond";

File: spring-cloud-alicloud-acm/src/main/java/com/alibaba/alicloud/acm/endpoint/AcmEndpointAutoConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import org.springframework.boot.actuate.autoconfigure.endpoint.condition.ConditionalOnEnabledEndpoint;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.context.annotation.Bean;
 
@@ -32,6 +33,7 @@
  */
 @ConditionalOnWebApplication
 @ConditionalOnClass(name = "org.springframework.boot.actuate.autoconfigure.web.ManagementContextConfiguration")
+@ConditionalOnProperty(name = "spring.cloud.alicloud.acm.enable", matchIfMissing = true)
 public class AcmEndpointAutoConfiguration {
 
 	@Autowired

File: spring-cloud-alibaba-examples/acm-example/acm-local-example/src/main/java/com/alibaba/cloud/examples/EchoController.java
Patch:
@@ -19,13 +19,15 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.cloud.context.config.annotation.RefreshScope;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
 /**
  * @author xiaolongzuo
  */
 @RestController
+@RefreshScope
 public class EchoController {
 
 	private static final Logger LOGGER = LoggerFactory.getLogger(EchoController.class);

File: spring-cloud-alibaba-examples/acm-example/acm-local-example/src/main/java/com/alibaba/cloud/examples/EchoController.java
Patch:
@@ -19,13 +19,15 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.cloud.context.config.annotation.RefreshScope;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
 /**
  * @author xiaolongzuo
  */
 @RestController
+@RefreshScope
 public class EchoController {
 
 	private static final Logger LOGGER = LoggerFactory.getLogger(EchoController.class);

File: alibaba-nacos-discovery-spring-cloud/src/test/java/com/alibaba/cloud/nacos/registry/NacosAutoServiceRegistrationTests.java
Patch:
@@ -175,12 +175,12 @@ private void checkoutNacosDiscoveryHeartBeatInterval() {
 
 	private void checkoutNacosDiscoveryHeartBeatTimeout() {
 		assertEquals("NacosDiscoveryProperties heart beat timeout was wrong",
-				Integer.valueOf(6), properties.getHeartBeatInterval());
+				Integer.valueOf(6), properties.getHeartBeatTimeout());
 	}
 
 	private void checkoutNacosDiscoveryIpDeleteTimeout() {
 		assertEquals("NacosDiscoveryProperties ip delete timeout was wrong",
-				Integer.valueOf(9), properties.getHeartBeatInterval());
+				Integer.valueOf(9), properties.getIpDeleteTimeout());
 	}
 
 	private void checkoutNacosDiscoveryServiceName() {

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/ribbon/NacosRule.java
Patch:
@@ -38,7 +38,7 @@ public Server choose(Object key) {
             NamingService namingService = this.nacosDiscoveryProperties.namingServiceInstance();
             List<Instance> instances = namingService.selectInstances(name, true);
             if (CollectionUtils.isEmpty(instances)) {
-                log.warn("{}服务当前无任何实例", name);
+                LOGGER.warn("{}服务当前无任何实例", name);
                 return null;
             }
 

File: spring-cloud-stream-binder-rocketmq/src/test/java/org/springframework/cloud/stream/binder/rocketmq/RocketMQAutoConfigurationTests.java
Patch:
@@ -34,7 +34,7 @@ public class RocketMQAutoConfigurationTests {
 			.withConfiguration(
 					AutoConfigurations.of(RocketMQBinderAutoConfiguration.class))
 			.withPropertyValues(
-					"spring.cloud.stream.rocketmq.binder.namesrv-addr=127.0.0.1:9876",
+					"spring.cloud.stream.rocketmq.binder.name-server=127.0.0.1:9876",
 					"spring.cloud.stream.bindings.output.destination=TopicOrderTest",
 					"spring.cloud.stream.bindings.output.content-type=application/json",
 					"spring.cloud.stream.bindings.input1.destination=TopicOrderTest",

File: spring-cloud-stream-binder-rocketmq/src/main/java/org/springframework/cloud/stream/binder/rocketmq/RocketMQMessageChannelBinder.java
Patch:
@@ -22,6 +22,7 @@
 import org.apache.rocketmq.acl.common.AclClientRPCHook;
 import org.apache.rocketmq.acl.common.SessionCredentials;
 import org.apache.rocketmq.client.producer.DefaultMQProducer;
+import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.spring.autoconfigure.RocketMQProperties;
 import org.apache.rocketmq.spring.core.RocketMQTemplate;
@@ -126,8 +127,8 @@ else if (rocketMQTemplates.size() > 1) {
 							mergedProperties.isEnableMsgTrace(),
 							mergedProperties.getCustomizedTraceTopic());
 					producer.setVipChannelEnabled(false);
-					producer.setInstanceName(
-							RocketMQUtil.getInstanceName(rpcHook, destination.getName()));
+					producer.setInstanceName(RocketMQUtil.getInstanceName(rpcHook,
+							destination.getName() + "|" + UtilAll.getPid()));
 				}
 				else {
 					producer = new DefaultMQProducer(producerGroup);

File: spring-cloud-stream-binder-rocketmq/src/main/java/org/springframework/cloud/stream/binder/rocketmq/consuming/RocketMQListenerBindingContainer.java
Patch:
@@ -31,6 +31,7 @@
 import org.apache.rocketmq.client.consumer.listener.MessageListenerOrderly;
 import org.apache.rocketmq.client.consumer.rebalance.AllocateMessageQueueAveragely;
 import org.apache.rocketmq.client.exception.MQClientException;
+import org.apache.rocketmq.common.UtilAll;
 import org.apache.rocketmq.common.message.MessageExt;
 import org.apache.rocketmq.remoting.RPCHook;
 import org.apache.rocketmq.spring.annotation.ConsumeMode;
@@ -206,7 +207,8 @@ private void initRocketMQPushConsumer() throws MQClientException {
 					new AllocateMessageQueueAveragely(),
 					rocketBinderConfigurationProperties.isEnableMsgTrace(),
 					rocketBinderConfigurationProperties.getCustomizedTraceTopic());
-			consumer.setInstanceName(RocketMQUtil.getInstanceName(rpcHook, topic));
+			consumer.setInstanceName(RocketMQUtil.getInstanceName(rpcHook,
+					topic + "|" + UtilAll.getPid()));
 			consumer.setVipChannelEnabled(false);
 		}
 		else {

File: spring-cloud-alibaba-seata/src/main/java/org/springframework/cloud/alibaba/seata/feign/SeataFeignClientAutoConfiguration.java
Patch:
@@ -65,7 +65,7 @@ Feign.Builder feignBuilder(BeanFactory beanFactory) {
 	protected static class FeignBeanPostProcessorConfiguration {
 
 		@Bean
-        SeataBeanPostProcessor seataBeanPostProcessor(
+		SeataBeanPostProcessor seataBeanPostProcessor(
 				SeataFeignObjectWrapper seataFeignObjectWrapper) {
 			return new SeataBeanPostProcessor(seataFeignObjectWrapper);
 		}

File: spring-cloud-alibaba-seata/src/main/java/org/springframework/cloud/alibaba/seata/feign/SeataFeignContext.java
Patch:
@@ -32,7 +32,7 @@ public class SeataFeignContext extends FeignContext {
 	private final FeignContext delegate;
 
 	SeataFeignContext(SeataFeignObjectWrapper seataFeignObjectWrapper,
-					  FeignContext delegate) {
+			FeignContext delegate) {
 		this.seataFeignObjectWrapper = seataFeignObjectWrapper;
 		this.delegate = delegate;
 	}

File: spring-cloud-alibaba-seata/src/main/java/org/springframework/cloud/alibaba/seata/feign/SeataFeignClientAutoConfiguration.java
Patch:
@@ -65,7 +65,7 @@ Feign.Builder feignBuilder(BeanFactory beanFactory) {
 	protected static class FeignBeanPostProcessorConfiguration {
 
 		@Bean
-        SeataBeanPostProcessor seataBeanPostProcessor(
+		SeataBeanPostProcessor seataBeanPostProcessor(
 				SeataFeignObjectWrapper seataFeignObjectWrapper) {
 			return new SeataBeanPostProcessor(seataFeignObjectWrapper);
 		}

File: spring-cloud-alibaba-seata/src/main/java/org/springframework/cloud/alibaba/seata/feign/SeataFeignContext.java
Patch:
@@ -32,7 +32,7 @@ public class SeataFeignContext extends FeignContext {
 	private final FeignContext delegate;
 
 	SeataFeignContext(SeataFeignObjectWrapper seataFeignObjectWrapper,
-					  FeignContext delegate) {
+			FeignContext delegate) {
 		this.seataFeignObjectWrapper = seataFeignObjectWrapper;
 		this.delegate = delegate;
 	}

File: spring-cloud-alibaba-sentinel-gateway/src/main/java/org/springframework/cloud/alibaba/sentinel/gateway/scg/SentinelSCGAutoConfiguration.java
Patch:
@@ -111,7 +111,8 @@ public Mono<ServerResponse> handleRequest(ServerWebExchange exchange,
 							Throwable t) {
 						return ServerResponse
 								.status(fallbackProperties.getResponseStatus())
-								.contentType(MediaType.APPLICATION_JSON_UTF8)
+								.contentType(MediaType
+										.valueOf(fallbackProperties.getContentType()))
 								.body(fromObject(fallbackProperties.getResponseBody()));
 					}
 				});

File: spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/endpoint/NacosConfigEndpoint.java
Patch:
@@ -41,7 +41,7 @@ public class NacosConfigEndpoint {
 
 	private final NacosRefreshHistory refreshHistory;
 
-	private ThreadLocal<DateFormat> dateFormat = new ThreadLocal<DateFormat>(){
+	private ThreadLocal<DateFormat> dateFormat = new ThreadLocal<DateFormat>() {
 		@Override
 		protected DateFormat initialValue() {
 			return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

File: spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/refresh/NacosRefreshHistory.java
Patch:
@@ -27,7 +27,7 @@ public class NacosRefreshHistory {
 
 	private LinkedList<Record> records = new LinkedList<>();
 
-	private ThreadLocal<DateFormat> dateFormat = new ThreadLocal<DateFormat>(){
+	private ThreadLocal<DateFormat> dateFormat = new ThreadLocal<DateFormat>() {
 		@Override
 		protected DateFormat initialValue() {
 			return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

File: spring-cloud-alicloud-acm/src/main/java/org/springframework/cloud/alicloud/acm/endpoint/AcmEndpoint.java
Patch:
@@ -44,7 +44,7 @@ public class AcmEndpoint {
 
 	private final AcmPropertySourceRepository propertySourceRepository;
 
-	private ThreadLocal<DateFormat> dateFormat = new ThreadLocal<DateFormat>(){
+	private ThreadLocal<DateFormat> dateFormat = new ThreadLocal<DateFormat>() {
 		@Override
 		protected DateFormat initialValue() {
 			return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

File: spring-cloud-alicloud-acm/src/main/java/org/springframework/cloud/alicloud/acm/refresh/AcmRefreshHistory.java
Patch:
@@ -30,7 +30,7 @@ public class AcmRefreshHistory {
 
 	private LinkedList<Record> records = new LinkedList<>();
 
-	private ThreadLocal<DateFormat> dateFormat = new ThreadLocal<DateFormat>(){
+	private ThreadLocal<DateFormat> dateFormat = new ThreadLocal<DateFormat>() {
 		@Override
 		protected DateFormat initialValue() {
 			return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/NacosDiscoveryAutoConfiguration.java
Patch:
@@ -17,12 +17,9 @@
 package org.springframework.cloud.alibaba.nacos;
 
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
-import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
-import org.springframework.cloud.alibaba.nacos.discovery.NacosDiscoveryClientAutoConfiguration;
 import org.springframework.cloud.alibaba.nacos.registry.NacosAutoServiceRegistration;
 import org.springframework.cloud.alibaba.nacos.registry.NacosRegistration;
 import org.springframework.cloud.alibaba.nacos.registry.NacosServiceRegistry;

File: spring-cloud-alicloud-sms/src/main/java/org/springframework/cloud/alicloud/sms/base/DefaultAlicomMessagePuller.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.springframework.cloud.alicloud.sms.base;
 
-import java.text.DateFormat;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
 import java.util.Date;
@@ -159,9 +158,9 @@ public void run() {
 					if (!polling) {
 						popMsg = queue.popMessage();
 						if (debugLogOpen) {
-							ThreadLocal<DateFormat> format = new ThreadLocal<DateFormat>(){
+							ThreadLocal<SimpleDateFormat> format = new ThreadLocal<SimpleDateFormat>(){
 								@Override
-								protected DateFormat initialValue() {
+								protected SimpleDateFormat initialValue() {
 									return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 								}
 							};

File: spring-cloud-alicloud-sms/src/main/java/org/springframework/cloud/alicloud/sms/base/TokenGetterForAlicom.java
Patch:
@@ -77,7 +77,7 @@ private void init() throws ClientException {
 	}
 
 	private TokenForAlicom getTokenFromRemote(String messageType)
-			throws ServerException, ClientException, ParseException {
+			throws ClientException, ParseException {
 		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
 		df.setTimeZone(TimeZone.getTimeZone("Asia/Shanghai"));
 		QueryTokenForMnsQueueRequest request = new QueryTokenForMnsQueueRequest();
@@ -109,7 +109,7 @@ private TokenForAlicom getTokenFromRemote(String messageType)
 
 	public TokenForAlicom getTokenByMessageType(String messageType, String queueName,
 			String mnsAccountEndpoint)
-			throws ServerException, ClientException, ParseException {
+			throws ClientException, ParseException {
 		TokenForAlicom token = tokenMap.get(messageType);
 		Long now = System.currentTimeMillis();
 		if (token == null || (token.getExpireTime() - now) < bufferTime) {// 过期时间小于2分钟则重新获取，防止服务器时间误差

File: spring-cloud-alibaba-sentinel-datasource/src/main/java/org/springframework/cloud/alibaba/sentinel/datasource/RuleType.java
Patch:
@@ -46,11 +46,11 @@ public enum RuleType {
 	/**
 	 * gateway flow
 	 */
-	GATEWAY("gateway-flow", GatewayFlowRule.class),
+	GW_FLOW("gw-flow", GatewayFlowRule.class),
 	/**
 	 * api
 	 */
-	API("api", ApiDefinition.class);
+    GW_API_GROUP("gw-api-group", ApiDefinition.class);
 
 	/**
 	 * alias for {@link AbstractRule}

File: spring-cloud-alibaba-sentinel-zuul/src/main/java/org/springframework/cloud/alibaba/sentinel/zuul/handler/FallBackProviderHandler.java
Patch:
@@ -8,9 +8,9 @@
 import org.springframework.beans.factory.SmartInitializingSingleton;
 import org.springframework.beans.factory.support.DefaultListableBeanFactory;
 
-import com.alibaba.csp.sentinel.adapter.zuul.fallback.DefaultBlockFallbackProvider;
-import com.alibaba.csp.sentinel.adapter.zuul.fallback.ZuulBlockFallbackManager;
-import com.alibaba.csp.sentinel.adapter.zuul.fallback.ZuulBlockFallbackProvider;
+import com.alibaba.csp.sentinel.adapter.gateway.zuul.fallback.DefaultBlockFallbackProvider;
+import com.alibaba.csp.sentinel.adapter.gateway.zuul.fallback.ZuulBlockFallbackManager;
+import com.alibaba.csp.sentinel.adapter.gateway.zuul.fallback.ZuulBlockFallbackProvider;
 
 /**
  * @author tiger

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/autoconfigure/DubboMetadataAutoConfiguration.java
Patch:
@@ -56,7 +56,7 @@
 public class DubboMetadataAutoConfiguration {
 
     @Autowired
-    private DubboServiceMetadataRepository dubboServiceMetadataRepository;
+    private ObjectProvider<DubboServiceMetadataRepository> dubboServiceMetadataRepository;
 
     @Autowired
     private MetadataResolver metadataResolver;
@@ -100,7 +100,7 @@ public void onContextClosed() {
     }
 
     private void publishServiceRestMetadata(ServiceBean serviceBean) {
-        dubboServiceMetadataRepository.publishServiceRestMetadata(metadataResolver.resolveServiceRestMetadata(serviceBean));
+        dubboServiceMetadataRepository.getIfAvailable().publishServiceRestMetadata(metadataResolver.resolveServiceRestMetadata(serviceBean));
     }
 
     private void unExportDubboMetadataConfigService() {

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/service/DubboMetadataServiceExporter.java
Patch:
@@ -23,6 +23,7 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.stereotype.Component;
@@ -45,7 +46,7 @@ public class DubboMetadataServiceExporter {
     private ApplicationConfig applicationConfig;
 
     @Autowired
-    private DubboMetadataService dubboMetadataService;
+    private ObjectProvider<DubboMetadataService> dubboMetadataService;
 
     @Autowired
     private Supplier<ProtocolConfig> protocolConfigSupplier;
@@ -74,7 +75,7 @@ public List<URL> export() {
             serviceConfig.setVersion(DubboMetadataService.VERSION);
             // Use current Spring application name as the Dubbo Service group
             serviceConfig.setGroup(currentApplicationName);
-            serviceConfig.setRef(dubboMetadataService);
+            serviceConfig.setRef(dubboMetadataService.getIfAvailable());
             serviceConfig.setApplication(applicationConfig);
             serviceConfig.setProtocol(protocolConfigSupplier.get());
 

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/registry/SpringCloudRegistry.java
Patch:
@@ -50,12 +50,12 @@ public class SpringCloudRegistry extends AbstractSpringCloudRegistry {
     /**
      * The property name of Dubbo {@link URL URLs} metadata
      */
-    public static final String DUBBO_URLS_METADATA_PROPERTY_NAME = "dubbo-urls";
+    public static final String DUBBO_URLS_METADATA_PROPERTY_NAME = "dubbo.urls";
 
     /**
      * The parameter name of the services of Dubbo Provider
      */
-    public static final String DUBBO_PROVIDER_SERVICES_PARAM_NAME = "dubbo-provider-services";
+    public static final String DUBBO_PROVIDER_SERVICES_PARAM_NAME = "dubbo.provider-services";
 
     /**
      * All services of Dubbo Provider

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/autoconfigure/DubboServiceAutoConfiguration.java
Patch:
@@ -92,6 +92,7 @@ public RegistrationFactoryProvider registrationFactoryProvider() {
     @Bean(name = BASE_PACKAGES_PROPERTY_RESOLVER_BEAN_NAME)
     public PropertyResolver dubboScanBasePackagesPropertyResolver(ConfigurableEnvironment environment) {
         ConfigurableEnvironment propertyResolver = new AbstractEnvironment() {
+            @Override
             protected void customizePropertySources(MutablePropertySources propertySources) {
                 Map<String, Object> dubboScanProperties = PropertySourcesUtils.getSubProperties(environment, DUBBO_SCAN_PREFIX);
                 propertySources.addLast(new MapPropertySource("dubboScanProperties", dubboScanProperties));

File: spring-cloud-stream-binder-rocketmq/src/main/java/org/springframework/cloud/stream/binder/rocketmq/config/RocketMQComponent4BinderAutoConfiguration.java
Patch:
@@ -67,6 +67,9 @@ public DefaultMQProducer defaultMQProducer() {
 		else {
 			producer = new DefaultMQProducer(RocketMQBinderConstants.DEFAULT_GROUP);
 		}
+		if(StringUtils.isEmpty(configNameServer)) {
+		    configNameServer = RocketMQBinderConstants.DEFAULT_NAME_SERVER;
+        }
 		producer.setNamesrvAddr(configNameServer);
 		return producer;
 	}

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/discovery/NacosDiscoveryClientAutoConfiguration.java
Patch:
@@ -18,6 +18,8 @@
 
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.cloud.alibaba.nacos.ConditionalOnNacosDiscoveryEnabled;
 import org.springframework.cloud.alibaba.nacos.NacosDiscoveryProperties;
@@ -45,6 +47,7 @@ public DiscoveryClient nacosDiscoveryClient(
 
 	@Bean
 	@ConditionalOnMissingBean
+	@ConditionalOnProperty(value = "spring.cloud.nacos.discovery.watch.enabled", matchIfMissing = true)
 	public NacosWatch nacosWatch(NacosDiscoveryProperties nacosDiscoveryProperties) {
 		return new NacosWatch(nacosDiscoveryProperties);
 	}

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/discovery/NacosDiscoveryClientAutoConfiguration.java
Patch:
@@ -18,6 +18,8 @@
 
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.cloud.alibaba.nacos.ConditionalOnNacosDiscoveryEnabled;
 import org.springframework.cloud.alibaba.nacos.NacosDiscoveryProperties;
@@ -45,6 +47,7 @@ public DiscoveryClient nacosDiscoveryClient(
 
 	@Bean
 	@ConditionalOnMissingBean
+	@ConditionalOnProperty(value = "spring.cloud.nacos.discovery.watch.enabled", matchIfMissing = true)
 	public NacosWatch nacosWatch(NacosDiscoveryProperties nacosDiscoveryProperties) {
 		return new NacosWatch(nacosDiscoveryProperties);
 	}

File: spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/feign/SentinelInvocationHandler.java
Patch:
@@ -95,7 +95,7 @@ else if ("toString".equals(method.getName())) {
 							+ Feign.configKey(method.getDeclaringClass(), method));
 			// resource default is HttpMethod:protocol://url
 			String resourceName = methodMetadata.template().method().toUpperCase() + ":"
-					+ hardCodedTarget.url() + methodMetadata.template().url();
+					+ hardCodedTarget.url() + methodMetadata.template().path();
 			Entry entry = null;
 			try {
 				ContextUtil.enter(resourceName);
@@ -128,7 +128,7 @@ else if ("toString".equals(method.getName())) {
 			}
 			finally {
 				if (entry != null) {
-					entry.exit();
+					entry.exit(1, args);
 				}
 				ContextUtil.exit();
 			}

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/registry/apache/zookeeper/ZookeeperRegistrationFactory.java
Patch:
@@ -44,6 +44,9 @@ public ZookeeperRegistration create(ServiceInstance serviceInstance, Configurabl
                 .port(serviceInstance.getPort())
                 .build();
 
+        // To trigger build() method
+        registration.getServiceInstance();
+
         return registration;
     }
 }

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/registry/apache/zookeeper/ZookeeperRegistrationFactory.java
Patch:
@@ -44,6 +44,9 @@ public ZookeeperRegistration create(ServiceInstance serviceInstance, Configurabl
                 .port(serviceInstance.getPort())
                 .build();
 
+        // To trigger build() method
+        registration.getServiceInstance();
+
         return registration;
     }
 }

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/registry/netflix/eureka/EurekaRegistrationFactory.java
Patch:
@@ -49,6 +49,7 @@ public EurekaRegistration create(ServiceInstance serviceInstance, ConfigurableAp
         eurekaInstanceConfigBean.setSecureVirtualHostName(serviceId);
         eurekaInstanceConfigBean.setAppname(serviceId);
         eurekaInstanceConfigBean.setHostname(serviceInstance.getHost());
+        eurekaInstanceConfigBean.setNonSecurePort(serviceInstance.getPort());
         eurekaInstanceConfigBean.setMetadataMap(serviceInstance.getMetadata());
 
         return EurekaRegistration.builder(eurekaInstanceConfigBean)

File: spring-cloud-alibaba-examples/fescar-example/account-service/src/main/java/org/springframework/cloud/alibaba/cloud/examples/DatabaseConfiguration.java
Patch:
@@ -52,7 +52,7 @@ public DruidDataSource storageDataSource() throws SQLException {
 		String password = environment.getProperty("mysql.user.password");
 
 		DruidDataSource druidDataSource = new DruidDataSource();
-		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName);
+		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName + "?serverTimezone=UTC");
 		druidDataSource.setUsername(userName);
 		druidDataSource.setPassword(password);
 		druidDataSource.setDriverClassName("com.mysql.jdbc.Driver");

File: spring-cloud-alibaba-examples/fescar-example/order-service/src/main/java/org/springframework/cloud/alibaba/cloud/examples/DatabaseConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public DruidDataSource storageDataSource() throws SQLException {
 		String password = env.getProperty("mysql.user.password");
 
 		DruidDataSource druidDataSource = new DruidDataSource();
-		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName);
+		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName + "?serverTimezone=UTC");
 		druidDataSource.setUsername(userName);
 		druidDataSource.setPassword(password);
 		druidDataSource.setDriverClassName("com.mysql.jdbc.Driver");

File: spring-cloud-alibaba-examples/fescar-example/storage-service/src/main/java/org/springframework/cloud/alibaba/cloud/examples/DatabaseConfiguration.java
Patch:
@@ -52,7 +52,7 @@ public DruidDataSource storageDataSource() throws SQLException {
 		String password = environment.getProperty("mysql.user.password");
 
 		DruidDataSource druidDataSource = new DruidDataSource();
-		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName);
+		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName + "?serverTimezone=UTC");
 		druidDataSource.setUsername(userName);
 		druidDataSource.setPassword(password);
 		druidDataSource.setDriverClassName("com.mysql.jdbc.Driver");

File: spring-cloud-alibaba-examples/fescar-example/account-service/src/main/java/org/springframework/cloud/alibaba/cloud/examples/DatabaseConfiguration.java
Patch:
@@ -52,7 +52,7 @@ public DruidDataSource storageDataSource() throws SQLException {
 		String password = environment.getProperty("mysql.user.password");
 
 		DruidDataSource druidDataSource = new DruidDataSource();
-		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName);
+		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName + "?serverTimezone=UTC");
 		druidDataSource.setUsername(userName);
 		druidDataSource.setPassword(password);
 		druidDataSource.setDriverClassName("com.mysql.jdbc.Driver");

File: spring-cloud-alibaba-examples/fescar-example/order-service/src/main/java/org/springframework/cloud/alibaba/cloud/examples/DatabaseConfiguration.java
Patch:
@@ -51,7 +51,7 @@ public DruidDataSource storageDataSource() throws SQLException {
 		String password = env.getProperty("mysql.user.password");
 
 		DruidDataSource druidDataSource = new DruidDataSource();
-		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName);
+		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName + "?serverTimezone=UTC");
 		druidDataSource.setUsername(userName);
 		druidDataSource.setPassword(password);
 		druidDataSource.setDriverClassName("com.mysql.jdbc.Driver");

File: spring-cloud-alibaba-examples/fescar-example/storage-service/src/main/java/org/springframework/cloud/alibaba/cloud/examples/DatabaseConfiguration.java
Patch:
@@ -52,7 +52,7 @@ public DruidDataSource storageDataSource() throws SQLException {
 		String password = environment.getProperty("mysql.user.password");
 
 		DruidDataSource druidDataSource = new DruidDataSource();
-		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName);
+		druidDataSource.setUrl("jdbc:mysql://" + ip + ":" + port + "/" + dbName + "?serverTimezone=UTC");
 		druidDataSource.setUsername(userName);
 		druidDataSource.setPassword(password);
 		druidDataSource.setDriverClassName("com.mysql.jdbc.Driver");

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/http/matcher/HttpRequestHeadersMatcher.java
Patch:
@@ -18,6 +18,7 @@
 
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpRequest;
+import org.springframework.util.CollectionUtils;
 
 import java.util.Collection;
 import java.util.LinkedHashSet;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/service/parameter/AbstractDubboGenericServiceParameterResolver.java
Patch:
@@ -20,6 +20,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.core.convert.ConversionService;
+import org.springframework.format.support.DefaultFormattingConversionService;
 import org.springframework.format.support.FormattingConversionService;
 
 import static org.springframework.context.ConfigurableApplicationContext.CONVERSION_SERVICE_BEAN_NAME;
@@ -37,7 +38,7 @@ public abstract class AbstractDubboGenericServiceParameterResolver implements Du
 
     @Autowired(required = false)
     @Qualifier(CONVERSION_SERVICE_BEAN_NAME)
-    private ConversionService conversionService = new FormattingConversionService();
+    private ConversionService conversionService = new DefaultFormattingConversionService();
 
     private ClassLoader classLoader;
 

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/registry/NacosRegistration.java
Patch:
@@ -59,7 +59,7 @@ public void init() {
 		Environment env = context.getEnvironment();
 
 		String endpointBasePath = env.getProperty(MANAGEMENT_ENDPOINT_BASE_PATH);
-		if (StringUtils.isEmpty(endpointBasePath)) {
+		if (!StringUtils.isEmpty(endpointBasePath)) {
 			metadata.put(MANAGEMENT_ENDPOINT_BASE_PATH, endpointBasePath);
 		}
 

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/autoconfigure/DubboMetadataAutoConfiguration.java
Patch:
@@ -16,9 +16,8 @@
  */
 package org.springframework.cloud.alibaba.dubbo.autoconfigure;
 
-import com.alibaba.dubbo.config.ProtocolConfig;
-import com.alibaba.dubbo.config.spring.context.annotation.DubboComponentScan;
-
+import org.apache.dubbo.config.ProtocolConfig;
+import org.apache.dubbo.config.spring.context.annotation.DubboComponentScan;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.cloud.alibaba.dubbo.metadata.repository.DubboServiceMetadataRepository;
 import org.springframework.cloud.alibaba.dubbo.service.DubboGenericServiceFactory;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/autoconfigure/DubboRestMetadataRegistrationAutoConfiguration.java
Patch:
@@ -16,9 +16,8 @@
  */
 package org.springframework.cloud.alibaba.dubbo.autoconfigure;
 
-import com.alibaba.dubbo.config.spring.ServiceBean;
-import com.alibaba.dubbo.config.spring.context.event.ServiceBeanExportedEvent;
-
+import org.apache.dubbo.config.spring.ServiceBean;
+import org.apache.dubbo.config.spring.context.event.ServiceBeanExportedEvent;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/client/loadbalancer/DubboClientHttpResponse.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.client.loadbalancer;
 
-import com.alibaba.dubbo.rpc.service.GenericException;
-
+import org.apache.dubbo.rpc.service.GenericException;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.client.ClientHttpResponse;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/client/loadbalancer/DubboClientHttpResponseFactory.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.client.loadbalancer;
 
-import com.alibaba.dubbo.rpc.service.GenericException;
-
+import org.apache.dubbo.rpc.service.GenericException;
 import org.springframework.cloud.alibaba.dubbo.http.converter.HttpMessageConverterHolder;
 import org.springframework.cloud.alibaba.dubbo.http.util.HttpMessageConverterResolver;
 import org.springframework.cloud.alibaba.dubbo.metadata.RequestMetadata;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/client/loadbalancer/DubboTransporterInterceptor.java
Patch:
@@ -16,9 +16,8 @@
  */
 package org.springframework.cloud.alibaba.dubbo.client.loadbalancer;
 
-import com.alibaba.dubbo.rpc.service.GenericException;
-import com.alibaba.dubbo.rpc.service.GenericService;
-
+import org.apache.dubbo.rpc.service.GenericException;
+import org.apache.dubbo.rpc.service.GenericService;
 import org.springframework.cloud.alibaba.dubbo.http.MutableHttpServerRequest;
 import org.springframework.cloud.alibaba.dubbo.metadata.DubboServiceMetadata;
 import org.springframework.cloud.alibaba.dubbo.metadata.DubboTransportedMetadata;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/http/ByteArrayHttpInputMessage.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.http;
 
-import com.alibaba.dubbo.common.io.UnsafeByteArrayInputStream;
-
+import org.apache.dubbo.common.io.UnsafeByteArrayInputStream;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpInputMessage;
 

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/metadata/resolver/DubboServiceBeanMetadataResolver.java
Patch:
@@ -16,13 +16,12 @@
  */
 package org.springframework.cloud.alibaba.dubbo.metadata.resolver;
 
-import com.alibaba.dubbo.common.URL;
-import com.alibaba.dubbo.config.spring.ServiceBean;
-
 import feign.Contract;
 import feign.Feign;
 import feign.MethodMetadata;
 import feign.Util;
+import org.apache.dubbo.common.URL;
+import org.apache.dubbo.config.spring.ServiceBean;
 import org.springframework.beans.BeanUtils;
 import org.springframework.beans.factory.BeanClassLoaderAware;
 import org.springframework.beans.factory.ObjectProvider;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/metadata/resolver/MetadataResolver.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.metadata.resolver;
 
-import com.alibaba.dubbo.config.spring.ServiceBean;
-
+import org.apache.dubbo.config.spring.ServiceBean;
 import org.springframework.cloud.alibaba.dubbo.metadata.RestMethodMetadata;
 import org.springframework.cloud.alibaba.dubbo.metadata.ServiceRestMetadata;
 

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/openfeign/DubboInvocationHandler.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.openfeign;
 
-import com.alibaba.dubbo.rpc.service.GenericService;
-
+import org.apache.dubbo.rpc.service.GenericService;
 import org.springframework.cloud.alibaba.dubbo.metadata.RestMethodMetadata;
 import org.springframework.cloud.alibaba.dubbo.service.DubboGenericServiceExecutionContext;
 import org.springframework.cloud.alibaba.dubbo.service.DubboGenericServiceExecutionContextFactory;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/openfeign/FeignMethodMetadata.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.openfeign;
 
-import com.alibaba.dubbo.rpc.service.GenericService;
-
+import org.apache.dubbo.rpc.service.GenericService;
 import org.springframework.cloud.alibaba.dubbo.metadata.RestMethodMetadata;
 
 import java.lang.reflect.Method;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/openfeign/TargeterInvocationHandler.java
Patch:
@@ -17,10 +17,9 @@
 package org.springframework.cloud.alibaba.dubbo.openfeign;
 
 
-import com.alibaba.dubbo.rpc.service.GenericService;
-
 import feign.Contract;
 import feign.Target;
+import org.apache.dubbo.rpc.service.GenericService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.cloud.alibaba.dubbo.annotation.DubboTransported;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/registry/DefaultRegistrationFactory.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.registry;
 
-import com.alibaba.dubbo.common.URL;
-
+import org.apache.dubbo.common.URL;
 import org.springframework.cloud.client.serviceregistry.Registration;
 import org.springframework.context.ApplicationContext;
 

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/registry/RegistrationFactory.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.registry;
 
-import com.alibaba.dubbo.common.URL;
-
+import org.apache.dubbo.common.URL;
 import org.springframework.cloud.client.serviceregistry.Registration;
 import org.springframework.context.ApplicationContext;
 

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/registry/apache/zookeeper/ZookeeperRegistrationFactory.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.registry.apache.zookeeper;
 
-import com.alibaba.dubbo.common.URL;
-
+import org.apache.dubbo.common.URL;
 import org.springframework.cloud.alibaba.dubbo.registry.AbstractRegistrationFactory;
 import org.springframework.cloud.alibaba.dubbo.registry.RegistrationFactory;
 import org.springframework.cloud.client.ServiceInstance;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/registry/hashicorp/consul/ConsulRegistrationFactory.java
Patch:
@@ -16,9 +16,8 @@
  */
 package org.springframework.cloud.alibaba.dubbo.registry.hashicorp.consul;
 
-import com.alibaba.dubbo.common.URL;
-
 import com.ecwid.consul.v1.agent.model.NewService;
+import org.apache.dubbo.common.URL;
 import org.springframework.cloud.alibaba.dubbo.registry.AbstractRegistrationFactory;
 import org.springframework.cloud.alibaba.dubbo.registry.RegistrationFactory;
 import org.springframework.cloud.client.ServiceInstance;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/registry/netflix/eureka/EurekaRegistrationFactory.java
Patch:
@@ -16,10 +16,9 @@
  */
 package org.springframework.cloud.alibaba.dubbo.registry.netflix.eureka;
 
-import com.alibaba.dubbo.common.URL;
-
 import com.netflix.appinfo.HealthCheckHandler;
 import com.netflix.discovery.EurekaClientConfig;
+import org.apache.dubbo.common.URL;
 import org.springframework.beans.BeanUtils;
 import org.springframework.beans.factory.ObjectProvider;
 import org.springframework.cloud.alibaba.dubbo.registry.AbstractRegistrationFactory;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/service/DubboGenericServiceExecutionContext.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.service;
 
-import com.alibaba.dubbo.rpc.service.GenericService;
+import org.apache.dubbo.rpc.service.GenericService;
 
 /**
  * Dubbo {@link GenericService} execution context

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/service/DubboGenericServiceFactory.java
Patch:
@@ -16,9 +16,8 @@
  */
 package org.springframework.cloud.alibaba.dubbo.service;
 
-import com.alibaba.dubbo.config.spring.ReferenceBean;
-import com.alibaba.dubbo.rpc.service.GenericService;
-
+import org.apache.dubbo.config.spring.ReferenceBean;
+import org.apache.dubbo.rpc.service.GenericService;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.cloud.alibaba.dubbo.metadata.DubboServiceMetadata;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/service/DubboMetadataConfigServiceInvocationHandler.java
Patch:
@@ -16,7 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.service;
 
-import com.alibaba.dubbo.rpc.service.GenericService;
+import org.apache.dubbo.rpc.service.GenericService;
 
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/service/PublishingDubboMetadataConfigService.java
Patch:
@@ -16,11 +16,10 @@
  */
 package org.springframework.cloud.alibaba.dubbo.service;
 
-import com.alibaba.dubbo.config.annotation.Service;
-
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.fasterxml.jackson.databind.SerializationFeature;
+import org.apache.dubbo.config.annotation.Service;
 import org.springframework.cloud.alibaba.dubbo.metadata.ServiceRestMetadata;
 import org.springframework.util.CollectionUtils;
 

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/service/parameter/DubboGenericServiceParameterResolver.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.service.parameter;
 
-import com.alibaba.dubbo.rpc.service.GenericService;
-
+import org.apache.dubbo.rpc.service.GenericService;
 import org.springframework.cloud.alibaba.dubbo.http.HttpServerRequest;
 import org.springframework.cloud.alibaba.dubbo.metadata.MethodParameterMetadata;
 import org.springframework.cloud.alibaba.dubbo.metadata.RestMethodMetadata;

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-consumer-sample/src/main/java/org/springframework/cloud/alibaba/dubbo/bootstrap/DubboSpringCloudConsumerBootstrap.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.bootstrap;
 
-import com.alibaba.dubbo.config.annotation.Reference;
-
+import org.apache.dubbo.config.annotation.Reference;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.ApplicationRunner;
@@ -95,7 +94,7 @@ public String pathVariables(@PathVariable("p2") String path2,
     }
 
     @FeignClient("${provider.application.name}")
-    @DubboTransported
+    @DubboTransported()
     public interface DubboFeignRestService {
 
         @GetMapping(value = "/param")

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-provider-sample/src/main/java/org/springframework/cloud/alibaba/dubbo/service/StandardRestService.java
Patch:
@@ -16,8 +16,7 @@
  */
 package org.springframework.cloud.alibaba.dubbo.service;
 
-import com.alibaba.dubbo.rpc.RpcContext;
-
+import org.apache.dubbo.rpc.RpcContext;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.http.MediaType;
@@ -48,7 +47,7 @@
  *
  * @author <a href="mailto:mercyblitz@gmail.com">Mercy</a>
  */
-@com.alibaba.dubbo.config.annotation.Service(version = "1.0.0", protocol = {"dubbo", "rest"})
+@org.apache.dubbo.config.annotation.Service(version = "1.0.0", protocol = {"dubbo", "rest"})
 @RestController
 @Path("/")
 public class StandardRestService implements RestService {

File: spring-cloud-alibaba-sentinel-zuul/src/main/java/org/springframework/cloud/alibaba/sentinel/zuul/SentinelZuulAutoConfiguration.java
Patch:
@@ -45,13 +45,13 @@
  * @author tiger
  */
 @Configuration
-@ConditionalOnProperty(prefix = PREFIX, name = "enabled", havingValue = "true")
+@ConditionalOnProperty(prefix = PREFIX, name = "enabled", havingValue = "true", matchIfMissing = true)
 public class SentinelZuulAutoConfiguration {
 
 	@Autowired
 	private Environment environment;
 
-	public static final String PREFIX = "spring.cloud.alibaba.sentinel.zuul";
+	public static final String PREFIX = "spring.cloud.sentinel.zuul";
 
 	@Bean
 	public SentinelZuulProperties sentinelZuulProperties() {

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/NacosDiscoveryProperties.java
Patch:
@@ -57,7 +57,7 @@
 @ConfigurationProperties("spring.cloud.nacos.discovery")
 public class NacosDiscoveryProperties {
 
-	private static final Logger LOGGER = LoggerFactory
+	private static final Logger log = LoggerFactory
 			.getLogger(NacosDiscoveryProperties.class);
 
 	/**
@@ -413,7 +413,7 @@ public NamingService namingServiceInstance() {
 			namingService = NacosFactory.createNamingService(properties);
 		}
 		catch (Exception e) {
-			LOGGER.error("create naming service error!properties={},e=,", this, e);
+			log.error("create naming service error!properties={},e=,", this, e);
 			return null;
 		}
 		return namingService;

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/discovery/NacosDiscoveryClient.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class NacosDiscoveryClient implements DiscoveryClient {
 
-	private static final Logger LOGGER = LoggerFactory
+	private static final Logger log = LoggerFactory
 			.getLogger(NacosDiscoveryClient.class);
 	public static final String DESCRIPTION = "Spring Cloud Nacos Discovery Client";
 
@@ -100,7 +100,7 @@ public List<String> getServices() {
 			return services.getData();
 		}
 		catch (Exception e) {
-			LOGGER.error("get service name from nacos server fail,", e);
+			log.error("get service name from nacos server fail,", e);
 			return Collections.emptyList();
 		}
 	}

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/endpoint/NacosDiscoveryEndpoint.java
Patch:
@@ -37,7 +37,7 @@
 @Endpoint(id = "nacos-discovery")
 public class NacosDiscoveryEndpoint {
 
-	private static final Logger LOGGER = LoggerFactory
+	private static final Logger log = LoggerFactory
 			.getLogger(NacosDiscoveryEndpoint.class);
 
 	private NacosDiscoveryProperties nacosDiscoveryProperties;
@@ -61,7 +61,7 @@ public Map<String, Object> nacosDiscovery() {
 			subscribe = namingService.getSubscribeServices();
 		}
 		catch (Exception e) {
-			LOGGER.error("get subscribe services from nacos fail,", e);
+			log.error("get subscribe services from nacos fail,", e);
 		}
 		result.put("subscribe", subscribe);
 		return result;

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/registry/NacosAutoServiceRegistration.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class NacosAutoServiceRegistration
 		extends AbstractAutoServiceRegistration<Registration> {
-	private static final Logger LOGGER = LoggerFactory
+	private static final Logger log = LoggerFactory
 			.getLogger(NacosAutoServiceRegistration.class);
 
 	private NacosRegistration registration;
@@ -65,7 +65,7 @@ protected NacosRegistration getManagementRegistration() {
 	@Override
 	protected void register() {
 		if (!this.registration.getNacosDiscoveryProperties().isRegisterEnabled()) {
-			LOGGER.debug("Registration disabled.");
+			log.debug("Registration disabled.");
 			return;
 		}
 		if (this.registration.getPort() < 0) {

File: spring-cloud-alicloud-ans/src/main/java/org/springframework/cloud/alicloud/ans/registry/AnsServiceRegistry.java
Patch:
@@ -45,7 +45,7 @@ public void register(AnsRegistration registration) {
 			return;
 		}
 		if (StringUtils.isEmpty(registration.getServiceId())) {
-			log.info("No service to register for client...");
+			log.warn("No service to register for client...");
 			return;
 		}
 
@@ -81,7 +81,7 @@ public void deregister(AnsRegistration registration) {
 		log.info("De-registering from ANSServer now...");
 
 		if (StringUtils.isEmpty(registration.getServiceId())) {
-			log.info("No dom to de-register for client...");
+			log.warn("No dom to de-register for client...");
 			return;
 		}
 

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-consumer-sample/src/main/java/org/springframework/cloud/alibaba/dubbo/bootstrap/DubboSpringCloudConsumerBootstrap.java
Patch:
@@ -209,7 +209,7 @@ public RestTemplate restTemplate() {
 
     public static void main(String[] args) {
         new SpringApplicationBuilder(DubboSpringCloudConsumerBootstrap.class)
-                .profiles("consul")
+                .profiles("nacos")
                 .run(args);
     }
 }

File: spring-cloud-alibaba-examples/spring-cloud-alibaba-dubbo-examples/spring-cloud-dubbo-provider-sample/src/main/java/org/springframework/cloud/alibaba/dubbo/bootstrap/DubboSpringCloudProviderBootstrap.java
Patch:
@@ -29,7 +29,7 @@ public class DubboSpringCloudProviderBootstrap {
 
     public static void main(String[] args) {
         new SpringApplicationBuilder(DubboSpringCloudProviderBootstrap.class)
-                .profiles("consul")
+                .profiles("nacos")
                 .run(args);
     }
 }

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/http/matcher/HttpRequestParamsMatcher.java
Patch:
@@ -45,11 +45,11 @@ public HttpRequestParamsMatcher(String... params) {
     @Override
     public boolean match(HttpRequest request) {
         for (ParamExpression paramExpression : expressions) {
-            if (!paramExpression.match(request)) {
-                return false;
+            if (paramExpression.match(request)) {
+                return true;
             }
         }
-        return true;
+        return false;
     }
 
     private static Set<ParamExpression> parseExpressions(String... params) {

File: spring-cloud-alibaba-dubbo/src/test/java/org/springframework/cloud/alibaba/dubbo/http/matcher/ProduceMediaTypeExpressionTest.java
Patch:
@@ -35,6 +35,6 @@ public void testMatch() {
         Assert.assertTrue(expression.match(Arrays.asList(MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON)));
 
         expression = createExpression(MediaType.APPLICATION_JSON_VALUE);
-        Assert.assertTrue(expression.match(Arrays.asList(MediaType.APPLICATION_XML)));
+        Assert.assertFalse(expression.match(Arrays.asList(MediaType.APPLICATION_XML)));
     }
 }

File: spring-cloud-alibaba-dubbo/src/test/java/org/springframework/cloud/alibaba/dubbo/metadata/RequestMetadataTest.java
Patch:
@@ -68,8 +68,8 @@ public void testEqualsAndHashCodeAndCompareTo() {
         metadata.addHeader("d", "1").addHeader("e", "2").addHeader("f", "3");
         metadata2.addHeader("d", "1").addHeader("e", "2");
 
-        Assert.assertEquals(metadata, metadata2);
-        Assert.assertEquals(metadata.hashCode(), metadata2.hashCode());
+        Assert.assertNotEquals(metadata, metadata2);
+        Assert.assertNotEquals(metadata.hashCode(), metadata2.hashCode());
     }
 
 //    @Test

File: spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/NacosConfigProperties.java
Patch:
@@ -56,7 +56,7 @@ public class NacosConfigProperties {
 	/**
 	 * whether to enable nacos config.
 	 */
-	private boolean enabled;
+	private boolean enabled = true;
 
 	/**
 	 * nacos config server address

File: spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/NacosConfigBootstrapConfiguration.java
Patch:
@@ -17,6 +17,7 @@
 package org.springframework.cloud.alibaba.nacos;
 
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.alibaba.nacos.client.NacosPropertySourceLocator;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -34,6 +35,7 @@ public NacosConfigProperties nacosConfigProperties() {
 	}
 
 	@Bean
+	@ConditionalOnProperty(name = "spring.cloud.nacos.config.enabled", matchIfMissing = true)
 	public NacosPropertySourceLocator nacosPropertySourceLocator(
 			NacosConfigProperties nacosConfigProperties) {
 		return new NacosPropertySourceLocator(nacosConfigProperties);

File: spring-cloud-alicloud-ans/src/test/java/org/springframework/cloud/alicloud/ans/registry/AnsAutoServiceRegistrationIpNetworkInterfaceTests.java
Patch:
@@ -64,7 +64,6 @@ public class AnsAutoServiceRegistrationIpNetworkInterfaceTests {
 	private InetUtils inetUtils;
 
 	@Test
-	@Ignore
 	public void contextLoads() throws Exception {
 
 		assertNotNull("AnsRegistration was not created", registration);
@@ -132,7 +131,7 @@ public static class TestConfig {
 							hasValidNetworkInterface = true;
 							netWorkInterfaceName = networkInterface.getName();
 							System.setProperty(
-									"spring.cloud.alicloud.ans.client-interface-ame",
+									"spring.cloud.alicloud.ans.client-interface-name",
 									networkInterface.getName());
 							break;
 						}

File: spring-cloud-alicloud-ans/src/test/java/org/springframework/cloud/alicloud/ans/registry/AnsAutoServiceRegistrationIpNetworkInterfaceTests.java
Patch:
@@ -64,7 +64,6 @@ public class AnsAutoServiceRegistrationIpNetworkInterfaceTests {
 	private InetUtils inetUtils;
 
 	@Test
-	@Ignore
 	public void contextLoads() throws Exception {
 
 		assertNotNull("AnsRegistration was not created", registration);
@@ -132,7 +131,7 @@ public static class TestConfig {
 							hasValidNetworkInterface = true;
 							netWorkInterfaceName = networkInterface.getName();
 							System.setProperty(
-									"spring.cloud.alicloud.ans.client-interface-ame",
+									"spring.cloud.alicloud.ans.client-interface-name",
 									networkInterface.getName());
 							break;
 						}

File: spring-cloud-alibaba-examples/nacos-example/nacos-discovery-example/nacos-discovery-provider-example/src/main/java/org/springframework/cloud/alibaba/cloud/examples/ProviderApplication.java
Patch:
@@ -13,7 +13,6 @@
  * @author xiaojing
  */
 @SpringBootApplication
-@EnableDiscoveryClient
 public class ProviderApplication {
 
 	public static void main(String[] args) {

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/NacosDiscoveryAutoConfiguration.java
Patch:
@@ -41,9 +41,7 @@
 @ConditionalOnNacosDiscoveryEnabled
 @ConditionalOnClass(name = "org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent")
 @ConditionalOnProperty(value = "spring.cloud.service-registry.auto-registration.enabled", matchIfMissing = true)
-@AutoConfigureBefore({ AutoServiceRegistrationAutoConfiguration.class,
-		NacosDiscoveryClientAutoConfiguration.class })
-@AutoConfigureAfter(AutoServiceRegistrationConfiguration.class)
+@AutoConfigureAfter(AutoServiceRegistrationAutoConfiguration.class)
 public class NacosDiscoveryAutoConfiguration {
 
 	@Bean

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/NacosDiscoveryAutoConfiguration.java
Patch:
@@ -41,9 +41,7 @@
 @ConditionalOnNacosDiscoveryEnabled
 @ConditionalOnClass(name = "org.springframework.boot.web.servlet.context.ServletWebServerInitializedEvent")
 @ConditionalOnProperty(value = "spring.cloud.service-registry.auto-registration.enabled", matchIfMissing = true)
-@AutoConfigureBefore({ AutoServiceRegistrationAutoConfiguration.class,
-		NacosDiscoveryClientAutoConfiguration.class })
-@AutoConfigureAfter(AutoServiceRegistrationConfiguration.class)
+@AutoConfigureAfter({ AutoServiceRegistrationAutoConfiguration.class })
 public class NacosDiscoveryAutoConfiguration {
 
 	@Bean

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/NacosDiscoveryProperties.java
Patch:
@@ -160,7 +160,7 @@ public void init() throws SocketException {
 			else {
 				NetworkInterface netInterface = NetworkInterface
 						.getByName(networkInterface);
-				if (null == networkInterface) {
+				if (null == netInterface) {
 					throw new IllegalArgumentException(
 							"no such interface " + networkInterface);
 				}

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/NacosDiscoveryProperties.java
Patch:
@@ -160,7 +160,7 @@ public void init() throws SocketException {
 			else {
 				NetworkInterface netInterface = NetworkInterface
 						.getByName(networkInterface);
-				if (null == networkInterface) {
+				if (null == netInterface) {
 					throw new IllegalArgumentException(
 							"no such interface " + networkInterface);
 				}

File: spring-cloud-alicloud-acm/src/main/java/org/springframework/cloud/alicloud/acm/endpoint/AcmEndpointAutoConfiguration.java
Patch:
@@ -51,6 +51,7 @@ public AcmEndpoint acmEndpoint() {
 	}
 
 	@Bean
+	@ConditionalOnMissingBean
 	public AcmHealthIndicator acmHealthIndicator(AcmProperties acmProperties,
 			AcmPropertySourceRepository acmPropertySourceRepository) {
 		return new AcmHealthIndicator(acmProperties, acmPropertySourceRepository);

File: spring-cloud-alicloud-oss/src/main/java/org/springframework/cloud/alicloud/oss/endpoint/OssEndpointAutoConfiguration.java
Patch:
@@ -34,7 +34,7 @@ public class OssEndpointAutoConfiguration {
 	@Bean
 	@ConditionalOnMissingBean
 	@ConditionalOnEnabledEndpoint
-	public OssEndpoint sentinelEndPoint() {
+	public OssEndpoint ossEndpoint() {
 		return new OssEndpoint();
 	}
 

File: spring-cloud-alicloud-acm/src/main/java/org/springframework/cloud/alicloud/acm/endpoint/AcmEndpointAutoConfiguration.java
Patch:
@@ -51,6 +51,7 @@ public AcmEndpoint acmEndpoint() {
 	}
 
 	@Bean
+	@ConditionalOnMissingBean
 	public AcmHealthIndicator acmHealthIndicator(AcmProperties acmProperties,
 			AcmPropertySourceRepository acmPropertySourceRepository) {
 		return new AcmHealthIndicator(acmProperties, acmPropertySourceRepository);

File: spring-cloud-alicloud-oss/src/main/java/org/springframework/cloud/alicloud/oss/endpoint/OssEndpointAutoConfiguration.java
Patch:
@@ -34,7 +34,7 @@ public class OssEndpointAutoConfiguration {
 	@Bean
 	@ConditionalOnMissingBean
 	@ConditionalOnEnabledEndpoint
-	public OssEndpoint sentinelEndPoint() {
+	public OssEndpoint ossEndpoint() {
 		return new OssEndpoint();
 	}
 

File: spring-cloud-alibaba-dubbo/src/main/java/org/springframework/cloud/alibaba/dubbo/autoconfigure/DubboMetadataAutoConfiguration.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.springframework.cloud.alibaba.dubbo.autoconfigure;
 
-import org.springframework.boot.autoconfigure.AutoConfigureOrder;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.cloud.alibaba.dubbo.metadata.repository.DubboServiceMetadataRepository;
 import org.springframework.cloud.alibaba.dubbo.metadata.service.MetadataConfigService;
@@ -25,7 +24,6 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.context.annotation.Import;
-import org.springframework.core.Ordered;
 
 /**
  * Spring Boot Auto-Configuration class for Dubbo Metadata
@@ -34,7 +32,6 @@
  */
 @Configuration
 @Import(DubboServiceMetadataRepository.class)
-@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)
 public class DubboMetadataAutoConfiguration {
 
     @Bean

File: spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/endpoint/SentinelEndpoint.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;
 import org.springframework.cloud.alibaba.sentinel.SentinelProperties;
@@ -67,7 +68,7 @@ public Map<String, Object> invoke() {
 			final Map<String, Object> rules = new HashMap<>();
 			result.put("rules", rules);
 			rules.put("flowRules", FlowRuleManager.getRules());
-			rules.put("degradeRules", SystemRuleManager.getRules());
+			rules.put("degradeRules", DegradeRuleManager.getRules());
 			rules.put("systemRules", SystemRuleManager.getRules());
 			rules.put("authorityRule", AuthorityRuleManager.getRules());
 			rules.put("paramFlowRule", ParamFlowRuleManager.getRules());

File: spring-cloud-alibaba-nacos-discovery/src/test/java/org/springframework/cloud/alibaba/nacos/ribbon/NacosRibbonClientConfigurationTests.java
Patch:
@@ -45,7 +45,6 @@ static class NacosRibbonTestConfiguration {
 
 		@Bean
 		IClientConfig iClientConfig() {
-			// return new IClientConfig.Builder().s.build();
 			DefaultClientConfigImpl config = new DefaultClientConfigImpl();
 			config.setClientName("myapp");
 			return config;

File: spring-cloud-alibaba-nacos-discovery/src/test/java/org/springframework/cloud/alibaba/nacos/test/NacosMockTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.nacos.api.naming.pojo.Instance;
 
 /**
- * @author yizhan
+ * @author xiaojing
  */
 public class NacosMockTest {
 

File: spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/client/NacosPropertySourceLocator.java
Patch:
@@ -106,7 +106,7 @@ private void loadSharedConfiguration(
             return;
         }
 
-        String[] sharedDataIdArry = sharedDataIds.split(SHARED_CONFIG_SEPRATOR_CHAR);
+        String[] sharedDataIdArry = sharedDataIds.split(SHARED_CONFIG_SEPARATOR_CHAR);
         checkDataIdFileExtension(sharedDataIdArry);
 
         for (int i = 0; i < sharedDataIdArry.length; i++) {
@@ -209,7 +209,7 @@ private boolean checkDataIdIsRefreshbable(String refreshDataIds,
             return false;
         }
 
-        String[] refreshDataIdArry = refreshDataIds.split(SHARED_CONFIG_SEPRATOR_CHAR);
+        String[] refreshDataIdArry = refreshDataIds.split(SHARED_CONFIG_SEPARATOR_CHAR);
         for (String refreshDataId : refreshDataIdArry) {
             if (refreshDataId.equals(sharedDataId)) {
                 return true;

File: spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/client/NacosPropertySourceLocator.java
Patch:
@@ -45,7 +45,7 @@ public class NacosPropertySourceLocator implements PropertySourceLocator {
 	private static final String NACOS_PROPERTY_SOURCE_NAME = "NACOS";
 	private static final String SEP1 = "-";
 	private static final String DOT = ".";
-	private static final String SHARED_CONFIG_SEPRATOR_CHAR = "[,]";
+	private static final String SHARED_CONFIG_SEPARATOR_CHAR = "[,]";
 	private static final List<String> SUPPORT_FILE_EXTENSION = Arrays.asList("properties",
 			"yaml", "yml");
 
@@ -106,7 +106,7 @@ private void loadSharedConfiguration(
 			return;
 		}
 
-		String[] sharedDataIdArry = sharedDataIds.split(SHARED_CONFIG_SEPRATOR_CHAR);
+		String[] sharedDataIdArry = sharedDataIds.split(SHARED_CONFIG_SEPARATOR_CHAR);
 		checkDataIdFileExtension(sharedDataIdArry);
 
 		for (int i = 0; i < sharedDataIdArry.length; i++) {
@@ -210,7 +210,7 @@ private boolean checkDataIdIsRefreshbable(String refreshDataIds,
 			return false;
 		}
 
-		String[] refreshDataIdArry = refreshDataIds.split(SHARED_CONFIG_SEPRATOR_CHAR);
+		String[] refreshDataIdArry = refreshDataIds.split(SHARED_CONFIG_SEPARATOR_CHAR);
 		for (String refreshDataId : refreshDataIdArry) {
 			if (refreshDataId.equals(sharedDataId)) {
 				return true;

File: spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/client/NacosPropertySourceLocator.java
Patch:
@@ -45,7 +45,7 @@ public class NacosPropertySourceLocator implements PropertySourceLocator {
 	private static final String NACOS_PROPERTY_SOURCE_NAME = "NACOS";
 	private static final String SEP1 = "-";
 	private static final String DOT = ".";
-	private static final String SHARED_CONFIG_SEPRATOR_CHAR = "[,]";
+	private static final String SHARED_CONFIG_SEPARATOR_CHAR = "[,]";
 	private static final List<String> SUPPORT_FILE_EXTENSION = Arrays.asList("properties",
 			"yaml", "yml");
 
@@ -106,7 +106,7 @@ private void loadSharedConfiguration(
 			return;
 		}
 
-		String[] sharedDataIdArry = sharedDataIds.split(SHARED_CONFIG_SEPRATOR_CHAR);
+		String[] sharedDataIdArry = sharedDataIds.split(SHARED_CONFIG_SEPARATOR_CHAR);
 		checkDataIdFileExtension(sharedDataIdArry);
 
 		for (int i = 0; i < sharedDataIdArry.length; i++) {
@@ -210,7 +210,7 @@ private boolean checkDataIdIsRefreshbable(String refreshDataIds,
 			return false;
 		}
 
-		String[] refreshDataIdArry = refreshDataIds.split(SHARED_CONFIG_SEPRATOR_CHAR);
+		String[] refreshDataIdArry = refreshDataIds.split(SHARED_CONFIG_SEPARATOR_CHAR);
 		for (String refreshDataId : refreshDataIdArry) {
 			if (refreshDataId.equals(sharedDataId)) {
 				return true;

File: spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/SentinelProperties.java
Patch:
@@ -246,7 +246,7 @@ public static class Transport {
 		/**
 		 * sentinel api port,default value is 8721 {@link TransportConfig#SERVER_PORT}
 		 */
-		private String port = "8721";
+		private String port = "8719";
 
 		/**
 		 * sentinel dashboard address, won't try to connect dashboard when address is

File: spring-cloud-alibaba-nacos-config/src/test/java/org/springframework/cloud/alibaba/nacos/NacosConfigAutoConfigurationTests.java
Patch:
@@ -47,9 +47,9 @@ public void setUp() throws Exception {
 				NacosConfigBootstrapConfiguration.class,
 				NacosConfigAutoConfiguration.class, TestConfiguration.class)
 						.web(WebApplicationType.NONE)
-						.run("--spring.application.name=myapp",
+						.run("--spring.cloud.nacos.config.name=myapp",
 								"--spring.cloud.config.enabled=true",
-								"--spring.cloud.nacos.config.server-addr=127.0.0.1:8080",
+								"--spring.cloud.nacos.config.server-addr=127.0.0.1:8848",
 								"--spring.cloud.nacos.config.prefix=test");
 	}
 

File: spring-cloud-alibaba-nacos-config/src/test/java/org/springframework/cloud/alibaba/nacos/NacosConfigBootstrapConfigurationTests.java
Patch:
@@ -43,9 +43,9 @@ public class NacosConfigBootstrapConfigurationTests {
 	public void setUp() throws Exception {
 		this.context = new SpringApplicationBuilder(
 				NacosConfigBootstrapConfiguration.class).web(WebApplicationType.NONE).run(
-						"--spring.application.name=myapp",
+						"--spring.cloud.nacos.config.name=myapp",
 						"--spring.cloud.config.enabled=true",
-						"--spring.cloud.nacos.config.server-addr=127.0.0.1:8080",
+						"--spring.cloud.nacos.config.server-addr=127.0.0.1:8848",
 						"--spring.cloud.nacos.config.prefix=test");
 	}
 

File: spring-cloud-alicloud-context/src/main/java/org/springframework/cloud/alicloud/context/oss/OssContextAutoConfiguration.java
Patch:
@@ -51,9 +51,9 @@ public OSS ossClient(AliCloudProperties aliCloudProperties,
 			Assert.isTrue(!StringUtils.isEmpty(ossProperties.getEndpoint()),
 					"Oss endpoint can't be empty.");
 			Assert.isTrue(!StringUtils.isEmpty(aliCloudProperties.getAccessKey()),
-					"Access key can't be empty.");
+					"${spring.cloud.alicloud.access-key} can't be empty.");
 			Assert.isTrue(!StringUtils.isEmpty(aliCloudProperties.getSecretKey()),
-					"Secret key can't be empty.");
+					"${spring.cloud.alicloud.secret-key} can't be empty.");
 			return new OSSClientBuilder().build(ossProperties.getEndpoint(),
 					aliCloudProperties.getAccessKey(), aliCloudProperties.getSecretKey(),
 					ossProperties.getConfig());

File: spring-cloud-alicloud-context/src/test/java/org/springframework/cloud/alicloud/context/AliCloudSpringApplicationTests.java
Patch:
@@ -33,7 +33,9 @@
 		"spring.application.name=myapp",
 		"spring.cloud.alicloud.edas.application.name=myapp",
 		"spring.cloud.alicloud.access-key=ak", "spring.cloud.alicloud.secret-key=sk",
-		"spring.cloud.alicloud.oss.endpoint=test" }, webEnvironment = RANDOM_PORT)
+		"spring.cloud.alicloud.oss.endpoint=test",
+		"spring.cloud.alicloud.scx.group-id=1-2-3-4",
+		"spring.cloud.alicloud.edas.namespace=cn-test" }, webEnvironment = RANDOM_PORT)
 @DirtiesContext
 public class AliCloudSpringApplicationTests {
 

File: spring-cloud-alicloud-context/src/main/java/org/springframework/cloud/alicloud/context/oss/OssContextAutoConfiguration.java
Patch:
@@ -51,9 +51,9 @@ public OSS ossClient(AliCloudProperties aliCloudProperties,
 			Assert.isTrue(!StringUtils.isEmpty(ossProperties.getEndpoint()),
 					"Oss endpoint can't be empty.");
 			Assert.isTrue(!StringUtils.isEmpty(aliCloudProperties.getAccessKey()),
-					"Access key can't be empty.");
+					"${spring.cloud.alicloud.access-key} can't be empty.");
 			Assert.isTrue(!StringUtils.isEmpty(aliCloudProperties.getSecretKey()),
-					"Secret key can't be empty.");
+					"${spring.cloud.alicloud.secret-key} can't be empty.");
 			return new OSSClientBuilder().build(ossProperties.getEndpoint(),
 					aliCloudProperties.getAccessKey(), aliCloudProperties.getSecretKey(),
 					ossProperties.getConfig());

File: spring-cloud-alicloud-context/src/test/java/org/springframework/cloud/alicloud/context/AliCloudSpringApplicationTests.java
Patch:
@@ -33,7 +33,9 @@
 		"spring.application.name=myapp",
 		"spring.cloud.alicloud.edas.application.name=myapp",
 		"spring.cloud.alicloud.access-key=ak", "spring.cloud.alicloud.secret-key=sk",
-		"spring.cloud.alicloud.oss.endpoint=test" }, webEnvironment = RANDOM_PORT)
+		"spring.cloud.alicloud.oss.endpoint=test",
+		"spring.cloud.alicloud.scx.group-id=1-2-3-4",
+		"spring.cloud.alicloud.edas.namespace=cn-test" }, webEnvironment = RANDOM_PORT)
 @DirtiesContext
 public class AliCloudSpringApplicationTests {
 

File: spring-cloud-alibaba-sentinel/src/test/java/org/springframework/cloud/alibaba/sentinel/SentinelAutoConfigurationTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.WebApplicationContextRunner;
 import org.springframework.boot.web.servlet.FilterRegistrationBean;
-import org.springframework.cloud.alibaba.sentinel.annotation.SentinelProtect;
+import org.springframework.cloud.alibaba.sentinel.annotation.SentinelRestTemplate;
 import org.springframework.cloud.alibaba.sentinel.custom.SentinelAutoConfiguration;
 import org.springframework.cloud.alibaba.sentinel.custom.SentinelBeanPostProcessor;
 import org.springframework.cloud.alibaba.sentinel.custom.SentinelProtectInterceptor;
@@ -92,13 +92,13 @@ public void testRestTemplate() {
 	static class SentinelTestConfiguration {
 
 		@Bean
-		@SentinelProtect
+		@SentinelRestTemplate
 		RestTemplate restTemplate() {
 			return new RestTemplate();
 		}
 
 		@Bean
-		@SentinelProtect(blockHandlerClass = ExceptionUtil.class, blockHandler = "handleException")
+		@SentinelRestTemplate(blockHandlerClass = ExceptionUtil.class, blockHandler = "handleException")
 		RestTemplate restTemplateWithBlockClass() {
 			return new RestTemplate();
 		}

File: spring-cloud-alibaba-sentinel/src/test/java/org/springframework/cloud/alibaba/sentinel/SentinelAutoConfigurationTests.java
Patch:
@@ -22,7 +22,7 @@
 import org.springframework.boot.autoconfigure.AutoConfigurations;
 import org.springframework.boot.test.context.runner.WebApplicationContextRunner;
 import org.springframework.boot.web.servlet.FilterRegistrationBean;
-import org.springframework.cloud.alibaba.sentinel.annotation.SentinelProtect;
+import org.springframework.cloud.alibaba.sentinel.annotation.SentinelRestTemplate;
 import org.springframework.cloud.alibaba.sentinel.custom.SentinelAutoConfiguration;
 import org.springframework.cloud.alibaba.sentinel.custom.SentinelBeanPostProcessor;
 import org.springframework.cloud.alibaba.sentinel.custom.SentinelProtectInterceptor;
@@ -92,13 +92,13 @@ public void testRestTemplate() {
 	static class SentinelTestConfiguration {
 
 		@Bean
-		@SentinelProtect
+		@SentinelRestTemplate
 		RestTemplate restTemplate() {
 			return new RestTemplate();
 		}
 
 		@Bean
-		@SentinelProtect(blockHandlerClass = ExceptionUtil.class, blockHandler = "handleException")
+		@SentinelRestTemplate(blockHandlerClass = ExceptionUtil.class, blockHandler = "handleException")
 		RestTemplate restTemplateWithBlockClass() {
 			return new RestTemplate();
 		}

File: spring-cloud-stream-binder-rocketmq/src/main/java/org/springframework/cloud/stream/binder/rocketmq/integration/RocketMQInboundChannelAdapter.java
Patch:
@@ -189,14 +189,14 @@ public Acknowledgement recover(RetryContext context)
 			}
 			catch (Exception e) {
 				logger.error(
-						"Rocket Message hasn't been processed successfully. Caused by ",
+						"RocketMQ Message hasn't been processed successfully. Caused by ",
 						e);
 				instrumentationManager
 						.getConsumerInstrumentation(
 								RocketMQInboundChannelAdapter.this.destination)
 						.markConsumedFailure();
 				throw new RuntimeException(
-						"Rocket Message hasn't been processed successfully. Caused by ",
+						"RocketMQ Message hasn't been processed successfully. Caused by ",
 						e);
 			}
 		}

File: spring-cloud-stream-binder-rocketmq/src/main/java/org/springframework/cloud/stream/binder/rocketmq/properties/RocketMQBinderConfigurationProperties.java
Patch:
@@ -9,7 +9,7 @@
 @ConfigurationProperties(prefix = "spring.cloud.stream.rocketmq.binder")
 public class RocketMQBinderConfigurationProperties {
 
-	private String namesrvAddr;
+	private String namesrvAddr = "127.0.0.1:9876";
 
 	private String logLevel = "ERROR";
 

File: spring-cloud-alibaba-sentinel-datasource/src/main/java/org/springframework/cloud/alibaba/sentinel/datasource/factorybean/ApolloDataSourceFactoryBean.java
Patch:
@@ -57,7 +57,7 @@ public Converter getConverter() {
         return converter;
     }
 
-    public void setConverter(Converter Converter) {
-        this.converter = Converter;
+    public void setConverter(Converter converter) {
+        this.converter = converter;
     }
 }

File: spring-cloud-alibaba-sentinel-datasource/src/main/java/org/springframework/cloud/alibaba/sentinel/datasource/factorybean/FileRefreshableDataSourceFactoryBean.java
Patch:
@@ -70,7 +70,7 @@ public Converter getConverter() {
         return converter;
     }
 
-    public void setConverter(Converter Converter) {
-        this.converter = Converter;
+    public void setConverter(Converter converter) {
+        this.converter = converter;
     }
 }

File: spring-cloud-alibaba-sentinel-datasource/src/main/java/org/springframework/cloud/alibaba/sentinel/datasource/factorybean/NacosDataSourceFactoryBean.java
Patch:
@@ -56,7 +56,7 @@ public Converter getConverter() {
         return converter;
     }
 
-    public void setConverter(Converter Converter) {
-        this.converter = Converter;
+    public void setConverter(Converter converter) {
+        this.converter = converter;
     }
 }

File: spring-cloud-alibaba-sentinel-datasource/src/main/java/org/springframework/cloud/alibaba/sentinel/datasource/factorybean/ZookeeperDataSourceFactoryBean.java
Patch:
@@ -75,7 +75,7 @@ public Converter getConverter() {
         return converter;
     }
 
-    public void setConverter(Converter Converter) {
-        this.converter = Converter;
+    public void setConverter(Converter converter) {
+        this.converter = converter;
     }
 }

File: spring-cloud-stream-binder-rocketmq/src/main/java/org/springframework/cloud/stream/binder/rocketmq/integration/RocketMQInboundChannelAdapter.java
Patch:
@@ -43,6 +43,8 @@
  */
 public class RocketMQInboundChannelAdapter extends MessageProducerSupport {
 
+    private static final Logger logger = LoggerFactory.getLogger(RocketMQInboundChannelAdapter.class);
+
     private ConsumerInstrumentation consumerInstrumentation;
 
     private final ExtendedConsumerProperties<RocketMQConsumerProperties> consumerProperties;
@@ -132,7 +134,6 @@ public void setRecoveryCallback(RecoveryCallback<? extends Object> recoveryCallb
     }
 
     protected class CloudStreamMessageListener implements MessageListener, RetryListener {
-        private final Logger logger = LoggerFactory.getLogger(this.getClass());
 
         private final InstrumentationManager instrumentationManager;
 

File: spring-cloud-alibaba-sentinel/src/main/java/org/springframework/cloud/alibaba/sentinel/custom/SentinelBeanPostProcessor.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * PostProcessor handle @SentinelProtect Annotation, add interceptor for RestTemplate
  *
- * @author fangjian
+ * @author <a href="mailto:fangjian0423@gmail.com">Jim</a>
  * @see SentinelProtect
  * @see SentinelProtectInterceptor
  */

File: spring-cloud-alicloud-context/src/main/java/org/springframework/cloud/alicloud/context/acm/AcmContextBootstrapConfiguration.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.springframework.cloud.alicloud.context.acm;
 
-import static org.springframework.core.env.AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME;
-
 import javax.annotation.PostConstruct;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -68,7 +66,7 @@ public AcmIntegrationProperties acmIntegrationProperties() {
 		String applicationName = environment.getProperty("spring.application.name");
 		String applicationGroup = environment.getProperty("spring.application.group");
 		Assert.isTrue(!StringUtils.isEmpty(applicationName),
-				"'spring.application.name' must be configured..");
+				"'spring.application.name' must be configured in bootstrap.properties or bootstrap.yml/yaml...");
 		acmIntegrationProperties.setApplicationName(applicationName);
 		acmIntegrationProperties.setApplicationGroup(applicationGroup);
 		acmIntegrationProperties.setActiveProfiles(environment.getActiveProfiles());

File: spring-cloud-alicloud-context/src/main/java/org/springframework/cloud/alicloud/context/acm/AcmContextBootstrapConfiguration.java
Patch:
@@ -16,8 +16,6 @@
 
 package org.springframework.cloud.alicloud.context.acm;
 
-import static org.springframework.core.env.AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME;
-
 import javax.annotation.PostConstruct;
 
 import org.springframework.beans.factory.annotation.Autowired;
@@ -68,7 +66,7 @@ public AcmIntegrationProperties acmIntegrationProperties() {
 		String applicationName = environment.getProperty("spring.application.name");
 		String applicationGroup = environment.getProperty("spring.application.group");
 		Assert.isTrue(!StringUtils.isEmpty(applicationName),
-				"'spring.application.name' must be configured..");
+				"'spring.application.name' must be configured in bootstrap.properties or bootstrap.yml/yaml...");
 		acmIntegrationProperties.setApplicationName(applicationName);
 		acmIntegrationProperties.setApplicationGroup(applicationGroup);
 		acmIntegrationProperties.setActiveProfiles(environment.getActiveProfiles());

File: spring-cloud-alibaba-nacos-config/src/test/java/org/springframework/cloud/alibaba/nacos/NacosConfigBootstrapConfigurationTests.java
Patch:
@@ -43,9 +43,10 @@ public class NacosConfigBootstrapConfigurationTests {
 	public void setUp() throws Exception {
 		this.context = new SpringApplicationBuilder(
 				NacosConfigBootstrapConfiguration.class).web(WebApplicationType.NONE).run(
+						"--spring.application.name=myapp",
 						"--spring.cloud.config.enabled=true",
 						"--spring.cloud.nacos.config.server-addr=127.0.0.1:8080",
-						"--spring.cloud.nacos.config.prefix=myapp");
+						"--spring.cloud.nacos.config.prefix=test");
 	}
 
 	@After

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/endpoint/NacosDiscoveryEndpoint.java
Patch:
@@ -29,8 +29,8 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.actuate.endpoint.annotation.Endpoint;
 import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;
+import org.springframework.cloud.alibaba.nacos.NacosDiscoveryClient;
 import org.springframework.cloud.alibaba.nacos.NacosDiscoveryProperties;
-import org.springframework.cloud.alibaba.nacos.registry.NacosRegistration;
 
 /**
  * Endpoint for nacos discovery, get nacos properties and subscribed services
@@ -46,7 +46,7 @@ public class NacosDiscoveryEndpoint {
 	private NacosDiscoveryProperties nacosDiscoveryProperties;
 
 	@Autowired
-	private NacosRegistration nacosRegistration;
+	private NacosDiscoveryClient discoveryClient;
 
 	/**
 	 * @return nacos discovery endpoint
@@ -56,7 +56,7 @@ public Map<String, Object> nacosDiscovery() {
 		Map<String, Object> result = new HashMap<>();
 		result.put("NacosDiscoveryProperties", nacosDiscoveryProperties);
 
-		NamingService namingService = nacosRegistration.getNacosNamingService();
+		NamingService namingService = discoveryClient.getNamingService();
 		List<ServiceInfo> subscribe = Collections.emptyList();
 
 		try {

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/endpoint/NacosDiscoveryEndpointAutoConfiguration.java
Patch:
@@ -28,7 +28,6 @@
  * @author xiaojing
  */
 @Configuration
-@ConditionalOnProperty(value = "spring.cloud.service-registry.auto-registration.enabled", matchIfMissing = true)
 @ConditionalOnClass(Endpoint.class)
 public class NacosDiscoveryEndpointAutoConfiguration {
 

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/ribbon/NacosServerList.java
Patch:
@@ -19,7 +19,7 @@
 import com.netflix.client.config.IClientConfig;
 import com.netflix.loadbalancer.AbstractServerList;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.cloud.alibaba.nacos.registry.NacosRegistration;
+import org.springframework.cloud.alibaba.nacos.NacosDiscoveryClient;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -32,7 +32,7 @@
 public class NacosServerList extends AbstractServerList<NacosServer> {
 
 	@Autowired
-	private NacosRegistration registration;
+	private NacosDiscoveryClient discoveryClient;
 
 	private String serviceId;
 
@@ -55,7 +55,7 @@ public List<NacosServer> getUpdatedListOfServers() {
 
 	private List<NacosServer> getServers() {
 		try {
-			List<Instance> instances = registration.getNacosNamingService()
+			List<Instance> instances = discoveryClient.getNamingService()
 					.getAllInstances(serviceId);
 			return instancesToServerList(instances);
 		}

File: spring-cloud-alibaba-nacos-discovery/src/test/java/org/springframework/cloud/alibaba/nacos/NacosDiscoveryAutoConfigurationTests.java
Patch:
@@ -37,7 +37,8 @@ public class NacosDiscoveryAutoConfigurationTests {
 	private WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()
 			.withConfiguration(
 					AutoConfigurations.of(NacosDiscoveryTestConfiguration.class,
-							NacosDiscoveryAutoConfiguration.class))
+							NacosDiscoveryAutoConfiguration.class,
+							NacosDiscoveryClientAutoConfiguration.class))
 			.withPropertyValues("spring.cloud.nacos.discovery.server-addr=127.0.0.1:8080")
 			.withPropertyValues("spring.cloud.nacos.discovery.port=18080")
 			.withPropertyValues("spring.cloud.nacos.discovery.service=myapp");

File: spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/client/NacosPropertySourceBuilder.java
Patch:
@@ -69,15 +69,15 @@ public void setConfigService(ConfigService configService) {
 	 * @param dataId Nacos dataId
 	 * @param group Nacos group
 	 */
-	NacosPropertySource build(String dataId, String group, String contentType) {
-		Properties p = loadNacosData(dataId, group, contentType);
+	NacosPropertySource build(String dataId, String group, String fileExtension) {
+		Properties p = loadNacosData(dataId, group, fileExtension);
 		if (p == null) {
 			return null;
 		}
 		return new NacosPropertySource(dataId, propertiesToMap(p), new Date());
 	}
 
-	private Properties loadNacosData(String dataId, String group, String contentType) {
+	private Properties loadNacosData(String dataId, String group, String fileExtension) {
 		String data = null;
 		try {
 			data = configService.getConfig(dataId, group, timeout);

File: spring-cloud-alibaba-nacos-config/src/test/java/org/springframework/cloud/alibaba/nacos/NacosConfigAutoConfigurationTests.java
Patch:
@@ -72,7 +72,7 @@ public void testNacosConfigProperties() {
         }
 
         NacosConfigProperties nacosConfigProperties = this.context.getBean(NacosConfigProperties.class);
-        assertThat(nacosConfigProperties.getContentType()).isEqualTo("properties");
+        assertThat(nacosConfigProperties.getFileExtension()).isEqualTo("properties");
         assertThat(nacosConfigProperties.getPrefix()).isEqualTo("myapp");
 
     }

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/registry/NacosServiceRegistry.java
Patch:
@@ -52,6 +52,7 @@ public void register(NacosRegistration registration) {
 		instance.setPort(registration.getPort());
 		instance.setWeight(registration.getRegisterWeight());
 		instance.setCluster(new Cluster(registration.getCluster()));
+		instance.setMetadata(registration.getMetadata());
 
 		try {
 			namingService.registerInstance(serviceId, instance);

File: spring-cloud-alibaba-nacos-discovery/src/main/java/org/springframework/cloud/alibaba/nacos/ribbon/NacosRibbonClientConfiguration.java
Patch:
@@ -17,7 +17,6 @@
 package org.springframework.cloud.alibaba.nacos.ribbon;
 
 import com.netflix.client.config.IClientConfig;
-import com.netflix.loadbalancer.Server;
 import com.netflix.loadbalancer.ServerList;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
@@ -33,7 +32,7 @@ public class NacosRibbonClientConfiguration {
 
 	@Bean
 	@ConditionalOnMissingBean
-	public ServerList<Server> ribbonServerList(IClientConfig config) {
+	public ServerList<?> ribbonServerList(IClientConfig config) {
 		NacosServerList serverList = new NacosServerList(config.getClientName());
 		return serverList;
 	}

File: spring-cloud-alibaba-nacos-discovery/src/test/java/org/springframework/cloud/alibaba/nacos/ribbon/NacosRibbonClientConfigurationTests.java
Patch:
@@ -15,7 +15,7 @@
 import static org.assertj.core.api.Assertions.assertThat;
 
 /**
- * Created by yizhan on 2018/9/14.
+ * @author xiaojing
  */
 public class NacosRibbonClientConfigurationTests {
 
@@ -36,7 +36,7 @@ public void testProperties() {
 
         this.contextRunner.run(context -> {
             NacosServerList serverList = context.getBean(NacosServerList.class);
-            assertThat(serverList.getService()).isEqualTo("myapp");
+            assertThat(serverList.getServiceId()).isEqualTo("myapp");
         });
     }
 

File: spring-cloud-alibaba-nacos-config/src/main/java/org/springframework/cloud/alibaba/nacos/NacosConfigProperties.java
Patch:
@@ -56,7 +56,7 @@ public class NacosConfigProperties {
 	/**
 	 * timeout to get configuration
 	 */
-	private int timeout;
+	private int timeout = 3000;
 
 	/**
 	 *  endpoint for Nacos

