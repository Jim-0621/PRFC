File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -360,7 +360,7 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha, @Nullable
         }
         clearCanvas(canvas);
         //noinspection ConstantConditions
-        matteLayer.draw(canvas, parentMatrix, alpha, null);
+        matteLayer.draw(canvas, parentMatrix, parentAlpha, null);
         if (L.isTraceEnabled()) {
           L.beginSection("Layer#restoreLayer");
         }

File: lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java
Patch:
@@ -125,8 +125,8 @@ public float getEndProgress() {
       } else {
         float startProgress = getStartProgress();
         float durationFrames = endFrame - startFrame;
-        float durationProgress = durationFrames / composition.getDurationFrames();
-        endProgress = startProgress + durationProgress;
+        double durationProgress = durationFrames / (double) composition.getDurationFrames();
+        endProgress = (float) (startProgress + durationProgress);
       }
     }
     return endProgress;

File: lottie/src/main/java/com/airbnb/lottie/utils/Utils.java
Patch:
@@ -280,7 +280,7 @@ public static float getAnimationScale(@NonNull Context context) {
    * Resize the bitmap to exactly the same size as the specified dimension, changing the aspect ratio if needed.
    * Returns the original bitmap if the dimensions already match.
    */
-  public static Bitmap resizeBitmapIfNeeded(Bitmap bitmap, int width, int height) {
+  public static Bitmap resizeBitmapIfNeeded(@NonNull Bitmap bitmap, int width, int height) {
     if (bitmap.getWidth() == width && bitmap.getHeight() == height) {
       return bitmap;
     }

File: lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java
Patch:
@@ -62,6 +62,7 @@ private void invalidate() {
         if (shapeModifierContents == null) {
           shapeModifierContents = new ArrayList<>();
         }
+        ((ShapeModifierContent) content).addUpdateListener(this);
         shapeModifierContents.add((ShapeModifierContent) content);
       }
     }

File: lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeModifierContent.java
Patch:
@@ -1,7 +1,9 @@
 package com.airbnb.lottie.animation.content;
 
+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.model.content.ShapeData;
 
 public interface ShapeModifierContent extends Content {
+  void addUpdateListener(BaseKeyframeAnimation.AnimationListener listener);
   ShapeData modifyShape(ShapeData shapeData);
 }

File: lottie/src/main/java/com/airbnb/lottie/animation/content/DrawingContent.java
Patch:
@@ -3,9 +3,11 @@
 import android.graphics.Canvas;
 import android.graphics.Matrix;
 import android.graphics.RectF;
+import androidx.annotation.Nullable;
+import com.airbnb.lottie.utils.DropShadow;
 
 public interface DrawingContent extends Content {
-  void draw(Canvas canvas, Matrix parentMatrix, int alpha);
+  void draw(Canvas canvas, Matrix parentMatrix, int alpha, @Nullable DropShadow shadowToApply);
 
   void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents);
 }

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java
Patch:
@@ -19,6 +19,7 @@
 import com.airbnb.lottie.model.content.GradientStroke;
 import com.airbnb.lottie.model.content.GradientType;
 import com.airbnb.lottie.model.layer.BaseLayer;
+import com.airbnb.lottie.utils.DropShadow;
 import com.airbnb.lottie.value.LottieValueCallback;
 
 public class GradientStrokeContent extends BaseStrokeContent {
@@ -64,7 +65,7 @@ public GradientStrokeContent(
     layer.addAnimation(endPointAnimation);
   }
 
-  @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {
+  @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha, DropShadow shadowToApply) {
     if (hidden) {
       return;
     }
@@ -78,7 +79,7 @@ public GradientStrokeContent(
     }
     paint.setShader(shader);
 
-    super.draw(canvas, parentMatrix, parentAlpha);
+    super.draw(canvas, parentMatrix, parentAlpha, shadowToApply);
   }
 
   @Override public String getName() {

File: lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java
Patch:
@@ -15,6 +15,7 @@
 import com.airbnb.lottie.animation.keyframe.ValueCallbackKeyframeAnimation;
 import com.airbnb.lottie.model.content.ShapeStroke;
 import com.airbnb.lottie.model.layer.BaseLayer;
+import com.airbnb.lottie.utils.DropShadow;
 import com.airbnb.lottie.value.LottieValueCallback;
 
 public class StrokeContent extends BaseStrokeContent {
@@ -37,15 +38,15 @@ public StrokeContent(final LottieDrawable lottieDrawable, BaseLayer layer, Shape
     layer.addAnimation(colorAnimation);
   }
 
-  @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {
+  @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha, @Nullable DropShadow shadowToApply) {
     if (hidden) {
       return;
     }
     paint.setColor(((ColorKeyframeAnimation) colorAnimation).getIntValue());
     if (colorFilterAnimation != null) {
       paint.setColorFilter(colorFilterAnimation.getValue());
     }
-    super.draw(canvas, parentMatrix, parentAlpha);
+    super.draw(canvas, parentMatrix, parentAlpha, shadowToApply);
   }
 
   @Override public String getName() {

File: lottie/src/main/java/com/airbnb/lottie/model/layer/NullLayer.java
Patch:
@@ -4,14 +4,16 @@
 import android.graphics.Matrix;
 import android.graphics.RectF;
 
+import androidx.annotation.Nullable;
 import com.airbnb.lottie.LottieDrawable;
+import com.airbnb.lottie.utils.DropShadow;
 
 public class NullLayer extends BaseLayer {
   NullLayer(LottieDrawable lottieDrawable, Layer layerModel) {
     super(lottieDrawable, layerModel);
   }
 
-  @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {
+  @Override void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha, @Nullable DropShadow shadowToApply) {
     // Do nothing.
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -26,6 +26,7 @@
 import com.airbnb.lottie.model.animatable.AnimatableTextProperties;
 import com.airbnb.lottie.model.content.ShapeGroup;
 import com.airbnb.lottie.model.content.TextRangeUnits;
+import com.airbnb.lottie.utils.DropShadow;
 import com.airbnb.lottie.utils.Utils;
 import com.airbnb.lottie.value.LottieValueCallback;
 
@@ -158,7 +159,7 @@ public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents
   }
 
   @Override
-  void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {
+  void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha, @Nullable DropShadow shadowToApply /* ignored for now */) {
     DocumentData documentData = textAnimation.getValue();
     Font font = composition.getFonts().get(documentData.fontName);
     if (font == null) {

File: lottie/src/main/java/com/airbnb/lottie/utils/Utils.java
Patch:
@@ -35,6 +35,8 @@
 public final class Utils {
   public static final int SECOND_IN_NANOS = 1000000000;
 
+  public static final Matrix IDENTITY_MATRIX = new Matrix();
+
   /**
    * Wrap in Local Thread is necessary for prevent race condition in multi-threaded mode
    */

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -746,7 +746,7 @@ public void resolveKeyPath(
         accumulator.add(matteCurrentPartialKeyPath.resolve(matteLayer));
       }
 
-      if (keyPath.propagateToChildren(getName(), depth)) {
+      if (keyPath.matches(matteLayer.getName(), depth) && keyPath.propagateToChildren(getName(), depth)) {
         int newDepth = depth + keyPath.incrementDepthBy(matteLayer.getName(), depth);
         matteLayer.resolveChildKeyPath(keyPath, newDepth, accumulator, matteCurrentPartialKeyPath);
       }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -1245,7 +1245,7 @@ boolean isAnimatingOrWillAnimateOnVisible() {
     }
   }
 
-  public boolean animationsEnabled(Context context) {
+  public boolean animationsEnabled(@Nullable Context context) {
     if (ignoreSystemAnimationsDisabled) {
       return true;
     }

File: lottie/src/main/java/com/airbnb/lottie/configurations/reducemotion/ReducedMotionOption.java
Patch:
@@ -1,11 +1,12 @@
 package com.airbnb.lottie.configurations.reducemotion;
 
 import android.content.Context;
+import androidx.annotation.Nullable;
 
 public interface ReducedMotionOption {
 
   /**
    * Returns the current reduced motion mode.
    */
-  ReducedMotionMode getCurrentReducedMotionMode(Context context);
+  ReducedMotionMode getCurrentReducedMotionMode(@Nullable Context context);
 }

File: lottie/src/main/java/com/airbnb/lottie/configurations/reducemotion/SystemReducedMotionOption.java
Patch:
@@ -1,6 +1,7 @@
 package com.airbnb.lottie.configurations.reducemotion;
 
 import android.content.Context;
+import androidx.annotation.Nullable;
 import com.airbnb.lottie.utils.Utils;
 
 /**
@@ -18,8 +19,8 @@
 public class SystemReducedMotionOption implements ReducedMotionOption {
 
   @Override
-  public ReducedMotionMode getCurrentReducedMotionMode(Context context) {
-    if (Utils.getAnimationScale(context) != 0f) {
+  public ReducedMotionMode getCurrentReducedMotionMode(@Nullable Context context) {
+    if (context == null || Utils.getAnimationScale(context) != 0f) {
       return ReducedMotionMode.STANDARD_MOTION;
     } else {
       return ReducedMotionMode.REDUCED_MOTION;

File: lottie/src/main/java/com/airbnb/lottie/utils/Utils.java
Patch:
@@ -14,6 +14,7 @@
 import android.os.Build;
 import android.provider.Settings;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.L;
@@ -262,7 +263,7 @@ public static float dpScale() {
     return Resources.getSystem().getDisplayMetrics().density;
   }
 
-  public static float getAnimationScale(Context context) {
+  public static float getAnimationScale(@NonNull Context context) {
     if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
       return Settings.Global.getFloat(context.getContentResolver(),
           Settings.Global.ANIMATOR_DURATION_SCALE, 1.0f);

File: lottie/src/main/java/com/airbnb/lottie/Lottie.java
Patch:
@@ -22,5 +22,6 @@ public static void initialize(@NonNull final LottieConfig lottieConfig) {
     L.setNetworkCacheEnabled(lottieConfig.enableNetworkCache);
     L.setDisablePathInterpolatorCache(lottieConfig.disablePathInterpolatorCache);
     L.setDefaultAsyncUpdates(lottieConfig.defaultAsyncUpdates);
+    L.setReducedMotionOption(lottieConfig.reducedMotionOption);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -260,8 +260,6 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {
     }
 
     ta.recycle();
-
-    lottieDrawable.setSystemAnimationsAreEnabled(Utils.getAnimationScale(getContext()) != 0f);
   }
 
   @Override public void setImageResource(int resId) {
@@ -377,7 +375,10 @@ private void init(@Nullable AttributeSet attrs, @AttrRes int defStyleAttr) {
    * Defaults to false.
    *
    * @param ignore if true animations will run even when they are disabled in the system settings.
+   * @deprecated Use {@link com.airbnb.lottie.configurations.reducemotion.IgnoreDisabledSystemAnimationsOption}
+   * instead and set them on the {@link LottieConfig}
    */
+  @Deprecated
   public void setIgnoreDisabledSystemAnimations(boolean ignore) {
     lottieDrawable.setIgnoreDisabledSystemAnimations(ignore);
   }

File: lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java
Patch:
@@ -138,6 +138,9 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {
   }
 
   public boolean hasSameContext(Context context) {
+    if (context == null) {
+      return this.context == null;
+    }
     Context contextToCompare = this.context instanceof Application ? context.getApplicationContext() : context;
     return contextToCompare == this.context;
   }

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java
Patch:
@@ -76,7 +76,6 @@ public GradientStrokeContent(
     } else {
       shader = getRadialGradient();
     }
-    shader.setLocalMatrix(parentMatrix);
     paint.setShader(shader);
 
     super.draw(canvas, parentMatrix, parentAlpha);

File: lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java
Patch:
@@ -191,7 +191,7 @@ public abstract class BaseStrokeContent
       blurMaskFilterRadius = blurRadius;
     }
     if (dropShadowAnimation != null) {
-      dropShadowAnimation.applyTo(paint);
+      dropShadowAnimation.applyTo(paint, parentMatrix, Utils.mixOpacities(parentAlpha, alpha));
     }
 
     for (int i = 0; i < pathGroups.size(); i++) {

File: lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java
Patch:
@@ -24,6 +24,7 @@
 import com.airbnb.lottie.model.content.ShapeFill;
 import com.airbnb.lottie.model.layer.BaseLayer;
 import com.airbnb.lottie.utils.MiscUtils;
+import com.airbnb.lottie.utils.Utils;
 import com.airbnb.lottie.value.LottieValueCallback;
 
 import java.util.ArrayList;
@@ -120,7 +121,7 @@ public FillContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeFi
       blurMaskFilterRadius = blurRadius;
     }
     if (dropShadowAnimation != null) {
-      dropShadowAnimation.applyTo(paint);
+      dropShadowAnimation.applyTo(paint, parentMatrix, Utils.mixOpacities(parentAlpha, alpha));
     }
 
     path.reset();

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableFloatValue.java
Patch:
@@ -1,6 +1,5 @@
 package com.airbnb.lottie.model.animatable;
 
-import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.FloatKeyframeAnimation;
 import com.airbnb.lottie.value.Keyframe;
 
@@ -12,7 +11,7 @@ public AnimatableFloatValue(List<Keyframe<Float>> keyframes) {
     super(keyframes);
   }
 
-  @Override public BaseKeyframeAnimation<Float, Float> createAnimation() {
+  @Override public FloatKeyframeAnimation createAnimation() {
     return new FloatKeyframeAnimation(keyframes);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -109,7 +109,7 @@ static BaseLayer forModel(
   private List<BaseLayer> parentLayers;
 
   private final List<BaseKeyframeAnimation<?, ?>> animations = new ArrayList<>();
-  final TransformKeyframeAnimation transform;
+  public final TransformKeyframeAnimation transform;
   private boolean visible = true;
 
   private boolean outlineMasksAndMattes;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java
Patch:
@@ -11,7 +11,6 @@
 import android.graphics.RectF;
 
 import androidx.annotation.Nullable;
-import androidx.core.graphics.PaintCompat;
 
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieDrawable;
@@ -68,8 +67,6 @@ public FillContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeFi
       return;
     }
 
-    PaintCompat.setBlendMode(paint, layer.getBlendMode().toNativeBlendMode());
-
     path.setFillType(fill.getFillType());
 
     colorAnimation = fill.getColor().createAnimation();

File: lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java
Patch:
@@ -640,7 +640,9 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(Context
             Logger.warning("data URL did not have correct base64 format.", e);
             return null;
           }
-          asset.setBitmap(BitmapFactory.decodeByteArray(data, 0, data.length, opts));
+          Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);
+          bitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());
+          asset.setBitmap(bitmap);
         }
       }
     }

File: lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java
Patch:
@@ -107,7 +107,8 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {
         return null;
       }
       bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, opts);
-      return putBitmap(id, bitmap);
+      Bitmap resizedBitmap = Utils.resizeBitmapIfNeeded(bitmap, asset.getWidth(), asset.getHeight());
+      return putBitmap(id, resizedBitmap);
     }
 
     InputStream is;

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java
Patch:
@@ -112,7 +112,8 @@ protected float getInterpolatedCurrentKeyframeProgress() {
     Keyframe<K> keyframe = getCurrentKeyframe();
     // Keyframe should not be null here but there seems to be a Xiaomi Android 10 specific crash.
     // https://github.com/airbnb/lottie-android/issues/2050
-    if (keyframe == null || keyframe.isStatic()) {
+    // https://github.com/airbnb/lottie-android/issues/2483
+    if (keyframe == null || keyframe.isStatic() || keyframe.interpolator == null) {
       return 0f;
     }
     //noinspection ConstantConditions

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -219,13 +219,13 @@ public boolean hasImages() {
   public Map<String, LottieImageAsset> getImages() {
     float dpScale = Utils.dpScale();
     if (dpScale != imagesDpScale) {
-      imagesDpScale = dpScale;
       Set<Map.Entry<String, LottieImageAsset>> entries = images.entrySet();
 
       for (Map.Entry<String, LottieImageAsset> entry : entries) {
         images.put(entry.getKey(), entry.getValue().copyWithScale(imagesDpScale / dpScale));
       }
     }
+    imagesDpScale = dpScale;
     return images;
   }
 

File: lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java
Patch:
@@ -704,7 +704,7 @@ private static LottieTask<LottieComposition> cache(@Nullable final String cacheK
     LottieTask<LottieComposition> task = null;
     final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);
     if (cachedComposition != null) {
-      task = new LottieTask<>(() -> new LottieResult<>(cachedComposition));
+      task = new LottieTask<>(cachedComposition);
     }
     if (cacheKey != null && taskCache.containsKey(cacheKey)) {
       task = taskCache.get(cacheKey);

File: lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java
Patch:
@@ -107,7 +107,7 @@ public static LottieComposition parse(JsonReader reader) throws IOException {
     Rect bounds = new Rect(0, 0, scaledWidth, scaledHeight);
 
     composition.init(bounds, startFrame, endFrame, frameRate, layers, layerMap, precomps,
-        images, characters, fonts, markers);
+        images, Utils.dpScale(), characters, fonts, markers);
 
     return composition;
   }

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/ShapeKeyframeAnimation.java
Patch:
@@ -25,7 +25,7 @@ public ShapeKeyframeAnimation(List<Keyframe<ShapeData>> keyframes) {
     ShapeData startShapeData = keyframe.startValue;
     ShapeData endShapeData = keyframe.endValue;
 
-    tempShapeData.interpolateBetween(startShapeData, endShapeData, keyframeProgress);
+    tempShapeData.interpolateBetween(startShapeData, endShapeData == null ? startShapeData : endShapeData, keyframeProgress);
     ShapeData modifiedShapeData = tempShapeData;
     if (shapeModifiers != null) {
       for (int i = shapeModifiers.size() - 1; i >= 0; i--) {

File: lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java
Patch:
@@ -112,7 +112,7 @@ public BaseKeyframeAnimation<Float, Float> getRoundedCorners() {
       PointF nextVertex = startingCurve.getVertex();
 
       // We can't round the corner of the end of a non-closed curve.
-      boolean isEndOfCurve = !startingShapeData.isClosed() && (i == 0 && i == startingCurves.size() - 1);
+      boolean isEndOfCurve = !startingShapeData.isClosed() && (i == 0 || i == startingCurves.size() - 1);
       if (inPoint.equals(vertex) && outPoint.equals(vertex) && !isEndOfCurve) {
         // This vertex is a point. Round its corners
         float dxToPreviousVertex = vertex.x - previousVertex.x;
@@ -186,7 +186,7 @@ private ShapeData getShapeData(ShapeData startingShapeData) {
       PointF inPoint = (i == 0 && !isClosed) ? vertex : previousCurve.getControlPoint2();
       PointF outPoint = startingCurve.getControlPoint1();
 
-      boolean isEndOfCurve = !startingShapeData.isClosed() && (i == 0 && i == startingCurves.size() - 1);
+      boolean isEndOfCurve = !startingShapeData.isClosed() && (i == 0 || i == startingCurves.size() - 1);
       if (inPoint.equals(vertex) && outPoint.equals(vertex) && !isEndOfCurve) {
         vertices += 2;
       } else {

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java
Patch:
@@ -221,15 +221,15 @@ public Matrix getMatrix() {
     BaseKeyframeAnimation<ScaleXY, ScaleXY> scale = this.scale;
     if (scale != null) {
       ScaleXY scaleTransform = scale.getValue();
-      if (scaleTransform.getScaleX() != 1f || scaleTransform.getScaleY() != 1f) {
+      if (scaleTransform != null && (scaleTransform.getScaleX() != 1f || scaleTransform.getScaleY() != 1f)) {
         matrix.preScale(scaleTransform.getScaleX(), scaleTransform.getScaleY());
       }
     }
 
     BaseKeyframeAnimation<PointF, PointF> anchorPoint = this.anchorPoint;
     if (anchorPoint != null) {
       PointF anchorPointValue = anchorPoint.getValue();
-      if (anchorPointValue != null && anchorPointValue.x != 0 || anchorPointValue.y != 0) {
+      if (anchorPointValue != null && (anchorPointValue.x != 0 || anchorPointValue.y != 0)) {
         matrix.preTranslate(-anchorPointValue.x, -anchorPointValue.y);
       }
     }

File: lottie/src/main/java/com/airbnb/lottie/Lottie.java
Patch:
@@ -21,5 +21,6 @@ public static void initialize(@NonNull final LottieConfig lottieConfig) {
     L.setTraceEnabled(lottieConfig.enableSystraceMarkers);
     L.setNetworkCacheEnabled(lottieConfig.enableNetworkCache);
     L.setDisablePathInterpolatorCache(lottieConfig.disablePathInterpolatorCache);
+    L.setDefaultAsyncUpdates(lottieConfig.defaultAsyncUpdates);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java
Patch:
@@ -38,7 +38,7 @@ public void clear() {
     if (parentDir.exists()) {
       File[] files = parentDir.listFiles();
       if (files != null && files.length > 0) {
-        for (File file : parentDir.listFiles()) {
+        for (File file : files) {
           file.delete();
         }
       }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -1620,7 +1620,7 @@ private void renderAndDrawAsBitmap(Canvas originalCanvas, CompositionLayer compo
     int renderWidth = (int) Math.ceil(softwareRenderingTransformedBounds.width());
     int renderHeight = (int) Math.ceil(softwareRenderingTransformedBounds.height());
 
-    if (renderWidth == 0 || renderHeight == 0) {
+    if (renderWidth <= 0 || renderHeight <= 0) {
       return;
     }
 

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -128,7 +128,7 @@ void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {
     canvas.save();
     canvas.concat(parentMatrix);
 
-    configurePaint(documentData, parentMatrix);
+    configurePaint(documentData, parentAlpha);
 
     if (lottieDrawable.useTextGlyphs()) {
       drawTextWithGlyphs(documentData, parentMatrix, font, canvas);
@@ -139,7 +139,7 @@ void drawLayer(Canvas canvas, Matrix parentMatrix, int parentAlpha) {
     canvas.restore();
   }
 
-  private void configurePaint(DocumentData documentData, Matrix parentMatrix) {
+  private void configurePaint(DocumentData documentData, int parentAlpha) {
     if (colorCallbackAnimation != null) {
       fillPaint.setColor(colorCallbackAnimation.getValue());
     } else if (colorAnimation != null) {
@@ -156,7 +156,7 @@ private void configurePaint(DocumentData documentData, Matrix parentMatrix) {
       strokePaint.setColor(documentData.strokeColor);
     }
     int opacity = transform.getOpacity() == null ? 100 : transform.getOpacity().getValue();
-    int alpha = opacity * 255 / 100;
+    int alpha = opacity * 255 / 100 * parentAlpha / 255;
     fillPaint.setAlpha(alpha);
     strokePaint.setAlpha(alpha);
 

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -1323,7 +1323,7 @@ public <T> void addValueCallback(
    */
   public <T> void addValueCallback(KeyPath keyPath, T property,
       final SimpleLottieValueCallback<T> callback) {
-    addValueCallback(keyPath, property, new LottieValueCallback<>() {
+    addValueCallback(keyPath, property, new LottieValueCallback<T>() {
       @Override
       public T getValue(LottieFrameInfo<T> frameInfo) {
         return callback.getValue(frameInfo);

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieTrace.java
Patch:
@@ -3,7 +3,7 @@
 import androidx.core.os.TraceCompat;
 
 public class LottieTrace {
-  private static final int MAX_DEPTH = 20;
+  private static final int MAX_DEPTH = 5;
 
   private final String[] sections = new String[MAX_DEPTH];
   private final long[] startTimeNs = new long[MAX_DEPTH];

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -470,6 +470,8 @@ public void setAnimationFromJson(String jsonString, @Nullable String cacheKey) {
    * <p>
    * This is particularly useful for animations loaded from the network. You can fetch the
    * bodymovin json from the network and pass it directly here.
+   * <p>
+   * Auto-closes the stream.
    */
   public void setAnimation(InputStream stream, @Nullable String cacheKey) {
     setCompositionTask(LottieCompositionFactory.fromJsonInputStream(stream, cacheKey));

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -238,6 +238,7 @@ public void endAnimation() {
   @MainThread
   public void pauseAnimation() {
     removeFrameCallback();
+    notifyPause();
   }
 
   @MainThread
@@ -250,6 +251,7 @@ public void resumeAnimation() {
     } else if (!isReversed() && getFrame() == getMaxFrame()) {
       setFrame(getMinFrame());
     }
+    notifyResume();
   }
 
   @MainThread

File: lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java
Patch:
@@ -60,9 +60,9 @@ private LottieComposition fetchFromCache(Context context, @NonNull String url, @
     InputStream inputStream = cacheResult.second;
     LottieResult<LottieComposition> result;
     if (extension == FileExtension.ZIP) {
-      result = LottieCompositionFactory.fromZipStreamSync(context, new ZipInputStream(inputStream), url);
+      result = LottieCompositionFactory.fromZipStreamSync(context, new ZipInputStream(inputStream), cacheKey);
     } else {
-      result = LottieCompositionFactory.fromJsonInputStreamSync(inputStream, url);
+      result = LottieCompositionFactory.fromJsonInputStreamSync(inputStream, cacheKey);
     }
     if (result.getValue() != null) {
       return result.getValue();

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java
Patch:
@@ -229,7 +229,7 @@ public Matrix getMatrix() {
     BaseKeyframeAnimation<PointF, PointF> anchorPoint = this.anchorPoint;
     if (anchorPoint != null) {
       PointF anchorPointValue = anchorPoint.getValue();
-      if (anchorPointValue.x != 0 || anchorPointValue.y != 0) {
+      if (anchorPointValue != null && anchorPointValue.x != 0 || anchorPointValue.y != 0) {
         matrix.preTranslate(-anchorPointValue.x, -anchorPointValue.y);
       }
     }

File: lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java
Patch:
@@ -116,11 +116,11 @@ public long getId() {
     return layerId;
   }
 
-  String getName() {
+  public String getName() {
     return layerName;
   }
 
-  @Nullable String getRefId() {
+  public @Nullable String getRefId() {
     return refId;
   }
 

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -1017,7 +1017,7 @@ public void setIgnoreDisabledSystemAnimations(boolean ignore) {
    * Be wary if you are using many images, however. Lottie is designed to work with vector shapes
    * from After Effects. If your images look like they could be represented with vector shapes,
    * see if it is possible to convert them to shape layers and re-export your animation. Check
-   * the documentation at http://airbnb.io/lottie for more information about importing shapes from
+   * the documentation at <a href="http://airbnb.io/lottie">http://airbnb.io/lottie</a> for more information about importing shapes from
    * Sketch or Illustrator to avoid this.
    */
   public void setImageAssetDelegate(ImageAssetDelegate assetDelegate) {

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java
Patch:
@@ -37,7 +37,7 @@ public DocumentData getValue(LottieFrameInfo<DocumentData> frameInfo) {
         DocumentData baseDocumentData = frameInfo.getInterpolatedKeyframeProgress() == 1f ? frameInfo.getEndValue() : frameInfo.getStartValue();
         documentData.set(text, baseDocumentData.fontName, baseDocumentData.size, baseDocumentData.justification, baseDocumentData.tracking,
             baseDocumentData.lineHeight, baseDocumentData.baselineShift, baseDocumentData.color, baseDocumentData.strokeColor,
-            baseDocumentData.strokeWidth, baseDocumentData.strokeOverFill, baseDocumentData.boxPosition);
+            baseDocumentData.strokeWidth, baseDocumentData.strokeOverFill, baseDocumentData.boxPosition, baseDocumentData.boxSize);
         return documentData;
       }
     });

File: lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java
Patch:
@@ -12,8 +12,7 @@
 public class FontCharacter {
 
   public static int hashFor(char character, String fontFamily, String style) {
-    int result = 0;
-    result = 31 * result + (int) character;
+    int result = (int) character;
     result = 31 * result + fontFamily.hashCode();
     result = 31 * result + style.hashCode();
     return result;

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -1419,6 +1419,7 @@ private void drawDirectlyToCanvas(Canvas canvas) {
       float scaleY = bounds.height() / (float) composition.getBounds().height();
 
       renderingMatrix.preScale(scaleX, scaleY);
+      renderingMatrix.preTranslate(bounds.left, bounds.top);
     }
     compositionLayer.draw(canvas, renderingMatrix, alpha);
   }

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java
Patch:
@@ -19,6 +19,7 @@
 import androidx.collection.LongSparseArray;
 
 import com.airbnb.lottie.L;
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.LottieProperty;
 import com.airbnb.lottie.animation.LPaint;
@@ -64,14 +65,14 @@ public class GradientFillContent
   float blurMaskFilterRadius = 0f;
   @Nullable private DropShadowKeyframeAnimation dropShadowAnimation;
 
-  public GradientFillContent(final LottieDrawable lottieDrawable, BaseLayer layer, GradientFill fill) {
+  public GradientFillContent(final LottieDrawable lottieDrawable, LottieComposition composition, BaseLayer layer, GradientFill fill) {
     this.layer = layer;
     name = fill.getName();
     hidden = fill.isHidden();
     this.lottieDrawable = lottieDrawable;
     type = fill.getGradientType();
     path.setFillType(fill.getFillType());
-    cacheSteps = (int) (lottieDrawable.getComposition().getDuration() / CACHE_STEPS_MS);
+    cacheSteps = (int) (composition.getDuration() / CACHE_STEPS_MS);
 
     colorAnimation = fill.getGradientColor().createAnimation();
     colorAnimation.addUpdateListener(this);

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java
Patch:
@@ -4,6 +4,7 @@
 
 import androidx.annotation.Nullable;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.ModifierContent;
@@ -104,7 +105,7 @@ public TransformKeyframeAnimation createAnimation() {
 
   @Nullable
   @Override
-  public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return null;
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/model/content/CircleShape.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.graphics.PointF;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.EllipseContent;
@@ -25,7 +26,7 @@ public CircleShape(String name, AnimatableValue<PointF, PointF> position,
     this.hidden = hidden;
   }
 
-  @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return new EllipseContent(drawable, layer, this);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/content/ContentModel.java
Patch:
@@ -3,10 +3,11 @@
 
 import androidx.annotation.Nullable;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.model.layer.BaseLayer;
 
 public interface ContentModel {
-  @Nullable Content toContent(LottieDrawable drawable, BaseLayer layer);
+  @Nullable Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer);
 }

File: lottie/src/main/java/com/airbnb/lottie/model/content/GradientFill.java
Patch:
@@ -4,6 +4,7 @@
 
 import androidx.annotation.Nullable;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.GradientFillContent;
@@ -75,8 +76,8 @@ public boolean isHidden() {
     return hidden;
   }
 
-  @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
-    return new GradientFillContent(drawable, layer, this);
+  @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
+    return new GradientFillContent(drawable, composition, layer, this);
   }
 
 }

File: lottie/src/main/java/com/airbnb/lottie/model/content/GradientStroke.java
Patch:
@@ -2,6 +2,7 @@
 
 import androidx.annotation.Nullable;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.GradientStrokeContent;
@@ -103,7 +104,7 @@ public boolean isHidden() {
     return hidden;
   }
 
-  @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return new GradientStrokeContent(drawable, layer, this);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/model/content/MergePaths.java
Patch:
@@ -2,6 +2,7 @@
 
 import androidx.annotation.Nullable;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.MergePathsContent;
@@ -58,7 +59,7 @@ public boolean isHidden() {
     return hidden;
   }
 
-  @Override @Nullable public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Override @Nullable public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     if (!drawable.enableMergePathsForKitKatAndAbove()) {
       Logger.warning("Animation contains merge paths but they are disabled.");
       return null;

File: lottie/src/main/java/com/airbnb/lottie/model/content/PolystarShape.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.graphics.PointF;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.PolystarContent;
@@ -104,7 +105,7 @@ public boolean isReversed() {
     return isReversed;
   }
 
-  @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return new PolystarContent(drawable, layer, this);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/model/content/RectangleShape.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.graphics.PointF;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.RectangleContent;
@@ -45,7 +46,7 @@ public boolean isHidden() {
     return hidden;
   }
 
-  @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return new RectangleContent(drawable, layer, this);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/content/Repeater.java
Patch:
@@ -2,6 +2,7 @@
 
 import androidx.annotation.Nullable;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.RepeaterContent;
@@ -45,7 +46,7 @@ public boolean isHidden() {
     return hidden;
   }
 
-  @Nullable @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Nullable @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return new RepeaterContent(drawable, layer, this);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/model/content/RoundedCorners.java
Patch:
@@ -2,6 +2,7 @@
 
 import androidx.annotation.Nullable;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.RoundedCornersContent;
@@ -25,7 +26,7 @@ public AnimatableValue<Float, Float> getCornerRadius() {
     return cornerRadius;
   }
 
-  @Nullable @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Nullable @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return new RoundedCornersContent(drawable, layer, this);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/model/content/ShapeFill.java
Patch:
@@ -4,6 +4,7 @@
 
 import androidx.annotation.Nullable;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.FillContent;
@@ -49,7 +50,7 @@ public boolean isHidden() {
     return hidden;
   }
 
-  @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return new FillContent(drawable, layer, this);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/content/ShapeGroup.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.lottie.model.content;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.ContentGroup;
@@ -31,8 +32,8 @@ public boolean isHidden() {
     return hidden;
   }
 
-  @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
-    return new ContentGroup(drawable, layer, this);
+  @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
+    return new ContentGroup(drawable, layer, this, composition);
   }
 
   @Override public String toString() {

File: lottie/src/main/java/com/airbnb/lottie/model/content/ShapePath.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.lottie.model.content;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.ShapeContent;
@@ -27,7 +28,7 @@ public AnimatableShapeValue getShapePath() {
     return shapePath;
   }
 
-  @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return new ShapeContent(drawable, layer, this);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/content/ShapeStroke.java
Patch:
@@ -4,6 +4,7 @@
 
 import androidx.annotation.Nullable;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.StrokeContent;
@@ -78,7 +79,7 @@ public ShapeStroke(String name, @Nullable AnimatableFloatValue offset,
     this.hidden = hidden;
   }
 
-  @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return new StrokeContent(drawable, layer, this);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/content/ShapeTrimPath.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.lottie.model.content;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.TrimPathContent;
@@ -65,7 +66,7 @@ public boolean isHidden() {
     return hidden;
   }
 
-  @Override public Content toContent(LottieDrawable drawable, BaseLayer layer) {
+  @Override public Content toContent(LottieDrawable drawable, LottieComposition composition, BaseLayer layer) {
     return new TrimPathContent(layer, this);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -55,7 +55,7 @@ static BaseLayer forModel(
       CompositionLayer compositionLayer, Layer layerModel, LottieDrawable drawable, LottieComposition composition) {
     switch (layerModel.getLayerType()) {
       case SHAPE:
-        return new ShapeLayer(drawable, layerModel, compositionLayer);
+        return new ShapeLayer(drawable, layerModel, compositionLayer, composition);
       case PRE_COMP:
         return new CompositionLayer(drawable, layerModel,
             composition.getPrecomps(layerModel.getRefId()), composition);

File: lottie/src/main/java/com/airbnb/lottie/model/layer/ShapeLayer.java
Patch:
@@ -7,6 +7,7 @@
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
+import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;
 import com.airbnb.lottie.animation.content.ContentGroup;
@@ -22,13 +23,13 @@ public class ShapeLayer extends BaseLayer {
   private final ContentGroup contentGroup;
   private final CompositionLayer compositionLayer;
 
-  ShapeLayer(LottieDrawable lottieDrawable, Layer layerModel, CompositionLayer compositionLayer) {
+  ShapeLayer(LottieDrawable lottieDrawable, Layer layerModel, CompositionLayer compositionLayer, LottieComposition composition) {
     super(lottieDrawable, layerModel);
     this.compositionLayer = compositionLayer;
 
     // Naming this __container allows it to be ignored in KeyPath matching.
     ShapeGroup shapeGroup = new ShapeGroup("__container", layerModel.getShapes(), false);
-    contentGroup = new ContentGroup(lottieDrawable, this, shapeGroup);
+    contentGroup = new ContentGroup(lottieDrawable, this, shapeGroup, composition);
     contentGroup.setContents(Collections.<Content>emptyList(), Collections.<Content>emptyList());
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -426,7 +426,7 @@ private List<ContentGroup> getContentsForCharacter(FontCharacter character) {
     List<ContentGroup> contents = new ArrayList<>(size);
     for (int i = 0; i < size; i++) {
       ShapeGroup sg = shapes.get(i);
-      contents.add(new ContentGroup(lottieDrawable, this, sg));
+      contents.add(new ContentGroup(lottieDrawable, this, sg, composition));
     }
     contentsForCharacter.put(character, contents);
     return contents;

File: lottie/src/main/java/com/airbnb/lottie/Lottie.java
Patch:
@@ -19,5 +19,6 @@ public static void initialize(@NonNull final LottieConfig lottieConfig) {
     L.setFetcher(lottieConfig.networkFetcher);
     L.setCacheProvider(lottieConfig.cacheProvider);
     L.setTraceEnabled(lottieConfig.enableSystraceMarkers);
+    L.setNetworkCacheEnabled(lottieConfig.enableNetworkCache);
   }
-}
\ No newline at end of file
+}

File: lottie/src/main/java/com/airbnb/lottie/animation/content/RoundedCornersContent.java
Patch:
@@ -161,9 +161,9 @@ public BaseKeyframeAnimation<Float, Float> getRoundedCorners() {
         // oriented point to CubicCurveData (path segments).
         CubicCurveData previousCurveData = modifiedCurves.get(floorMod(modifiedCurvesIndex - 1, modifiedCurves.size()));
         CubicCurveData currentCurveData = modifiedCurves.get(modifiedCurvesIndex);
-        previousCurveData.setControlPoint2(previousCurve.getVertex().x, previousCurve.getVertex().y);
+        previousCurveData.setControlPoint2(previousCurve.getControlPoint2().x, previousCurve.getControlPoint2().y);
         previousCurveData.setVertex(previousCurve.getVertex().x, previousCurve.getVertex().y);
-        currentCurveData.setControlPoint1(startingCurve.getVertex().x, startingCurve.getVertex().y);
+        currentCurveData.setControlPoint1(startingCurve.getControlPoint1().x, startingCurve.getControlPoint1().y);
         modifiedCurvesIndex++;
       }
     }

File: lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java
Patch:
@@ -38,7 +38,7 @@ public ImageAssetManager(Drawable.Callback callback, String imagesFolder,
       return;
     }
 
-    context = ((View) callback).getContext();
+    context = ((View) callback).getContext().getApplicationContext();
     this.imageAssets = imageAssets;
     setDelegate(delegate);
   }

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TextKeyframeAnimation.java
Patch:
@@ -1,7 +1,5 @@
 package com.airbnb.lottie.animation.keyframe;
 
-import androidx.annotation.Nullable;
-
 import com.airbnb.lottie.model.DocumentData;
 import com.airbnb.lottie.value.Keyframe;
 import com.airbnb.lottie.value.LottieFrameInfo;
@@ -39,7 +37,7 @@ public DocumentData getValue(LottieFrameInfo<DocumentData> frameInfo) {
         DocumentData baseDocumentData = frameInfo.getInterpolatedKeyframeProgress() == 1f ? frameInfo.getEndValue() : frameInfo.getStartValue();
         documentData.set(text, baseDocumentData.fontName, baseDocumentData.size, baseDocumentData.justification, baseDocumentData.tracking,
             baseDocumentData.lineHeight, baseDocumentData.baselineShift, baseDocumentData.color, baseDocumentData.strokeColor,
-            baseDocumentData.strokeWidth, baseDocumentData.strokeOverFill);
+            baseDocumentData.strokeWidth, baseDocumentData.strokeOverFill, baseDocumentData.boxPosition);
         return documentData;
       }
     });

File: lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java
Patch:
@@ -55,7 +55,7 @@ static AnimatableShapeValue parseShapeData(
 
   static AnimatableTextFrame parseDocumentData(
       JsonReader reader, LottieComposition composition) throws IOException {
-    return new AnimatableTextFrame(parse(reader, composition, DocumentDataParser.INSTANCE));
+    return new AnimatableTextFrame(parse(reader, Utils.dpScale(), composition, DocumentDataParser.INSTANCE));
   }
 
   static AnimatableColorValue parseColor(

File: lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java
Patch:
@@ -65,8 +65,9 @@ static AnimatableColorValue parseColor(
 
   static AnimatableGradientColorValue parseGradientColor(
       JsonReader reader, LottieComposition composition, int points) throws IOException {
-    return new AnimatableGradientColorValue(
+    AnimatableGradientColorValue animatableGradientColorValue = new AnimatableGradientColorValue(
         parse(reader, composition, new GradientColorParser(points)));
+    return animatableGradientColorValue;
   }
 
   /**

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -300,7 +300,7 @@ private Typeface getTypeface(Font font) {
         return callbackTypeface;
       }
     }
-    Typeface drawableTypeface = lottieDrawable.getTypeface(font.getFamily(), font.getStyle());
+    Typeface drawableTypeface = lottieDrawable.getTypeface(font);
     if (drawableTypeface != null) {
       return drawableTypeface;
     }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -583,6 +583,7 @@ public void playAnimation() {
     if (animationsEnabled() || getRepeatCount() == 0) {
       if (isVisible()) {
         animator.playAnimation();
+        onVisibleAction = OnVisibleAction.NONE;
       } else {
         onVisibleAction = OnVisibleAction.PLAY;
       }
@@ -620,6 +621,7 @@ public void resumeAnimation() {
     if (animationsEnabled() || getRepeatCount() == 0) {
       if (isVisible()) {
         animator.resumeAnimation();
+        onVisibleAction = OnVisibleAction.NONE;
       } else {
         onVisibleAction = OnVisibleAction.RESUME;
       }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -691,7 +691,7 @@ public void setMaxProgress(@FloatRange(from = 0f, to = 1f) final float maxProgre
       lazyCompositionTasks.add(c -> setMaxProgress(maxProgress));
       return;
     }
-    setMaxFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), maxProgress));
+    animator.setMaxFrame(MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), maxProgress));
   }
 
   /**

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -138,8 +138,8 @@ public void setComposition(LottieComposition composition) {
 
     if (keepMinAndMaxFrames) {
       setMinAndMaxFrames(
-          (int) Math.max(this.minFrame, composition.getStartFrame()),
-          (int) Math.min(this.maxFrame, composition.getEndFrame())
+          Math.max(this.minFrame, composition.getStartFrame()),
+          Math.min(this.maxFrame, composition.getEndFrame())
       );
     } else {
       setMinAndMaxFrames((int) composition.getStartFrame(), (int) composition.getEndFrame());

File: lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java
Patch:
@@ -67,7 +67,7 @@ public void testMaxFrame() {
     LottieDrawable drawable = new LottieDrawable();
     drawable.setComposition(composition);
     drawable.setMaxProgress(0.25f);
-    assertEquals(121.99f, drawable.getMaxFrame());
+    assertEquals(121f, drawable.getMaxFrame());
   }
 
   @Test

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java
Patch:
@@ -101,7 +101,9 @@ float getLinearCurrentKeyframeProgress() {
    */
   protected float getInterpolatedCurrentKeyframeProgress() {
     Keyframe<K> keyframe = getCurrentKeyframe();
-    if (keyframe.isStatic()) {
+    // Keyframe should not be null here but there seems to be a Xiaomi Android 10 specific crash.
+    // https://github.com/airbnb/lottie-android/issues/2050
+    if (keyframe == null || keyframe.isStatic()) {
       return 0f;
     }
     //noinspection ConstantConditions

File: lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieFetchResult.java
Patch:
@@ -2,6 +2,7 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.RestrictTo;
 
 import com.airbnb.lottie.utils.Logger;
 
@@ -11,6 +12,7 @@
 import java.io.InputStreamReader;
 import java.net.HttpURLConnection;
 
+@RestrictTo(RestrictTo.Scope.LIBRARY)
 public class DefaultLottieFetchResult implements LottieFetchResult {
 
   @NonNull

File: lottie/src/main/java/com/airbnb/lottie/network/DefaultLottieNetworkFetcher.java
Patch:
@@ -1,11 +1,13 @@
 package com.airbnb.lottie.network;
 
 import androidx.annotation.NonNull;
+import androidx.annotation.RestrictTo;
 
 import java.io.IOException;
 import java.net.HttpURLConnection;
 import java.net.URL;
 
+@RestrictTo(RestrictTo.Scope.LIBRARY)
 public class DefaultLottieNetworkFetcher implements LottieNetworkFetcher {
 
   @Override

File: lottie/src/main/java/com/airbnb/lottie/network/FileExtension.java
Patch:
@@ -1,10 +1,11 @@
 package com.airbnb.lottie.network;
 
-import com.airbnb.lottie.utils.Logger;
+import androidx.annotation.RestrictTo;
 
 /**
  * Helpers for known Lottie file types.
  */
+@RestrictTo(RestrictTo.Scope.LIBRARY)
 public enum FileExtension {
   JSON(".json"),
   ZIP(".zip");

File: lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java
Patch:
@@ -5,6 +5,7 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.RestrictTo;
 import androidx.annotation.WorkerThread;
 
 import com.airbnb.lottie.utils.Logger;
@@ -20,6 +21,7 @@
 /**
  * Helper class to save and restore animations fetched from an URL to the app disk cache.
  */
+@RestrictTo(RestrictTo.Scope.LIBRARY)
 public class NetworkCache {
 
   @NonNull

File: lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java
Patch:
@@ -4,6 +4,7 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.RestrictTo;
 import androidx.annotation.WorkerThread;
 
 import com.airbnb.lottie.LottieComposition;
@@ -17,6 +18,7 @@
 import java.io.InputStream;
 import java.util.zip.ZipInputStream;
 
+@RestrictTo(RestrictTo.Scope.LIBRARY)
 public class NetworkFetcher {
 
   @NonNull

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -1354,6 +1354,9 @@ private void drawDirectlyToCanvas(Canvas canvas) {
    * @see LottieAnimationView#setRenderMode(RenderMode)
    */
   private void renderAndDrawAsBitmap(Canvas originalCanvas, CompositionLayer compositionLayer) {
+    if (composition == null || compositionLayer == null) {
+      return;
+    }
     ensureSoftwareRenderingObjectsInitialized();
 
     //noinspection deprecation

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -518,6 +518,7 @@ public void draw(@NonNull Canvas canvas) {
       }
     }
 
+    isDirty = false;
     L.endSection("Drawable#draw");
   }
 
@@ -540,6 +541,7 @@ public void draw(Canvas canvas, Matrix matrix) {
     } else {
       compositionLayer.draw(canvas, matrix, alpha);
     }
+    isDirty = false;
   }
 
   // <editor-fold desc="animator">
@@ -1412,7 +1414,6 @@ private void renderAndDrawAsBitmap(Canvas originalCanvas, CompositionLayer compo
       softwareRenderingOriginalCanvasMatrix.invert(softwareRenderingOriginalCanvasMatrixInverse);
       softwareRenderingOriginalCanvasMatrixInverse.mapRect(softwareRenderingDstBoundsRectF, softwareRenderingTransformedBounds);
       convertRect(softwareRenderingDstBoundsRectF, softwareRenderingDstBoundsRect);
-      isDirty = false;
     }
 
     softwareRenderingSrcBoundsRect.set(0, 0, renderWidth, renderHeight);

File: lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java
Patch:
@@ -81,7 +81,7 @@ static ContentModel parse(JsonReader reader, LottieComposition composition)
         model = ShapeTrimPathParser.parse(reader, composition);
         break;
       case "sr":
-        model = PolystarShapeParser.parse(reader, composition);
+        model = PolystarShapeParser.parse(reader, composition, d);
         break;
       case "mm":
         model = MergePathsParser.parse(reader);

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -459,6 +459,7 @@ private boolean isModifier(int codePoint) {
         Character.getType(codePoint) == Character.MODIFIER_SYMBOL ||
         Character.getType(codePoint) == Character.NON_SPACING_MARK ||
         Character.getType(codePoint) == Character.OTHER_SYMBOL ||
+        Character.getType(codePoint) == Character.DIRECTIONALITY_NONSPACING_MARK ||
         Character.getType(codePoint) == Character.SURROGATE;
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -538,6 +538,8 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca
         typefaceCallbackAnimation.addUpdateListener(this);
         addAnimation(typefaceCallbackAnimation);
       }
+    } else if (property == LottieProperty.TEXT) {
+      textAnimation.setStringValueCallback((LottieValueCallback<String>) callback);
     }
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java
Patch:
@@ -112,7 +112,7 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La
     int childAlpha = isDrawingWithOffScreen ? 255 : parentAlpha;
     for (int i = layers.size() - 1; i >= 0; i--) {
       boolean nonEmptyClip = true;
-      if (!newClipRect.isEmpty()) {
+      if (lottieDrawable.getClipToCompositionBounds() && !newClipRect.isEmpty()) {
         nonEmptyClip = canvas.clipRect(newClipRect);
       }
       if (nonEmptyClip) {

File: lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java
Patch:
@@ -484,7 +484,6 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu
    * Check if a given InputStream points to a .zip compressed file
    */
   private static Boolean isZipCompressed(BufferedSource inputSource) {
-
     try {
       BufferedSource peek = inputSource.peek();
       for (byte b : MAGIC) {
@@ -494,11 +493,13 @@ private static Boolean isZipCompressed(BufferedSource inputSource) {
       }
       peek.close();
       return true;
+    } catch (NoSuchMethodError e) {
+      // This happens in the Android Studio layout preview.
+      return false;
     } catch (Exception e) {
       Logger.error("Failed to check zip file header", e);
       return false;
     }
-
   }
 
   @Nullable

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableShapeValue.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.graphics.Path;
 
-import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.ShapeKeyframeAnimation;
 import com.airbnb.lottie.model.content.ShapeData;
 import com.airbnb.lottie.value.Keyframe;
@@ -15,7 +14,7 @@ public AnimatableShapeValue(List<Keyframe<ShapeData>> keyframes) {
     super(keyframes);
   }
 
-  @Override public BaseKeyframeAnimation<ShapeData, Path> createAnimation() {
+  @Override public ShapeKeyframeAnimation createAnimation() {
     return new ShapeKeyframeAnimation(keyframes);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java
Patch:
@@ -92,6 +92,9 @@ static ContentModel parse(JsonReader reader, LottieComposition composition)
       case "rp":
         model = RepeaterParser.parse(reader, composition);
         break;
+      case "rd":
+        model = RoundedCornersParser.parse(reader, composition);
+        break;
       default:
         Logger.warning("Unknown shape type " + type);
     }

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java
Patch:
@@ -169,7 +169,7 @@ public Matrix getMatrix() {
     BaseKeyframeAnimation<?, PointF> position = this.position;
     if (position != null) {
       PointF positionValue = position.getValue();
-      if (positionValue.x != 0 || positionValue.y != 0) {
+      if (positionValue != null && (positionValue.x != 0 || positionValue.y != 0)) {
         matrix.preTranslate(positionValue.x, positionValue.y);
       }
     }

File: lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java
Patch:
@@ -98,9 +98,9 @@ public FillContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeFi
       return;
     }
     L.beginSection("FillContent#draw");
-    paint.setColor(((ColorKeyframeAnimation) colorAnimation).getIntValue());
+    int color = ((ColorKeyframeAnimation) this.colorAnimation).getIntValue();
     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);
-    paint.setAlpha(clamp(alpha, 0, 255));
+    paint.setColor((clamp(alpha, 0, 255) << 24) | (color & 0xFFFFFF));
 
     if (colorFilterAnimation != null) {
       paint.setColorFilter(colorFilterAnimation.getValue());

File: lottie/src/main/java/com/airbnb/lottie/model/MutablePair.java
Patch:
@@ -7,9 +7,7 @@
 import androidx.core.util.Pair;
 
 /**
- * Non final version of {@link Pair}
- *
- * @param <T>
+ * Non final version of {@link Pair}.
  */
 @RestrictTo(LIBRARY)
 public class MutablePair<T> {

File: lottie/src/main/java/com/airbnb/lottie/parser/KeyframesParser.java
Patch:
@@ -34,7 +34,6 @@ static <T> List<Keyframe<T>> parse(JsonReader reader, LottieComposition composit
 
             if (reader.peek() == JsonReader.Token.NUMBER) {
               // For properties in which the static value is an array of numbers.
-              Keyframe<T> keyframe;
               keyframes.add(KeyframeParser.parse(reader, composition, scale, valueParser, false, multiDimensional));
             } else {
               while (reader.hasNext()) {

File: lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionMoshiParser.java
Patch:
@@ -95,7 +95,7 @@ public static LottieComposition parse(JsonReader reader) throws IOException {
           parseChars(reader, composition, characters);
           break;
         case 10:
-          parseMarkers(reader, composition, markers);
+          parseMarkers(reader, markers);
           break;
         default:
           reader.skipName();
@@ -239,8 +239,7 @@ private static void parseChars(
       "dr"
   );
 
-  private static void parseMarkers(
-      JsonReader reader, LottieComposition composition, List<Marker> markers) throws IOException {
+  private static void parseMarkers(JsonReader reader, List<Marker> markers) throws IOException {
     reader.beginArray();
     while (reader.hasNext()) {
       String comment = null;

File: lottie/src/main/java/com/airbnb/lottie/utils/BaseLottieAnimator.java
Patch:
@@ -40,11 +40,11 @@ public void removeAllUpdateListeners() {
     updateListeners.clear();
   }
 
-  public void addListener(ValueAnimator.AnimatorListener listener) {
+  public void addListener(Animator.AnimatorListener listener) {
     listeners.add(listener);
   }
 
-  public void removeListener(ValueAnimator.AnimatorListener listener) {
+  public void removeListener(Animator.AnimatorListener listener) {
     listeners.remove(listener);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/utils/Utils.java
Patch:
@@ -93,6 +93,7 @@ public static void closeQuietly(Closeable closeable) {
       } catch (RuntimeException rethrown) {
         throw rethrown;
       } catch (Exception ignored) {
+        // Ignore.
       }
     }
   }

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -245,7 +245,7 @@ private void drawTextWithFont(
     String text = documentData.text;
     TextDelegate textDelegate = lottieDrawable.getTextDelegate();
     if (textDelegate != null) {
-      text = textDelegate.getTextInternal(text);
+      text = textDelegate.getTextInternal(getName(), text);
     }
     fillPaint.setTypeface(typeface);
     float textSize;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java
Patch:
@@ -226,9 +226,9 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr
     }
     float offsetLength = totalLength * pathGroup.trimPath.getOffset().getValue() / 360f;
     float startLength =
-        totalLength * pathGroup.trimPath.getStart().getValue() / 100f + offsetLength;
+        totalLength * (pathGroup.trimPath.getStart().getValue() / 100f) + offsetLength;
     float endLength =
-        totalLength * pathGroup.trimPath.getEnd().getValue() / 100f + offsetLength;
+        totalLength * (pathGroup.trimPath.getEnd().getValue() / 100f) + offsetLength;
 
     float currentLength = 0;
     for (int j = pathGroup.paths.size() - 1; j >= 0; j--) {

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -601,7 +601,7 @@ public BlurMaskFilter getBlurMaskFilter(float radius) {
     if (blurMaskFilterRadius == radius) {
       return blurMaskFilter;
     }
-    blurMaskFilter = new BlurMaskFilter(radius, BlurMaskFilter.Blur.NORMAL);
+    blurMaskFilter = new BlurMaskFilter(radius / 2f, BlurMaskFilter.Blur.NORMAL);
     blurMaskFilterRadius = radius;
     return blurMaskFilter;
   }

File: lottie/src/main/java/com/airbnb/lottie/LottieProperty.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.graphics.ColorFilter;
 import android.graphics.PointF;
+import android.graphics.Typeface;
 
 import com.airbnb.lottie.value.LottieValueCallback;
 import com.airbnb.lottie.value.ScaleXY;
@@ -164,4 +165,6 @@ public interface LottieProperty {
   ColorFilter COLOR_FILTER = new ColorFilter();
 
   Integer[] GRADIENT_COLOR = new Integer[0];
+
+  Typeface TYPEFACE = Typeface.DEFAULT;
 }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -1026,7 +1026,7 @@ public List<KeyPath> resolveKeyPath(KeyPath keyPath) {
    * {@link #resolveKeyPath(KeyPath)} and will resolve it if it hasn't.
    */
   public <T> void addValueCallback(
-      final KeyPath keyPath, final T property, final LottieValueCallback<T> callback) {
+      final KeyPath keyPath, final T property, @Nullable final LottieValueCallback<T> callback) {
     if (compositionLayer == null) {
       lazyCompositionTasks.add(new LazyCompositionTask() {
         @Override

File: lottie/src/main/java/com/airbnb/lottie/L.java
Patch:
@@ -105,14 +105,15 @@ public static NetworkFetcher networkFetcher(@NonNull Context context) {
 
   @NonNull
   public static NetworkCache networkCache(@NonNull final Context context) {
+    final Context appContext = context.getApplicationContext();
     NetworkCache local = networkCache;
     if (local == null) {
       synchronized (NetworkCache.class) {
         local = networkCache;
         if (local == null) {
           networkCache = local = new NetworkCache(cacheProvider != null ? cacheProvider : new LottieNetworkCacheProvider() {
             @Override @NonNull public File getCacheDir() {
-              return new File(context.getCacheDir(), "lottie_network_cache");
+              return new File(appContext.getCacheDir(), "lottie_network_cache");
             }
           });
         }

File: lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java
Patch:
@@ -147,7 +147,8 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La
     if (timeRemapping == null) {
       progress -= layerModel.getStartProgress();
     }
-    if (layerModel.getTimeStretch() != 0) {
+    //Time stretch needs to be divided if is not "__container"
+    if (layerModel.getTimeStretch() != 0 && !"__container".equals(layerModel.getName())) {
       progress /= layerModel.getTimeStretch();
     }
     for (int i = layers.size() - 1; i >= 0; i--) {

File: lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java
Patch:
@@ -441,7 +441,7 @@ private static LottieResult<LottieComposition> fromZipStreamSyncInternal(ZipInpu
         } else if (entry.getName().contains(".json")) {
           com.airbnb.lottie.parser.moshi.JsonReader reader = JsonReader.of(buffer(source(inputStream)));
           composition = LottieCompositionFactory.fromJsonReaderSyncInternal(reader, null, false).getValue();
-        } else if (entryName.contains(".png") || entryName.contains(".webp")) {
+        } else if (entryName.contains(".png") || entryName.contains(".webp") || entryName.contains(".jpg") || entryName.contains(".jpeg")) {
           String[] splitName = entryName.split("/");
           String name = splitName[splitName.length - 1];
           images.put(name, BitmapFactory.decodeStream(inputStream));

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java
Patch:
@@ -14,7 +14,7 @@ public class PathKeyframe extends Keyframe<PointF> {
   private final Keyframe<PointF> pointKeyFrame;
 
   public PathKeyframe(LottieComposition composition, Keyframe<PointF> keyframe) {
-    super(composition, keyframe.startValue, keyframe.endValue, keyframe.interpolator,
+    super(composition, keyframe.startValue, keyframe.endValue, keyframe.interpolator, keyframe.xInterpolator, keyframe.yInterpolator,
         keyframe.startFrame, keyframe.endFrame);
     this.pointKeyFrame = keyframe;
     createPath();
@@ -25,8 +25,7 @@ public void createPath() {
     // until KitKat...
     boolean equals = endValue != null && startValue != null &&
         startValue.equals(endValue.x, endValue.y);
-    //noinspection ConstantConditions
-    if (endValue != null && !equals) {
+    if (startValue != null && endValue != null && !equals) {
       path = Utils.createPath(startValue, endValue, pointKeyFrame.pathCp1, pointKeyFrame.pathCp2);
     }
   }

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframeAnimation.java
Patch:
@@ -11,8 +11,8 @@
 public class PathKeyframeAnimation extends KeyframeAnimation<PointF> {
   private final PointF point = new PointF();
   private final float[] pos = new float[2];
+  private final PathMeasure pathMeasure = new PathMeasure();
   private PathKeyframe pathMeasureKeyframe;
-  private PathMeasure pathMeasure = new PathMeasure();
 
   public PathKeyframeAnimation(List<? extends Keyframe<PointF>> keyframes) {
     super(keyframes);

File: lottie/src/main/java/com/airbnb/lottie/model/content/RectangleShape.java
Patch:
@@ -13,12 +13,12 @@
 public class RectangleShape implements ContentModel {
   private final String name;
   private final AnimatableValue<PointF, PointF> position;
-  private final AnimatablePointValue size;
+  private final AnimatableValue<PointF, PointF> size;
   private final AnimatableFloatValue cornerRadius;
   private final boolean hidden;
 
   public RectangleShape(String name, AnimatableValue<PointF, PointF> position,
-                        AnimatablePointValue size, AnimatableFloatValue cornerRadius, boolean hidden) {
+      AnimatableValue<PointF, PointF> size, AnimatableFloatValue cornerRadius, boolean hidden) {
     this.name = name;
     this.position = position;
     this.size = size;
@@ -34,7 +34,7 @@ public AnimatableFloatValue getCornerRadius() {
     return cornerRadius;
   }
 
-  public AnimatablePointValue getSize() {
+  public AnimatableValue<PointF, PointF> getSize() {
     return size;
   }
 

File: lottie/src/main/java/com/airbnb/lottie/parser/AnimatablePathValueParser.java
Patch:
@@ -1,7 +1,6 @@
 package com.airbnb.lottie.parser;
 
 import android.graphics.PointF;
-import android.util.JsonToken;
 
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.parser.moshi.JsonReader;
@@ -18,7 +17,7 @@
 
 public class AnimatablePathValueParser {
 
-  private static JsonReader.Options NAMES = JsonReader.Options.of(
+  private static final JsonReader.Options NAMES = JsonReader.Options.of(
       "k",
       "x",
       "y"

File: lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.graphics.Path;
 
-import android.webkit.JsResult;
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.model.animatable.AnimatableGradientColorValue;
 import com.airbnb.lottie.model.animatable.AnimatableIntegerValue;

File: lottie/src/main/java/com/airbnb/lottie/parser/PathKeyframeParser.java
Patch:
@@ -19,7 +19,7 @@ static PathKeyframe parse(
       JsonReader reader, LottieComposition composition) throws IOException {
     boolean animated = reader.peek() == JsonReader.Token.BEGIN_OBJECT;
     Keyframe<PointF> keyframe = KeyframeParser.parse(
-        reader, composition, Utils.dpScale(), PathParser.INSTANCE, animated);
+        reader, composition, Utils.dpScale(), PathParser.INSTANCE, animated, false);
 
     return new PathKeyframe(composition, keyframe);
   }

File: lottie/src/main/java/com/airbnb/lottie/parser/RectangleShapeParser.java
Patch:
@@ -4,7 +4,6 @@
 
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.model.animatable.AnimatableFloatValue;
-import com.airbnb.lottie.model.animatable.AnimatablePointValue;
 import com.airbnb.lottie.model.animatable.AnimatableValue;
 import com.airbnb.lottie.model.content.RectangleShape;
 import com.airbnb.lottie.parser.moshi.JsonReader;
@@ -28,7 +27,7 @@ static RectangleShape parse(
       JsonReader reader, LottieComposition composition) throws IOException {
     String name = null;
     AnimatableValue<PointF, PointF> position = null;
-    AnimatablePointValue size = null;
+    AnimatableValue<PointF, PointF> size = null;
     AnimatableFloatValue roundedness = null;
     boolean hidden = false;
 

File: lottie/src/main/java/com/airbnb/lottie/utils/Utils.java
Patch:
@@ -14,8 +14,6 @@
 import android.os.Build;
 import android.provider.Settings;
 
-import androidx.annotation.Nullable;
-
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.animation.LPaint;
 import com.airbnb.lottie.animation.content.TrimPathContent;
@@ -31,6 +29,8 @@
 
 import javax.net.ssl.SSLException;
 
+import androidx.annotation.Nullable;
+
 public final class Utils {
   public static final int SECOND_IN_NANOS = 1000000000;
 

File: lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java
Patch:
@@ -221,7 +221,7 @@ private boolean hasTwoOrMoreDrawableContent() {
 
   @Override public void resolveKeyPath(
       KeyPath keyPath, int depth, List<KeyPath> accumulator, KeyPath currentPartialKeyPath) {
-    if (!keyPath.matches(getName(), depth)) {
+    if (!keyPath.matches(getName(), depth) && !"__container".equals(getName())) {
       return;
     }
 

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -141,12 +141,10 @@ public Layer layerModelForId(long id) {
     return (long) (getDurationFrames() / frameRate * 1000);
   }
 
-  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
   public float getStartFrame() {
     return startFrame;
   }
 
-  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
   public float getEndFrame() {
     return endFrame;
   }

File: lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java
Patch:
@@ -108,7 +108,7 @@ private LottieResult<LottieComposition> fromInputStream(@NonNull String url, @No
       // in the result which is more useful than failing here.
       contentType = "application/json";
     }
-    if (contentType.contains("application/zip")) {
+    if (contentType.contains("application/zip") || url.split("\\?")[0].endsWith(".lottie")) {
       Logger.debug("Handling zip response.");
       extension = FileExtension.ZIP;
       result = fromZipStream(url, inputStream, cacheKey);

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java
Patch:
@@ -256,6 +256,8 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca
          colorCallbackAnimation = null;
        } else {
          //noinspection rawtypes
+         linearGradientCache.clear();
+         radialGradientCache.clear();
          colorCallbackAnimation = new ValueCallbackKeyframeAnimation<>(callback);
          colorCallbackAnimation.addUpdateListener(this);
          layer.addAnimation(colorCallbackAnimation);

File: lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java
Patch:
@@ -30,6 +30,8 @@ public enum MatteType {
     NONE,
     ADD,
     INVERT,
+    LUMA,
+    LUMA_INVERTED,
     UNKNOWN
   }
 

File: lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java
Patch:
@@ -139,7 +139,7 @@ private int getOpacityAtPosition(double position, double[] positions, double[] o
       double lastPosition = positions[i - 1];
       double thisPosition = positions[i];
       if (positions[i] >= position) {
-        double progress = (position - lastPosition) / (thisPosition - lastPosition);
+        double progress = MiscUtils.clamp((position - lastPosition) / (thisPosition - lastPosition), 0, 1);
         return (int) (255 * MiscUtils.lerp(opacities[i - 1], opacities[i], progress));
       }
     }

File: lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java
Patch:
@@ -207,7 +207,7 @@ public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes
    *
    * Pass null as the cache key to skip caching.
    */
-  public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes final int rawRes, @Nullable String cacheKey) {
+  public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes final int rawRes, @Nullable final String cacheKey) {
     // Prevent accidentally leaking an Activity.
     final WeakReference<Context> contextRef = new WeakReference<>(context);
     final Context appContext = context.getApplicationContext();
@@ -216,7 +216,7 @@ public static LottieTask<LottieComposition> fromRawRes(Context context, @RawRes
       public LottieResult<LottieComposition> call() {
         @Nullable Context originalContext = contextRef.get();
         Context context = originalContext != null ? originalContext : appContext;
-        return fromRawResSync(context, rawRes);
+        return fromRawResSync(context, rawRes, cacheKey);
       }
     });
   }

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -375,7 +375,7 @@ private void applyMasks(Canvas canvas, Matrix matrix) {
     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.P) {
       // Pre-Pie, offscreen buffers were opaque which meant that outer border of a mask
       // might get drawn depending on the result of float rounding.
-      canvas.drawColor(Color.TRANSPARENT);
+      clearCanvas(canvas);
     }
     L.endSection("Layer#saveLayer");
     for (int i = 0; i < mask.getMasks().size(); i++) {

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -147,6 +147,7 @@ public void setComposition(LottieComposition composition) {
     float frame = this.frame;
     this.frame = 0f;
     setFrame((int) frame);
+    notifyUpdate();
   }
 
   public void setFrame(float frame) {

File: lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java
Patch:
@@ -316,8 +316,7 @@ public <T> void addValueCallback(T property, @Nullable LottieValueCallback<T> ca
       innerRadiusAnimation.setValueCallback((LottieValueCallback<Float>) callback);
     } else if (property == LottieProperty.POLYSTAR_OUTER_RADIUS) {
       outerRadiusAnimation.setValueCallback((LottieValueCallback<Float>) callback);
-    } else if (property == LottieProperty.POLYSTAR_INNER_ROUNDEDNESS &&
-        innerRoundednessAnimation != null) {
+    } else if (property == LottieProperty.POLYSTAR_INNER_ROUNDEDNESS && innerRoundednessAnimation != null) {
       innerRoundednessAnimation.setValueCallback((LottieValueCallback<Float>) callback);
     } else if (property == LottieProperty.POLYSTAR_OUTER_ROUNDEDNESS) {
       outerRoundednessAnimation.setValueCallback((LottieValueCallback<Float>) callback);

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java
Patch:
@@ -25,7 +25,7 @@ public interface AnimationListener {
   private boolean isDiscrete = false;
 
   private final KeyframesWrapper<K> keyframesWrapper;
-  private float progress = 0f;
+  protected float progress = 0f;
   @Nullable protected LottieValueCallback<A> valueCallback;
 
   @Nullable private A cachedGetValue = null;

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -141,12 +141,12 @@ public Layer layerModelForId(long id) {
     return (long) (getDurationFrames() / frameRate * 1000);
   }
 
-  @RestrictTo(RestrictTo.Scope.LIBRARY)
+  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
   public float getStartFrame() {
     return startFrame;
   }
 
-  @RestrictTo(RestrictTo.Scope.LIBRARY)
+  @RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
   public float getEndFrame() {
     return endFrame;
   }

File: lottie/src/main/java/com/airbnb/lottie/LottieProperty.java
Patch:
@@ -103,7 +103,7 @@ public interface LottieProperty {
   /** [0,100] */
   Float TRANSFORM_START_OPACITY = 12f;
   /** [0,100] */
-  Float TRANSFORM_END_OPACITY = 12f;
+  Float TRANSFORM_END_OPACITY = 12.1f;
   /** The time value in seconds */
   Float TIME_REMAP = 13f;
   /** In Dp */

File: lottie/src/test/java/com/airbnb/lottie/BaseTest.java
Patch:
@@ -1,12 +1,14 @@
 package com.airbnb.lottie;
 
+import android.os.Build;
+
 import org.junit.Ignore;
 import org.junit.runner.RunWith;
 import org.robolectric.RobolectricTestRunner;
 import org.robolectric.annotation.Config;
 
 @RunWith(RobolectricTestRunner.class)
-@Config
+@Config(sdk = Build.VERSION_CODES.P)
 @Ignore
 public class BaseTest {
 }

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -247,6 +247,7 @@ public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {
 
     if (!rect.isEmpty()) {
       L.beginSection("Layer#saveLayer");
+      contentPaint.setAlpha(255);
       Utils.saveLayerCompat(canvas, rect, contentPaint);
       L.endSection("Layer#saveLayer");
 

File: lottie/src/main/java/com/airbnb/lottie/LottieProperty.java
Patch:
@@ -106,6 +106,8 @@ public interface LottieProperty {
   Float TRANSFORM_END_OPACITY = 12f;
   /** The time value in seconds */
   Float TIME_REMAP = 13f;
+  /** In Dp */
+  Float TEXT_SIZE = 14f;
 
   ColorFilter COLOR_FILTER = new ColorFilter();
 

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -23,6 +23,7 @@
 import androidx.annotation.Nullable;
 import androidx.annotation.RawRes;
 import androidx.appcompat.widget.AppCompatImageView;
+import androidx.core.view.ViewCompat;
 
 import com.airbnb.lottie.model.KeyPath;
 import com.airbnb.lottie.parser.moshi.JsonReader;
@@ -247,7 +248,7 @@ private void init(@Nullable AttributeSet attrs) {
     ss.animationName = animationName;
     ss.animationResId = animationResId;
     ss.progress = lottieDrawable.getProgress();
-    ss.isAnimating = lottieDrawable.isAnimating();
+    ss.isAnimating = lottieDrawable.isAnimating() || (!ViewCompat.isAttachedToWindow(this) && wasAnimatingWhenDetached);
     ss.imageAssetsFolder = lottieDrawable.getImageAssetsFolder();
     ss.repeatMode = lottieDrawable.getRepeatMode();
     ss.repeatCount = lottieDrawable.getRepeatCount();

File: lottie/src/main/java/com/airbnb/lottie/model/content/Mask.java
Patch:
@@ -7,7 +7,8 @@ public class Mask {
   public enum MaskMode {
     MASK_MODE_ADD,
     MASK_MODE_SUBTRACT,
-    MASK_MODE_INTERSECT
+    MASK_MODE_INTERSECT,
+    MASK_MODE_NONE
   }
 
   private final MaskMode maskMode;

File: lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java
Patch:
@@ -32,6 +32,9 @@ static Mask parse(
             case "s":
               maskMode = Mask.MaskMode.MASK_MODE_SUBTRACT;
               break;
+            case "n":
+              maskMode = Mask.MaskMode.MASK_MODE_NONE;
+              break;
             case "i":
               composition.addWarning(
                   "Animation contains intersect masks. They are not supported but will be treated like add masks.");

File: lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java
Patch:
@@ -9,7 +9,6 @@
 import com.airbnb.lottie.LottieProperty;
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.ColorKeyframeAnimation;
-import com.airbnb.lottie.animation.keyframe.IntegerKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.ValueCallbackKeyframeAnimation;
 import com.airbnb.lottie.model.content.ShapeStroke;
 import com.airbnb.lottie.model.layer.BaseLayer;

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.graphics.Canvas;
 import android.graphics.Color;
-import android.graphics.ColorFilter;
 import android.graphics.Matrix;
 import android.graphics.Paint;
 import android.graphics.Path;

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -681,7 +681,9 @@ public void run(LottieComposition composition) {
       });
       return;
     }
+    L.beginSection("Drawable#setProgress");
     animator.setFrame(MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), progress));
+    L.endSection("Drawable#setProgress");
   }
 
   /**

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -168,13 +168,15 @@ private void invalidateSelf() {
 
   @SuppressLint("WrongConstant")
   private void saveLayerCompat(Canvas canvas, RectF rect, Paint paint, boolean all) {
+    L.beginSection("BaseLayer#saveLayer");
     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
       // This method was deprecated in API level 26 and not recommended since 22, but its
       // 2-parameter replacement is only available starting at API level 21.
       canvas.saveLayer(rect, paint, all ? Canvas.ALL_SAVE_FLAG : SAVE_FLAGS);
     } else {
       canvas.saveLayer(rect, paint);
     }
+    L.endSection("BaseLayer#saveLayer");
   }
 
   public void addAnimation(@Nullable BaseKeyframeAnimation<?, ?> newAnimation) {

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -7,6 +7,7 @@
 import androidx.annotation.VisibleForTesting;
 import android.view.Choreographer;
 
+import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieComposition;
 
 /**
@@ -82,6 +83,7 @@ public float getFrame() {
       return;
     }
 
+    L.beginSection("LottieValueAnimator#doFrame");
     long now = frameTimeNanos;
     long timeSinceFrame = lastFrameTimeNs == 0 ? 0 : now - lastFrameTimeNs;
     float frameDuration = getFrameDurationNs();
@@ -113,6 +115,7 @@ public float getFrame() {
     }
 
     verifyFrame();
+    L.endSection("LottieValueAnimator#doFrame");
   }
 
   private float getFrameDurationNs() {

File: lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java
Patch:
@@ -40,7 +40,7 @@
  * In-progress tasks will also be held so they can be returned for subsequent requests for the same
  * animation prior to the cache being populated.
  */
-@SuppressWarnings({"WeakerAccess", "unused"})
+@SuppressWarnings({"WeakerAccess", "unused", "NullAway"})
 public class LottieCompositionFactory {
   /**
    * Keep a map of cache keys to in-progress tasks and return them for new requests.

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -295,6 +295,7 @@ protected void onVisibilityChanged(@NonNull View changedView, int visibility) {
       playAnimation();
       // Autoplay from xml should only apply once.
       autoPlay = false;
+      wasAnimatingWhenDetached = false;
     }
     if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
       // This is needed to mimic newer platform behavior.

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -407,7 +407,9 @@ public void run(LottieComposition composition) {
       });
       return;
     }
-    animator.resumeAnimation();
+    if (systemAnimationsEnabled) {
+      animator.resumeAnimation();
+    }
   }
 
   /**

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java
Patch:
@@ -44,7 +44,6 @@ public class GradientFillContent
   private final BaseLayer layer;
   private final LongSparseArray<LinearGradient> linearGradientCache = new LongSparseArray<>();
   private final LongSparseArray<RadialGradient> radialGradientCache = new LongSparseArray<>();
-  private final Matrix shaderMatrix = new Matrix();
   private final Path path = new Path();
   private final Paint paint = new LPaint(Paint.ANTI_ALIAS_FLAG);
   private final RectF boundsRect = new RectF();
@@ -116,8 +115,7 @@ public GradientFillContent(final LottieDrawable lottieDrawable, BaseLayer layer,
     } else {
       shader = getRadialGradient();
     }
-    shaderMatrix.set(parentMatrix);
-    shader.setLocalMatrix(shaderMatrix);
+    shader.setLocalMatrix(parentMatrix);
     paint.setShader(shader);
 
     if (colorFilterAnimation != null) {

File: lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java
Patch:
@@ -295,7 +295,7 @@ private void applyDashPatternIfNeeded(Matrix parentMatrix) {
       }
       dashPatternValues[i] *= scale;
     }
-    float offset = dashPatternOffsetAnimation == null ? 0f : dashPatternOffsetAnimation.getValue();
+    float offset = dashPatternOffsetAnimation == null ? 0f : dashPatternOffsetAnimation.getValue() * scale;
     paint.setPathEffect(new DashPathEffect(dashPatternValues, offset));
     L.endSection("StrokeContent#applyDashPattern");
   }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -677,7 +677,7 @@ public void run(LottieComposition composition) {
       });
       return;
     }
-    setFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), progress));
+    animator.setFrame(MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), progress));
   }
 
   /**

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -146,7 +146,7 @@ public void setComposition(LottieComposition composition) {
     setFrame((int) frame);
   }
 
-  public void setFrame(int frame) {
+  public void setFrame(float frame) {
     if (this.frame == frame) {
       return;
     }

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -9,12 +9,13 @@
 import androidx.annotation.WorkerThread;
 import androidx.collection.LongSparseArray;
 import androidx.collection.SparseArrayCompat;
-import android.util.JsonReader;
+import android.util.Log;
 
 import com.airbnb.lottie.model.Font;
 import com.airbnb.lottie.model.FontCharacter;
 import com.airbnb.lottie.model.Marker;
 import com.airbnb.lottie.model.layer.Layer;
+import com.airbnb.lottie.parser.moshi.JsonReader;
 import com.airbnb.lottie.utils.Logger;
 
 import org.json.JSONObject;

File: lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java
Patch:
@@ -1,9 +1,9 @@
 package com.airbnb.lottie.parser;
 
 import androidx.annotation.Nullable;
-import android.util.JsonReader;
 
 import com.airbnb.lottie.LottieComposition;
+import com.airbnb.lottie.parser.moshi.JsonReader;
 import com.airbnb.lottie.value.Keyframe;
 import com.airbnb.lottie.model.animatable.AnimatableColorValue;
 import com.airbnb.lottie.model.animatable.AnimatableFloatValue;

File: lottie/src/main/java/com/airbnb/lottie/parser/ColorParser.java
Patch:
@@ -1,9 +1,10 @@
 package com.airbnb.lottie.parser;
 
 import android.graphics.Color;
-import android.util.JsonReader;
 import android.util.JsonToken;
 
+import com.airbnb.lottie.parser.moshi.JsonReader;
+
 import java.io.IOException;
 
 public class ColorParser implements ValueParser<Integer> {
@@ -12,7 +13,7 @@ public class ColorParser implements ValueParser<Integer> {
   private ColorParser() {}
 
   @Override public Integer parse(JsonReader reader, float scale) throws IOException {
-    boolean isArray = reader.peek() == JsonToken.BEGIN_ARRAY;
+    boolean isArray = reader.peek() == JsonReader.Token.BEGIN_ARRAY;
     if (isArray) {
       reader.beginArray();
     }

File: lottie/src/main/java/com/airbnb/lottie/parser/FloatParser.java
Patch:
@@ -1,6 +1,7 @@
 package com.airbnb.lottie.parser;
 
-import android.util.JsonReader;
+
+import com.airbnb.lottie.parser.moshi.JsonReader;
 
 import java.io.IOException;
 

File: lottie/src/main/java/com/airbnb/lottie/parser/IntegerParser.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie.parser;
 
-import android.util.JsonReader;
+import com.airbnb.lottie.parser.moshi.JsonReader;
 
 import java.io.IOException;
 

File: lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java
Patch:
@@ -1,11 +1,10 @@
 package com.airbnb.lottie.parser;
 
-import android.util.JsonReader;
-
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.model.animatable.AnimatableIntegerValue;
 import com.airbnb.lottie.model.animatable.AnimatableShapeValue;
 import com.airbnb.lottie.model.content.Mask;
+import com.airbnb.lottie.parser.moshi.JsonReader;
 import com.airbnb.lottie.utils.Logger;
 
 import java.io.IOException;

File: lottie/src/main/java/com/airbnb/lottie/parser/PathKeyframeParser.java
Patch:
@@ -1,10 +1,10 @@
 package com.airbnb.lottie.parser;
 
 import android.graphics.PointF;
-import android.util.JsonReader;
 import android.util.JsonToken;
 
 import com.airbnb.lottie.LottieComposition;
+import com.airbnb.lottie.parser.moshi.JsonReader;
 import com.airbnb.lottie.value.Keyframe;
 import com.airbnb.lottie.animation.keyframe.PathKeyframe;
 import com.airbnb.lottie.utils.Utils;
@@ -17,7 +17,7 @@ private PathKeyframeParser() {}
 
   static PathKeyframe parse(
       JsonReader reader, LottieComposition composition) throws IOException {
-    boolean animated = reader.peek() == JsonToken.BEGIN_OBJECT;
+    boolean animated = reader.peek() == JsonReader.Token.BEGIN_OBJECT;
     Keyframe<PointF> keyframe = KeyframeParser.parse(
         reader, composition, Utils.dpScale(), PathParser.INSTANCE, animated);
 

File: lottie/src/main/java/com/airbnb/lottie/parser/PathParser.java
Patch:
@@ -1,7 +1,8 @@
 package com.airbnb.lottie.parser;
 
 import android.graphics.PointF;
-import android.util.JsonReader;
+
+import com.airbnb.lottie.parser.moshi.JsonReader;
 
 import java.io.IOException;
 

File: lottie/src/main/java/com/airbnb/lottie/parser/ScaleXYParser.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.lottie.parser;
 
-import android.util.JsonReader;
 import android.util.JsonToken;
 
+import com.airbnb.lottie.parser.moshi.JsonReader;
 import com.airbnb.lottie.value.ScaleXY;
 
 import java.io.IOException;
@@ -14,7 +14,7 @@ private ScaleXYParser() {
   }
 
   @Override public ScaleXY parse(JsonReader reader, float scale) throws IOException {
-    boolean isArray = reader.peek() == JsonToken.BEGIN_ARRAY;
+    boolean isArray = reader.peek() == JsonReader.Token.BEGIN_ARRAY;
     if (isArray) {
       reader.beginArray();
     }

File: lottie/src/main/java/com/airbnb/lottie/parser/ValueParser.java
Patch:
@@ -1,6 +1,7 @@
 package com.airbnb.lottie.parser;
 
-import android.util.JsonReader;
+
+import com.airbnb.lottie.parser.moshi.JsonReader;
 
 import java.io.IOException;
 

File: lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java
Patch:
@@ -64,7 +64,7 @@ public void addFrameListener(FrameListener frameListener) {
   }
 
   @SuppressWarnings("unused") public void removeFrameListener(FrameListener frameListener) {
-    frameListeners.add(frameListener);
+    frameListeners.remove(frameListener);
   }
 
   public void clearRenderTimes() {

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -96,7 +96,7 @@ public float getFrame() {
     notifyUpdate();
     if (ended) {
       if (getRepeatCount() != INFINITE && repeatCount >= getRepeatCount()) {
-        frame = getMaxFrame();
+        frame = speed < 0 ? getMinFrame() : getMaxFrame();
         removeFrameCallback();
         notifyEnd(isReversed());
       } else {

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -82,7 +82,7 @@ public float getFrame() {
       return;
     }
 
-    long now = System.nanoTime();
+    long now = frameTimeNanos;
     long timeSinceFrame = now - lastFrameTimeNs;
     float frameDuration = getFrameDurationNs();
     float dFrames = timeSinceFrame / frameDuration;

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -24,6 +24,7 @@
 import android.view.View;
 
 import com.airbnb.lottie.model.KeyPath;
+import com.airbnb.lottie.utils.Utils;
 import com.airbnb.lottie.value.LottieFrameInfo;
 import com.airbnb.lottie.value.LottieValueCallback;
 import com.airbnb.lottie.value.SimpleLottieValueCallback;
@@ -163,6 +164,8 @@ private void init(@Nullable AttributeSet attrs) {
 
     ta.recycle();
 
+    lottieDrawable.setSystemAnimationsAreEnabled(Utils.getAnimationScale(getContext()) != 0f);
+
     enableOrDisableHardwareLayer();
   }
 

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -181,7 +181,7 @@ public Marker getMarker(String markerName) {
     int size = markers.size();
     for (int i = 0; i < markers.size(); i++) {
       Marker marker = markers.get(i);
-      if (markerName.equals(marker.name)) {
+      if (marker.matchesName(markerName)) {
         return marker;
       }
     }

File: lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java
Patch:
@@ -19,7 +19,7 @@ public enum Justification {
   public final double size;
   @SuppressWarnings("WeakerAccess") public final Justification justification;
   public final int tracking;
-  @SuppressWarnings("WeakerAccess") final double lineHeight;
+  @SuppressWarnings("WeakerAccess") public final double lineHeight;
   public final double baselineShift;
   @ColorInt public final int color;
   @ColorInt public final int strokeColor;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java
Patch:
@@ -156,8 +156,8 @@ Matrix getTransformationMatrix() {
     int alpha;
     if (transformAnimation != null) {
       matrix.preConcat(transformAnimation.getMatrix());
-      alpha =
-          (int) ((transformAnimation.getOpacity().getValue() / 100f * parentAlpha / 255f) * 255);
+      int opacity = transformAnimation.getOpacity() == null ? 100 : transformAnimation.getOpacity().getValue();
+      alpha = (int) ((opacity / 100f * parentAlpha / 255f) * 255);
     } else {
       alpha = parentAlpha;
     }

File: lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java
Patch:
@@ -39,7 +39,8 @@ public class SolidLayer extends BaseLayer {
       return;
     }
 
-    int alpha = (int) (parentAlpha / 255f * (backgroundAlpha / 255f * transform.getOpacity().getValue() / 100f) * 255);
+    int opacity = transform.getOpacity() == null ? 100 : transform.getOpacity().getValue();
+    int alpha = (int) (parentAlpha / 255f * (backgroundAlpha / 255f * opacity / 100f) * 255);
     paint.setAlpha(alpha);
     if (colorFilterAnimation != null) {
       paint.setColorFilter(colorFilterAnimation.getValue());

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -112,7 +112,8 @@ public class TextLayer extends BaseLayer {
     } else {
       strokePaint.setColor(documentData.strokeColor);
     }
-    int alpha = transform.getOpacity().getValue() * 255 / 100;
+    int opacity = transform.getOpacity() == null ? 100 : transform.getOpacity().getValue();
+    int alpha = opacity * 255 / 100;
     fillPaint.setAlpha(alpha);
     strokePaint.setAlpha(alpha);
 

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -450,7 +450,7 @@ public void run(LottieComposition composition) {
       });
       return;
     }
-    animator.setMaxFrame(maxFrame);
+    animator.setMaxFrame(maxFrame + 0.99f);
   }
 
   /**
@@ -555,7 +555,8 @@ public void run(LottieComposition composition) {
       });
       return;
     }
-    animator.setMinAndMaxFrames(minFrame, maxFrame);
+    // Adding 0.99 ensures that the maxFrame itself gets played.
+    animator.setMinAndMaxFrames(minFrame, maxFrame + 0.99f);
   }
 
   /**

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -159,11 +159,11 @@ public void setMinFrame(int minFrame) {
     setMinAndMaxFrames(minFrame, (int) maxFrame);
   }
 
-  public void setMaxFrame(int maxFrame) {
-    setMinAndMaxFrames((int) minFrame, maxFrame);
+  public void setMaxFrame(float maxFrame) {
+    setMinAndMaxFrames(minFrame, maxFrame);
   }
 
-  public void setMinAndMaxFrames(int minFrame, int maxFrame) {
+  public void setMinAndMaxFrames(float minFrame, float maxFrame) {
     if (minFrame > maxFrame) {
       throw new IllegalArgumentException(String.format("minFrame (%s) must be <= maxFrame (%s)", minFrame, maxFrame));
     }

File: lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java
Patch:
@@ -51,7 +51,7 @@ public void testMaxFrame() {
     LottieDrawable drawable = new LottieDrawable();
     drawable.setComposition(composition);
     drawable.setMaxProgress(0.25f);
-    assertEquals(121f, drawable.getMaxFrame());
+    assertEquals(121.99f, drawable.getMaxFrame());
   }
 
   @Test
@@ -61,6 +61,6 @@ public void testMinMaxFrame() {
     drawable.setComposition(composition);
     drawable.setMinAndMaxProgress(0.25f, 0.42f);
     assertEquals(121f, drawable.getMinFrame());
-    assertEquals(182f, drawable.getMaxFrame());
+    assertEquals(182.99f, drawable.getMaxFrame());
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/utils/Utils.java
Patch:
@@ -2,7 +2,6 @@
 
 import android.content.res.Resources;
 import android.graphics.Bitmap;
-import android.graphics.BitmapFactory;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Matrix;
@@ -31,13 +30,14 @@ public final class Utils {
   private static final float SQRT_2 = (float) Math.sqrt(2);
   private static float dpScale = -1;
 
-  private Utils() {}
+  private Utils() {
+  }
 
   public static Path createPath(PointF startPoint, PointF endPoint, PointF cp1, PointF cp2) {
     Path path = new Path();
     path.moveTo(startPoint.x, startPoint.y);
 
-    if (cp1 != null  && cp2 != null && (cp1.length() != 0 || cp2.length() != 0)) {
+    if (cp1 != null && cp2 != null && (cp1.length() != 0 || cp2.length() != 0)) {
       path.cubicTo(
           startPoint.x + cp1.x, startPoint.y + cp1.y,
           endPoint.x + cp2.x, endPoint.y + cp2.y,

File: lottie/src/test/java/com/airbnb/lottie/LottieDrawableTest.java
Patch:
@@ -5,6 +5,7 @@
 import androidx.collection.SparseArrayCompat;
 import com.airbnb.lottie.model.Font;
 import com.airbnb.lottie.model.FontCharacter;
+import com.airbnb.lottie.model.Marker;
 import com.airbnb.lottie.model.layer.Layer;
 import org.junit.Test;
 
@@ -22,7 +23,7 @@ private LottieComposition createComposition(int startFrame, int endFrame) {
     composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<Layer>(),
             new LongSparseArray<Layer>(0), new HashMap<String, List<Layer>>(0),
             new HashMap<String, LottieImageAsset>(0), new SparseArrayCompat<FontCharacter>(0),
-            new HashMap<String, Font>(0));
+            new HashMap<String, Font>(0), new ArrayList<Marker>());
     return composition;
   }
 

File: lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java
Patch:
@@ -7,6 +7,7 @@
 import androidx.collection.SparseArrayCompat;
 import com.airbnb.lottie.model.Font;
 import com.airbnb.lottie.model.FontCharacter;
+import com.airbnb.lottie.model.Marker;
 import com.airbnb.lottie.model.layer.Layer;
 import com.airbnb.lottie.utils.LottieValueAnimator;
 import org.junit.Before;
@@ -62,7 +63,7 @@ private LottieComposition createComposition(int startFrame, int endFrame) {
     composition.init(new Rect(), startFrame, endFrame, 1000, new ArrayList<Layer>(),
             new LongSparseArray<Layer>(0), new HashMap<String, List<Layer>>(0),
             new HashMap<String, LottieImageAsset>(0), new SparseArrayCompat<FontCharacter>(0),
-            new HashMap<String, Font>(0));
+            new HashMap<String, Font>(0), new ArrayList<Marker>());
     return composition;
   }
 

File: lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java
Patch:
@@ -327,7 +327,7 @@ private static LottieImageAsset findImageAssetForFileName(LottieComposition comp
    */
   private static LottieTask<LottieComposition> cache(
           @Nullable final String cacheKey, Callable<LottieResult<LottieComposition>> callable) {
-    final LottieComposition cachedComposition = LottieCompositionCache.getInstance().get(cacheKey);
+    final LottieComposition cachedComposition = cacheKey == null ? null : LottieCompositionCache.getInstance().get(cacheKey);
     if (cachedComposition != null) {
       return new LottieTask<>(new Callable<LottieResult<LottieComposition>>() {
         @Override
@@ -336,7 +336,7 @@ public LottieResult<LottieComposition> call() {
         }
       });
     }
-    if (taskCache.containsKey(cacheKey)) {
+    if (cacheKey != null && taskCache.containsKey(cacheKey)) {
       return taskCache.get(cacheKey);
     }
 

File: lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java
Patch:
@@ -100,12 +100,14 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro
           break;
         case "tt":
           matteType = Layer.MatteType.values()[reader.nextInt()];
+          composition.incrementMatteOrMaskCount(1);
           break;
         case "masksProperties":
           reader.beginArray();
           while (reader.hasNext()) {
             masks.add(MaskParser.parse(reader, composition));
           }
+          composition.incrementMatteOrMaskCount(masks.size());
           reader.endArray();
           break;
         case "shapes":

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -49,6 +49,8 @@
  * <p>
  * You can manually set the progress of the animation with {@link #setProgress(float)} or
  * {@link R.attr#lottie_progress}
+ *
+ * @see <a href="http://airbnb.io/lottie">Full Documentation</a>
  */
 @SuppressWarnings({"unused", "WeakerAccess"}) public class LottieAnimationView extends AppCompatImageView {
 

File: lottie/src/main/java/com/airbnb/lottie/parser/GradientFillParser.java
Patch:
@@ -24,7 +24,7 @@ static GradientFill parse(
     GradientType gradientType = null;
     AnimatablePointValue startPoint = null;
     AnimatablePointValue endPoint = null;
-    Path.FillType fillType = null;
+    Path.FillType fillType = Path.FillType.WINDING;
     boolean hidden = false;
 
     while (reader.hasNext()) {

File: lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java
Patch:
@@ -128,6 +128,6 @@ private File getCachedFile(String url) throws FileNotFoundException {
   }
 
   private static String filenameForUrl(String url, FileExtension extension, boolean isTemp) {
-    return "lottie_cache_" + url.replaceAll("\\W+", "") + (isTemp ? extension.extension : extension.tempExtension());
+    return "lottie_cache_" + url.replaceAll("\\W+", "") + (isTemp ? extension.tempExtension(): extension.extension);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java
Patch:
@@ -238,7 +238,7 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr
     L.endSection("StrokeContent#applyTrimPath");
   }
 
-  @Override public void getBounds(RectF outBounds, Matrix parentMatrix) {
+  @Override public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents) {
     L.beginSection("StrokeContent#getBounds");
     path.reset();
     for (int i = 0; i < pathGroups.size(); i++) {

File: lottie/src/main/java/com/airbnb/lottie/animation/content/DrawingContent.java
Patch:
@@ -6,5 +6,5 @@
 
 public interface DrawingContent extends Content {
   void draw(Canvas canvas, Matrix parentMatrix, int alpha);
-  void getBounds(RectF outBounds, Matrix parentMatrix);
+  void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents);
 }

File: lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java
Patch:
@@ -98,7 +98,7 @@ public FillContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeFi
     L.endSection("FillContent#draw");
   }
 
-  @Override public void getBounds(RectF outBounds, Matrix parentMatrix) {
+  @Override public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents) {
     path.reset();
     for (int i = 0; i < paths.size(); i++) {
       this.path.addPath(paths.get(i).getPath(), parentMatrix);

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java
Patch:
@@ -129,7 +129,7 @@ public GradientFillContent(final LottieDrawable lottieDrawable, BaseLayer layer,
     L.endSection("GradientFillContent#draw");
   }
 
-  @Override public void getBounds(RectF outBounds, Matrix parentMatrix) {
+  @Override public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents) {
     path.reset();
     for (int i = 0; i < paths.size(); i++) {
       path.addPath(paths.get(i).getPath(), parentMatrix);

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java
Patch:
@@ -62,7 +62,7 @@ public GradientStrokeContent(
     if (hidden) {
       return;
     }
-    getBounds(boundsRect, parentMatrix);
+    getBounds(boundsRect, parentMatrix, false);
     if (type == GradientType.Linear) {
       paint.setShader(getLinearGradient());
     } else {

File: lottie/src/main/java/com/airbnb/lottie/animation/content/RepeaterContent.java
Patch:
@@ -118,8 +118,8 @@ public RepeaterContent(LottieDrawable lottieDrawable, BaseLayer layer, Repeater
     }
   }
 
-  @Override public void getBounds(RectF outBounds, Matrix parentMatrix) {
-    contentGroup.getBounds(outBounds, parentMatrix);
+  @Override public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents) {
+    contentGroup.getBounds(outBounds, parentMatrix, applyParents);
   }
 
   @Override public void onValueChanged() {

File: lottie/src/main/java/com/airbnb/lottie/model/layer/NullLayer.java
Patch:
@@ -15,8 +15,8 @@ public class NullLayer extends BaseLayer {
     // Do nothing.
   }
 
-  @Override public void getBounds(RectF outBounds, Matrix parentMatrix) {
-    super.getBounds(outBounds, parentMatrix);
+  @Override public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents) {
+    super.getBounds(outBounds, parentMatrix, applyParents);
     outBounds.set(0, 0, 0, 0);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/model/layer/ShapeLayer.java
Patch:
@@ -30,9 +30,9 @@ public class ShapeLayer extends BaseLayer {
     contentGroup.draw(canvas, parentMatrix, parentAlpha);
   }
 
-  @Override public void getBounds(RectF outBounds, Matrix parentMatrix) {
-    super.getBounds(outBounds, parentMatrix);
-    contentGroup.getBounds(outBounds, boundsMatrix);
+  @Override public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents) {
+    super.getBounds(outBounds, parentMatrix, applyParents);
+    contentGroup.getBounds(outBounds, boundsMatrix, applyParents);
   }
 
   @Override

File: lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java
Patch:
@@ -68,8 +68,8 @@ public class SolidLayer extends BaseLayer {
     }
   }
 
-  @Override public void getBounds(RectF outBounds, Matrix parentMatrix) {
-    super.getBounds(outBounds, parentMatrix);
+  @Override public void getBounds(RectF outBounds, Matrix parentMatrix, boolean applyParents) {
+    super.getBounds(outBounds, parentMatrix, applyParents);
     rect.set(0, 0, layerModel.getSolidWidth(), layerModel.getSolidHeight());
     boundsMatrix.mapRect(rect);
     outBounds.set(rect);

File: lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java
Patch:
@@ -61,7 +61,9 @@ public void setDelegate(@Nullable ImageAssetDelegate assetDelegate) {
       asset.setBitmap(null);
       return ret;
     }
-    return putBitmap(id, bitmap);
+    Bitmap prevBitmap = imageAssets.get(id).getBitmap();
+    putBitmap(id, bitmap);
+    return prevBitmap;
   }
 
   @Nullable public Bitmap bitmapForId(String id) {

File: lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java
Patch:
@@ -169,10 +169,10 @@ public void testSetFrameIntegrity() {
 
     // setFrame < minFrame should clamp to minFrame
     animator.setFrame(100);
-    assertEquals(200, animator.getFrame());
+    assertEquals(200f, animator.getFrame());
 
     animator.setFrame(900);
-    assertEquals(800, animator.getFrame());
+    assertEquals(800f, animator.getFrame());
   }
 
   @Test(expected = IllegalArgumentException.class)

File: LottieSample/src/main/kotlin/com/airbnb/lottie/samples/FontFragment.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.lottie.samples;
 
 import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v4.app.Fragment;
+import androidx.annotation.Nullable;
+import androidx.fragment.app.Fragment;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;

File: LottieSample/src/main/kotlin/com/airbnb/lottie/samples/TestColorFilterActivity.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.lottie.samples;
 
 import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v7.app.AppCompatActivity;
+import androidx.annotation.Nullable;
+import androidx.appcompat.app.AppCompatActivity;
 
 public class TestColorFilterActivity extends AppCompatActivity {
 

File: lottie/src/main/java/com/airbnb/lottie/L.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie;
 
-import android.support.annotation.RestrictTo;
-import android.support.v4.os.TraceCompat;
+import androidx.annotation.RestrictTo;
+import androidx.core.os.TraceCompat;
 import android.util.Log;
 
 import java.util.HashSet;

File: lottie/src/main/java/com/airbnb/lottie/LottieCompositionFactory.java
Patch:
@@ -4,9 +4,9 @@
 import android.content.res.Resources;
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
-import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
-import android.support.annotation.WorkerThread;
+import androidx.annotation.Nullable;
+import androidx.annotation.RawRes;
+import androidx.annotation.WorkerThread;
 import android.util.JsonReader;
 import android.util.Log;
 

File: lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.lottie;
 
 import android.graphics.Bitmap;
-import android.support.annotation.Nullable;
-import android.support.annotation.RestrictTo;
+import androidx.annotation.Nullable;
+import androidx.annotation.RestrictTo;
 
 /**
  * Data class describing an image asset exported by bodymovin.

File: lottie/src/main/java/com/airbnb/lottie/LottieResult.java
Patch:
@@ -1,9 +1,8 @@
 package com.airbnb.lottie;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import java.util.Arrays;
-import java.util.Objects;
 
 /**
  * Contains class to hold the resulting value of an async task or an exception if it failed.

File: lottie/src/main/java/com/airbnb/lottie/LottieTask.java
Patch:
@@ -2,8 +2,8 @@
 
 import android.os.Handler;
 import android.os.Looper;
-import android.support.annotation.Nullable;
-import android.support.annotation.RestrictTo;
+import androidx.annotation.Nullable;
+import androidx.annotation.RestrictTo;
 import android.util.Log;
 
 import java.util.ArrayList;

File: lottie/src/main/java/com/airbnb/lottie/OnCompositionLoadedListener.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 /**
  * @see LottieCompositionFactory

File: lottie/src/main/java/com/airbnb/lottie/PerformanceTracker.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie;
 
-import android.support.v4.util.ArraySet;
-import android.support.v4.util.Pair;
+import androidx.collection.ArraySet;
+import androidx.core.util.Pair;
 import android.util.Log;
 
 import com.airbnb.lottie.utils.MeanCalculator;

File: lottie/src/main/java/com/airbnb/lottie/SimpleColorFilter.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.graphics.PorterDuff;
 import android.graphics.PorterDuffColorFilter;
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 
 /**
  * A color filter with a predefined transfer mode that applies the specified color on top of the

File: lottie/src/main/java/com/airbnb/lottie/TextDelegate.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie;
 
-import android.support.annotation.Nullable;
-import android.support.annotation.VisibleForTesting;
+import androidx.annotation.Nullable;
+import androidx.annotation.VisibleForTesting;
 
 import java.util.HashMap;
 import java.util.Map;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java
Patch:
@@ -8,14 +8,13 @@
 import android.graphics.Path;
 import android.graphics.PathMeasure;
 import android.graphics.RectF;
-import android.support.annotation.CallSuper;
-import android.support.annotation.Nullable;
+import androidx.annotation.CallSuper;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.LottieProperty;
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
-import com.airbnb.lottie.animation.keyframe.FloatKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.ValueCallbackKeyframeAnimation;
 import com.airbnb.lottie.model.KeyPath;
 import com.airbnb.lottie.model.animatable.AnimatableFloatValue;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/ContentGroup.java
Patch:
@@ -4,7 +4,7 @@
 import android.graphics.Matrix;
 import android.graphics.Path;
 import android.graphics.RectF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/EllipseContent.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.graphics.Path;
 import android.graphics.PointF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.LottieProperty;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java
Patch:
@@ -6,7 +6,7 @@
 import android.graphics.Paint;
 import android.graphics.Path;
 import android.graphics.RectF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieDrawable;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java
Patch:
@@ -10,9 +10,9 @@
 import android.graphics.RadialGradient;
 import android.graphics.RectF;
 import android.graphics.Shader;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.util.LongSparseArray;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.collection.LongSparseArray;
 
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieDrawable;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java
Patch:
@@ -7,7 +7,7 @@
 import android.graphics.RadialGradient;
 import android.graphics.RectF;
 import android.graphics.Shader;
-import android.support.v4.util.LongSparseArray;
+import androidx.collection.LongSparseArray;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.graphics.Path;
 import android.graphics.PointF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.LottieProperty;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/RectangleContent.java
Patch:
@@ -3,7 +3,7 @@
 import android.graphics.Path;
 import android.graphics.PointF;
 import android.graphics.RectF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/RepeaterContent.java
Patch:
@@ -4,7 +4,7 @@
 import android.graphics.Matrix;
 import android.graphics.Path;
 import android.graphics.RectF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.LottieProperty;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/ShapeContent.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie.animation.content;
 
 import android.graphics.Path;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java
Patch:
@@ -3,7 +3,7 @@
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
 import android.graphics.Matrix;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.LottieProperty;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @RestrictTo(LIBRARY)
 package com.airbnb.lottie.animation.content;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie.animation.keyframe;
 
-import android.support.annotation.FloatRange;
-import android.support.annotation.Nullable;
+import androidx.annotation.FloatRange;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.value.LottieValueCallback;
 import com.airbnb.lottie.value.Keyframe;

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.graphics.Path;
 import android.graphics.PointF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.value.Keyframe;

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/TransformKeyframeAnimation.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.graphics.Matrix;
 import android.graphics.PointF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.value.LottieValueCallback;
 import com.airbnb.lottie.value.ScaleXY;

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @RestrictTo(LIBRARY)
 package com.airbnb.lottie.animation.keyframe;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file

File: lottie/src/main/java/com/airbnb/lottie/animation/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @RestrictTo(LIBRARY)
 package com.airbnb.lottie.animation;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file

File: lottie/src/main/java/com/airbnb/lottie/manager/FontAssetManager.java
Patch:
@@ -3,7 +3,7 @@
 import android.content.res.AssetManager;
 import android.graphics.Typeface;
 import android.graphics.drawable.Drawable;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.util.Log;
 import android.view.View;
 

File: lottie/src/main/java/com/airbnb/lottie/manager/ImageAssetManager.java
Patch:
@@ -4,7 +4,7 @@
 import android.graphics.Bitmap;
 import android.graphics.BitmapFactory;
 import android.graphics.drawable.Drawable;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.text.TextUtils;
 import android.util.Base64;
 import android.util.Log;
@@ -17,7 +17,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.HashMap;
-import java.util.Iterator;
 import java.util.Map;
 
 public class ImageAssetManager {

File: lottie/src/main/java/com/airbnb/lottie/manager/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @RestrictTo(LIBRARY)
 package com.airbnb.lottie.manager;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file

File: lottie/src/main/java/com/airbnb/lottie/model/CubicCurveData.java
Patch:
@@ -1,9 +1,9 @@
 package com.airbnb.lottie.model;
 
 import android.graphics.PointF;
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
 
 @RestrictTo(LIBRARY)
 public class CubicCurveData {

File: lottie/src/main/java/com/airbnb/lottie/model/DocumentData.java
Patch:
@@ -1,9 +1,9 @@
 package com.airbnb.lottie.model;
 
-import android.support.annotation.ColorInt;
-import android.support.annotation.RestrictTo;
+import androidx.annotation.ColorInt;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
 
 @RestrictTo(LIBRARY)
 public class DocumentData {

File: lottie/src/main/java/com/airbnb/lottie/model/Font.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.lottie.model;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
 
 @RestrictTo(LIBRARY)
 public class Font {

File: lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java
Patch:
@@ -1,12 +1,12 @@
 package com.airbnb.lottie.model;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
 import com.airbnb.lottie.model.content.ShapeGroup;
 
 import java.util.List;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
 
 @RestrictTo(LIBRARY)
 public class FontCharacter {

File: lottie/src/main/java/com/airbnb/lottie/model/KeyPath.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.lottie.model;
 
-import android.support.annotation.CheckResult;
-import android.support.annotation.Nullable;
-import android.support.annotation.RestrictTo;
+import androidx.annotation.CheckResult;
+import androidx.annotation.Nullable;
+import androidx.annotation.RestrictTo;
 
 import java.util.ArrayList;
 import java.util.Arrays;

File: lottie/src/main/java/com/airbnb/lottie/model/KeyPathElement.java
Patch:
@@ -1,13 +1,13 @@
 package com.airbnb.lottie.model;
 
-import android.support.annotation.Nullable;
-import android.support.annotation.RestrictTo;
+import androidx.annotation.Nullable;
+import androidx.annotation.RestrictTo;
 
 import com.airbnb.lottie.value.LottieValueCallback;
 
 import java.util.List;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
 
 /**
  * Any item that can be a part of a {@link KeyPath} should implement this.

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTextProperties.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie.model.animatable;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 public class AnimatableTextProperties {
 

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableTransform.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie.model.animatable;
 
 import android.graphics.PointF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @RestrictTo(LIBRARY)
 package com.airbnb.lottie.model.animatable;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file

File: lottie/src/main/java/com/airbnb/lottie/model/content/ContentModel.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie.model.content;
 
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;

File: lottie/src/main/java/com/airbnb/lottie/model/content/GradientFill.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie.model.content;
 
 import android.graphics.Path;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;

File: lottie/src/main/java/com/airbnb/lottie/model/content/GradientStroke.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie.model.content;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;

File: lottie/src/main/java/com/airbnb/lottie/model/content/MergePaths.java
Patch:
@@ -1,7 +1,6 @@
 package com.airbnb.lottie.model.content;
 
-import android.support.annotation.Nullable;
-import android.util.Log;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieDrawable;

File: lottie/src/main/java/com/airbnb/lottie/model/content/Repeater.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie.model.content;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;

File: lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java
Patch:
@@ -1,8 +1,7 @@
 package com.airbnb.lottie.model.content;
 
 import android.graphics.PointF;
-import android.support.annotation.FloatRange;
-import android.util.Log;
+import androidx.annotation.FloatRange;
 
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.model.CubicCurveData;

File: lottie/src/main/java/com/airbnb/lottie/model/content/ShapeFill.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie.model.content;
 
 import android.graphics.Path;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;

File: lottie/src/main/java/com/airbnb/lottie/model/content/ShapeStroke.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie.model.content;
 
 import android.graphics.Paint;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;

File: lottie/src/main/java/com/airbnb/lottie/model/content/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @RestrictTo(LIBRARY)
 package com.airbnb.lottie.model.content;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file

File: lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java
Patch:
@@ -3,9 +3,9 @@
 import android.graphics.Canvas;
 import android.graphics.Matrix;
 import android.graphics.RectF;
-import android.support.annotation.FloatRange;
-import android.support.annotation.Nullable;
-import android.support.v4.util.LongSparseArray;
+import androidx.annotation.FloatRange;
+import androidx.annotation.Nullable;
+import androidx.collection.LongSparseArray;
 
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieComposition;

File: lottie/src/main/java/com/airbnb/lottie/model/layer/ImageLayer.java
Patch:
@@ -7,8 +7,8 @@
 import android.graphics.Paint;
 import android.graphics.Rect;
 import android.graphics.RectF;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.LottieProperty;

File: lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie.model.layer;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.value.Keyframe;

File: lottie/src/main/java/com/airbnb/lottie/model/layer/ShapeLayer.java
Patch:
@@ -3,7 +3,7 @@
 import android.graphics.Canvas;
 import android.graphics.Matrix;
 import android.graphics.RectF;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.content.Content;

File: lottie/src/main/java/com/airbnb/lottie/model/layer/SolidLayer.java
Patch:
@@ -7,7 +7,7 @@
 import android.graphics.Paint;
 import android.graphics.Path;
 import android.graphics.RectF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.LottieProperty;

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -7,7 +7,7 @@
 import android.graphics.Path;
 import android.graphics.RectF;
 import android.graphics.Typeface;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;

File: lottie/src/main/java/com/airbnb/lottie/model/layer/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @RestrictTo(LIBRARY)
 package com.airbnb.lottie.model.layer;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file

File: lottie/src/main/java/com/airbnb/lottie/network/NetworkCache.java
Patch:
@@ -1,9 +1,9 @@
 package com.airbnb.lottie.network;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
-import android.support.annotation.WorkerThread;
-import android.support.v4.util.Pair;
+import androidx.annotation.Nullable;
+import androidx.annotation.WorkerThread;
+import androidx.core.util.Pair;
 
 import com.airbnb.lottie.L;
 

File: lottie/src/main/java/com/airbnb/lottie/network/NetworkFetcher.java
Patch:
@@ -1,9 +1,9 @@
 package com.airbnb.lottie.network;
 
 import android.content.Context;
-import android.support.annotation.Nullable;
-import android.support.annotation.WorkerThread;
-import android.support.v4.util.Pair;
+import androidx.annotation.Nullable;
+import androidx.annotation.WorkerThread;
+import androidx.core.util.Pair;
 
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieComposition;

File: lottie/src/main/java/com/airbnb/lottie/network/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @RestrictTo(LIBRARY)
 package com.airbnb.lottie.network;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file

File: lottie/src/main/java/com/airbnb/lottie/parser/AnimatableValueParser.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie.parser;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.util.JsonReader;
 
 import com.airbnb.lottie.LottieComposition;

File: lottie/src/main/java/com/airbnb/lottie/parser/ContentModelParser.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie.parser;
 
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 import android.util.JsonReader;
 import android.util.Log;
 

File: lottie/src/main/java/com/airbnb/lottie/parser/GradientColorParser.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie.parser;
 
 import android.graphics.Color;
-import android.support.annotation.IntRange;
+import androidx.annotation.IntRange;
 import android.util.JsonReader;
 import android.util.JsonToken;
 

File: lottie/src/main/java/com/airbnb/lottie/parser/JsonUtils.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.graphics.Color;
 import android.graphics.PointF;
-import android.support.annotation.ColorInt;
+import androidx.annotation.ColorInt;
 import android.util.JsonReader;
 import android.util.JsonToken;
 

File: lottie/src/main/java/com/airbnb/lottie/parser/KeyframeParser.java
Patch:
@@ -1,9 +1,9 @@
 package com.airbnb.lottie.parser;
 
 import android.graphics.PointF;
-import android.support.annotation.Nullable;
-import android.support.v4.util.SparseArrayCompat;
-import android.support.v4.view.animation.PathInterpolatorCompat;
+import androidx.annotation.Nullable;
+import androidx.collection.SparseArrayCompat;
+import androidx.core.view.animation.PathInterpolatorCompat;
 import android.util.JsonReader;
 import android.view.animation.Interpolator;
 import android.view.animation.LinearInterpolator;

File: lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.lottie.parser;
 
 import android.graphics.Rect;
-import android.support.v4.util.LongSparseArray;
-import android.support.v4.util.SparseArrayCompat;
+import androidx.collection.LongSparseArray;
+import androidx.collection.SparseArrayCompat;
 import android.util.JsonReader;
 
 import com.airbnb.lottie.L;

File: lottie/src/main/java/com/airbnb/lottie/parser/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @RestrictTo(LIBRARY)
 package com.airbnb.lottie.parser;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file

File: lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.graphics.Path;
 import android.graphics.PointF;
-import android.support.annotation.FloatRange;
+import androidx.annotation.FloatRange;
 
 import com.airbnb.lottie.animation.content.KeyPathElementContent;
 import com.airbnb.lottie.model.CubicCurveData;

File: lottie/src/main/java/com/airbnb/lottie/utils/Utils.java
Patch:
@@ -5,7 +5,7 @@
 import android.graphics.Path;
 import android.graphics.PathMeasure;
 import android.graphics.PointF;
-import android.support.annotation.Nullable;
+import androidx.annotation.Nullable;
 
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.animation.content.TrimPathContent;

File: lottie/src/main/java/com/airbnb/lottie/utils/package-info.java
Patch:
@@ -1,6 +1,6 @@
 @RestrictTo(LIBRARY)
 package com.airbnb.lottie.utils;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
-import static android.support.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file
+import static androidx.annotation.RestrictTo.Scope.LIBRARY;
\ No newline at end of file

File: lottie/src/main/java/com/airbnb/lottie/value/Keyframe.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.lottie.value;
 
 import android.graphics.PointF;
-import android.support.annotation.FloatRange;
-import android.support.annotation.Nullable;
+import androidx.annotation.FloatRange;
+import androidx.annotation.Nullable;
 import android.view.animation.Interpolator;
 
 import com.airbnb.lottie.LottieComposition;

File: lottie/src/main/java/com/airbnb/lottie/value/LottieFrameInfo.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie.value;
 
-import android.support.annotation.RestrictTo;
+import androidx.annotation.RestrictTo;
 
 /**
  * Data class for use with {@link LottieValueCallback}.

File: lottie/src/main/java/com/airbnb/lottie/value/LottieRelativeFloatValueCallback.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie.value;
 
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 import com.airbnb.lottie.utils.MiscUtils;
 

File: lottie/src/main/java/com/airbnb/lottie/value/LottieRelativePointValueCallback.java
Patch:
@@ -1,7 +1,7 @@
 package com.airbnb.lottie.value;
 
 import android.graphics.PointF;
-import android.support.annotation.NonNull;
+import androidx.annotation.NonNull;
 
 import com.airbnb.lottie.utils.MiscUtils;
 

File: lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java
Patch:
@@ -1,8 +1,8 @@
 package com.airbnb.lottie.value;
 
 
-import android.support.annotation.Nullable;
-import android.support.annotation.RestrictTo;
+import androidx.annotation.Nullable;
+import androidx.annotation.RestrictTo;
 
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 

File: lottie/src/test/java/com/airbnb/lottie/KeyPathTest.java
Patch:
@@ -15,8 +15,7 @@
 
 import static junit.framework.Assert.assertEquals;
 
-@RunWith(RobolectricTestRunner.class)
-public class KeyPathTest {
+public class KeyPathTest extends BaseTest {
   private static final String[] V = {
       "Shape Layer 1",
       "Group 1",

File: lottie/src/test/java/com/airbnb/lottie/LottieCompositionFactoryTest.java
Patch:
@@ -19,9 +19,7 @@
 import static junit.framework.Assert.assertNotNull;
 import static junit.framework.Assert.assertNull;
 
-@RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class LottieCompositionFactoryTest {
+public class LottieCompositionFactoryTest extends BaseTest {
   private static final String JSON = "{\"v\":\"4.11.1\",\"fr\":60,\"ip\":0,\"op\":180,\"w\":300,\"h\":300,\"nm\":\"Comp 1\",\"ddd\":0,\"assets\":[]," +
       "\"layers\":[{\"ddd\":0,\"ind\":1,\"ty\":4,\"nm\":\"Shape Layer 1\",\"sr\":1,\"ks\":{\"o\":{\"a\":0,\"k\":100,\"ix\":11},\"r\":{\"a\":0," +
       "\"k\":0,\"ix\":10},\"p\":{\"a\":0,\"k\":[150,150,0],\"ix\":2},\"a\":{\"a\":0,\"k\":[0,0,0],\"ix\":1},\"s\":{\"a\":0,\"k\":[100,100,100]," +

File: lottie/src/test/java/com/airbnb/lottie/PerformanceTrackerTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie;
 
-import android.support.v4.util.Pair;
+import androidx.core.util.Pair;
 
 import org.junit.Before;
 import org.junit.Test;

File: lottie/src/test/java/com/airbnb/lottie/model/LottieCompositionCacheTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.lottie.model;
 
+import com.airbnb.lottie.BaseTest;
 import com.airbnb.lottie.BuildConfig;
 import com.airbnb.lottie.LottieAnimationView;
 import com.airbnb.lottie.LottieComposition;
@@ -14,9 +15,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNull;
 
-@RunWith(RobolectricTestRunner.class)
-@Config(constants = BuildConfig.class)
-public class LottieCompositionCacheTest {
+public class LottieCompositionCacheTest extends BaseTest  {
 
   private LottieComposition composition;
   private LottieCompositionCache cache;

File: lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java
Patch:
@@ -35,7 +35,9 @@ public static Layer parse(LottieComposition composition) {
   }
 
   public static Layer parse(JsonReader reader, LottieComposition composition) throws IOException {
-    String layerName = null;
+    // This should always be set by After Effects. However, if somebody wants to minify
+    // and optimize their json, the name isn't critical for most cases so it can be removed.
+    String layerName = "UNSET";
     Layer.LayerType layerType = null;
     String refId = null;
     long layerId = 0;

File: lottie/src/main/java/com/airbnb/lottie/LottieTask.java
Patch:
@@ -32,7 +32,7 @@ public class LottieTask<T> {
    * You may change this to run deserialization synchronously for testing.
    */
   @SuppressWarnings("WeakerAccess")
-  public Executor EXECUTOR = Executors.newCachedThreadPool();
+  public static Executor EXECUTOR = Executors.newCachedThreadPool();
 
   @Nullable private Thread taskObserver;
 

File: lottie/src/main/java/com/airbnb/lottie/LottieTask.java
Patch:
@@ -121,7 +121,7 @@ public synchronized LottieTask<T> addFailureListener(LottieListener<Throwable> l
    * a listener if neccesary.
    * @return the task for call chaining.
    */
-  public synchronized LottieTask<T> removeFailureListener(LottieListener<T> listener) {
+  public synchronized LottieTask<T> removeFailureListener(LottieListener<Throwable> listener) {
     failureListeners.remove(listener);
     stopTaskObserverIfNeeded();
     return this;

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -56,7 +56,7 @@
 
 
   /**
-   * Pleaes migrate to LottieCompositionFactory. It has cleaner APIs and a LruCache built in.
+   * Please migrate to LottieCompositionFactory. It has cleaner APIs and a LruCache built in.
    * @see LottieCompositionFactory
    */
   @Deprecated

File: lottie/src/main/java/com/airbnb/lottie/animation/content/PolystarContent.java
Patch:
@@ -78,8 +78,8 @@ public PolystarContent(LottieDrawable lottieDrawable, BaseLayer layer,
     outerRadiusAnimation.addUpdateListener(this);
     outerRoundednessAnimation.addUpdateListener(this);
     if (type == PolystarShape.Type.Star) {
-      outerRadiusAnimation.addUpdateListener(this);
-      outerRoundednessAnimation.addUpdateListener(this);
+      innerRadiusAnimation.addUpdateListener(this);
+      innerRoundednessAnimation.addUpdateListener(this);
     }
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/content/MergePaths.java
Patch:
@@ -55,7 +55,7 @@ public MergePathsMode getMode() {
 
   @Override @Nullable public Content toContent(LottieDrawable drawable, BaseLayer layer) {
     if (!drawable.enableMergePathsForKitKatAndAbove()) {
-      Log.w(L.TAG, "Animation contains merge paths but they are disabled.");
+      L.warn("Animation contains merge paths but they are disabled.");
       return null;
     }
     return new MergePathsContent(this);

File: lottie/src/main/java/com/airbnb/lottie/parser/MaskParser.java
Patch:
@@ -34,6 +34,8 @@ static Mask parse(
               maskMode = Mask.MaskMode.MaskModeSubtract;
               break;
             case "i":
+              composition.addWarning(
+                  "Animation contains intersect masks. They are not supported but will be treated like add masks.");
               maskMode = Mask.MaskMode.MaskModeIntersect;
               break;
             default:

File: lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java
Patch:
@@ -15,6 +15,7 @@
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.LottieProperty;
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
+import com.airbnb.lottie.animation.keyframe.FloatKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.ValueCallbackKeyframeAnimation;
 import com.airbnb.lottie.model.KeyPath;
 import com.airbnb.lottie.model.animatable.AnimatableFloatValue;
@@ -50,14 +51,15 @@ public abstract class BaseStrokeContent
   @Nullable private BaseKeyframeAnimation<ColorFilter, ColorFilter> colorFilterAnimation;
 
   BaseStrokeContent(final LottieDrawable lottieDrawable, BaseLayer layer, Paint.Cap cap,
-      Paint.Join join, AnimatableIntegerValue opacity, AnimatableFloatValue width,
+      Paint.Join join, float miterLimit, AnimatableIntegerValue opacity, AnimatableFloatValue width,
       List<AnimatableFloatValue> dashPattern, AnimatableFloatValue offset) {
     this.lottieDrawable = lottieDrawable;
     this.layer = layer;
 
     paint.setStyle(Paint.Style.STROKE);
     paint.setStrokeCap(cap);
     paint.setStrokeJoin(join);
+    paint.setStrokeMiter(miterLimit);
 
     opacityAnimation = opacity.createAnimation();
     widthAnimation = width.createAnimation();

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientStrokeContent.java
Patch:
@@ -36,8 +36,8 @@ public class GradientStrokeContent extends BaseStrokeContent {
   public GradientStrokeContent(
       final LottieDrawable lottieDrawable, BaseLayer layer, GradientStroke stroke) {
     super(lottieDrawable, layer, stroke.getCapType().toPaintCap(),
-        stroke.getJoinType().toPaintJoin(), stroke.getOpacity(), stroke.getWidth(),
-        stroke.getLineDashPattern(), stroke.getDashOffset());
+        stroke.getJoinType().toPaintJoin(), stroke.getMiterLimit(), stroke.getOpacity(),
+        stroke.getWidth(), stroke.getLineDashPattern(), stroke.getDashOffset());
 
     name = stroke.getName();
     type = stroke.getGradientType();

File: lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java
Patch:
@@ -24,8 +24,8 @@ public class StrokeContent extends BaseStrokeContent {
 
   public StrokeContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeStroke stroke) {
     super(lottieDrawable, layer, stroke.getCapType().toPaintCap(),
-        stroke.getJoinType().toPaintJoin(), stroke.getOpacity(), stroke.getWidth(),
-        stroke.getLineDashPattern(), stroke.getDashOffset());
+        stroke.getJoinType().toPaintJoin(), stroke.getMiterLimit(), stroke.getOpacity(),
+        stroke.getWidth(), stroke.getLineDashPattern(), stroke.getDashOffset());
     this.layer = layer;
     name = stroke.getName();
     colorAnimation = stroke.getColor().createAnimation();

File: lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java
Patch:
@@ -55,11 +55,11 @@ private LottieValueAnimator createAnimator() {
     // Choreographer#postFrameCallback hangs with robolectric.
     return new LottieValueAnimator() {
       @Override public void postFrameCallback() {
-        isRunning = true;
+        running = true;
       }
 
       @Override public void removeFrameCallback() {
-        isRunning = false;
+        running = false;
       }
     };
   }

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -136,7 +136,7 @@ private void init(@Nullable AttributeSet attrs) {
       }
     }
     if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {
-      lottieDrawable.playAnimation();
+      wasAnimatingWhenDetached = true;
       autoPlay = true;
     }
 

File: lottie/src/main/java/com/airbnb/lottie/parser/LayerParser.java
Patch:
@@ -204,7 +204,7 @@ public static Layer parse(JsonReader reader, LottieComposition composition) thro
     }
 
     // The + 1 is because the animation should be visible on the out frame itself.
-    outFrame = (outFrame > 0 ? outFrame : composition.getEndFrame()) + 1;
+    outFrame = (outFrame > 0 ? outFrame : composition.getEndFrame());
     Keyframe<Float> visibleKeyframe =
         new Keyframe<>(composition, 1f, 1f, null, inFrame, outFrame);
     inOutKeyframes.add(visibleKeyframe);

File: lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java
Patch:
@@ -52,7 +52,7 @@ public static LottieComposition parse(JsonReader reader) throws IOException {
           startFrame = (float) reader.nextDouble();
           break;
         case "op":
-          endFrame = (float) reader.nextDouble();
+          endFrame = (float) reader.nextDouble() - 0.01f;
           break;
         case "fr":
           frameRate = (float) reader.nextDouble();

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -394,7 +394,7 @@ public void setMinProgress(final float minProgress) {
        });
        return;
      }
-   setMinFrame((int) MiscUtils.lerp(minProgress, composition.getStartFrame(), composition.getEndFrame()));
+   setMinFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), minProgress));
   }
 
   /**
@@ -423,7 +423,7 @@ public void setMaxProgress(@FloatRange(from = 0f, to = 1f) final float maxProgre
       });
       return;
     }
-    setMaxFrame((int) MiscUtils.lerp(maxProgress, composition.getStartFrame(), composition.getEndFrame()));
+    setMaxFrame((int) MiscUtils.lerp(composition.getStartFrame(), composition.getEndFrame(), maxProgress));
   }
 
   /**

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -244,6 +244,7 @@ public void clearComposition() {
     composition = null;
     compositionLayer = null;
     imageAssetManager = null;
+    animator.clearComposition();
     invalidateSelf();
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/FontCharacter.java
Patch:
@@ -16,12 +16,12 @@ public static int hashFor(char character, String fontFamily, String style) {
 
   private final List<ShapeGroup> shapes;
   private final char character;
-  private final int size;
+  private final double size;
   private final double width;
   private final String style;
   private final String fontFamily;
 
-  public FontCharacter(List<ShapeGroup> shapes, char character, int size,
+  public FontCharacter(List<ShapeGroup> shapes, char character, double size,
       double width, String style, String fontFamily) {
     this.shapes = shapes;
     this.character = character;
@@ -35,7 +35,7 @@ public List<ShapeGroup> getShapes() {
     return shapes;
   }
 
-  int getSize() {
+  double getSize() {
     return size;
   }
 

File: lottie/src/main/java/com/airbnb/lottie/parser/FontCharacterParser.java
Patch:
@@ -17,7 +17,7 @@ private FontCharacterParser() {}
   static FontCharacter parse(
       JsonReader reader, LottieComposition composition) throws IOException {
     char character = '\0';
-    int size = 0;
+    double size = 0;
     double width = 0;
     String style = null;
     String fontFamily = null;
@@ -30,7 +30,7 @@ static FontCharacter parse(
           character = reader.nextString().charAt(0);
           break;
         case "size":
-          size = reader.nextInt();
+          size = reader.nextDouble();
           break;
         case "w":
           width = reader.nextDouble();

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -393,7 +393,7 @@ public void setMinProgress(final float minProgress) {
        });
        return;
      }
-    setMinFrame((int) (minProgress * composition.getDurationFrames()));
+   setMinFrame((int) MiscUtils.lerp(minProgress, composition.getStartFrame(), composition.getEndFrame()));
   }
 
   /**
@@ -422,7 +422,7 @@ public void setMaxProgress(@FloatRange(from = 0f, to = 1f) final float maxProgre
       });
       return;
     }
-    setMaxFrame((int) (maxProgress * composition.getDurationFrames()));
+    setMaxFrame((int) MiscUtils.lerp(maxProgress, composition.getStartFrame(), composition.getEndFrame()));
   }
 
   /**

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -96,8 +96,8 @@ public float getFrame() {
     if (ended) {
       if (getRepeatCount() != INFINITE && repeatCount >= getRepeatCount()) {
         frame = getMaxFrame();
-        notifyEnd(isReversed());
         removeFrameCallback();
+        notifyEnd(isReversed());
       } else {
         notifyRepeat();
         repeatCount++;

File: lottie/src/test/java/com/airbnb/lottie/LottieValueAnimatorUnitTest.java
Patch:
@@ -241,7 +241,7 @@ public void testLoopingAnimatorOnceReverse() {
 
   @Test
   public void setMinFrameSmallerThanComposition() {
-    animator.setMaxFrame(-9000);
+    animator.setMinFrame(-9000);
     assertEquals(animator.getMinFrame(), composition.getStartFrame());
   }
 

File: lottie/src/main/java/com/airbnb/lottie/parser/CircleShapeParser.java
Patch:
@@ -15,11 +15,11 @@ class CircleShapeParser {
   private CircleShapeParser() {}
 
   static CircleShape parse(
-      JsonReader reader, LottieComposition composition) throws IOException {
+      JsonReader reader, LottieComposition composition, int d) throws IOException {
     String name = null;
     AnimatableValue<PointF, PointF> position = null;
     AnimatablePointValue size = null;
-    boolean reversed = false;
+    boolean reversed = d == 3;
 
     while (reader.hasNext()) {
       switch (reader.nextName()) {

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -480,9 +480,10 @@ public void setComposition(@NonNull LottieComposition composition) {
     }
     lottieDrawable.setCallback(this);
 
+    this.composition = composition;
     boolean isNewComposition = lottieDrawable.setComposition(composition);
     enableOrDisableHardwareLayer();
-    if (!isNewComposition) {
+    if (getDrawable() == lottieDrawable && !isNewComposition) {
       // We can avoid re-setting the drawable, and invalidating the view, since the composition
       // hasn't changed.
       return;
@@ -493,8 +494,6 @@ public void setComposition(@NonNull LottieComposition composition) {
     setImageDrawable(null);
     setImageDrawable(lottieDrawable);
 
-    this.composition = composition;
-
     requestLayout();
   }
 

File: lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java
Patch:
@@ -40,8 +40,8 @@ public T getValue(LottieFrameInfo<T> frameInfo) {
   }
 
   public final void setValue(@Nullable T value) {
+    this.value = value;
     if (animation != null) {
-      this.value = value;
       animation.notifyListeners();
     }
   }

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -103,7 +103,7 @@ public float getFrame() {
         if (getRepeatMode() == REVERSE) {
           reverseAnimationSpeed();
         } else {
-          frame = getMinFrame();
+          frame = isReversed() ? getMaxFrame() : getMinFrame();
         }
         lastFrameTimeNs = now;
       }

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -211,7 +211,7 @@ private float getMinFrame() {
     if (composition == null) {
       return 0;
     }
-    return minFrame == Integer.MIN_VALUE ? 0 : minFrame;
+    return minFrame == Integer.MIN_VALUE ? composition.getStartFrame() : minFrame;
   }
 
   private float getMaxFrame() {

File: lottie/src/main/java/com/airbnb/lottie/value/LottieValueCallback.java
Patch:
@@ -11,7 +11,6 @@
  * Allows you to set a callback on a resolved {@link com.airbnb.lottie.model.KeyPath} to modify
  * its animation values at runtime.
  */
-@RestrictTo(RestrictTo.Scope.LIBRARY)
 public class LottieValueCallback<T> {
   private final LottieFrameInfo<T> frameInfo = new LottieFrameInfo<>();
   @Nullable BaseKeyframeAnimation<?, ?> animation;

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/SplitDimensionPathKeyframeAnimation.java
Patch:
@@ -18,6 +18,8 @@ public SplitDimensionPathKeyframeAnimation(
 
     this.xAnimation = xAnimation;
     this.yAnimation = yAnimation;
+    // We need to call an initial setProgress so point gets set with the initial value.
+    setProgress(getProgress());
   }
 
   @Override public void setProgress(float progress) {

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -511,7 +511,7 @@ public void setProgress(@FloatRange(from = 0f, to = 1f) final float progress) {
       });
       return;
     }
-    animator.setFrame((int) (progress * composition.getDurationFrames()));
+    animator.setFrame((int) (progress * composition.getDurationFrames() + composition.getStartFrame()));
   }
 
   /**

File: lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedFloatValue.java
Patch:
@@ -11,8 +11,7 @@ public LottieInterpolatedFloatValue(Float startValue, Float endValue) {
     super(startValue, endValue);
   }
 
-  public LottieInterpolatedFloatValue(Float startValue, Float endValue,
-      Interpolator interpolator) {
+  public LottieInterpolatedFloatValue(Float startValue, Float endValue, Interpolator interpolator) {
     super(startValue, endValue, interpolator);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedIntegerValue.java
Patch:
@@ -11,8 +11,7 @@ public LottieInterpolatedIntegerValue(Integer startValue, Integer endValue) {
     super(startValue, endValue);
   }
 
-  public LottieInterpolatedIntegerValue(Integer startValue, Integer endValue,
-      Interpolator interpolator) {
+  public LottieInterpolatedIntegerValue(Integer startValue, Integer endValue, Interpolator interpolator) {
     super(startValue, endValue, interpolator);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/value/LottieInterpolatedPointValue.java
Patch:
@@ -13,8 +13,7 @@ public LottieInterpolatedPointValue(PointF startValue, PointF endValue) {
     super(startValue, endValue);
   }
 
-  public LottieInterpolatedPointValue(PointF startValue, PointF endValue,
-      Interpolator interpolator) {
+  public LottieInterpolatedPointValue(PointF startValue, PointF endValue, Interpolator interpolator) {
     super(startValue, endValue, interpolator);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -335,7 +335,7 @@ private void applyMasks(Canvas canvas, Matrix matrix) {
         break;
       case MaskModeIntersect:
         Log.w(L.TAG, "Animation contains intersect masks. They are not supported but will be " +
-            "treated like intersect masks.");
+            "treated like add masks.");
       case MaskModeAdd:
       default:
         // As a hack, we treat all non-subtract masks like add masks. This is not correct but it's

File: lottie/src/main/java/com/airbnb/lottie/parser/LottieCompositionParser.java
Patch:
@@ -162,12 +162,12 @@ private static void parseAssets(JsonReader reader, LottieComposition composition
         }
       }
       reader.endObject();
-      if (!layers.isEmpty()) {
-        precomps.put(id, layers);
-      } else if (imageFileName != null) {
+      if (imageFileName != null) {
         LottieImageAsset image =
             new LottieImageAsset(width, height, id, imageFileName, relativeFolder);
         images.put(image.getId(), image);
+      } else {
+        precomps.put(id, layers);
       }
     }
     reader.endArray();

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -500,7 +500,7 @@ public int getFrame() {
       return 0;
     }
 
-    return (int) (getProgress() * composition.getDurationFrames());
+    return Math.round((getProgress() * composition.getDurationFrames()));
   }
 
   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -51,7 +51,7 @@ public void setValue(@FloatRange(from = 0f, to = 1f) float value) {
     float range = Math.abs(maxValue - minValue);
     float animatedPercentage = distFromStart / range;
     if (getDuration() > 0) {
-      setCurrentPlayTime((long) (getDuration() * animatedPercentage));
+      setCurrentPlayTime(Math.round(getDuration() * animatedPercentage));
     }
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -25,7 +25,6 @@
 import com.airbnb.lottie.model.KeyPath;
 import com.airbnb.lottie.model.KeyPathElement;
 import com.airbnb.lottie.model.content.Mask;
-import com.airbnb.lottie.utils.Utils;
 import com.airbnb.lottie.value.LottieValueCallback;
 
 import java.util.ArrayList;
@@ -272,8 +271,6 @@ private void intersectBoundsWithMask(RectF rect, Matrix matrix) {
         case MaskModeIntersect:
           // TODO
           return;
-        case MaskModeUnknown:
-          return;
         case MaskModeAdd:
         default:
           path.computeBounds(tempMaskBoundsRect, false);

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -25,6 +25,7 @@
 import com.airbnb.lottie.model.KeyPath;
 import com.airbnb.lottie.model.KeyPathElement;
 import com.airbnb.lottie.model.content.Mask;
+import com.airbnb.lottie.utils.Utils;
 import com.airbnb.lottie.value.LottieValueCallback;
 
 import java.util.ArrayList;
@@ -48,7 +49,7 @@ static BaseLayer forModel(
       case Solid:
         return new SolidLayer(drawable, layerModel);
       case Image:
-        return new ImageLayer(drawable, layerModel, composition.getDpScale());
+        return new ImageLayer(drawable, layerModel);
       case Null:
         return new NullLayer(drawable, layerModel);
       case Text:

File: lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java
Patch:
@@ -37,6 +37,7 @@ public CompositionLayer(LottieDrawable lottieDrawable, Layer layerModel, List<La
     if (timeRemapping != null) {
       this.timeRemapping = timeRemapping.createAnimation();
       addAnimation(this.timeRemapping);
+      //noinspection ConstantConditions
       this.timeRemapping.addUpdateListener(this);
     } else {
       this.timeRemapping = null;

File: lottie/src/main/java/com/airbnb/lottie/animation/content/BaseStrokeContent.java
Patch:
@@ -21,6 +21,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.airbnb.lottie.utils.MiscUtils.clamp;
+
 public abstract class BaseStrokeContent implements DrawingContent,
     BaseKeyframeAnimation.AnimationListener {
 
@@ -124,7 +126,7 @@ public abstract class BaseStrokeContent implements DrawingContent,
   @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {
     L.beginSection("StrokeContent#draw");
     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);
-    paint.setAlpha(alpha);
+    paint.setAlpha(clamp(alpha, 0, 255));
     paint.setStrokeWidth(widthAnimation.getValue() * Utils.getScale(parentMatrix));
     if (paint.getStrokeWidth() <= 0) {
       // Android draws a hairline stroke for 0, After Effects doesn't.

File: lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java
Patch:
@@ -17,6 +17,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.airbnb.lottie.utils.MiscUtils.clamp;
+
 public class FillContent implements DrawingContent, BaseKeyframeAnimation.AnimationListener {
   private final Path path = new Path();
   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
@@ -71,7 +73,7 @@ public FillContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeFi
     L.beginSection("FillContent#draw");
     paint.setColor(colorAnimation.getValue());
     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);
-    paint.setAlpha(alpha);
+    paint.setAlpha(clamp(alpha, 0, 255));
 
     path.reset();
     for (int i = 0; i < paths.size(); i++) {

File: lottie/src/main/java/com/airbnb/lottie/animation/content/GradientFillContent.java
Patch:
@@ -24,6 +24,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.airbnb.lottie.utils.MiscUtils.clamp;
+
 public class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.AnimationListener {
   /**
    * Cache the gradients such that it runs at 30fps.
@@ -103,7 +105,7 @@ public GradientFillContent(final LottieDrawable lottieDrawable, BaseLayer layer,
     paint.setShader(shader);
 
     int alpha = (int) ((parentAlpha / 255f * opacityAnimation.getValue() / 100f) * 255);
-    paint.setAlpha(alpha);
+    paint.setAlpha(clamp(alpha, 0, 255));
 
     canvas.drawPath(path, paint);
     L.endSection("GradientFillContent#draw");

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -278,7 +278,7 @@ public static LottieComposition fromJsonSync(Resources res, JSONObject json) {
       long endFrame = json.optLong("op", 0);
       float frameRate = (float) json.optDouble("fr", 0);
       String version = json.optString("v");
-      String[] versions = version.split("[.]");
+      String[] versions = version.split("\\.");
       int major = Integer.parseInt(versions[0]);
       int minor = Integer.parseInt(versions[1]);
       int patch = Integer.parseInt(versions[2]);

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -98,7 +98,6 @@ static BaseLayer forModel(
 
     this.transform = layerModel.getTransform().createAnimation();
     transform.addListener(this);
-    transform.addAnimationsToLayer(this);
 
     if (layerModel.getMasks() != null && !layerModel.getMasks().isEmpty()) {
       this.mask = new MaskKeyframeAnimation(layerModel.getMasks());
@@ -390,6 +389,8 @@ private void setVisible(boolean visible) {
   }
 
   void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {
+    // Time stretch should not be applied to the layer transform.
+    transform.setProgress(progress);
     if (layerModel.getTimeStretch() != 0) {
       progress /= layerModel.getTimeStretch();
     }

File: LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java
Patch:
@@ -98,6 +98,7 @@ private void testAnimations() {
     TestRobot.testLinearAnimation(activity, "Tests/Stroke.json");
     TestRobot.testLinearAnimation(activity, "Tests/TextBaseline.json");
     TestRobot.testLinearAnimation(activity, "Tests/TimeStretch.json");
+    TestRobot.testLinearAnimation(activity, "Tests/TimeStretchPrecomp.json");
     TestRobot.testLinearAnimation(activity, "Tests/TrackMattes.json");
     TestRobot.testLinearAnimation(activity, "Tests/TrimPaths.json");
     TestRobot.testChangingCompositions(activity, "TwitterHeart.json", "PinJump.json");

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/BaseKeyframeAnimation.java
Patch:
@@ -40,9 +40,9 @@ public void addUpdateListener(AnimationListener listener) {
 
   public void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {
     if (progress < getStartDelayProgress()) {
-      progress = 0f;
+      progress = getStartDelayProgress();
     } else if (progress > getEndProgress()) {
-      progress = 1f;
+      progress = getEndProgress();
     }
 
     if (progress == this.progress) {

File: LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java
Patch:
@@ -86,6 +86,7 @@ private void testAnimations() {
     TestRobot.testLinearAnimation(activity, "Tests/KeyframeTypes.json");
     TestRobot.testLinearAnimation(activity, "Tests/Laugh4.json");
     TestRobot.testLinearAnimation(activity, "Tests/LoopPlayOnce.json");
+    TestRobot.testLinearAnimation(activity, "Tests/MaskInv.json");
     TestRobot.testLinearAnimation(activity, "Tests/MatteTimeStretchLine.json");
     TestRobot.testLinearAnimation(activity, "Tests/MatteTimeStretchScan.json");
     TestRobot.testLinearAnimation(activity, "Tests/Parenting.json");

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -232,7 +232,7 @@ public void clearComposition() {
   }
 
   @Override public void setColorFilter(@Nullable ColorFilter colorFilter) {
-    throw new UnsupportedOperationException("Use addColorFilter instead.");
+    Log.w(L.TAG, "Use addColorFilter instead.");
   }
 
   /**

File: LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java
Patch:
@@ -86,6 +86,8 @@ private void testAnimations() {
     TestRobot.testLinearAnimation(activity, "Tests/KeyframeTypes.json");
     TestRobot.testLinearAnimation(activity, "Tests/Laugh4.json");
     TestRobot.testLinearAnimation(activity, "Tests/LoopPlayOnce.json");
+    TestRobot.testLinearAnimation(activity, "Tests/MatteTimeStretchLine.json");
+    TestRobot.testLinearAnimation(activity, "Tests/MatteTimeStretchScan.json");
     TestRobot.testLinearAnimation(activity, "Tests/Parenting.json");
     TestRobot.testLinearAnimation(activity, "Tests/Precomps.json");
     TestRobot.testLinearAnimation(activity, "Tests/Remap.json");

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -373,7 +373,9 @@ void setProgress(@FloatRange(from = 0f, to = 1f) float progress) {
       progress /= layerModel.getTimeStretch();
     }
     if (matteLayer != null) {
-      matteLayer.setProgress(progress);
+      // The matte layer's time stretch is pre-calculated.
+      float matteTimeStretch = matteLayer.layerModel.getTimeStretch();
+      matteLayer.setProgress(progress * matteTimeStretch);
     }
     for (int i = 0; i < animations.size(); i++) {
       animations.get(i).setProgress(progress);

File: LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java
Patch:
@@ -49,6 +49,8 @@ private void testAnimations() {
     TestRobot.testLinearAnimation(activity, "PinJump.json");
     TestRobot.testLinearAnimation(activity, "TwitterHeart.json");
     TestRobot.testLinearAnimation(activity, "Hello World.json");
+    TestRobot.testLinearAnimation(activity, "CircleForward.json");
+    TestRobot.testLinearAnimation(activity, "CircleReversed.json");
     TestRobot.testLinearAnimation(activity, "WeAccept.json", "Images/WeAccept", null);
     TextDelegate delegate = new TextDelegate();
     delegate.setText("NAME", "Gabe");

File: lottie/src/main/java/com/airbnb/lottie/animation/keyframe/PathKeyframe.java
Patch:
@@ -18,8 +18,8 @@ public class PathKeyframe extends Keyframe<PointF> {
   @Nullable private Path path;
 
   private PathKeyframe(LottieComposition composition, @Nullable PointF startValue,
-      @Nullable PointF endValue, @Nullable Interpolator interpolator, float startFrame,
-      @Nullable Float endFrame) {
+      @Nullable PointF endValue, @Nullable Interpolator interpolator, int startFrame,
+      @Nullable Integer endFrame) {
     super(composition, startValue, endValue, interpolator, startFrame, endFrame);
   }
 

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -153,11 +153,11 @@ public boolean setComposition(LottieComposition composition) {
 
     clearComposition();
     this.composition = composition;
+    buildCompositionLayer();
     animator.setCompositionDuration(composition.getDuration());
-    setProgress(animator.getMinValue());
+    setProgress(animator.getValue());
     setScale(scale);
     updateBounds();
-    buildCompositionLayer();
     applyColorFilters();
 
     // We copy the tasks to a new ArrayList so that if this method is called from multiple threads,

File: lottie/src/main/java/com/airbnb/lottie/animation/Keyframe.java
Patch:
@@ -97,7 +97,7 @@ public boolean isStatic() {
   }
 
   public boolean containsProgress(@FloatRange(from = 0f, to = 1f) float progress) {
-    return progress >= getStartProgress() && progress <= getEndProgress();
+    return progress >= getStartProgress() && progress < getEndProgress();
   }
 
   @Override public String toString() {

File: lottie/src/main/java/com/airbnb/lottie/model/layer/Layer.java
Patch:
@@ -272,7 +272,6 @@ public static Layer newInstance(JSONObject json, LottieComposition composition)
           composition);
       MatteType matteType = MatteType.values()[json.optInt("tt")];
       List<Mask> masks = new ArrayList<>();
-      List<Keyframe<Float>> inOutKeyframes = new ArrayList<>();
       JSONArray jsonMasks = json.optJSONArray("masksProperties");
       if (jsonMasks != null) {
         for (int i = 0; i < jsonMasks.length(); i++) {
@@ -328,14 +327,15 @@ public static Layer newInstance(JSONObject json, LottieComposition composition)
       float inFrame = json.optLong("ip") / timeStretch;
       float outFrame = json.optLong("op") / timeStretch;
 
+      List<Keyframe<Float>> inOutKeyframes = new ArrayList<>();
       // Before the in frame
       if (inFrame > 0) {
         Keyframe<Float> preKeyframe = new Keyframe<>(composition, 0f, 0f, null, 0f, inFrame);
         inOutKeyframes.add(preKeyframe);
       }
 
       // The + 1 is because the animation should be visible on the out frame itself.
-      outFrame = (outFrame > 0 ? outFrame : composition.getEndFrame() + 1);
+      outFrame = (outFrame > 0 ? outFrame : composition.getEndFrame()) + 1;
       Keyframe<Float> visibleKeyframe =
           new Keyframe<>(composition, 1f, 1f, null, inFrame, outFrame);
       inOutKeyframes.add(visibleKeyframe);

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -151,10 +151,10 @@ public boolean setComposition(LottieComposition composition) {
       return false;
     }
 
-    setProgress(0f);
     clearComposition();
     this.composition = composition;
     animator.setCompositionDuration(composition.getDuration());
+    setProgress(animator.getMinValue());
     setScale(scale);
     updateBounds();
     buildCompositionLayer();

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -216,7 +216,7 @@ public void clearColorFilters() {
 
     SavedState ss = (SavedState) state;
     super.onRestoreInstanceState(ss.getSuperState());
-    this.animationName = ss.animationName;
+    animationName = ss.animationName;
     if (!TextUtils.isEmpty(animationName)) {
       setAnimation(animationName);
     }
@@ -248,7 +248,7 @@ public void clearColorFilters() {
     // AppCompatImageView constructor will set the image when set from xml
     // before LottieDrawable has been initialized
     if (lottieDrawable != null) {
-        lottieDrawable.recycleBitmaps();
+      lottieDrawable.recycleBitmaps();
     }
   }
 
@@ -336,7 +336,6 @@ public void setAnimation(final String animationName, final CacheStrategy cacheSt
       return;
     }
 
-    this.animationName = animationName;
     lottieDrawable.cancelAnimation();
     cancelLoaderTask();
     compositionLoader = LottieComposition.Factory.fromAssetFileName(getContext(), animationName,

File: lottie/src/main/java/com/airbnb/lottie/model/layer/TextLayer.java
Patch:
@@ -91,6 +91,7 @@ public class TextLayer extends BaseLayer {
     Font font = composition.getFonts().get(documentData.fontName);
     if (font == null) {
       // Something is wrong.
+      canvas.restore();
       return;
     }
 

File: lottie/src/main/java/com/airbnb/lottie/utils/Utils.java
Patch:
@@ -53,7 +53,7 @@ public static void closeQuietly(Closeable closeable) {
     }
   }
 
-  static int getScreenWidth(Context context) {
+  public static int getScreenWidth(Context context) {
     if (displayMetrics == null) {
       displayMetrics = new DisplayMetrics();
     }
@@ -62,7 +62,7 @@ static int getScreenWidth(Context context) {
     return displayMetrics.widthPixels;
   }
 
-  static int getScreenHeight(Context context) {
+  public static int getScreenHeight(Context context) {
     if (displayMetrics == null) {
       displayMetrics = new DisplayMetrics();
     }

File: LottieSample/src/androidTest/java/com/airbnb/lottie/AnimationLinearLayout.java
Patch:
@@ -28,7 +28,7 @@ private void init() {
 
   private void addViewsFor(float progress) {
     TextView textView = new TextView(getContext());
-    textView.setText("" + progress);
+    textView.setText(Float.toString(progress));
     textView.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12);
     textView.setPadding(0, 24, 0, 24);
     LinearLayout.LayoutParams lp = generateDefaultLayoutParams();

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -385,7 +385,7 @@ private void playAnimation(final boolean resetProgress) {
     if (resetProgress) {
       animator.start();
     } else {
-      animator.resume();
+      animator.resumeAnimation();
     }
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/content/ShapeData.java
Patch:
@@ -195,8 +195,8 @@ private static PointF vertexAtIndex(int idx, JSONArray points) {
       Object x = pointArray.opt(0);
       Object y = pointArray.opt(1);
       return new PointF(
-          x instanceof Double ? new Float((Double) x) : (int) x,
-          y instanceof Double ? new Float((Double) y) : (int) y);
+          x instanceof Double ? ((Double) x).floatValue() : (int) x,
+          y instanceof Double ? ((Double) y).floatValue() : (int) y);
     }
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/utils/LottieValueAnimator.java
Patch:
@@ -125,7 +125,7 @@ public float getMaxProgress() {
     return maxProgress;
   }
 
-  @Override public void resume() {
+  public void resumeAnimation() {
     float startingProgress = progress;
     start();
     // This has to call through setCurrentPlayTime for compatibility reasons.

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -346,6 +346,7 @@ private void addColorFilterInternal(@Nullable String layerName, @Nullable String
 
   void systemAnimationsAreDisabled() {
     systemAnimationsAreDisabled = true;
+    animator.systemAnimationsAreDisabled();
   }
 
   public void loop(boolean loop) {

File: lottie/src/main/java/com/airbnb/lottie/animation/content/FillContent.java
Patch:
@@ -11,7 +11,6 @@
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
 import com.airbnb.lottie.model.content.ShapeFill;
 import com.airbnb.lottie.model.layer.BaseLayer;
 
@@ -23,8 +22,8 @@ public class FillContent implements DrawingContent, BaseKeyframeAnimation.Animat
   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
   private final String name;
   private final List<PathContent> paths = new ArrayList<>();
-  private final KeyframeAnimation<Integer> colorAnimation;
-  private final KeyframeAnimation<Integer> opacityAnimation;
+  private final BaseKeyframeAnimation<Integer, Integer> colorAnimation;
+  private final BaseKeyframeAnimation<Integer, Integer> opacityAnimation;
   private final LottieDrawable lottieDrawable;
 
   public FillContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeFill fill) {

File: lottie/src/main/java/com/airbnb/lottie/animation/content/RepeaterContent.java
Patch:
@@ -9,7 +9,6 @@
 
 import com.airbnb.lottie.LottieDrawable;
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.TransformKeyframeAnimation;
 import com.airbnb.lottie.model.content.Repeater;
 import com.airbnb.lottie.model.layer.BaseLayer;
@@ -28,8 +27,8 @@ public class RepeaterContent implements
   private final LottieDrawable lottieDrawable;
   private final BaseLayer layer;
   private final String name;
-  private final KeyframeAnimation<Float> copies;
-  private final KeyframeAnimation<Float> offset;
+  private final BaseKeyframeAnimation<Float, Float> copies;
+  private final BaseKeyframeAnimation<Float, Float> offset;
   private final TransformKeyframeAnimation transform;
   private ContentGroup contentGroup;
 

File: lottie/src/main/java/com/airbnb/lottie/animation/content/StrokeContent.java
Patch:
@@ -5,15 +5,15 @@
 import android.graphics.Matrix;
 import android.support.annotation.Nullable;
 
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
 import com.airbnb.lottie.LottieDrawable;
+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.model.content.ShapeStroke;
 import com.airbnb.lottie.model.layer.BaseLayer;
 
 public class StrokeContent extends BaseStrokeContent {
 
   private final String name;
-  private final KeyframeAnimation<Integer> colorAnimation;
+  private final BaseKeyframeAnimation<Integer, Integer> colorAnimation;
 
   public StrokeContent(final LottieDrawable lottieDrawable, BaseLayer layer, ShapeStroke stroke) {
     super(lottieDrawable, layer, stroke.getCapType().toPaintCap(),

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableColorValue.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.animation.Keyframe;
+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.ColorKeyframeAnimation;
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.StaticKeyframeAnimation;
 import com.airbnb.lottie.model.ColorFactory;
 
@@ -16,7 +16,7 @@ private AnimatableColorValue(List<Keyframe<Integer>> keyframes, Integer initialV
     super(keyframes, initialValue);
   }
 
-  @Override public KeyframeAnimation<Integer> createAnimation() {
+  @Override public BaseKeyframeAnimation<Integer, Integer> createAnimation() {
     if (!hasAnimation()) {
       return new StaticKeyframeAnimation<>(initialValue);
     }

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableFloatValue.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.animation.Keyframe;
+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.FloatKeyframeAnimation;
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.StaticKeyframeAnimation;
 import com.airbnb.lottie.utils.JsonUtils;
 
@@ -20,7 +20,7 @@ private AnimatableFloatValue(List<Keyframe<Float>> keyframes, Float initialValue
     super(keyframes, initialValue);
   }
 
-  @Override public KeyframeAnimation<Float> createAnimation() {
+  @Override public BaseKeyframeAnimation<Float, Float> createAnimation() {
     if (!hasAnimation()) {
       return new StaticKeyframeAnimation<>(initialValue);
     }

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableGradientColorValue.java
Patch:
@@ -7,8 +7,8 @@
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.animation.Keyframe;
+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.GradientColorKeyframeAnimation;
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.StaticKeyframeAnimation;
 import com.airbnb.lottie.model.content.GradientColor;
 import com.airbnb.lottie.utils.MiscUtils;
@@ -25,7 +25,7 @@ private AnimatableGradientColorValue(
     super(keyframes, initialValue);
   }
 
-  @Override public KeyframeAnimation<GradientColor> createAnimation() {
+  @Override public BaseKeyframeAnimation<GradientColor, GradientColor> createAnimation() {
     if (!hasAnimation()) {
       return new StaticKeyframeAnimation<>(initialValue);
     }

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableIntegerValue.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.animation.Keyframe;
+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.IntegerKeyframeAnimation;
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.StaticKeyframeAnimation;
 import com.airbnb.lottie.utils.JsonUtils;
 
@@ -20,7 +20,7 @@ private AnimatableIntegerValue() {
     super(keyframes, initialValue);
   }
 
-  @Override public KeyframeAnimation<Integer> createAnimation() {
+  @Override public BaseKeyframeAnimation<Integer, Integer> createAnimation() {
     if (!hasAnimation()) {
       return new StaticKeyframeAnimation<>(initialValue);
     }

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatablePointValue.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.animation.Keyframe;
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.PointKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.StaticKeyframeAnimation;
 import com.airbnb.lottie.model.PointFFactory;
@@ -18,7 +18,7 @@ private AnimatablePointValue(List<Keyframe<PointF>> keyframes, PointF initialVal
     super(keyframes, initialValue);
   }
 
-  @Override public KeyframeAnimation<PointF> createAnimation() {
+  @Override public BaseKeyframeAnimation<PointF, PointF> createAnimation() {
     if (!hasAnimation()) {
       return new StaticKeyframeAnimation<>(initialValue);
     } else {

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableScaleValue.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.animation.Keyframe;
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.ScaleKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.StaticKeyframeAnimation;
 import com.airbnb.lottie.model.ScaleXY;
@@ -20,7 +20,7 @@ private AnimatableScaleValue() {
     super(keyframes, initialValue);
   }
 
-  @Override public KeyframeAnimation<ScaleXY> createAnimation() {
+  @Override public BaseKeyframeAnimation<ScaleXY, ScaleXY> createAnimation() {
     if (!hasAnimation()) {
       return new StaticKeyframeAnimation<>(initialValue);
     } else {

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableShapeValue.java
Patch:
@@ -21,7 +21,7 @@ private AnimatableShapeValue(List<Keyframe<ShapeData>> keyframes, ShapeData init
     super(keyframes, initialValue);
   }
 
-  @Override public BaseKeyframeAnimation<?, Path> createAnimation() {
+  @Override public BaseKeyframeAnimation<ShapeData, Path> createAnimation() {
     if (!hasAnimation()) {
       return new StaticKeyframeAnimation<>(convertType(initialValue));
     } else {

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableSplitDimensionPathValue.java
Patch:
@@ -2,10 +2,10 @@
 
 import android.graphics.PointF;
 
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.SplitDimensionPathKeyframeAnimation;
 
-public class AnimatableSplitDimensionPathValue implements AnimatableValue<PointF> {
+public class AnimatableSplitDimensionPathValue implements AnimatableValue<PointF, PointF> {
   private final AnimatableFloatValue animatableXDimension;
   private final AnimatableFloatValue animatableYDimension;
 
@@ -16,7 +16,7 @@ public class AnimatableSplitDimensionPathValue implements AnimatableValue<PointF
     this.animatableYDimension = animatableYDimension;
   }
 
-  @Override public KeyframeAnimation<PointF> createAnimation() {
+  @Override public BaseKeyframeAnimation<PointF, PointF> createAnimation() {
     return new SplitDimensionPathKeyframeAnimation(
         animatableXDimension.createAnimation(), animatableYDimension.createAnimation());
   }

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/AnimatableValue.java
Patch:
@@ -2,8 +2,8 @@
 
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 
-public interface AnimatableValue<O> {
-  BaseKeyframeAnimation<?, O> createAnimation();
+public interface AnimatableValue<K, A> {
+  BaseKeyframeAnimation<K, A> createAnimation();
   boolean hasAnimation();
 
   interface Factory<V> {

File: lottie/src/main/java/com/airbnb/lottie/model/animatable/BaseAnimatableValue.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Collections;
 import java.util.List;
 
-public abstract class BaseAnimatableValue<V, O> implements AnimatableValue<O> {
+public abstract class BaseAnimatableValue<V, O> implements AnimatableValue<V, O> {
   final List<Keyframe<V>> keyframes;
   final V initialValue;
 

File: lottie/src/main/java/com/airbnb/lottie/model/content/CircleShape.java
Patch:
@@ -15,10 +15,10 @@
 
 public class CircleShape implements ContentModel {
   private final String name;
-  private final AnimatableValue<PointF> position;
+  private final AnimatableValue<PointF, PointF> position;
   private final AnimatablePointValue size;
 
-  private CircleShape(String name, AnimatableValue<PointF> position,
+  private CircleShape(String name, AnimatableValue<PointF, PointF> position,
       AnimatablePointValue size) {
     this.name = name;
     this.position = position;
@@ -46,7 +46,7 @@ public String getName() {
     return name;
   }
 
-  public AnimatableValue<PointF> getPosition() {
+  public AnimatableValue<PointF, PointF> getPosition() {
     return position;
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/content/RectangleShape.java
Patch:
@@ -16,11 +16,11 @@
 
 public class RectangleShape implements ContentModel {
   private final String name;
-  private final AnimatableValue<PointF> position;
+  private final AnimatableValue<PointF, PointF> position;
   private final AnimatablePointValue size;
   private final AnimatableFloatValue cornerRadius;
 
-  private RectangleShape(String name, AnimatableValue<PointF> position,
+  private RectangleShape(String name, AnimatableValue<PointF, PointF> position,
       AnimatablePointValue size, AnimatableFloatValue cornerRadius) {
     this.name = name;
     this.position = position;
@@ -54,7 +54,7 @@ public AnimatablePointValue getSize() {
     return size;
   }
 
-  public AnimatableValue<PointF> getPosition() {
+  public AnimatableValue<PointF, PointF> getPosition() {
     return position;
   }
 

File: lottie/src/main/java/com/airbnb/lottie/model/layer/BaseLayer.java
Patch:
@@ -21,7 +21,6 @@
 import com.airbnb.lottie.animation.content.DrawingContent;
 import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.FloatKeyframeAnimation;
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.MaskKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.StaticKeyframeAnimation;
 import com.airbnb.lottie.animation.keyframe.TransformKeyframeAnimation;
@@ -105,7 +104,7 @@ static BaseLayer forModel(
         addAnimation(animation);
         animation.addUpdateListener(this);
       }
-      for (KeyframeAnimation<Integer> animation : mask.getOpacityAnimations()) {
+      for (BaseKeyframeAnimation<Integer, Integer> animation : mask.getOpacityAnimations()) {
         addAnimation(animation);
         animation.addUpdateListener(this);
       }
@@ -345,7 +344,8 @@ private void intersectBoundsWithMatte(RectF rect, Matrix matrix) {
         default:
           path.setFillType(Path.FillType.WINDING);
       }
-      KeyframeAnimation<Integer> opacityAnimation = this.mask.getOpacityAnimations().get(i);
+      BaseKeyframeAnimation<Integer, Integer> opacityAnimation =
+          this.mask.getOpacityAnimations().get(i);
       int alpha = contentPaint.getAlpha();
       contentPaint.setAlpha((int) (opacityAnimation.getValue() * 2.55f));
       canvas.drawPath(path, contentPaint);

File: lottie/src/main/java/com/airbnb/lottie/model/layer/CompositionLayer.java
Patch:
@@ -10,17 +10,17 @@
 import android.support.annotation.Nullable;
 import android.support.v4.util.LongSparseArray;
 
-import com.airbnb.lottie.animation.keyframe.KeyframeAnimation;
 import com.airbnb.lottie.L;
 import com.airbnb.lottie.LottieComposition;
 import com.airbnb.lottie.LottieDrawable;
+import com.airbnb.lottie.animation.keyframe.BaseKeyframeAnimation;
 import com.airbnb.lottie.model.animatable.AnimatableFloatValue;
 
 import java.util.ArrayList;
 import java.util.List;
 
 public class CompositionLayer extends BaseLayer {
-  @Nullable private final KeyframeAnimation<Float> timeRemapping;
+  @Nullable private final BaseKeyframeAnimation<Float, Float> timeRemapping;
   private final List<BaseLayer> layers = new ArrayList<>();
   private final RectF rect = new RectF();
   private final Rect originalClipRect = new Rect();

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -67,7 +67,6 @@ public LottieDrawable() {
     animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
       @Override public void onAnimationUpdate(ValueAnimator animation) {
         if (systemAnimationsAreDisabled) {
-          animator.cancel();
           setProgress(1f);
         } else {
           setProgress((float) animation.getAnimatedValue());
@@ -336,7 +335,7 @@ private void addColorFilterInternal(@Nullable String layerName, @Nullable String
   }
 
   void systemAnimationsAreDisabled() {
-    systemAnimationsAreDisabled = true;
+    // systemAnimationsAreDisabled = true;
   }
 
   public void loop(boolean loop) {

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -99,7 +99,7 @@ private void init(@Nullable AttributeSet attrs) {
     TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LottieAnimationView);
     int cacheStrategy = ta.getInt(
         R.styleable.LottieAnimationView_lottie_cacheStrategy,
-        CacheStrategy.None.ordinal());
+        CacheStrategy.Weak.ordinal());
     defaultCacheStrategy = CacheStrategy.values()[cacheStrategy];
     String fileName = ta.getString(R.styleable.LottieAnimationView_lottie_fileName);
     if (!isInEditMode() && fileName != null) {

File: lottie/src/main/java/com/airbnb/lottie/CompositionLayer.java
Patch:
@@ -138,6 +138,9 @@ boolean hasMasks() {
             hasMasks = true;
             return true;
           }
+        } else if (layer instanceof CompositionLayer && ((CompositionLayer) layer).hasMasks()) {
+          hasMasks = true;
+          return  true;
         }
       }
       hasMasks = false;

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -368,6 +368,7 @@ public void setComposition(@NonNull LottieComposition composition) {
     lottieDrawable.setCallback(this);
 
     boolean isNewComposition = lottieDrawable.setComposition(composition);
+    enableOrDisableHardwareLayer();
     if (!isNewComposition) {
       // We can avoid re-setting the drawable, and invalidating the view, since the composition
       // hasn't changed.

File: lottie/src/main/java/com/airbnb/lottie/AnimatableGradientColorValue.java
Patch:
@@ -28,8 +28,9 @@ private Factory() {
 
     static AnimatableGradientColorValue newInstance(
         JSONObject json, LottieComposition composition) {
+      int points = json.optInt("p", json.optJSONArray("k").length() / 4);
       AnimatableValueParser.Result<GradientColor> result = AnimatableValueParser
-          .newInstance(json, 1, composition, new ValueFactory(json.optInt("p")))
+          .newInstance(json, 1, composition, new ValueFactory(points))
           .parseJson();
       GradientColor initialValue = result.initialValue;
       return new AnimatableGradientColorValue(result.keyframes, initialValue);

File: lottie/src/main/java/com/airbnb/lottie/TextLayer.java
Patch:
@@ -148,7 +148,7 @@ private void drawTextWithFont(
     }
     fillPaint.setTypeface(typeface);
     fillPaint.setTextSize(documentData.size * composition.getDpScale());
-    strokePaint.setTypeface(strokePaint.getTypeface());
+    strokePaint.setTypeface(fillPaint.getTypeface());
     strokePaint.setTextSize(fillPaint.getTextSize());
     for (int i = 0; i < text.length(); i++) {
       char character = text.charAt(i);

File: LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java
Patch:
@@ -75,6 +75,7 @@ public class LottieTest {
     TestRobot.testLinearAnimation(activity, "Tests/Parenting.json");
     TestRobot.testLinearAnimation(activity, "Tests/Precomps.json");
     TestRobot.testLinearAnimation(activity, "Tests/Remap.json");
+    TestRobot.testLinearAnimation(activity, "Tests/Repeater.json");
     TestRobot.testLinearAnimation(activity, "Tests/ShapeTypes.json");
     TestRobot.testLinearAnimation(activity, "Tests/SplitDimensions.json");
     TestRobot.testLinearAnimation(activity, "Tests/Stroke.json");

File: lottie/src/main/java/com/airbnb/lottie/AnimatablePathValue.java
Patch:
@@ -56,7 +56,7 @@ private boolean hasKeyframes(Object json) {
   }
 
   @Override
-  public BaseKeyframeAnimation<?, PointF> createAnimation() {
+  public KeyframeAnimation<PointF> createAnimation() {
     if (!hasAnimation()) {
       return new StaticKeyframeAnimation<>(initialPoint);
     }

File: lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java
Patch:
@@ -39,6 +39,8 @@ class ShapeGroup implements ContentModel {
         return PolystarShape.Factory.newInstance(json, composition);
       case "mm":
         return MergePaths.Factory.newInstance(json);
+      case "rp":
+        return Repeater.Factory.newInstance(json, composition);
       default:
         Log.w(L.TAG, "Unknown shape type " + type);
     }

File: LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java
Patch:
@@ -74,6 +74,7 @@ public class LottieTest {
     TestRobot.testLinearAnimation(activity, "Tests/LoopPlayOnce.json");
     TestRobot.testLinearAnimation(activity, "Tests/Parenting.json");
     TestRobot.testLinearAnimation(activity, "Tests/Precomps.json");
+    TestRobot.testLinearAnimation(activity, "Tests/Remap.json");
     TestRobot.testLinearAnimation(activity, "Tests/ShapeTypes.json");
     TestRobot.testLinearAnimation(activity, "Tests/SplitDimensions.json");
     TestRobot.testLinearAnimation(activity, "Tests/Stroke.json");

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -45,14 +45,14 @@ public class LottieComposition {
   private final Rect bounds;
   private final long startFrame;
   private final long endFrame;
-  private final int frameRate;
+  private final float frameRate;
   private final float dpScale;
   /* Bodymovin version */
   private final int majorVersion;
   private final int minorVersion;
   private final int patchVersion;
 
-  private LottieComposition(Rect bounds, long startFrame, long endFrame, int frameRate,
+  private LottieComposition(Rect bounds, long startFrame, long endFrame, float frameRate,
       float dpScale, int major, int minor, int patch) {
     this.bounds = bounds;
     this.startFrame = startFrame;
@@ -244,7 +244,7 @@ static LottieComposition fromJsonSync(Resources res, JSONObject json) {
 
       long startFrame = json.optLong("ip", 0);
       long endFrame = json.optLong("op", 0);
-      int frameRate = json.optInt("fr", 0);
+      float frameRate = (float) json.optDouble("fr", 0);
       String version = json.optString("v");
       String[] versions = version.split("[.]");
       int major = Integer.parseInt(versions[0]);

File: lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java
Patch:
@@ -150,8 +150,8 @@ private static final class TraceSections {
           path.addPath(pathGroup.paths.get(j).getPath(), parentMatrix);
         }
         canvas.drawPath(path, paint);
+        L.endSection(traceSections.drawPath);
       }
-      L.endSection(traceSections.drawPath);
     }
     L.endSection(traceSections.draw);
   }

File: lottie/src/main/java/com/airbnb/lottie/BaseLayer.java
Patch:
@@ -93,8 +93,7 @@ private static final class TraceSections {
   BaseLayer(LottieDrawable lottieDrawable, Layer layerModel) {
     this.lottieDrawable = lottieDrawable;
     this.layerModel = layerModel;
-    String traceLayerName = layerModel.getName() == null ? "root" : layerModel.getName();
-    traceSections = new TraceSections(traceLayerName);
+    traceSections = new TraceSections(layerModel.getName());
     clearPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
     maskPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_IN));
     if (layerModel.getMatteType() == Layer.MatteType.Invert) {

File: lottie/src/main/java/com/airbnb/lottie/Layer.java
Patch:
@@ -204,7 +204,7 @@ static Layer newInstance(LottieComposition composition) {
       // TODO: make sure in out keyframes work
       Rect bounds = composition.getBounds();
       return new Layer(
-          Collections.emptyList(), composition, null, -1, LayerType.PreComp, -1, null,
+          Collections.emptyList(), composition, "root", -1, LayerType.PreComp, -1, null,
           Collections.<Mask>emptyList(), AnimatableTransform.Factory.newInstance(),
           0, 0, 0, 0, 0,
           bounds.width(), bounds.height(), null, null, Collections.<Keyframe<Float>>emptyList(),

File: LottieSample/src/main/java/com/airbnb/lottie/samples/TypographyDemoActivity.java
Patch:
@@ -10,7 +10,7 @@
 import butterknife.BindView;
 import butterknife.ButterKnife;
 
-public class FontActivity extends AppCompatActivity {
+public class TypographyDemoActivity extends AppCompatActivity {
 
   @BindView(R.id.scroll_view) ScrollView scrollView;
   @BindView(R.id.font_view) LottieFontViewGroup fontView;
@@ -25,7 +25,7 @@ public void onGlobalLayout() {
   @Override
   protected void onCreate(@Nullable Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);
-    setContentView(R.layout.activity_font);
+    setContentView(R.layout.activity_typography_demo);
     ButterKnife.bind(this);
 
     fontView.getViewTreeObserver().addOnGlobalLayoutListener(layoutListener);

File: lottie/src/main/java/com/airbnb/lottie/Utils.java
Patch:
@@ -92,6 +92,9 @@ static void applyTrimPathIfNeeded(
     pathMeasure.setPath(path, false);
 
     float length = pathMeasure.getLength();
+    if (startValue == 1f && endValue == 0f) {
+      return;
+    }
     if (length == 0f || Math.abs(endValue - startValue - 1) < .01) {
       return;
     }

File: lottie/src/main/java/com/airbnb/lottie/BaseKeyframeAnimation.java
Patch:
@@ -15,6 +15,7 @@ interface AnimationListener {
     void onValueChanged();
   }
 
+  // This is not a Set because we don't want to create an iterator object on every setProgress.
   final List<AnimationListener> listeners = new ArrayList<>();
   private boolean isDiscrete = false;
 

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -313,10 +313,11 @@ private void playAnimation(boolean setStartTime) {
       reverseAnimationWhenCompositionAdded = false;
       return;
     }
+    long playTime = setStartTime ? (long) (progress * animator.getDuration()) : 0;
+    animator.start();
     if (setStartTime) {
-      animator.setCurrentPlayTime((long) (progress * animator.getDuration()));
+      animator.setCurrentPlayTime(playTime);
     }
-    animator.start();
   }
 
   @SuppressWarnings({"unused", "WeakerAccess"}) public void resumeReverseAnimation() {

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -181,7 +181,7 @@ public void addColorFilter(@Nullable ColorFilter colorFilter) {
 
   @Override public void invalidateDrawable(@NonNull Drawable dr) {
     if (getDrawable() == lottieDrawable) {
-      // We always want to invalidate the root drawable to it redraws the whole drawable.
+      // We always want to invalidate the root drawable so it redraws the whole drawable.
       // Eventually it would be great to be able to invalidate just the changed region.
       super.invalidateDrawable(lottieDrawable);
     } else {

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -129,7 +129,8 @@ public static Cancellable fromInputStream(Context context, InputStream stream,
       return loader;
     }
 
-    static LottieComposition fromFileSync(Context context, String fileName) {
+    @SuppressWarnings("WeakerAccess")
+    public static LottieComposition fromFileSync(Context context, String fileName) {
       InputStream stream;
       try {
         stream = context.getAssets().open(fileName);

File: LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java
Patch:
@@ -199,8 +199,7 @@ private void setDrawableLeft(TextView textView, @DrawableRes int resId) {
     }
     switch (item.getItemId()) {
       case R.id.hardware_acceleration:
-        int layerType = item.isChecked() ? View.LAYER_TYPE_HARDWARE : View.LAYER_TYPE_SOFTWARE;
-        animationView.setLayerType(layerType, null);
+        animationView.useExperimentalHardwareAcceleration(item.isChecked());
         return true;
       case R.id.merge_paths:
         animationView.enableMergePathsForKitKatAndAbove(item.isChecked());

File: lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java
Patch:
@@ -173,7 +173,8 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr
         float endValue = Math.min((endLength - totalLength) / length, 1);
         Utils.applyTrimPathIfNeeded(trimPathPath, startValue, endValue, 0);
         canvas.drawPath(trimPathPath, paint);
-      } else //noinspection StatementWithEmptyBody
+      } else
+        //noinspection StatementWithEmptyBody
         if (currentLength + length < startLength || currentLength > endLength) {
           // Do nothing
         } else if (currentLength + length <= endLength && startLength < currentLength) {

File: LottieSample/src/debug/java/com/airbnb/lottie/samples/LottieApplication.java
Patch:
@@ -2,6 +2,7 @@
 
 import android.app.Application;
 import android.support.v4.util.Pair;
+import android.support.v7.app.AppCompatDelegate;
 import android.view.Gravity;
 
 import com.airbnb.lottie.L;
@@ -12,9 +13,9 @@ public class LottieApplication extends Application implements ILottieApplication
   private int droppedFrames;
   private long droppedFramesStartingNs;
   private long currentFrameNs;
-
   @Override public void onCreate() {
     super.onCreate();
+    AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);
     if (L.DBG) {
       TinyDancer.create()
           .startingGravity(Gravity.TOP | Gravity.END)

File: lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java
Patch:
@@ -203,7 +203,7 @@ private void applyTrimPath(Canvas canvas, PathGroup pathGroup, Matrix parentMatr
     for (int i = 0; i < pathGroups.size(); i++) {
       PathGroup pathGroup = pathGroups.get(i);
       for (int j = 0; j < pathGroup.paths.size(); j++) {
-        path.addPath(pathGroup.paths.get(i).getPath(), parentMatrix);
+        path.addPath(pathGroup.paths.get(j).getPath(), parentMatrix);
       }
     }
     path.computeBounds(rect, false);

File: lottie/src/main/java/com/airbnb/lottie/Utils.java
Patch:
@@ -25,7 +25,7 @@ static Path createPath(PointF startPoint, PointF endPoint, PointF cp1, PointF cp
     Path path = new Path();
     path.moveTo(startPoint.x, startPoint.y);
 
-    if (cp1 != null && cp1.length() != 0 && cp2 != null && cp2.length() != 0) {
+    if (cp1 != null  && cp2 != null && (cp1.length() != 0 || cp2.length() != 0)) { // This Line
       path.cubicTo(
           startPoint.x + cp1.x, startPoint.y + cp1.y,
           endPoint.x + cp2.x, endPoint.y + cp2.y,

File: lottie/src/main/java/com/airbnb/lottie/RectangleContent.java
Patch:
@@ -101,7 +101,7 @@ private void invalidate() {
       path.arcTo(rect, 90, 90, false);
     }
 
-    path.lineTo(position.x - halfWidth, position.y - halfHeight + 2 * radius);
+    path.lineTo(position.x - halfWidth, position.y - halfHeight + radius);
 
     if (radius > 0) {
       rect.set(position.x - halfWidth,
@@ -111,7 +111,7 @@ private void invalidate() {
       path.arcTo(rect, 180, 90, false);
     }
 
-    path.lineTo(position.x + halfWidth - 2 * radius, position.y - halfHeight);
+    path.lineTo(position.x + halfWidth - radius, position.y - halfHeight);
 
     if (radius > 0) {
       rect.set(position.x + halfWidth - 2 * radius,

File: lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java
Patch:
@@ -226,8 +226,7 @@ private void applyDashPatternIfNeeded(Matrix parentMatrix) {
       return;
     }
 
-    float scale = lottieDrawable.getScale();
-    scale *= Utils.getScale(parentMatrix);
+    float scale = Utils.getScale(parentMatrix);
     for (int i = 0; i < dashPatternAnimations.size(); i++) {
       dashPatternValues[i] = dashPatternAnimations.get(i).getValue();
       // If the value of the dash pattern or gap is too small, the number of individual sections

File: lottie/src/main/java/com/airbnb/lottie/PathKeyframe.java
Patch:
@@ -37,8 +37,10 @@ static PathKeyframe newInstance(JSONObject json, LottieComposition composition,
       PathKeyframe pathKeyframe = new PathKeyframe(composition, keyframe.startValue,
           keyframe.endValue, keyframe.interpolator, keyframe.startFrame, keyframe.endFrame);
 
+      boolean equals = keyframe.endValue != null && keyframe.startValue != null &&
+          keyframe.startValue.equals(keyframe.endValue.x, keyframe.endValue.y);
       //noinspection ConstantConditions
-      if (keyframe.endValue != null && !keyframe.startValue.equals(keyframe.endValue)) {
+      if (pathKeyframe.endValue != null && !equals) {
         pathKeyframe.path = Utils.createPath(keyframe.startValue, keyframe.endValue, cp1, cp2);
       }
       return pathKeyframe;

File: lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java
Patch:
@@ -104,7 +104,9 @@ abstract class BaseStrokeContent implements DrawingContent, BaseKeyframeAnimatio
         currentPathGroup.paths.add((PathContent) content);
       }
     }
-    pathGroups.add(currentPathGroup);
+    if (currentPathGroup != null) {
+      pathGroups.add(currentPathGroup);
+    }
   }
 
   @Override public void draw(Canvas canvas, Matrix parentMatrix, int parentAlpha) {

File: lottie/src/main/java/com/airbnb/lottie/GradientFill.java
Patch:
@@ -94,7 +94,7 @@ static GradientFill newInstance(JSONObject json, LottieComposition composition)
       int fillTypeInt = json.optInt("r", 1);
       Path.FillType fillType = fillTypeInt == 1 ? Path.FillType.WINDING : Path.FillType.EVEN_ODD;
 
-      int gradientTypeInt = json.optInt("r", 1);
+      int gradientTypeInt = json.optInt("t", 1);
       GradientType gradientType = gradientTypeInt == 1 ? GradientType.Linear : GradientType.Radial;
 
       JSONObject jsonStartPoint = json.optJSONObject("s");

File: lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java
Patch:
@@ -257,4 +257,4 @@ private PathGroup(@Nullable TrimPathContent trimPath) {
       this.trimPath = trimPath;
     }
   }
-}
\ No newline at end of file
+}

File: lottie/src/main/java/com/airbnb/lottie/Content.java
Patch:
@@ -3,5 +3,7 @@
 import java.util.List;
 
 interface Content {
+  String getName();
+
   void setContents(List<Content> contentsBefore, List<Content> contentsAfter);
 }

File: lottie/src/main/java/com/airbnb/lottie/ContentGroup.java
Patch:
@@ -46,6 +46,8 @@ class ContentGroup implements DrawingContent, PathContent,
         contents.add(new GradientFillContent(lottieDrawable, layer, (GradientFill) item));
       } else if (item instanceof ShapeStroke) {
         contents.add(new StrokeContent(lottieDrawable, layer, (ShapeStroke) item));
+      } else if (item instanceof GradientStroke) {
+        contents.add(new GradientStrokeContent(lottieDrawable, layer, (GradientStroke) item));
       } else if (item instanceof ShapeGroup) {
         contents.add(new ContentGroup(lottieDrawable, layer, (ShapeGroup) item));
       } else if (item instanceof RectangleShape) {

File: lottie/src/main/java/com/airbnb/lottie/GradientFillContent.java
Patch:
@@ -25,7 +25,7 @@ class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.Anima
   private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);
   private final RectF boundsRect = new RectF();
   private final List<PathContent> paths = new ArrayList<>();
-  private final GradientFill.GradientType type;
+  private final GradientType type;
   private final KeyframeAnimation<GradientColor> colorAnimation;
   private final KeyframeAnimation<Integer> opacityAnimation;
   private final KeyframeAnimation<PointF> startPointAnimation;
@@ -77,7 +77,7 @@ class GradientFillContent implements DrawingContent, BaseKeyframeAnimation.Anima
 
     path.computeBounds(boundsRect, false);
 
-    if (type == GradientFill.GradientType.Linear) {
+    if (type == GradientType.Linear) {
       paint.setShader(getLinearGradient());
     } else {
       paint.setShader(getRadialGradient());

File: lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java
Patch:
@@ -19,6 +19,8 @@ class ShapeGroup {
         return ShapeGroup.Factory.newInstance(json, composition);
       case "st":
         return ShapeStroke.Factory.newInstance(json, composition);
+      case "gs":
+        return GradientStroke.Factory.newInstance(json, composition);
       case "fl":
         return ShapeFill.Factory.newInstance(json, composition);
       case "gf":

File: lottie/src/main/java/com/airbnb/lottie/GradientFill.java
Patch:
@@ -106,11 +106,8 @@ static GradientFill newInstance(JSONObject json, LottieComposition composition)
         endPoint = AnimatablePointValue.Factory.newInstance(jsonEndPoint, composition);
       }
 
-      // TODO: radial gradients.
-
       return new GradientFill(
           gradientType, fillType, color, opacity, startPoint, endPoint, null, null);
-
     }
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -69,6 +69,7 @@ public void onCompositionLoaded(LottieComposition composition) {
   private CacheStrategy defaultCacheStrategy;
   private String animationName;
   private boolean wasAnimatingWhenDetached = false;
+  private boolean autoPlay = false;
 
   @Nullable private Cancellable compositionLoader;
   /**
@@ -99,6 +100,7 @@ private void init(@Nullable AttributeSet attrs) {
     }
     if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {
       lottieDrawable.playAnimation();
+      autoPlay = true;
     }
     lottieDrawable.loop(ta.getBoolean(R.styleable.LottieAnimationView_lottie_loop, false));
     setImageAssetsFolder(ta.getString(R.styleable.LottieAnimationView_lottie_imageAssetsFolder));
@@ -175,7 +177,7 @@ private void init(@Nullable AttributeSet attrs) {
 
   @Override protected void onAttachedToWindow() {
     super.onAttachedToWindow();
-    if (wasAnimatingWhenDetached) {
+    if (autoPlay && wasAnimatingWhenDetached) {
       playAnimation();
     }
   }

File: lottie/src/main/java/com/airbnb/lottie/L.java
Patch:
@@ -2,5 +2,5 @@
 
 public class L {
   static final String TAG = "LOTTIE";
-  public static final boolean DBG = true;
+  public static final boolean DBG = false;
 }

File: lottie/src/main/java/com/airbnb/lottie/BaseLayer.java
Patch:
@@ -31,7 +31,7 @@ static BaseLayer forModel(
       case Solid:
         return new SolidLayer(drawable, layerModel);
       case Image:
-        return new ImageLayer(drawable, layerModel);
+        return new ImageLayer(drawable, layerModel, composition.getDpScale());
       case Null:
         return new NullLayer(drawable, layerModel);
       case Text:

File: lottie/src/main/java/com/airbnb/lottie/DrawingContent.java
Patch:
@@ -2,7 +2,9 @@
 
 import android.graphics.Canvas;
 import android.graphics.Matrix;
+import android.graphics.RectF;
 
 interface DrawingContent extends Content {
   void draw(Canvas canvas, Matrix parentMatrix, int alpha);
+  void getBounds(RectF outBounds, Matrix parentMatrix);
 }

File: lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java
Patch:
@@ -50,6 +50,7 @@ void setAssetDelegate(@Nullable ImageAssetDelegate assetDelegate) {
     this.assetDelegate = assetDelegate;
   }
 
+  @Nullable
   Bitmap bitmapForId(String id) {
     Bitmap bitmap = bitmaps.get(id);
     if (bitmap == null) {

File: lottie/src/main/java/com/airbnb/lottie/L.java
Patch:
@@ -2,5 +2,5 @@
 
 public class L {
   static final String TAG = "LOTTIE";
-  public static final boolean DBG = false;
+  public static final boolean DBG = true;
 }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -351,6 +351,7 @@ private void updateBounds() {
     return composition == null ? -1 : (int) (composition.getBounds().height() * scale);
   }
 
+  @Nullable
   Bitmap getImageAsset(String id) {
     return getImageAssetBitmapManager().bitmapForId(id);
   }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -291,7 +291,7 @@ private void updateBounds() {
         (int) (composition.getBounds().height() * scale));
   }
 
-  void cancelAnimation() {
+  @SuppressWarnings("WeakerAccess") public void cancelAnimation() {
     playAnimationWhenCompositionAdded = false;
     reverseAnimationWhenCompositionAdded = false;
     animator.cancel();

File: lottie/src/main/java/com/airbnb/lottie/AnimatableValue.java
Patch:
@@ -1,6 +1,6 @@
 package com.airbnb.lottie;
 
-interface AnimatableValue<V, O> {
+interface AnimatableValue<O> {
   BaseKeyframeAnimation<?, O> createAnimation();
   boolean hasAnimation();
 

File: lottie/src/main/java/com/airbnb/lottie/ColorKeyframeAnimation.java
Patch:
@@ -9,6 +9,9 @@ class ColorKeyframeAnimation extends KeyframeAnimation<Integer> {
   }
 
   @Override public Integer getValue(Keyframe<Integer> keyframe, float keyframeProgress) {
+    if (keyframe.startValue == null || keyframe.endValue == null) {
+      throw new IllegalStateException("Missing values for keyframe.");
+    }
     int startColor = keyframe.startValue;
     int endColor = keyframe.endValue;
 

File: lottie/src/main/java/com/airbnb/lottie/FloatKeyframeAnimation.java
Patch:
@@ -11,6 +11,9 @@ class FloatKeyframeAnimation extends KeyframeAnimation<Float> {
   }
 
   @Override Float getValue(Keyframe<Float> keyframe, float keyframeProgress) {
+    if (keyframe.startValue == null || keyframe.endValue == null) {
+      throw new IllegalStateException("Missing values for keyframe.");
+    }
     return lerp(keyframe.startValue, keyframe.endValue, keyframeProgress);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/IAnimatablePathValue.java
Patch:
@@ -2,6 +2,6 @@
 
 import android.graphics.PointF;
 
-public interface IAnimatablePathValue extends AnimatableValue<PointF, PointF> {
+public interface IAnimatablePathValue extends AnimatableValue<PointF> {
   PointF getInitialPoint();
 }

File: lottie/src/main/java/com/airbnb/lottie/IntegerKeyframeAnimation.java
Patch:
@@ -11,6 +11,9 @@ class IntegerKeyframeAnimation extends KeyframeAnimation<Integer> {
   }
 
   @Override Integer getValue(Keyframe<Integer> keyframe, float keyframeProgress) {
+    if (keyframe.startValue == null || keyframe.endValue == null) {
+      throw new IllegalStateException("Missing values for keyframe.");
+    }
     return lerp(keyframe.startValue, keyframe.endValue, keyframeProgress);
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/Keyframe.java
Patch:
@@ -14,7 +14,7 @@
 import java.util.Collections;
 import java.util.List;
 
-public class Keyframe<T> {
+class Keyframe<T> {
   private static final Interpolator LINEAR_INTERPOLATOR = new LinearInterpolator();
 
   /**
@@ -38,8 +38,8 @@ static void setEndFrames(List<? extends Keyframe<?>> keyframes) {
 
 
   private final LottieComposition composition;
-  @Nullable T startValue;
-  @Nullable T endValue;
+  @Nullable final T startValue;
+  @Nullable final T endValue;
   @Nullable final Interpolator interpolator;
   @SuppressWarnings("WeakerAccess") final float startFrame;
   @SuppressWarnings("WeakerAccess") @Nullable Float endFrame;

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -73,7 +73,7 @@ List<Layer> getPrecomps(String id) {
     return precomps.get(id);
   }
 
-  boolean hasImages() {
+  @SuppressWarnings("unused") boolean hasImages() {
     return !images.isEmpty();
   }
 

File: lottie/src/main/java/com/airbnb/lottie/LottieImageAsset.java
Patch:
@@ -5,6 +5,7 @@
 /**
  * Data class describing an image asset exported by bodymovin.
  */
+@SuppressWarnings("WeakerAccess")
 public class LottieImageAsset {
   private final int width;
   private final int height;
@@ -28,11 +29,11 @@ static LottieImageAsset newInstance(JSONObject imageJson) {
     }
   }
 
-  public int getWidth() {
+  @SuppressWarnings("WeakerAccess") public int getWidth() {
     return width;
   }
 
-  public int getHeight() {
+  @SuppressWarnings("WeakerAccess")public int getHeight() {
     return height;
   }
 

File: lottie/src/main/java/com/airbnb/lottie/ScaleKeyframeAnimation.java
Patch:
@@ -10,6 +10,9 @@ class ScaleKeyframeAnimation extends KeyframeAnimation<ScaleXY> {
   }
 
   @Override public ScaleXY getValue(Keyframe<ScaleXY> keyframe, float keyframeProgress) {
+    if (keyframe.startValue == null || keyframe.endValue == null) {
+      throw new IllegalStateException("Missing values for keyframe.");
+    }
     ScaleXY startTransform = keyframe.startValue;
     ScaleXY endTransform = keyframe.endValue;
     return new ScaleXY(

File: lottie/src/main/java/com/airbnb/lottie/ShapeGroup.java
Patch:
@@ -33,6 +33,8 @@ class ShapeGroup {
         return ShapeTrimPath.Factory.newInstance(json, composition);
       case "sr":
         return PolystarShape.Factory.newInstance(json, composition);
+      case "mm":
+        return MergePaths.Factory.newInstance(json);
       default:
         Log.w(L.TAG, "Unknown shape type " + type);
     }

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -134,6 +134,9 @@ private void init(@Nullable AttributeSet attrs) {
       // We always want to invalidate the root drawable to it redraws the whole drawable.
       // Eventually it would be great to be able to invalidate just the changed region.
       super.invalidateDrawable(lottieDrawable);
+    } else {
+      // Otherwise work as regular ImageView
+      super.invalidateDrawable(dr);
     }
   }
 

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -29,7 +29,7 @@
 public class LottieComposition {
 
   private final Map<String, List<Layer>> precomps = new HashMap<>();
-  private final Map<String, ImageAsset> images = new HashMap<>();
+  private final Map<String, LottieImageAsset> images = new HashMap<>();
   private final LongSparseArray<Layer> layerMap = new LongSparseArray<>();
   private final List<Layer> layers = new ArrayList<>();
   private final Rect bounds;
@@ -77,7 +77,7 @@ boolean hasImages() {
     return !images.isEmpty();
   }
 
-  Map<String, ImageAsset> getImages() {
+  Map<String, LottieImageAsset> getImages() {
     return images;
   }
 
@@ -239,7 +239,7 @@ private static void parseImages(
         if (!assetJson.has("p")) {
           continue;
         }
-        ImageAsset image = ImageAsset.Factory.newInstance(assetJson);
+        LottieImageAsset image = LottieImageAsset.Factory.newInstance(assetJson);
         composition.images.put(image.getId(), image);
       }
     }

File: lottie/src/main/java/com/airbnb/lottie/LayerView.java
Patch:
@@ -328,7 +328,7 @@ private void drawImageIfNeeded(Canvas canvas) {
 
     canvas.save();
     applyTransformForLayer(canvas, this);
-    imagePaint.setAlpha(getAlpha());
+    imagePaint.setAlpha(getAlphaInternal());
     canvas.drawBitmap(bitmap, 0, 0 ,imagePaint);
     canvas.restore();
   }

File: LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java
Patch:
@@ -184,7 +184,7 @@ void onPlayClicked() {
       if (animationView.getProgress() == 1f) {
         animationView.setProgress(0f);
       }
-      animationView.playAnimation();
+      animationView.resumeAnimation();
       postUpdatePlayButtonText();
     }
   }

File: LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java
Patch:
@@ -31,9 +31,9 @@ public class LottieTest {
     TestRobot.testLinearAnimation(activity, "MotionCorpse-Jrcanest.json");
     TestRobot.testLinearAnimation(activity, "PinJump.json");
     TestRobot.testLinearAnimation(activity, "TwitterHeart.json");
+    TestRobot.testLinearAnimation(activity, "WeAccept.json", "Images/WeAccept");
     TestRobot.testLinearAnimation(activity, "Tests/CheckSwitch.json");
     TestRobot.testLinearAnimation(activity, "Tests/Fill.json");
-    TestRobot.testLinearAnimation(activity, "Tests/Image.json", "Tests/weaccept");
     TestRobot.testLinearAnimation(activity, "Tests/KeyframeTypes.json");
     TestRobot.testLinearAnimation(activity, "Tests/Laugh4.json");
     TestRobot.testLinearAnimation(activity, "Tests/LoopPlayOnce.json");

File: LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java
Patch:
@@ -62,7 +62,7 @@ static AnimationFragment newInstance() {
   }
 
   private final Map<String, String> assetFolders = new HashMap<String, String>() {{
-    put("WeAccept.json", "Tests/weaccept");
+    put("WeAccept.json", "Images/WeAccept");
   }};
 
   private OkHttpClient client;

File: lottie/src/main/java/com/airbnb/lottie/LayerView.java
Patch:
@@ -328,6 +328,7 @@ private void drawImageIfNeeded(Canvas canvas) {
 
     canvas.save();
     applyTransformForLayer(canvas, this);
+    imagePaint.setAlpha(getAlpha());
     canvas.drawBitmap(bitmap, 0, 0 ,imagePaint);
     canvas.restore();
   }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -30,7 +30,6 @@ public class LottieDrawable extends AnimatableLayer implements Drawable.Callback
   private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);
   private float speed = 1f;
 
-  private final CanvasPool canvasPool = new CanvasPool();
   @Nullable private ImageAssetBitmapManager imageAssetBitmapManager;
   @Nullable private String imageAssetsFolder;
   private boolean playAnimationWhenLayerAdded;
@@ -109,7 +108,6 @@ public class LottieDrawable extends AnimatableLayer implements Drawable.Callback
    *
    */
   @SuppressWarnings("WeakerAccess") public void recycleBitmaps() {
-    canvasPool.recycleBitmaps();
     if (imageAssetBitmapManager != null) {
       imageAssetBitmapManager.recycleBitmaps();
     }
@@ -157,7 +155,7 @@ private void buildLayersForComposition(LottieComposition composition) {
     for (int i = composition.getLayers().size() - 1; i >= 0; i--) {
       Layer layer = composition.getLayers().get(i);
       LayerView layerView;
-      layerView = new LayerView(layer, composition, this, canvasPool);
+      layerView = new LayerView(layer, composition, this);
       layerMap.put(layerView.getId(), layerView);
       if (mattedLayer != null) {
         mattedLayer.setMatteLayer(layerView);

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -206,9 +206,8 @@ private void buildLayersForComposition(LottieComposition composition) {
       float scaleY = bounds.height() / (float) compBounds.height();
       canvas.scale(scaleX, scaleY);
     }
-    super.draw(canvas);
-    // TODO: delete this?
     canvas.clipRect(getBounds());
+    super.draw(canvas);
     canvas.restoreToCount(saveCount);
 
   }

File: lottie/src/main/java/com/airbnb/lottie/PathKeyframe.java
Patch:
@@ -37,6 +37,7 @@ static PathKeyframe newInstance(JSONObject json, LottieComposition composition,
       PathKeyframe pathKeyframe = new PathKeyframe(composition, keyframe.startValue,
           keyframe.endValue, keyframe.interpolator, keyframe.startFrame, keyframe.endFrame);
 
+      //noinspection ConstantConditions
       if (keyframe.endValue != null && !keyframe.startValue.equals(keyframe.endValue)) {
         pathKeyframe.path = Utils.createPath(keyframe.startValue, keyframe.endValue, cp1, cp2);
       }

File: lottie/src/main/java/com/airbnb/lottie/CircleShape.java
Patch:
@@ -19,7 +19,7 @@ static CircleShape newInstance(JSONObject json, LottieComposition composition) {
       return new CircleShape(
           AnimatablePathValue
               .createAnimatablePathOrSplitDimensionPath(json.optJSONObject("p"), composition),
-          new AnimatablePointValue(json.optJSONObject("s"), composition));
+          AnimatablePointValue.Factory.newInstance(json.optJSONObject("s"), composition));
     }
   }
 

File: lottie/src/main/java/com/airbnb/lottie/Mask.java
Patch:
@@ -38,8 +38,8 @@ static Mask newMask(JSONObject json, LottieComposition composition) {
           maskMode = MaskMode.MaskModeUnknown;
       }
 
-      AnimatableShapeValue maskPath = new AnimatableShapeValue(json.optJSONObject("pt"),
-          composition);
+      AnimatableShapeValue maskPath = AnimatableShapeValue.Factory.newInstance(
+          json.optJSONObject("pt"), composition);
       // TODO: use this
       // JSONObject opacityJson = json.optJSONObject("o");
       // if (opacityJson != null) {

File: lottie/src/main/java/com/airbnb/lottie/PathKeyframe.java
Patch:
@@ -22,9 +22,9 @@ private Factory() {
     }
 
     static PathKeyframe newInstance(JSONObject json, LottieComposition composition,
-        AnimatableValue<PointF, ?> animatableValue) {
+        AnimatableValue.Factory<PointF> valueFactory) {
       Keyframe<PointF> keyframe = Keyframe.Factory.newInstance(json, composition,
-          composition.getScale(), animatableValue);
+          composition.getScale(), valueFactory);
       PointF cp1 = null;
       PointF cp2 = null;
       JSONArray tiJson = json.optJSONArray("ti");

File: lottie/src/main/java/com/airbnb/lottie/RectangleShape.java
Patch:
@@ -22,8 +22,8 @@ static RectangleShape newInstance(JSONObject json, LottieComposition composition
       return new RectangleShape(
           AnimatablePathValue.createAnimatablePathOrSplitDimensionPath(
               json.optJSONObject("p"), composition),
-          new AnimatablePointValue(json.optJSONObject("s"), composition),
-          new AnimatableFloatValue(json.optJSONObject("r"), composition));
+          AnimatablePointValue.Factory.newInstance(json.optJSONObject("s"), composition),
+          AnimatableFloatValue.Factory.newInstance(json.optJSONObject("r"), composition));
     }
   }
 

File: lottie/src/main/java/com/airbnb/lottie/ShapeFill.java
Patch:
@@ -27,12 +27,12 @@ static ShapeFill newInstance(JSONObject json, LottieComposition composition) {
 
       JSONObject jsonColor = json.optJSONObject("c");
       if (jsonColor != null) {
-        color = new AnimatableColorValue(jsonColor, composition);
+        color = AnimatableColorValue.Factory.newInstance(jsonColor, composition);
       }
 
       JSONObject jsonOpacity = json.optJSONObject("o");
       if (jsonOpacity != null) {
-        opacity = new AnimatableIntegerValue(jsonOpacity, composition, false, true);
+        opacity = AnimatableIntegerValue.Factory.newInstance(jsonOpacity, composition, false, true);
       }
       fillEnabled = json.optBoolean("fillEnabled");
       return new ShapeFill(fillEnabled, color, opacity);

File: lottie/src/main/java/com/airbnb/lottie/ShapePath.java
Patch:
@@ -18,8 +18,9 @@ private Factory() {
     }
 
     static ShapePath newInstance(JSONObject json, LottieComposition composition) {
-      return new ShapePath(json.optString("nm"), json.optInt("ind"),
-          new AnimatableShapeValue(json.optJSONObject("ks"), composition));
+      AnimatableShapeValue animatableShapeValue =
+          AnimatableShapeValue.Factory.newInstance(json.optJSONObject("ks"), composition);
+      return new ShapePath(json.optString("nm"), json.optInt("ind"), animatableShapeValue);
     }
   }
 

File: lottie/src/main/java/com/airbnb/lottie/ShapeTrimPath.java
Patch:
@@ -20,9 +20,9 @@ private Factory() {
 
     static ShapeTrimPath newInstance(JSONObject json, LottieComposition composition) {
       return new ShapeTrimPath(
-          new AnimatableFloatValue(json.optJSONObject("s"), composition, false),
-          new AnimatableFloatValue(json.optJSONObject("e"), composition, false),
-          new AnimatableFloatValue(json.optJSONObject("o"), composition, false));
+          AnimatableFloatValue.Factory.newInstance(json.optJSONObject("s"), composition, false),
+          AnimatableFloatValue.Factory.newInstance(json.optJSONObject("e"), composition, false),
+          AnimatableFloatValue.Factory.newInstance(json.optJSONObject("o"), composition, false));
     }
   }
 

File: lottie/src/main/java/com/airbnb/lottie/Cancellable.java
Patch:
@@ -1,5 +1,5 @@
 package com.airbnb.lottie;
 
-interface Cancellable {
+public interface Cancellable {
   void cancel();
 }

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -3,6 +3,7 @@
 import android.content.Context;
 import android.content.res.Resources;
 import android.graphics.Rect;
+import android.os.AsyncTask;
 import android.support.annotation.Nullable;
 import android.support.v4.util.LongSparseArray;
 
@@ -129,7 +130,7 @@ public static Cancellable fromInputStream(Context context, InputStream stream,
         OnCompositionLoadedListener loadedListener) {
       FileCompositionLoader loader =
           new FileCompositionLoader(context.getResources(), loadedListener);
-      loader.execute(stream);
+      loader.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, stream);
       return loader;
     }
 
@@ -150,7 +151,7 @@ static LottieComposition fromFileSync(Context context, String fileName) {
     public static Cancellable fromJson(Resources res, JSONObject json,
         OnCompositionLoadedListener loadedListener) {
       JsonCompositionLoader loader = new JsonCompositionLoader(res, loadedListener);
-      loader.execute(json);
+      loader.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, json);
       return loader;
     }
 

File: lottie/src/main/java/com/airbnb/lottie/ImageAssetBitmapManager.java
Patch:
@@ -16,7 +16,6 @@
 import static junit.framework.Assert.assertNotNull;
 
 class ImageAssetBitmapManager {
-
   private final Context context;
   private String imagesFolder;
   private final Map<String, ImageAsset> imageAssets;

File: lottie/src/main/java/com/airbnb/lottie/Keyframe.java
Patch:
@@ -15,7 +15,7 @@
 import java.util.List;
 
 public class Keyframe<T> {
-  private static Interpolator LINEAR_INTERPOLATOR = new LinearInterpolator();
+  private static final Interpolator LINEAR_INTERPOLATOR = new LinearInterpolator();
 
   static <T> List<Keyframe<T>> parseKeyframes(JSONArray json, LottieComposition composition,
       float scale, AnimatableValue<T, ?> animatableValue) {

File: LottieSample/src/androidTest/java/com/airbnb/lottie/TestRobot.java
Patch:
@@ -26,7 +26,7 @@ static void testAnimation(MainActivity activity, String fileName, String imageAs
       float[] progress) {
     final LottieAnimationView view = new LottieAnimationView(activity);
     view.setImageAssetsFolder(imageAssetsFolder);
-    view.setComposition(LottieComposition.fromFileSync(activity, fileName));
+    view.setComposition(LottieComposition.Factory.fromFileSync(activity, fileName));
     ViewHelpers.setupView(view)
         .layout();
 

File: LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java
Patch:
@@ -43,5 +43,6 @@ public void testAll() {
     TestRobot.testAnimation(getActivity(), "Tests/PreCompMadness.json");
     TestRobot.testStatic(getActivity(), "Tests/TrimPathFill.json");
     TestRobot.testStatic(getActivity(), "Tests/Mask_26.json");
+    TestRobot.testStatic(getActivity(), "Tests/MatteInv.json");
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -90,6 +90,8 @@ private void buildLayersForComposition(LottieComposition composition) {
         layers.add(layerView);
         if (layer.getMatteType() == Layer.MatteType.Add) {
           maskedLayer = layerView;
+        } else if (layer.getMatteType() == Layer.MatteType.Invert) {
+          maskedLayer = layerView;
         }
       }
     }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -32,7 +32,7 @@ public class LottieDrawable extends AnimatableLayer implements Drawable.Callback
   private boolean reverseAnimationWhenLayerAdded;
   private boolean systemAnimationsAreDisabled;
 
-  LottieDrawable() {
+  @SuppressWarnings("WeakerAccess") public LottieDrawable() {
     super(null);
 
     animator.setRepeatCount(0);

File: LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java
Patch:
@@ -38,6 +38,9 @@ public void testAll() {
     TestRobot.testAnimation(getActivity(), "Tests/Laugh4.json");
     TestRobot.testAnimation(getActivity(), "Tests/Star.json");
     TestRobot.testAnimation(getActivity(), "Tests/Polygon.json");
+    TestRobot.testAnimation(getActivity(), "Tests/AllSet.json");
+    TestRobot.testAnimation(getActivity(), "Tests/City.json");
     TestRobot.testStatic(getActivity(), "Tests/TrimPathFill.json");
+    TestRobot.testStatic(getActivity(), "Tests/Mask_26.json");
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/ShapeLayer.java
Patch:
@@ -75,7 +75,9 @@ public void onValueChanged(ScaleXY value) {
       };
 
 
-  private final Paint paint = new Paint();
+  private final Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG) {{
+    setStyle(Paint.Style.FILL);
+  }};
   private final Path tempPath = new Path();
   private final Path currentPath = new Path();
   /**
@@ -110,8 +112,6 @@ public void onValueChanged(ScaleXY value) {
 
   ShapeLayer(Drawable.Callback callback) {
     super(callback);
-    paint.setStyle(Paint.Style.FILL);
-    paint.setAntiAlias(true);
   }
 
   void setIsStroke() {

File: lottie/src/main/java/com/airbnb/lottie/LayerView.java
Patch:
@@ -232,7 +232,7 @@ void setMatteLayer(LayerView matteLayer) {
     if (contentCanvas == null || contentBitmap == null) {
       int mainCanvasCount = saveCanvas(mainCanvas);
       // Now apply the parent transformations from the top down.
-      for (int i = 0; i < transformLayers.size(); i++) {
+      for (int i = transformLayers.size() - 1; i >= 0; i--) {
         LayerView layer = transformLayers.get(i);
         applyTransformForLayer(mainCanvas, layer);
       }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -67,7 +67,7 @@ void setComposition(LottieComposition composition) {
     setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());
     buildLayersForComposition(composition);
 
-    getCallback().invalidateDrawable(this);
+    setProgress(getProgress());
   }
 
   private void clearComposition() {

File: LottieSample/src/androidTest/java/com/airbnb/lottie/LottieTest.java
Patch:
@@ -35,5 +35,6 @@ public void testAll() {
     TestRobot.testAnimation(getActivity(), "Tests/EllipseTrimPath.json");
     TestRobot.testAnimation(getActivity(), "Tests/SplitDimensions.json");
     TestRobot.testAnimation(getActivity(), "Tests/TrimPathsFull.json");
+    TestRobot.testStatic(getActivity(), "Tests/TrimPathFill.json");
   }
 }

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -23,7 +23,7 @@
  * handles bitmap recycling and asynchronous loading
  * of compositions.
  */
-class LottieDrawable extends AnimatableLayer {
+public class LottieDrawable extends AnimatableLayer {
   private LottieComposition composition;
   private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);
 

File: lottie/src/main/java/com/airbnb/lottie/AnimatableShapeValue.java
Patch:
@@ -106,6 +106,7 @@ class AnimatableShapeValue extends BaseAnimatableValue<ShapeData, Path> {
       }
 
       shape.addCurve(new CubicCurveData(shapeCp1, shapeCp2, vertex));
+      shape.setClosed(true);
     }
     return shape;
 

File: lottie/src/main/java/com/airbnb/lottie/MiscUtils.java
Patch:
@@ -19,6 +19,9 @@ static void getPathFromData(ShapeData shapeData, Path outPath) {
           curveData.getControlPoint2().x, curveData.getControlPoint2().y,
           curveData.getVertex().x, curveData.getVertex().y);
     }
+    if (shapeData.isClosed()) {
+      outPath.close();
+    }
   }
 
   static float lerp(float a, float b, @FloatRange(from = 0f, to = 1f) float percentage) {

File: LottieSample/src/main/java/com/airbnb/lottie/samples/AnimationFragment.java
Patch:
@@ -187,7 +187,7 @@ void onPlayClicked() {
   @OnClick(R.id.loop)
   void onLoopChanged() {
     loopButton.setActivated(!loopButton.isActivated());
-    animationView.loop(loopButton.isEnabled());
+    animationView.loop(loopButton.isActivated());
   }
 
   @OnClick(R.id.restart)

File: lottie/src/main/java/com/airbnb/lottie/AnimatableIntegerValue.java
Patch:
@@ -30,6 +30,8 @@ class AnimatableIntegerValue extends BaseAnimatableValue<Integer, Integer> {
       return Math.round((Integer) object * scale);
     } else if (object instanceof JSONArray && ((JSONArray) object).get(0) instanceof Integer) {
       return Math.round(((JSONArray) object).getInt(0) * scale);
+    } else if (object instanceof JSONArray && ((JSONArray) object).get(0) instanceof Double) {
+      return (int) Math.round(((JSONArray) object).getDouble(0) * scale);
     }
     return null;
   }

File: lottie/src/main/java/com/airbnb/lottie/LottieComposition.java
Patch:
@@ -5,7 +5,7 @@
 import android.graphics.Rect;
 import android.os.AsyncTask;
 import android.support.annotation.VisibleForTesting;
-import android.util.LongSparseArray;
+import android.support.v4.util.LongSparseArray;
 
 import org.json.JSONArray;
 import org.json.JSONException;

File: lottie/src/main/java/com/airbnb/lottie/LottieDrawable.java
Patch:
@@ -8,7 +8,7 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
-import android.util.LongSparseArray;
+import android.support.v4.util.LongSparseArray;
 import android.view.animation.LinearInterpolator;
 
 import java.util.ArrayList;

File: lottie/src/main/java/com/airbnb/lottie/AnimatableLayer.java
Patch:
@@ -160,7 +160,6 @@ void applyTransformForLayer(@Nullable Canvas canvas, AnimatableLayer layer) {
     }
   }
 
-
   @Override
   public void setAlpha(int alpha) {
     throw new IllegalArgumentException("This shouldn't be used.");

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -90,7 +90,7 @@ public LottieAnimationView(Context context, AttributeSet attrs, int defStyleAttr
     private void init(@Nullable AttributeSet attrs) {
         TypedArray ta = getContext().obtainStyledAttributes(attrs, R.styleable.LottieAnimationView);
         String fileName = ta.getString(R.styleable.LottieAnimationView_lottie_fileName);
-        if (fileName != null) {
+        if (!isInEditMode() && fileName != null) {
             setAnimation(fileName);
         }
         if (ta.getBoolean(R.styleable.LottieAnimationView_lottie_autoPlay, false)) {

File: LottieSample/src/main/java/com/airbnb/lottie/samples/AppIntroActivity.java
Patch:
@@ -68,7 +68,7 @@ public void onPageScrollStateChanged(int state) { }
     protected IntroButton.Behaviour generateFinalButtonBehaviour() {
         return new IntroButton.Behaviour() {
             @Override
-            public void setActivity(IntroActivity activity) { }
+            public void setActivity(IntroActivity activity) { finish();}
 
             @Override
             public IntroActivity getActivity() {

File: lottie/src/main/java/com/airbnb/lottie/L.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.support.annotation.RestrictTo;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class L {
     public static final boolean DBG = false;
 }

File: lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableColorValue.java
Patch:
@@ -12,7 +12,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class AnimatableColorValue extends BaseAnimatableValue<Integer, Integer> {
 
     public AnimatableColorValue(JSONObject json, int frameRate, LottieComposition composition) {

File: lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableFloatValue.java
Patch:
@@ -11,7 +11,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class AnimatableFloatValue extends BaseAnimatableValue<Float, Float> {
 
     public AnimatableFloatValue(LottieComposition composition, Float initialValue) {

File: lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableIntegerValue.java
Patch:
@@ -11,7 +11,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class AnimatableIntegerValue extends BaseAnimatableValue<Integer, Integer> {
 
     public AnimatableIntegerValue(LottieComposition composition, Integer initialValue) {

File: lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class AnimatablePathValue implements AnimatableValue {
 
     private final List<Float> keyTimes = new ArrayList<>();

File: lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePointValue.java
Patch:
@@ -13,7 +13,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class AnimatablePointValue extends BaseAnimatableValue<PointF, PointF> {
 
     public AnimatablePointValue(JSONObject pointValues, int frameRate, LottieComposition composition) {

File: lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableScaleValue.java
Patch:
@@ -12,7 +12,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class AnimatableScaleValue extends BaseAnimatableValue<ScaleXY, ScaleXY> {
 
     public AnimatableScaleValue(LottieComposition composition) {

File: lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableShapeValue.java
Patch:
@@ -18,7 +18,7 @@
 
 import static com.airbnb.lottie.utils.MiscUtils.addPoints;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class AnimatableShapeValue extends BaseAnimatableValue<ShapeData, Path> {
     private final Path convertTypePath = new Path();
 

File: lottie/src/main/java/com/airbnb/lottie/animation/ColorKeyframeAnimation.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.util.List;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class ColorKeyframeAnimation extends KeyframeAnimation<Integer> {
     private final ArgbEvaluator argbEvaluator = new ArgbEvaluator();
 

File: lottie/src/main/java/com/airbnb/lottie/animation/NumberKeyframeAnimation.java
Patch:
@@ -9,7 +9,7 @@
 
 import static com.airbnb.lottie.utils.MiscUtils.lerp;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class NumberKeyframeAnimation<T extends Number> extends KeyframeAnimation<T> {
 
     private final List<T> values;

File: lottie/src/main/java/com/airbnb/lottie/animation/PathKeyframeAnimation.java
Patch:
@@ -11,7 +11,7 @@
 
 import java.util.List;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class PathKeyframeAnimation extends KeyframeAnimation<PointF> {
     private final PointF point = new PointF();
     private final float[] pos = new float[2];

File: lottie/src/main/java/com/airbnb/lottie/animation/PointKeyframeAnimation.java
Patch:
@@ -8,7 +8,7 @@
 
 import java.util.List;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class PointKeyframeAnimation extends KeyframeAnimation<PointF> {
     private final PointF point = new PointF();
     private final List<PointF> points;

File: lottie/src/main/java/com/airbnb/lottie/animation/ScaleKeyframeAnimation.java
Patch:
@@ -10,7 +10,7 @@
 
 import static com.airbnb.lottie.utils.MiscUtils.lerp;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class ScaleKeyframeAnimation extends KeyframeAnimation<ScaleXY> {
     private final ScaleXY outTransform = new ScaleXY();
 

File: lottie/src/main/java/com/airbnb/lottie/animation/ShapeKeyframeAnimation.java
Patch:
@@ -10,7 +10,7 @@
 
 import java.util.List;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class ShapeKeyframeAnimation extends KeyframeAnimation<Path> {
     private final Path tempPath = new Path();
     private final ShapeData tempShapeData = new ShapeData();

File: lottie/src/main/java/com/airbnb/lottie/animation/StaticKeyframeAnimation.java
Patch:
@@ -6,7 +6,7 @@
 
 import java.util.Collections;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class StaticKeyframeAnimation<T> extends KeyframeAnimation<T> {
 
 

File: lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java
Patch:
@@ -33,7 +33,7 @@
 import java.util.Collections;
 import java.util.List;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class LayerView extends AnimatableLayer {
 
     private MaskLayer mask;
@@ -125,7 +125,7 @@ private void setupForModel() {
         }
 
         if (maskBitmap != null && layerModel.getMasks() != null && !layerModel.getMasks().isEmpty()) {
-            setMask(new MaskLayer(layerModel.getMasks(), composition, getCallback()));
+            setMask(new MaskLayer(layerModel.getMasks(), getCallback()));
             maskCanvas = new Canvas(maskBitmap);
         }
         buildAnimations();

File: lottie/src/main/java/com/airbnb/lottie/layers/LottieDrawable.java
Patch:
@@ -25,7 +25,7 @@
  * It is preferable to use {@link com.airbnb.lottie.LottieAnimationView} when possible because it handles bitmap recycling and asynchronous loading
  * of compositions.
  */
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class LottieDrawable extends AnimatableLayer {
 
     private LottieComposition composition;

File: lottie/src/main/java/com/airbnb/lottie/layers/MaskLayer.java
Patch:
@@ -4,7 +4,6 @@
 import android.graphics.drawable.Drawable;
 
 import com.airbnb.lottie.animation.KeyframeAnimation;
-import com.airbnb.lottie.model.LottieComposition;
 import com.airbnb.lottie.model.Mask;
 
 import java.util.ArrayList;
@@ -14,7 +13,7 @@ class MaskLayer extends AnimatableLayer {
 
     private final List<KeyframeAnimation<Path>> masks;
 
-    MaskLayer(List<Mask> masks, LottieComposition composition, Drawable.Callback callback) {
+    MaskLayer(List<Mask> masks, Drawable.Callback callback) {
         super(callback);
         this.masks = new ArrayList<>(masks.size());
         for (int i = 0; i < masks.size(); i++) {

File: lottie/src/main/java/com/airbnb/lottie/model/CircleShape.java
Patch:
@@ -8,10 +8,10 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class CircleShape {
-    private AnimatablePathValue position;
-    private AnimatablePointValue size;
+    private final AnimatablePathValue position;
+    private final AnimatablePointValue size;
 
     CircleShape(JSONObject json, int frameRate, LottieComposition composition) {
         try {

File: lottie/src/main/java/com/airbnb/lottie/model/CubicCurveData.java
Patch:
@@ -3,7 +3,7 @@
 import android.graphics.PointF;
 import android.support.annotation.RestrictTo;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class CubicCurveData {
     private final PointF controlPoint1;
     private final PointF controlPoint2;

File: lottie/src/main/java/com/airbnb/lottie/model/Layer.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.List;
 import java.util.Locale;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class Layer implements Transform {
     private static final String TAG = Layer.class.getSimpleName();
     private final LottieComposition composition;

File: lottie/src/main/java/com/airbnb/lottie/model/LottieComposition.java
Patch:
@@ -21,7 +21,7 @@
  * After Effects/Bodymovin composition model. This is the serialized model from which the animation will be created.
  * It can be used with a {@link com.airbnb.lottie.LottieAnimationView} or {@link com.airbnb.lottie.layers.LottieDrawable}.
  */
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class LottieComposition {
 
     public interface OnCompositionLoadedListener {

File: lottie/src/main/java/com/airbnb/lottie/model/Mask.java
Patch:
@@ -8,7 +8,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class Mask {
 
     private enum MaskMode {
@@ -18,8 +18,8 @@ private enum MaskMode {
         MaskModeUnknown
     }
 
-    private MaskMode maskMode;
-    private AnimatableShapeValue maskPath;
+    private final MaskMode maskMode;
+    private final AnimatableShapeValue maskPath;
 
     Mask(JSONObject json, int frameRate, LottieComposition composition) {
         try {

File: lottie/src/main/java/com/airbnb/lottie/model/ShapeData.java
Patch:
@@ -9,7 +9,7 @@
 
 import static com.airbnb.lottie.utils.MiscUtils.lerp;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class ShapeData {
 
     private final List<CubicCurveData> curves = new ArrayList<>();

File: lottie/src/main/java/com/airbnb/lottie/model/ShapeFill.java
Patch:
@@ -10,7 +10,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class ShapeFill {
     private static final String TAG = ShapeFill.class.getSimpleName();
 

File: lottie/src/main/java/com/airbnb/lottie/model/ShapeGroup.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.Arrays;
 import java.util.List;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class ShapeGroup {
 
     @Nullable

File: lottie/src/main/java/com/airbnb/lottie/model/ShapePath.java
Patch:
@@ -9,12 +9,12 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class ShapePath {
     private static final String TAG = ShapePath.class.getSimpleName();
 
-    private String name;
-    private int index;
+    private final String name;
+    private final int index;
     private AnimatableShapeValue shapePath;
 
     ShapePath(JSONObject json, int frameRate, LottieComposition composition) {

File: lottie/src/main/java/com/airbnb/lottie/model/Transform.java
Patch:
@@ -8,7 +8,7 @@
 import com.airbnb.lottie.animatable.AnimatablePathValue;
 import com.airbnb.lottie.animatable.AnimatableScaleValue;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public interface Transform {
     Rect getBounds();
 

File: lottie/src/main/java/com/airbnb/lottie/utils/JsonUtils.java
Patch:
@@ -7,7 +7,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class JsonUtils {
 
 

File: lottie/src/main/java/com/airbnb/lottie/utils/MiscUtils.java
Patch:
@@ -8,7 +8,7 @@
 import com.airbnb.lottie.model.CubicCurveData;
 import com.airbnb.lottie.model.ShapeData;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class MiscUtils {
 
     public static PointF addPoints(PointF p1, PointF p2) {

File: lottie/src/main/java/com/airbnb/lottie/utils/ScaleXY.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.support.annotation.RestrictTo;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class ScaleXY {
     private float scaleX = 1f;
     private float scaleY = 1f;

File: lottie/src/main/java/com/airbnb/lottie/utils/SegmentedPath.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class SegmentedPath {
 
     private final List<Path> segments = new ArrayList<>();

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -13,10 +13,10 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.support.annotation.VisibleForTesting;
+import android.support.v7.widget.AppCompatImageView;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.util.Log;
-import android.widget.ImageView;
 
 import com.airbnb.lottie.layers.LottieDrawable;
 import com.airbnb.lottie.model.LottieComposition;
@@ -37,7 +37,7 @@
  *
  * You may manually set the progress of the animation with {@link #setProgress(float)}
  */
-public class LottieAnimationView extends ImageView {
+public class LottieAnimationView extends AppCompatImageView {
     private static final String TAG = LottieAnimationView.class.getSimpleName();
 
     /**

File: lottie/src/main/java/com/airbnb/lottie/animation/KeyframeAnimation.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public abstract class KeyframeAnimation<T> {
 
     public interface AnimationListener<T> {

File: lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-@RestrictTo(RestrictTo.Scope.GROUP_ID)
+@RestrictTo(RestrictTo.Scope.LIBRARY_GROUP)
 public class AnimatableLayer extends Drawable {
 
     private final KeyframeAnimation.AnimationListener<Integer> integerChangedListener = new KeyframeAnimation.AnimationListener<Integer>() {
@@ -48,8 +48,7 @@ public void onValueChanged(PointF progress) {
     };
 
     final List<AnimatableLayer> layers = new ArrayList<>();
-    @Nullable AnimatableLayer parentLayer;
-
+    @Nullable private AnimatableLayer parentLayer;
 
     private KeyframeAnimation<PointF> position;
     private KeyframeAnimation<PointF> anchorPoint;

File: lottie/src/main/java/com/airbnb/lottie/layers/RectLayer.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.lottie.layers;
 
+import android.annotation.SuppressLint;
 import android.graphics.Canvas;
 import android.graphics.DashPathEffect;
 import android.graphics.Paint;
@@ -320,6 +321,7 @@ void setRectSize(KeyframeAnimation<PointF> rectSize) {
             invalidateSelf();
         }
 
+        @SuppressLint("NewApi")
         @Override
         public void draw(@NonNull Canvas canvas) {
             if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {

File: lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java
Patch:
@@ -1,5 +1,6 @@
 package com.airbnb.lottie.layers;
 
+import android.annotation.SuppressLint;
 import android.graphics.Canvas;
 import android.graphics.ColorFilter;
 import android.graphics.DashPathEffect;
@@ -209,6 +210,7 @@ private void onPathPropertiesChanged() {
         invalidateSelf();
     }
 
+    @SuppressLint("NewApi")
     @Override
     public void draw(@NonNull Canvas canvas) {
         if (paint.getStyle() == Paint.Style.STROKE && paint.getStrokeWidth() == 0f) {

File: LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java
Patch:
@@ -56,7 +56,6 @@ public void onCompositionLoaded(LottieComposition composition) {
                 cursorView.loop(true);
                 cursorView.playAnimation();
                 addView(cursorView);
-                views.add(cursorView);
             }
         });
     }
@@ -76,7 +75,7 @@ public void addView(View child, int index) {
     }
 
     private void removeLastView() {
-        if (!views.isEmpty()) {
+        if (views.size() > 1) {
             int position = views.size() - 2;
             removeView(views.get(position));
             views.remove(position);

File: lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java
Patch:
@@ -172,8 +172,9 @@ void setAlpha(KeyframeAnimation<Integer> alpha) {
 
     @Override
     public int getAlpha() {
-        return (int) ((int) (alpha == null ? 1f : alpha.getValue()) *
-                (parentLayer == null ? 1f : parentLayer.getAlpha() / 255f) * 255);
+        float alpha = this.alpha == null ? 1f : (this.alpha.getValue() / 255f);
+        float parentAlpha = parentLayer == null ? 1f : (parentLayer.getAlpha() / 255f);
+        return (int) (alpha * parentAlpha * 255);
     }
 
     @Override

File: lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java
Patch:
@@ -172,7 +172,8 @@ void setAlpha(KeyframeAnimation<Integer> alpha) {
 
     @Override
     public int getAlpha() {
-        return (int) (alpha == null ? 255 : alpha.getValue() * (parentLayer == null ? 1f : parentLayer.getAlpha() / 255f));
+        return (int) ((int) (alpha == null ? 1f : alpha.getValue()) *
+                (parentLayer == null ? 1f : parentLayer.getAlpha() / 255f) * 255);
     }
 
     @Override

File: LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java
Patch:
@@ -53,6 +53,7 @@ public void onCompositionLoaded(LottieComposition composition) {
                         ViewGroup.LayoutParams.WRAP_CONTENT
                 ));
                 cursorView.setComposition(composition);
+                cursorView.loop(true);
                 cursorView.playAnimation();
                 addView(cursorView);
                 views.add(cursorView);

File: lottie/src/main/java/com/airbnb/lottie/layers/ShapeLayer.java
Patch:
@@ -179,9 +179,6 @@ private void onPathPropertiesChanged() {
             float newEnd = Math.max(start, end);
 
             currentPath.reset();
-            // Workaround to get hardware acceleration on KitKat
-            // https://developer.android.com/reference/android/graphics/PathMeasure.html#getSegment(float, float, android.graphics.Path, boolean)
-            currentPath.rLineTo(0, 0);
             currentPathStrokeOffset = strokeOffset.getValue() / 360f * length;
             newStart += currentPathStrokeOffset;
             newEnd += currentPathStrokeOffset;

File: LottieSample/src/main/java/com/airbnb/lottie/samples/LottieFontViewGroup.java
Patch:
@@ -25,7 +25,7 @@ public LottieFontViewGroup(Context context, AttributeSet attrs, int defStyleAttr
         super(context, attrs, defStyleAttr);
     }
 
-    public void addSpace() {
+    void addSpace() {
         addView(createSpaceView());
     }
 
@@ -35,7 +35,7 @@ public void addView(View child) {
         views.add(child);
     }
 
-    public void removeLastView() {
+    void removeLastView() {
         if (!views.isEmpty()) {
             int position = views.size() - 1;
             removeView(views.get(position));

File: lottie/src/main/java/com/airbnb/lottie/layers/AnimatableLayer.java
Patch:
@@ -234,7 +234,7 @@ void addLayer(AnimatableLayer layer) {
         invalidateSelf();
     }
 
-    public void clearLayers() {
+    void clearLayers() {
         layers.clear();
         invalidateSelf();
     }

File: lottie/src/main/java/com/airbnb/lottie/L.java
Patch:
@@ -1,5 +1,5 @@
 package com.airbnb.lottie;
 
 public class L {
-    public static final boolean DBG = true;
+    public static final boolean DBG = false;
 }

File: lottie/src/main/java/com/airbnb/lottie/L.java
Patch:
@@ -1,5 +1,5 @@
 package com.airbnb.lottie;
 
 public class L {
-    public static final boolean DBG = false;
+    public static final boolean DBG = true;
 }

File: lottie/src/main/java/com/airbnb/lottie/animatable/AnimatableValue.java
Patch:
@@ -2,9 +2,8 @@
 
 import com.airbnb.lottie.animation.KeyframeAnimation;
 
-public interface AnimatableValue<T> {
+interface AnimatableValue {
 
-    KeyframeAnimation animationForKeyPath();
+    KeyframeAnimation createAnimation();
     boolean hasAnimation();
-    Observable<T> getObservable();
 }

File: lottie/src/main/java/com/airbnb/lottie/model/ShapeGroup.java
Patch:
@@ -8,6 +8,7 @@
 import org.json.JSONObject;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 @SuppressWarnings({"EmptyCatchBlock"})
@@ -85,6 +86,6 @@ public List<Object> getItems() {
 
     @Override
     public String toString() {
-        return "ShapeGroup{" + "name='" + name + '\'' + '}';
+        return "ShapeGroup{" + "name='" + name + "\' Shapes: " + Arrays.toString(items.toArray()) + '}';
     }
 }

File: LottieSample/src/main/java/com/airbnb/lottie/samples/ViewAnimationFragment.java
Patch:
@@ -27,7 +27,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
         ButterKnife.bind(this, view);
 
         messageBubble.setTag(R.id.lottie_layer_name, "Null");
-        LottieViewAnimator.of(getContext(), "ViewTest02.json", messageBubble)
+        LottieViewAnimator.of(getContext(), "Tip_02.json", messageBubble)
                 .loop(true)
                 .start();
 

File: lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java
Patch:
@@ -169,7 +169,7 @@ public Observable<PointF> getObservable() {
     }
 
     @Override
-    public KeyframeAnimation animationForKeyPath() {
+    public KeyframeAnimation<PointF> animationForKeyPath() {
         if (!hasAnimation()) {
             return null;
         }

File: LottieSample/src/main/java/com/airbnb/lottie/samples/GridFragment.java
Patch:
@@ -36,8 +36,8 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
 
     private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {
         private static final String[] FILE_NAMES = {
-                "BusinessTravel01_Still.json",
-                "Diamond 2.json",
+                "BusinessTravel01.json",
+                "Diamond.json",
                 "LightBulb.json",
                 "Alarm.json",
         };

File: lottie/src/main/java/com/airbnb/lottie/layers/EllipseShapeLayer.java
Patch:
@@ -148,7 +148,7 @@ private void onCircleSizeChanged() {
             path.cubicTo(0 - cpW, halfHeight, -halfWidth, 0 + cpH, -halfWidth, 0);
             path.cubicTo(-halfWidth, 0 - cpH, 0 - cpW, -halfHeight, 0, -halfHeight);
             observable.setValue(path);
-            onTrimPathChanged();
+            onPathChanged();
 
             invalidateSelf();
         }

File: LottieSample/src/androidTest/java/com/airbnb/lottie/samples/TestRobot.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.Locale;
 
 class TestRobot {
-    private static final float[] DEFAULT_ANIMATED_PROGRESS = {0f, 0.05f, 0.10f, 0.15f, 0.20f, 0.25f, 0.30f, 0.40f, 0.50f, 0.60f, 0.70f, 0.80f, 0.90f, 1f};
+    private static final float[] DEFAULT_ANIMATED_PROGRESS = {0f, 0.05f, 0.10f, 0.2f, 0.5f, 1f};
     private static final float[] DEFAULT_STATIC_PROGRESS = {0f};
 
     static void testAnimatedFile(MainActivity activity, String fileName) {

File: lottie/src/main/java/com/airbnb/lottie/animatable/AnimatablePathValue.java
Patch:
@@ -130,7 +130,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {
                     cp1 = keyframe.has("to") ? JsonUtils.pointFromJsonArray(keyframe.getJSONArray("to"), L.SCALE) : null;
                     cp2 = keyframe.has("ti") ? JsonUtils.pointFromJsonArray(keyframe.getJSONArray("ti"), L.SCALE) : null;
                     PointF vertex = JsonUtils.pointFromJsonArray(keyframe.getJSONArray("e"), L.SCALE);
-                    if (cp1 != null && cp2 != null) {
+                    if (cp1 != null && cp2 != null && cp1.length() != 0 && cp2.length() != 0) {
                         animationPath.cubicTo(
                                 startPoint.x + cp1.x, startPoint.y + cp1.y,
                                 vertex.x + cp2.x, vertex.y + cp2.y,

File: lottie/src/main/java/com/airbnb/lottie/layers/LayerView.java
Patch:
@@ -104,6 +104,7 @@ private void setupForModel(Drawable.Callback callback) {
         childContainerLayer.setAnchorPoint(layerModel.getAnchor().getObservable());
         childContainerLayer.setTransform(layerModel.getScale().getObservable());
         childContainerLayer.setRotation(layerModel.getRotation().getObservable());
+        setAlpha(layerModel.getOpacity().getObservable());
         layerModel.getOpacity().getObservable().addChangeListener(new Observable.OnChangedListener() {
             @Override
             public void onChanged() {

File: lottie/src/main/java/com/airbnb/lottie/LottieViewAnimator.java
Patch:
@@ -77,7 +77,7 @@ public void onValueChanged(PointF progress) {
                 }
             });
             animatableValues.add(position);
-            PointF initialPosition = layer.getPosition().getInitialValue();
+            PointF initialPosition = layer.getPosition().getInitialPoint();
             view.setTranslationX(initialPosition.x);
             view.setTranslationY(initialPosition.y);
 

File: lottie/src/main/java/com/airbnb/lottie/LottieAnimationView.java
Patch:
@@ -146,7 +146,7 @@ protected boolean verifyDrawable(@NonNull Drawable drawable) {
 
     @Override
     public void invalidateDrawable(@NonNull Drawable dr) {
-        if (!hasInvalidatedThisFrame) {
+        if (!hasInvalidatedThisFrame && rootAnimatableLayer != null) {
             super.invalidateDrawable(rootAnimatableLayer);
             hasInvalidatedThisFrame = true;
         }

File: LottieSample/src/main/java/com/airbnb/lottie/samples/GridFragment.java
Patch:
@@ -36,8 +36,8 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
 
     private static final class Adapter extends RecyclerView.Adapter<ViewHolder> {
         private static final String[] FILE_NAMES = {
-                "BusinessTravel01_Still.json",
-                "Diamond 2.json",
+                "BusinessTravel01.json",
+                "Diamond.json",
                 "LightBulb.json",
                 "Alarm.json",
         };

File: lottie/src/main/java/com/airbnb/lottie/layers/RootAnimatableLayer.java
Patch:
@@ -7,13 +7,13 @@
 import android.support.annotation.NonNull;
 import android.view.animation.LinearInterpolator;
 
-public class RootLottieAnimatableLayer extends LottieAnimatableLayer {
+public class RootAnimatableLayer extends AnimatableLayer {
 
     private final ValueAnimator animator = ValueAnimator.ofFloat(0f, 1f);
 
     private boolean playAnimationWhenLayerAdded;
 
-    public RootLottieAnimatableLayer(Drawable.Callback callback) {
+    public RootAnimatableLayer(Drawable.Callback callback) {
         super(0, callback);
         animator.setRepeatCount(0);
         animator.setInterpolator(new LinearInterpolator());
@@ -62,7 +62,7 @@ public void cancelAnimation() {
     }
 
     @Override
-    public void addLayer(LottieAnimatableLayer layer) {
+    public void addLayer(AnimatableLayer layer) {
         super.addLayer(layer);
         if (playAnimationWhenLayerAdded) {
             playAnimationWhenLayerAdded = false;

File: lottie/src/main/java/com/airbnb/lottie/model/CircleShape.java
Patch:
@@ -7,11 +7,11 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-public class LottieShapeCircle {
+public class CircleShape {
     private AnimatablePathValue position;
     private AnimatablePointValue size;
 
-    LottieShapeCircle(JSONObject json, int frameRate, long compDuration) {
+    CircleShape(JSONObject json, int frameRate, long compDuration) {
         try {
             position = new AnimatablePathValue(json.getJSONObject("p"), frameRate, compDuration);
             size = new AnimatablePointValue(json.getJSONObject("s"), frameRate, compDuration);

File: lottie/src/main/java/com/airbnb/lottie/model/CubicCurveData.java
Patch:
@@ -2,18 +2,18 @@
 
 import android.graphics.PointF;
 
-public class LottieCubicCurveData {
+public class CubicCurveData {
     private final PointF controlPoint1;
     private final PointF controlPoint2;
     private final PointF vertex;
 
-    LottieCubicCurveData() {
+    CubicCurveData() {
         controlPoint1 = new PointF();
         controlPoint2 = new PointF();
         vertex = new PointF();
     }
 
-    public LottieCubicCurveData(PointF controlPoint1, PointF controlPoint2, PointF vertex) {
+    public CubicCurveData(PointF controlPoint1, PointF controlPoint2, PointF vertex) {
         this.controlPoint1 = controlPoint1;
         this.controlPoint2 = controlPoint2;
         this.vertex = vertex;

File: lottie/src/main/java/com/airbnb/lottie/model/Mask.java
Patch:
@@ -6,7 +6,7 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-public class LottieMask {
+public class Mask {
 
     private enum MaskMode {
         MaskModeAdd,
@@ -18,7 +18,7 @@ private enum MaskMode {
     private MaskMode maskMode;
     private AnimatableShapeValue maskPath;
 
-    public LottieMask(JSONObject json, int frameRate, long compDuration) {
+    public Mask(JSONObject json, int frameRate, long compDuration) {
         try {
             boolean closed = json.getBoolean("cl");
             String mode = json.getString("mode");

File: lottie/src/main/java/com/airbnb/lottie/model/ShapeStroke.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class LottieShapeStroke {
+public class ShapeStroke {
 
     public enum LineCapType {
         Butt,
@@ -35,7 +35,7 @@ public enum LineJoinType {
     private LineCapType capType;
     private LineJoinType joinType;
 
-    LottieShapeStroke(JSONObject json, int frameRate, long compDuration) {
+    ShapeStroke(JSONObject json, int frameRate, long compDuration) {
         try {
             JSONObject colorJson = json.getJSONObject("c");
             color = new AnimatableColorValue(colorJson, frameRate, compDuration);

File: lottie/src/main/java/com/airbnb/lottie/model/ShapeTrimPath.java
Patch:
@@ -6,12 +6,12 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-public class LottieShapeTrimPath {
+public class ShapeTrimPath {
     private AnimatableFloatValue start;
     private AnimatableFloatValue end;
     private AnimatableFloatValue offset;
 
-    public LottieShapeTrimPath(JSONObject json, int frameRate, long compDuration) {
+    public ShapeTrimPath(JSONObject json, int frameRate, long compDuration) {
         try {
             start = new AnimatableFloatValue(json.getJSONObject("s"), frameRate, compDuration, false);
             end = new AnimatableFloatValue(json.getJSONObject("e"), frameRate, compDuration, false);

File: lottie/src/main/java/com/airbnb/lottie/animation/AnimatableColorValue.java
Patch:
@@ -9,9 +9,9 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-public class LottieAnimatableColorValue extends BaseLottieAnimatableValue<Integer, Integer> {
+public class AnimatableColorValue extends BaseAnimatableValue<Integer, Integer> {
 
-    public LottieAnimatableColorValue(JSONObject json, int frameRate, long compDuration) {
+    public AnimatableColorValue(JSONObject json, int frameRate, long compDuration) {
         super(json, frameRate, compDuration, false);
     }
 
@@ -56,6 +56,6 @@ public void onValueChanged(Integer progress) {
 
     @Override
     public String toString() {
-        return "LottieAnimatableColorValue{" + "initialValue=" + initialValue + '}';
+        return "AnimatableColorValue{" + "initialValue=" + initialValue + '}';
     }
 }

File: lottie/src/main/java/com/airbnb/lottie/animation/AnimatableIntegerValue.java
Patch:
@@ -10,11 +10,11 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-public class LottieAnimatableIntegerValue extends BaseLottieAnimatableValue<Integer, Integer> {
+public class AnimatableIntegerValue extends BaseAnimatableValue<Integer, Integer> {
 
     @Nullable private RemapInterface<Integer> remapInterface;
 
-    public LottieAnimatableIntegerValue(JSONObject json, int frameRate, long compDuration, boolean isDp) {
+    public AnimatableIntegerValue(JSONObject json, int frameRate, long compDuration, boolean isDp) {
         super(json, frameRate, compDuration, isDp);
     }
 

File: lottie/src/main/java/com/airbnb/lottie/animation/AnimatablePathValue.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class LottieAnimatablePathValue implements LottieAnimatableValue<PointF> {
+public class AnimatablePathValue implements AnimatableValue<PointF> {
 
     private final Observable<PointF> observable = new Observable<>();
     private final List<Float> keyTimes = new ArrayList<>();
@@ -34,7 +34,7 @@ public class LottieAnimatablePathValue implements LottieAnimatableValue<PointF>
     private long startFrame;
     private long durationFrames;
 
-    public LottieAnimatablePathValue(JSONObject pointValues, int frameRate, long compDuration) {
+    public AnimatablePathValue(JSONObject pointValues, int frameRate, long compDuration) {
         this.compDuration = compDuration;
         this.frameRate = frameRate;
 
@@ -193,6 +193,6 @@ public boolean hasAnimation() {
 
     @Override
     public String toString() {
-        return "LottieAnimatablePathValue{" + "initialPoint=" + initialPoint + '}';
+        return "AnimatablePathValue{" + "initialPoint=" + initialPoint + '}';
     }
 }

File: lottie/src/main/java/com/airbnb/lottie/animation/AnimatablePointValue.java
Patch:
@@ -10,9 +10,9 @@
 import org.json.JSONException;
 import org.json.JSONObject;
 
-public class LottieAnimatablePointValue extends BaseLottieAnimatableValue<PointF, PointF> {
+public class AnimatablePointValue extends BaseAnimatableValue<PointF, PointF> {
 
-    public LottieAnimatablePointValue(JSONObject pointValues, int frameRate, long compDuration) {
+    public AnimatablePointValue(JSONObject pointValues, int frameRate, long compDuration) {
         super(pointValues, frameRate, compDuration, true);
     }
 

File: lottie/src/main/java/com/airbnb/lottie/animation/AnimatableScaleValue.java
Patch:
@@ -9,9 +9,9 @@
 import org.json.JSONObject;
 
 @SuppressWarnings({"EmptyCatchBlock"})
-public class LottieAnimatableScaleValue extends BaseLottieAnimatableValue<LottieTransform3D, LottieTransform3D> {
+public class AnimatableScaleValue extends BaseAnimatableValue<LottieTransform3D, LottieTransform3D> {
 
-    public LottieAnimatableScaleValue(JSONObject scaleValues, int frameRate, long compDuration, boolean isDp) {
+    public AnimatableScaleValue(JSONObject scaleValues, int frameRate, long compDuration, boolean isDp) {
         super(scaleValues, frameRate, compDuration, isDp);
     }
 

File: lottie/src/main/java/com/airbnb/lottie/animation/AnimatableShapeValue.java
Patch:
@@ -16,10 +16,10 @@
 import static com.airbnb.lottie.utils.MiscUtils.addPoints;
 
 @SuppressWarnings({"EmptyCatchBlock"})
-public class LottieAnimatableShapeValue extends BaseLottieAnimatableValue<LottieShapeData, Path> {
+public class AnimatableShapeValue extends BaseAnimatableValue<LottieShapeData, Path> {
     private final boolean closed;
 
-    public LottieAnimatableShapeValue(JSONObject json, int frameRate, long compDuration, boolean closed) {
+    public AnimatableShapeValue(JSONObject json, int frameRate, long compDuration, boolean closed) {
         super(null, frameRate, compDuration, true);
         this.closed = closed;
         init(json);

File: lottie/src/main/java/com/airbnb/lottie/animation/AnimatableValue.java
Patch:
@@ -3,7 +3,8 @@
 import com.airbnb.lottie.utils.LottieKeyframeAnimation;
 import com.airbnb.lottie.utils.Observable;
 
-public interface LottieAnimatableValue<T> {
+@SuppressWarnings("WeakerAccess")
+public interface AnimatableValue<T> {
 
     LottieKeyframeAnimation animationForKeyPath();
     boolean hasAnimation();

File: lottie/src/main/java/com/airbnb/lottie/animation/BaseAnimatableValue.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-abstract class BaseLottieAnimatableValue<V, O> implements LottieAnimatableValue<O> {
+abstract class BaseAnimatableValue<V, O> implements AnimatableValue<O> {
 
     final Observable<O> observable = new Observable<>();
     final List<V> keyValues = new ArrayList<>();
@@ -36,7 +36,7 @@ abstract class BaseLottieAnimatableValue<V, O> implements LottieAnimatableValue<
 
     V initialValue;
 
-    BaseLottieAnimatableValue(@Nullable JSONObject json, int frameRate, long compDuration, boolean isDp) {
+    BaseAnimatableValue(@Nullable JSONObject json, int frameRate, long compDuration, boolean isDp) {
         this.frameRate = frameRate;
         this.compDuration = compDuration;
         this.isDp = isDp;

File: lottie/src/main/java/com/airbnb/lottie/layers/LottieAnimatableLayer.java
Patch:
@@ -11,7 +11,7 @@
 import android.support.annotation.FloatRange;
 import android.support.annotation.NonNull;
 
-import com.airbnb.lottie.animation.LottieAnimationGroup;
+import com.airbnb.lottie.animation.AnimationGroup;
 import com.airbnb.lottie.utils.LottieTransform3D;
 import com.airbnb.lottie.utils.Observable;
 
@@ -40,7 +40,7 @@ public void onChanged() {
     final long compDuration;
 
     private final Paint solidBackgroundPaint = new Paint();
-    private final List<LottieAnimationGroup> animations = new ArrayList<>();
+    private final List<AnimationGroup> animations = new ArrayList<>();
     @FloatRange(from = 0f, to = 1f) private float progress;
 
     LottieAnimatableLayer(long compDuration, Drawable.Callback callback) {
@@ -57,7 +57,7 @@ void setBackgroundColor(@ColorInt int color) {
         invalidateSelf();
     }
 
-    void addAnimation(LottieAnimationGroup animation) {
+    void addAnimation(AnimationGroup animation) {
         animations.add(animation);
     }
 

File: lottie/src/main/java/com/airbnb/lottie/layers/LottieLayerView.java
Patch:
@@ -16,7 +16,7 @@
 import android.support.annotation.Nullable;
 import android.view.animation.Interpolator;
 
-import com.airbnb.lottie.animation.LottieAnimationGroup;
+import com.airbnb.lottie.animation.AnimationGroup;
 import com.airbnb.lottie.model.LottieComposition;
 import com.airbnb.lottie.model.LottieShapeFill;
 import com.airbnb.lottie.model.LottieShapeGroup;
@@ -164,7 +164,7 @@ public void onValueChanged(Float progress) {
                 }
             });
             setVisible(inOutAnimation.getValue() == 1f, false);
-            addAnimation(LottieAnimationGroup.forKeyframeAnimations(inOutAnimation));
+            addAnimation(AnimationGroup.forKeyframeAnimations(inOutAnimation));
         } else {
             setVisible(true, false);
         }

File: lotte/src/main/java/com/airbnb/lotte/L.java
Patch:
@@ -1,5 +1,5 @@
 package com.airbnb.lotte;
 
 public class L {
-    public static boolean DBG = true;
+    public static boolean DBG = false;
 }

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteAnimatableLayer.java
Patch:
@@ -72,7 +72,7 @@ public void draw(@NonNull Canvas canvas) {
             }
         }
         if (transform != null && transform.getValue() != null) {
-            if (transform.getValue().getScaleX() != 0f || transform.getValue().getScaleY() != 0f) {
+            if (transform.getValue().getScaleX() != 1f || transform.getValue().getScaleY() != 1f) {
                 canvas.scale(transform.getValue().getScaleX(), transform.getValue().getScaleY());
             }
         }

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java
Patch:
@@ -259,7 +259,7 @@ private void applyTransformForLayer(Canvas canvas, LotteLayer layer) {
         }
 
         LotteTransform3D scale = layer.getScale().getObservable().getValue();
-        if (scale.getScaleX() != 0f || scale.getScaleY() != 0f) {
+        if (scale.getScaleX() != 1f || scale.getScaleY() != 1f) {
             canvas.scale(scale.getScaleX(), scale.getScaleY());
         }
 

File: lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java
Patch:
@@ -171,7 +171,7 @@ private void buildSubviewsForComposition() {
         Collections.reverse(reversedLayers);
 
         Rect bounds = composition.getBounds();
-        Bitmap mainBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;
+        Bitmap mainBitmap = (composition.hasMasks() || composition.hasMattes()) ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;
         Bitmap maskBitmap = composition.hasMasks() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ALPHA_8) : null;
         Bitmap matteBitmap = composition.hasMattes() ? Bitmap.createBitmap(bounds.width(), bounds.height(), Bitmap.Config.ARGB_8888) : null;
 

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java
Patch:
@@ -208,7 +208,7 @@ public void draw(@NonNull Canvas mainCanvas) {
         if (!isVisible()) {
             return;
         }
-        if (contentCanvas == null || contentBitmap != null) {
+        if (contentCanvas == null || contentBitmap == null) {
             super.draw(mainCanvas);
             return;
         }

File: lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java
Patch:
@@ -41,8 +41,8 @@ public void play() {
         animator.start();
     }
 
-    public void pause() {
-        animator.start();
+    public void cancelAnimation() {
+        animator.cancel();
     }
 
     public void addAnimatorUpdateListener(ValueAnimator.AnimatorUpdateListener updateListener) {

File: lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java
Patch:
@@ -5,7 +5,6 @@
 import android.content.Context;
 import android.content.res.TypedArray;
 import android.graphics.Bitmap;
-import android.graphics.Canvas;
 import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.os.AsyncTask;
@@ -58,7 +57,6 @@ private void init(@Nullable AttributeSet attrs) {
         }
         ta.recycle();
         setLayerType(LAYER_TYPE_SOFTWARE, null);
-        setImageDrawable(rootAnimatableLayer);
     }
 
     @Override
@@ -164,6 +162,7 @@ public void setComposition(LotteComposition composition) {
         rootAnimatableLayer.setBounds(0, 0, composition.getBounds().width(), composition.getBounds().height());
         buildSubviewsForComposition();
         requestLayout();
+        setImageDrawable(rootAnimatableLayer);
     }
 
     private void buildSubviewsForComposition() {

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java
Patch:
@@ -258,6 +258,9 @@ private void onDashPatternChanged() {
         float[] values = new float[lineDashPattern.size()];
         for (int i = 0; i < lineDashPattern.size(); i++) {
             values[i] = (float) lineDashPattern.get(i).getObservable().getValue();
+            if (values[i] == 0) {
+                values[i] = 0.01f;
+            }
         }
         paint.setPathEffect(new DashPathEffect(values, (float) lineDashPatternOffset.getObservable().getValue()));
         invalidateSelf();

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteLayer.java
Patch:
@@ -180,7 +180,7 @@ public static LotteLayer fromJson(JSONObject json, LotteComposition composition)
 
         layer.hasInAnimation = layer.inFrame > composition.getStartFrame();
         layer.hasOutAnimation = layer.outFrame < composition.getEndFrame();
-        layer.hasInOutAnimation = layer.hasInOutAnimation || layer.hasOutAnimation;
+        layer.hasInOutAnimation = layer.hasInAnimation || layer.hasOutAnimation;
 
         if (layer.hasInOutAnimation) {
             List<Float> keys = new ArrayList<>();

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java
Patch:
@@ -289,7 +289,9 @@ public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, Lot
             this.lineDashPattern = lineDashPattern;
             this.lineDashPatternOffset = offset;
             lineDashPattern.get(0).getObservable().addChangeListener(dashPatternChangedListener);
-            lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);
+            if (!lineDashPattern.get(1).equals(lineDashPattern.get(1))) {
+                lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);
+            }
             offset.getObservable().addChangeListener(dashPatternChangedListener);
             onDashPatternChanged();
         }

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java
Patch:
@@ -275,7 +275,9 @@ public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, Lot
             this.lineDashPattern = lineDashPattern;
             this.lineDashPatternOffset = offset;
             lineDashPattern.get(0).getObservable().addChangeListener(dashPatternChangedListener);
-            lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);
+            if (!lineDashPattern.get(1).equals(lineDashPattern.get(1))) {
+                lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);
+            }
             offset.getObservable().addChangeListener(dashPatternChangedListener);
             onDashPatternChanged();
         }

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java
Patch:
@@ -247,7 +247,9 @@ public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, Lot
         this.lineDashPattern = lineDashPattern;
         this.lineDashPatternOffset = offset;
         lineDashPattern.get(0).getObservable().addChangeListener(dashPatternChangedListener);
-        lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);
+        if (!lineDashPattern.get(1).equals(lineDashPattern.get(1))) {
+            lineDashPattern.get(1).getObservable().addChangeListener(dashPatternChangedListener);
+        }
         offset.getObservable().addChangeListener(dashPatternChangedListener);
         onDashPatternChanged();
     }

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java
Patch:
@@ -278,6 +278,7 @@ private void onLineWidthChanged() {
         public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, LotteAnimatableNumberValue offset) {
             if (this.lineDashPattern != null) {
                 this.lineDashPattern.get(0).getObservable().removeChangeListemer(dashPatternChangedListener);
+                this.lineDashPattern.get(1).getObservable().removeChangeListemer(dashPatternChangedListener);
             }
             if (this.lineDashPatternOffset != null) {
                 this.lineDashPatternOffset.getObservable().removeChangeListemer(dashPatternChangedListener);

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java
Patch:
@@ -264,6 +264,7 @@ private void onLineWidthChanged() {
         public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, LotteAnimatableNumberValue offset) {
             if (this.lineDashPattern != null) {
                 this.lineDashPattern.get(0).getObservable().removeChangeListemer(dashPatternChangedListener);
+                this.lineDashPattern.get(1).getObservable().removeChangeListemer(dashPatternChangedListener);
             }
             if (this.lineDashPatternOffset != null) {
                 this.lineDashPatternOffset.getObservable().removeChangeListemer(dashPatternChangedListener);

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java
Patch:
@@ -236,6 +236,7 @@ private void onLineWidthChanged() {
     public void setDashPattern(List<LotteAnimatableNumberValue> lineDashPattern, LotteAnimatableNumberValue offset) {
         if (this.lineDashPattern != null) {
             this.lineDashPattern.get(0).getObservable().removeChangeListemer(dashPatternChangedListener);
+            this.lineDashPattern.get(1).getObservable().removeChangeListemer(dashPatternChangedListener);
         }
         if (this.lineDashPatternOffset != null) {
             this.lineDashPatternOffset.getObservable().removeChangeListemer(dashPatternChangedListener);

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java
Patch:
@@ -101,7 +101,7 @@ public long getDuration() {
 
     @FloatRange(from=0f, to=1f)
     protected float getStartDelayProgress() {
-        return (float) startDelay / (float) (startDelay + duration);
+        return (float) startDelay / (float) (animator.getDuration());
     }
 
     @FloatRange(from=0f, to=1f)

File: lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java
Patch:
@@ -100,7 +100,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {
             for (int i = 0; i < keyframes.length(); i++) {
                 JSONObject keyframe = keyframes.getJSONObject(i);
                 long frame = keyframe.getLong("t");
-                float timePercentage = (float) (frame - startFrame) / (float) frameRate;
+                float timePercentage = (float) (frame - startFrame) / (float) durationFrames;
 
                 if (outPoint != null) {
                     PointF vertex = outPoint;

File: lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableColorValue.java
Patch:
@@ -88,7 +88,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {
             for (int i = 0; i < keyframes.length(); i++) {
                 JSONObject keyframe = keyframes.getJSONObject(i);
                 long frame = keyframe.getLong("t");
-                float timePercentage = (frame - startFrame) / durationFrames;
+                float timePercentage = (float) (frame - startFrame) / (float) durationFrames;
 
                 if (outColor != null) {
                     colorKeyframes.add(outColor);

File: lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java
Patch:
@@ -90,7 +90,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {
             for (int i = 0; i < keyframes.length(); i++) {
                 JSONObject keyframe = keyframes.getJSONObject(i);
                 long frame = keyframe.getLong("t");
-                float timePercentage = (frame - startFrame) / durationFrames;
+                float timePercentage = (float) (frame - startFrame) / (float) durationFrames;
 
                 if (outValue != null) {
                     valueKeyframes.add(outValue);

File: lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatablePointValue.java
Patch:
@@ -100,7 +100,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {
             for (int i = 0; i < keyframes.length(); i++) {
                 JSONObject keyframe = keyframes.getJSONObject(i);
                 long frame = keyframe.getLong("t");
-                float timePercentage = (frame - startFrame) / durationFrames;
+                float timePercentage = (float) (frame - startFrame) / (float) frameRate;
 
                 if (outPoint != null) {
                     PointF vertex = outPoint;

File: lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableScaleValue.java
Patch:
@@ -80,7 +80,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {
             for (int i = 0; i < keyframes.length(); i++) {
                 JSONObject keyframe = keyframes.getJSONObject(i);
                 int frame = keyframe.getInt("t");
-                float timePercentage = (frame - startFrame) / (float) durationFrames;
+                float timePercentage = (float) (frame - startFrame) / (float) durationFrames;
 
                 if (outValue != null) {
                     scaleKeyframes.add(outValue);

File: lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java
Patch:
@@ -81,7 +81,7 @@ private void buildAnimationForKeyFrames(JSONArray keyframes, boolean closed) {
             for (int i = 0; i < keyframes.length(); i++) {
                 JSONObject keyframe = keyframes.getJSONObject(i);
                 int frame = keyframe.getInt("t");
-                float timePercentage = (frame - startFrame) / (float) durationFrames;
+                float timePercentage = (float) (frame - startFrame) / (float) durationFrames;
 
                 if (outShape != null) {
                     shapeKeyframes.add(outShape);

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteColorKeyframeAnimation.java
Patch:
@@ -23,7 +23,7 @@ public LotteColorKeyframeAnimation(@AnimatableProperty int property, long durati
 
     @Override
     public Integer getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress) {
-        if (progress < getStartDelayProgress()) {
+        if (progress <= 0f) {
             return values.get(0);
         } else if (progress >= 1f) {
             return values.get(values.size() - 1);

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteNumberKeyframeAnimation.java
Patch:
@@ -24,7 +24,7 @@ public LotteNumberKeyframeAnimation(@AnimatableProperty int property, long durat
 
     @Override
     public T getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress) {
-        if (progress < getStartDelayProgress()) {
+        if (progress <= 0f) {
             return values.get(0);
         } else if (progress >= 1f) {
             return values.get(values.size() - 1);

File: lotte/src/main/java/com/airbnb/lotte/utils/LottePathKeyframeAnimation.java
Patch:
@@ -22,7 +22,7 @@ public LottePathKeyframeAnimation(@AnimatableProperty int property, long duratio
 
     @Override
     public PointF getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress) {
-        if (progress <= getStartDelayProgress()) {
+        if (progress <= 0f) {
             pathMeasure.getPosTan(0, pos, null);
             point.set(pos[0], pos[1]);
             return point;

File: lotte/src/main/java/com/airbnb/lotte/utils/LottePointKeyframeAnimation.java
Patch:
@@ -18,7 +18,7 @@ public LottePointKeyframeAnimation(@AnimatableProperty int property, long durati
 
     @Override
     public PointF getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress) {
-        if (progress < getStartDelayProgress()) {
+        if (progress <= 0f) {
             return points.get(0);
         } else if (progress > 1f) {
             return points.get(points.size() - 1);

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteShapeKeyframeAnimation.java
Patch:
@@ -20,7 +20,7 @@ public LotteShapeKeyframeAnimation(@AnimatableProperty int property, long durati
 
     @Override
     public Path getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress) {
-        if (progress <= getStartDelayProgress()) {
+        if (progress <= 0f) {
             MiscUtils.getPathFromData(shapeData.get(0), tempPath);
             return tempPath;
         } else if (progress >= 1f) {

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteTransformKeyframeAnimation.java
Patch:
@@ -20,7 +20,7 @@ public LotteTransformKeyframeAnimation(@AnimatableProperty int property, long du
 
     @Override
     public LotteTransform3D getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress) {
-        if (progress < getStartDelayProgress()) {
+        if (progress <= 0f) {
             return transforms.get(0);
         } else if (progress >= 1f) {
             return transforms.get(transforms.size() - 1);

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java
Patch:
@@ -47,7 +47,7 @@ public void onAnimationUpdate(ValueAnimator animation) {
 
     public LotteKeyframeAnimation setStartDelay(long startDelay) {
         this.startDelay = startDelay;
-        animator.setStartDelay(startDelay);
+        animator.setDuration(duration + startDelay);
         return this;
     }
 

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayer.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Mimics CAShapeLayer
  */
-public class LotteShapeLayer extends Drawable {
+public class LotteShapeLayer extends LotteAnimatableLayer {
 
     private final Observable.OnChangedListener changedListener = new Observable.OnChangedListener() {
         @Override
@@ -80,7 +80,7 @@ public void onChanged() {
     private Observable<Number> transformAlpha;
 
     public LotteShapeLayer(Drawable.Callback callback) {
-        setCallback(callback);
+        super(0, callback);
         paint.setStyle(Paint.Style.FILL);
         paint.setAntiAlias(true);
         scale.getValue().scale(1f, 1f);

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java
Patch:
@@ -21,8 +21,6 @@
 
 import java.util.List;
 
-import static android.R.attr.width;
-
 public class LotteEllipseShapeLayer extends LotteAnimatableLayer {
 
     private final LotteShapeCircle circleShape;
@@ -215,7 +213,7 @@ public void setLineWidth(Observable<Number> lineWidth) {
         }
 
         private void onLineWidthChanged() {
-            paint.setStrokeWidth(width);
+            paint.setStrokeWidth((float) lineWidth.getValue());
         }
 
         public void setDashPattern(List<Float> lineDashPattern, float offset) {

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java
Patch:
@@ -88,7 +88,6 @@ private void setupForModel(Drawable.Callback callback) {
                 this.parentId = parentId;
             }
             LotteLayer parentModel = composition.layerModelForId(parentId);
-            // TODO: see if we can avoid this every time.
             LotteParentLayer parentLayer = new LotteParentLayer(parentModel, composition, getCallback());
             parentLayer.setCallback(callback);
             parentLayer.addLayer(currentChild);

File: lotte/src/test/java/com/airbnb/lotte/LotteKeyframeAnimationTest.java
Patch:
@@ -1,7 +1,8 @@
 package com.airbnb.lotte;
 
 
-import com.airbnb.lotte.utils.LotteKeyframeAnimation;
+import com.airbnb.lotte.animation.LotteAnimatableProperty;
+import com.airbnb.lotte.utils.LotteNumberKeyframeAnimation;
 
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -22,7 +23,7 @@ public void simpleAnimation() throws Exception {
     List<Float> keyTimes = Arrays.asList(0f, 0.5f, 1f);
     List<Float> values = Arrays.asList(0f, 1f, 10f);
 
-    LotteKeyframeAnimation animation = new LotteKeyframeAnimation("alpha", 1000, keyTimes, values);
+    LotteNumberKeyframeAnimation<Float> animation = new LotteNumberKeyframeAnimation<>(LotteAnimatableProperty.OPACITY, 1000, keyTimes, Float.class, values);
 
     assertEquals(animation.getValueForProgress(0f), 0f);
     assertEquals(animation.getValueForProgress(0.25f), 0.5f);

File: lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableShapeValue.java
Patch:
@@ -130,14 +130,14 @@ private void buildAnimationForKeyFrames(JSONArray keyframes, boolean closed) {
 
                 keyTimes.add(timePercentage);
 
-                if (keyframe.has("h") && keyframe.getBoolean("h")) {
+                if (keyframe.has("h") && keyframe.getInt("h") == 1) {
                     outShape = startShape;
                     addStartValue = true;
                     addTimePadding = true;
                 }
             }
         } catch (JSONException e) {
-            throw new IllegalArgumentException("Unable to parse shape animation " + keyframes, e);
+            throw new IllegalArgumentException("Unable to parse shape animation", e);
         }
 
     }

File: lotte/src/main/java/com/airbnb/lotte/animation/LotteAnimatableNumberValue.java
Patch:
@@ -156,7 +156,7 @@ private void buildAnimationForKeyframes(JSONArray keyframes) {
     private Float numberValueFromObject(Object valueObject) throws JSONException {
         if (valueObject instanceof Float) {
             return (Float) valueObject;
-        } else if (valueObject instanceof JSONArray && ((JSONArray) valueObject).get(0) instanceof Float) {
+        } else if (valueObject instanceof JSONArray && ((JSONArray) valueObject).get(0) instanceof Double) {
             return new Float(((JSONArray) valueObject).getDouble(0));
         } else if (valueObject instanceof JSONArray && ((JSONArray) valueObject).get(0) instanceof Integer) {
             return new Float(((JSONArray) valueObject).getInt(0));

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteNumberKeyframeAnimation.java
Patch:
@@ -17,7 +17,7 @@ public LotteNumberKeyframeAnimation(@AnimatableProperty int property, long durat
         super(property, duration, keyTimes);
         this.klass = klass;
         if (keyTimes.size() != values.size()) {
-            throw new IllegalArgumentException("Key times and values must be the same length " + keyTimes.size() + " vs " + values.size());
+            throw new IllegalArgumentException("Key times and values must be the same length " + keyTimes + " vs " + values);
         }
         this.values = values;
     }

File: lotte/src/main/java/com/airbnb/lotte/LotteAnimationView.java
Patch:
@@ -61,6 +61,7 @@ private void init(@Nullable AttributeSet attrs) {
             setAnimation(fileName);
         }
         ta.recycle();
+        setLayerType(LAYER_TYPE_SOFTWARE, null);
     }
 
     @Override

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteEllipseShapeLayer.java
Patch:
@@ -51,7 +51,7 @@ public LotteEllipseShapeLayer(LotteShapeCircle circleShape, LotteShapeFill fill,
         anchorPoint = transform.getAnchor().getObservable();
         setAlpha((int) transform.getOpacity().getInitialValue());
         setPosition(transform.getPosition().getObservable());
-        this.transform = transform.getScale().getObservable();
+        setTransform(transform.getScale().getObservable());
         sublayerTransform = new Observable<>(new LotteTransform3D());
         sublayerTransform.getValue().rotateZ(transform.getRotation().getInitialValue());
 

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java
Patch:
@@ -44,9 +44,9 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,
         if (shapeTransform != null) {
             setBounds(shapeTransform.getCompBounds());
             anchorPoint = shapeTransform.getAnchor().getObservable();
-            position = shapeTransform.getPosition().getObservable();
+            setPosition(shapeTransform.getPosition().getObservable());
             setAlpha((int) (shapeTransform.getOpacity().getInitialValue()));
-            transform = shapeTransform.getScale().getObservable();
+            setTransform(shapeTransform.getScale().getObservable());
             sublayerTransform = new Observable<>(new LotteTransform3D());
             sublayerTransform.getValue().rotateZ(shapeTransform.getRotation().getInitialValue());
         }

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java
Patch:
@@ -97,7 +97,7 @@ private void setupForModel(Drawable.Callback callback) {
 
         childContainerLayer.setPosition(layerModel.getPosition().getObservable());
         childContainerLayer.anchorPoint = layerModel.getAnchor().getObservable();
-        childContainerLayer.transform = layerModel.getScale().getObservable();
+        childContainerLayer.setTransform(layerModel.getScale().getObservable());
         childContainerLayer.sublayerTransform = new Observable<>(new LotteTransform3D());
         childContainerLayer.sublayerTransform.getValue().rotateZ(layerModel.getRotation().getInitialValue());
         mainCanvasPaint.setAlpha((int) layerModel.getOpacity().getInitialValue());

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java
Patch:
@@ -27,9 +27,9 @@ public LotteParentLayer(LotteLayer parent, LotteComposition composition, Drawabl
     }
 
     private void setupLayerFromModel() {
-        position = parentModel.getPosition().getObservable();
+        setPosition(parentModel.getPosition().getObservable());
         anchorPoint = parentModel.getAnchor().getObservable();
-        transform = parentModel.getScale().getObservable();
+        setTransform(parentModel.getScale().getObservable());
         sublayerTransform = new Observable<>(new LotteTransform3D());
         sublayerTransform.getValue().rotateZ(parentModel.getRotation().getInitialValue());
         buildAnimations();

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java
Patch:
@@ -50,7 +50,7 @@ public LotteRectShapeLayer(LotteShapeRectangle rectShape, @Nullable LotteShapeFi
         anchorPoint = transform.getAnchor().getObservable();
         setAlpha((int) (transform.getOpacity().getInitialValue()));
         setPosition(transform.getPosition().getObservable());
-        this.transform = transform.getScale().getObservable();
+        setTransform(transform.getScale().getObservable());
         sublayerTransform = new Observable<>(new LotteTransform3D());
         sublayerTransform.getValue().rotateZ(transform.getRotation().getInitialValue());
 

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteShapeLayerView.java
Patch:
@@ -50,12 +50,12 @@ public LotteShapeLayerView(LotteShapePath shape, @Nullable LotteShapeFill fill,
 
         setBounds(transformModel.getCompBounds());
         anchorPoint = transformModel.getAnchor().getObservable();
-        position = transformModel.getPosition().getObservable();
+        setPosition(transformModel.getPosition().getObservable());
         sublayerTransform = new Observable<>(new LotteTransform3D());
         sublayerTransform.getValue().rotateZ(transformModel.getRotation().getInitialValue());
 
         Observable<LotteTransform3D> initialScale = transformModel.getScale().getObservable();
-        this.transform = initialScale;
+        setTransform(transformModel.getScale().getObservable());
         if (fill != null) {
             fillLayer = new LotteShapeLayer();
             fillLayer.setPath(path.getShapePath().getInitialShape());

File: lotte/src/main/java/com/airbnb/lotte/layers/RootLotteAnimatableLayer.java
Patch:
@@ -14,7 +14,7 @@ public RootLotteAnimatableLayer(Drawable.Callback callback) {
 
     @Override
     public void draw(@NonNull Canvas canvas) {
-        transform = new Observable<>(new LotteTransform3D());
+        setTransform(new Observable<>(new LotteTransform3D()));
         super.draw(canvas);
         canvas.clipRect(getBounds());
     }

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteColorKeyframeAnimation.java
Patch:
@@ -39,12 +39,12 @@ public Integer getValueForProgress(@FloatRange(from = 0f, to = 1f) float progres
         if (!isDiscrete) {
             percentageIntoFrame = (progress - startKeytime) / (endKeytime - startKeytime);
             if (interpolators != null) {
-                percentageIntoFrame = interpolators.get(keyframeIndex - 1).getInterpolation(percentageIntoFrame);
+                percentageIntoFrame = interpolators.get(keyframeIndex).getInterpolation(percentageIntoFrame);
             }
         }
 
-        int startColor = values.get(keyframeIndex - 1);
-        int endColor = values.get(keyframeIndex);
+        int startColor = values.get(keyframeIndex);
+        int endColor = values.get(keyframeIndex + 1);
 
         Color.colorToHSV(startColor, hsv1);
         Color.colorToHSV(endColor, hsv2);

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteKeyframeAnimation.java
Patch:
@@ -56,7 +56,7 @@ public void setIsDiscrete() {
     }
 
     public LotteKeyframeAnimation setInterpolators(@Nullable List<Interpolator> interpolators) {
-        if (interpolators != null && interpolators.size() != keyTimes.size()) {
+        if (interpolators != null && interpolators.size() != (keyTimes.size() - 1)) {
             throw new IllegalArgumentException("Interpolators and values must be the same length " + interpolators.size() + " vs " + keyTimes.size());
         }
         this.interpolators = interpolators;

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteNumberKeyframeAnimation.java
Patch:
@@ -39,12 +39,12 @@ public T getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress) {
         if (!isDiscrete) {
             percentageIntoFrame = (progress - startKeytime) / (endKeytime - startKeytime);
             if (interpolators != null) {
-                percentageIntoFrame = interpolators.get(keyframeIndex - 1).getInterpolation(percentageIntoFrame);
+                percentageIntoFrame = interpolators.get(keyframeIndex).getInterpolation(percentageIntoFrame);
             }
         }
 
-        Number startValue = values.get(keyframeIndex - 1);
-        Number endValue = values.get(keyframeIndex);
+        Number startValue = values.get(keyframeIndex);
+        Number endValue = values.get(keyframeIndex + 1);
 
         return klass.cast(lerp(startValue.floatValue(), endValue.floatValue(), percentageIntoFrame));
     }

File: lotte/src/main/java/com/airbnb/lotte/utils/LottePathKeyframeAnimation.java
Patch:
@@ -42,7 +42,7 @@ public PointF getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress
         if (!isDiscrete) {
             percentageIntoFrame = (progress - startKeytime) / (endKeytime - startKeytime);
             if (interpolators != null) {
-                percentageIntoFrame = interpolators.get(keyframeIndex - 1).getInterpolation(percentageIntoFrame);
+                percentageIntoFrame = interpolators.get(keyframeIndex).getInterpolation(percentageIntoFrame);
             }
         }
 

File: lotte/src/main/java/com/airbnb/lotte/utils/LottePointKeyframeAnimation.java
Patch:
@@ -33,12 +33,12 @@ public PointF getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress
         if (!isDiscrete) {
             percentageIntoFrame = (progress - startKeytime) / (endKeytime - startKeytime);
             if (interpolators != null) {
-                percentageIntoFrame = interpolators.get(keyframeIndex - 1).getInterpolation(percentageIntoFrame);
+                percentageIntoFrame = interpolators.get(keyframeIndex).getInterpolation(percentageIntoFrame);
             }
         }
 
-        PointF startPoint = points.get(keyframeIndex - 1);
-        PointF endPoint = points.get(keyframeIndex);
+        PointF startPoint = points.get(keyframeIndex);
+        PointF endPoint = points.get(keyframeIndex + 1);
 
         point.set(startPoint.x + percentageIntoFrame * (endPoint.x - startPoint.x),
                 startPoint.y + percentageIntoFrame * (endPoint.y - startPoint.y));

File: lotte/src/main/java/com/airbnb/lotte/utils/LotteShapeKeyframeAnimation.java
Patch:
@@ -37,12 +37,12 @@ public Path getValueForProgress(@FloatRange(from = 0f, to = 1f) float progress)
         if (!isDiscrete) {
             percentageIntoFrame = (progress - startKeytime) / (endKeytime - startKeytime);
             if (interpolators != null) {
-                percentageIntoFrame = interpolators.get(keyframeIndex - 1).getInterpolation(percentageIntoFrame);
+                percentageIntoFrame = interpolators.get(keyframeIndex).getInterpolation(percentageIntoFrame);
             }
         }
 
-        LotteShapeData startShapeData = shapeData.get(keyframeIndex - 1);
-        LotteShapeData endShapeData = shapeData.get(keyframeIndex);
+        LotteShapeData startShapeData = shapeData.get(keyframeIndex);
+        LotteShapeData endShapeData = shapeData.get(keyframeIndex + 1);
 
         tempShapeData.interpolateBetween(startShapeData, endShapeData, percentageIntoFrame);
         MiscUtils.getPathFromData(tempShapeData, tempPath);

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java
Patch:
@@ -44,7 +44,7 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,
         if (shapeTransform != null) {
             setBounds(shapeTransform.getCompBounds());
             anchorPoint = shapeTransform.getAnchor().getObservable();
-            position.setValue(shapeTransform.getPosition().getInitialPoint());
+            position = shapeTransform.getPosition().getObservable();
             setAlpha((int) (shapeTransform.getOpacity().getInitialValue()));
             transform = shapeTransform.getScale().getObservable();
             sublayerTransform = new Observable<>(new LotteTransform3D());

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteRectShapeLayer.java
Patch:
@@ -134,11 +134,12 @@ public void setDashPattern(List<Float> lineDashPattern) {
 
         public void setLineCapType(LotteShapeStroke.LineCapType lineCapType) {
             switch (lineCapType) {
+                case Round:
+                    paint.setStrokeCap(Paint.Cap.ROUND);
+                    break;
                 case Butt:
                     paint.setStrokeCap(Paint.Cap.BUTT);
-                case Round:
                 default:
-                    paint.setStrokeCap(Paint.Cap.ROUND);
             }
         }
 

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteGroupLayerView.java
Patch:
@@ -1,6 +1,5 @@
 package com.airbnb.lotte.layers;
 
-import android.graphics.Camera;
 import android.support.annotation.Nullable;
 
 import com.airbnb.lotte.model.LotteShapeCircle;
@@ -12,6 +11,7 @@
 import com.airbnb.lotte.model.LotteShapeTransform;
 import com.airbnb.lotte.model.LotteShapeTrimPath;
 import com.airbnb.lotte.utils.LotteAnimationGroup;
+import com.airbnb.lotte.utils.LotteTransform3D;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -43,7 +43,7 @@ private void setupShapeGroupWithFill(LotteShapeFill previousFill,
             position = shapeTransform.getPosition().getInitialPoint();
             setAlpha((int) (shapeTransform.getOpacity().getInitialValue() * 255));
             transform = shapeTransform.getScale().getInitialScale();
-            sublayerTransform = new Camera();
+            sublayerTransform = new LotteTransform3D();
             sublayerTransform.rotateZ((float) Math.toDegrees(shapeTransform.getRotation().getInitialValue()));
         }
 

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteLayerView.java
Patch:
@@ -1,6 +1,5 @@
 package com.airbnb.lotte.layers;
 
-import android.graphics.Camera;
 import android.graphics.PointF;
 
 import com.airbnb.lotte.model.LotteComposition;
@@ -11,6 +10,7 @@
 import com.airbnb.lotte.model.LotteShapeTransform;
 import com.airbnb.lotte.model.LotteShapeTrimPath;
 import com.airbnb.lotte.utils.LotteAnimationGroup;
+import com.airbnb.lotte.utils.LotteTransform3D;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -64,7 +64,7 @@ private void setupForModel() {
         childContainerLayer.position = layerModel.getPosition().getInitialPoint();
         childContainerLayer.anchorPoint = layerModel.getAnchor().getInitialPoint();
         childContainerLayer.transform = layerModel.getScale().getInitialScale();
-        childContainerLayer.sublayerTransform = new Camera();
+        childContainerLayer.sublayerTransform = new LotteTransform3D();
         childContainerLayer.sublayerTransform.rotateZ(layerModel.getRotation().getInitialValue());
         setVisible(layerModel.isHasInAnimation(), false);
 

File: lotte/src/main/java/com/airbnb/lotte/layers/LotteParentLayer.java
Patch:
@@ -1,9 +1,8 @@
 package com.airbnb.lotte.layers;
 
-import android.graphics.Camera;
-
 import com.airbnb.lotte.model.LotteComposition;
 import com.airbnb.lotte.utils.LotteAnimationGroup;
+import com.airbnb.lotte.utils.LotteTransform3D;
 
 public class LotteParentLayer extends LotteAnimatableLayer {
 
@@ -20,7 +19,7 @@ private void setupLayerFromModel() {
         position = parent.getPosition().getInitialPoint();
         anchorPoint = parent.getAnchor().getInitialPoint();
         transform = parent.getScale().getInitialScale();
-        sublayerTransform = new Camera();
+        sublayerTransform = new LotteTransform3D();
         sublayerTransform.rotateZ(parent.getRotation().getInitialValue());
         buildAnimations();
     }

File: lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatablePointValue.java
Patch:
@@ -14,6 +14,7 @@
 import java.util.List;
 
 public class LotteAnimatablePointValue implements LotteAnimatableValue {
+    private static final String TAG = LotteAnimatablePointValue.class.getSimpleName();
 
     private final List<Point> pointKeyframes = new ArrayList<>();
     private final List<Float> keyTimes = new ArrayList<>();

File: lotte/src/main/java/com/airbnb/lotte/model/LotteAnimatableShapeValue.java
Patch:
@@ -13,6 +13,7 @@
 
 @SuppressWarnings({"EmptyCatchBlock", "unused", "FieldCanBeLocal", "WeakerAccess"})
 public class LotteAnimatableShapeValue implements LotteAnimatableValue {
+    private static final String TAG = LotteAnimatableShapeValue.class.getSimpleName();
 
     private Path initialShape;
     private List<Integer> shapeKeyframes;

