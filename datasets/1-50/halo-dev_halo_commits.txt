File: api/src/main/java/run/halo/app/core/extension/content/Constant.java
Patch:
@@ -10,4 +10,6 @@ public enum Constant {
     public static final String PERMALINK_PATTERN_ANNO = "content.halo.run/permalink-pattern";
 
     public static final String CHECKSUM_CONFIG_ANNO = "checksum/config";
+
+    public static final String CONTENT_CHECKSUM_ANNO = "checksum/content";
 }

File: application/src/test/java/run/halo/app/theme/service/ThemeServiceImplTest.java
Patch:
@@ -368,6 +368,8 @@ void reloadThemeWhenSettingNameNotSetBefore() throws IOException {
 
         when(client.list(eq(AnnotationSetting.class), any(), eq(null))).thenReturn(Flux.empty());
 
+        when(client.fetch(eq(Setting.GVK), eq("fake-setting")))
+            .thenReturn(Mono.empty());
         themeService.reloadTheme("fake-theme")
             .as(StepVerifier::create)
             .consumeNextWith(themeUpdated -> {

File: application/src/test/java/run/halo/app/theme/finders/impl/CommentPublicQueryServiceIntegrationTest.java
Patch:
@@ -389,7 +389,8 @@ String fakeReplyJson() {
                                 "name":"",
                                 "displayName":"fake-display-name",
                                 "annotations":{
-                                    "email-hash": "4249f4df72b475e7894fabed1c5888cf"
+                                    "email-hash": \
+                    "79783106d88279c6c8f94f1f4dec22bdb9f90a8d14c9d6c6628a11430e236cbf"
                                 }
                             },
                             "creationTime": "2024-03-11T06:23:42.923294424Z",

File: application/src/main/java/run/halo/app/core/endpoint/console/SystemConfigEndpoint.java
Patch:
@@ -76,7 +76,7 @@ public RouterFunction<ServerResponse> endpoint() {
     private Mono<ServerResponse> updateConfigByGroup(ServerRequest request) {
         final var group = request.pathVariable("group");
         return request.bodyToMono(ObjectNode.class)
-            .flatMap(objectNode -> configurableEnvironmentFetcher.getConfigMap()
+            .flatMap(objectNode -> configurableEnvironmentFetcher.loadConfigMap()
                 .flatMap(configMap -> {
                     var data = configMap.getData();
                     data.put(group, JsonUtils.objectToJson(objectNode));

File: application/src/main/java/run/halo/app/core/reconciler/SystemSettingReconciler.java
Patch:
@@ -295,6 +295,6 @@ public boolean isSystemSetting(String name) {
     }
 
     private Optional<ConfigMap> getConfigMap(String name) {
-        return environmentFetcher.getConfigMapBlocking();
+        return environmentFetcher.loadConfigMapBlocking();
     }
 }

File: application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java
Patch:
@@ -177,7 +177,7 @@ private Mono<Void> doInitialization(SetupRequest body) {
             )
             .subscribeOn(Schedulers.boundedElastic());
 
-        var basicConfigMono = Mono.defer(() -> systemConfigFetcher.getConfigMap()
+        var basicConfigMono = Mono.defer(() -> systemConfigFetcher.loadConfigMap()
                 .flatMap(configMap -> {
                     mergeToBasicConfig(body, configMap);
                     return client.update(configMap);

File: application/src/test/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcherTest.java
Patch:
@@ -44,8 +44,8 @@ void setUp() {
     }
 
     @Test
-    void getConfigMap() {
-        environmentFetcher.getConfigMap()
+    void loadConfigMap() {
+        environmentFetcher.loadConfigMap()
             .as(StepVerifier::create)
             .consumeNextWith(configMap -> {
                 assertThat(configMap.getMetadata().getName())

File: application/src/main/java/run/halo/app/security/authorization/RequestInfoFactory.java
Patch:
@@ -94,7 +94,7 @@ public RequestInfo newRequestInfo(ServerHttpRequest request) {
         RequestInfo requestInfo =
             new RequestInfo(false, path.value(), request.getMethod().name().toLowerCase());
 
-        String[] currentParts = splitPath(request.getPath().value());
+        String[] currentParts = splitPath(path.value());
 
         if (currentParts.length < 3) {
             // return a non-resource request

File: application/src/main/java/run/halo/app/content/HtmlThumbnailSrcsetInjector.java
Patch:
@@ -65,7 +65,7 @@ static String buildSizesAttr() {
      */
     public static Mono<String> generateSrcset(URI src, ThumbnailService thumbnailService) {
         return Flux.fromArray(ThumbnailSize.values())
-            .flatMap(size -> thumbnailService.generate(src, size)
+            .flatMap(size -> thumbnailService.get(src, size)
                 .map(thumbnail -> thumbnail.toString() + " " + size.getWidth() + "w")
             )
             .collect(StringBuilder::new, (builder, srcsetValue) -> {

File: application/src/main/java/run/halo/app/core/endpoint/theme/ThumbnailEndpoint.java
Patch:
@@ -66,7 +66,7 @@ public RouterFunction<ServerResponse> endpoint() {
 
     private Mono<ServerResponse> getThumbnailByUri(ServerRequest request) {
         var query = new ThumbnailQuery(request.queryParams());
-        return thumbnailService.generate(query.getUri(), query.getSize())
+        return thumbnailService.get(query.getUri(), query.getSize())
             .filterWhen(uri -> isAccessible(request, uri))
             .defaultIfEmpty(query.getUri())
             .flatMap(uri -> ServerResponse.temporaryRedirect(uri).build());

File: application/src/main/java/run/halo/app/theme/finders/impl/ThumbnailFinderImpl.java
Patch:
@@ -18,7 +18,7 @@ public class ThumbnailFinderImpl implements ThumbnailFinder {
     @Override
     public Mono<String> gen(String uriStr, String size) {
         return Mono.fromSupplier(() -> URI.create(uriStr))
-            .flatMap(uri -> thumbnailService.generate(uri, ThumbnailSize.fromName(size)))
+            .flatMap(uri -> thumbnailService.get(uri, ThumbnailSize.fromName(size)))
             .map(URI::toString)
             .onErrorResume(Throwable.class, e -> {
                 log.debug("Failed to generate thumbnail for [{}], error: [{}]", uriStr,

File: application/src/test/java/run/halo/app/core/endpoint/theme/ThumbnailEndpointTest.java
Patch:
@@ -39,7 +39,7 @@ void setUp() {
 
     @Test
     void thumbnailUriNotAccessible() {
-        when(thumbnailService.generate(any(), any()))
+        when(thumbnailService.get(any(), any()))
             .thenReturn(Mono.just(URI.create("/thumbnail-not-found.png")));
         webClient.get()
             .uri("/thumbnails/-/via-uri?size=l&uri=/myavatar.png")

File: application/src/test/java/run/halo/app/theme/finders/impl/ThumbnailFinderImplTest.java
Patch:
@@ -42,13 +42,13 @@ void shouldNotGenWhenUriIsInvalid() {
 
     @Test
     void shouldGenWhenUriIsValid() {
-        when(thumbnailService.generate(any(), any()))
+        when(thumbnailService.get(any(), any()))
             .thenReturn(Mono.just(URI.create("/test-thumb.jpg")));
         thumbnailFinder.gen("/test.jpg", "l")
             .as(StepVerifier::create)
             .expectNext("/test-thumb.jpg")
             .verifyComplete();
 
-        verify(thumbnailService).generate(any(), any());
+        verify(thumbnailService).get(any(), any());
     }
 }

File: application/src/main/java/run/halo/app/theme/finders/vo/TagVo.java
Patch:
@@ -1,5 +1,7 @@
 package run.halo.app.theme.finders.vo;
 
+import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;
+
 import lombok.Builder;
 import lombok.Value;
 import run.halo.app.core.extension.content.Tag;
@@ -33,7 +35,7 @@ public static TagVo from(Tag tag) {
             .metadata(tag.getMetadata())
             .spec(spec)
             .status(status)
-            .postCount(tag.getStatusOrDefault().getVisiblePostCount())
+            .postCount(defaultIfNull(status.getVisiblePostCount(), 0))
             .build();
     }
 }

File: api/src/main/java/run/halo/app/extension/MetadataUtil.java
Patch:
@@ -8,6 +8,7 @@ public enum MetadataUtil {
     ;
 
     public static final String SYSTEM_FINALIZER = "system-protection";
+    public static final String HIDDEN_LABEL = "halo.run/hidden";
 
     /**
      * Gets extension metadata labels null safe.

File: application/src/main/java/run/halo/app/security/CorsConfigurer.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.google.common.net.HttpHeaders;
 import java.util.List;
+import org.springframework.core.annotation.Order;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
 import org.springframework.stereotype.Component;
 import org.springframework.web.cors.CorsConfiguration;
@@ -10,6 +11,7 @@
 import run.halo.app.security.authentication.SecurityConfigurer;
 
 @Component
+@Order(0)
 public class CorsConfigurer implements SecurityConfigurer {
     @Override
     public void configure(ServerHttpSecurity http) {

File: application/src/main/java/run/halo/app/security/CsrfConfigurer.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers;
 
+import org.springframework.core.annotation.Order;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
 import org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository;
 import org.springframework.security.web.server.csrf.CsrfWebFilter;
@@ -12,6 +13,7 @@
 import run.halo.app.security.authentication.SecurityConfigurer;
 
 @Component
+@Order(0)
 class CsrfConfigurer implements SecurityConfigurer {
 
     @Override

File: application/src/main/java/run/halo/app/security/ExceptionSecurityConfigurer.java
Patch:
@@ -5,6 +5,7 @@
 
 import java.util.ArrayList;
 import org.springframework.context.MessageSource;
+import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpMethod;
 import org.springframework.http.HttpStatus;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
@@ -21,6 +22,7 @@
 import run.halo.app.security.authentication.twofactor.TwoFactorAuthenticationEntryPoint;
 
 @Component
+@Order(0)
 public class ExceptionSecurityConfigurer implements SecurityConfigurer {
 
     private final MessageSource messageSource;

File: application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java
Patch:
@@ -7,6 +7,7 @@
 import lombok.RequiredArgsConstructor;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.annotation.Bean;
+import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
@@ -31,6 +32,7 @@
 
 @Component
 @RequiredArgsConstructor
+@Order(0)
 public class LogoutSecurityConfigurer implements SecurityConfigurer {
     private final RememberMeServices rememberMeServices;
     private final ApplicationContext applicationContext;

File: application/src/main/java/run/halo/app/security/SecurityWebFiltersConfigurer.java
Patch:
@@ -24,7 +24,7 @@
 
 @Component
 // Specific an order here to control the order or security configurer initialization
-@Order(-100)
+@Order(100)
 public class SecurityWebFiltersConfigurer implements SecurityConfigurer {
 
     private final ExtensionGetter extensionGetter;

File: application/src/main/java/run/halo/app/security/authentication/login/LoginSecurityConfigurer.java
Patch:
@@ -3,6 +3,7 @@
 import io.github.resilience4j.ratelimiter.RateLimiterRegistry;
 import io.micrometer.observation.ObservationRegistry;
 import org.springframework.context.MessageSource;
+import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpMethod;
 import org.springframework.security.authentication.ObservationReactiveAuthenticationManager;
 import org.springframework.security.authentication.ReactiveAuthenticationManager;
@@ -28,6 +29,7 @@
 import run.halo.app.security.authentication.twofactor.TwoFactorAuthentication;
 
 @Component
+@Order(0)
 public class LoginSecurityConfigurer implements SecurityConfigurer {
 
     private final ObservationRegistry observationRegistry;

File: application/src/main/java/run/halo/app/security/authentication/oauth2/OAuth2SecurityConfigurer.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.security.authentication.oauth2;
 
+import org.springframework.core.annotation.Order;
 import org.springframework.security.config.web.server.SecurityWebFiltersOrder;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
 import org.springframework.security.core.userdetails.ReactiveUserDetailsService;
@@ -15,6 +16,7 @@
  * @since 2.20.0
  */
 @Component
+@Order(0)
 class OAuth2SecurityConfigurer implements SecurityConfigurer {
 
     private final ServerSecurityContextRepository securityContextRepository;

File: application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeConfigurer.java
Patch:
@@ -3,6 +3,7 @@
 import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult;
 
 import lombok.RequiredArgsConstructor;
+import org.springframework.core.annotation.Order;
 import org.springframework.security.config.web.server.SecurityWebFiltersOrder;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
 import org.springframework.security.core.context.ReactiveSecurityContextHolder;
@@ -13,6 +14,7 @@
 
 @Component
 @RequiredArgsConstructor
+@Order(0)
 public class RememberMeConfigurer implements SecurityConfigurer {
 
     private final RememberMeServices rememberMeServices;

File: application/src/main/java/run/halo/app/security/authentication/twofactor/TwoFactorAuthSecurityConfigurer.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers;
 
+import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpMethod;
 import org.springframework.security.config.web.server.SecurityWebFiltersOrder;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
@@ -17,6 +18,7 @@
 import run.halo.app.security.authentication.twofactor.totp.TotpCodeAuthenticationConverter;
 
 @Component
+@Order(0)
 public class TwoFactorAuthSecurityConfigurer implements SecurityConfigurer {
 
     private final ServerSecurityContextRepository securityContextRepository;

File: application/src/main/java/run/halo/app/security/preauth/PreAuthEmailPasswordResetEndpoint.java
Patch:
@@ -18,6 +18,8 @@
 import lombok.Data;
 import org.springframework.context.MessageSource;
 import org.springframework.context.annotation.Bean;
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.MediaType;
 import org.springframework.http.server.reactive.ServerHttpRequest;
@@ -55,6 +57,7 @@ public PreAuthEmailPasswordResetEndpoint(
     }
 
     @Bean
+    @Order(Ordered.HIGHEST_PRECEDENCE + 100)
     RouterFunction<ServerResponse> preAuthPasswordResetEndpoints(
         GlobalInfoService globalInfoService,
         PasswordResetAvailabilityProviders availabilityProviders,

File: application/src/main/java/run/halo/app/security/preauth/PreAuthLoginEndpoint.java
Patch:
@@ -8,6 +8,8 @@
 import java.util.Optional;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.context.annotation.Bean;
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
 import org.springframework.security.web.server.savedrequest.ServerRequestCache;
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.function.server.RouterFunction;
@@ -53,6 +55,7 @@ class PreAuthLoginEndpoint {
     }
 
     @Bean
+    @Order(Ordered.HIGHEST_PRECEDENCE + 100)
     RouterFunction<ServerResponse> preAuthLoginEndpoints() {
         return RouterFunctions.nest(path("/login"), RouterFunctions.route()
             .GET("", request -> {

File: application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java
Patch:
@@ -14,6 +14,8 @@
 import java.net.URI;
 import lombok.Data;
 import org.springframework.context.annotation.Bean;
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.server.reactive.ServerHttpRequest;
 import org.springframework.stereotype.Component;
@@ -67,6 +69,7 @@ class PreAuthSignUpEndpoint {
     }
 
     @Bean
+    @Order(Ordered.HIGHEST_PRECEDENCE + 100)
     RouterFunction<ServerResponse> preAuthSignUpEndpoints() {
         return RouterFunctions.nest(path("/signup"), RouterFunctions.route()
             .GET("", request -> {

File: application/src/main/java/run/halo/app/security/preauth/PreAuthTwoFactorEndpoint.java
Patch:
@@ -2,6 +2,8 @@
 
 import java.util.Map;
 import org.springframework.context.annotation.Bean;
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.function.server.RouterFunction;
 import org.springframework.web.reactive.function.server.RouterFunctions;
@@ -19,6 +21,7 @@
 class PreAuthTwoFactorEndpoint {
 
     @Bean
+    @Order(Ordered.HIGHEST_PRECEDENCE + 100)
     RouterFunction<ServerResponse> preAuthTwoFactorEndpoints(GlobalInfoService globalInfoService) {
         return RouterFunctions.route()
             .GET("/challenges/two-factor/totp",

File: application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java
Patch:
@@ -30,6 +30,8 @@
 import org.springframework.beans.factory.config.PlaceholderConfigurerSupport;
 import org.springframework.boot.autoconfigure.r2dbc.R2dbcConnectionDetails;
 import org.springframework.context.annotation.Bean;
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.dao.OptimisticLockingFailureException;
 import org.springframework.http.HttpStatus;
@@ -86,6 +88,7 @@ public class SystemSetupEndpoint {
     private final ObjectProvider<R2dbcConnectionDetails> connectionDetails;
 
     @Bean
+    @Order(Ordered.HIGHEST_PRECEDENCE + 100)
     RouterFunction<ServerResponse> setupPageRouter() {
         final var tag = "SystemV1alpha1Public";
         return SpringdocRouteBuilder.route()

File: application/src/main/java/run/halo/app/infra/webfilter/LocaleChangeWebFilter.java
Patch:
@@ -54,7 +54,6 @@ public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
     void setLanguageCookie(ServerWebExchange exchange, Locale locale) {
         var cookie = ResponseCookie.from(LANGUAGE_COOKIE_NAME, locale.toLanguageTag())
             .path("/")
-            .httpOnly(true)
             .secure("https".equalsIgnoreCase(exchange.getRequest().getURI().getScheme()))
             .sameSite("Lax")
             .build();

File: application/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java
Patch:
@@ -2,13 +2,15 @@
 
 import jakarta.validation.Valid;
 import lombok.Data;
+import org.springframework.boot.context.properties.NestedConfigurationProperty;
 
 @Data
 public class ConsoleProperties {
 
     private String location = "classpath:/console/";
 
     @Valid
+    @NestedConfigurationProperty
     private ProxyProperties proxy = new ProxyProperties();
 
 }

File: application/src/main/java/run/halo/app/notification/endpoint/SubscriptionRouter.java
Patch:
@@ -39,10 +39,11 @@ public class SubscriptionRouter {
 
     @Bean
     RouterFunction<ServerResponse> notificationSubscriptionRouter() {
+        final var tag = "NotificationV1alpha1Public";
         return SpringdocRouteBuilder.route()
             .GET(UNSUBSCRIBE_PATTERN, this::unsubscribe, builder -> {
                 builder.operationId("Unsubscribe")
-                    .tag("api.notification.halo.run/v1alpha1/Subscription")
+                    .tag(tag)
                     .description("Unsubscribe a subscription")
                     .parameter(parameterBuilder()
                         .in(ParameterIn.PATH)

File: application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java
Patch:
@@ -59,6 +59,8 @@ SecurityWebFilterChain filterChain(ServerHttpSecurity http,
 
         var pathMatcher = pathMatchers("/**");
         var staticResourcesMatcher = pathMatchers(HttpMethod.GET,
+            "/console/assets/**",
+            "/uc/assets/**",
             "/themes/{themeName}/assets/{*resourcePaths}",
             "/plugins/{pluginName}/assets/**",
             "/upload/**",

File: application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java
Patch:
@@ -79,8 +79,7 @@ RouterFunction<ServerResponse> preAuthSignUpEndpoints() {
             .POST(
                 "",
                 contentType(APPLICATION_FORM_URLENCODED),
-                request -> request.formData()
-                    .map(SignUpData::of)
+                request -> request.bind(SignUpData.class)
                     .flatMap(signUpData -> {
                         // sign up
                         var bindingResult = validate(signUpData, validator, request.exchange());

File: application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordHandler.java
Patch:
@@ -65,12 +65,12 @@ public Mono<Void> onAuthenticationFailure(WebFilterExchange webFilterExchange,
                 .filter(ServerWebExchangeMatcher.MatchResult::isMatch)
                 .switchIfEmpty(Mono.defer(
                     () -> {
-                        URI location = URI.create("/login?error");
+                        URI location = URI.create("/login?error&method=local");
                         if (exception instanceof BadCredentialsException) {
-                            location = URI.create("/login?error=invalid-credential");
+                            location = URI.create("/login?error=invalid-credential&method=local");
                         }
                         if (exception instanceof TooManyRequestsException) {
-                            location = URI.create("/login?error=rate-limit-exceeded");
+                            location = URI.create("/login?error=rate-limit-exceeded&method=local");
                         }
                         return redirectStrategy.sendRedirect(exchange, location);
                     }).then(Mono.empty())

File: application/src/main/java/run/halo/app/security/SecurityWebFiltersConfigurer.java
Patch:
@@ -11,6 +11,7 @@
 import lombok.Setter;
 import org.pf4j.ExtensionPoint;
 import org.springframework.core.annotation.AnnotationAwareOrderComparator;
+import org.springframework.core.annotation.Order;
 import org.springframework.security.config.web.server.ServerHttpSecurity;
 import org.springframework.security.web.server.WebFilterChainProxy;
 import org.springframework.stereotype.Component;
@@ -22,6 +23,8 @@
 import run.halo.app.security.authentication.SecurityConfigurer;
 
 @Component
+// Specific an order here to control the order or security configurer initialization
+@Order(-100)
 public class SecurityWebFiltersConfigurer implements SecurityConfigurer {
 
     private final ExtensionGetter extensionGetter;

File: application/src/main/java/run/halo/app/security/authentication/pat/PatEndpoint.java
Patch:
@@ -15,7 +15,7 @@
 import run.halo.app.security.PersonalAccessToken;
 
 @Component
-public class PatEndpoint implements CustomEndpoint {
+class PatEndpoint implements CustomEndpoint {
 
     private final UserScopedPatHandler patHandler;
 

File: api/src/main/java/run/halo/app/infra/ValidationUtils.java
Patch:
@@ -15,7 +15,7 @@ public class ValidationUtils {
     public static final Pattern NAME_PATTERN = Pattern.compile(NAME_REGEX);
 
     /**
-     * A-Z, a-z, 0-9, !@#$%^&* are allowed.
+     * {@code A-Z, a-z, 0-9, !@#$%^&*} are allowed.
      */
     public static final String PASSWORD_REGEX = "^[A-Za-z0-9!@#$%^&*]+$";
 

File: application/src/main/java/run/halo/app/theme/dialect/CommentElementTagProcessor.java
Patch:
@@ -45,6 +45,6 @@ protected void doProcess(ITemplateContext context, IProcessableElementTag tag,
             structureHandler.replaceWith("", false);
             return;
         }
-        commentWidget.render(new SecureTemplateContext(context), tag, structureHandler);
+        commentWidget.render(SecureTemplateContextWrapper.wrap(context), tag, structureHandler);
     }
 }

File: application/src/main/java/run/halo/app/theme/dialect/GlobalHeadInjectionProcessor.java
Patch:
@@ -75,7 +75,7 @@ protected void doProcess(ITemplateContext context, IModel model,
         // apply processors to modelToInsert
         getTemplateHeadProcessors(context)
             .concatMap(processor -> processor.process(
-                new SecureTemplateContext(context), modelToInsert, structureHandler)
+                SecureTemplateContextWrapper.wrap(context), modelToInsert, structureHandler)
             )
             .then()
             .block();

File: application/src/main/java/run/halo/app/theme/dialect/HaloPostTemplateHandler.java
Patch:
@@ -57,7 +57,8 @@ private IProcessableElementTag handleElementTag(
             var context = getContext();
             for (ElementTagPostProcessor elementTagPostProcessor : postProcessors) {
                 tagProcessorChain = tagProcessorChain.flatMap(
-                    tag -> elementTagPostProcessor.process(new SecureTemplateContext(context), tag)
+                    tag -> elementTagPostProcessor.process(
+                            SecureTemplateContextWrapper.wrap(context), tag)
                         .defaultIfEmpty(tag)
                 );
             }

File: application/src/main/java/run/halo/app/theme/dialect/TemplateFooterElementTagProcessor.java
Patch:
@@ -63,7 +63,7 @@ protected void doProcess(ITemplateContext context, IProcessableElementTag tag,
 
         getTemplateFooterProcessors(context)
             .concatMap(processor -> processor.process(
-                new SecureTemplateContext(context), tag, structureHandler, modelToInsert)
+                SecureTemplateContextWrapper.wrap(context), tag, structureHandler, modelToInsert)
             )
             .then()
             .block();

File: application/src/test/java/run/halo/app/security/AuthProviderServiceImplTest.java
Patch:
@@ -66,6 +66,7 @@ void testEnable() throws JSONException {
         ConfigMap value = captor.getValue();
         JSONAssert.assertEquals("""
                 {
+                    "enabled":["github"],
                     "states": [
                         {
                             "name": "github",
@@ -102,6 +103,7 @@ void testDisable() throws JSONException {
         ConfigMap value = captor.getValue();
         JSONAssert.assertEquals("""
                 {
+                    "enabled":[],
                     "states": [
                         {
                             "name": "github",

File: api/src/main/java/run/halo/app/extension/Unstructured.java
Patch:
@@ -72,7 +72,7 @@ public MetadataOperator getMetadata() {
         return new UnstructuredMetadata();
     }
 
-    @EqualsAndHashCode(exclude = "version")
+    @EqualsAndHashCode(exclude = "tatersion")
     class UnstructuredMetadata implements MetadataOperator {
 
         @Override

File: application/src/main/java/run/halo/app/security/AuthProviderService.java
Patch:
@@ -19,6 +19,9 @@ public interface AuthProviderService {
 
     Mono<List<ListedAuthProvider>> listAll();
 
+    /**
+     * Return a list of enabled AuthProviders sorted by priority.
+     */
     Flux<AuthProvider> getEnabledProviders();
 
 }

File: application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java
Patch:
@@ -150,7 +150,7 @@ private static boolean isHtmlRequest(ServerRequest request) {
     }
 
     private static Mono<ServerResponse> redirectToConsole() {
-        return ServerResponse.temporaryRedirect(URI.create("/console")).build();
+        return ServerResponse.status(HttpStatus.FOUND).location(URI.create("/console")).build();
     }
 
     private Mono<Void> doInitialization(SetupRequest body) {

File: application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java
Patch:
@@ -108,8 +108,7 @@ RouterFunction<ServerResponse> setupPageRouter() {
                         .implementation(Void.class)
                     )
             )
-            .before(HaloUtils.noCache(), builder -> {
-            })
+            .before(HaloUtils.noCache(), builder -> builder.operationId("SetNoCacheForSetUpPage"))
             .build();
     }
 

File: application/src/main/java/run/halo/app/plugin/PluginServiceImpl.java
Patch:
@@ -516,7 +516,8 @@ private Flux<Path> getPresetJars() {
                     return path;
                 });
         } catch (IOException e) {
-            return Flux.error(e);
+            log.debug("Failed to load preset plugins: {}", e.getMessage());
+            return Flux.empty();
         }
     }
 

File: application/src/main/java/run/halo/app/security/authentication/rememberme/TokenBasedRememberMeServices.java
Patch:
@@ -203,7 +203,7 @@ private boolean isValidCookieTokensLength(String[] cookieTokens) {
     public Mono<Void> loginFail(ServerWebExchange exchange) {
         log.debug("Interactive login attempt was unsuccessful.");
         cancelCookie(exchange);
-        return Mono.empty();
+        return rememberMeRequestCache.saveRememberMe(exchange);
     }
 
     @Override

File: application/src/main/java/run/halo/app/security/preauth/PreAuthLoginEndpoint.java
Patch:
@@ -17,6 +17,7 @@
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.AuthProvider;
 import run.halo.app.infra.actuator.GlobalInfoService;
+import run.halo.app.infra.utils.HaloUtils;
 import run.halo.app.plugin.PluginConst;
 import run.halo.app.security.AuthProviderService;
 import run.halo.app.security.HaloServerRequestCache;
@@ -50,7 +51,6 @@ class PreAuthLoginEndpoint {
     RouterFunction<ServerResponse> preAuthLoginEndpoints() {
         return RouterFunctions.nest(path("/login"), RouterFunctions.route()
             .GET("", request -> {
-                // TODO get redirect URI and cache it
                 var exchange = request.exchange();
                 var contextPath = exchange.getRequest().getPath().contextPath().value();
                 var publicKey = cryptoService.readPublicKey()
@@ -96,6 +96,7 @@ RouterFunction<ServerResponse> preAuthLoginEndpoints() {
                     ))
                 ));
             })
+            .before(HaloUtils.noCache())
             .build());
     }
 }

File: application/src/main/java/run/halo/app/security/preauth/PreAuthTwoFactorEndpoint.java
Patch:
@@ -7,6 +7,7 @@
 import org.springframework.web.reactive.function.server.RouterFunctions;
 import org.springframework.web.reactive.function.server.ServerResponse;
 import run.halo.app.infra.actuator.GlobalInfoService;
+import run.halo.app.infra.utils.HaloUtils;
 
 /**
  * Pre-auth two-factor endpoints.
@@ -25,6 +26,7 @@ RouterFunction<ServerResponse> preAuthTwoFactorEndpoints(GlobalInfoService globa
                     "globalInfo", globalInfoService.getGlobalInfo()
                 ))
             )
+            .before(HaloUtils.noCache())
             .build();
     }
 

File: application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java
Patch:
@@ -108,6 +108,8 @@ RouterFunction<ServerResponse> setupPageRouter() {
                         .implementation(Void.class)
                     )
             )
+            .before(HaloUtils.noCache(), builder -> {
+            })
             .build();
     }
 

File: application/src/main/java/run/halo/app/core/endpoint/console/UserEndpoint.java
Patch:
@@ -59,7 +59,6 @@
 import org.springframework.util.CollectionUtils;
 import org.springframework.util.MultiValueMap;
 import org.springframework.util.unit.DataSize;
-import org.springframework.validation.BeanPropertyBindingResult;
 import org.springframework.validation.Validator;
 import org.springframework.web.reactive.function.BodyExtractors;
 import org.springframework.web.reactive.function.server.RouterFunction;
@@ -86,6 +85,7 @@
 import run.halo.app.extension.router.SortableRequest;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;
+import run.halo.app.infra.ValidationUtils;
 import run.halo.app.infra.exception.RateLimitExceededException;
 import run.halo.app.infra.exception.UnsatisfiedAttributeValueException;
 import run.halo.app.infra.utils.JsonUtils;
@@ -298,8 +298,8 @@ private Mono<ServerResponse> sendEmailVerificationCode(ServerRequest request) {
                 () -> new ServerWebInputException("Request body is required."))
             )
             .doOnNext(emailReq -> {
-                var bindingResult = new BeanPropertyBindingResult(emailReq, "form");
-                validator.validate(emailReq, bindingResult);
+                var bindingResult =
+                    ValidationUtils.validate(emailReq, validator, request.exchange());
                 if (bindingResult.hasErrors()) {
                     // only email field is validated
                     throw new ServerWebInputException("validation.error.email.pattern");

File: application/src/main/java/run/halo/app/content/comment/CommentServiceImpl.java
Patch:
@@ -58,7 +58,7 @@ public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {
                 commentQuery.toPageRequest())
             .flatMap(comments -> Flux.fromStream(comments.get()
                     .map(this::toListedComment))
-                .concatMap(Function.identity())
+                .flatMapSequential(Function.identity())
                 .collectList()
                 .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),
                     comments.getTotal(), list)

File: application/src/main/java/run/halo/app/content/comment/ReplyServiceImpl.java
Patch:
@@ -166,7 +166,7 @@ public Mono<ListResult<ListedReply>> list(ReplyQuery query) {
         return client.listBy(Reply.class, query.toListOptions(), query.toPageRequest())
             .flatMap(list -> Flux.fromStream(list.get()
                     .map(this::toListedReply))
-                .concatMap(Function.identity())
+                .flatMapSequential(Function.identity())
                 .collectList()
                 .map(listedReplies -> new ListResult<>(list.getPage(), list.getSize(),
                     list.getTotal(), listedReplies))

File: application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -77,7 +77,7 @@ public Mono<ListResult<ListedPost>> listPost(PostQuery query) {
             )
             .flatMap(listResult -> Flux.fromStream(listResult.get())
                 .map(this::getListedPost)
-                .concatMap(Function.identity())
+                .flatMapSequential(Function.identity())
                 .collectList()
                 .map(listedPosts -> new ListResult<>(listResult.getPage(), listResult.getSize(),
                     listResult.getTotal(), listedPosts)
@@ -175,7 +175,7 @@ private Flux<Contributor> listContributors(List<String> usernames) {
             return Flux.empty();
         }
         return Flux.fromIterable(usernames)
-            .concatMap(userService::getUserOrGhost)
+            .flatMapSequential(userService::getUserOrGhost)
             .map(user -> {
                 Contributor contributor = new Contributor();
                 contributor.setName(user.getMetadata().getName());

File: application/src/main/java/run/halo/app/content/impl/SinglePageServiceImpl.java
Patch:
@@ -88,7 +88,7 @@ public Flux<ListedSnapshotDto> listSnapshots(String pageName) {
     public Mono<ListResult<ListedSinglePage>> list(SinglePageQuery query) {
         return client.listBy(SinglePage.class, query.toListOptions(), query.toPageRequest())
             .flatMap(listResult -> Flux.fromStream(listResult.get().map(this::getListedSinglePage))
-                .concatMap(Function.identity())
+                .flatMapSequential(Function.identity())
                 .collectList()
                 .map(listedSinglePages -> new ListResult<>(
                     listResult.getPage(),

File: application/src/main/java/run/halo/app/plugin/PluginServiceImpl.java
Patch:
@@ -267,7 +267,7 @@ public Flux<DataBuffer> uglifyJsBundle() {
             });
         var body = Flux.fromIterable(startedPlugins)
             .sort(Comparator.comparing(PluginWrapper::getPluginId))
-            .concatMap(pluginWrapper -> {
+            .flatMapSequential(pluginWrapper -> {
                 var pluginId = pluginWrapper.getPluginId();
                 return Mono.<Resource>fromSupplier(
                         () -> BundleResourceUtils.getJsBundleResource(
@@ -294,7 +294,7 @@ public Flux<DataBuffer> uglifyJsBundle() {
     public Flux<DataBuffer> uglifyCssBundle() {
         return Flux.fromIterable(pluginManager.getStartedPlugins())
             .sort(Comparator.comparing(PluginWrapper::getPluginId))
-            .concatMap(pluginWrapper -> {
+            .flatMapSequential(pluginWrapper -> {
                 var pluginId = pluginWrapper.getPluginId();
                 var dataBufferFactory = DefaultDataBufferFactory.sharedInstance;
                 return Mono.<Resource>fromSupplier(() -> BundleResourceUtils.getJsBundleResource(

File: application/src/main/java/run/halo/app/plugin/extensionpoint/DefaultExtensionGetter.java
Patch:
@@ -86,10 +86,10 @@ private <T extends ExtensionPoint> Flux<T> getEnabledExtensions(String epdName,
                 }
                 var extensions = getExtensions(extensionPoint).cache();
                 return Flux.fromIterable(extensionDefNames)
-                    .concatMap(extensionDefName ->
+                    .flatMapSequential(extensionDefName ->
                         client.fetch(ExtensionDefinition.class, extensionDefName)
                     )
-                    .concatMap(extensionDef -> {
+                    .flatMapSequential(extensionDef -> {
                         var className = extensionDef.getSpec().getClassName();
                         return extensions.filter(
                             extension -> Objects.equals(extension.getClass().getName(),

File: application/src/main/java/run/halo/app/theme/finders/impl/CommentPublicQueryServiceImpl.java
Patch:
@@ -86,7 +86,7 @@ public Mono<ListResult<CommentVo>> list(Ref ref, PageRequest pageParam) {
                 return client.listBy(Comment.class, listOptions, pageRequest)
                     .flatMap(listResult -> Flux.fromStream(listResult.get())
                         .map(this::toCommentVo)
-                        .concatMap(Function.identity())
+                        .flatMapSequential(Function.identity())
                         .collectList()
                         .map(commentVos -> new ListResult<>(listResult.getPage(),
                             listResult.getSize(),
@@ -102,7 +102,7 @@ public Mono<ListResult<CommentVo>> list(Ref ref, PageRequest pageParam) {
     public Mono<ListResult<CommentWithReplyVo>> convertToWithReplyVo(ListResult<CommentVo> comments,
         int replySize) {
         return Flux.fromIterable(comments.getItems())
-            .concatMap(commentVo -> {
+            .flatMapSequential(commentVo -> {
                 var commentName = commentVo.getMetadata().getName();
                 return listReply(commentName, 1, replySize)
                     .map(replyList -> CommentWithReplyVo.from(commentVo)
@@ -135,7 +135,7 @@ public Mono<ListResult<ReplyVo>> listReply(String commentName, PageRequest pageP
                     .orElse(PageRequestImpl.ofSize(0));
                 return client.listBy(Reply.class, listOptions, pageRequest)
                     .flatMap(list -> Flux.fromStream(list.get().map(this::toReplyVo))
-                        .concatMap(Function.identity())
+                        .flatMapSequential(Function.identity())
                         .collectList()
                         .map(replyVos -> new ListResult<>(list.getPage(), list.getSize(),
                             list.getTotal(),

File: application/src/main/java/run/halo/app/theme/finders/impl/ContributorFinderImpl.java
Patch:
@@ -33,6 +33,6 @@ public Flux<ContributorVo> getContributors(List<String> names) {
             return Flux.empty();
         }
         return Flux.fromIterable(names)
-            .concatMap(this::getContributor);
+            .flatMapSequential(this::getContributor);
     }
 }

File: application/src/main/java/run/halo/app/theme/finders/impl/PostFinderImpl.java
Patch:
@@ -291,7 +291,7 @@ public Mono<ListResult<PostArchiveVo>> archives(Integer page, Integer size, Stri
     public Flux<ListedPostVo> listAll() {
         return postPredicateResolver.getListOptions()
             .flatMapMany(listOptions -> client.listAll(Post.class, listOptions, defaultSort()))
-            .concatMap(postPublicQueryService::convertToListedVo);
+            .flatMapSequential(postPublicQueryService::convertToListedVo);
     }
 
     static int pageNullSafe(Integer page) {

File: application/src/main/java/run/halo/app/theme/finders/impl/PostPublicQueryServiceImpl.java
Patch:
@@ -67,7 +67,7 @@ public Mono<ListResult<ListedPostVo>> list(ListOptions queryOptions, PageRequest
             })
             .flatMap(listOptions -> client.listBy(Post.class, listOptions, page))
             .flatMap(list -> Flux.fromStream(list.get())
-                .concatMap(post -> convertToListedVo(post)
+                .flatMapSequential(post -> convertToListedVo(post)
                     .flatMap(postVo -> populateStats(postVo)
                         .doOnNext(postVo::setStats).thenReturn(postVo)
                     )

File: application/src/main/java/run/halo/app/theme/finders/impl/SinglePageConversionServiceImpl.java
Patch:
@@ -140,7 +140,7 @@ public Mono<ListResult<ListedSinglePageVo>> listBy(ListOptions listOptions,
 
         return client.listBy(SinglePage.class, rewroteListOptions, rewrotePageRequest)
             .flatMap(list -> Flux.fromStream(list.get())
-                .concatMap(this::convertToListedVo)
+                .flatMapSequential(this::convertToListedVo)
                 .collectList()
                 .map(pageVos ->
                     new ListResult<>(list.getPage(), list.getSize(), list.getTotal(), pageVos)

File: application/src/main/java/run/halo/app/theme/finders/impl/TagFinderImpl.java
Patch:
@@ -48,7 +48,7 @@ public Mono<TagVo> getByName(String name) {
     @Override
     public Flux<TagVo> getByNames(List<String> names) {
         return Flux.fromIterable(names)
-            .concatMap(this::getByName);
+            .flatMapSequential(this::getByName);
     }
 
     @Override

File: application/src/main/java/run/halo/app/theme/dialect/GlobalHeadInjectionProcessor.java
Patch:
@@ -42,6 +42,9 @@ public GlobalHeadInjectionProcessor(final String dialectPrefix) {
     @Override
     protected void doProcess(ITemplateContext context, IModel model,
         IElementModelStructureHandler structureHandler) {
+        if (context.containsVariable(InjectionExcluderProcessor.EXCLUDE_INJECTION_VARIABLE)) {
+            return;
+        }
 
         // note that this is important!!
         Object processedAlready = context.getVariable(PROCESS_FLAG);

File: application/src/main/java/run/halo/app/theme/dialect/HaloProcessorDialect.java
Patch:
@@ -41,6 +41,7 @@ public Set<IProcessor> getProcessors(String dialectPrefix) {
         processors.add(new EvaluationContextEnhancer());
         processors.add(new CommentElementTagProcessor(dialectPrefix));
         processors.add(new CommentEnabledVariableProcessor());
+        processors.add(new InjectionExcluderProcessor());
         return processors;
     }
 

File: application/src/main/java/run/halo/app/core/user/service/SignUpData.java
Patch:
@@ -7,6 +7,7 @@
 import jakarta.validation.constraints.Email;
 import jakarta.validation.constraints.NotBlank;
 import jakarta.validation.constraints.Pattern;
+import jakarta.validation.constraints.Size;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -29,6 +30,7 @@
 public class SignUpData {
 
     @NotBlank
+    @Size(min = 4, max = 63)
     @Pattern(regexp = ValidationUtils.NAME_REGEX,
         message = "{validation.error.username.pattern}")
     private String username;
@@ -42,6 +44,7 @@ public class SignUpData {
     private String emailCode;
 
     @NotBlank
+    @Size(min = 5, max = 257)
     @Pattern(regexp = ValidationUtils.PASSWORD_REGEX,
         message = "{validation.error.password.pattern}")
     private String password;

File: application/src/main/java/run/halo/app/core/attachment/endpoint/LocalAttachmentUploadHandler.java
Patch:
@@ -158,7 +158,7 @@ private Mono<Void> validateFile(FilePart file, PolicySetting setting) {
             var typeValidator = file.content()
                 .next()
                 .handle((dataBuffer, sink) -> {
-                    var mimeType = detectMimeType(dataBuffer.asInputStream());
+                    var mimeType = detectMimeType(dataBuffer.asInputStream(), file.name());
                     var isAllow = setting.getAllowedFileTypes()
                         .stream()
                         .map(FileCategoryMatcher::of)
@@ -178,9 +178,9 @@ private Mono<Void> validateFile(FilePart file, PolicySetting setting) {
     }
 
     @NonNull
-    private String detectMimeType(InputStream inputStream) {
+    private String detectMimeType(InputStream inputStream, String name) {
         try {
-            return FileTypeDetectUtils.detectMimeType(inputStream);
+            return FileTypeDetectUtils.detectMimeType(inputStream, name);
         } catch (IOException e) {
             log.warn("Failed to detect file type", e);
             return "Unknown";

File: application/src/main/java/run/halo/app/core/user/service/impl/EmailPasswordRecoveryServiceImpl.java
Patch:
@@ -115,7 +115,7 @@ private Mono<Void> sendResetPasswordNotification(String username, String email)
         var tokenHash = hashToken(token);
         var expiresAt = clock.instant().plus(RESET_TOKEN_LIFE_TIME);
         var uri = UriComponentsBuilder.fromUriString("/")
-            .pathSegment("password-reset", token)
+            .pathSegment("password-reset", "email", token)
             .build(true)
             .toUri();
         var resetToken = new ResetToken(tokenHash, username, expiresAt);

File: application/src/test/java/run/halo/app/infra/exception/handlers/I18nExceptionTest.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.infra.exception.handlers;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf;
 
 import java.util.Locale;
 import org.junit.jupiter.api.AfterEach;
@@ -121,9 +122,8 @@ void shouldGetErrorIfThrowingGeneralException() {
 
     @Test
     void shouldGetConflictError() {
-        webClient.put().uri("/response-entity/conflict-error")
-            .header("X-XSRF-TOKEN", "fake-token")
-            .cookie("XSRF-TOKEN", "fake-token")
+        webClient.mutate().apply(csrf()).build()
+            .put().uri("/response-entity/conflict-error")
             .exchange()
             .expectStatus().isEqualTo(HttpStatus.CONFLICT)
             .expectBody(ProblemDetail.class)

File: api/src/main/java/run/halo/app/infra/SystemSetting.java
Patch:
@@ -71,6 +71,7 @@ public static class User {
         boolean mustVerifyEmailOnRegistration;
         String defaultRole;
         String avatarPolicy;
+        String ucAttachmentPolicy;
     }
 
     @Data

File: application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordHandler.java
Patch:
@@ -46,7 +46,7 @@ public class UsernamePasswordHandler implements ServerAuthenticationSuccessHandl
     private RememberMeRequestCache rememberMeRequestCache = new WebSessionRememberMeRequestCache();
 
     private final ServerAuthenticationSuccessHandler defaultSuccessHandler =
-        new RedirectServerAuthenticationSuccessHandler("/console/");
+        new RedirectServerAuthenticationSuccessHandler("/uc");
 
     public UsernamePasswordHandler(ServerResponse.Context context, MessageSource messageSource,
         LoginHandlerEnhancer loginHandlerEnhancer) {

File: application/src/test/java/run/halo/app/XForwardHeaderTest.java
Patch:
@@ -17,7 +17,7 @@
 import reactor.test.StepVerifier;
 
 @SpringBootTest(webEnvironment = RANDOM_PORT,
-    properties = "server.forward-headers-strategy=framework")
+    properties = "server.forward-headers-strategy=native")
 class XForwardHeaderTest {
 
     @LocalServerPort

File: application/src/test/java/run/halo/app/migration/impl/MigrationServiceImplTest.java
Patch:
@@ -120,7 +120,7 @@ void restoreTest() throws IOException, URISyntaxException {
         expectStore.setVersion(null);
 
         when(haloProperties.getWorkDir()).thenReturn(workdir);
-        when(repository.deleteAll(List.of(expectStore))).thenReturn(Mono.empty());
+        when(repository.deleteAll()).thenReturn(Mono.empty());
         when(repository.saveAll(List.of(expectStore))).thenReturn(Flux.empty());
 
         var content = DataBufferUtils.read(backupFile,
@@ -132,7 +132,7 @@ void restoreTest() throws IOException, URISyntaxException {
 
 
         verify(haloProperties).getWorkDir();
-        verify(repository).deleteAll(List.of(expectStore));
+        verify(repository).deleteAll();
         verify(repository).saveAll(List.of(expectStore));
 
         // make sure the workdir is recovered.

File: application/src/main/java/run/halo/app/migration/impl/MigrationServiceImpl.java
Patch:
@@ -64,6 +64,7 @@ public class MigrationServiceImpl implements MigrationService, InitializingBean
         "backups/**",
         "db/**",
         "logs/**",
+        "indices/**",
         "docker-compose.yaml",
         "docker-compose.yml",
         "mysql/**",

File: application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java
Patch:
@@ -44,6 +44,7 @@
 import run.halo.app.security.authentication.pat.PatAuthenticationManager;
 import run.halo.app.security.authentication.pat.PatServerWebExchangeMatcher;
 import run.halo.app.security.authorization.AuthorityUtils;
+import run.halo.app.security.authorization.NotAuthenticatedAuthorizationManager;
 import run.halo.app.security.authorization.RequestInfoAuthorizationManager;
 import run.halo.app.security.session.InMemoryReactiveIndexedSessionRepository;
 import run.halo.app.security.session.ReactiveIndexedSessionRepository;
@@ -90,6 +91,8 @@ SecurityWebFilterChain filterChain(ServerHttpSecurity http,
                     "/apis/**",
                     "/actuator/**"
                 ).access(new RequestInfoAuthorizationManager(roleService))
+                .pathMatchers(HttpMethod.GET, "/login", "/signup")
+                .access(new NotAuthenticatedAuthorizationManager())
                 .pathMatchers(
                     "/login/**",
                     "/challenges/**",

File: application/src/main/java/run/halo/app/migration/impl/MigrationServiceImpl.java
Patch:
@@ -69,7 +69,8 @@ public class MigrationServiceImpl implements MigrationService, InitializingBean
         "mysql/**",
         "mysqlBackup/**",
         "**/.idea/**",
-        "**/.vscode/**"
+        "**/.vscode/**",
+        "attachments/thumbnails/**"
     );
 
     private final DateTimeFormatter dateTimeFormatter;

File: application/src/main/java/run/halo/app/core/endpoint/console/UserEndpoint.java
Patch:
@@ -88,7 +88,6 @@
 import run.halo.app.infra.exception.RateLimitExceededException;
 import run.halo.app.infra.exception.UnsatisfiedAttributeValueException;
 import run.halo.app.infra.utils.JsonUtils;
-import run.halo.app.security.authentication.twofactor.TwoFactorAuthentication;
 
 @Component
 @RequiredArgsConstructor
@@ -600,7 +599,7 @@ record ChangePasswordRequest(
     Mono<ServerResponse> me(ServerRequest request) {
         return ReactiveSecurityContextHolder.getContext()
             .map(SecurityContext::getAuthentication)
-            .filter(auth -> !(auth instanceof TwoFactorAuthentication))
+            .filter(Authentication::isAuthenticated)
             .flatMap(auth -> userService.getUser(auth.getName())
                 .flatMap(user -> {
                     var roleNames = authoritiesToRoles(auth.getAuthorities());

File: application/src/main/java/run/halo/app/security/authorization/AuthorityUtils.java
Patch:
@@ -39,8 +39,8 @@ public static Set<String> authoritiesToRoles(
         Collection<? extends GrantedAuthority> authorities) {
         return authorities.stream()
             .map(GrantedAuthority::getAuthority)
+            .filter(authority -> StringUtils.startsWith(authority, ROLE_PREFIX))
             .map(authority -> {
-                authority = StringUtils.removeStart(authority, SCOPE_PREFIX);
                 authority = StringUtils.removeStart(authority, ROLE_PREFIX);
                 return authority;
             })

File: application/src/main/java/run/halo/app/security/authorization/DefaultRuleResolver.java
Patch:
@@ -27,7 +27,7 @@ public DefaultRuleResolver(RoleService roleService) {
     public Mono<AuthorizingVisitor> visitRules(Authentication authentication,
         RequestInfo requestInfo) {
         var roleNames = AuthorityUtils.authoritiesToRoles(authentication.getAuthorities());
-        var record = new AttributesRecord(authentication, requestInfo);
+        var record = new AttributesRecord(requestInfo);
         var visitor = new AuthorizingVisitor(record);
 
         // If the request is an userspace scoped request,

File: application/src/main/java/run/halo/app/security/jackson2/TwoFactorAuthenticationMixin.java
Patch:
@@ -20,6 +20,8 @@
 abstract class TwoFactorAuthenticationMixin {
 
     @JsonCreator
-    TwoFactorAuthenticationMixin(@JsonProperty("previous") Authentication previous) {
+    TwoFactorAuthenticationMixin(
+        @JsonProperty("previous") Authentication previous
+    ) {
     }
 }

File: application/src/test/java/run/halo/app/security/authorization/AuthorityUtilsTest.java
Patch:
@@ -29,7 +29,7 @@ void authoritiesToRolesTest() {
 
         var roles = authoritiesToRoles(authorities);
 
-        assertEquals(Set.of("admin", "owner", "manager", "faker", "system:read"), roles);
+        assertEquals(Set.of("admin", "owner", "manager"), roles);
     }
 
     @Test

File: application/src/test/java/run/halo/app/security/authorization/DefaultRuleResolverTest.java
Patch:
@@ -37,7 +37,7 @@ class DefaultRuleResolverTest {
     void visitRules() {
         when(roleService.listDependenciesFlux(Set.of("ruleReadPost")))
             .thenReturn(Flux.just(mockRole()));
-        var fakeUser = new User("admin", "123456", createAuthorityList("ruleReadPost"));
+        var fakeUser = new User("admin", "123456", createAuthorityList("ROLE_ruleReadPost"));
         var authentication = authenticated(fakeUser, fakeUser.getPassword(),
             fakeUser.getAuthorities());
 
@@ -59,7 +59,7 @@ void visitRules() {
     void visitRulesForUserspaceScope() {
         when(roleService.listDependenciesFlux(Set.of("ruleReadPost")))
             .thenReturn(Flux.just(mockRole()));
-        var fakeUser = new User("admin", "123456", createAuthorityList("ruleReadPost"));
+        var fakeUser = new User("admin", "123456", createAuthorityList("ROLE_ruleReadPost"));
         var authentication =
             authenticated(fakeUser, fakeUser.getPassword(), fakeUser.getAuthorities());
         var cases = List.of(

File: application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java
Patch:
@@ -103,8 +103,7 @@ RouterFunction<ServerResponse> preAuthSignUpEndpoints() {
                                         "emailCode",
                                         signUpData.getEmailCode(),
                                         true,
-                                        // TODO Refine i18n
-                                        new String[] {"signup.error.email-captcha.invalid"},
+                                        new String[] {"signup.error.email-code.invalid"},
                                         null,
                                         "Invalid Email Code"));
                                 }

File: application/src/main/java/run/halo/app/content/comment/AbstractCommentService.java
Patch:
@@ -5,14 +5,14 @@
 import org.springframework.security.core.context.ReactiveSecurityContextHolder;
 import org.springframework.util.Assert;
 import reactor.core.publisher.Mono;
+import run.halo.app.core.counter.CounterService;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.User;
 import run.halo.app.core.extension.content.Comment;
 import run.halo.app.core.extension.content.Reply;
 import run.halo.app.core.user.service.RoleService;
 import run.halo.app.core.user.service.UserService;
 import run.halo.app.extension.ReactiveExtensionClient;
-import run.halo.app.metrics.CounterService;
-import run.halo.app.metrics.MeterUtils;
 import run.halo.app.security.authorization.AuthorityUtils;
 
 @RequiredArgsConstructor

File: application/src/main/java/run/halo/app/content/comment/CommentServiceImpl.java
Patch:
@@ -16,6 +16,7 @@
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.util.retry.Retry;
+import run.halo.app.core.counter.CounterService;
 import run.halo.app.core.extension.content.Comment;
 import run.halo.app.core.user.service.RoleService;
 import run.halo.app.core.user.service.UserService;
@@ -29,7 +30,6 @@
 import run.halo.app.extension.router.selector.FieldSelector;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.exception.AccessDeniedException;
-import run.halo.app.metrics.CounterService;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
 
 /**

File: application/src/main/java/run/halo/app/content/comment/ReplyServiceImpl.java
Patch:
@@ -20,6 +20,7 @@
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.util.retry.Retry;
+import run.halo.app.core.counter.CounterService;
 import run.halo.app.core.extension.content.Comment;
 import run.halo.app.core.extension.content.Reply;
 import run.halo.app.core.user.service.RoleService;
@@ -31,7 +32,6 @@
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.router.selector.FieldSelector;
 import run.halo.app.infra.exception.RequestRestrictedException;
-import run.halo.app.metrics.CounterService;
 
 /**
  * A default implementation of {@link ReplyService}.

File: application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -30,6 +30,8 @@
 import run.halo.app.content.PostRequest;
 import run.halo.app.content.PostService;
 import run.halo.app.content.Stats;
+import run.halo.app.core.counter.CounterService;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.content.Category;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.core.extension.content.Snapshot;
@@ -43,8 +45,6 @@
 import run.halo.app.extension.router.selector.FieldSelector;
 import run.halo.app.infra.Condition;
 import run.halo.app.infra.ConditionStatus;
-import run.halo.app.metrics.CounterService;
-import run.halo.app.metrics.MeterUtils;
 
 /**
  * A default implementation of {@link PostService}.

File: application/src/main/java/run/halo/app/content/impl/SinglePageServiceImpl.java
Patch:
@@ -25,6 +25,8 @@
 import run.halo.app.content.SinglePageRequest;
 import run.halo.app.content.SinglePageService;
 import run.halo.app.content.Stats;
+import run.halo.app.core.counter.CounterService;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.core.extension.content.Snapshot;
@@ -34,8 +36,6 @@
 import run.halo.app.extension.Ref;
 import run.halo.app.infra.Condition;
 import run.halo.app.infra.ConditionStatus;
-import run.halo.app.metrics.CounterService;
-import run.halo.app.metrics.MeterUtils;
 
 /**
  * Single page service implementation.

File: application/src/main/java/run/halo/app/content/stats/PostStatsUpdater.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.metrics;
+package run.halo.app.content.stats;
 
 import java.time.Duration;
 import java.time.Instant;

File: application/src/main/java/run/halo/app/content/stats/ReplyEventReconciler.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.metrics;
+package run.halo.app.content.stats;
 
 import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;
 import static run.halo.app.extension.index.query.QueryFactory.and;

File: application/src/main/java/run/halo/app/content/stats/TagPostCountUpdater.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.content;
+package run.halo.app.content.stats;
 
 import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;
 import static run.halo.app.extension.index.query.QueryFactory.and;
@@ -12,6 +12,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.context.event.EventListener;
 import org.springframework.stereotype.Component;
+import run.halo.app.content.AbstractEventReconciler;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.core.extension.content.Tag;
 import run.halo.app.core.extension.content.Tag.TagStatus;

File: application/src/main/java/run/halo/app/content/stats/VisitedEventReconciler.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.metrics;
+package run.halo.app.content.stats;
 
 import java.time.Duration;
 import java.time.Instant;
@@ -14,6 +14,7 @@
 import org.springframework.scheduling.annotation.Async;
 import org.springframework.scheduling.annotation.Scheduled;
 import org.springframework.stereotype.Component;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.Counter;
 import run.halo.app.event.post.VisitedEvent;
 import run.halo.app.extension.ExtensionClient;

File: application/src/main/java/run/halo/app/content/stats/VotedEventReconciler.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.metrics;
+package run.halo.app.content.stats;
 
 import java.time.Duration;
 import java.time.Instant;
@@ -10,6 +10,7 @@
 import org.springframework.context.event.EventListener;
 import org.springframework.scheduling.annotation.Async;
 import org.springframework.stereotype.Component;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.Counter;
 import run.halo.app.event.post.DownvotedEvent;
 import run.halo.app.event.post.UpvotedEvent;

File: application/src/main/java/run/halo/app/core/counter/CounterService.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.metrics;
+package run.halo.app.core.counter;
 
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.Counter;

File: application/src/main/java/run/halo/app/core/counter/CounterServiceImpl.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.metrics;
+package run.halo.app.core.counter;
 
 import org.springframework.stereotype.Service;
 import reactor.core.publisher.Mono;

File: application/src/main/java/run/halo/app/core/counter/MeterUtils.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.metrics;
+package run.halo.app.core.counter;
 
 import io.micrometer.core.instrument.Counter;
 import io.micrometer.core.instrument.MeterRegistry;

File: application/src/main/java/run/halo/app/core/reconciler/CommentReconciler.java
Patch:
@@ -18,6 +18,7 @@
 import org.springframework.stereotype.Component;
 import run.halo.app.content.comment.ReplyNotificationSubscriptionHelper;
 import run.halo.app.content.comment.ReplyService;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.Counter;
 import run.halo.app.core.extension.content.Comment;
 import run.halo.app.core.extension.content.Constant;
@@ -36,7 +37,6 @@
 import run.halo.app.extension.controller.Reconciler;
 import run.halo.app.extension.index.query.Query;
 import run.halo.app.extension.router.selector.FieldSelector;
-import run.halo.app.metrics.MeterUtils;
 
 /**
  * Reconciler for {@link Comment}.

File: application/src/main/java/run/halo/app/core/reconciler/PostCounterReconciler.java
Patch:
@@ -5,6 +5,7 @@
 import lombok.RequiredArgsConstructor;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.stereotype.Component;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.Counter;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.event.post.PostStatsChangedEvent;
@@ -14,7 +15,6 @@
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.Reconciler;
 import run.halo.app.extension.router.selector.FieldSelector;
-import run.halo.app.metrics.MeterUtils;
 
 @Component
 @RequiredArgsConstructor

File: application/src/main/java/run/halo/app/core/reconciler/PostReconciler.java
Patch:
@@ -39,6 +39,8 @@
 import run.halo.app.content.PostService;
 import run.halo.app.content.comment.CommentService;
 import run.halo.app.content.permalinks.PostPermalinkPolicy;
+import run.halo.app.core.counter.CounterService;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.content.Constant;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.core.extension.content.Post.PostPhase;
@@ -65,8 +67,6 @@
 import run.halo.app.infra.Condition;
 import run.halo.app.infra.ConditionStatus;
 import run.halo.app.infra.utils.HaloUtils;
-import run.halo.app.metrics.CounterService;
-import run.halo.app.metrics.MeterUtils;
 import run.halo.app.notification.NotificationCenter;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
 

File: application/src/main/java/run/halo/app/core/reconciler/SinglePageReconciler.java
Patch:
@@ -23,6 +23,8 @@
 import run.halo.app.content.NotificationReasonConst;
 import run.halo.app.content.SinglePageService;
 import run.halo.app.content.comment.CommentService;
+import run.halo.app.core.counter.CounterService;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.core.extension.content.Snapshot;
@@ -43,8 +45,6 @@
 import run.halo.app.infra.ConditionStatus;
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.infra.utils.JsonUtils;
-import run.halo.app.metrics.CounterService;
-import run.halo.app.metrics.MeterUtils;
 import run.halo.app.notification.NotificationCenter;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
 

File: application/src/main/java/run/halo/app/event/post/PostStatsChangedEvent.java
Patch:
@@ -3,9 +3,9 @@
 import lombok.Getter;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.context.ApplicationEvent;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.Counter;
 import run.halo.app.core.extension.content.Post;
-import run.halo.app.metrics.MeterUtils;
 
 @Getter
 public class PostStatsChangedEvent extends ApplicationEvent {

File: application/src/main/java/run/halo/app/theme/finders/impl/CommentPublicQueryServiceImpl.java
Patch:
@@ -24,6 +24,8 @@
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import run.halo.app.content.comment.OwnerInfo;
+import run.halo.app.core.counter.CounterService;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.User;
 import run.halo.app.core.extension.content.Comment;
 import run.halo.app.core.extension.content.Reply;
@@ -38,8 +40,6 @@
 import run.halo.app.extension.index.query.Query;
 import run.halo.app.extension.router.selector.FieldSelector;
 import run.halo.app.infra.AnonymousUserConst;
-import run.halo.app.metrics.CounterService;
-import run.halo.app.metrics.MeterUtils;
 import run.halo.app.theme.finders.CommentPublicQueryService;
 import run.halo.app.theme.finders.vo.CommentStatsVo;
 import run.halo.app.theme.finders.vo.CommentVo;

File: application/src/main/java/run/halo/app/theme/finders/impl/PostPublicQueryServiceImpl.java
Patch:
@@ -11,13 +11,13 @@
 import reactor.core.publisher.Mono;
 import run.halo.app.content.ContentWrapper;
 import run.halo.app.content.PostService;
+import run.halo.app.core.counter.CounterService;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ListOptions;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.PageRequest;
 import run.halo.app.extension.ReactiveExtensionClient;
-import run.halo.app.metrics.CounterService;
-import run.halo.app.metrics.MeterUtils;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
 import run.halo.app.theme.ReactivePostContentHandler;
 import run.halo.app.theme.finders.CategoryFinder;

File: application/src/main/java/run/halo/app/theme/finders/impl/SinglePageConversionServiceImpl.java
Patch:
@@ -19,14 +19,14 @@
 import reactor.core.publisher.Mono;
 import run.halo.app.content.ContentWrapper;
 import run.halo.app.content.SinglePageService;
+import run.halo.app.core.counter.CounterService;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.ListOptions;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.PageRequest;
 import run.halo.app.extension.PageRequestImpl;
 import run.halo.app.extension.ReactiveExtensionClient;
-import run.halo.app.metrics.CounterService;
-import run.halo.app.metrics.MeterUtils;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
 import run.halo.app.theme.ReactiveSinglePageContentHandler;
 import run.halo.app.theme.ReactiveSinglePageContentHandler.SinglePageContentContext;

File: application/src/test/java/run/halo/app/content/comment/CommentServiceImplTest.java
Patch:
@@ -29,6 +29,8 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 import run.halo.app.content.TestPost;
+import run.halo.app.core.counter.CounterService;
+import run.halo.app.core.counter.MeterUtils;
 import run.halo.app.core.extension.Counter;
 import run.halo.app.core.extension.User;
 import run.halo.app.core.extension.content.Comment;
@@ -44,8 +46,6 @@
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;
 import run.halo.app.infra.utils.JsonUtils;
-import run.halo.app.metrics.CounterService;
-import run.halo.app.metrics.MeterUtils;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
 import run.halo.app.security.authorization.AuthorityUtils;
 

File: application/src/test/java/run/halo/app/core/counter/MeterUtilsTest.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.metrics;
+package run.halo.app.core.counter;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: application/src/test/java/run/halo/app/core/reconciler/SinglePageReconcilerTest.java
Patch:
@@ -30,16 +30,15 @@
 import run.halo.app.content.NotificationReasonConst;
 import run.halo.app.content.SinglePageService;
 import run.halo.app.content.TestPost;
+import run.halo.app.core.counter.CounterService;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.core.extension.notification.Subscription;
-import run.halo.app.core.reconciler.SinglePageReconciler;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.controller.Reconciler;
 import run.halo.app.infra.ExternalUrlSupplier;
-import run.halo.app.metrics.CounterService;
 import run.halo.app.notification.NotificationCenter;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
 

File: application/src/test/java/run/halo/app/theme/finders/impl/CommentPublicQueryServiceImplTest.java
Patch:
@@ -20,6 +20,7 @@
 import org.skyscreamer.jsonassert.JSONAssert;
 import org.springframework.test.context.junit.jupiter.SpringExtension;
 import reactor.core.publisher.Mono;
+import run.halo.app.core.counter.CounterService;
 import run.halo.app.core.extension.Counter;
 import run.halo.app.core.extension.User;
 import run.halo.app.core.extension.content.Comment;
@@ -32,7 +33,6 @@
 import run.halo.app.extension.Ref;
 import run.halo.app.infra.AnonymousUserConst;
 import run.halo.app.infra.utils.JsonUtils;
-import run.halo.app.metrics.CounterService;
 
 /**
  * Tests for {@link CommentFinderImpl}.

File: application/src/test/java/run/halo/app/theme/finders/impl/PostFinderImplTest.java
Patch:
@@ -19,12 +19,12 @@
 import org.springframework.data.domain.Sort;
 import reactor.core.publisher.Mono;
 import run.halo.app.content.PostService;
+import run.halo.app.core.counter.CounterService;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.PageRequest;
 import run.halo.app.extension.ReactiveExtensionClient;
-import run.halo.app.metrics.CounterService;
 import run.halo.app.theme.finders.CategoryFinder;
 import run.halo.app.theme.finders.ContributorFinder;
 import run.halo.app.theme.finders.PostPublicQueryService;

File: application/src/main/java/run/halo/app/theme/dialect/EvaluationContextEnhancer.java
Patch:
@@ -12,6 +12,7 @@
 import org.springframework.expression.MethodResolver;
 import org.springframework.expression.PropertyAccessor;
 import org.springframework.expression.TypedValue;
+import org.springframework.expression.spel.CompilablePropertyAccessor;
 import org.springframework.expression.spel.support.ReflectivePropertyAccessor;
 import org.springframework.integration.json.JsonPropertyAccessor;
 import org.springframework.lang.Nullable;
@@ -122,7 +123,7 @@ public Class<?>[] getSpecificTargetClasses() {
         public PropertyAccessor createOptimalAccessor(EvaluationContext context, Object target,
             String name) {
             var optimalAccessor = delegate.createOptimalAccessor(context, target, name);
-            if (optimalAccessor instanceof OptimalPropertyAccessor optimalPropertyAccessor) {
+            if (optimalAccessor instanceof CompilablePropertyAccessor optimalPropertyAccessor) {
                 if (ReactiveUtils.isReactiveType(optimalPropertyAccessor.getPropertyType())) {
                     return this;
                 }

File: application/src/test/java/run/halo/app/config/ExtensionConfigurationTest.java
Patch:
@@ -19,10 +19,10 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.http.MediaType;
 import org.springframework.security.test.context.support.WithMockUser;
 import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.bean.override.mockito.MockitoBean;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import reactor.core.publisher.Flux;
 import run.halo.app.core.extension.Role;
@@ -47,7 +47,7 @@ class ExtensionConfigurationTest {
     @Autowired
     SchemeManager schemeManager;
 
-    @MockBean
+    @MockitoBean
     RoleService roleService;
 
     @BeforeEach

File: application/src/test/java/run/halo/app/config/WebFluxConfigTest.java
Patch:
@@ -13,10 +13,10 @@
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.TestConfiguration;
-import org.springframework.boot.test.mock.mockito.SpyBean;
 import org.springframework.boot.test.web.server.LocalServerPort;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Import;
+import org.springframework.test.context.bean.override.mockito.MockitoSpyBean;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import org.springframework.web.reactive.socket.WebSocketHandler;
 import org.springframework.web.reactive.socket.WebSocketMessage;
@@ -38,7 +38,7 @@ class WebFluxConfigTest {
     @Autowired
     WebTestClient webClient;
 
-    @SpyBean
+    @MockitoSpyBean
     RoleService roleService;
 
     @LocalServerPort

File: application/src/test/java/run/halo/app/content/CategoryPostCountUpdaterTest.java
Patch:
@@ -12,8 +12,8 @@
 import org.mockito.ArgumentCaptor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.SpyBean;
 import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.bean.override.mockito.MockitoSpyBean;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
@@ -46,7 +46,7 @@ class CategoryPostCountServiceIntegrationTest {
         @Autowired
         private SchemeManager schemeManager;
 
-        @SpyBean
+        @MockitoSpyBean
         private ExtensionClient client;
 
         @Autowired

File: application/src/test/java/run/halo/app/content/PostIntegrationTests.java
Patch:
@@ -12,9 +12,9 @@
 import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.http.MediaType;
 import org.springframework.security.test.context.support.WithMockUser;
+import org.springframework.test.context.bean.override.mockito.MockitoBean;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import reactor.core.publisher.Flux;
 import run.halo.app.core.extension.Role;
@@ -39,7 +39,7 @@ public class PostIntegrationTests {
     @Autowired
     private WebTestClient webTestClient;
 
-    @MockBean
+    @MockitoBean
     RoleService roleService;
 
     @BeforeEach

File: application/src/test/java/run/halo/app/content/comment/CommentServiceImplIntegrationTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.SpyBean;
 import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.bean.override.mockito.MockitoSpyBean;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
@@ -48,7 +48,7 @@ class CommentRemoveTest {
         @Autowired
         private SchemeManager schemeManager;
 
-        @SpyBean
+        @MockitoSpyBean
         private ReactiveExtensionClient reactiveClient;
 
         @Autowired
@@ -57,7 +57,7 @@ class CommentRemoveTest {
         @Autowired
         private IndexerFactory indexerFactory;
 
-        @SpyBean
+        @MockitoSpyBean
         private CommentServiceImpl commentService;
 
         Mono<Extension> deleteImmediately(Extension extension) {

File: application/src/test/java/run/halo/app/content/comment/ReplyServiceImplIntegrationTest.java
Patch:
@@ -14,8 +14,8 @@
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.SpyBean;
 import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.bean.override.mockito.MockitoSpyBean;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
@@ -56,7 +56,7 @@ private List<Reply> createReplies(int size) {
         @Autowired
         private SchemeManager schemeManager;
 
-        @SpyBean
+        @MockitoSpyBean
         private ReactiveExtensionClient reactiveClient;
 
         @Autowired
@@ -65,7 +65,7 @@ private List<Reply> createReplies(int size) {
         @Autowired
         private IndexerFactory indexerFactory;
 
-        @SpyBean
+        @MockitoSpyBean
         private ReplyServiceImpl replyService;
 
         Mono<Extension> deleteImmediately(Extension extension) {

File: application/src/test/java/run/halo/app/core/endpoint/console/UserEndpointIntegrationTest.java
Patch:
@@ -14,9 +14,9 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.security.test.context.support.WithMockUser;
 import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.bean.override.mockito.MockitoBean;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
@@ -37,7 +37,7 @@ public class UserEndpointIntegrationTest {
     @Autowired
     ReactiveExtensionClient client;
 
-    @MockBean
+    @MockitoBean
     RoleService roleService;
 
     @BeforeEach

File: application/src/test/java/run/halo/app/plugin/DefaultPluginApplicationContextFactoryTest.java
Patch:
@@ -9,13 +9,13 @@
 import org.junit.jupiter.api.Test;
 import org.pf4j.PluginWrapper;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.SpyBean;
+import org.springframework.test.context.bean.override.mockito.MockitoSpyBean;
 import run.halo.app.search.SearchService;
 
 @SpringBootTest
 class DefaultPluginApplicationContextFactoryTest {
 
-    @SpyBean
+    @MockitoSpyBean
     SpringPluginManager pluginManager;
 
     DefaultPluginApplicationContextFactory factory;

File: application/src/test/java/run/halo/app/plugin/DefaultSettingFetcherTest.java
Patch:
@@ -23,11 +23,11 @@
 import org.mockito.Spy;
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.skyscreamer.jsonassert.JSONAssert;
-import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.cache.Cache;
 import org.springframework.cache.CacheManager;
 import org.springframework.cache.concurrent.ConcurrentMapCache;
 import org.springframework.context.ApplicationContext;
+import org.springframework.test.context.bean.override.mockito.MockitoBean;
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.Plugin;
 import run.halo.app.extension.ConfigMap;
@@ -55,7 +55,7 @@ class DefaultSettingFetcherTest {
     @Mock
     private CacheManager cacheManager;
 
-    @MockBean
+    @MockitoBean
     private final PluginContext pluginContext = PluginContext.builder()
         .name("fake")
         .configMapName("fake-config")

File: application/src/test/java/run/halo/app/security/SuperAdminInitializerTest.java
Patch:
@@ -10,8 +10,8 @@
 import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.SpyBean;
 import org.springframework.security.crypto.password.PasswordEncoder;
+import org.springframework.test.context.bean.override.mockito.MockitoSpyBean;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import run.halo.app.core.extension.Role;
 import run.halo.app.core.extension.RoleBinding;
@@ -28,7 +28,7 @@
 @AutoConfigureTestDatabase
 class SuperAdminInitializerTest {
 
-    @SpyBean
+    @MockitoSpyBean
     ReactiveExtensionClient client;
 
     @Autowired

File: application/src/test/java/run/halo/app/theme/ThemeIntegrationTest.java
Patch:
@@ -11,11 +11,11 @@
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.TestConfiguration;
-import org.springframework.boot.test.mock.mockito.MockBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Import;
 import org.springframework.http.MediaType;
 import org.springframework.test.annotation.DirtiesContext;
+import org.springframework.test.context.bean.override.mockito.MockitoBean;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import org.springframework.web.reactive.function.server.RouterFunction;
 import org.springframework.web.reactive.function.server.RouterFunctions;
@@ -36,7 +36,7 @@ public class ThemeIntegrationTest {
     @Autowired
     WebTestClient webClient;
 
-    @MockBean
+    @MockitoBean
     InitializationStateGetter initializationStateGetter;
 
     @Autowired

File: application/src/test/java/run/halo/app/theme/dialect/GeneratorMetaProcessorTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
-import org.springframework.boot.test.mock.mockito.MockBean;
+import org.springframework.test.context.bean.override.mockito.MockitoBean;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import org.springframework.util.ResourceUtils;
 import org.springframework.web.server.ServerWebExchange;
@@ -27,10 +27,10 @@ class GeneratorMetaProcessorTest {
     @Autowired
     WebTestClient webClient;
 
-    @MockBean
+    @MockitoBean
     InitializationStateGetter initializationStateGetter;
 
-    @MockBean
+    @MockitoBean
     ThemeResolver themeResolver;
 
     @BeforeEach

File: application/src/test/java/run/halo/app/theme/message/ThemeMessageResolverIntegrationTest.java
Patch:
@@ -13,9 +13,9 @@
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
 import org.springframework.boot.test.context.SpringBootTest;
 import org.springframework.boot.test.context.TestConfiguration;
-import org.springframework.boot.test.mock.mockito.SpyBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.http.MediaType;
+import org.springframework.test.context.bean.override.mockito.MockitoSpyBean;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import org.springframework.util.ResourceUtils;
 import org.springframework.web.reactive.function.server.RequestPredicates;
@@ -38,14 +38,14 @@
 @AutoConfigureWebTestClient
 public class ThemeMessageResolverIntegrationTest {
 
-    @SpyBean
+    @MockitoSpyBean
     private ThemeResolver themeResolver;
 
     private URL defaultThemeUrl;
 
     private URL otherThemeUrl;
 
-    @SpyBean
+    @MockitoSpyBean
     private InitializationStateGetter initializationStateGetter;
 
     @Autowired

File: application/src/main/java/run/halo/app/theme/dialect/HaloProcessorDialect.java
Patch:
@@ -38,7 +38,7 @@ public Set<IProcessor> getProcessors(String dialectPrefix) {
         // add more processors
         processors.add(new GlobalHeadInjectionProcessor(dialectPrefix));
         processors.add(new TemplateFooterElementTagProcessor(dialectPrefix));
-        processors.add(new JsonNodePropertyAccessorBoundariesProcessor());
+        processors.add(new EvaluationContextEnhancer());
         processors.add(new CommentElementTagProcessor(dialectPrefix));
         processors.add(new CommentEnabledVariableProcessor());
         return processors;

File: application/src/test/java/run/halo/app/theme/ReactiveFinderExpressionParserTests.java
Patch:
@@ -38,7 +38,6 @@
  * Tests expression parser for reactive return value.
  *
  * @author guqing
- * @see ReactivePropertyAccessor
  * @see ReactiveSpelVariableExpressionEvaluator
  * @since 2.0.0
  */

File: application/src/main/java/run/halo/app/plugin/AggregatedRouterFunction.java
Patch:
@@ -9,6 +9,7 @@
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.endpoint.CustomEndpoint;
 import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;
+import run.halo.app.infra.SecureServerRequest;
 
 /**
  * Aggregated router function built from all custom endpoints.
@@ -28,7 +29,7 @@ public AggregatedRouterFunction(ObjectProvider<CustomEndpoint> customEndpoints)
 
     @Override
     public Mono<HandlerFunction<ServerResponse>> route(ServerRequest request) {
-        return aggregated.route(request);
+        return aggregated.route(new SecureServerRequest(request));
     }
 
     @Override

File: application/src/main/java/run/halo/app/plugin/DefaultPluginRouterFunctionRegistry.java
Patch:
@@ -11,6 +11,7 @@
 import org.springframework.web.reactive.function.server.ServerResponse;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
+import run.halo.app.infra.SecureServerRequest;
 
 /**
  * A composite {@link RouterFunction} implementation for plugin.
@@ -31,8 +32,9 @@ public DefaultPluginRouterFunctionRegistry() {
     @Override
     @NonNull
     public Mono<HandlerFunction<ServerResponse>> route(@NonNull ServerRequest request) {
+        var secureRequest = new SecureServerRequest(request);
         return Flux.fromIterable(this.routerFunctions)
-            .concatMap(routerFunction -> routerFunction.route(request))
+            .concatMap(routerFunction -> routerFunction.route(secureRequest))
             .next();
     }
 

File: application/src/main/java/run/halo/app/theme/dialect/CommentElementTagProcessor.java
Patch:
@@ -45,6 +45,6 @@ protected void doProcess(ITemplateContext context, IProcessableElementTag tag,
             structureHandler.replaceWith("", false);
             return;
         }
-        commentWidget.render(context, tag, structureHandler);
+        commentWidget.render(new SecureTemplateContext(context), tag, structureHandler);
     }
 }

File: application/src/main/java/run/halo/app/theme/dialect/GlobalHeadInjectionProcessor.java
Patch:
@@ -71,7 +71,9 @@ protected void doProcess(ITemplateContext context, IModel model,
 
         // apply processors to modelToInsert
         getTemplateHeadProcessors(context)
-            .concatMap(processor -> processor.process(context, modelToInsert, structureHandler))
+            .concatMap(processor -> processor.process(
+                new SecureTemplateContext(context), modelToInsert, structureHandler)
+            )
             .then()
             .block();
 

File: application/src/main/java/run/halo/app/theme/dialect/HaloPostTemplateHandler.java
Patch:
@@ -57,7 +57,8 @@ private IProcessableElementTag handleElementTag(
             var context = getContext();
             for (ElementTagPostProcessor elementTagPostProcessor : postProcessors) {
                 tagProcessorChain = tagProcessorChain.flatMap(
-                    tag -> elementTagPostProcessor.process(context, tag).defaultIfEmpty(tag)
+                    tag -> elementTagPostProcessor.process(new SecureTemplateContext(context), tag)
+                        .defaultIfEmpty(tag)
                 );
             }
             processedTag =

File: application/src/main/java/run/halo/app/theme/dialect/TemplateFooterElementTagProcessor.java
Patch:
@@ -58,8 +58,8 @@ protected void doProcess(ITemplateContext context, IProcessableElementTag tag,
         modelToInsert.add(context.getModelFactory().createText(globalFooterText));
 
         getTemplateFooterProcessors(context)
-            .concatMap(processor -> processor.process(context, tag,
-                structureHandler, modelToInsert)
+            .concatMap(processor -> processor.process(
+                new SecureTemplateContext(context), tag, structureHandler, modelToInsert)
             )
             .then()
             .block();

File: application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java
Patch:
@@ -476,7 +476,7 @@ private void satisfiesRequiresVersion(Plugin newPlugin) {
         Version version = systemVersion.get();
         // validate the plugin version
         // only use the nominal system version to compare, the format is like MAJOR.MINOR.PATCH
-        String systemVersion = version.getNormalVersion();
+        String systemVersion = version.toStableVersion().toString();
         String requires = newPlugin.getSpec().getRequires();
         if (!VersionUtils.satisfiesRequires(systemVersion, requires)) {
             throw new UnsatisfiedAttributeValueException(String.format(

File: application/src/main/java/run/halo/app/infra/DefaultSystemVersionSupplier.java
Patch:
@@ -26,9 +26,9 @@ public DefaultSystemVersionSupplier(ObjectProvider<BuildProperties> buildPropert
     public Version get() {
         var properties = buildProperties.getIfUnique();
         if (properties == null) {
-            return Version.valueOf(DEFAULT_VERSION);
+            return Version.parse(DEFAULT_VERSION);
         }
         var projectVersion = Objects.toString(properties.getVersion(), DEFAULT_VERSION);
-        return Version.valueOf(projectVersion);
+        return Version.parse(projectVersion);
     }
 }

File: application/src/main/java/run/halo/app/infra/utils/VersionUtils.java
Patch:
@@ -41,7 +41,7 @@ public static boolean checkVersionConstraint(String version, String constraint)
         try {
             return StringUtils.isBlank(constraint)
                 || "*".equals(constraint)
-                || Version.valueOf(version).satisfies(constraint);
+                || Version.parse(version).satisfies(constraint);
         } catch (Exception e) {
             throw new ServerWebInputException("Illegal requires version expression.", null, e);
         }

File: application/src/test/java/run/halo/app/core/extension/endpoint/PluginEndpointTest.java
Patch:
@@ -183,7 +183,7 @@ void setUp() throws URISyntaxException, IOException {
             webClient = WebTestClient.bindToRouterFunction(endpoint.endpoint())
                 .build();
 
-            lenient().when(systemVersionSupplier.get()).thenReturn(Version.valueOf("0.0.0"));
+            lenient().when(systemVersionSupplier.get()).thenReturn(Version.parse("0.0.0"));
             tempDirectory = Files.createTempDirectory("halo-test-plugin-upgrade-");
             plugin002 = tempDirectory.resolve("plugin-0.0.2.jar");
 

File: application/src/test/java/run/halo/app/core/extension/reconciler/ThemeReconcilerTest.java
Patch:
@@ -74,7 +74,7 @@ class ThemeReconcilerTest {
     @BeforeEach
     void setUp() throws IOException {
         defaultTheme = ResourceUtils.getFile("classpath:themes/default");
-        lenient().when(systemVersionSupplier.get()).thenReturn(Version.valueOf("0.0.0"));
+        lenient().when(systemVersionSupplier.get()).thenReturn(Version.parse("0.0.0"));
     }
 
     @Test
@@ -190,7 +190,7 @@ void reconcileDeleteRetryWhenThrowException() {
 
     @Test
     void reconcileStatus() {
-        when(systemVersionSupplier.get()).thenReturn(Version.valueOf("2.3.0"));
+        when(systemVersionSupplier.get()).thenReturn(Version.parse("2.3.0"));
         Path testWorkDir = tempDirectory.resolve("reconcile-delete");
         when(themeRoot.get()).thenReturn(testWorkDir);
 

File: application/src/test/java/run/halo/app/core/extension/service/impl/PluginServiceImplTest.java
Patch:
@@ -123,7 +123,7 @@ void setUp() throws URISyntaxException, IOException {
                 getClass().getClassLoader().getResource("plugin/plugin-0.0.2")).toURI();
             FileUtils.jar(Paths.get(fakePluingUri), tempDirectory.resolve("plugin-0.0.2.jar"));
 
-            lenient().when(systemVersionSupplier.get()).thenReturn(Version.valueOf("0.0.0"));
+            lenient().when(systemVersionSupplier.get()).thenReturn(Version.parse("0.0.0"));
         }
 
         @Test

File: application/src/test/java/run/halo/app/core/extension/theme/ThemeServiceImplTest.java
Patch:
@@ -78,7 +78,7 @@ void setUp() throws IOException {
         // init the folder
         Files.createDirectory(themeRoot.get());
 
-        lenient().when(systemVersionSupplier.get()).thenReturn(Version.valueOf("0.0.0"));
+        lenient().when(systemVersionSupplier.get()).thenReturn(Version.parse("0.0.0"));
     }
 
     @AfterEach

File: application/src/test/java/run/halo/app/infra/DefaultSystemVersionSupplierTest.java
Patch:
@@ -60,6 +60,6 @@ void getWhenBuildPropertiesAndVersionNotEmpty() {
         when(buildPropertiesProvider.getIfUnique()).thenReturn(buildProperties);
         version = systemVersionSupplier.get();
         assertThat(version.toString()).isEqualTo("2.0.0-SNAPSHOT");
-        assertThat(version.getPreReleaseVersion()).isEqualTo("SNAPSHOT");
+        assertThat(version.preReleaseVersion().orElseThrow()).isEqualTo("SNAPSHOT");
     }
 }
\ No newline at end of file

File: application/src/main/java/run/halo/app/theme/finders/vo/SiteSettingVo.java
Patch:
@@ -25,6 +25,9 @@ public class SiteSettingVo {
     @With
     URL url;
 
+    @With
+    String version;
+
     String subtitle;
 
     String logo;

File: application/src/test/java/run/halo/app/theme/ThemeLocaleContextResolverTest.java
Patch:
@@ -12,7 +12,7 @@
 import static java.util.Locale.UK;
 import static java.util.Locale.US;
 import static org.assertj.core.api.Assertions.assertThat;
-import static run.halo.app.theme.ThemeLocaleContextResolver.DEFAULT_PARAMETER_NAME;
+import static run.halo.app.theme.ThemeLocaleContextResolver.LANGUAGE_COOKIE_NAME;
 import static run.halo.app.theme.ThemeLocaleContextResolver.TIME_ZONE_COOKIE_NAME;
 
 import java.util.Arrays;
@@ -187,7 +187,7 @@ private ServerWebExchange exchangeTimeZone(Locale... locales) {
         return MockServerWebExchange.from(
             MockServerHttpRequest.get("").acceptLanguageAsLocales(locales)
                 .cookie(new HttpCookie(TIME_ZONE_COOKIE_NAME, "America/Adak"))
-                .cookie(new HttpCookie(DEFAULT_PARAMETER_NAME, "en")));
+                .cookie(new HttpCookie(LANGUAGE_COOKIE_NAME, "en")));
     }
 
     private ServerWebExchange exchangeForParam(String language) {

File: application/src/main/java/run/halo/app/theme/ThemeLocaleContextResolver.java
Patch:
@@ -51,7 +51,7 @@ private Locale getLocale(ServerWebExchange exchange) {
 
         Locale locale;
         if (StringUtils.isNotBlank(language)) {
-            locale = new Locale(language);
+            locale = Locale.forLanguageTag(language);
         } else if (exchange.getAttribute(LOCALE_REQUEST_ATTRIBUTE_NAME) != null) {
             locale = exchange.getAttribute(LOCALE_REQUEST_ATTRIBUTE_NAME);
         } else {

File: application/src/main/java/run/halo/app/core/attachment/reconciler/AttachmentReconciler.java
Patch:
@@ -58,7 +58,7 @@ public Result reconcile(Request request) {
             var annotations = attachment.getMetadata().getAnnotations();
             if (annotations != null) {
                 attachmentService.getPermalink(attachment)
-                    .map(URI::toString)
+                    .map(URI::toASCIIString)
                     .switchIfEmpty(Mono.fromSupplier(() -> {
                         // Only for back-compatibility
                         return annotations.get(Constant.EXTERNAL_LINK_ANNO_KEY);

File: application/src/main/java/run/halo/app/core/extension/service/UserServiceImpl.java
Patch:
@@ -133,6 +133,7 @@ public Mono<User> grantRoles(String username, Set<String> roles) {
                         var mutableRoles = new HashSet<>(roles);
                         mutableRoles.removeAll(existingRoles);
                         return mutableRoles.stream()
+                            .filter(StringUtils::hasText)
                             .map(roleName -> RoleBinding.create(username, roleName));
                     }).flatMap(client::create))
                     .then(Mono.defer(() -> {

File: application/src/main/java/run/halo/app/core/attachment/ThumbnailGenerator.java
Patch:
@@ -74,7 +74,7 @@ private void generateThumbnail(Path tempImagePath) throws IOException {
             throw new UnsupportedOperationException(
                 "Unsupported image format for: " + formatNameOpt.orElse("unknown"));
         }
-        var thumbnail = Scalr.resize(img, Scalr.Method.SPEED, Scalr.Mode.FIT_TO_WIDTH,
+        var thumbnail = Scalr.resize(img, Scalr.Method.AUTOMATIC, Scalr.Mode.FIT_TO_WIDTH,
             size.getWidth());
         var formatName = formatNameOpt.orElse("jpg");
         var thumbnailFile = getThumbnailFile(formatName);

File: application/src/main/java/run/halo/app/core/attachment/impl/LocalThumbnailServiceImpl.java
Patch:
@@ -45,6 +45,7 @@
 import run.halo.app.extension.PageRequestImpl;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.infra.ExternalUrlSupplier;
+import run.halo.app.infra.exception.NotFoundException;
 
 @Slf4j
 @Component
@@ -76,7 +77,8 @@ static String getYear() {
     @Override
     public Mono<URI> getOriginalImageUri(URI thumbnailUri) {
         return fetchThumbnail(thumbnailUri)
-            .map(local -> URI.create(local.getSpec().getImageUri()));
+            .map(local -> URI.create(local.getSpec().getImageUri()))
+            .switchIfEmpty(Mono.error(() -> new NotFoundException("Resource not found.")));
     }
 
     @Override

File: application/src/main/java/run/halo/app/infra/SchemeInitializer.java
Patch:
@@ -490,7 +490,7 @@ public void onApplicationEvent(@NonNull ApplicationContextInitializedEvent event
             );
             is.add(new IndexSpec()
                 .setName("spec.slug")
-                .setUnique(true)
+                .setUnique(false)
                 .setIndexFunc(
                     simpleAttribute(SinglePage.class, page -> Optional.ofNullable(page.getSpec())
                         .map(SinglePage.SinglePageSpec::getSlug)

File: application/src/main/java/run/halo/app/core/extension/endpoint/PostEndpoint.java
Patch:
@@ -403,7 +403,7 @@ Mono<ServerResponse> listPost(ServerRequest request) {
     /**
      * Convenient for testing, to avoid waiting too long for post published when testing.
      */
-    public void setMaxAttemptsWaitForPublish(int maxAttempts) {
+    void setMaxAttemptsWaitForPublish(int maxAttempts) {
         this.maxAttemptsWaitForPublish = maxAttempts;
     }
 }

File: application/src/main/java/run/halo/app/core/attachment/LocalThumbnailService.java
Patch:
@@ -19,7 +19,7 @@ public interface LocalThumbnailService {
      * @return The original image URI, {@link NotFoundException} will be thrown if the thumbnail
      * record does not exist by the given thumbnail URI
      */
-    Mono<URI> getOriginalImageUri(String thumbnailUri);
+    Mono<URI> getOriginalImageUri(URI thumbnailUri);
 
     /**
      * <p>Gets thumbnail file resource for the given year, size and filename.</p>
@@ -29,7 +29,7 @@ public interface LocalThumbnailService {
      * @param thumbnailUri The thumbnail URI string
      * @return The thumbnail file resource
      */
-    Mono<Resource> getThumbnail(String thumbnailUri);
+    Mono<Resource> getThumbnail(URI thumbnailUri);
 
     /**
      * <p>Gets thumbnail file resource for the given URI and size.</p>
@@ -77,5 +77,5 @@ public interface LocalThumbnailService {
 
     Path toFilePath(String thumbRelativeUnixPath);
 
-    String buildThumbnailUri(String year, ThumbnailSize size, String filename);
+    URI buildThumbnailUri(String year, ThumbnailSize size, String filename);
 }

File: application/src/main/java/run/halo/app/theme/finders/ThumbnailFinder.java
Patch:
@@ -11,10 +11,10 @@
 public interface ThumbnailFinder {
 
     /**
-     * Generate thumbnail url from given image url and size.
+     * Generate thumbnail uri from given image uri and size.
      *
      * @param size the size of thumbnail to generate
      * @return the generated thumbnail url
      */
-    Mono<String> gen(String url, String size);
+    Mono<String> gen(String uri, String size);
 }

File: application/src/main/java/run/halo/app/theme/finders/impl/ThumbnailFinderImpl.java
Patch:
@@ -14,9 +14,9 @@ public class ThumbnailFinderImpl implements ThumbnailFinder {
     private final ThumbnailService thumbnailService;
 
     @Override
-    public Mono<String> gen(String url, String size) {
-        return thumbnailService.generate(URI.create(url), ThumbnailSize.fromName(size))
+    public Mono<String> gen(String uriStr, String size) {
+        return thumbnailService.generate(URI.create(uriStr), ThumbnailSize.fromName(size))
             .map(URI::toString)
-            .defaultIfEmpty(url);
+            .defaultIfEmpty(uriStr);
     }
 }

File: application/src/main/java/run/halo/app/core/extension/service/DefaultRoleService.java
Patch:
@@ -72,7 +72,7 @@ public Flux<String> getRolesByUsername(String username) {
     @Override
     public Mono<Map<String, Collection<String>>> getRolesByUsernames(Collection<String> usernames) {
         if (CollectionUtils.isEmpty(usernames)) {
-            return Mono.empty();
+            return Mono.just(Map.of());
         }
         var subjects = usernames.stream().map(DefaultRoleService::toUserSubject)
             .map(Object::toString)

File: api/src/main/java/run/halo/app/core/extension/attachment/Attachment.java
Patch:
@@ -5,6 +5,7 @@
 
 import io.swagger.v3.oas.annotations.media.ArraySchema;
 import io.swagger.v3.oas.annotations.media.Schema;
+import java.util.Map;
 import java.util.Set;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
@@ -64,5 +65,6 @@ public static class AttachmentStatus {
             """)
         private String permalink;
 
+        private Map<String, String> thumbnails;
     }
 }

File: application/src/test/java/run/halo/app/infra/DefaultExternalLinkProcessorTest.java
Patch:
@@ -45,5 +45,7 @@ void process() throws MalformedURLException {
 
         when(externalUrlSupplier.getRaw()).thenReturn(URI.create("https://halo.run/").toURL());
         assertThat(externalLinkProcessor.processLink("/test")).isEqualTo("https://halo.run/test");
+        assertThat(externalLinkProcessor.processLink("https://halo.run/test"))
+            .isEqualTo("https://halo.run/test");
     }
-}
\ No newline at end of file
+}

File: application/src/main/java/run/halo/app/extension/store/ReactiveExtensionStoreClient.java
Patch:
@@ -12,6 +12,8 @@ public interface ReactiveExtensionStoreClient {
 
     Mono<Page<ExtensionStore>> listByNamePrefix(String prefix, Pageable pageable);
 
+    Mono<Long> countByNamePrefix(String prefix);
+
     /**
      * List stores by names and return data according to given names order.
      *

File: application/src/main/java/run/halo/app/core/extension/service/UserServiceImpl.java
Patch:
@@ -18,7 +18,6 @@
 import org.springframework.data.domain.Sort;
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
 import org.springframework.util.Assert;
 import org.springframework.util.CollectionUtils;
 import org.springframework.util.StringUtils;
@@ -147,7 +146,6 @@ public Mono<User> grantRoles(String username, Set<String> roles) {
     }
 
     @Override
-    @Transactional
     public Mono<User> signUp(User user, String password) {
         if (!StringUtils.hasText(password)) {
             throw new IllegalArgumentException("Password must not be blank");

File: application/src/main/java/run/halo/app/extension/store/ReactiveExtensionStoreClientImpl.java
Patch:
@@ -8,7 +8,6 @@
 import org.springframework.data.domain.PageImpl;
 import org.springframework.data.domain.Pageable;
 import org.springframework.stereotype.Component;
-import org.springframework.transaction.annotation.Transactional;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import run.halo.app.infra.exception.DuplicateNameException;
@@ -61,7 +60,6 @@ public Mono<ExtensionStore> update(String name, Long version, byte[] data) {
     }
 
     @Override
-    @Transactional
     public Mono<ExtensionStore> delete(String name, Long version) {
         return repository.findById(name)
             .flatMap(extensionStore -> {

File: application/src/main/java/run/halo/app/migration/impl/MigrationServiceImpl.java
Patch:
@@ -29,7 +29,6 @@
 import org.springframework.core.io.Resource;
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.stereotype.Service;
-import org.springframework.transaction.annotation.Transactional;
 import org.springframework.util.StringUtils;
 import org.springframework.web.server.ServerWebInputException;
 import reactor.core.Exceptions;
@@ -136,7 +135,6 @@ public Mono<Resource> download(Backup backup) {
     }
 
     @Override
-    @Transactional
     public Mono<Void> restore(Publisher<DataBuffer> content) {
         return Mono.usingWhen(
             createTempDir("halo-restore-", scheduler),

File: api/src/main/java/run/halo/app/core/extension/User.java
Patch:
@@ -46,6 +46,8 @@ public class User extends AbstractExtension {
 
     public static final String HIDDEN_USER_LABEL = "halo.run/hidden-user";
 
+    public static final String REQUEST_TO_UPDATE = "halo.run/request-to-update";
+
     @Schema(requiredMode = REQUIRED)
     private UserSpec spec = new UserSpec();
 

File: application/src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.Set;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Role;
 import run.halo.app.core.extension.User;
 
 public interface UserService {
@@ -16,8 +15,6 @@ public interface UserService {
 
     Mono<User> updateWithRawPassword(String username, String rawPassword);
 
-    Flux<Role> listRoles(String username);
-
     Mono<User> grantRoles(String username, Set<String> roles);
 
     Mono<User> signUp(User user, String password);

File: application/src/test/java/run/halo/app/security/authorization/AuthorityUtilsTest.java
Patch:
@@ -29,7 +29,7 @@ void authoritiesToRolesTest() {
 
         var roles = authoritiesToRoles(authorities);
 
-        assertEquals(Set.of("admin", "owner", "manager"), roles);
+        assertEquals(Set.of("admin", "owner", "manager", "faker", "system:read"), roles);
     }
 
     @Test

File: application/src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -27,4 +27,6 @@ public interface UserService {
     Mono<Boolean> confirmPassword(String username, String rawPassword);
 
     Flux<User> listByEmail(String email);
+
+    String encryptPassword(String rawPassword);
 }

File: application/src/main/java/run/halo/app/plugin/DefaultReactiveSettingFetcher.java
Patch:
@@ -7,6 +7,7 @@
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.Objects;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.BeansException;
 import org.springframework.beans.factory.DisposableBean;
@@ -186,7 +187,7 @@ private Map<String, JsonNode> getCachedConfigData(@NonNull Cache cache) {
     @Override
     public Controller setupWith(ControllerBuilder builder) {
         ExtensionMatcher matcher =
-            extension -> configMapName.equals(extension.getMetadata().getName());
+            extension -> Objects.equals(extension.getMetadata().getName(), configMapName);
         return builder
             .extension(new ConfigMap())
             .syncAllOnStart(true)

File: api/src/main/java/run/halo/app/plugin/extensionpoint/ExtensionGetter.java
Patch:
@@ -16,13 +16,13 @@ public interface ExtensionGetter {
     <T extends ExtensionPoint> Mono<T> getEnabledExtension(Class<T> extensionPoint);
 
     /**
-     * Get the extension(s) according to the {@link ExtensionPointDefinition} queried
+     * Get the extension(s) according to the {@code ExtensionPointDefinition} queried
      * by incoming extension point class.
      *
      * @param extensionPoint extension point class
      * @return implementations of the corresponding extension point.
      * @throws IllegalArgumentException if the incoming extension point class does not have
-     *                                  the {@link ExtensionPointDefinition}.
+     *                                  the {@code ExtensionPointDefinition}.
      */
     <T extends ExtensionPoint> Flux<T> getEnabledExtensions(Class<T> extensionPoint);
 

File: application/src/main/java/run/halo/app/plugin/SharedApplicationContextFactory.java
Patch:
@@ -14,6 +14,7 @@
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.notification.NotificationCenter;
 import run.halo.app.notification.NotificationReasonEmitter;
+import run.halo.app.plugin.extensionpoint.ExtensionGetter;
 import run.halo.app.security.LoginHandlerEnhancer;
 
 /**
@@ -66,6 +67,8 @@ public static ApplicationContext create(ApplicationContext rootContext) {
             .ifUnique(pluginsRootGetter ->
                 beanFactory.registerSingleton("pluginsRootGetter", pluginsRootGetter)
             );
+        beanFactory.registerSingleton("extensionGetter",
+            rootContext.getBean(ExtensionGetter.class));
         // TODO add more shared instance here
 
         sharedContext.refresh();

File: application/src/main/java/run/halo/app/theme/config/ThemeWebFluxConfigurer.java
Patch:
@@ -80,6 +80,9 @@ protected Mono<Resource> resolveResourceInternal(ServerWebExchange exchange,
             var assetsPath = themeRoot.resolve(themeName + "/templates/assets/" + resourcePaths);
             FileUtils.checkDirectoryTraversal(themeRoot, assetsPath);
             var location = new FileSystemResource(assetsPath);
+            if (!location.isReadable()) {
+                return Mono.empty();
+            }
             return Mono.just(location);
         }
 

File: application/src/main/java/run/halo/app/security/authentication/rememberme/PersistentTokenBasedRememberMeServices.java
Patch:
@@ -112,7 +112,7 @@ protected Mono<UserDetails> processAutoLoginCookie(String[] cookieTokens,
                 log.debug("Refreshing persistent login token for user '{}', series '{}'",
                     token.getUsername(), token.getSeries());
                 var newToken = new PersistentRememberMeToken(token.getUsername(), token.getSeries(),
-                    generateTokenData(), new Date());
+                    token.getTokenValue(), new Date());
                 return Mono.just(newToken);
             })
             .flatMap(newToken -> updateToken(newToken)

File: application/src/main/java/run/halo/app/plugin/DefaultPluginApplicationContextFactory.java
Patch:
@@ -85,6 +85,7 @@ public ApplicationContext create(String pluginId) {
 
         sw.start("RegisterBeans");
         var beanFactory = context.getBeanFactory();
+        beanFactory.registerSingleton("pluginWrapper", pluginWrapper);
         context.registerBean(AggregatedRouterFunction.class);
 
         if (pluginWrapper.getPlugin() instanceof SpringPlugin springPlugin) {

File: application/src/test/java/run/halo/app/plugin/DefaultPluginApplicationContextFactoryTest.java
Patch:
@@ -22,7 +22,7 @@ class DefaultPluginApplicationContextFactoryTest {
 
     @BeforeEach
     void setUp() {
-        factory = new DefaultPluginApplicationContextFactory((SpringPluginManager) pluginManager);
+        factory = new DefaultPluginApplicationContextFactory(pluginManager);
     }
 
     @Test
@@ -41,6 +41,7 @@ void shouldCreateCorrectly() {
 
         assertInstanceOf(PluginApplicationContext.class, context);
         assertNotNull(context.getBeanProvider(SearchService.class).getIfUnique());
+        assertNotNull(context.getBeanProvider(PluginsRootGetter.class).getIfUnique());
         // TODO Add more assertions here.
     }
 

File: application/src/main/java/run/halo/app/plugin/DefaultPluginApplicationContextFactory.java
Patch:
@@ -86,7 +86,6 @@ public ApplicationContext create(String pluginId) {
         sw.start("RegisterBeans");
         var beanFactory = context.getBeanFactory();
         context.registerBean(AggregatedRouterFunction.class);
-        beanFactory.registerSingleton("pluginWrapper", pluginWrapper);
 
         if (pluginWrapper.getPlugin() instanceof SpringPlugin springPlugin) {
             beanFactory.registerSingleton("pluginContext", springPlugin.getPluginContext());

File: application/src/main/java/run/halo/app/plugin/SpringPlugin.java
Patch:
@@ -40,9 +40,6 @@ public void start() {
             log.info("After publishing plugin starting event for plugin {}", pluginId);
             if (pluginOpt.isPresent()) {
                 this.delegate = pluginOpt.get();
-                if (this.delegate instanceof BasePlugin basePlugin) {
-                    basePlugin.setContext(pluginContext);
-                }
                 log.info("Starting {} for plugin {}", this.delegate, pluginId);
                 this.delegate.start();
                 log.info("Started {} for plugin {}", this.delegate, pluginId);

File: application/src/main/java/run/halo/app/theme/finders/PluginFinder.java
Patch:
@@ -9,4 +9,6 @@
 public interface PluginFinder {
 
     boolean available(String pluginName);
+
+    boolean available(String pluginName, String requiresVersion);
 }

File: application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java
Patch:
@@ -348,6 +348,7 @@ private static class DocumentConverter implements Converter<Document, HaloDocume
         public HaloDocument convert(Document doc) {
             var haloDoc = new HaloDocument();
             haloDoc.setId(doc.get("id"));
+            haloDoc.setType(doc.get("type"));
             haloDoc.setMetadataName(doc.get("name"));
             haloDoc.setTitle(doc.get("title"));
             haloDoc.setDescription(doc.get("description"));

File: application/src/test/java/run/halo/app/search/lucene/LuceneSearchEngineIntegrationTest.java
Patch:
@@ -102,6 +102,7 @@ void assertHasResult(int maxAttempts) {
                     assertEquals(1, hits.size());
                     var doc = hits.get(0);
                     assertEquals("post.content.halo.run-first-post", doc.getId());
+                    assertEquals("post.content.halo.run", doc.getType());
                     assertEquals("first <my-tag>halo</my-tag> post", doc.getTitle());
                     assertNull(doc.getDescription());
                     assertEquals("<my-tag>halo</my-tag>", doc.getContent());

File: application/src/main/java/run/halo/app/plugin/PluginAutoConfiguration.java
Patch:
@@ -43,7 +43,7 @@ public PluginRequestMappingHandlerMapping pluginRequestMappingHandlerMapping(
     }
 
     @Bean
-    public PluginManager pluginManager(ApplicationContext context,
+    public SpringPluginManager pluginManager(ApplicationContext context,
         SystemVersionSupplier systemVersionSupplier,
         PluginProperties pluginProperties) {
         return new HaloPluginManager(context, pluginProperties, systemVersionSupplier);

File: application/src/main/java/run/halo/app/plugin/SharedApplicationContextFactory.java
Patch:
@@ -14,6 +14,7 @@
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.notification.NotificationCenter;
 import run.halo.app.notification.NotificationReasonEmitter;
+import run.halo.app.security.LoginHandlerEnhancer;
 
 /**
  * Utility for creating shared application context.
@@ -59,6 +60,8 @@ public static ApplicationContext create(ApplicationContext rootContext) {
             rootContext.getBean(PostContentService.class));
         beanFactory.registerSingleton("cacheManager",
             rootContext.getBean(CacheManager.class));
+        beanFactory.registerSingleton("loginHandlerEnhancer",
+            rootContext.getBean(LoginHandlerEnhancer.class));
         // TODO add more shared instance here
 
         sharedContext.refresh();

File: api/src/main/java/run/halo/app/core/extension/Device.java
Patch:
@@ -19,7 +19,7 @@
 public class Device extends AbstractExtension {
     public static final String GROUP = "security.halo.run";
     public static final String VERSION = "v1alpha1";
-    public static final String KIND = "v1alpha1";
+    public static final String KIND = "Device";
 
     @Schema(requiredMode = REQUIRED)
     private Spec spec;

File: application/src/main/java/run/halo/app/plugin/DefaultReactiveSettingFetcher.java
Patch:
@@ -162,13 +162,13 @@ public Result reconcile(Request request) {
                 if (configMapData != null) {
                     configMapData.forEach((key, value) -> result.put(key, readTree(value)));
                 }
+                // update cache
+                cache.put(pluginName, result);
                 applicationContext.publishEvent(PluginConfigUpdatedEvent.builder()
                     .source(this)
                     .oldConfig(existData)
                     .newConfig(result)
                     .build());
-                // update cache
-                cache.put(pluginName, result);
             });
         return Result.doNotRetry();
     }

File: application/src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java
Patch:
@@ -158,7 +158,7 @@ public Result reconcile(Request request) {
                         }
                     }
                     return result;
-                } catch (Exception e) {
+                } catch (Throwable e) {
                     status.getConditions().addAndEvictFIFO(Condition.builder()
                         .type(ConditionType.READY)
                         .status(ConditionStatus.FALSE)
@@ -313,7 +313,7 @@ private Result enablePlugin(Plugin plugin) {
                     Failed to start plugin %s(%s).\
                     """.formatted(pluginName, pluginState));
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             conditions.addAndEvictFIFO(Condition.builder()
                 .type(ConditionType.READY)
                 .status(ConditionStatus.FALSE)
@@ -365,7 +365,7 @@ private Result disablePlugin(Plugin plugin) {
             }
             try {
                 pluginManager.disablePlugin(pluginName);
-            } catch (Exception e) {
+            } catch (Throwable e) {
                 conditions.addAndEvictFIFO(Condition.builder()
                     .type(ConditionType.READY)
                     .status(ConditionStatus.FALSE)

File: api/src/main/java/run/halo/app/theme/router/ModelConst.java
Patch:
@@ -9,5 +9,6 @@
 public enum ModelConst {
     ;
     public static final String TEMPLATE_ID = "_templateId";
+    public static final String POWERED_BY_HALO_TEMPLATE_ENGINE = "poweredByHaloTemplateEngine";
     public static final Integer DEFAULT_PAGE_SIZE = 10;
 }

File: application/src/main/java/run/halo/app/config/HaloConfiguration.java
Patch:
@@ -5,12 +5,14 @@
 import java.io.IOException;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
+import org.springframework.cache.annotation.EnableCaching;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.scheduling.annotation.EnableAsync;
 import run.halo.app.infra.properties.HaloProperties;
 import run.halo.app.search.lucene.LuceneSearchEngine;
 
+@EnableCaching
 @Configuration(proxyBeanMethods = false)
 @EnableAsync
 public class HaloConfiguration {

File: application/src/main/java/run/halo/app/theme/HaloViewResolver.java
Patch:
@@ -15,8 +15,8 @@
 import org.thymeleaf.spring6.view.reactive.ThymeleafReactiveViewResolver;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.cache.PageCacheWebFilter;
 import run.halo.app.theme.finders.FinderRegistry;
+import run.halo.app.theme.router.ModelConst;
 
 @Component("thymeleafReactiveViewResolver")
 public class HaloViewResolver extends ThymeleafReactiveViewResolver {
@@ -53,7 +53,7 @@ public Mono<Void> render(Map<String, ?> model, MediaType contentType,
             return themeResolver.getTheme(exchange).flatMap(theme -> {
                 // calculate the engine before rendering
                 setTemplateEngine(engineManager.getTemplateEngine(theme));
-                exchange.getAttributes().put(PageCacheWebFilter.REQUEST_TO_CACHE, true);
+                exchange.getAttributes().put(ModelConst.POWERED_BY_HALO_TEMPLATE_ENGINE, true);
                 return super.render(model, contentType, exchange);
             });
         }

File: application/src/test/java/run/halo/app/theme/dialect/CommentElementTagProcessorTest.java
Patch:
@@ -29,7 +29,6 @@
 import reactor.core.publisher.Mono;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;
-import run.halo.app.plugin.ExtensionComponentsFinder;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
 
 /**

File: application/src/main/java/run/halo/app/theme/finders/CategoryFinder.java
Patch:
@@ -30,4 +30,6 @@ public interface CategoryFinder {
     Flux<CategoryTreeVo> listAsTree(String name);
 
     Mono<CategoryVo> getParentByName(String name);
+
+    Flux<CategoryVo> getBreadcrumbs(String name);
 }

File: application/src/main/java/run/halo/app/security/DefaultUserDetailService.java
Patch:
@@ -22,6 +22,7 @@
 import run.halo.app.extension.GroupKind;
 import run.halo.app.infra.exception.UserNotFoundException;
 import run.halo.app.security.authentication.login.HaloUser;
+import run.halo.app.security.authentication.twofactor.TwoFactorUtils;
 
 public class DefaultUserDetailService
     implements ReactiveUserDetailsService, ReactiveUserDetailsPasswordService {
@@ -63,10 +64,9 @@ public Mono<UserDetails> findByUsername(String username) {
                     .doOnNext(userBuilder::authorities);
 
                 return setAuthorities.then(Mono.fromSupplier(() -> {
-                    var twoFactorAuthEnabled =
-                        requireNonNullElse(user.getSpec().getTwoFactorAuthEnabled(), false);
+                    var twoFactorAuthSettings = TwoFactorUtils.getTwoFactorAuthSettings(user);
                     return new HaloUser.Builder(userBuilder.build())
-                        .twoFactorAuthEnabled(twoFactorAuthEnabled)
+                        .twoFactorAuthEnabled(twoFactorAuthSettings.isAvailable())
                         .totpEncryptedSecret(user.getSpec().getTotpEncryptedSecret())
                         .build();
                 }));

File: application/src/main/java/run/halo/app/theme/finders/impl/PostFinderImpl.java
Patch:
@@ -165,7 +165,7 @@ public Mono<ListResult<ListedPostVo>> listByCategory(Integer page, Integer size,
     private Flux<Category> listChildrenCategories(String categoryName) {
         if (StringUtils.isBlank(categoryName)) {
             return client.listAll(Category.class, new ListOptions(),
-                Sort.by(Sort.Order.asc("metadata.creationTimeStamp"),
+                Sort.by(Sort.Order.asc("metadata.creationTimestamp"),
                     Sort.Order.desc("metadata.name")));
         }
         return categoryService.listChildren(categoryName);

File: application/src/main/java/run/halo/app/security/device/DeviceEndpoint.java
Patch:
@@ -19,6 +19,7 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.security.core.context.ReactiveSecurityContextHolder;
 import org.springframework.security.core.context.SecurityContext;
+import org.springframework.session.ReactiveFindByIndexNameSessionRepository;
 import org.springframework.session.Session;
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.function.server.RouterFunction;
@@ -31,7 +32,6 @@
 import run.halo.app.extension.ListOptions;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.router.selector.FieldSelector;
-import run.halo.app.security.session.ReactiveIndexedSessionRepository;
 
 /**
  * Device endpoint for user profile,every user can only manage their own devices.
@@ -43,7 +43,7 @@
 @RequiredArgsConstructor
 public class DeviceEndpoint implements CustomEndpoint {
     private final ReactiveExtensionClient client;
-    private final ReactiveIndexedSessionRepository<?> sessionRepository;
+    private final ReactiveFindByIndexNameSessionRepository<?> sessionRepository;
     private final DeviceService deviceService;
 
     @Override

File: api/src/main/java/run/halo/app/search/SearchParam.java
Patch:
@@ -11,6 +11,7 @@
 import org.springframework.util.StringUtils;
 import org.springframework.web.server.ServerWebInputException;
 
+@Deprecated(forRemoval = true, since = "2.17")
 public class SearchParam {
 
     private static final int DEFAULT_LIMIT = 10;

File: api/src/main/java/run/halo/app/search/SearchResult.java
Patch:
@@ -4,8 +4,8 @@
 import lombok.Data;
 
 @Data
-public class SearchResult<T> {
-    private List<T> hits;
+public class SearchResult {
+    private List<HaloDocument> hits;
     private String keyword;
     private Long total;
     private int limit;

File: api/src/main/java/run/halo/app/search/post/PostDoc.java
Patch:
@@ -3,6 +3,7 @@
 import java.time.Instant;
 import org.springframework.util.Assert;
 
+@Deprecated(forRemoval = true, since = "2.17")
 public record PostDoc(String name,
                       String title,
                       String excerpt,

File: api/src/main/java/run/halo/app/search/post/PostHit.java
Patch:
@@ -4,6 +4,7 @@
 import lombok.Data;
 
 @Data
+@Deprecated(forRemoval = true, since = "2.17")
 public class PostHit {
 
     private String name;

File: application/src/main/java/run/halo/app/plugin/HaloPluginManager.java
Patch:
@@ -79,7 +79,8 @@ protected ExtensionFinder createExtensionFinder() {
     @Override
     protected PluginFactory createPluginFactory() {
         var contextFactory = new DefaultPluginApplicationContextFactory(this);
-        return new SpringPluginFactory(contextFactory);
+        var pluginGetter = rootContext.getBean(PluginGetter.class);
+        return new SpringPluginFactory(contextFactory, pluginGetter);
     }
 
     @Override

File: application/src/main/java/run/halo/app/plugin/SharedApplicationContextFactory.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.plugin;
 
+import org.springframework.cache.CacheManager;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.support.GenericApplicationContext;
 import org.springframework.security.web.server.context.ServerSecurityContextRepository;
@@ -56,6 +57,8 @@ public static ApplicationContext create(ApplicationContext rootContext) {
             rootContext.getBean(ExternalLinkProcessor.class));
         beanFactory.registerSingleton("postContentService",
             rootContext.getBean(PostContentService.class));
+        beanFactory.registerSingleton("cacheManager",
+            rootContext.getBean(CacheManager.class));
         // TODO add more shared instance here
 
         sharedContext.refresh();

File: application/src/main/java/run/halo/app/notification/DefaultNotificationSender.java
Patch:
@@ -66,7 +66,7 @@ public Mono<Void> sendNotification(String notifierExtensionName, NotificationCon
 
     Mono<ReactiveNotifier> selectNotifier(String notifierExtensionName) {
         return client.fetch(ExtensionDefinition.class, notifierExtensionName)
-            .flatMap(extDefinition -> extensionGetter.getEnabledExtensionByDefinition(
+            .flatMap(extDefinition -> extensionGetter.getEnabledExtensions(
                     ReactiveNotifier.class)
                 .filter(notifier -> notifier.getClass().getName()
                     .equals(extDefinition.getSpec().getClassName())

File: application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordDelegatingAuthenticationManager.java
Patch:
@@ -26,7 +26,7 @@ public UsernamePasswordDelegatingAuthenticationManager(ExtensionGetter extension
     @Override
     public Mono<Authentication> authenticate(Authentication authentication) {
         return extensionGetter
-            .getEnabledExtensionByDefinition(UsernamePasswordAuthenticationManager.class)
+            .getEnabledExtensions(UsernamePasswordAuthenticationManager.class)
             .next()
             .flatMap(authenticationManager -> authenticationManager.authenticate(authentication)
                 .doOnError(t -> log.error(

File: application/src/main/java/run/halo/app/theme/dialect/CommentEnabledVariableProcessor.java
Patch:
@@ -84,7 +84,7 @@ static Optional<CommentWidget> getCommentWidget(ITemplateContext context) {
         }
 
         ExtensionGetter extensionGetter = appCtx.getBean(ExtensionGetter.class);
-        return extensionGetter.getEnabledExtensionByDefinition(CommentWidget.class)
+        return extensionGetter.getEnabledExtensions(CommentWidget.class)
             .next()
             .blockOptional();
     }

File: application/src/main/java/run/halo/app/theme/finders/impl/PostPublicQueryServiceImpl.java
Patch:
@@ -158,7 +158,7 @@ protected Mono<ContentVo> extendPostContent(Post post,
         ContentWrapper wrapper) {
         Assert.notNull(post, "Post name must not be null");
         Assert.notNull(wrapper, "Post content must not be null");
-        return extensionGetter.getEnabledExtensionByDefinition(ReactivePostContentHandler.class)
+        return extensionGetter.getEnabledExtensions(ReactivePostContentHandler.class)
             .reduce(Mono.fromSupplier(() -> ReactivePostContentHandler.PostContentContext.builder()
                     .post(post)
                     .content(wrapper.getContent())

File: application/src/main/java/run/halo/app/theme/finders/impl/SinglePageConversionServiceImpl.java
Patch:
@@ -58,7 +58,7 @@ protected Mono<ContentVo> extendPageContent(SinglePage singlePage,
         ContentWrapper wrapper) {
         Assert.notNull(singlePage, "SinglePage must not be null");
         Assert.notNull(wrapper, "SinglePage content must not be null");
-        return extensionGetter.getEnabledExtensionByDefinition(
+        return extensionGetter.getEnabledExtensions(
                 ReactiveSinglePageContentHandler.class)
             .reduce(Mono.fromSupplier(() -> SinglePageContentContext.builder()
                     .singlePage(singlePage)

File: application/src/main/java/run/halo/app/webfilter/AdditionalWebFilterChainProxy.java
Patch:
@@ -24,7 +24,7 @@ public AdditionalWebFilterChainProxy(ExtensionGetter extensionGetter) {
 
     @Override
     public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {
-        return extensionGetter.getEnabledExtensionByDefinition(AdditionalWebFilter.class)
+        return extensionGetter.getEnabledExtensions(AdditionalWebFilter.class)
             .sort(AnnotationAwareOrderComparator.INSTANCE)
             .cast(WebFilter.class)
             .collectList()

File: application/src/test/java/run/halo/app/theme/dialect/CommentElementTagProcessorTest.java
Patch:
@@ -75,7 +75,7 @@ void doProcess() {
             .thenReturn(Mono.just(commentSetting));
         when(commentSetting.getEnable()).thenReturn(true);
 
-        when(extensionGetter.getEnabledExtensionByDefinition(eq(CommentWidget.class)))
+        when(extensionGetter.getEnabledExtensions(eq(CommentWidget.class)))
             .thenReturn(Flux.empty());
         String result = templateEngine.process("commentWidget", context);
         assertThat(result).isEqualTo("""
@@ -88,7 +88,7 @@ void doProcess() {
             </html>
             """);
 
-        when(extensionGetter.getEnabledExtensionByDefinition(eq(CommentWidget.class)))
+        when(extensionGetter.getEnabledExtensions(eq(CommentWidget.class)))
             .thenReturn(Flux.just(new DefaultCommentWidget()));
         result = templateEngine.process("commentWidget", context);
         assertThat(result).isEqualTo("""

File: application/src/test/java/run/halo/app/theme/dialect/CommentEnabledVariableProcessorTest.java
Patch:
@@ -54,7 +54,7 @@ void getCommentWidget() {
             .thenReturn(Mono.just(commentSetting));
 
         CommentWidget commentWidget = mock(CommentWidget.class);
-        when(extensionGetter.getEnabledExtensionByDefinition(CommentWidget.class))
+        when(extensionGetter.getEnabledExtensions(CommentWidget.class))
             .thenReturn(Flux.just(commentWidget));
         WebEngineContext webContext = mock(WebEngineContext.class);
         var evaluationContext = mock(ThymeleafEvaluationContext.class);

File: application/src/test/java/run/halo/app/theme/finders/impl/PostPublicQueryServiceImplTest.java
Patch:
@@ -35,7 +35,7 @@ class PostPublicQueryServiceImplTest {
 
     @Test
     void extendPostContent() {
-        when(extensionGetter.getEnabledExtensionByDefinition(
+        when(extensionGetter.getEnabledExtensions(
             eq(ReactivePostContentHandler.class))).thenReturn(
             Flux.just(new PostContentHandlerB(), new PostContentHandlerA(),
                 new PostContentHandlerC()));

File: application/src/test/java/run/halo/app/theme/finders/impl/SinglePageConversionServiceImplTest.java
Patch:
@@ -36,7 +36,7 @@ class SinglePageConversionServiceImplTest {
 
     @Test
     void extendPageContent() {
-        when(extensionGetter.getEnabledExtensionByDefinition(
+        when(extensionGetter.getEnabledExtensions(
             eq(ReactiveSinglePageContentHandler.class)))
             .thenReturn(
                 Flux.just(new PageContentHandlerB(),

File: api/src/main/java/run/halo/app/extension/controller/RequestSynchronizer.java
Patch:
@@ -2,6 +2,7 @@
 
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
+import org.springframework.data.domain.Sort;
 import run.halo.app.extension.Extension;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.ExtensionMatcher;
@@ -58,7 +59,7 @@ public void start() {
                 listOptions.setFieldSelector(listMatcher.getFieldSelector());
                 listOptions.setLabelSelector(listMatcher.getLabelSelector());
             }
-            indexedQueryEngine.retrieveAll(type, listOptions)
+            indexedQueryEngine.retrieveAll(type, listOptions, Sort.by("metadata.creationTimestamp"))
                 .forEach(name -> watcher.onAdd(new Request(name)));
         }
         client.watch(this.watcher);

File: api/src/main/java/run/halo/app/extension/index/IndexDescriptor.java
Patch:
@@ -10,7 +10,7 @@ public class IndexDescriptor {
     private final IndexSpec spec;
 
     /**
-     * Record whether the index is ready, managed by {@link IndexBuilder}.
+     * Record whether the index is ready, managed by {@code IndexBuilder}.
      */
     private boolean ready;
 

File: api/src/main/java/run/halo/app/extension/index/IndexedQueryEngine.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.extension.index;
 
 import java.util.List;
+import org.springframework.data.domain.Sort;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.extension.ListOptions;
 import run.halo.app.extension.ListResult;
@@ -36,7 +37,8 @@ public interface IndexedQueryEngine {
      *
      * @param type the type of the object must exist in {@link run.halo.app.extension.SchemeManager}
      * @param options the list options to use for retrieving the object records
+     * @param sort the sort to use for retrieving the object records
      * @return a collection of {@link Metadata#getName()}
      */
-    List<String> retrieveAll(GroupVersionKind type, ListOptions options);
+    List<String> retrieveAll(GroupVersionKind type, ListOptions options, Sort sort);
 }

File: api/src/test/java/run/halo/app/extension/controller/RequestSynchronizerTest.java
Patch:
@@ -16,6 +16,7 @@
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
+import org.springframework.data.domain.Sort;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.ExtensionMatcher;
 import run.halo.app.extension.FakeExtension;
@@ -53,7 +54,7 @@ void setUp() {
     @Test
     void shouldStartCorrectlyWhenSyncingAllOnStart() {
         var type = GroupVersionKind.fromExtension(FakeExtension.class);
-        when(indexedQueryEngine.retrieveAll(eq(type), isA(ListOptions.class)))
+        when(indexedQueryEngine.retrieveAll(eq(type), isA(ListOptions.class), any(Sort.class)))
             .thenReturn(List.of("fake-01", "fake-02"));
 
         synchronizer.start();
@@ -62,7 +63,7 @@ void shouldStartCorrectlyWhenSyncingAllOnStart() {
         assertFalse(synchronizer.isDisposed());
 
         verify(indexedQueryEngine, times(1)).retrieveAll(eq(type),
-            isA(ListOptions.class));
+            isA(ListOptions.class), isA(Sort.class));
         verify(watcher, times(2)).onAdd(isA(Reconciler.Request.class));
         verify(client, times(1)).watch(same(watcher));
     }

File: application/src/main/java/run/halo/app/theme/finders/vo/CategoryTreeVo.java
Patch:
@@ -53,6 +53,7 @@ public static CategoryTreeVo from(CategoryVo category) {
 
     @Override
     public String nodeText() {
-        return String.format("%s (%s)", getSpec().getDisplayName(), getPostCount());
+        return String.format("%s (%s)%s", getSpec().getDisplayName(), getPostCount(),
+            spec.isPreventParentPostCascadeQuery() ? " (Independent)" : "");
     }
 }

File: application/src/main/java/run/halo/app/theme/finders/vo/CategoryVo.java
Patch:
@@ -36,7 +36,7 @@ public static CategoryVo from(Category category) {
             .metadata(category.getMetadata())
             .spec(category.getSpec())
             .status(category.getStatus())
-            .postCount(category.getStatusOrDefault().visiblePostCount)
+            .postCount(category.getStatusOrDefault().getVisiblePostCount())
             .build();
     }
 }

File: api/src/main/java/run/halo/app/extension/ReactiveExtensionClient.java
Patch:
@@ -60,6 +60,8 @@ <E extends Extension> Mono<ListResult<E>> listBy(Class<E> type, ListOptions opti
 
     <E extends Extension> Mono<E> get(Class<E> type, String name);
 
+    Mono<JsonExtension> getJsonExtension(GroupVersionKind gvk, String name);
+
     /**
      * Creates an Extension.
      *

File: api/src/test/java/run/halo/app/extension/index/FunctionalMultiValueIndexAttributeTest.java
Patch:
@@ -35,7 +35,9 @@ void getValues() {
         assertThat(attribute.getValues(fake)).isEqualTo(fake.getCategories());
 
         var unstructured = Unstructured.OBJECT_MAPPER.convertValue(fake, Unstructured.class);
-        assertThat(attribute.getValues(unstructured)).isEqualTo(fake.getCategories());
+        assertThatThrownBy(() -> attribute.getValues(unstructured))
+            .isInstanceOf(IllegalArgumentException.class)
+            .hasMessageContaining("Object type does not match");
 
         var demoExt = new DemoExtension();
         assertThatThrownBy(() -> attribute.getValues(demoExt))

File: application/src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -25,4 +25,6 @@ public interface UserService {
     Mono<User> createUser(User user, Set<String> roles);
 
     Mono<Boolean> confirmPassword(String username, String rawPassword);
+
+    Flux<User> listByEmail(String email);
 }

File: application/src/main/java/run/halo/app/config/WebServerSecurityConfig.java
Patch:
@@ -100,7 +100,6 @@ SecurityWebFilterChain filterChain(ServerHttpSecurity http,
                 .referrerPolicy(referrerPolicySpec -> referrerPolicySpec.policy(
                     haloProperties.getSecurity().getReferrerOptions().getPolicy())
                 )
-                .cache(ServerHttpSecurity.HeaderSpec.CacheSpec::disable)
                 .hsts(hstsSpec -> hstsSpec.includeSubdomains(false))
             );
 

File: application/src/main/java/run/halo/app/plugin/PluginConst.java
Patch:
@@ -22,7 +22,7 @@ public interface PluginConst {
 
     String RUNTIME_MODE_ANNO = "plugin.halo.run/runtime-mode";
 
-    static String assertsRoutePrefix(String pluginName) {
+    static String assetsRoutePrefix(String pluginName) {
         return "/plugins/" + pluginName + "/assets/";
     }
 

File: application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java
Patch:
@@ -11,7 +11,6 @@
 import java.util.List;
 import java.util.Objects;
 import java.util.function.Predicate;
-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
 import org.springframework.security.core.Authentication;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.core.context.ReactiveSecurityContextHolder;
@@ -86,7 +85,7 @@ public void setClock(Clock clock) {
     }
 
     private static Mono<Authentication> mustBeRealUser(Mono<Authentication> authentication) {
-        return authentication.filter(UsernamePasswordAuthenticationToken.class::isInstance)
+        return authentication.filter(AuthorityUtils::isRealUser)
             // Non-username-password authentication could not access the API at any time.
             .switchIfEmpty(Mono.error(AccessDeniedException::new));
     }

File: api/src/main/java/run/halo/app/core/extension/Plugin.java
Patch:
@@ -142,6 +142,7 @@ public enum Phase {
         PENDING,
         STARTING,
         CREATED,
+        DISABLING,
         DISABLED,
         RESOLVED,
         STARTED,

File: application/src/main/java/run/halo/app/plugin/PluginConst.java
Patch:
@@ -16,6 +16,8 @@ public interface PluginConst {
 
     String RELOAD_ANNO = "plugin.halo.run/reload";
 
+    String REQUEST_TO_UNLOAD_LABEL = "plugin.halo.run/request-to-unload";
+
     String PLUGIN_PATH = "plugin.halo.run/plugin-path";
 
     String RUNTIME_MODE_ANNO = "plugin.halo.run/runtime-mode";

File: application/src/main/java/run/halo/app/plugin/SharedApplicationContextFactory.java
Patch:
@@ -3,6 +3,7 @@
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.support.GenericApplicationContext;
 import org.springframework.security.web.server.context.ServerSecurityContextRepository;
+import run.halo.app.content.PostContentService;
 import run.halo.app.core.extension.service.AttachmentService;
 import run.halo.app.extension.DefaultSchemeManager;
 import run.halo.app.extension.ExtensionClient;
@@ -53,6 +54,8 @@ public static ApplicationContext create(ApplicationContext rootContext) {
             rootContext.getBean(NotificationCenter.class));
         beanFactory.registerSingleton("externalLinkProcessor",
             rootContext.getBean(ExternalLinkProcessor.class));
+        beanFactory.registerSingleton("postContentService",
+            rootContext.getBean(PostContentService.class));
         // TODO add more shared instance here
 
         sharedContext.refresh();

File: application/src/main/java/run/halo/app/security/authentication/login/LoginAuthenticationConverter.java
Patch:
@@ -15,6 +15,7 @@
 import reactor.core.publisher.Mono;
 import run.halo.app.infra.exception.RateLimitExceededException;
 import run.halo.app.infra.utils.IpAddressUtils;
+import run.halo.app.security.authentication.CryptoService;
 
 @Slf4j
 public class LoginAuthenticationConverter extends ServerFormLoginAuthenticationConverter {

File: application/src/main/java/run/halo/app/security/authentication/login/LoginSecurityConfigurer.java
Patch:
@@ -18,6 +18,7 @@
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.function.server.ServerResponse;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
+import run.halo.app.security.authentication.CryptoService;
 import run.halo.app.security.authentication.SecurityConfigurer;
 
 @Component

File: application/src/main/java/run/halo/app/security/authentication/login/PublicKeyRouteBuilder.java
Patch:
@@ -6,6 +6,7 @@
 import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;
 import org.springframework.web.reactive.function.server.RouterFunction;
 import org.springframework.web.reactive.function.server.ServerResponse;
+import run.halo.app.security.authentication.CryptoService;
 
 public class PublicKeyRouteBuilder {
 

File: application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java
Patch:
@@ -39,7 +39,7 @@
 import run.halo.app.infra.exception.AccessDeniedException;
 import run.halo.app.infra.exception.NotFoundException;
 import run.halo.app.security.PersonalAccessToken;
-import run.halo.app.security.authentication.pat.PatJwkSupplier;
+import run.halo.app.security.authentication.CryptoService;
 import run.halo.app.security.authentication.pat.UserScopedPatHandler;
 import run.halo.app.security.authorization.AuthorityUtils;
 
@@ -66,14 +66,14 @@ public class UserScopedPatHandlerImpl implements UserScopedPatHandler {
     private Clock clock;
 
     public UserScopedPatHandlerImpl(ReactiveExtensionClient client,
-        PatJwkSupplier jwkSupplier,
+        CryptoService cryptoService,
         ExternalUrlSupplier externalUrl,
         RoleService roleService) {
         this.client = client;
         this.externalUrl = externalUrl;
         this.roleService = roleService;
 
-        var patJwk = jwkSupplier.getJwk();
+        var patJwk = cryptoService.getJwk();
         var jwkSet = new ImmutableJWKSet<>(new JWKSet(patJwk));
         this.patEncoder = new NimbusJwtEncoder(jwkSet);
         this.keyId = patJwk.getKeyID();

File: application/src/test/java/run/halo/app/security/authentication/login/LoginAuthenticationConverterTest.java
Patch:
@@ -28,6 +28,7 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 import run.halo.app.infra.exception.RateLimitExceededException;
+import run.halo.app.security.authentication.CryptoService;
 
 @ExtendWith(MockitoExtension.class)
 class LoginAuthenticationConverterTest {

File: application/src/test/java/run/halo/app/security/authentication/login/PublicKeyRouteBuilderTest.java
Patch:
@@ -13,6 +13,7 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import reactor.core.publisher.Mono;
+import run.halo.app.security.authentication.CryptoService;
 
 @ExtendWith(MockitoExtension.class)
 class PublicKeyRouteBuilderTest {

File: application/src/main/java/run/halo/app/config/WebServerSecurityConfig.java
Patch:
@@ -92,6 +92,7 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,
                     .build();
                 oauth2.authenticationManagerResolver(authManagerResolver);
             })
+            .headers(headerSpec -> headerSpec.hsts(hstsSpec -> hstsSpec.includeSubdomains(false)))
         ;
 
         // Integrate with other configurers separately
@@ -126,6 +127,7 @@ SecurityWebFilterChain portalFilterChain(ServerHttpSecurity http,
                         haloProperties.getSecurity().getReferrerOptions().getPolicy());
                 })
                 .cache(ServerHttpSecurity.HeaderSpec.CacheSpec::disable)
+                .hsts(hstsSpec -> hstsSpec.includeSubdomains(false))
             )
             .anonymous(spec -> spec.authenticationFilter(
                 new HaloAnonymousAuthenticationWebFilter("portal", AnonymousUserConst.PRINCIPAL,

File: application/src/main/java/run/halo/app/notification/DefaultSubscriberEmailResolver.java
Patch:
@@ -30,6 +30,7 @@ public Mono<String> resolve(Subscription.Subscriber subscriber) {
             return Mono.fromSupplier(() -> getEmail(subscriber));
         }
         return client.fetch(User.class, subscriber.getName())
+            .filter(user -> user.getSpec().isEmailVerified())
             .mapNotNull(user -> user.getSpec().getEmail());
     }
 

File: api/src/main/java/run/halo/app/core/extension/AuthProvider.java
Patch:
@@ -24,7 +24,7 @@
 public class AuthProvider extends AbstractExtension {
 
     public static final String AUTH_BINDING_LABEL = "auth.halo.run/auth-binding";
-    
+
     public static final String PRIVILEGED_LABEL = "auth.halo.run/privileged";
 
     @Schema(requiredMode = REQUIRED)
@@ -52,6 +52,8 @@ public static class AuthProviderSpec {
 
         private String unbindUrl;
 
+        private int priority;
+
         @Schema(requiredMode = NOT_REQUIRED)
         private SettingRef settingRef;
 

File: application/src/main/java/run/halo/app/core/extension/reconciler/CommentReconciler.java
Patch:
@@ -67,12 +67,11 @@ public Result reconcile(Request request) {
                     return;
                 }
                 if (addFinalizers(comment.getMetadata(), Set.of(FINALIZER_NAME))) {
+                    replyNotificationSubscriptionHelper.subscribeNewReplyReasonForComment(comment);
                     client.update(comment);
                     eventPublisher.publishEvent(new CommentCreatedEvent(this, comment));
                 }
 
-                replyNotificationSubscriptionHelper.subscribeNewReplyReasonForComment(comment);
-
                 compatibleCreationTime(comment);
                 Comment.CommentStatus status = comment.getStatusOrDefault();
                 status.setHasNewReply(defaultIfNull(status.getUnreadReplyCount(), 0) > 0);

File: application/src/main/java/run/halo/app/core/extension/reconciler/ReplyReconciler.java
Patch:
@@ -46,6 +46,7 @@ public Result reconcile(Request request) {
                     return;
                 }
                 if (addFinalizers(reply.getMetadata(), Set.of(FINALIZER_NAME))) {
+                    replyNotificationSubscriptionHelper.subscribeNewReplyReasonForReply(reply);
                     client.update(reply);
                     eventPublisher.publishEvent(new ReplyCreatedEvent(this, reply));
                 }
@@ -64,8 +65,6 @@ public Result reconcile(Request request) {
 
                 client.update(reply);
 
-                replyNotificationSubscriptionHelper.subscribeNewReplyReasonForReply(reply);
-
                 eventPublisher.publishEvent(new ReplyChangedEvent(this, reply));
             });
         return new Result(false, null);

File: api/src/main/java/run/halo/app/core/extension/Plugin.java
Patch:
@@ -78,6 +78,8 @@ public static class PluginSpec {
 
         private String repo;
 
+        private String issues;
+
         private String description;
 
         private List<License> license;

File: api/src/main/java/run/halo/app/core/extension/Theme.java
Patch:
@@ -61,6 +61,8 @@ public static class ThemeSpec {
 
         private String repo;
 
+        private String issues;
+
         private String version;
 
         @Deprecated(forRemoval = true, since = "2.2.0")

File: application/src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -23,4 +23,6 @@ public interface UserService {
     Mono<User> signUp(User user, String password);
 
     Mono<User> createUser(User user, Set<String> roles);
+
+    Mono<Boolean> confirmPassword(String username, String rawPassword);
 }

File: application/src/main/java/run/halo/app/content/comment/CommentServiceImpl.java
Patch:
@@ -152,7 +152,7 @@ public Mono<Void> removeBySubject(@NonNull Ref subjectRef) {
             Sort.by("metadata.creationTimestamp", "metadata.name"));
         return Flux.defer(() -> listCommentsByRef(subjectRef, pageRequest))
             .expand(page -> page.hasNext()
-                ? listCommentsByRef(subjectRef, pageRequest)
+                ? listCommentsByRef(subjectRef, pageRequest.next())
                 : Mono.empty()
             )
             .flatMap(page -> Flux.fromIterable(page.getItems()))

File: application/src/main/java/run/halo/app/content/comment/ReplyServiceImpl.java
Patch:
@@ -123,7 +123,7 @@ public Mono<Void> removeAllByComment(String commentName) {
             Sort.by("metadata.creationTimestamp", "metadata.name"));
         return Flux.defer(() -> listRepliesByComment(commentName, pageRequest))
             .expand(page -> page.hasNext()
-                ? listRepliesByComment(commentName, pageRequest)
+                ? listRepliesByComment(commentName, pageRequest.next())
                 : Mono.empty()
             )
             .flatMap(page -> Flux.fromIterable(page.getItems()))

File: application/src/main/java/run/halo/app/notification/DefaultNotificationCenter.java
Patch:
@@ -98,7 +98,7 @@ public Mono<Void> unsubscribe(Subscription.Subscriber subscriber) {
             Sort.by("metadata.creationTimestamp", "metadata.name"));
         return Flux.defer(() -> pageSubscriptionBy(subscriber, pageRequest))
             .expand(page -> page.hasNext()
-                ? pageSubscriptionBy(subscriber, pageRequest)
+                ? pageSubscriptionBy(subscriber, pageRequest.next())
                 : Mono.empty()
             )
             .flatMap(page -> Flux.fromIterable(page.getItems()))

File: api/src/main/java/run/halo/app/extension/MetadataOperator.java
Patch:
@@ -27,11 +27,11 @@ public interface MetadataOperator {
         + "according to the given generateName field")
     String getGenerateName();
 
-    @Schema(name = "labels", nullable = true)
+    @Schema(name = "labels")
     @JsonProperty("labels")
     Map<String, String> getLabels();
 
-    @Schema(name = "annotations", nullable = true)
+    @Schema(name = "annotations")
     @JsonProperty("annotations")
     Map<String, String> getAnnotations();
 

File: application/src/main/java/run/halo/app/core/extension/endpoint/CommentEndpoint.java
Patch:
@@ -24,7 +24,6 @@
 import run.halo.app.core.extension.content.Comment;
 import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ListResult;
-import run.halo.app.extension.router.QueryParamBuildUtil;
 import run.halo.app.infra.utils.HaloUtils;
 import run.halo.app.infra.utils.IpAddressUtils;
 
@@ -57,7 +56,7 @@ public RouterFunction<ServerResponse> endpoint() {
                         .response(responseBuilder()
                             .implementation(ListResult.generateGenericClass(ListedComment.class))
                         );
-                    QueryParamBuildUtil.buildParametersFromType(builder, CommentQuery.class);
+                    CommentQuery.buildParameters(builder);
                 }
             )
             .POST("comments", this::createComment,

File: application/src/main/java/run/halo/app/core/extension/endpoint/PostEndpoint.java
Patch:
@@ -33,7 +33,6 @@
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
-import run.halo.app.extension.router.QueryParamBuildUtil;
 
 /**
  * Endpoint for managing posts.
@@ -61,7 +60,7 @@ public RouterFunction<ServerResponse> endpoint() {
                         .response(responseBuilder()
                             .implementation(ListResult.generateGenericClass(ListedPost.class))
                         );
-                    QueryParamBuildUtil.buildParametersFromType(builder, PostQuery.class);
+                    PostQuery.buildParameters(builder);
                 }
             )
             .GET("posts/{name}/head-content", this::fetchHeadContent,

File: application/src/main/java/run/halo/app/core/extension/endpoint/ReplyEndpoint.java
Patch:
@@ -13,7 +13,6 @@
 import run.halo.app.content.comment.ReplyService;
 import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ListResult;
-import run.halo.app.extension.router.QueryParamBuildUtil;
 
 /**
  * Endpoint for managing {@link Reply}.
@@ -41,7 +40,7 @@ public RouterFunction<ServerResponse> endpoint() {
                         .response(responseBuilder()
                             .implementation(ListResult.generateGenericClass(ListedReply.class))
                         );
-                    QueryParamBuildUtil.buildParametersFromType(builder, ReplyQuery.class);
+                    ReplyQuery.buildParameters(builder);
                 }
             )
             .build();

File: application/src/main/java/run/halo/app/core/extension/endpoint/SinglePageEndpoint.java
Patch:
@@ -32,7 +32,6 @@
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
-import run.halo.app.extension.router.QueryParamBuildUtil;
 
 /**
  * Endpoint for managing {@link SinglePage}.
@@ -59,7 +58,7 @@ public RouterFunction<ServerResponse> endpoint() {
                         .response(responseBuilder()
                             .implementation(ListResult.generateGenericClass(ListedSinglePage.class))
                         );
-                    QueryParamBuildUtil.buildParametersFromType(builder, SinglePageQuery.class);
+                    SinglePageQuery.buildParameters(builder);
                 }
             )
             .GET("singlepages/{name}/head-content", this::fetchHeadContent,

File: application/src/main/java/run/halo/app/endpoint/uc/content/UcPostEndpoint.java
Patch:
@@ -5,7 +5,6 @@
 import static org.springdoc.core.fn.builders.requestbody.Builder.requestBodyBuilder;
 import static org.springdoc.webflux.core.fn.SpringdocRouteBuilder.route;
 import static org.springframework.web.reactive.function.server.RequestPredicates.path;
-import static run.halo.app.extension.router.QueryParamBuildUtil.buildParametersFromType;
 
 import io.swagger.v3.oas.annotations.enums.ParameterIn;
 import java.util.Objects;
@@ -65,7 +64,7 @@ public RouterFunction<ServerResponse> endpoint() {
                                 .tag(tag)
                                 .response(responseBuilder().implementation(
                                     ListResult.generateGenericClass(ListedPost.class)));
-                            buildParametersFromType(builder, PostQuery.class);
+                            PostQuery.buildParameters(builder);
                         }
                     )
                     .POST(this::createMyPost, builder -> builder.operationId("CreateMyPost")

File: application/src/main/java/run/halo/app/extension/router/ExtensionRouterFunctionFactory.java
Patch:
@@ -54,7 +54,7 @@ public RouterFunction<ServerResponse> create() {
                         .response(responseBuilder().responseCode("200")
                             .description("Response " + scheme.plural())
                             .implementation(ListResult.generateGenericClass(scheme)));
-                    QueryParamBuildUtil.buildParametersFromType(builder, SortableRequest.class);
+                    SortableRequest.buildParameters(builder);
                 })
             .POST(createHandler.pathPattern(), createHandler,
                 builder -> builder.operationId("Create" + gvk)

File: application/src/main/java/run/halo/app/notification/endpoint/SubscriptionRouter.java
Patch:
@@ -49,6 +49,7 @@ RouterFunction<ServerResponse> notificationSubscriptionRouter() {
                         .name("name")
                         .description("Subscription name")
                         .required(true)
+                    ).parameter(parameterBuilder()
                         .in(ParameterIn.QUERY)
                         .name("token")
                         .description("Unsubscribe token")

File: application/src/main/java/run/halo/app/notification/endpoint/UserNotificationEndpoint.java
Patch:
@@ -22,7 +22,6 @@
 import run.halo.app.core.extension.notification.Notification;
 import run.halo.app.extension.GroupVersion;
 import run.halo.app.extension.ListResult;
-import run.halo.app.extension.router.QueryParamBuildUtil;
 import run.halo.app.notification.UserNotificationQuery;
 import run.halo.app.notification.UserNotificationService;
 
@@ -64,8 +63,7 @@ Supplier<RouterFunction<ServerResponse>> userspaceScopedApis() {
                         .response(responseBuilder()
                             .implementation(ListResult.generateGenericClass(Notification.class))
                         );
-                    QueryParamBuildUtil.buildParametersFromType(builder,
-                        UserNotificationQuery.class);
+                    UserNotificationQuery.buildParameters(builder);
                 }
             )
             .PUT("/notifications/{name}/mark-as-read", this::markNotificationAsRead,

File: application/src/main/java/run/halo/app/search/post/PostSearchEndpoint.java
Patch:
@@ -1,6 +1,5 @@
 package run.halo.app.search.post;
 
-import static run.halo.app.extension.router.QueryParamBuildUtil.buildParametersFromType;
 import static run.halo.app.infra.utils.GenericClassUtils.generateConcreteClass;
 
 import org.springdoc.core.fn.builders.apiresponse.Builder;
@@ -40,7 +39,7 @@ public RouterFunction<ServerResponse> endpoint() {
                         .response(Builder.responseBuilder().implementation(
                             generateConcreteClass(SearchResult.class, PostHit.class,
                                 () -> "PostHits")));
-                    buildParametersFromType(builder, SearchParam.class);
+                    SearchParam.buildParameters(builder);
                 }
             )
             .build();

File: application/src/main/java/run/halo/app/theme/endpoint/PostQueryEndpoint.java
Patch:
@@ -16,7 +16,6 @@
 import run.halo.app.core.extension.endpoint.CustomEndpoint;
 import run.halo.app.extension.GroupVersion;
 import run.halo.app.extension.ListResult;
-import run.halo.app.extension.router.QueryParamBuildUtil;
 import run.halo.app.infra.exception.NotFoundException;
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.PostPublicQueryService;
@@ -49,7 +48,7 @@ public RouterFunction<ServerResponse> endpoint() {
                         .response(responseBuilder()
                             .implementation(ListResult.generateGenericClass(ListedPostVo.class))
                         );
-                    QueryParamBuildUtil.buildParametersFromType(builder, PostPublicQuery.class);
+                    PostPublicQuery.buildParameters(builder);
                 }
             )
             .GET("posts/{name}", this::getPostByName,

File: application/src/main/java/run/halo/app/actuator/GlobalInfoEndpoint.java
Patch:
@@ -85,6 +85,8 @@ public static class GlobalInfo {
         private List<SocialAuthProvider> socialAuthProviders;
 
         private Boolean mustVerifyEmailOnRegistration;
+
+        private String siteTitle;
     }
 
     @Data
@@ -139,6 +141,7 @@ private void handleBasicSetting(GlobalInfo info, ConfigMap configMap) {
         var basic = SystemSetting.get(configMap, Basic.GROUP, Basic.class);
         if (basic != null) {
             info.setFavicon(basic.getFavicon());
+            info.setSiteTitle(basic.getTitle());
         }
     }
 

File: api/src/main/java/run/halo/app/core/extension/content/Post.java
Patch:
@@ -43,6 +43,8 @@ public class Post extends AbstractExtension {
         "content.halo.run/last-released-snapshot";
     public static final String LAST_ASSOCIATED_TAGS_ANNO = "content.halo.run/last-associated-tags";
 
+    public static final String STATS_ANNO = "content.halo.run/stats";
+
     public static final String DELETED_LABEL = "content.halo.run/deleted";
     public static final String PUBLISHED_LABEL = "content.halo.run/published";
     public static final String OWNER_LABEL = "content.halo.run/owner";

File: api/src/main/java/run/halo/app/core/extension/content/Comment.java
Patch:
@@ -100,6 +100,7 @@ public static class CommentOwner {
         public static final String KIND_EMAIL = "Email";
         public static final String AVATAR_ANNO = "avatar";
         public static final String WEBSITE_ANNO = "website";
+        public static final String EMAIL_HASH_ANNO = "email-hash";
 
         @Schema(requiredMode = REQUIRED, minLength = 1)
         private String kind;

File: application/src/test/java/run/halo/app/theme/finders/impl/CommentPublicQueryServiceIntegrationTest.java
Patch:
@@ -389,7 +389,7 @@ String fakeReplyJson() {
                                 "name":"",
                                 "displayName":"fake-display-name",
                                 "annotations":{
-
+                                    "email-hash": "4249f4df72b475e7894fabed1c5888cf"
                                 }
                             },
                             "creationTime": "2024-03-11T06:23:42.923294424Z",

File: application/src/main/java/run/halo/app/endpoint/uc/content/UcPostEndpoint.java
Patch:
@@ -259,7 +259,6 @@ private Mono<ServerResponse> updateMyPost(ServerRequest request) {
                     var spec = post.getSpec();
                     spec.setOwner(oldSpec.getOwner());
                     spec.setPublish(oldSpec.getPublish());
-                    spec.setPublishTime(oldSpec.getPublishTime());
                     spec.setHeadSnapshot(oldSpec.getHeadSnapshot());
                     spec.setBaseSnapshot(oldSpec.getBaseSnapshot());
                     spec.setReleaseSnapshot(oldSpec.getReleaseSnapshot());

File: application/src/main/java/run/halo/app/security/authorization/AuthorityUtils.java
Patch:
@@ -24,6 +24,8 @@ public enum AuthorityUtils {
 
     public static final String ANONYMOUS_ROLE_NAME = "anonymous";
 
+    public static final String COMMENT_MANAGEMENT_ROLE_NAME = "role-template-manage-comments";
+
     /**
      * Converts an array of GrantedAuthority objects to a role set.
      *

File: application/src/main/java/run/halo/app/theme/finders/impl/CommentPublicQueryServiceImpl.java
Patch:
@@ -99,7 +99,7 @@ public Mono<ListResult<CommentVo>> list(Ref ref, PageRequest pageParam) {
     public Mono<ListResult<CommentWithReplyVo>> convertToWithReplyVo(ListResult<CommentVo> comments,
         int replySize) {
         return Flux.fromIterable(comments.getItems())
-            .flatMap(commentVo -> {
+            .concatMap(commentVo -> {
                 var commentName = commentVo.getMetadata().getName();
                 return listReply(commentName, 1, replySize)
                     .map(replyList -> CommentWithReplyVo.from(commentVo)

File: application/src/main/java/run/halo/app/extension/index/ExtensionPaginatedLister.java
Patch:
@@ -10,14 +10,14 @@
  * @author guqing
  * @since 2.12.0
  */
-public interface ExtensionPaginatedLister {
+@FunctionalInterface
+public interface ExtensionPaginatedLister<E extends Extension> {
 
     /**
      * List extensions with pagination.
      *
      * @param pageable pageable
-     * @param <E> extension type
      * @return page of extensions
      */
-    <E extends Extension> Page<E> list(Pageable pageable);
+    Page<E> list(Pageable pageable);
 }

File: application/src/test/java/run/halo/app/extension/index/DefaultExtensionIteratorTest.java
Patch:
@@ -28,7 +28,7 @@
 class DefaultExtensionIteratorTest {
 
     @Mock
-    private ExtensionPaginatedLister lister;
+    private ExtensionPaginatedLister<Extension> lister;
 
     @Test
     @SuppressWarnings("unchecked")

File: application/src/main/java/run/halo/app/content/ListedPost.java
Patch:
@@ -5,6 +5,7 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 import java.util.List;
 import lombok.Data;
+import lombok.experimental.Accessors;
 import run.halo.app.core.extension.content.Category;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.core.extension.content.Tag;
@@ -17,6 +18,7 @@
  * @since 2.0.0
  */
 @Data
+@Accessors(chain = true)
 public class ListedPost {
 
     @Schema(requiredMode = REQUIRED)

File: application/src/main/java/run/halo/app/content/ListedSinglePage.java
Patch:
@@ -5,6 +5,7 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 import java.util.List;
 import lombok.Data;
+import lombok.experimental.Accessors;
 import run.halo.app.core.extension.content.SinglePage;
 
 
@@ -15,6 +16,7 @@
  * @since 2.0.0
  */
 @Data
+@Accessors(chain = true)
 public class ListedSinglePage {
 
     @Schema(requiredMode = REQUIRED)

File: api/src/main/java/run/halo/app/extension/index/query/QueryFactory.java
Patch:
@@ -120,7 +120,7 @@ public static Query and(Collection<Query> queries) {
         return new And(queries);
     }
 
-    public static Query and(Query query1, Query query2) {
+    public static And and(Query query1, Query query2) {
         Collection<Query> queries = Arrays.asList(query1, query2);
         return new And(queries);
     }

File: application/src/main/java/run/halo/app/content/comment/ReplyServiceImpl.java
Patch:
@@ -79,9 +79,7 @@ public Mono<Reply> create(String commentName, Reply reply) {
 
     @Override
     public Mono<ListResult<ListedReply>> list(ReplyQuery query) {
-        return client.list(Reply.class, getReplyPredicate(query),
-                ReplyService.creationTimeAscComparator(),
-                query.getPage(), query.getSize())
+        return client.listBy(Reply.class, query.toListOptions(), query.toPageRequest())
             .flatMap(list -> Flux.fromStream(list.get()
                     .map(this::toListedReply))
                 .concatMap(Function.identity())

File: application/src/main/java/run/halo/app/core/extension/endpoint/ReplyEndpoint.java
Patch:
@@ -48,7 +48,7 @@ public RouterFunction<ServerResponse> endpoint() {
     }
 
     Mono<ServerResponse> listReplies(ServerRequest request) {
-        ReplyQuery replyQuery = new ReplyQuery(request.queryParams());
+        ReplyQuery replyQuery = new ReplyQuery(request.exchange());
         return replyService.list(replyQuery)
             .flatMap(listedReplies -> ServerResponse.ok().bodyValue(listedReplies));
     }

File: api/src/main/java/run/halo/app/core/extension/content/Post.java
Patch:
@@ -41,7 +41,8 @@ public class Post extends AbstractExtension {
     public static final String CATEGORIES_ANNO = "content.halo.run/categories";
     public static final String LAST_RELEASED_SNAPSHOT_ANNO =
         "content.halo.run/last-released-snapshot";
-    public static final String TAGS_ANNO = "content.halo.run/tags";
+    public static final String LAST_ASSOCIATED_TAGS_ANNO = "content.halo.run/last-associated-tags";
+
     public static final String DELETED_LABEL = "content.halo.run/deleted";
     public static final String PUBLISHED_LABEL = "content.halo.run/published";
     public static final String OWNER_LABEL = "content.halo.run/owner";

File: application/src/main/java/run/halo/app/core/extension/reconciler/PostReconciler.java
Patch:
@@ -33,6 +33,7 @@
 import run.halo.app.core.extension.content.Post.VisibleEnum;
 import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.core.extension.notification.Subscription;
+import run.halo.app.event.post.PostDeletedEvent;
 import run.halo.app.event.post.PostPublishedEvent;
 import run.halo.app.event.post.PostUnpublishedEvent;
 import run.halo.app.event.post.PostUpdatedEvent;
@@ -86,6 +87,7 @@ public Result reconcile(Request request) {
                 if (ExtensionOperator.isDeleted(post)) {
                     removeFinalizers(post.getMetadata(), Set.of(FINALIZER_NAME));
                     unPublishPost(post, events);
+                    events.add(new PostDeletedEvent(this, post));
                     cleanUpResources(post);
                     // update post to be able to be collected by gc collector.
                     client.update(post);
@@ -126,7 +128,7 @@ public Result reconcile(Request request) {
 
                 // calculate the sha256sum
                 var configSha256sum = Hashing.sha256().hashString(post.getSpec().toString(), UTF_8)
-                        .toString();
+                    .toString();
 
                 var oldConfigChecksum = annotations.get(Constant.CHECKSUM_CONFIG_ANNO);
                 if (!Objects.equals(oldConfigChecksum, configSha256sum)) {

File: api/src/main/java/run/halo/app/extension/index/query/QueryFactory.java
Patch:
@@ -120,7 +120,7 @@ public static Query and(Collection<Query> queries) {
         return new And(queries);
     }
 
-    public static And and(Query query1, Query query2) {
+    public static Query and(Query query1, Query query2) {
         Collection<Query> queries = Arrays.asList(query1, query2);
         return new And(queries);
     }

File: application/src/main/java/run/halo/app/theme/finders/CommentPublicQueryService.java
Patch:
@@ -3,9 +3,9 @@
 import java.util.Comparator;
 import org.springframework.lang.Nullable;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.content.Comment;
 import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ListResult;
+import run.halo.app.extension.PageRequest;
 import run.halo.app.extension.Ref;
 import run.halo.app.theme.finders.vo.CommentVo;
 import run.halo.app.theme.finders.vo.ReplyVo;
@@ -21,8 +21,7 @@ public interface CommentPublicQueryService {
     Mono<ListResult<CommentVo>> list(Ref ref, @Nullable Integer page,
         @Nullable Integer size);
 
-    Mono<ListResult<CommentVo>> list(Ref ref, @Nullable Integer page,
-        @Nullable Integer size, @Nullable Comparator<Comment> comparator);
+    Mono<ListResult<CommentVo>> list(Ref ref, @Nullable PageRequest pageRequest);
 
     Mono<ListResult<ReplyVo>> listReply(String commentName, @Nullable Integer page,
         @Nullable Integer size);

File: application/src/main/java/run/halo/app/notification/EmailNotifier.java
Patch:
@@ -149,7 +149,7 @@ Mono<String> appendHtmlBodyFooter(ReasonAttributes attributes) {
             <a th:href="${site.url}" th:text="${site.title}"></a>
             <p class="unsubscribe">
             &mdash;<br />请勿直接回复此邮件，
-            <a th:href="|${site.url}/console/users/-/notifications|">查看通知</a>
+            <a th:href="|${site.url}/uc/notifications|">查看通知</a>
             或
             <a th:href="${unsubscribeUrl}">取消订阅</a>。
             </p>

File: api/src/main/java/run/halo/app/extension/index/query/And.java
Patch:
@@ -25,8 +25,6 @@ public NavigableSet<String> matches(QueryIndexView indexView) {
         NavigableSet<String> resultSet = null;
         for (Query query : childQueries) {
             NavigableSet<String> currentResult = query.matches(indexView);
-            // Trim unneeded rows to shrink the dataset for the next query
-            indexView.removeByIdNotIn(currentResult);
             if (resultSet == null) {
                 resultSet = Sets.newTreeSet(currentResult);
             } else {

File: application/src/main/java/run/halo/app/notification/endpoint/UserNotificationEndpoint.java
Patch:
@@ -143,8 +143,8 @@ record MarkSpecifiedRequest(List<String> names) {
     }
 
     private Mono<ServerResponse> listNotification(ServerRequest request) {
-        var query = new UserNotificationQuery(request.exchange());
         var username = request.pathVariable("username");
+        var query = new UserNotificationQuery(request.exchange(), username);
         return notificationService.listByUser(username, query)
             .flatMap(notifications -> ServerResponse.ok().bodyValue(notifications));
     }

File: application/src/test/java/run/halo/app/notification/ReasonNotificationTemplateSelectorImplTest.java
Patch:
@@ -17,6 +17,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
+import org.springframework.data.domain.Sort;
 import reactor.core.publisher.Flux;
 import reactor.test.StepVerifier;
 import run.halo.app.core.extension.notification.NotificationTemplate;
@@ -41,7 +42,7 @@ class ReasonNotificationTemplateSelectorImplTest {
 
     @Test
     void select() {
-        when(client.list(eq(NotificationTemplate.class), any(), any()))
+        when(client.listAll(eq(NotificationTemplate.class), any(), any(Sort.class)))
             .thenReturn(Flux.fromIterable(templates()));
         // language priority: zh_CN -> zh -> default
         // if language is same, then compare creationTimestamp to get the latest one

File: application/src/main/java/run/halo/app/plugin/YamlPluginDescriptorFinder.java
Patch:
@@ -43,7 +43,7 @@ public PluginDescriptor find(Path pluginPath) {
         return convert(plugin);
     }
 
-    private DefaultPluginDescriptor convert(Plugin plugin) {
+    public static PluginDescriptor convert(Plugin plugin) {
         String pluginId = plugin.getMetadata().getName();
         Plugin.PluginSpec spec = plugin.getSpec();
         Plugin.PluginAuthor author = spec.getAuthor();
@@ -66,7 +66,7 @@ private DefaultPluginDescriptor convert(Plugin plugin) {
         return defaultPluginDescriptor;
     }
 
-    private String joinLicense(List<Plugin.License> licenses) {
+    private static String joinLicense(List<Plugin.License> licenses) {
         if (CollectionUtils.isEmpty(licenses)) {
             return StringUtils.EMPTY;
         }

File: api/src/main/java/run/halo/app/extension/index/query/LogicalQuery.java
Patch:
@@ -2,7 +2,9 @@
 
 import java.util.Collection;
 import java.util.Objects;
+import lombok.Getter;
 
+@Getter
 public abstract class LogicalQuery implements Query {
     protected final Collection<Query> childQueries;
     protected final int size;

File: api/src/main/java/run/halo/app/extension/index/query/SimpleQuery.java
Patch:
@@ -1,8 +1,10 @@
 package run.halo.app.extension.index.query;
 
+import lombok.Getter;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.util.Assert;
 
+@Getter
 public abstract class SimpleQuery implements Query {
     protected final String fieldName;
     protected final String value;

File: api/src/main/java/run/halo/app/core/extension/User.java
Patch:
@@ -33,6 +33,8 @@ public class User extends AbstractExtension {
     public static final String VERSION = "v1alpha1";
     public static final String KIND = "User";
 
+    public static final String USER_RELATED_ROLES_INDEX = "roles";
+
     public static final String ROLE_NAMES_ANNO = "rbac.authorization.halo.run/role-names";
 
     public static final String EMAIL_TO_VERIFY = "halo.run/email-to-verify";

File: application/src/test/java/run/halo/app/infra/InitializationStateGetterTest.java
Patch:
@@ -1,7 +1,6 @@
 package run.halo.app.infra;
 
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -19,6 +18,7 @@
 import run.halo.app.extension.ConfigMap;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.Metadata;
+import run.halo.app.extension.PageRequest;
 import run.halo.app.extension.ReactiveExtensionClient;
 
 /**
@@ -37,7 +37,7 @@ class InitializationStateGetterTest {
 
     @Test
     void userInitialized() {
-        when(client.list(eq(User.class), any(), any(), anyInt(), anyInt()))
+        when(client.listBy(eq(User.class), any(), any(PageRequest.class)))
             .thenReturn(Mono.empty());
         initializationStateGetter.userInitialized()
             .as(StepVerifier::create)
@@ -52,7 +52,7 @@ void userInitialized() {
         user.getSpec().setDisplayName("fake-hidden-user");
         ListResult<User> listResult = new ListResult<>(List.of(user));
 
-        when(client.list(eq(User.class), any(), any(), anyInt(), anyInt()))
+        when(client.listBy(eq(User.class), any(), any(PageRequest.class)))
             .thenReturn(Mono.just(listResult));
         initializationStateGetter.userInitialized()
             .as(StepVerifier::create)

File: application/src/main/java/run/halo/app/plugin/PluginStartedListener.java
Patch:
@@ -38,6 +38,7 @@ private Mono<Unstructured> createOrUpdate(Unstructured unstructured) {
             .doOnNext(old -> {
                 unstructured.getMetadata().setVersion(old.getMetadata().getVersion());
             })
+            .map(ignored -> unstructured)
             .flatMap(client::update)
             .switchIfEmpty(Mono.defer(() -> client.create(unstructured)));
     }

File: application/src/main/java/run/halo/app/security/authentication/twofactor/TwoFactorAuthSettings.java
Patch:
@@ -17,6 +17,6 @@ public class TwoFactorAuthSettings {
      * @return true if 2FA is enabled and configured, false otherwise.
      */
     public boolean isAvailable() {
-        return enabled && (emailVerified || totpConfigured);
+        return enabled && totpConfigured;
     }
 }

File: application/src/main/java/run/halo/app/plugin/ExtensionComponentsFinder.java
Patch:
@@ -14,6 +14,7 @@
  * @since 2.0.0
  */
 @Component
+@Deprecated(forRemoval = true)
 public class ExtensionComponentsFinder {
     public static final String SYSTEM_PLUGIN_ID = "system";
     private final PluginManager pluginManager;

File: api/src/main/java/run/halo/app/infra/SystemSetting.java
Patch:
@@ -67,6 +67,7 @@ public static class Basic {
     public static class User {
         public static final String GROUP = "user";
         Boolean allowRegistration;
+        Boolean mustVerifyEmailOnRegistration;
         String defaultRole;
         String avatarPolicy;
     }

File: application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java
Patch:
@@ -138,7 +138,6 @@ public Mono<ServerResponse> create(ServerRequest request) {
                                     .id(tokenId)
                                     .subject(auth.getName())
                                     .issuedAt(clock.instant())
-                                    .claim("roles", roles)
                                     .claim("pat_name", createdPat.getMetadata().getName());
                                 var expiresAt = createdPat.getSpec().getExpiresAt();
                                 if (expiresAt != null) {
@@ -149,7 +148,6 @@ public Mono<ServerResponse> create(ServerRequest request) {
                                 var jwt = patEncoder.encode(JwtEncoderParameters.from(
                                     headerBuilder.build(),
                                     claimsBuilder.build()));
-                                // TODO Create PAT for the token.
                                 var annotations =
                                     createdPat.getMetadata().getAnnotations();
                                 if (annotations == null) {

File: application/src/main/java/run/halo/app/search/IndicesInitializer.java
Patch:
@@ -5,11 +5,11 @@
 import org.springframework.boot.context.event.ApplicationStartedEvent;
 import org.springframework.context.event.EventListener;
 import org.springframework.scheduling.annotation.Async;
-import org.springframework.stereotype.Component;
 import org.springframework.util.StopWatch;
 
 @Slf4j
-@Component
+// @Component
+// TODO Remove this class on next version
 public class IndicesInitializer {
 
     private final IndicesService indicesService;

File: application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -170,7 +170,7 @@ private Flux<Contributor> listContributors(List<String> usernames) {
             return Flux.empty();
         }
         return Flux.fromIterable(usernames)
-            .flatMap(userService::getUserOrGhost)
+            .concatMap(userService::getUserOrGhost)
             .map(user -> {
                 Contributor contributor = new Contributor();
                 contributor.setName(user.getMetadata().getName());

File: application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -170,7 +170,7 @@ private Flux<Contributor> listContributors(List<String> usernames) {
             return Flux.empty();
         }
         return Flux.fromIterable(usernames)
-            .flatMap(userService::getUserOrGhost)
+            .concatMap(userService::getUserOrGhost)
             .map(user -> {
                 Contributor contributor = new Contributor();
                 contributor.setName(user.getMetadata().getName());

File: application/src/test/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessorIntegrationTest.java
Patch:
@@ -146,8 +146,8 @@ void overrideGlobalMetaTest() {
              <head>
               <meta charset="UTF-8">
               <title>Post detail</title>
-              <meta name="description" content="post-description">
               <meta name="keyword" content="postK1,postK2">
+              <meta name="description" content="post-description">
               <meta name="other" content="post-other-meta">
              </head>
              <body>

File: application/src/test/java/run/halo/app/theme/dialect/HaloProcessorDialectTest.java
Patch:
@@ -174,9 +174,9 @@ void contentHeadAndFooterAndPostProcessors() {
                 <title>Post</title>
               <meta name="global-head-test" content="test" />
             <meta name="content-head-test" content="test" />
-            <meta content="post-meta-V1" name="post-meta-V1" />
-            <meta content="post-meta-V2" name="post-meta-V2" />
-            <meta name="description" content="" />
+            <meta content="post-meta-V1" name="post-meta-V1"/>\
+            <meta content="post-meta-V2" name="post-meta-V2"/>\
+            <meta name="description" content=""/>\
             </head>
               <body>
                 <p>post</p>

File: application/src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java
Patch:
@@ -240,7 +240,7 @@ private void resolveStaticResources(Plugin plugin) {
             log.info("Resolving logo resource for plugin {}", pluginName);
             // the logo might be:
             // 1. URL
-            // 2. file name
+            // 2. relative path to "resources" folder
             // 3. base64 format data image
             var logo = specLogo;
             if (!specLogo.startsWith("data:image")) {
@@ -249,7 +249,8 @@ private void resolveStaticResources(Plugin plugin) {
                 } catch (MalformedURLException ignored) {
                     // indicate the logo is a path
                     logo = UriComponentsBuilder.newInstance()
-                        .pathSegment("plugins", pluginName, "assets", specLogo)
+                        .pathSegment("plugins", pluginName, "assets")
+                        .path(specLogo)
                         .queryParam("version", pluginVersion)
                         .build(true)
                         .toString();

File: application/src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java
Patch:
@@ -262,8 +262,8 @@ private void resolveStaticResources(Plugin plugin) {
         var p = pluginManager.getPlugin(pluginName);
         var classLoader = p.getPluginClassLoader();
         var resLoader = new DefaultResourceLoader(classLoader);
-        var entryRes = resLoader.getResource("classpath:/console/main.js");
-        var cssRes = resLoader.getResource("classpath:/console/style.css");
+        var entryRes = resLoader.getResource("classpath:console/main.js");
+        var cssRes = resLoader.getResource("classpath:console/style.css");
         if (entryRes.exists()) {
             var entry = UriComponentsBuilder.newInstance()
                 .pathSegment("plugins", pluginName, "assets", "console", "main.js")

File: application/src/main/java/run/halo/app/core/extension/reconciler/ReverseProxyReconciler.java
Patch:
@@ -55,12 +55,12 @@ public Controller setupWith(ControllerBuilder builder) {
 
     private void registerReverseProxy(ReverseProxy reverseProxy) {
         String pluginId = getPluginId(reverseProxy);
-        routerFunctionRegistry.register(pluginId, reverseProxy).block();
+        routerFunctionRegistry.register(pluginId, reverseProxy);
     }
 
     private void cleanUpResources(ReverseProxy reverseProxy) {
         String pluginId = getPluginId(reverseProxy);
-        routerFunctionRegistry.remove(pluginId, reverseProxy.getMetadata().getName()).block();
+        routerFunctionRegistry.remove(pluginId, reverseProxy.getMetadata().getName());
     }
 
     private void addFinalizerIfNecessary(ReverseProxy oldReverseProxy) {

File: application/src/main/java/run/halo/app/plugin/extensionpoint/DefaultExtensionGetter.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.stream.Stream;
 import lombok.RequiredArgsConstructor;
 import org.pf4j.ExtensionPoint;
+import org.pf4j.PluginManager;
 import org.springframework.context.ApplicationContext;
 import org.springframework.core.annotation.AnnotationAwareOrderComparator;
 import org.springframework.lang.NonNull;
@@ -15,15 +16,14 @@
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting.ExtensionPointEnabled;
-import run.halo.app.plugin.HaloPluginManager;
 
 @Component
 @RequiredArgsConstructor
 public class DefaultExtensionGetter implements ExtensionGetter {
 
     private final SystemConfigurableEnvironmentFetcher systemConfigFetcher;
 
-    private final HaloPluginManager pluginManager;
+    private final PluginManager pluginManager;
 
     private final ApplicationContext applicationContext;
 

File: application/src/test/java/run/halo/app/core/extension/reconciler/ReverseProxyReconcilerTest.java
Patch:
@@ -3,6 +3,7 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.ArgumentMatchers.eq;
+import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
@@ -17,7 +18,6 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
-import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.ReverseProxy;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.Metadata;
@@ -54,15 +54,14 @@ void reconcileRemoval() {
             .setLabels(Map.of(PluginConst.PLUGIN_NAME_LABEL_NAME, "fake-plugin"));
         reverseProxy.setRules(List.of());
 
-        when(routerFunctionRegistry.remove(anyString(), anyString())).thenReturn(Mono.empty());
+        doNothing().when(routerFunctionRegistry).remove(anyString(), anyString());
         when(client.fetch(ReverseProxy.class, "fake-reverse-proxy"))
             .thenReturn(Optional.of(reverseProxy));
 
         reverseProxyReconciler.reconcile(new Reconciler.Request("fake-reverse-proxy"));
 
         verify(routerFunctionRegistry, never()).register(anyString(), any(ReverseProxy.class));
 
-        verify(routerFunctionRegistry, never()).remove(eq("fake-plugin"));
         verify(routerFunctionRegistry, times(1))
             .remove(eq("fake-plugin"), eq("fake-reverse-proxy"));
     }

File: application/src/test/java/run/halo/app/content/TestPost.java
Patch:
@@ -19,6 +19,7 @@ public static Post postV1() {
         post.setApiVersion(getApiVersion(Post.class));
         Metadata metadata = new Metadata();
         metadata.setName("post-A");
+        metadata.setVersion(1L);
         post.setMetadata(metadata);
 
         Post.PostSpec postSpec = new Post.PostSpec();
@@ -38,6 +39,7 @@ public static Snapshot snapshotV1() {
         snapshot.setApiVersion(getApiVersion(Snapshot.class));
         Metadata metadata = new Metadata();
         metadata.setName("snapshot-A");
+        metadata.setVersion(1L);
         metadata.setCreationTimestamp(Instant.now());
         snapshot.setMetadata(metadata);
         MetadataUtil.nullSafeAnnotations(snapshot).put(Snapshot.KEEP_RAW_ANNO, "true");

File: api/src/main/java/run/halo/app/core/extension/content/Snapshot.java
Patch:
@@ -84,4 +84,7 @@ public static boolean isBaseSnapshot(@NonNull Snapshot snapshot) {
         return Boolean.parseBoolean(annotations.get(Snapshot.KEEP_RAW_ANNO));
     }
 
+    public static String toSubjectRefKey(Ref subjectRef) {
+        return subjectRef.getGroup() + "/" + subjectRef.getKind() + "/" + subjectRef.getName();
+    }
 }

File: api/src/main/java/run/halo/app/extension/router/selector/SelectorUtil.java
Patch:
@@ -96,6 +96,8 @@ public static ListOptions labelAndFieldSelectorToListOptions(
         listOptions.setLabelSelector(new LabelSelector().setMatchers(labelMatchers));
         if (!fieldQuery.isEmpty()) {
             listOptions.setFieldSelector(FieldSelector.of(QueryFactory.and(fieldQuery)));
+        } else {
+            listOptions.setFieldSelector(FieldSelector.all());
         }
         return listOptions;
     }

File: application/src/main/java/run/halo/app/content/impl/SnapshotServiceImpl.java
Patch:
@@ -19,7 +19,7 @@ public class SnapshotServiceImpl implements SnapshotService {
 
     private final ReactiveExtensionClient client;
 
-    private Clock clock;
+    private final Clock clock;
 
     public SnapshotServiceImpl(ReactiveExtensionClient client) {
         this.client = client;

File: application/src/main/java/run/halo/app/theme/endpoint/PostQueryEndpoint.java
Patch:
@@ -107,8 +107,7 @@ private Mono<ServerResponse> getPostByName(ServerRequest request) {
 
     private Mono<ServerResponse> listPosts(ServerRequest request) {
         PostPublicQuery query = new PostPublicQuery(request.exchange());
-        return postPublicQueryService.list(query.getPage(), query.getSize(), query.toPredicate(),
-                query.toComparator())
+        return postPublicQueryService.list(query.toListOptions(), query.toPageRequest())
             .flatMap(result -> ServerResponse.ok().contentType(MediaType.APPLICATION_JSON)
                 .bodyValue(result)
             );

File: application/src/main/java/run/halo/app/theme/finders/TagFinder.java
Patch:
@@ -24,8 +24,11 @@ public interface TagFinder {
 
     Mono<ListResult<TagVo>> list(@Nullable Integer page, @Nullable Integer size);
 
+    @Deprecated(since = "2.12.0")
     Mono<ListResult<TagVo>> list(@Nullable Integer page, @Nullable Integer size,
         @Nullable Predicate<Tag> predicate, @Nullable Comparator<Tag> comparator);
 
+    List<TagVo> convertToVo(List<Tag> tags);
+
     Flux<TagVo> listAll();
 }

File: application/src/main/java/run/halo/app/theme/router/ReactiveQueryPostPredicateResolver.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.function.Predicate;
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.content.Post;
+import run.halo.app.extension.ListOptions;
 
 /**
  * The reactive query post predicate resolver.
@@ -13,4 +14,6 @@
 public interface ReactiveQueryPostPredicateResolver {
 
     Mono<Predicate<Post>> getPredicate();
+
+    Mono<ListOptions> getListOptions();
 }

File: application/src/test/java/run/halo/app/core/extension/reconciler/SinglePageReconcilerTest.java
Patch:
@@ -95,7 +95,7 @@ void reconcile() {
         Snapshot snapshotV2 = TestPost.snapshotV2();
         snapshotV1.getSpec().setContributors(Set.of("guqing"));
         snapshotV2.getSpec().setContributors(Set.of("guqing", "zhangsan"));
-        when(client.list(eq(Snapshot.class), any(), any()))
+        when(client.listAll(eq(Snapshot.class), any(), any()))
             .thenReturn(List.of(snapshotV1, snapshotV2));
         when(externalUrlSupplier.get()).thenReturn(URI.create(""));
 
@@ -156,7 +156,7 @@ void reconcileLastModifyTimeWhenPageIsPublished() {
             when(client.fetch(eq(Snapshot.class), eq(page.getSpec().getReleaseSnapshot())))
                 .thenReturn(Optional.of(snapshotV2));
 
-            when(client.list(eq(Snapshot.class), any(), any()))
+            when(client.listAll(eq(Snapshot.class), any(), any()))
                 .thenReturn(List.of());
 
             ArgumentCaptor<SinglePage> captor = ArgumentCaptor.forClass(SinglePage.class);
@@ -186,7 +186,7 @@ void reconcileLastModifyTimeWhenPageIsNotPublished() {
                     .build())
                 );
 
-            when(client.list(eq(Snapshot.class), any(), any()))
+            when(client.listAll(eq(Snapshot.class), any(), any()))
                 .thenReturn(List.of());
 
             ArgumentCaptor<SinglePage> captor = ArgumentCaptor.forClass(SinglePage.class);

File: application/src/test/java/run/halo/app/theme/endpoint/PostQueryEndpointTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.anyInt;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -20,6 +19,7 @@
 import run.halo.app.extension.GroupVersion;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.Metadata;
+import run.halo.app.extension.PageRequest;
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.PostPublicQueryService;
 import run.halo.app.theme.finders.vo.ListedPostVo;
@@ -55,7 +55,7 @@ public void setUp() {
     @Test
     public void listPosts() {
         ListResult<ListedPostVo> result = new ListResult<>(List.of());
-        when(postPublicQueryService.list(anyInt(), anyInt(), any(), any()))
+        when(postPublicQueryService.list(any(), any(PageRequest.class)))
             .thenReturn(Mono.just(result));
 
         webClient.get().uri("/posts")
@@ -65,7 +65,7 @@ public void listPosts() {
             .expectBody()
             .jsonPath("$.items").isArray();
 
-        verify(postPublicQueryService).list(anyInt(), anyInt(), any(), any());
+        verify(postPublicQueryService).list(any(), any(PageRequest.class));
     }
 
     @Test

File: application/src/test/java/run/halo/app/theme/finders/impl/TagFinderImplTest.java
Patch:
@@ -16,9 +16,11 @@
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.skyscreamer.jsonassert.JSONAssert;
+import org.springframework.data.domain.Sort;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.content.Tag;
+import run.halo.app.extension.ListOptions;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.infra.utils.JsonUtils;
@@ -77,7 +79,7 @@ void getByName() throws JSONException {
 
     @Test
     void listAll() {
-        when(client.list(eq(Tag.class), eq(null), any()))
+        when(client.listAll(eq(Tag.class), any(ListOptions.class), any(Sort.class)))
             .thenReturn(Flux.fromIterable(
                     tags().stream().sorted(TagFinderImpl.DEFAULT_COMPARATOR.reversed()).toList()
                 )

File: api/src/main/java/run/halo/app/extension/index/query/And.java
Patch:
@@ -25,6 +25,8 @@ public NavigableSet<String> matches(QueryIndexView indexView) {
         NavigableSet<String> resultSet = null;
         for (Query query : childQueries) {
             NavigableSet<String> currentResult = query.matches(indexView);
+            // Trim unneeded rows to shrink the dataset for the next query
+            indexView.removeByIdNotIn(currentResult);
             if (resultSet == null) {
                 resultSet = Sets.newTreeSet(currentResult);
             } else {

File: api/src/main/java/run/halo/app/extension/index/query/EqualQuery.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.extension.index.query;
 
 import java.util.NavigableSet;
+import org.springframework.util.Assert;
 
 public class EqualQuery extends SimpleQuery {
 
@@ -10,6 +11,7 @@ public EqualQuery(String fieldName, String value) {
 
     public EqualQuery(String fieldName, String value, boolean isFieldRef) {
         super(fieldName, value, isFieldRef);
+        Assert.notNull(value, "Value must not be null, use IsNull or IsNotNull instead");
     }
 
     @Override

File: api/src/main/java/run/halo/app/extension/index/query/NotEqual.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.google.common.collect.Sets;
 import java.util.NavigableSet;
+import org.springframework.util.Assert;
 
 public class NotEqual extends SimpleQuery {
     private final EqualQuery equalQuery;
@@ -12,6 +13,7 @@ public NotEqual(String fieldName, String value) {
 
     public NotEqual(String fieldName, String value, boolean isFieldRef) {
         super(fieldName, value, isFieldRef);
+        Assert.notNull(value, "Value must not be null, use IsNull or IsNotNull instead");
         this.equalQuery = new EqualQuery(fieldName, value, isFieldRef);
     }
 

File: api/src/main/java/run/halo/app/extension/ListResult.java
Patch:
@@ -129,6 +129,9 @@ public static <T> ListResult<T> emptyResult() {
      */
     public static <T> List<T> subList(List<T> list, int page, int size) {
         if (page < 1) {
+            page = 1;
+        }
+        if (size < 1) {
             return list;
         }
         List<T> listSort = new ArrayList<>();

File: application/src/main/java/run/halo/app/content/comment/ReplyService.java
Patch:
@@ -31,7 +31,7 @@ static Comparator<Reply> creationTimeAscComparator() {
             reply -> reply.getMetadata().getCreationTimestamp();
         // ascending order by creation time
         // asc nulls high will be placed at the end
-        return Comparator.comparing(creationTime, Comparators.nullsLow())
+        return Comparator.comparing(creationTime, Comparators.nullsHigh())
             .thenComparing(metadataCreationTime)
             .thenComparing(reply -> reply.getMetadata().getName());
     }

File: application/src/main/java/run/halo/app/infra/exception/handlers/ProblemDetailErrorAttributes.java
Patch:
@@ -40,7 +40,6 @@ public Map<String, Object> getErrorAttributes(ServerRequest request,
     @Override
     public Throwable getError(ServerRequest request) {
         return (Throwable) request.attribute(ERROR_INTERNAL_ATTRIBUTE).stream()
-            .peek(error -> request.attributes().putIfAbsent(ERROR_ATTRIBUTE, error))
             .findFirst()
             .orElseThrow(() -> new IllegalStateException(
                 "Missing exception attribute in ServerWebExchange"));

File: application/src/main/java/run/halo/app/theme/finders/impl/CommentPublicQueryServiceImpl.java
Patch:
@@ -272,7 +272,7 @@ public int compare(Comment c1, Comment c2) {
 
             var creationTimeComparator = Comparator.<Comment, Instant>comparing(
                 comment -> comment.getSpec().getCreationTime(),
-                Comparators.nullsLow(Comparator.<Instant>reverseOrder()));
+                Comparators.nullsHigh(Comparator.<Instant>reverseOrder()));
 
             var nameComparator = Comparator.<Comment, String>comparing(
                 comment -> comment.getMetadata().getName());

File: api/src/main/java/run/halo/app/extension/router/selector/FieldCriteriaPredicateConverter.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.lang.NonNull;
 import run.halo.app.extension.Extension;
 
+@Deprecated(since = "2.12.0")
 public class FieldCriteriaPredicateConverter<E extends Extension>
     implements Converter<SelectorCriteria, Predicate<E>> {
 

File: api/src/main/java/run/halo/app/extension/router/selector/LabelCriteriaPredicateConverter.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.lang.NonNull;
 import run.halo.app.extension.Extension;
 
+@Deprecated(since = "2.12.0")
 public class LabelCriteriaPredicateConverter<E extends Extension>
     implements Converter<SelectorCriteria, Predicate<E>> {
 

File: application/src/main/java/run/halo/app/theme/finders/CategoryFinder.java
Patch:
@@ -28,4 +28,6 @@ public interface CategoryFinder {
     Flux<CategoryTreeVo> listAsTree();
 
     Flux<CategoryTreeVo> listAsTree(String name);
+
+    Mono<CategoryVo> getParentByName(String name);
 }

File: application/src/main/java/run/halo/app/infra/DefaultThemeInitializer.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.io.IOException;
 import lombok.extern.slf4j.Slf4j;
+import org.springframework.boot.context.event.ApplicationStartedEvent;
 import org.springframework.context.ApplicationListener;
 import org.springframework.core.io.UrlResource;
 import org.springframework.core.io.buffer.DataBufferUtils;
@@ -16,7 +17,7 @@
 
 @Slf4j
 @Component
-public class DefaultThemeInitializer implements ApplicationListener<SchemeInitializedEvent> {
+public class DefaultThemeInitializer implements ApplicationListener<ApplicationStartedEvent> {
 
     private final ThemeService themeService;
 
@@ -32,7 +33,7 @@ public DefaultThemeInitializer(ThemeService themeService, ThemeRootGetter themeR
     }
 
     @Override
-    public void onApplicationEvent(SchemeInitializedEvent event) {
+    public void onApplicationEvent(ApplicationStartedEvent event) {
         if (themeProps.getInitializer().isDisabled()) {
             log.debug("Skipped initializing default theme due to disabled");
             return;

File: api/src/main/java/run/halo/app/extension/router/selector/Operator.java
Patch:
@@ -12,7 +12,7 @@ public enum Operator implements Converter<String, SelectorCriteria> {
         public SelectorCriteria convert(@Nullable String selector) {
             if (preFlightCheck(selector, 3)) {
                 var i = selector.indexOf(getOperator());
-                if (i > 0 && (i + getOperator().length()) < selector.length() - 1) {
+                if (i > 0 && (i + getOperator().length()) <= selector.length() - 1) {
                     String key = selector.substring(0, i);
                     String value = selector.substring(i + getOperator().length());
                     return new SelectorCriteria(key, this, Set.of(value));

File: api/src/test/java/run/halo/app/extension/router/selector/OperatorTest.java
Patch:
@@ -27,6 +27,8 @@ record TestCase(String source, Operator converter, SelectorCriteria expected) {
             new TestCase("name=", Equals, null),
             new TestCase("name=value", Equals,
                 new SelectorCriteria("name", Equals, Set.of("value"))),
+            new TestCase("name=v", Equals, 
+                new SelectorCriteria("name", Equals, Set.of("v"))),
 
             new TestCase("", NotEquals, null),
             new TestCase("=", NotEquals, null),
@@ -59,4 +61,4 @@ record TestCase(String source, Operator converter, SelectorCriteria expected) {
             assertEquals(testCase.expected(), testCase.converter().convert(testCase.source()));
         });
     }
-}
\ No newline at end of file
+}

File: application/src/test/java/run/halo/app/theme/finders/vo/UserVoTest.java
Patch:
@@ -54,6 +54,7 @@ void from() throws JSONException {
                         "displayName": "fake-user-display-name",
                         "avatar": "avatar",
                         "email": "example@example.com",
+                        "emailVerified": false,
                         "phone": "123456789",
                         "password": "[PROTECTED]",
                         "bio": "user bio",

File: application/src/main/java/run/halo/app/notification/UserNotificationService.java
Patch:
@@ -37,4 +37,6 @@ public interface UserNotificationService {
      * @return the names of read notification that has been marked as read
      */
     Flux<String> markSpecifiedAsRead(String username, List<String> names);
+
+    Mono<Notification> deleteByName(String username, String name);
 }

File: application/src/main/java/run/halo/app/plugin/PluginApplicationInitializer.java
Patch:
@@ -36,6 +36,7 @@
  */
 @Slf4j
 public class PluginApplicationInitializer {
+
     protected final HaloPluginManager haloPluginManager;
 
     private final ExtensionContextRegistry contextRegistry = ExtensionContextRegistry.getInstance();
@@ -89,6 +90,8 @@ private PluginApplicationContext createPluginApplicationContext(String pluginId)
         AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);
         stopWatch.stop();
 
+        pluginApplicationContext.registerBean(AggregatedRouterFunction.class);
+
         beanFactory.registerSingleton("pluginContext", createPluginContext(plugin));
         // TODO deprecated
         beanFactory.registerSingleton("pluginWrapper", haloPluginManager.getPlugin(pluginId));

File: application/src/main/java/run/halo/app/search/IndicesServiceImpl.java
Patch:
@@ -40,7 +40,8 @@ public Mono<Void> rebuildPostIndices() {
 
     private Mono<Void> rebuildPostIndices(PostSearchService searchService) {
         return postFinder.listAll()
-            .filter(post -> Post.isPublished(post.getMetadata()))
+            .filter(
+                post -> Post.isPublished(post.getMetadata()) && Post.isPublic(post.getSpec()))
             .flatMap(listedPostVo -> {
                 PostVo postVo = PostVo.from(listedPostVo);
                 return postFinder.content(postVo.getMetadata().getName())

File: application/src/main/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpoint.java
Patch:
@@ -273,6 +273,7 @@ public Comparator<Attachment> toComparator() {
         }
     }
 
+    @Schema(types = "object")
     public interface IUploadRequest {
 
         @Schema(requiredMode = REQUIRED, description = "Attachment file")

File: application/src/main/java/run/halo/app/core/extension/endpoint/PluginEndpoint.java
Patch:
@@ -673,7 +673,7 @@ Mono<ServerResponse> list(ServerRequest request) {
             .flatMap(listResult -> ServerResponse.ok().bodyValue(listResult));
     }
 
-    @Schema(name = "PluginInstallRequest")
+    @Schema(name = "PluginInstallRequest", types = "object")
     public static class InstallRequest {
 
         private final MultiValueMap<String, Part> multipartData;

File: application/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java
Patch:
@@ -244,6 +244,7 @@ private Mono<ServerResponse> uploadUserAvatar(ServerRequest request) {
             .flatMap(user -> ServerResponse.ok().bodyValue(user));
     }
 
+    @Schema(types = "object")
     public interface IAvatarUploadRequest {
         @Schema(requiredMode = REQUIRED, description = "Avatar file")
         FilePart getFile();

File: application/src/main/java/run/halo/app/core/extension/theme/ThemeEndpoint.java
Patch:
@@ -466,7 +466,7 @@ Mono<ServerResponse> resetSettingConfig(ServerRequest request) {
                 .bodyValue(theme));
     }
 
-    @Schema(name = "ThemeInstallRequest")
+    @Schema(name = "ThemeInstallRequest", types = "object")
     public static class InstallRequest {
 
         @Schema(hidden = true)

File: application/src/main/java/run/halo/app/migration/MigrationEndpoint.java
Patch:
@@ -140,6 +140,7 @@ private Flux<DataBuffer> getContent(RestoreRequest request) {
             .switchIfEmpty(backupFileContent);
     }
 
+    @Schema(types = "object")
     public static class RestoreRequest {
         private final MultiValueMap<String, Part> multipart;
 

File: application/src/main/java/run/halo/app/content/comment/ReplyService.java
Patch:
@@ -31,7 +31,7 @@ static Comparator<Reply> creationTimeAscComparator() {
             reply -> reply.getMetadata().getCreationTimestamp();
         // ascending order by creation time
         // asc nulls high will be placed at the end
-        return Comparator.comparing(creationTime, Comparators.nullsHigh())
+        return Comparator.comparing(creationTime, Comparators.nullsLow())
             .thenComparing(metadataCreationTime)
             .thenComparing(reply -> reply.getMetadata().getName());
     }

File: application/src/test/java/run/halo/app/theme/finders/impl/CommentPublicQueryServiceImplTest.java
Patch:
@@ -164,7 +164,7 @@ void commentComparator() {
                 .map(Comment::getMetadata)
                 .map(MetadataOperator::getName)
                 .collect(Collectors.joining(", "));
-            assertThat(result).isEqualTo("1, 2, 3, 4, 5, 6, 9, 14, 10, 8, 7, 13, 12, 11");
+            assertThat(result).isEqualTo("1, 2, 4, 3, 5, 6, 10, 14, 9, 8, 7, 11, 12, 13");
         }
 
         @Test

File: application/src/test/java/run/halo/app/core/extension/service/impl/PluginServiceImplTest.java
Patch:
@@ -207,8 +207,9 @@ void reload() {
         String pluginName = "test-plugin";
         PluginWrapper pluginWrapper = mock(PluginWrapper.class);
         when(pluginManager.getPlugin(pluginName)).thenReturn(pluginWrapper);
+        var pluginPath = Paths.get("tmp", "plugins", "fake-plugin.jar");
         when(pluginWrapper.getPluginPath())
-            .thenReturn(Paths.get("/tmp/plugins/fake-plugin.jar"));
+            .thenReturn(pluginPath);
         Plugin plugin = new Plugin();
         plugin.setMetadata(new Metadata());
         plugin.getMetadata().setName(pluginName);
@@ -224,7 +225,7 @@ void reload() {
         verify(client, times(1)).update(
             argThat(p -> {
                 String reloadPath = p.getMetadata().getAnnotations().get(PluginConst.RELOAD_ANNO);
-                assertThat(reloadPath).isEqualTo("/tmp/plugins/fake-plugin.jar");
+                assertThat(reloadPath).isEqualTo(pluginPath.toString());
                 return true;
             })
         );

File: application/src/test/java/run/halo/app/core/extension/endpoint/PostEndpointTest.java
Patch:
@@ -50,6 +50,7 @@ class PostEndpointTest {
 
     @BeforeEach
     void setUp() {
+        postEndpoint.setMaxAttemptsWaitForPublish(3);
         webTestClient = WebTestClient
             .bindToRouterFunction(postEndpoint.endpoint())
             .build();
@@ -170,7 +171,7 @@ void shouldFailIfWaitTimeoutForPublishedStatus() {
             .is5xxServerError();
 
         // Verify WebClient retry behavior
-        verify(client, times(7)).get(eq(Post.class), eq("post-1"));
+        verify(client, times(5)).get(eq(Post.class), eq("post-1"));
         verify(client).update(any(Post.class));
     }
 

File: application/src/main/java/run/halo/app/core/extension/endpoint/PostEndpoint.java
Patch:
@@ -243,7 +243,7 @@ private Mono<Post> awaitPostPublished(String postName) {
                 })
                 .switchIfEmpty(Mono.error(
                     () -> new RetryException("Retry to check post publish status"))))
-            .retryWhen(Retry.fixedDelay(10, Duration.ofMillis(200))
+            .retryWhen(Retry.backoff(5, Duration.ofMillis(100))
                 .filter(t -> t instanceof RetryException));
     }
 

File: application/src/test/java/run/halo/app/core/extension/endpoint/PostEndpointTest.java
Patch:
@@ -170,7 +170,7 @@ void shouldFailIfWaitTimeoutForPublishedStatus() {
             .is5xxServerError();
 
         // Verify WebClient retry behavior
-        verify(client, times(12)).get(eq(Post.class), eq("post-1"));
+        verify(client, times(7)).get(eq(Post.class), eq("post-1"));
         verify(client).update(any(Post.class));
     }
 

File: application/src/main/java/run/halo/app/infra/properties/HaloProperties.java
Patch:
@@ -54,6 +54,9 @@ public class HaloProperties implements Validator {
     @Valid
     private final ConsoleProperties console = new ConsoleProperties();
 
+    @Valid
+    private final UcProperties uc = new UcProperties();
+
     @Valid
     private final ThemeProperties theme = new ThemeProperties();
 

File: application/src/main/java/run/halo/app/core/extension/service/DefaultRoleService.java
Patch:
@@ -54,7 +54,7 @@ public Mono<Boolean> contains(Collection<String> source, Collection<String> cand
         if (source.contains(SuperAdminInitializer.SUPER_ROLE_NAME)) {
             return Mono.just(true);
         }
-        return listDependencies(new HashSet<>(source), shouldFilterHidden(true))
+        return listDependencies(new HashSet<>(source), shouldFilterHidden(false))
             .map(role -> role.getMetadata().getName())
             .collect(Collectors.toSet())
             .map(roleNames -> roleNames.containsAll(candidates));

File: application/src/main/java/run/halo/app/theme/finders/CommentFinder.java
Patch:
@@ -1,10 +1,10 @@
 package run.halo.app.theme.finders;
 
+import java.util.Map;
 import org.springframework.lang.Nullable;
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.content.Comment;
 import run.halo.app.extension.ListResult;
-import run.halo.app.extension.Ref;
 import run.halo.app.theme.finders.vo.CommentVo;
 import run.halo.app.theme.finders.vo.ReplyVo;
 
@@ -18,7 +18,7 @@ public interface CommentFinder {
 
     Mono<CommentVo> getByName(String name);
 
-    Mono<ListResult<CommentVo>> list(@Nullable Ref ref, @Nullable Integer page,
+    Mono<ListResult<CommentVo>> list(@Nullable Map<String, String> ref, @Nullable Integer page,
         @Nullable Integer size);
 
     Mono<ListResult<ReplyVo>> listReply(String commentName, @Nullable Integer page,

File: application/src/main/java/run/halo/app/notification/EmailNotifier.java
Patch:
@@ -145,12 +145,11 @@ Mono<String> appendRawBodyFooter(ReasonAttributes attributes) {
 
     Mono<String> appendHtmlBodyFooter(ReasonAttributes attributes) {
         return notificationTemplateRender.render("""
-            ---
-            <div class="footer" style="font-size: 12px; color: #666">
+            <div class="footer" style="font-size: 12px; color: #666;">
             <a th:href="${site.url}" th:text="${site.title}"></a>
             <p class="unsubscribe">
             &mdash;<br />请勿直接回复此回邮件，
-            <a th:href="|${site.url}/console|">查看通知</a>
+            <a th:href="|${site.url}/console/users/-/notifications|">查看通知</a>
             或
             <a th:href="${unsubscribeUrl}">取消订阅</a>。
             </p>

File: application/src/main/java/run/halo/app/notification/UserNotificationPreference.java
Patch:
@@ -6,6 +6,7 @@
 import java.util.Set;
 import lombok.Data;
 import lombok.Getter;
+import org.springframework.lang.NonNull;
 
 /**
  * Notification preference of user.
@@ -28,6 +29,7 @@ public static class ReasonTypeNotifier extends HashMap<String, NotifierSetting>
          * @return if key of reasonType not exists, return default notifier, otherwise return the
          * notifiers
          */
+        @NonNull
         public Set<String> getNotifiers(String reasonType) {
             var result = this.get(reasonType);
             return result == null ? Set.of(DEFAULT_NOTIFIER)

File: application/src/main/java/run/halo/app/notification/UserNotificationPreferenceService.java
Patch:
@@ -11,4 +11,7 @@
 public interface UserNotificationPreferenceService {
 
     Mono<UserNotificationPreference> getByUser(String username);
+
+    Mono<Void> saveByUser(String username,
+        UserNotificationPreference userNotificationPreference);
 }

File: api/src/main/java/run/halo/app/extension/MetadataUtil.java
Patch:
@@ -7,6 +7,8 @@
 public enum MetadataUtil {
     ;
 
+    public static final String SYSTEM_FINALIZER = "system-protection";
+
     /**
      * Gets extension metadata labels null safe.
      *

File: application/src/main/java/run/halo/app/security/authorization/Attributes.java
Patch:
@@ -67,4 +67,6 @@ public interface Attributes {
     String getPath();
 
     String getSubName();
+
+    String getUserSpace();
 }

File: application/src/main/java/run/halo/app/security/authorization/AuthorizingVisitor.java
Patch:
@@ -10,7 +10,7 @@
  * @author guqing
  * @since 2.0.0
  */
-class AuthorizingVisitor implements RuleAccumulator {
+public class AuthorizingVisitor implements RuleAccumulator {
     private final RbacRequestEvaluation requestEvaluation = new RbacRequestEvaluation();
 
     private final Attributes requestAttributes;

File: application/src/main/java/run/halo/app/core/extension/service/PluginService.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.core.extension.service;
 
 import java.nio.file.Path;
+import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.web.server.ServerWebInputException;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
@@ -46,14 +47,14 @@ public interface PluginService {
      *
      * @return uglified js bundle
      */
-    Mono<String> uglifyJsBundle();
+    Flux<DataBuffer> uglifyJsBundle();
 
     /**
      * Uglify css bundle from all enabled plugins to a single css bundle string.
      *
      * @return uglified css bundle
      */
-    Mono<String> uglifyCssBundle();
+    Flux<DataBuffer> uglifyCssBundle();
 
     /**
      * <p>Generate js bundle version for cache control.</p>

File: application/src/test/java/run/halo/app/core/extension/reconciler/PluginReconcilerTest.java
Patch:
@@ -50,6 +50,7 @@
 import run.halo.app.infra.utils.FileUtils;
 import run.halo.app.infra.utils.JsonUtils;
 import run.halo.app.plugin.HaloPluginManager;
+import run.halo.app.plugin.HaloPluginWrapper;
 import run.halo.app.plugin.PluginConst;
 import run.halo.app.plugin.PluginStartingError;
 
@@ -69,7 +70,7 @@ class PluginReconcilerTest {
     ExtensionClient extensionClient;
 
     @Mock
-    PluginWrapper pluginWrapper;
+    HaloPluginWrapper pluginWrapper;
 
     @Mock
     ApplicationEventPublisher eventPublisher;

File: application/src/main/java/run/halo/app/security/authentication/pat/PatEndpoint.java
Patch:
@@ -26,7 +26,7 @@ public PatEndpoint(UserScopedPatHandler patHandler) {
     @Override
     public RouterFunction<ServerResponse> endpoint() {
         var tag = groupVersion().toString() + "/" + PersonalAccessToken.KIND;
-        return route().nest(path("/users/-/personalaccesstokens"),
+        return route().nest(path("/personalaccesstokens"),
                 () -> route()
                     .POST(patHandler::create,
                         builder -> builder

File: application/src/test/java/run/halo/app/security/authentication/pat/PatTest.java
Patch:
@@ -26,7 +26,7 @@ void generatePat() {
         spec.setRoles(List.of("super-role"));
         spec.setName("Fake PAT");
         webClient.post()
-            .uri("/apis/api.security.halo.run/v1alpha1/users/-/personalaccesstokens")
+            .uri("/apis/api.security.halo.run/v1alpha1/personalaccesstokens")
             .bodyValue(requestPat)
             .exchange()
             .expectStatus().isOk()

File: api/src/main/java/run/halo/app/core/extension/Role.java
Patch:
@@ -38,6 +38,8 @@ public class Role extends AbstractExtension {
 
     public static final String SYSTEM_RESERVED_LABELS =
         "rbac.authorization.halo.run/system-reserved";
+    public static final String HIDDEN_LABEL_NAME = "halo.run/hidden";
+    public static final String TEMPLATE_LABEL_NAME = "halo.run/role-template";
     public static final String UI_PERMISSIONS_AGGREGATED_ANNO =
         "rbac.authorization.halo.run/ui-permissions-aggregated";
 

File: application/src/main/java/run/halo/app/core/extension/service/DefaultRoleBindingService.java
Patch:
@@ -6,6 +6,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.security.core.GrantedAuthority;
 import org.springframework.security.web.authentication.AnonymousAuthenticationFilter;
+import run.halo.app.security.authorization.AuthorityUtils;
 
 /**
  * <p>Obtain the authorities from the authenticated authentication and construct it as a RoleBinding
@@ -21,8 +22,8 @@
  */
 @Slf4j
 public class DefaultRoleBindingService implements RoleBindingService {
-    private static final String SCOPE_AUTHORITY_PREFIX = "SCOPE_";
-    private static final String ROLE_AUTHORITY_PREFIX = "ROLE_";
+    private static final String SCOPE_AUTHORITY_PREFIX = AuthorityUtils.SCOPE_PREFIX;
+    private static final String ROLE_AUTHORITY_PREFIX = AuthorityUtils.ROLE_PREFIX;
 
     @Override
     public Set<String> listBoundRoleNames(Collection<? extends GrantedAuthority> authorities) {

File: application/src/main/java/run/halo/app/security/DefaultSuperAdminInitializer.java
Patch:
@@ -21,8 +21,6 @@
 @RequiredArgsConstructor
 public class DefaultSuperAdminInitializer implements SuperAdminInitializer {
 
-    private static final String SUPER_ROLE_NAME = "super-role";
-
     private final ReactiveExtensionClient client;
     private final PasswordEncoder passwordEncoder;
 

File: application/src/main/java/run/halo/app/security/SuperAdminInitializer.java
Patch:
@@ -3,6 +3,7 @@
 import lombok.Builder;
 import lombok.Data;
 import reactor.core.publisher.Mono;
+import run.halo.app.security.authorization.AuthorityUtils;
 
 /**
  * Super admin initializer.
@@ -12,6 +13,8 @@
  */
 public interface SuperAdminInitializer {
 
+    String SUPER_ROLE_NAME = AuthorityUtils.SUPER_ROLE_NAME;
+
     /**
      * Initialize super admin.
      *

File: api/src/main/java/run/halo/app/infra/SystemSetting.java
Patch:
@@ -79,6 +79,7 @@ public static class Post {
         Integer categoryPageSize;
         Integer tagPageSize;
         Boolean review;
+        String slugGenerationStrategy;
     }
 
     @Data

File: application/src/main/java/run/halo/app/security/DefaultUserDetailService.java
Patch:
@@ -41,13 +41,14 @@ public Mono<UserDetails> findByUsername(String username) {
             .onErrorMap(UserNotFoundException.class,
                 e -> new BadCredentialsException("Invalid Credentials"))
             .flatMap(user -> {
-                var subject = new Subject(KIND, username, GROUP);
+                var name = user.getMetadata().getName();
+                var subject = new Subject(KIND, name, GROUP);
                 return roleService.listRoleRefs(subject)
                     .filter(this::isRoleRef)
                     .map(RoleRef::getName)
                     .collectList()
                     .map(roleNames -> User.builder()
-                        .username(username)
+                        .username(name)
                         .password(user.getSpec().getPassword())
                         .roles(roleNames.toArray(new String[0]))
                         .build());

File: application/src/main/java/run/halo/app/plugin/resources/BundleResourceUtils.java
Patch:
@@ -19,8 +19,8 @@
  */
 public abstract class BundleResourceUtils {
     private static final String CONSOLE_BUNDLE_LOCATION = "console";
-    private static final String JS_BUNDLE = "main.js";
-    private static final String CSS_BUNDLE = "style.css";
+    public static final String JS_BUNDLE = "main.js";
+    public static final String CSS_BUNDLE = "style.css";
 
     /**
      * Gets plugin css bundle resource path relative to the plugin classpath if exists.

File: application/src/main/java/run/halo/app/migration/impl/MigrationServiceImpl.java
Patch:
@@ -26,6 +26,7 @@
 import org.springframework.core.io.buffer.DataBuffer;
 import org.springframework.stereotype.Service;
 import org.springframework.transaction.annotation.Transactional;
+import org.springframework.util.StringUtils;
 import org.springframework.web.server.ServerWebInputException;
 import reactor.core.Exceptions;
 import reactor.core.publisher.Flux;
@@ -145,7 +146,8 @@ public Mono<Void> restore(Publisher<DataBuffer> content) {
     public Mono<Void> cleanup(Backup backup) {
         return Mono.<Void>create(sink -> {
             var status = backup.getStatus();
-            if (status == null || status.getFilename() == null) {
+            if (status == null || !StringUtils.hasText(status.getFilename())) {
+                sink.success();
                 return;
             }
             var filename = status.getFilename();

File: application/src/test/java/run/halo/app/core/extension/reconciler/PluginReconcilerTest.java
Patch:
@@ -125,8 +125,6 @@ void reconcileOkWhenPluginManagerStartFailed() {
         // mock plugin real state is started
         when(pluginWrapper.getPluginState()).thenReturn(PluginState.STOPPED);
         var pluginDescriptor = mock(PluginDescriptor.class);
-        when(pluginWrapper.getDescriptor()).thenReturn(pluginDescriptor);
-        when(pluginDescriptor.getVersion()).thenReturn("1.0.0");
 
         PluginStartingError pluginStartingError =
             PluginStartingError.of("apples", "error message", "dev message");
@@ -202,7 +200,7 @@ void shouldReconcileStopWhenEnabledIsFalseAndPhaseIsStopped() {
         when(pluginWrapper.getPluginState()).thenReturn(PluginState.STARTED);
 
         ArgumentCaptor<Plugin> pluginCaptor = doReconcileWithoutRequeue();
-        verify(extensionClient, times(3)).update(any(Plugin.class));
+        verify(extensionClient, times(4)).update(any(Plugin.class));
 
         Plugin updateArgs = pluginCaptor.getValue();
         assertThat(updateArgs).isNotNull();

File: application/src/main/java/run/halo/app/theme/dialect/HaloProcessorDialect.java
Patch:
@@ -35,6 +35,7 @@ public Set<IProcessor> getProcessors(String dialectPrefix) {
         processors.add(new TemplateFooterElementTagProcessor(dialectPrefix));
         processors.add(new JsonNodePropertyAccessorBoundariesProcessor());
         processors.add(new CommentElementTagProcessor(dialectPrefix));
+        processors.add(new CommentEnabledVariableProcessor());
         return processors;
     }
 

File: application/src/main/java/run/halo/app/plugin/SharedApplicationContextHolder.java
Patch:
@@ -8,6 +8,7 @@
 import run.halo.app.extension.DefaultSchemeManager;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.ReactiveExtensionClient;
+import run.halo.app.infra.BackupRootGetter;
 import run.halo.app.infra.ExternalUrlSupplier;
 
 /**
@@ -70,6 +71,8 @@ SharedApplicationContext createSharedApplicationContext() {
             rootApplicationContext.getBean(ServerSecurityContextRepository.class));
         beanFactory.registerSingleton("attachmentService",
             rootApplicationContext.getBean(AttachmentService.class));
+        beanFactory.registerSingleton("backupRootGetter",
+            rootApplicationContext.getBean(BackupRootGetter.class));
         // TODO add more shared instance here
 
         return sharedApplicationContext;

File: application/src/main/java/run/halo/app/infra/properties/HaloProperties.java
Patch:
@@ -75,7 +75,5 @@ public void validate(Object target, Errors errors) {
             errors.rejectValue("externalUrl", "external-url.required.when-using-absolute-permalink",
                 "External URL is required when property `use-absolute-permalink` is set to true.");
         }
-        SecurityProperties.Initializer.validateUsername(props.getSecurity().getInitializer(),
-            errors);
     }
 }

File: application/src/test/java/run/halo/app/theme/message/ThemeMessageResolverIntegrationTest.java
Patch:
@@ -24,7 +24,7 @@
 import org.springframework.web.reactive.function.server.ServerResponse;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;
-import run.halo.app.infra.SetupStateCache;
+import run.halo.app.infra.InitializationStateGetter;
 import run.halo.app.theme.ThemeContext;
 import run.halo.app.theme.ThemeResolver;
 
@@ -46,14 +46,14 @@ public class ThemeMessageResolverIntegrationTest {
     private URL otherThemeUrl;
 
     @SpyBean
-    private SetupStateCache setupStateCache;
+    private InitializationStateGetter initializationStateGetter;
 
     @Autowired
     private WebTestClient webTestClient;
 
     @BeforeEach
     void setUp() throws FileNotFoundException, URISyntaxException {
-        when(setupStateCache.get()).thenReturn(true);
+        when(initializationStateGetter.userInitialized()).thenReturn(Mono.just(true));
         defaultThemeUrl = ResourceUtils.getURL("classpath:themes/default");
         otherThemeUrl = ResourceUtils.getURL("classpath:themes/other");
 

File: api/src/main/java/run/halo/app/core/extension/MenuItem.java
Patch:
@@ -1,5 +1,7 @@
 package run.halo.app.core.extension;
 
+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;
+
 import com.fasterxml.jackson.annotation.JsonCreator;
 import com.fasterxml.jackson.annotation.JsonValue;
 import io.swagger.v3.oas.annotations.media.ArraySchema;
@@ -19,7 +21,7 @@
     plural = "menuitems", singular = "menuitem")
 public class MenuItem extends AbstractExtension {
 
-    @Schema(description = "The spec of menu item.", required = true)
+    @Schema(description = "The spec of menu item.", requiredMode = REQUIRED)
     private MenuItemSpec spec;
 
     @Schema(description = "The status of menu item.")

File: api/src/main/java/run/halo/app/core/extension/Role.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.core.extension;
 
+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;
 import static java.util.Arrays.compare;
 import static run.halo.app.core.extension.Role.GROUP;
 import static run.halo.app.core.extension.Role.KIND;
@@ -44,7 +45,7 @@ public class Role extends AbstractExtension {
     public static final String VERSION = "v1alpha1";
     public static final String KIND = "Role";
 
-    @Schema(required = true)
+    @Schema(requiredMode = REQUIRED)
     List<PolicyRule> rules;
 
     /**

File: api/src/main/java/run/halo/app/core/extension/Theme.java
Patch:
@@ -34,7 +34,7 @@ public class Theme extends AbstractExtension {
 
     public static final String THEME_NAME_LABEL = "theme.halo.run/theme-name";
 
-    @Schema(required = true)
+    @Schema(requiredMode = REQUIRED)
     private ThemeSpec spec;
 
     private ThemeStatus status;

File: api/src/main/java/run/halo/app/core/extension/attachment/Attachment.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.core.extension.attachment;
 
+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;
 import static run.halo.app.core.extension.attachment.Attachment.KIND;
 
 import io.swagger.v3.oas.annotations.media.ArraySchema;
@@ -20,7 +21,7 @@ public class Attachment extends AbstractExtension {
 
     public static final String KIND = "Attachment";
 
-    @Schema(required = true)
+    @Schema(requiredMode = REQUIRED)
     private AttachmentSpec spec;
 
     private AttachmentStatus status;

File: api/src/main/java/run/halo/app/core/extension/attachment/Constant.java
Patch:
@@ -20,8 +20,6 @@ public enum Constant {
      * Do not use this key to set external link. You could implement
      * {@link AttachmentHandler#getPermalink} by your self.
      * <p>
-     *
-     * @deprecated Use your own group instead.
      */
     public static final String EXTERNAL_LINK_ANNO_KEY = GROUP + "/external-link";
 

File: api/src/main/java/run/halo/app/core/extension/attachment/Group.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.core.extension.attachment;
 
+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;
 import static run.halo.app.core.extension.attachment.Group.KIND;
 
 import io.swagger.v3.oas.annotations.media.Schema;
@@ -20,15 +21,15 @@ public class Group extends AbstractExtension {
     public static final String KIND = "Group";
     public static final String HIDDEN_LABEL = "halo.run/hidden";
 
-    @Schema(required = true)
+    @Schema(requiredMode = REQUIRED)
     private GroupSpec spec;
 
     private GroupStatus status;
 
     @Data
     public static class GroupSpec {
 
-        @Schema(required = true, description = "Display name of group")
+        @Schema(requiredMode = REQUIRED, description = "Display name of group")
         private String displayName;
 
     }

File: api/src/main/java/run/halo/app/extension/MetadataOperator.java
Patch:
@@ -1,5 +1,7 @@
 package run.halo.app.extension;
 
+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;
+
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import io.swagger.v3.oas.annotations.media.Schema;
@@ -17,7 +19,7 @@
 @Schema(implementation = Metadata.class)
 public interface MetadataOperator {
 
-    @Schema(name = "name", description = "Metadata name", required = true)
+    @Schema(name = "name", description = "Metadata name", requiredMode = REQUIRED)
     @JsonProperty("name")
     String getName();
 

File: api/src/main/java/run/halo/app/extension/Ref.java
Patch:
@@ -1,5 +1,7 @@
 package run.halo.app.extension;
 
+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;
+
 import io.swagger.v3.oas.annotations.media.Schema;
 import java.util.Objects;
 import lombok.Data;
@@ -17,7 +19,7 @@ public class Ref {
     @Schema(description = "Extension kind")
     private String kind;
 
-    @Schema(required = true, description = "Extension name. This field is mandatory")
+    @Schema(requiredMode = REQUIRED, description = "Extension name. This field is mandatory")
     private String name;
 
     public static Ref of(String name) {

File: api/src/main/java/run/halo/app/search/SearchParam.java
Patch:
@@ -1,5 +1,7 @@
 package run.halo.app.search;
 
+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;
+
 import io.swagger.v3.oas.annotations.media.Schema;
 import org.springframework.util.MultiValueMap;
 import org.springframework.util.StringUtils;
@@ -17,7 +19,7 @@ public SearchParam(MultiValueMap<String, String> query) {
         this.query = query;
     }
 
-    @Schema(name = "keyword", required = true)
+    @Schema(name = "keyword", requiredMode = REQUIRED)
     public String getKeyword() {
         var keyword = query.getFirst("keyword");
         if (!StringUtils.hasText(keyword)) {

File: application/src/main/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpoint.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.core.extension.attachment.endpoint;
 
+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;
 import static java.util.Comparator.comparing;
 import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;
 import static org.springdoc.core.fn.builders.content.Builder.contentBuilder;
@@ -274,10 +275,10 @@ public Comparator<Attachment> toComparator() {
 
     public interface IUploadRequest {
 
-        @Schema(required = true, description = "Attachment file")
+        @Schema(requiredMode = REQUIRED, description = "Attachment file")
         FilePart getFile();
 
-        @Schema(required = true, description = "Storage policy name")
+        @Schema(requiredMode = REQUIRED, description = "Storage policy name")
         String getPolicyName();
 
         @Schema(description = "The name of the group to which the attachment belongs")

File: application/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java
Patch:
@@ -429,7 +429,7 @@ Mono<ServerResponse> changePassword(ServerRequest request) {
     }
 
     record ChangePasswordRequest(
-        @Schema(description = "New password.", required = true, minLength = 6)
+        @Schema(description = "New password.", requiredMode = REQUIRED, minLength = 6)
         String password) {
     }
 
@@ -522,8 +522,8 @@ private Flux<String> uiPermissions(Set<Role> roles) {
             .flatMapIterable(Function.identity());
     }
 
-    record UserPermission(@Schema(required = true) Set<Role> roles,
-                          @Schema(required = true) Set<String> uiPermissions) {
+    record UserPermission(@Schema(requiredMode = REQUIRED) Set<Role> roles,
+                          @Schema(requiredMode = REQUIRED) Set<String> uiPermissions) {
     }
 
     public class ListRequest extends IListRequest.QueryListRequest {

File: application/src/main/java/run/halo/app/core/extension/theme/ThemeEndpoint.java
Patch:
@@ -410,7 +410,7 @@ Mono<ServerResponse> listThemes(ServerRequest request) {
 
     public interface IUpgradeRequest {
 
-        @Schema(required = true, description = "Theme zip file.")
+        @Schema(requiredMode = REQUIRED, description = "Theme zip file.")
         FilePart getFile();
 
     }
@@ -501,7 +501,7 @@ Mono<ServerResponse> resetSettingConfig(ServerRequest request) {
 
     @Schema(name = "ThemeInstallRequest")
     public record InstallRequest(
-        @Schema(required = true, description = "Theme zip file.") FilePart file) {
+        @Schema(requiredMode = REQUIRED, description = "Theme zip file.") FilePart file) {
     }
 
     public record InstallFromUriRequest(@Schema(requiredMode = REQUIRED) URI uri) {

File: application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java
Patch:
@@ -102,6 +102,7 @@ private Mono<Unstructured> get(GroupVersionKind gvk, String name) {
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public <E extends Extension> Mono<E> create(E extension) {
         return Mono.just(extension)
             .doOnNext(ext -> {
@@ -133,6 +134,7 @@ public <E extends Extension> Mono<E> create(E extension) {
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public <E extends Extension> Mono<E> update(E extension) {
         // Refactor the atomic reference if we have a better solution.
         final var statusChangeOnly = new AtomicBoolean(false);
@@ -181,6 +183,7 @@ private Mono<? extends Extension> getLatest(Extension extension) {
     }
 
     @Override
+    @SuppressWarnings("unchecked")
     public <E extends Extension> Mono<E> delete(E extension) {
         // set deletionTimestamp
         extension.getMetadata().setDeletionTimestamp(Instant.now());

File: application/src/test/java/run/halo/app/config/ExtensionConfigurationTest.java
Patch:
@@ -5,7 +5,6 @@
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.anySet;
-import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.when;
 import static org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf;
 
@@ -25,7 +24,6 @@
 import org.springframework.security.test.context.support.WithMockUser;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import reactor.core.publisher.Flux;
-import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.Role;
 import run.halo.app.core.extension.service.RoleService;
 import run.halo.app.extension.ExtensionClient;
@@ -60,7 +58,6 @@ void setUp() {
         role.setMetadata(new Metadata());
         role.getMetadata().setName("supper-role");
         role.setRules(List.of(rule));
-        when(roleService.getMonoRole(anyString())).thenReturn(Mono.just(role));
         when(roleService.listDependenciesFlux(anySet())).thenReturn(Flux.just(role));
         // register scheme
         schemeManager.register(FakeExtension.class);

File: application/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java
Patch:
@@ -209,6 +209,7 @@ private Mono<ServerResponse> deleteUserAvatar(ServerRequest request) {
             .flatMap(user -> {
                 MetadataUtil.nullSafeAnnotations(user)
                     .remove(User.AVATAR_ATTACHMENT_NAME_ANNO);
+                user.getSpec().setAvatar(null);
                 return client.update(user);
             })
             .flatMap(user -> ServerResponse.ok().bodyValue(user));

File: api/src/main/java/run/halo/app/theme/dialect/CommentWidget.java
Patch:
@@ -13,6 +13,8 @@
  */
 public interface CommentWidget extends ExtensionPoint {
 
+    String ENABLE_COMMENT_ATTRIBUTE = CommentWidget.class.getName() + ".ENABLE";
+
     void render(ITemplateContext context, IProcessableElementTag tag,
         IElementTagStructureHandler structureHandler);
 }

File: application/src/main/java/run/halo/app/theme/router/ModelMapUtils.java
Patch:
@@ -6,6 +6,7 @@
 import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.Scheme;
 import run.halo.app.theme.DefaultTemplateEnum;
+import run.halo.app.theme.dialect.CommentWidget;
 import run.halo.app.theme.finders.vo.PostVo;
 import run.halo.app.theme.finders.vo.SinglePageVo;
 
@@ -32,6 +33,7 @@ public static Map<String, Object> postModel(PostVo postVo) {
         model.put("groupVersionKind", POST_SCHEME.groupVersionKind());
         model.put("plural", POST_SCHEME.plural());
         model.put("post", postVo);
+        model.put(CommentWidget.ENABLE_COMMENT_ATTRIBUTE, postVo.getSpec().getAllowComment());
         return model;
     }
 
@@ -48,6 +50,7 @@ public static Map<String, Object> singlePageModel(SinglePageVo pageVo) {
         model.put("plural", SINGLE_PAGE_SCHEME.plural());
         model.put(ModelConst.TEMPLATE_ID, DefaultTemplateEnum.SINGLE_PAGE.getValue());
         model.put("singlePage", pageVo);
+        model.put(CommentWidget.ENABLE_COMMENT_ATTRIBUTE, pageVo.getSpec().getAllowComment());
         return model;
     }
 }

File: api/src/main/java/run/halo/app/infra/SystemSetting.java
Patch:
@@ -68,6 +68,7 @@ public static class User {
         public static final String GROUP = "user";
         Boolean allowRegistration;
         String defaultRole;
+        String avatarPolicy;
     }
 
     @Data

File: application/src/main/java/run/halo/app/extension/router/ExtensionRouterFunctionFactory.java
Patch:
@@ -13,7 +13,6 @@
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Scheme;
-import run.halo.app.extension.router.IListRequest.QueryListRequest;
 
 public class ExtensionRouterFunctionFactory {
 
@@ -55,7 +54,7 @@ public RouterFunction<ServerResponse> create() {
                         .response(responseBuilder().responseCode("200")
                             .description("Response " + scheme.plural())
                             .implementation(ListResult.generateGenericClass(scheme)));
-                    QueryParamBuildUtil.buildParametersFromType(builder, QueryListRequest.class);
+                    QueryParamBuildUtil.buildParametersFromType(builder, SortableRequest.class);
                 })
             .POST(createHandler.pathPattern(), createHandler,
                 builder -> builder.operationId("Create" + gvk)

File: application/src/main/java/run/halo/app/theme/endpoint/CategoryQueryEndpoint.java
Patch:
@@ -23,6 +23,7 @@
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.router.QueryParamBuildUtil;
+import run.halo.app.extension.router.SortableRequest;
 import run.halo.app.theme.finders.PostPublicQueryService;
 import run.halo.app.theme.finders.vo.CategoryVo;
 import run.halo.app.theme.finders.vo.ListedPostVo;

File: application/src/main/java/run/halo/app/theme/endpoint/PostPublicQuery.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.theme.endpoint;
 
 import org.springframework.web.server.ServerWebExchange;
+import run.halo.app.extension.router.SortableRequest;
 
 /**
  * Query parameters for post public APIs.

File: application/src/main/java/run/halo/app/theme/endpoint/SinglePageQueryEndpoint.java
Patch:
@@ -18,6 +18,7 @@
 import run.halo.app.extension.GroupVersion;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.router.QueryParamBuildUtil;
+import run.halo.app.extension.router.SortableRequest;
 import run.halo.app.theme.finders.SinglePageFinder;
 import run.halo.app.theme.finders.vo.ListedSinglePageVo;
 import run.halo.app.theme.finders.vo.SinglePageVo;

File: application/src/main/java/run/halo/app/theme/endpoint/TagQueryEndpoint.java
Patch:
@@ -21,6 +21,7 @@
 import run.halo.app.extension.GroupVersion;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.router.QueryParamBuildUtil;
+import run.halo.app.extension.router.SortableRequest;
 import run.halo.app.theme.finders.PostPublicQueryService;
 import run.halo.app.theme.finders.TagFinder;
 import run.halo.app.theme.finders.vo.ListedPostVo;

File: application/src/test/java/run/halo/app/plugin/PluginCompositeRouterFunctionTest.java
Patch:
@@ -55,6 +55,7 @@ class PluginCompositeRouterFunctionTest {
     @SuppressWarnings("unchecked")
     void setUp() {
         var fakeContext = mock(PluginApplicationContext.class);
+        when(fakeContext.isActive()).thenReturn(true);
         ExtensionContextRegistry.getInstance().register("fake-plugin", fakeContext);
 
         when(rawRouterFunctionsProvider.orderedStream()).thenReturn(Stream.empty());

File: api/src/main/java/run/halo/app/core/extension/attachment/Group.java
Patch:
@@ -18,6 +18,7 @@
 public class Group extends AbstractExtension {
 
     public static final String KIND = "Group";
+    public static final String HIDDEN_LABEL = "halo.run/hidden";
 
     @Schema(required = true)
     private GroupSpec spec;

File: application/src/test/java/run/halo/app/core/extension/reconciler/PluginReconcilerTest.java
Patch:
@@ -79,6 +79,7 @@ class PluginReconcilerTest {
     @BeforeEach
     void setUp() {
         pluginReconciler = new PluginReconciler(extensionClient, haloPluginManager, eventPublisher);
+        lenient().when(haloPluginManager.getPluginsRoot()).thenReturn(Paths.get("plugins"));
         lenient().when(haloPluginManager.validatePluginVersion(any())).thenReturn(true);
         lenient().when(haloPluginManager.getSystemVersion()).thenReturn("0.0.0");
         lenient().when(haloPluginManager.getPlugin(any())).thenReturn(pluginWrapper);
@@ -378,10 +379,10 @@ void dataBlob() {
     @Test
     void resolvePluginPathAnnotation() {
         when(haloPluginManager.getPluginsRoot()).thenReturn(Paths.get("/tmp/plugins"));
-        String path = pluginReconciler.resolvePluginPathAnnotation("/tmp/plugins/sitemap-1.0.jar");
+        String path = pluginReconciler.resolvePluginPathForAnno("/tmp/plugins/sitemap-1.0.jar");
         assertThat(path).isEqualTo("sitemap-1.0.jar");
 
-        path = pluginReconciler.resolvePluginPathAnnotation("/abc/plugins/sitemap-1.0.jar");
+        path = pluginReconciler.resolvePluginPathForAnno("/abc/plugins/sitemap-1.0.jar");
         assertThat(path).isEqualTo("/abc/plugins/sitemap-1.0.jar");
     }
 

File: application/src/main/java/run/halo/app/theme/router/PreviewRouterFunction.java
Patch:
@@ -70,7 +70,7 @@ private Mono<ServerResponse> previewPost(ServerRequest request) {
             .flatMap(post -> canPreview(post.getContributors())
                 .doOnNext(canPreview -> {
                     if (!canPreview) {
-                        throw new NotFoundException("Page not found.");
+                        throw new NotFoundException("Post not found.");
                     }
                 })
                 .thenReturn(post)
@@ -138,7 +138,7 @@ private Mono<ServerResponse> previewSinglePage(ServerRequest request) {
             .flatMap(singlePageVo -> canPreview(singlePageVo.getContributors())
                 .doOnNext(canPreview -> {
                     if (!canPreview) {
-                        throw new NotFoundException("Page not found.");
+                        throw new NotFoundException("Single page not found.");
                     }
                 })
                 .thenReturn(singlePageVo)

File: application/src/main/java/run/halo/app/cache/PageCacheWebFilter.java
Patch:
@@ -30,15 +30,15 @@
 import reactor.core.publisher.Mono;
 
 @Slf4j
-public class CacheWebFilter implements WebFilter, Ordered {
+public class PageCacheWebFilter implements WebFilter, Ordered {
 
     public static final String REQUEST_TO_CACHE = "RequestCacheWebFilterToCache";
 
-    public static final String CACHE_NAME = "page-cache";
+    public static final String CACHE_NAME = "page";
 
     private final Cache cache;
 
-    public CacheWebFilter(CacheManager cacheManager) {
+    public PageCacheWebFilter(CacheManager cacheManager) {
         this.cache = cacheManager.getCache(CACHE_NAME);
     }
 

File: application/src/main/java/run/halo/app/infra/properties/CacheProperties.java
Patch:
@@ -5,6 +5,6 @@
 @Data
 public class CacheProperties {
 
-    private boolean disabled = true;
+    private boolean disabled;
 
 }

File: application/src/main/java/run/halo/app/infra/properties/HaloProperties.java
Patch:
@@ -5,6 +5,8 @@
 import java.net.URL;
 import java.nio.file.Path;
 import java.util.HashSet;
+import java.util.LinkedHashMap;
+import java.util.Map;
 import java.util.Set;
 import lombok.Data;
 import org.springframework.boot.context.properties.ConfigurationProperties;
@@ -59,7 +61,7 @@ public class HaloProperties implements Validator {
     private final AttachmentProperties attachment = new AttachmentProperties();
 
     @Valid
-    private final CacheProperties cache = new CacheProperties();
+    private final Map<String, CacheProperties> caches = new LinkedHashMap<>();
 
     @Override
     public boolean supports(Class<?> clazz) {

File: application/src/main/java/run/halo/app/theme/HaloViewResolver.java
Patch:
@@ -15,7 +15,7 @@
 import org.thymeleaf.spring6.view.reactive.ThymeleafReactiveViewResolver;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.cache.CacheWebFilter;
+import run.halo.app.cache.PageCacheWebFilter;
 import run.halo.app.theme.finders.FinderRegistry;
 
 @Component("thymeleafReactiveViewResolver")
@@ -53,7 +53,7 @@ public Mono<Void> render(Map<String, ?> model, MediaType contentType,
             return themeResolver.getTheme(exchange).flatMap(theme -> {
                 // calculate the engine before rendering
                 setTemplateEngine(engineManager.getTemplateEngine(theme));
-                exchange.getAttributes().put(CacheWebFilter.REQUEST_TO_CACHE, true);
+                exchange.getAttributes().put(PageCacheWebFilter.REQUEST_TO_CACHE, true);
                 return super.render(model, contentType, exchange);
             });
         }

File: api/src/main/java/run/halo/app/core/extension/content/Comment.java
Patch:
@@ -45,6 +45,7 @@ public CommentStatus getStatusOrDefault() {
     }
 
     @Data
+    @ToString(callSuper = true)
     @EqualsAndHashCode(callSuper = true)
     public static class CommentSpec extends BaseCommentSpec {
 

File: application/src/main/java/run/halo/app/theme/finders/CommentFinder.java
Patch:
@@ -18,7 +18,7 @@ public interface CommentFinder {
 
     Mono<CommentVo> getByName(String name);
 
-    Mono<ListResult<CommentVo>> list(Ref ref, @Nullable Integer page,
+    Mono<ListResult<CommentVo>> list(@Nullable Ref ref, @Nullable Integer page,
         @Nullable Integer size);
 
     Mono<ListResult<ReplyVo>> listReply(String commentName, @Nullable Integer page,

File: application/src/main/java/run/halo/app/content/AbstractContentService.java
Patch:
@@ -26,14 +26,14 @@ public abstract class AbstractContentService {
     private final ReactiveExtensionClient client;
 
     public Mono<ContentWrapper> getContent(String snapshotName, String baseSnapshotName) {
-        return client.fetch(Snapshot.class, baseSnapshotName)
+        return client.get(Snapshot.class, baseSnapshotName)
             .doOnNext(this::checkBaseSnapshot)
             .flatMap(baseSnapshot -> {
                 if (StringUtils.equals(snapshotName, baseSnapshotName)) {
                     var contentWrapper = ContentWrapper.patchSnapshot(baseSnapshot, baseSnapshot);
                     return Mono.just(contentWrapper);
                 }
-                return client.fetch(Snapshot.class, snapshotName)
+                return client.get(Snapshot.class, snapshotName)
                     .map(snapshot -> ContentWrapper.patchSnapshot(snapshot, baseSnapshot));
             });
     }
@@ -42,7 +42,7 @@ protected void checkBaseSnapshot(Snapshot snapshot) {
         Assert.notNull(snapshot, "The snapshot must not be null.");
         String keepRawAnno =
             MetadataUtil.nullSafeAnnotations(snapshot).get(Snapshot.KEEP_RAW_ANNO);
-        if (!org.thymeleaf.util.StringUtils.equals(Boolean.TRUE.toString(), keepRawAnno)) {
+        if (!StringUtils.equals(Boolean.TRUE.toString(), keepRawAnno)) {
             throw new IllegalArgumentException(
                 String.format("The snapshot [%s] is not a base snapshot.",
                     snapshot.getMetadata().getName()));

File: api/src/main/java/run/halo/app/theme/dialect/TemplateHeadProcessor.java
Patch:
@@ -8,6 +8,9 @@
 
 /**
  * Theme template <code>head</code> tag snippet injection processor.
+ * <p>Head processor is processed order by {@link org.springframework.core.annotation.Order}
+ * annotation, Higher order will be processed first and so that low-priority processor can be
+ * overwritten head tag written by high-priority processor.</p>
  *
  * @author guqing
  * @since 2.0.0

File: application/src/main/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessor.java
Patch:
@@ -9,6 +9,7 @@
 import java.util.Map;
 import lombok.AllArgsConstructor;
 import org.apache.commons.lang3.StringUtils;
+import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.util.HtmlUtils;
 import org.thymeleaf.context.ITemplateContext;
@@ -29,6 +30,7 @@
  * @since 2.0.0
  */
 @Component
+@Order(1)
 @AllArgsConstructor
 public class ContentTemplateHeadProcessor implements TemplateHeadProcessor {
     private static final String POST_NAME_VARIABLE = "name";

File: application/src/main/java/run/halo/app/theme/dialect/GlobalSeoProcessor.java
Patch:
@@ -3,6 +3,7 @@
 import lombok.AllArgsConstructor;
 import org.apache.commons.lang3.BooleanUtils;
 import org.apache.commons.lang3.StringUtils;
+import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.thymeleaf.context.ITemplateContext;
@@ -20,7 +21,7 @@
  * @see SystemSetting.Seo
  * @since 2.0.0
  */
-@Order
+@Order(Ordered.HIGHEST_PRECEDENCE + 1)
 @Component
 @AllArgsConstructor
 public class GlobalSeoProcessor implements TemplateHeadProcessor {

File: application/src/main/java/run/halo/app/theme/endpoint/CommentFinderEndpoint.java
Patch:
@@ -198,7 +198,9 @@ Mono<ServerResponse> createReply(ServerRequest request) {
                     .defaultIfEmpty(reply);
             })
             .flatMap(reply -> replyService.create(commentName, reply))
-            .flatMap(comment -> ServerResponse.ok().bodyValue(comment));
+            .flatMap(comment -> ServerResponse.ok().bodyValue(comment))
+            .transformDeferred(createIpBasedRateLimiter(request))
+            .onErrorMap(RequestNotPermitted.class, RateLimitExceededException::new);
     }
 
     private boolean checkReplyOwner(Reply reply, Boolean onlySystemUser) {

File: application/src/main/java/run/halo/app/infra/properties/HaloProperties.java
Patch:
@@ -58,6 +58,9 @@ public class HaloProperties implements Validator {
     @Valid
     private final AttachmentProperties attachment = new AttachmentProperties();
 
+    @Valid
+    private final CacheProperties cache = new CacheProperties();
+
     @Override
     public boolean supports(Class<?> clazz) {
         return HaloProperties.class.isAssignableFrom(clazz);

File: application/src/main/java/run/halo/app/theme/HaloViewResolver.java
Patch:
@@ -15,7 +15,7 @@
 import org.thymeleaf.spring6.view.reactive.ThymeleafReactiveViewResolver;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import reactor.core.scheduler.Schedulers;
+import run.halo.app.cache.CacheWebFilter;
 import run.halo.app.theme.finders.FinderRegistry;
 
 @Component("thymeleafReactiveViewResolver")
@@ -53,8 +53,8 @@ public Mono<Void> render(Map<String, ?> model, MediaType contentType,
             return themeResolver.getTheme(exchange).flatMap(theme -> {
                 // calculate the engine before rendering
                 setTemplateEngine(engineManager.getTemplateEngine(theme));
-                return super.render(model, contentType, exchange)
-                    .subscribeOn(Schedulers.boundedElastic());
+                exchange.getAttributes().put(CacheWebFilter.REQUEST_TO_CACHE, true);
+                return super.render(model, contentType, exchange);
             });
         }
 

File: application/src/test/java/run/halo/app/core/extension/ThemeTest.java
Patch:
@@ -39,7 +39,7 @@ void constructor() throws JSONException {
 
         themeSpec.setRepo("https://test.com");
         themeSpec.setLogo("https://test.com");
-        themeSpec.setWebsite("https://test.com");
+        themeSpec.setHomepage("https://test.com");
         themeSpec.setDescription("test-description");
         themeSpec.setConfigMapName("test-config-map");
         themeSpec.setSettingName("test-setting");
@@ -56,7 +56,7 @@ void constructor() throws JSONException {
                         },
                         "description": "test-description",
                         "logo": "https://test.com",
-                        "website": "https://test.com",
+                        "homepage": "https://test.com",
                         "repo": "https://test.com",
                         "version": "*",
                         "requires": "*",

File: application/src/main/java/run/halo/app/plugin/PluginApplicationInitializer.java
Patch:
@@ -95,7 +95,6 @@ private PluginApplicationContext createPluginApplicationContext(String pluginId)
         log.debug("Total millis: {} ms -> {}", stopWatch.getTotalTimeMillis(),
             stopWatch.prettyPrint());
 
-        contextRegistry.register(pluginId, pluginApplicationContext);
         return pluginApplicationContext;
     }
 
@@ -126,6 +125,8 @@ private void initApplicationContext(String pluginId) {
         pluginApplicationContext.refresh();
         stopWatch.stop();
 
+        contextRegistry.register(pluginId, pluginApplicationContext);
+
         log.debug("initApplicationContext total millis: {} ms -> {}",
             stopWatch.getTotalTimeMillis(), stopWatch.prettyPrint());
     }

File: application/src/main/java/run/halo/app/config/WebFluxConfig.java
Patch:
@@ -37,6 +37,7 @@
 import org.springframework.web.reactive.result.view.ViewResolver;
 import reactor.core.publisher.Mono;
 import run.halo.app.console.ConsoleProxyFilter;
+import run.halo.app.console.WebSocketRequestPredicate;
 import run.halo.app.core.extension.endpoint.CustomEndpoint;
 import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;
 import run.halo.app.infra.properties.HaloProperties;
@@ -101,7 +102,8 @@ RouterFunction<ServerResponse> customEndpoints(ApplicationContext context) {
     RouterFunction<ServerResponse> consoleIndexRedirection() {
         var consolePredicate = method(HttpMethod.GET)
             .and(path("/console/**").and(path("/console/assets/**").negate()))
-            .and(accept(MediaType.TEXT_HTML));
+            .and(accept(MediaType.TEXT_HTML))
+            .and(new WebSocketRequestPredicate().negate());
         return route(consolePredicate, this::serveConsoleIndex);
     }
 

File: api/src/main/java/run/halo/app/plugin/BasePlugin.java
Patch:
@@ -2,7 +2,6 @@
 
 import lombok.extern.slf4j.Slf4j;
 import org.pf4j.Plugin;
-import org.pf4j.PluginManager;
 import org.pf4j.PluginWrapper;
 
 /**
@@ -15,12 +14,12 @@
 @Slf4j
 public class BasePlugin extends Plugin {
 
+    @Deprecated
     public BasePlugin(PluginWrapper wrapper) {
         super(wrapper);
         log.info("Initialized plugin {}", wrapper.getPluginId());
     }
 
-    private PluginManager getPluginManager() {
-        return getWrapper().getPluginManager();
+    public BasePlugin() {
     }
 }

File: application/src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java
Patch:
@@ -289,8 +289,7 @@ void stopAction(String name) {
 
     void stateTransition(String name, Function<PluginState, Boolean> stateAction,
         PluginState desiredState) {
-        PluginWrapper pluginWrapper = getPluginWrapper(name);
-        PluginState currentState = pluginWrapper.getPluginState();
+        PluginState currentState = getPluginWrapper(name).getPluginState();
         int maxRetries = PluginState.values().length;
         for (int i = 0; i < maxRetries && currentState != desiredState; i++) {
             try {
@@ -303,7 +302,7 @@ void stateTransition(String name, Function<PluginState, Boolean> stateAction,
                     break;
                 }
                 // update current state
-                currentState = pluginWrapper.getPluginState();
+                currentState = getPluginWrapper(name).getPluginState();
             } catch (Throwable e) {
                 persistenceFailureStatus(name, e);
                 throw e;

File: application/src/main/java/run/halo/app/plugin/BasePluginFactory.java
Patch:
@@ -29,7 +29,7 @@ public Plugin create(PluginWrapper pluginWrapper) {
                         "No bean named 'basePlugin' found in the context create default instance");
                     DefaultListableBeanFactory beanFactory =
                         context.getDefaultListableBeanFactory();
-                    BasePlugin pluginInstance = new BasePlugin(pluginWrapper);
+                    BasePlugin pluginInstance = new BasePlugin();
                     beanFactory.registerSingleton(Plugin.class.getName(), pluginInstance);
                     return pluginInstance;
                 }

File: application/src/main/java/run/halo/app/search/post/LucenePostSearchService.java
Patch:
@@ -3,7 +3,6 @@
 import static org.apache.commons.lang3.StringUtils.stripToEmpty;
 import static org.apache.lucene.document.Field.Store.NO;
 import static org.apache.lucene.document.Field.Store.YES;
-import static org.apache.lucene.index.IndexWriterConfig.OpenMode.APPEND;
 import static org.apache.lucene.index.IndexWriterConfig.OpenMode.CREATE_OR_APPEND;
 
 import java.io.IOException;
@@ -116,7 +115,7 @@ public void addDocuments(List<PostDoc> posts) throws IOException {
     @Override
     public void removeDocuments(Set<String> postNames) throws IOException {
         var writeConfig = new IndexWriterConfig(analyzer);
-        writeConfig.setOpenMode(APPEND);
+        writeConfig.setOpenMode(CREATE_OR_APPEND);
         try (var writer = new IndexWriter(postIndexDir, writeConfig)) {
             var terms = postNames.stream()
                 .map(postName -> new Term(PostDoc.ID_FIELD, postName))
@@ -129,7 +128,7 @@ public void removeDocuments(Set<String> postNames) throws IOException {
     @Override
     public void removeAllDocuments() throws Exception {
         var writeConfig = new IndexWriterConfig(analyzer);
-        writeConfig.setOpenMode(APPEND);
+        writeConfig.setOpenMode(CREATE_OR_APPEND);
         try (var writer = new IndexWriter(postIndexDir, writeConfig)) {
             writer.deleteAll();
         }

File: api/src/test/java/run/halo/app/extension/controller/DelayedEntryTest.java
Patch:
@@ -18,6 +18,7 @@ void createDelayedEntry() {
         var delayedEntry = new DelayedEntry<>("fake", Duration.ofMillis(100), () -> now);
         assertEquals(100, delayedEntry.getDelay(TimeUnit.MILLISECONDS));
         assertEquals(Duration.ofMillis(100), delayedEntry.getRetryAfter());
+        assertEquals(now.plusMillis(100), delayedEntry.getReadyAt());
         assertEquals("fake", delayedEntry.getEntry());
 
         delayedEntry = new DelayedEntry<>("fake", now.plus(Duration.ofSeconds(1)), () -> now);

File: application/src/main/java/run/halo/app/plugin/YamlPluginFinder.java
Patch:
@@ -75,8 +75,9 @@ public Plugin find(Path pluginPath) {
     }
 
     protected Plugin readPluginDescriptor(Path pluginPath) {
-        Path propertiesPath = getManifestPath(pluginPath, propertiesFileName);
+        Path propertiesPath = null;
         try {
+            propertiesPath = getManifestPath(pluginPath, propertiesFileName);
             if (propertiesPath == null) {
                 throw new PluginRuntimeException("Cannot find the plugin manifest path");
             }

File: application/src/main/java/run/halo/app/core/extension/theme/ThemeEndpoint.java
Patch:
@@ -36,6 +36,7 @@
 import org.springframework.web.server.ServerWebInputException;
 import reactor.core.Exceptions;
 import reactor.core.publisher.Mono;
+import reactor.core.scheduler.Schedulers;
 import reactor.util.retry.Retry;
 import run.halo.app.core.extension.Setting;
 import run.halo.app.core.extension.Theme;
@@ -247,6 +248,7 @@ private Mono<ServerResponse> upgradeFromUri(ServerRequest request) {
             .flatMap(upgradeRequest -> Mono.fromCallable(() -> DataBufferUtils.toInputStream(
                 reactiveUrlDataBufferFetcher.fetch(upgradeRequest.uri())))
             )
+            .subscribeOn(Schedulers.boundedElastic())
             .doOnError(throwable -> {
                 log.error("Failed to fetch zip file from uri.", throwable);
                 throw new ThemeUpgradeException("Failed to fetch zip file from uri.", null,
@@ -268,6 +270,7 @@ private Mono<ServerResponse> installFromUri(ServerRequest request) {
             .flatMap(installRequest -> Mono.fromCallable(() -> DataBufferUtils.toInputStream(
                 reactiveUrlDataBufferFetcher.fetch(installRequest.uri())))
             )
+            .subscribeOn(Schedulers.boundedElastic())
             .doOnError(throwable -> {
                 log.error("Failed to fetch zip file from uri.", throwable);
                 throw new ThemeInstallationException("Failed to fetch zip file from uri.", null,

File: application/src/main/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessor.java
Patch:
@@ -18,7 +18,7 @@
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.SinglePageFinder;
-import run.halo.app.theme.router.factories.ModelConst;
+import run.halo.app.theme.router.ModelConst;
 
 /**
  * <p>The <code>head</code> html snippet injection processor for content template such as post

File: application/src/main/java/run/halo/app/theme/dialect/TemplateGlobalHeadProcessor.java
Patch:
@@ -10,7 +10,7 @@
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;
 import run.halo.app.theme.DefaultTemplateEnum;
-import run.halo.app.theme.router.factories.ModelConst;
+import run.halo.app.theme.router.ModelConst;
 
 /**
  * <p>Global custom head snippet injection for theme global setting.</p>

File: application/src/main/java/run/halo/app/theme/finders/impl/PostFinderImpl.java
Patch:
@@ -133,7 +133,7 @@ static Pair<String, String> postPreviousNextPair(List<String> postNames,
         int index = elements.indexOf(currentName);
 
         String previousPostName = null;
-        if (index != 0) {
+        if (index > 0) {
             previousPostName = elements.get(index - 1);
         }
 

File: application/src/main/java/run/halo/app/theme/router/ModelConst.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.theme.router.factories;
+package run.halo.app.theme.router;
 
 /**
  * Static variable keys for view model.

File: application/src/main/java/run/halo/app/theme/router/factories/ArchiveRouteFactory.java
Patch:
@@ -25,6 +25,7 @@
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.vo.PostArchiveVo;
+import run.halo.app.theme.router.ModelConst;
 import run.halo.app.theme.router.PageUrlUtils;
 import run.halo.app.theme.router.UrlContextListResult;
 

File: application/src/main/java/run/halo/app/theme/router/factories/AuthorPostsRouteFactory.java
Patch:
@@ -23,6 +23,7 @@
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.vo.ListedPostVo;
 import run.halo.app.theme.finders.vo.UserVo;
+import run.halo.app.theme.router.ModelConst;
 import run.halo.app.theme.router.PageUrlUtils;
 import run.halo.app.theme.router.UrlContextListResult;
 

File: application/src/main/java/run/halo/app/theme/router/factories/CategoriesRouteFactory.java
Patch:
@@ -12,6 +12,7 @@
 import org.springframework.web.reactive.function.server.ServerResponse;
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.CategoryFinder;
+import run.halo.app.theme.router.ModelConst;
 
 /**
  * The {@link CategoriesRouteFactory} for generate {@link RouterFunction} specific to the

File: application/src/main/java/run/halo/app/theme/router/factories/CategoryPostRouteFactory.java
Patch:
@@ -25,6 +25,7 @@
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.vo.CategoryVo;
 import run.halo.app.theme.finders.vo.ListedPostVo;
+import run.halo.app.theme.router.ModelConst;
 import run.halo.app.theme.router.PageUrlUtils;
 import run.halo.app.theme.router.UrlContextListResult;
 import run.halo.app.theme.router.ViewNameResolver;

File: application/src/main/java/run/halo/app/theme/router/factories/IndexRouteFactory.java
Patch:
@@ -19,6 +19,7 @@
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.vo.ListedPostVo;
+import run.halo.app.theme.router.ModelConst;
 import run.halo.app.theme.router.PageUrlUtils;
 import run.halo.app.theme.router.UrlContextListResult;
 

File: application/src/main/java/run/halo/app/theme/router/factories/RouteFactory.java
Patch:
@@ -10,6 +10,7 @@
 import reactor.core.publisher.Mono;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;
+import run.halo.app.theme.router.ModelConst;
 
 /**
  * @author guqing

File: application/src/main/java/run/halo/app/theme/router/factories/TagsRouteFactory.java
Patch:
@@ -14,6 +14,7 @@
 import org.springframework.web.reactive.function.server.ServerResponse;
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.TagFinder;
+import run.halo.app.theme.router.ModelConst;
 
 /**
  * The {@link TagsRouteFactory} for generate {@link RouterFunction} specific to the template

File: application/src/test/java/run/halo/app/theme/dialect/HaloProcessorDialectTest.java
Patch:
@@ -38,7 +38,7 @@
 import run.halo.app.theme.finders.SinglePageFinder;
 import run.halo.app.theme.finders.vo.PostVo;
 import run.halo.app.theme.finders.vo.UserVo;
-import run.halo.app.theme.router.factories.ModelConst;
+import run.halo.app.theme.router.ModelConst;
 
 /**
  * Tests for {@link HaloProcessorDialect}.

File: application/src/test/java/run/halo/app/theme/router/SinglePageRouteTest.java
Patch:
@@ -27,7 +27,6 @@
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.SinglePageFinder;
 import run.halo.app.theme.finders.vo.SinglePageVo;
-import run.halo.app.theme.router.factories.ModelConst;
 
 /**
  * Tests for {@link SinglePageRoute}.

File: application/src/test/java/run/halo/app/theme/router/factories/PostRouteFactoryTest.java
Patch:
@@ -26,6 +26,7 @@
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.vo.PostVo;
 import run.halo.app.theme.router.EmptyView;
+import run.halo.app.theme.router.ModelConst;
 import run.halo.app.theme.router.ViewNameResolver;
 
 /**

File: application/src/test/java/run/halo/app/theme/router/factories/RouteFactoryTest.java
Patch:
@@ -10,6 +10,7 @@
 import org.springframework.web.reactive.function.server.ServerResponse;
 import reactor.core.publisher.Mono;
 import run.halo.app.infra.SystemSetting;
+import run.halo.app.theme.router.ModelConst;
 
 /**
  * Tests for {@link RouteFactory}.

File: application/src/main/java/run/halo/app/core/extension/endpoint/CommentEndpoint.java
Patch:
@@ -96,7 +96,7 @@ public RouterFunction<ServerResponse> endpoint() {
     }
 
     Mono<ServerResponse> listComments(ServerRequest request) {
-        CommentQuery commentQuery = new CommentQuery(request.queryParams());
+        CommentQuery commentQuery = new CommentQuery(request);
         return commentService.listComment(commentQuery)
             .flatMap(listedComments -> ServerResponse.ok().bodyValue(listedComments));
     }

File: application/src/main/java/run/halo/app/core/extension/endpoint/SinglePageEndpoint.java
Patch:
@@ -229,7 +229,7 @@ Mono<ServerResponse> publishSinglePage(ServerRequest request) {
     }
 
     Mono<ServerResponse> listSinglePage(ServerRequest request) {
-        var listRequest = new SinglePageQuery(request.queryParams());
+        var listRequest = new SinglePageQuery(request);
         return singlePageService.list(listRequest)
             .flatMap(listedPages -> ServerResponse.ok().bodyValue(listedPages));
     }

File: api/src/main/java/run/halo/app/core/extension/content/Constant.java
Patch:
@@ -8,4 +8,6 @@ public enum Constant {
 
     public static final String LAST_READ_TIME_ANNO = "content.halo.run/last-read-time";
     public static final String PERMALINK_PATTERN_ANNO = "content.halo.run/permalink-pattern";
+
+    public static final String CHECKSUM_CONFIG_ANNO = "checksum/config";
 }

File: api/src/main/java/run/halo/app/extension/ExtensionOperator.java
Patch:
@@ -97,7 +97,6 @@ static <T extends ExtensionOperator> Predicate<T> isNotDeleted() {
     }
 
     static boolean isDeleted(ExtensionOperator extension) {
-        return extension.getMetadata() != null
-            && extension.getMetadata().getDeletionTimestamp() != null;
+        return ExtensionUtil.isDeleted(extension);
     }
 }

File: api/src/main/java/run/halo/app/search/post/PostSearchService.java
Patch:
@@ -14,4 +14,6 @@ public interface PostSearchService extends ExtensionPoint {
 
     void removeDocuments(Set<String> postNames) throws Exception;
 
+    void removeAllDocuments() throws Exception;
+
 }

File: application/src/main/java/run/halo/app/event/post/PostUpdatedEvent.java
Patch:
@@ -2,15 +2,16 @@
 
 import org.springframework.context.ApplicationEvent;
 
-public class PostRecycledEvent extends ApplicationEvent implements PostEvent {
+public class PostUpdatedEvent extends ApplicationEvent implements PostEvent {
 
     private final String postName;
 
-    public PostRecycledEvent(Object source, String postName) {
+    public PostUpdatedEvent(Object source, String postName) {
         super(source);
         this.postName = postName;
     }
 
+    @Override
     public String getName() {
         return postName;
     }

File: application/src/main/java/run/halo/app/event/post/PostVisibleChangedEvent.java
Patch:
@@ -1,13 +1,15 @@
 package run.halo.app.event.post;
 
 import lombok.Data;
+import org.springframework.lang.Nullable;
 import run.halo.app.core.extension.content.Post;
 
 @Data
 public class PostVisibleChangedEvent implements PostEvent {
 
     private final String postName;
 
+    @Nullable
     private final Post.VisibleEnum oldVisible;
 
     private final Post.VisibleEnum newVisible;

File: application/src/main/java/run/halo/app/extension/ExtensionStoreUtil.java
Patch:
@@ -7,9 +7,9 @@
  *
  * @author johnniang
  */
-public final class ExtensionUtil {
+public final class ExtensionStoreUtil {
 
-    private ExtensionUtil() {
+    private ExtensionStoreUtil() {
     }
 
     /**

File: application/src/main/java/run/halo/app/extension/JSONExtensionConverter.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.openapi4j.core.validation.ValidationSeverity.ERROR;
 import static org.springframework.util.StringUtils.arrayToCommaDelimitedString;
+import static run.halo.app.extension.ExtensionStoreUtil.buildStoreName;
 
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -65,7 +66,7 @@ public <E extends Extension> ExtensionStore convertTo(E extension) {
             }
 
             var version = extension.getMetadata().getVersion();
-            var storeName = ExtensionUtil.buildStoreName(scheme, extension.getMetadata().getName());
+            var storeName = buildStoreName(scheme, extension.getMetadata().getName());
             var data = objectMapper.writeValueAsBytes(extensionJsonNode);
             return new ExtensionStore(storeName, data, version);
         } catch (IOException e) {

File: application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java
Patch:
@@ -46,7 +46,7 @@ public ReactiveExtensionClientImpl(ReactiveExtensionStoreClient client,
     public <E extends Extension> Flux<E> list(Class<E> type, Predicate<E> predicate,
         Comparator<E> comparator) {
         var scheme = schemeManager.get(type);
-        var prefix = ExtensionUtil.buildStoreNamePrefix(scheme);
+        var prefix = ExtensionStoreUtil.buildStoreNamePrefix(scheme);
 
         return client.listByNamePrefix(prefix)
             .map(extensionStore -> converter.convertFrom(type, extensionStore))
@@ -75,14 +75,14 @@ public <E extends Extension> Mono<ListResult<E>> list(Class<E> type, Predicate<E
 
     @Override
     public <E extends Extension> Mono<E> fetch(Class<E> type, String name) {
-        var storeName = ExtensionUtil.buildStoreName(schemeManager.get(type), name);
+        var storeName = ExtensionStoreUtil.buildStoreName(schemeManager.get(type), name);
         return client.fetchByName(storeName)
             .map(extensionStore -> converter.convertFrom(type, extensionStore));
     }
 
     @Override
     public Mono<Unstructured> fetch(GroupVersionKind gvk, String name) {
-        var storeName = ExtensionUtil.buildStoreName(schemeManager.get(gvk), name);
+        var storeName = ExtensionStoreUtil.buildStoreName(schemeManager.get(gvk), name);
         return client.fetchByName(storeName)
             .map(extensionStore -> converter.convertFrom(Unstructured.class, extensionStore));
     }

File: application/src/main/java/run/halo/app/theme/SiteSettingVariablesAcquirer.java
Patch:
@@ -28,7 +28,7 @@ public Mono<Map<String, Object>> acquire(ServerWebExchange exchange) {
             .filter(configMap -> configMap.getData() != null)
             .map(configMap -> {
                 SiteSettingVo siteSettingVo = SiteSettingVo.from(configMap)
-                    .withUrl(externalUrlSupplier.get());
+                    .withUrl(externalUrlSupplier.getURL(exchange.getRequest()));
                 return Map.of("site", siteSettingVo);
             });
     }

File: application/src/main/java/run/halo/app/theme/finders/vo/SiteSettingVo.java
Patch:
@@ -1,6 +1,6 @@
 package run.halo.app.theme.finders.vo;
 
-import java.net.URI;
+import java.net.URL;
 import java.util.Map;
 import lombok.Builder;
 import lombok.Value;
@@ -23,7 +23,7 @@ public class SiteSettingVo {
     String title;
 
     @With
-    URI url;
+    URL url;
 
     String subtitle;
 

File: application/src/main/java/run/halo/app/theme/ReactivePropertyAccessor.java
Patch:
@@ -34,7 +34,8 @@ public boolean canRead(@NonNull EvaluationContext context, Object target, @NonNu
         if (isReactiveType(target)) {
             return true;
         }
-        List<PropertyAccessor> propertyAccessors = context.getPropertyAccessors();
+        var propertyAccessors =
+            getPropertyAccessorsToTry(target.getClass(), context.getPropertyAccessors());
         for (PropertyAccessor propertyAccessor : propertyAccessors) {
             if (propertyAccessor.canRead(context, target, name)) {
                 return true;
@@ -83,7 +84,7 @@ private static Object blockingGetForReactive(@Nullable Object target) {
 
     private boolean isReactiveType(Object target) {
         if (target == null) {
-            return false;
+            return true;
         }
         Class<?> clazz = target.getClass();
         return Mono.class.isAssignableFrom(clazz)

File: application/src/main/java/run/halo/app/plugin/YamlPluginFinder.java
Patch:
@@ -12,6 +12,7 @@
 import org.springframework.core.io.FileSystemResource;
 import org.springframework.core.io.Resource;
 import run.halo.app.core.extension.Plugin;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.Unstructured;
 import run.halo.app.infra.utils.YamlUnstructuredLoader;
 
@@ -68,6 +69,8 @@ public Plugin find(Path pluginPath) {
             pluginStatus.setLoadLocation(pluginPath.toUri());
             plugin.setStatus(pluginStatus);
         }
+        MetadataUtil.nullSafeAnnotations(plugin)
+            .put(PluginConst.PLUGIN_PATH, pluginPath.toString());
         return plugin;
     }
 

File: application/src/test/java/run/halo/app/core/extension/reconciler/PostReconcilerTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
-import org.springframework.context.ApplicationContext;
+import org.springframework.context.ApplicationEventPublisher;
 import reactor.core.publisher.Mono;
 import run.halo.app.content.ContentWrapper;
 import run.halo.app.content.PostService;
@@ -50,7 +50,7 @@ class PostReconcilerTest {
     private PostService postService;
 
     @Mock
-    private ApplicationContext applicationContext;
+    private ApplicationEventPublisher eventPublisher;
 
     @InjectMocks
     private PostReconciler postReconciler;
@@ -157,7 +157,7 @@ void reconcileLastModifyTimeWhenPostIsPublished() {
             verify(client, times(4)).update(captor.capture());
             Post value = captor.getValue();
             assertThat(value.getStatus().getLastModifyTime()).isEqualTo(lastModifyTime);
-            verify(applicationContext).publishEvent(any(PostPublishedEvent.class));
+            verify(eventPublisher).publishEvent(any(PostPublishedEvent.class));
         }
 
         @Test

File: api/src/main/java/run/halo/app/core/extension/service/AttachmentService.java
Patch:
@@ -11,7 +11,7 @@
 import run.halo.app.core.extension.attachment.Attachment;
 
 /**
- * AttachmentService
+ * AttachmentService.
  *
  * @author johnniang
  * @since 2.5.0

File: application/src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java
Patch:
@@ -2,6 +2,7 @@
 
 import static org.springframework.web.reactive.function.server.RequestPredicates.GET;
 import static org.springframework.web.reactive.function.server.RequestPredicates.accept;
+import static run.halo.app.theme.finders.PostPublicQueryService.FIXED_PREDICATE;
 
 import com.google.common.cache.Cache;
 import com.google.common.cache.CacheBuilder;
@@ -37,7 +38,6 @@
 import run.halo.app.infra.utils.JsonUtils;
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.PostFinder;
-import run.halo.app.theme.finders.impl.PostFinderImpl;
 import run.halo.app.theme.finders.vo.PostVo;
 import run.halo.app.theme.router.ViewNameResolver;
 
@@ -143,13 +143,13 @@ Flux<Post> postsByPredicates(PostPatternVariable patternVariable) {
 
     private Flux<Post> fetchPostsByName(String name) {
         return client.fetch(Post.class, name)
-            .filter(PostFinderImpl.FIXED_PREDICATE)
+            .filter(FIXED_PREDICATE)
             .flux();
     }
 
     private Flux<Post> fetchPostsBySlug(String slug) {
         return client.list(Post.class,
-            post -> PostFinderImpl.FIXED_PREDICATE.test(post)
+            post -> FIXED_PREDICATE.test(post)
                 && matchIfPresent(slug, post.getSpec().getSlug()),
             null);
     }

File: application/src/test/java/run/halo/app/theme/finders/impl/SinglePageFinderImplTest.java
Patch:
@@ -3,7 +3,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.ArgumentMatchers.eq;
-import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
@@ -62,7 +61,7 @@ void getByName() {
         singlePage.getSpec().setDeleted(false);
         singlePage.getSpec().setVisible(Post.VisibleEnum.PUBLIC);
         singlePage.setStatus(new SinglePage.SinglePageStatus());
-        when(client.fetch(eq(SinglePage.class), eq(fakePageName)))
+        when(client.get(eq(SinglePage.class), eq(fakePageName)))
             .thenReturn(Mono.just(singlePage));
 
         when(counterService.getByName(anyString())).thenReturn(Mono.empty());
@@ -77,7 +76,7 @@ void getByName() {
             })
             .verifyComplete();
 
-        verify(client, times(1)).fetch(SinglePage.class, fakePageName);
+        verify(client).get(SinglePage.class, fakePageName);
         verify(counterService).getByName(anyString());
         verify(singlePageService).getReleaseContent(anyString());
         verify(contributorFinder).getContributor(anyString());

File: application/src/main/java/run/halo/app/core/extension/theme/ThemeUtils.java
Patch:
@@ -149,8 +149,8 @@ static Unstructured loadThemeManifest(Path themeManifestPath) {
             new YamlUnstructuredLoader(new FileSystemResource(themeManifestPath))
                 .load();
         if (CollectionUtils.isEmpty(unstructureds)) {
-            throw new IllegalArgumentException(
-                "The [theme.yaml] does not conform to the theme specification.");
+            throw new ThemeInstallationException("Missing theme manifest",
+                "problemDetail.theme.install.missingManifest", null);
         }
         return unstructureds.get(0);
     }

File: application/src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -21,4 +21,6 @@ public interface UserService {
     Mono<User> grantRoles(String username, Set<String> roles);
 
     Mono<User> signUp(User user, String password);
+
+    Mono<User> createUser(User user, Set<String> roles);
 }

File: application/src/test/java/run/halo/app/core/extension/service/UserServiceImplTest.java
Patch:
@@ -458,6 +458,7 @@ void signUpWhenRegistrationSuccessfully() {
 
             User fakeUser = fakeSignUpUser("fake-user", "fake-password");
 
+            when(client.fetch(eq(Role.class), anyString())).thenReturn(Mono.just(new Role()));
             when(client.create(any(User.class))).thenReturn(Mono.just(fakeUser));
             UserServiceImpl spyUserService = spy(userService);
             doReturn(Mono.just(fakeUser)).when(spyUserService).grantRoles(eq("fake-user"),

File: application/src/main/java/run/halo/app/infra/properties/HaloProperties.java
Patch:
@@ -70,5 +70,7 @@ public void validate(Object target, Errors errors) {
             errors.rejectValue("externalUrl", "external-url.required.when-using-absolute-permalink",
                 "External URL is required when property `use-absolute-permalink` is set to true.");
         }
+        SecurityProperties.Initializer.validateUsername(props.getSecurity().getInitializer(),
+            errors);
     }
 }

File: application/src/test/java/run/halo/app/security/SuperAdminInitializerTest.java
Patch:
@@ -59,5 +59,4 @@ void checkSuperAdminInitialization() {
             return false;
         }));
     }
-
 }

File: application/src/main/java/run/halo/app/theme/ThemeConfiguration.java
Patch:
@@ -46,6 +46,9 @@ public RouterFunction<ServerResponse> themeAssets(WebProperties webProperties) {
                 var resource = request.pathVariable("resource");
                 resource = StringUtils.removeStart(resource, "/");
                 var fsRes = new FileSystemResource(getThemeAssetsPath(themeName, resource));
+                if (!fsRes.exists()) {
+                    return ServerResponse.notFound().build();
+                }
                 var bodyBuilder = ServerResponse.ok()
                     .cacheControl(cacheProperties.getCachecontrol().toHttpCacheControl());
                 try {

File: application/src/main/java/run/halo/app/theme/endpoint/CommentFinderEndpoint.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.web.reactive.function.server.RouterFunction;
 import org.springframework.web.reactive.function.server.ServerRequest;
 import org.springframework.web.reactive.function.server.ServerResponse;
+import org.springframework.web.server.ServerWebInputException;
 import reactor.core.publisher.Mono;
 import reactor.core.scheduler.Schedulers;
 import run.halo.app.content.comment.CommentRequest;
@@ -230,7 +231,7 @@ public String getVersion() {
         public String getKind() {
             String kind = emptyToNull(queryParams.getFirst("kind"));
             if (kind == null) {
-                throw new IllegalArgumentException("The kind must not be null.");
+                throw new ServerWebInputException("The kind must not be null.");
             }
             return kind;
         }
@@ -244,7 +245,7 @@ public String getKind() {
         public String getName() {
             String name = emptyToNull(queryParams.getFirst("name"));
             if (name == null) {
-                throw new IllegalArgumentException("The name must not be null.");
+                throw new ServerWebInputException("The name must not be null.");
             }
             return name;
         }

File: application/src/test/java/run/halo/app/infra/exception/handlers/I18nExceptionTest.java
Patch:
@@ -105,13 +105,14 @@ void shouldGetErrorIfThrowingResponseStatusException() {
 
     @Test
     void shouldGetErrorIfThrowingGeneralException() {
+        // problem reason will be a fixed prompt when internal server error occurred.
         webClient.get().uri("/response-entity/general-error")
             .exchange()
             .expectStatus().isEqualTo(HttpStatus.INTERNAL_SERVER_ERROR)
             .expectBody(ProblemDetail.class)
             .value(problemDetail -> {
                 assertEquals("Internal Server Error", problemDetail.getTitle());
-                assertEquals("Something went wrong",
+                assertEquals("Something went wrong, please try again later.",
                     problemDetail.getDetail());
             });
     }

File: application/src/main/java/run/halo/app/plugin/SharedApplicationContextHolder.java
Patch:
@@ -4,6 +4,7 @@
 import org.springframework.context.ApplicationContext;
 import org.springframework.security.web.server.context.ServerSecurityContextRepository;
 import org.springframework.stereotype.Component;
+import run.halo.app.core.extension.service.AttachmentService;
 import run.halo.app.extension.DefaultSchemeManager;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.ReactiveExtensionClient;
@@ -67,6 +68,8 @@ SharedApplicationContext createSharedApplicationContext() {
             rootApplicationContext.getBean(ExternalUrlSupplier.class));
         beanFactory.registerSingleton("serverSecurityContextRepository",
             rootApplicationContext.getBean(ServerSecurityContextRepository.class));
+        beanFactory.registerSingleton("attachmentService",
+            rootApplicationContext.getBean(AttachmentService.class));
         // TODO add more shared instance here
 
         return sharedApplicationContext;

File: application/src/main/java/run/halo/app/theme/router/ThemeCompositeRouterFunction.java
Patch:
@@ -127,6 +127,7 @@ private List<RoutePattern> transformedPatterns() {
 
         // Add the index route to the end to prevent conflict with the queryParam rule of the post
         routePatterns.add(new RoutePattern(DefaultTemplateEnum.INDEX, "/"));
+        routePatterns.add(new RoutePattern(DefaultTemplateEnum.AUTHOR, ""));
         return routePatterns;
     }
 }

File: application/src/main/java/run/halo/app/theme/router/factories/AuthorPostsRouteFactory.java
Patch:
@@ -18,6 +18,7 @@
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;
+import run.halo.app.infra.exception.NotFoundException;
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.vo.ListedPostVo;
@@ -73,7 +74,8 @@ private Mono<UrlContextListResult<ListedPostVo>> postList(ServerRequest request,
     }
 
     private Mono<UserVo> getByName(String name) {
-        return client.get(User.class, name)
+        return client.fetch(User.class, name)
+            .switchIfEmpty(Mono.error(() -> new NotFoundException("Author page not found.")))
             .map(UserVo::from);
     }
 }

File: application/src/test/java/run/halo/app/theme/router/factories/AuthorPostsRouteFactoryTest.java
Patch:
@@ -33,7 +33,7 @@ void create() {
         RouterFunction<ServerResponse> routerFunction = authorPostsRouteFactory.create(null);
         WebTestClient webClient = getWebTestClient(routerFunction);
 
-        when(client.get(eq(User.class), eq("fake-user")))
+        when(client.fetch(eq(User.class), eq("fake-user")))
             .thenReturn(Mono.just(new User()));
         webClient.get()
             .uri("/authors/fake-user")

File: application/src/test/java/run/halo/app/theme/dialect/HaloProcessorDialectTest.java
Patch:
@@ -169,6 +169,7 @@ void contentHeadAndFooterAndPostProcessors() {
                 <title>Post</title>
               <meta content="post-meta-V1" name="post-meta-V1" />
             <meta content="post-meta-V2" name="post-meta-V2" />
+            <meta name="description" content="" />
             <meta name="global-head-test" content="test" />
             <meta name="content-head-test" content="test" />
             </head>

File: api/src/main/java/run/halo/app/infra/utils/GenericClassUtils.java
Patch:
@@ -19,7 +19,7 @@ public enum GenericClassUtils {
      */
     public static <T> Class<?> generateConcreteClass(Class<?> rawClass, Class<T> parameterType) {
         return generateConcreteClass(rawClass, parameterType, () ->
-            parameterType.getSimpleName() + rawClass.getSimpleName());
+            parameterType.getName() + rawClass.getSimpleName());
     }
 
     /**
@@ -39,7 +39,7 @@ public static <T> Class<?> generateConcreteClass(Class<?> rawClass, Class<T> par
             .subclass(concreteType)
             .name(nameGenerator.get())
             .make()) {
-            return unloaded.load(rawClass.getClassLoader()).getLoaded();
+            return unloaded.load(parameterType.getClassLoader()).getLoaded();
         } catch (IOException e) {
             // Should never happen
             throw Exceptions.propagate(e);

File: application/src/main/java/run/halo/app/config/HaloConfiguration.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.config;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
+import com.fasterxml.jackson.databind.MapperFeature;
 import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -14,6 +15,7 @@ public class HaloConfiguration {
     Jackson2ObjectMapperBuilderCustomizer objectMapperCustomizer() {
         return builder -> {
             builder.serializationInclusion(JsonInclude.Include.NON_NULL);
+            builder.featuresToEnable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);
         };
     }
 }
\ No newline at end of file

File: application/src/main/java/run/halo/app/actuator/GlobalInfoEndpoint.java
Patch:
@@ -83,6 +83,8 @@ public static class SocialAuthProvider {
         private String website;
 
         private String authenticationUrl;
+
+        private String bindingUrl;
     }
 
     private void handleCommentSetting(GlobalInfo info, ConfigMap configMap) {
@@ -127,6 +129,7 @@ private void handleSocialAuthProvider(GlobalInfo info) {
                     socialAuthProvider.setLogo(provider.getLogo());
                     socialAuthProvider.setWebsite(provider.getWebsite());
                     socialAuthProvider.setAuthenticationUrl(provider.getAuthenticationUrl());
+                    socialAuthProvider.setBindingUrl(provider.getBindingUrl());
                     return socialAuthProvider;
                 })
                 .toList()

File: application/src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -19,4 +19,6 @@ public interface UserService {
     Flux<Role> listRoles(String username);
 
     Mono<User> grantRoles(String username, Set<String> roles);
+
+    Mono<User> signUp(User user, String password);
 }

File: application/src/test/java/run/halo/app/security/AuthProviderServiceImplTest.java
Patch:
@@ -70,7 +70,7 @@ void testEnable() {
         Set<String> enabled =
             JsonUtils.jsonToObject(providerSettingStr, SystemSetting.AuthProvider.class)
                 .getEnabled();
-        assertThat(enabled).containsExactly("github", "local");
+        assertThat(enabled).containsExactly("github");
         // Verify the result
         verify(client).get(AuthProvider.class, "github");
         verify(client).fetch(eq(ConfigMap.class), eq(SystemSetting.SYSTEM_CONFIG));
@@ -104,7 +104,7 @@ void testDisable() {
         Set<String> enabled =
             JsonUtils.jsonToObject(providerSettingStr, SystemSetting.AuthProvider.class)
                 .getEnabled();
-        assertThat(enabled).containsExactly("local");
+        assertThat(enabled).isEmpty();
         // Verify the result
         verify(client).get(AuthProvider.class, "github");
         verify(client).fetch(eq(ConfigMap.class), eq(SystemSetting.SYSTEM_CONFIG));

File: application/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java
Patch:
@@ -397,7 +397,7 @@ Mono<ServerResponse> list(ServerRequest request) {
 
     private Mono<ListResult<ListedUser>> toListedUser(ListResult<User> listResult) {
         return Flux.fromStream(listResult.get())
-            .flatMap(user -> {
+            .concatMap(user -> {
                 Set<String> roleNames = roleNames(user);
                 return roleService.list(roleNames)
                     .collectList()

File: application/src/main/java/run/halo/app/config/WebServerSecurityConfig.java
Patch:
@@ -1,7 +1,6 @@
 package run.halo.app.config;
 
 import static org.springframework.security.config.Customizer.withDefaults;
-import static org.springframework.security.web.server.header.ReferrerPolicyServerHttpHeadersWriter.ReferrerPolicy.STRICT_ORIGIN_WHEN_CROSS_ORIGIN;
 import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers;
 
 import java.util.Set;
@@ -96,7 +95,8 @@ SecurityWebFilterChain portalFilterChain(ServerHttpSecurity http,
                     spec.disable();
                 }
             })
-            .referrerPolicy().policy(STRICT_ORIGIN_WHEN_CROSS_ORIGIN).and()
+            .referrerPolicy(
+                spec -> spec.policy(haloProperties.getSecurity().getReferrerOptions().getPolicy()))
             .cache().disable().and()
             .anonymous(spec -> spec.authenticationFilter(
                 new HaloAnonymousAuthenticationWebFilter("portal", AnonymousUserConst.PRINCIPAL,

File: application/src/main/java/run/halo/app/extension/controller/DefaultControllerManager.java
Patch:
@@ -11,11 +11,11 @@
 import org.springframework.context.ApplicationListener;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler.Request;
-import run.halo.app.infra.SchemeInitializedEvent;
+import run.halo.app.infra.ExtensionInitializedEvent;
 
 @Slf4j
 public class DefaultControllerManager
-    implements ApplicationListener<SchemeInitializedEvent>,
+    implements ApplicationListener<ExtensionInitializedEvent>,
     ApplicationContextAware, DisposableBean, ControllerManager {
 
     private final ExtensionClient client;
@@ -68,7 +68,7 @@ public void destroy() {
     }
 
     @Override
-    public void onApplicationEvent(SchemeInitializedEvent event) {
+    public void onApplicationEvent(ExtensionInitializedEvent event) {
         // register reconcilers in system after scheme initialized
         applicationContext.<Reconciler<Request>>getBeanProvider(
                 forClassWithGenerics(Reconciler.class, Request.class))

File: application/src/main/java/run/halo/app/extension/gc/GcControllerInitializer.java
Patch:
@@ -4,11 +4,11 @@
 import org.springframework.context.ApplicationListener;
 import org.springframework.stereotype.Component;
 import run.halo.app.extension.controller.Controller;
-import run.halo.app.infra.SchemeInitializedEvent;
+import run.halo.app.infra.ExtensionInitializedEvent;
 
 @Component
 public class GcControllerInitializer
-    implements ApplicationListener<SchemeInitializedEvent>, DisposableBean {
+    implements ApplicationListener<ExtensionInitializedEvent>, DisposableBean {
 
     private final Controller gcController;
 
@@ -17,7 +17,7 @@ public GcControllerInitializer(GcReconciler gcReconciler) {
     }
 
     @Override
-    public void onApplicationEvent(SchemeInitializedEvent event) {
+    public void onApplicationEvent(ExtensionInitializedEvent event) {
         gcController.start();
     }
 

File: api/src/main/java/run/halo/app/core/extension/Role.java
Patch:
@@ -30,6 +30,8 @@
 public class Role extends AbstractExtension {
     public static final String ROLE_DEPENDENCY_RULES =
         "rbac.authorization.halo.run/dependency-rules";
+    public static final String ROLE_AGGREGATE_LABEL_PREFIX =
+        "rbac.authorization.halo.run/aggregate-to-";
     public static final String ROLE_DEPENDENCIES_ANNO = "rbac.authorization.halo.run/dependencies";
     public static final String UI_PERMISSIONS_ANNO = "rbac.authorization.halo.run/ui-permissions";
 

File: application/src/main/java/run/halo/app/infra/SchemeInitializer.java
Patch:
@@ -31,6 +31,7 @@
 import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.ConfigMap;
 import run.halo.app.extension.SchemeManager;
+import run.halo.app.extension.Secret;
 import run.halo.app.plugin.extensionpoint.ExtensionDefinition;
 import run.halo.app.plugin.extensionpoint.ExtensionPointDefinition;
 import run.halo.app.search.extension.SearchEngine;
@@ -66,6 +67,7 @@ public void onApplicationEvent(@NonNull ApplicationStartedEvent event) {
         schemeManager.register(Setting.class);
         schemeManager.register(AnnotationSetting.class);
         schemeManager.register(ConfigMap.class);
+        schemeManager.register(Secret.class);
         schemeManager.register(Theme.class);
         schemeManager.register(Menu.class);
         schemeManager.register(MenuItem.class);

File: api/src/main/java/run/halo/app/core/extension/content/Comment.java
Patch:
@@ -123,6 +123,8 @@ public static class CommentStatus {
 
         private Integer replyCount;
 
+        private Integer visibleReplyCount;
+
         private Integer unreadReplyCount;
 
         private Boolean hasNewReply;

File: application/src/main/java/run/halo/app/event/post/ReplyChangedEvent.java
Patch:
@@ -6,9 +6,9 @@
  * @author guqing
  * @since 2.0.0
  */
-public class ReplyCreatedEvent extends ReplyEvent {
+public class ReplyChangedEvent extends ReplyEvent {
 
-    public ReplyCreatedEvent(Object source, Reply reply) {
+    public ReplyChangedEvent(Object source, Reply reply) {
         super(source, reply);
     }
 }

File: api/src/main/java/run/halo/app/core/extension/AuthProvider.java
Patch:
@@ -23,6 +23,8 @@
     singular = "authprovider", plural = "authproviders")
 public class AuthProvider extends AbstractExtension {
 
+    public static final String AUTH_BINDING_LABEL = "auth.halo.run/auth-binding";
+    
     public static final String PRIVILEGED_LABEL = "auth.halo.run/privileged";
 
     @Schema(requiredMode = REQUIRED)

File: application/src/main/java/run/halo/app/security/ListedAuthProvider.java
Patch:
@@ -39,5 +39,7 @@ public class ListedAuthProvider {
 
     Boolean enabled;
 
+    Boolean supportsBinding;
+    
     Boolean privileged;
 }

File: application/src/test/java/run/halo/app/security/AuthProviderServiceImplTest.java
Patch:
@@ -144,20 +144,23 @@ void listAll() {
                                 "bindingUrl": "fake-binding-url",
                                 "enabled": true,
                                 "isBound": false,
+                                "supportsBinding": false,
                                 "privileged": false
                             }, {
                                 "name": "gitlab",
                                 "displayName": "gitlab",
                                 "bindingUrl": "fake-binding-url",
                                 "enabled": false,
                                 "isBound": false,
+                                "supportsBinding": false,
                                 "privileged": false
                             },{
                                                         
                                 "name": "gitee",
                                 "displayName": "gitee",
                                 "enabled": false,
                                 "isBound": false,
+                                "supportsBinding": false,
                                 "privileged": false
                             }]
                             """,

File: api/src/main/java/run/halo/app/core/extension/AuthProvider.java
Patch:
@@ -23,6 +23,8 @@
     singular = "authprovider", plural = "authproviders")
 public class AuthProvider extends AbstractExtension {
 
+    public static final String PRIVILEGED_LABEL = "auth.halo.run/privileged";
+
     @Schema(requiredMode = REQUIRED)
     private AuthProviderSpec spec;
 

File: application/src/main/java/run/halo/app/security/ListedAuthProvider.java
Patch:
@@ -38,4 +38,6 @@ public class ListedAuthProvider {
     Boolean isBound;
 
     Boolean enabled;
+
+    Boolean privileged;
 }

File: application/src/main/java/run/halo/app/plugin/DefaultSettingFetcher.java
Patch:
@@ -21,7 +21,7 @@
  * @author guqing
  * @since 2.0.0
  */
-public class DefaultSettingFetcher implements SettingFetcher {
+public class DefaultSettingFetcher extends SettingFetcher {
 
     private final ExtensionClient extensionClient;
 

File: api/src/main/java/run/halo/app/content/comment/CommentSubject.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.pf4j.ExtensionPoint;
 import reactor.core.publisher.Mono;
-import run.halo.app.extension.AbstractExtension;
+import run.halo.app.extension.Extension;
 import run.halo.app.extension.Ref;
 
 /**
@@ -11,7 +11,7 @@
  * @author guqing
  * @since 2.0.0
  */
-public interface CommentSubject<T extends AbstractExtension>  extends ExtensionPoint {
+public interface CommentSubject<T extends Extension>  extends ExtensionPoint {
 
     Mono<T> get(String name);
 

File: api/src/main/java/run/halo/app/core/extension/content/SinglePage.java
Patch:
@@ -9,9 +9,9 @@
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.extension.AbstractExtension;
-import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.GVK;
 import run.halo.app.extension.GroupVersionKind;
+import run.halo.app.extension.MetadataUtil;
 
 /**
  * <p>Single page extension.</p>
@@ -112,7 +112,7 @@ public static class SinglePageStatus extends Post.PostStatus {
     }
 
     public static void changePublishedState(SinglePage page, boolean value) {
-        Map<String, String> labels = ExtensionUtil.nullSafeLabels(page);
+        Map<String, String> labels = MetadataUtil.nullSafeLabels(page);
         labels.put(PUBLISHED_LABEL, String.valueOf(value));
     }
 }

File: api/src/main/java/run/halo/app/infra/utils/GenericClassUtils.java
Patch:
@@ -1,10 +1,9 @@
 package run.halo.app.infra.utils;
 
-import static net.bytebuddy.description.type.TypeDescription.Generic.Builder.parameterizedType;
-
 import java.io.IOException;
 import java.util.function.Supplier;
 import net.bytebuddy.ByteBuddy;
+import net.bytebuddy.description.type.TypeDescription;
 import reactor.core.Exceptions;
 
 public enum GenericClassUtils {
@@ -34,7 +33,8 @@ public static <T> Class<?> generateConcreteClass(Class<?> rawClass, Class<T> par
      */
     public static <T> Class<?> generateConcreteClass(Class<?> rawClass, Class<T> parameterType,
         Supplier<String> nameGenerator) {
-        var concreteType = parameterizedType(rawClass, parameterType).build();
+        var concreteType =
+            TypeDescription.Generic.Builder.parameterizedType(rawClass, parameterType).build();
         try (var unloaded = new ByteBuddy()
             .subclass(concreteType)
             .name(nameGenerator.get())

File: api/src/main/java/run/halo/app/infra/utils/PathUtils.java
Patch:
@@ -52,10 +52,11 @@ public static boolean isAbsoluteUri(final String uriString) {
 
     /**
      * Combine paths based on the passed in path segments parameters.
+     * <br/><br/>
+     * This method doesn't work for Windows system currently.
      *
      * @param pathSegments Path segments to be combined
      * @return the combined path
-     * @apiNote This method doesn't work for Windows system currently.
      */
     public static String combinePath(String... pathSegments) {
         StringBuilder sb = new StringBuilder();

File: api/src/main/java/run/halo/app/plugin/BasePlugin.java
Patch:
@@ -17,6 +17,7 @@ public class BasePlugin extends Plugin {
 
     public BasePlugin(PluginWrapper wrapper) {
         super(wrapper);
+        log.info("Initialized plugin {}", wrapper.getPluginId());
     }
 
     private PluginManager getPluginManager() {

File: api/src/test/java/run/halo/app/extension/controller/RequestSynchronizerTest.java
Patch:
@@ -7,7 +7,6 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static run.halo.app.extension.FakeExtension.createFake;
 
 import java.util.List;
 import java.util.function.Predicate;
@@ -46,7 +45,7 @@ void setUp() {
     @Test
     void shouldStartCorrectlyWhenSyncingAllOnStart() {
         when(client.list(same(FakeExtension.class), any(), any())).thenReturn(
-            List.of(createFake("fake-01"), createFake("fake-02")));
+            List.of(FakeExtension.createFake("fake-01"), FakeExtension.createFake("fake-02")));
 
         synchronizer.start();
 

File: application/src/main/java/run/halo/app/content/PostIndexInformer.java
Patch:
@@ -13,9 +13,9 @@
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.Extension;
 import run.halo.app.extension.ExtensionClient;
-import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.extension.Metadata;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.Unstructured;
 import run.halo.app.extension.Watcher;
 import run.halo.app.extension.controller.RequestSynchronizer;
@@ -62,7 +62,7 @@ public PostIndexInformer(ExtensionClient client) {
 
     private DefaultIndexer.IndexFunc<Post> labelIndexFunc() {
         return post -> {
-            Map<String, String> labels = ExtensionUtil.nullSafeLabels(post);
+            Map<String, String> labels = MetadataUtil.nullSafeLabels(post);
             Set<String> indexKeys = new HashSet<>();
             for (Map.Entry<String, String> entry : labels.entrySet()) {
                 indexKeys.add(labelKey(entry.getKey(), entry.getValue()));

File: application/src/main/java/run/halo/app/content/permalinks/CategoryPermalinkPolicy.java
Patch:
@@ -8,7 +8,7 @@
 import org.springframework.stereotype.Component;
 import run.halo.app.core.extension.content.Category;
 import run.halo.app.core.extension.content.Constant;
-import run.halo.app.extension.ExtensionUtil;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;
@@ -29,7 +29,7 @@ public class CategoryPermalinkPolicy implements PermalinkPolicy<Category> {
 
     @Override
     public String permalink(Category category) {
-        Map<String, String> annotations = ExtensionUtil.nullSafeAnnotations(category);
+        Map<String, String> annotations = MetadataUtil.nullSafeAnnotations(category);
         String permalinkPrefix =
             annotations.getOrDefault(Constant.PERMALINK_PATTERN_ANNO, DEFAULT_PERMALINK_PREFIX);
         String slug = encode(category.getSpec().getSlug(), StandardCharsets.UTF_8);

File: application/src/main/java/run/halo/app/content/permalinks/PostPermalinkPolicy.java
Patch:
@@ -14,7 +14,7 @@
 import org.springframework.stereotype.Component;
 import run.halo.app.core.extension.content.Constant;
 import run.halo.app.core.extension.content.Post;
-import run.halo.app.extension.ExtensionUtil;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;
@@ -36,7 +36,7 @@ public class PostPermalinkPolicy implements PermalinkPolicy<Post> {
 
     @Override
     public String permalink(Post post) {
-        Map<String, String> annotations = ExtensionUtil.nullSafeAnnotations(post);
+        Map<String, String> annotations = MetadataUtil.nullSafeAnnotations(post);
         String permalinkPattern =
             annotations.getOrDefault(Constant.PERMALINK_PATTERN_ANNO, DEFAULT_PERMALINK_PATTERN);
         return createPermalink(post, permalinkPattern);

File: application/src/main/java/run/halo/app/content/permalinks/TagPermalinkPolicy.java
Patch:
@@ -7,7 +7,7 @@
 import org.springframework.web.util.UriUtils;
 import run.halo.app.core.extension.content.Constant;
 import run.halo.app.core.extension.content.Tag;
-import run.halo.app.extension.ExtensionUtil;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;
@@ -27,7 +27,7 @@ public class TagPermalinkPolicy implements PermalinkPolicy<Tag> {
 
     @Override
     public String permalink(Tag tag) {
-        Map<String, String> annotations = ExtensionUtil.nullSafeAnnotations(tag);
+        Map<String, String> annotations = MetadataUtil.nullSafeAnnotations(tag);
         String permalinkPrefix =
             annotations.getOrDefault(Constant.PERMALINK_PATTERN_ANNO, DEFAULT_PERMALINK_PREFIX);
 

File: application/src/main/java/run/halo/app/core/extension/endpoint/PostEndpoint.java
Patch:
@@ -32,8 +32,8 @@
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.event.post.PostRecycledEvent;
 import run.halo.app.event.post.PostUnpublishedEvent;
-import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.ListResult;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.router.QueryParamBuildUtil;
 
@@ -241,7 +241,7 @@ Mono<ServerResponse> publishPost(ServerRequest request) {
     private Mono<Post> awaitPostPublished(String postName) {
         return Mono.defer(() -> client.get(Post.class, postName)
                 .filter(post -> {
-                    var releasedSnapshot = ExtensionUtil.nullSafeAnnotations(post)
+                    var releasedSnapshot = MetadataUtil.nullSafeAnnotations(post)
                         .get(Post.LAST_RELEASED_SNAPSHOT_ANNO);
                     var expectReleaseSnapshot = post.getSpec().getReleaseSnapshot();
                     return Objects.equals(releasedSnapshot, expectReleaseSnapshot);

File: application/src/main/java/run/halo/app/core/extension/endpoint/SinglePageEndpoint.java
Patch:
@@ -28,8 +28,8 @@
 import run.halo.app.content.SinglePageService;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.core.extension.content.SinglePage;
-import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.ListResult;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.router.QueryParamBuildUtil;
 
@@ -210,7 +210,7 @@ Mono<ServerResponse> publishSinglePage(ServerRequest request) {
                 return client.fetch(SinglePage.class, name)
                     .map(latest -> {
                         String latestReleasedSnapshotName =
-                            ExtensionUtil.nullSafeAnnotations(latest)
+                            MetadataUtil.nullSafeAnnotations(latest)
                                 .get(Post.LAST_RELEASED_SNAPSHOT_ANNO);
                         if (StringUtils.equals(latestReleasedSnapshotName,
                             latest.getSpec().getReleaseSnapshot())) {

File: application/src/main/java/run/halo/app/core/extension/endpoint/StatsEndpoint.java
Patch:
@@ -13,7 +13,7 @@
 import run.halo.app.core.extension.Counter;
 import run.halo.app.core.extension.User;
 import run.halo.app.core.extension.content.Post;
-import run.halo.app.extension.ExtensionUtil;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
 
 /**
@@ -57,7 +57,7 @@ Mono<ServerResponse> getStats(ServerRequest request) {
             })
             .flatMap(stats -> client.list(User.class,
                     user -> {
-                        var labels = ExtensionUtil.nullSafeLabels(user);
+                        var labels = MetadataUtil.nullSafeLabels(user);
                         return user.getMetadata().getDeletionTimestamp() == null
                             && !parseBoolean(labels.getOrDefault(User.HIDDEN_USER_LABEL, "false"));
                     },

File: application/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java
Patch:
@@ -48,8 +48,8 @@
 import run.halo.app.core.extension.service.RoleService;
 import run.halo.app.core.extension.service.UserService;
 import run.halo.app.extension.Comparators;
-import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.ListResult;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.router.IListRequest;
 import run.halo.app.infra.utils.JsonUtils;
@@ -214,7 +214,7 @@ private Mono<DetailedUser> toDetailedUser(User user) {
 
     Set<String> roleNames(User user) {
         Assert.notNull(user, "User must not be null");
-        Map<String, String> annotations = ExtensionUtil.nullSafeAnnotations(user);
+        Map<String, String> annotations = MetadataUtil.nullSafeAnnotations(user);
         String roleNamesJson = annotations.get(User.ROLE_NAMES_ANNO);
         if (StringUtils.isBlank(roleNamesJson)) {
             return Set.of();
@@ -274,7 +274,7 @@ private Flux<String> uiPermissions(Set<Role> roles) {
             .collectList()
             .flatMapMany(roleNames -> roleService.listDependenciesFlux(Set.copyOf(roleNames)))
             .map(role -> {
-                Map<String, String> annotations = ExtensionUtil.nullSafeAnnotations(role);
+                Map<String, String> annotations = MetadataUtil.nullSafeAnnotations(role);
                 String uiPermissionStr = annotations.get(Role.UI_PERMISSIONS_ANNO);
                 if (StringUtils.isBlank(uiPermissionStr)) {
                     return new HashSet<String>();

File: application/src/main/java/run/halo/app/core/extension/reconciler/AnnotationSettingReconciler.java
Patch:
@@ -6,8 +6,8 @@
 import org.thymeleaf.util.StringUtils;
 import run.halo.app.core.extension.AnnotationSetting;
 import run.halo.app.extension.ExtensionClient;
-import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.GroupKind;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.Reconciler;
@@ -32,7 +32,7 @@ public Result reconcile(Request request) {
 
     private void populateDefaultLabels(String name) {
         client.fetch(AnnotationSetting.class, name).ifPresent(annotationSetting -> {
-            Map<String, String> labels = ExtensionUtil.nullSafeLabels(annotationSetting);
+            Map<String, String> labels = MetadataUtil.nullSafeLabels(annotationSetting);
             String oldTargetRef = labels.get(AnnotationSetting.TARGET_REF_LABEL);
 
             GroupKind targetRef = annotationSetting.getSpec().getTargetRef();

File: application/src/main/java/run/halo/app/core/extension/reconciler/CategoryReconciler.java
Patch:
@@ -20,7 +20,7 @@
 import run.halo.app.core.extension.content.Constant;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ExtensionClient;
-import run.halo.app.extension.ExtensionUtil;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.Reconciler;
@@ -68,7 +68,7 @@ public Controller setupWith(ControllerBuilder builder) {
 
     void reconcileMetadata(String name) {
         client.fetch(Category.class, name).ifPresent(category -> {
-            Map<String, String> annotations = ExtensionUtil.nullSafeAnnotations(category);
+            Map<String, String> annotations = MetadataUtil.nullSafeAnnotations(category);
             String oldPermalinkPattern = annotations.get(Constant.PERMALINK_PATTERN_ANNO);
 
             String newPattern = categoryPermalinkPolicy.pattern();

File: application/src/main/java/run/halo/app/core/extension/reconciler/CommentReconciler.java
Patch:
@@ -17,8 +17,8 @@
 import run.halo.app.core.extension.content.Constant;
 import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ExtensionClient;
-import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.GroupVersionKind;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.Ref;
 import run.halo.app.extension.SchemeManager;
 import run.halo.app.extension.controller.Controller;
@@ -124,7 +124,7 @@ private void reconcileStatus(String name) {
 
     private void updateUnReplyCountIfNecessary(Comment comment) {
         Instant lastReadTime = comment.getSpec().getLastReadTime();
-        Map<String, String> annotations = ExtensionUtil.nullSafeAnnotations(comment);
+        Map<String, String> annotations = MetadataUtil.nullSafeAnnotations(comment);
         String lastReadTimeAnno = annotations.get(Constant.LAST_READ_TIME_ANNO);
         if (lastReadTime != null && lastReadTime.toString().equals(lastReadTimeAnno)) {
             return;

File: application/src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java
Patch:
@@ -40,9 +40,9 @@
 import run.halo.app.core.extension.theme.SettingUtils;
 import run.halo.app.extension.ConfigMap;
 import run.halo.app.extension.ExtensionClient;
-import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.extension.Metadata;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.Unstructured;
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
@@ -185,7 +185,7 @@ boolean waitForSettingCreation(Plugin plugin) {
         Optional<Setting> settingOption = lookupPluginSetting(pluginName, settingName)
             .map(setting -> {
                 // This annotation is added to prevent it from being deleted when stopped.
-                Map<String, String> settingAnnotations = ExtensionUtil.nullSafeAnnotations(setting);
+                Map<String, String> settingAnnotations = MetadataUtil.nullSafeAnnotations(setting);
                 settingAnnotations.put(DELETE_STAGE, PluginConst.DeleteStage.UNINSTALL.name());
                 return setting;
             })

File: application/src/main/java/run/halo/app/core/extension/reconciler/RoleReconciler.java
Patch:
@@ -7,7 +7,7 @@
 import org.springframework.stereotype.Component;
 import run.halo.app.core.extension.Role;
 import run.halo.app.extension.ExtensionClient;
-import run.halo.app.extension.ExtensionUtil;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.Reconciler;
@@ -33,7 +33,7 @@ public RoleReconciler(ExtensionClient client) {
     public Result reconcile(Request request) {
         client.fetch(Role.class, request.name())
             .ifPresent(role -> {
-                Map<String, String> annotations = ExtensionUtil.nullSafeAnnotations(role);
+                Map<String, String> annotations = MetadataUtil.nullSafeAnnotations(role);
                 // override dependency rules to annotations
                 annotations.put(Role.ROLE_DEPENDENCY_RULES, "[]");
                 annotations.put(Role.UI_PERMISSIONS_AGGREGATED_ANNO, "[]");

File: application/src/main/java/run/halo/app/core/extension/reconciler/SinglePageReconciler.java
Patch:
@@ -23,7 +23,7 @@
 import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.ExtensionOperator;
-import run.halo.app.extension.ExtensionUtil;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.Ref;
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
@@ -107,7 +107,7 @@ private void publishPage(String name) {
         client.fetch(SinglePage.class, name)
             .filter(page -> Objects.equals(true, page.getSpec().getPublish()))
             .ifPresent(page -> {
-                Map<String, String> annotations = ExtensionUtil.nullSafeAnnotations(page);
+                Map<String, String> annotations = MetadataUtil.nullSafeAnnotations(page);
                 String lastReleasedSnapshot = annotations.get(Post.LAST_RELEASED_SNAPSHOT_ANNO);
                 String releaseSnapshot = page.getSpec().getReleaseSnapshot();
                 if (StringUtils.isBlank(releaseSnapshot)) {
@@ -263,7 +263,7 @@ private void reconcileMetadata(String name) {
 
             SinglePage.SinglePageSpec spec = singlePage.getSpec();
             // handle logic delete
-            Map<String, String> labels = ExtensionUtil.nullSafeLabels(singlePage);
+            Map<String, String> labels = MetadataUtil.nullSafeLabels(singlePage);
             if (isDeleted(singlePage)) {
                 labels.put(SinglePage.DELETED_LABEL, Boolean.TRUE.toString());
             } else {

File: application/src/main/java/run/halo/app/core/extension/reconciler/TagReconciler.java
Patch:
@@ -14,7 +14,7 @@
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.ExtensionClient;
-import run.halo.app.extension.ExtensionUtil;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.Reconciler;
@@ -64,7 +64,7 @@ public Controller setupWith(ControllerBuilder builder) {
 
     void reconcileMetadata(String name) {
         client.fetch(Tag.class, name).ifPresent(tag -> {
-            Map<String, String> annotations = ExtensionUtil.nullSafeAnnotations(tag);
+            Map<String, String> annotations = MetadataUtil.nullSafeAnnotations(tag);
             String oldPermalinkPattern = annotations.get(Constant.PERMALINK_PATTERN_ANNO);
 
             String newPattern = tagPermalinkPolicy.pattern();

File: application/src/main/java/run/halo/app/core/extension/reconciler/ThemeReconciler.java
Patch:
@@ -20,8 +20,8 @@
 import run.halo.app.core.extension.theme.SettingUtils;
 import run.halo.app.extension.ConfigMap;
 import run.halo.app.extension.ExtensionClient;
-import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.Metadata;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.Reconciler;
@@ -226,7 +226,7 @@ private void deleteAnnotationSettings(String themeName) {
 
     private List<AnnotationSetting> listAnnotationSettingsByThemeName(String themeName) {
         return client.list(AnnotationSetting.class, annotationSetting -> {
-            Map<String, String> labels = ExtensionUtil.nullSafeLabels(annotationSetting);
+            Map<String, String> labels = MetadataUtil.nullSafeLabels(annotationSetting);
             return themeName.equals(labels.get(Theme.THEME_NAME_LABEL));
         }, null);
     }

File: application/src/main/java/run/halo/app/core/extension/service/DefaultRoleService.java
Patch:
@@ -20,7 +20,7 @@
 import run.halo.app.core.extension.RoleBinding;
 import run.halo.app.core.extension.RoleBinding.RoleRef;
 import run.halo.app.core.extension.RoleBinding.Subject;
-import run.halo.app.extension.ExtensionUtil;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.infra.utils.JsonUtils;
 
@@ -104,7 +104,7 @@ public Flux<Role> listDependenciesFlux(Set<String> names) {
                     return Flux.empty();
                 }
                 visited.add(name);
-                var annotations = ExtensionUtil.nullSafeAnnotations(role);
+                var annotations = MetadataUtil.nullSafeAnnotations(role);
                 var dependenciesJson = annotations.get(Role.ROLE_DEPENDENCIES_ANNO);
                 var dependencies = stringToList(dependenciesJson);
                 return Flux.fromIterable(dependencies)

File: application/src/main/java/run/halo/app/core/extension/theme/ThemeServiceImpl.java
Patch:
@@ -35,7 +35,7 @@
 import run.halo.app.core.extension.Setting;
 import run.halo.app.core.extension.Theme;
 import run.halo.app.extension.ConfigMap;
-import run.halo.app.extension.ExtensionUtil;
+import run.halo.app.extension.MetadataUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Unstructured;
 import run.halo.app.infra.SystemVersionSupplier;
@@ -277,7 +277,7 @@ private Mono<Void> waitForSettingDeleted(String settingName) {
     private Mono<Void> waitForAnnotationSettingsDeleted(String themeName) {
         return client.list(AnnotationSetting.class,
                 annotationSetting -> {
-                    Map<String, String> labels = ExtensionUtil.nullSafeLabels(annotationSetting);
+                    Map<String, String> labels = MetadataUtil.nullSafeLabels(annotationSetting);
                     return StringUtils.equals(themeName, labels.get(Theme.THEME_NAME_LABEL));
                 }, null)
             .flatMap(annotationSetting -> client.delete(annotationSetting)

File: application/src/main/java/run/halo/app/extension/router/ExtensionRouterFunctionFactory.java
Patch:
@@ -13,6 +13,7 @@
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Scheme;
+import run.halo.app.extension.router.IListRequest.QueryListRequest;
 
 public class ExtensionRouterFunctionFactory {
 
@@ -54,7 +55,7 @@ public RouterFunction<ServerResponse> create() {
                         .response(responseBuilder().responseCode("200")
                             .description("Response " + scheme.plural())
                             .implementation(ListResult.generateGenericClass(scheme)));
-                    QueryParamBuildUtil.buildParametersFromType(builder, ListRequest.class);
+                    QueryParamBuildUtil.buildParametersFromType(builder, QueryListRequest.class);
                 })
             .POST(createHandler.pathPattern(), createHandler,
                 builder -> builder.operationId("Create" + gvk)

File: application/src/main/java/run/halo/app/plugin/HaloPluginManager.java
Patch:
@@ -378,7 +378,7 @@ public void releaseAdditionalResources(String pluginId) {
         try {
             pluginApplicationInitializer.contextDestroyed(pluginId);
         } catch (Exception e) {
-            log.trace("Plugin application context close failed. ", e);
+            log.warn("Plugin application context close failed. ", e);
         }
     }
 

File: application/src/main/java/run/halo/app/plugin/PluginApplicationInitializer.java
Patch:
@@ -113,7 +113,7 @@ private void populateSettingFetcher(String pluginName,
         DefaultListableBeanFactory listableBeanFactory) {
         ExtensionClient extensionClient =
             rootApplicationContext.getBean(ExtensionClient.class);
-        SettingFetcher settingFetcher = new SettingFetcher(pluginName, extensionClient);
+        SettingFetcher settingFetcher = new DefaultSettingFetcher(pluginName, extensionClient);
         listableBeanFactory.registerSingleton("settingFetcher", settingFetcher);
     }
 

File: src/main/java/run/halo/app/plugin/SharedApplicationContextHolder.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.springframework.beans.factory.support.DefaultListableBeanFactory;
 import org.springframework.context.ApplicationContext;
+import org.springframework.security.web.server.context.ServerSecurityContextRepository;
 import org.springframework.stereotype.Component;
 import run.halo.app.extension.DefaultSchemeManager;
 import run.halo.app.extension.ExtensionClient;
@@ -64,6 +65,8 @@ SharedApplicationContext createSharedApplicationContext() {
         beanFactory.registerSingleton("schemeManager", defaultSchemeManager);
         beanFactory.registerSingleton("externalUrlSupplier",
             rootApplicationContext.getBean(ExternalUrlSupplier.class));
+        beanFactory.registerSingleton("serverSecurityContextRepository",
+            rootApplicationContext.getBean(ServerSecurityContextRepository.class));
         // TODO add more shared instance here
 
         return sharedApplicationContext;

File: src/main/java/run/halo/app/core/extension/service/RoleService.java
Patch:
@@ -25,5 +25,7 @@ public interface RoleService {
 
     List<Role> listDependencies(Set<String> names);
 
+    Flux<Role> listDependenciesFlux(Set<String> names);
+
     Flux<Role> list(Set<String> roleNames);
 }

File: src/main/java/run/halo/app/config/SwaggerConfig.java
Patch:
@@ -80,7 +80,7 @@ GroupedOpenApi allApi() {
         return GroupedOpenApi.builder()
             .group("all-api")
             .displayName("All APIs")
-            .pathsToMatch("/api/**", "/apis/**")
+            .pathsToMatch("/api/**", "/apis/**", "/login/**")
             .build();
     }
 

File: src/main/java/run/halo/app/theme/router/SinglePageRoute.java
Patch:
@@ -127,6 +127,7 @@ HandlerFunction<ServerResponse> handlerFunction(String name) {
         return request -> singlePageFinder.getByName(name)
             .flatMap(singlePageVo -> {
                 Map<String, Object> model = new HashMap<>();
+                model.put("name", singlePageVo.getMetadata().getName());
                 model.put("groupVersionKind", gvk);
                 model.put("plural", getPlural());
                 model.put(ModelConst.TEMPLATE_ID, DefaultTemplateEnum.SINGLE_PAGE.getValue());

File: src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java
Patch:
@@ -102,6 +102,7 @@ private Mono<ServerResponse> postResponse(ServerRequest request,
         return postVoMono
             .flatMap(postVo -> {
                 Map<String, Object> model = new HashMap<>();
+                model.put("name", postVo.getMetadata().getName());
                 model.put(ModelConst.TEMPLATE_ID, DefaultTemplateEnum.POST.getValue());
                 model.put("groupVersionKind", GroupVersionKind.fromExtension(Post.class));
                 GVK gvk = Post.class.getAnnotation(GVK.class);

File: src/test/java/run/halo/app/theme/router/factories/PostRouteFactoryTest.java
Patch:
@@ -75,6 +75,8 @@ public Mono<Void> render(Map<String, ?> model, MediaType contentType,
                     assertThat(model).containsKey(ModelConst.TEMPLATE_ID);
                     assertThat(model.get(ModelConst.TEMPLATE_ID))
                         .isEqualTo(DefaultTemplateEnum.POST.getValue());
+                    assertThat(model.get("name"))
+                        .isEqualTo(post.getMetadata().getName());
                     assertThat(model.get("plural")).isEqualTo("posts");
                     assertThat(model.get("post")).isNotNull();
                     assertThat(model.get("groupVersionKind"))

File: src/main/java/run/halo/app/metrics/VisitLogWriter.java
Patch:
@@ -17,7 +17,6 @@
 import org.apache.commons.lang3.exception.ExceptionUtils;
 import org.springframework.beans.factory.DisposableBean;
 import org.springframework.beans.factory.InitializingBean;
-import org.springframework.stereotype.Component;
 import reactor.core.Disposable;
 import run.halo.app.infra.properties.HaloProperties;
 import run.halo.app.infra.utils.FileUtils;
@@ -29,7 +28,7 @@
  * @since 2.0.0
  */
 @Slf4j
-@Component
+@Deprecated
 public class VisitLogWriter implements InitializingBean, DisposableBean {
     private static final String LOG_FILE_NAME = "visits.log";
     private static final String LOG_FILE_LOCATION = "logs";

File: src/test/java/run/halo/app/metrics/VisitLogWriterTest.java
Patch:
@@ -8,6 +8,7 @@
 import java.nio.file.Path;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 import org.mockito.Mock;
@@ -21,6 +22,8 @@
  * @author guqing
  * @since 2.0.0
  */
+@Disabled
+@Deprecated
 @ExtendWith(MockitoExtension.class)
 class VisitLogWriterTest {
 

File: src/main/java/run/halo/app/plugin/YamlPluginFinder.java
Patch:
@@ -65,6 +65,7 @@ public Plugin find(Path pluginPath) {
         if (plugin.getStatus() == null) {
             Plugin.PluginStatus pluginStatus = new Plugin.PluginStatus();
             pluginStatus.setPhase(PluginState.RESOLVED);
+            pluginStatus.setLoadLocation(pluginPath.toUri());
             plugin.setStatus(pluginStatus);
         }
         return plugin;

File: src/main/java/run/halo/app/theme/router/factories/ArchiveRouteFactory.java
Patch:
@@ -19,6 +19,7 @@
 import org.springframework.web.reactive.function.server.ServerResponse;
 import reactor.core.publisher.Mono;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
+import run.halo.app.infra.SystemSetting;
 import run.halo.app.infra.utils.JsonUtils;
 import run.halo.app.infra.utils.PathUtils;
 import run.halo.app.theme.DefaultTemplateEnum;
@@ -78,7 +79,7 @@ private Mono<UrlContextListResult<PostArchiveVo>> archivePosts(ServerRequest req
         ArchivePathVariables variables = ArchivePathVariables.from(request);
         int pageNum = pageNumInPathVariable(request);
         String requestPath = request.path();
-        return configuredPageSize(environmentFetcher)
+        return configuredPageSize(environmentFetcher, SystemSetting.Post::getArchivePageSize)
             .flatMap(pageSize -> postFinder.archives(pageNum, pageSize, variables.getYear(),
                 variables.getMonth()))
             .map(list -> new UrlContextListResult.Builder<PostArchiveVo>()

File: src/main/java/run/halo/app/theme/router/factories/AuthorPostsRouteFactory.java
Patch:
@@ -17,6 +17,7 @@
 import run.halo.app.core.extension.User;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
+import run.halo.app.infra.SystemSetting;
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.vo.ListedPostVo;
@@ -62,7 +63,7 @@ HandlerFunction<ServerResponse> handlerFunction() {
     private Mono<UrlContextListResult<ListedPostVo>> postList(ServerRequest request, String name) {
         String path = request.path();
         int pageNum = pageNumInPathVariable(request);
-        return configuredPageSize(environmentFetcher)
+        return configuredPageSize(environmentFetcher, SystemSetting.Post::getPostPageSize)
             .flatMap(pageSize -> postFinder.listByOwner(pageNum, pageSize, name))
             .map(list -> new UrlContextListResult.Builder<ListedPostVo>()
                 .listResult(list)

File: src/main/java/run/halo/app/theme/router/factories/CategoryPostRouteFactory.java
Patch:
@@ -18,6 +18,7 @@
 import run.halo.app.core.extension.content.Category;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
+import run.halo.app.infra.SystemSetting;
 import run.halo.app.infra.exception.NotFoundException;
 import run.halo.app.infra.utils.PathUtils;
 import run.halo.app.theme.DefaultTemplateEnum;
@@ -83,7 +84,7 @@ private Mono<UrlContextListResult<ListedPostVo>> postListByCategoryName(String n
         ServerRequest request) {
         String path = request.path();
         int pageNum = pageNumInPathVariable(request);
-        return configuredPageSize(environmentFetcher)
+        return configuredPageSize(environmentFetcher, SystemSetting.Post::getCategoryPageSize)
             .flatMap(pageSize -> postFinder.listByCategory(pageNum, pageSize, name))
             .map(list -> new UrlContextListResult.Builder<ListedPostVo>()
                 .listResult(list)

File: src/main/java/run/halo/app/theme/router/factories/IndexRouteFactory.java
Patch:
@@ -15,6 +15,7 @@
 import org.springframework.web.reactive.function.server.ServerResponse;
 import reactor.core.publisher.Mono;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
+import run.halo.app.infra.SystemSetting;
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.vo.ListedPostVo;
@@ -52,7 +53,7 @@ HandlerFunction<ServerResponse> handlerFunction() {
 
     private Mono<UrlContextListResult<ListedPostVo>> postList(ServerRequest request) {
         String path = request.path();
-        return configuredPageSize(environmentFetcher)
+        return configuredPageSize(environmentFetcher, SystemSetting.Post::getPostPageSize)
             .flatMap(pageSize -> postFinder.list(pageNumInPathVariable(request), pageSize))
             .map(list -> new UrlContextListResult.Builder<ListedPostVo>()
                 .listResult(list)

File: src/main/java/run/halo/app/theme/router/factories/TagPostRouteFactory.java
Patch:
@@ -16,6 +16,7 @@
 import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
+import run.halo.app.infra.SystemSetting;
 import run.halo.app.infra.exception.NotFoundException;
 import run.halo.app.infra.utils.PathUtils;
 import run.halo.app.theme.DefaultTemplateEnum;
@@ -67,7 +68,7 @@ private HandlerFunction<ServerResponse> handlerFunction() {
 
     private Mono<UrlContextListResult<ListedPostVo>> postList(String name, Integer page,
         String requestPath) {
-        return configuredPageSize(environmentFetcher)
+        return configuredPageSize(environmentFetcher, SystemSetting.Post::getTagPageSize)
             .flatMap(pageSize -> postFinder.listByTag(page, pageSize, name))
             .map(list -> new UrlContextListResult.Builder<ListedPostVo>()
                 .listResult(list)

File: src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java
Patch:
@@ -102,6 +102,7 @@ private Mono<ServerResponse> postResponse(ServerRequest request,
         return postVoMono
             .flatMap(postVo -> {
                 Map<String, Object> model = new HashMap<>();
+                model.put(ModelConst.TEMPLATE_ID, DefaultTemplateEnum.POST.getValue());
                 model.put("groupVersionKind", GroupVersionKind.fromExtension(Post.class));
                 GVK gvk = Post.class.getAnnotation(GVK.class);
                 model.put("plural", gvk.plural());

File: src/main/java/run/halo/app/core/extension/User.java
Patch:
@@ -34,6 +34,8 @@ public class User extends AbstractExtension {
 
     public static final String ROLE_NAMES_ANNO = "rbac.authorization.halo.run/role-names";
 
+    public static final String HIDDEN_USER_LABEL = "halo.run/hidden-user";
+
     @Schema(required = true)
     private UserSpec spec;
 

File: src/main/java/run/halo/app/core/extension/service/RoleService.java
Patch:
@@ -24,4 +24,6 @@ public interface RoleService {
     Flux<RoleRef> listRoleRefs(Subject subject);
 
     List<Role> listDependencies(Set<String> names);
+
+    Flux<Role> list(Set<String> roleNames);
 }

File: src/main/java/run/halo/app/core/extension/content/Constant.java
Patch:
@@ -7,4 +7,5 @@ public enum Constant {
     public static final String VERSION = "v1alpha1";
 
     public static final String LAST_READ_TIME_ANNO = "content.halo.run/last-read-time";
+    public static final String PERMALINK_PATTERN_ANNO = "content.halo.run/permalink-pattern";
 }

File: src/main/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessor.java
Patch:
@@ -13,7 +13,7 @@
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.SinglePageFinder;
-import run.halo.app.theme.router.strategy.ModelConst;
+import run.halo.app.theme.router.factories.ModelConst;
 
 /**
  * <p>The <code>head</code> html snippet injection processor for content template such as post

File: src/main/java/run/halo/app/theme/dialect/TemplateGlobalHeadProcessor.java
Patch:
@@ -10,7 +10,7 @@
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;
 import run.halo.app.theme.DefaultTemplateEnum;
-import run.halo.app.theme.router.strategy.ModelConst;
+import run.halo.app.theme.router.factories.ModelConst;
 
 /**
  * <p>Global custom head snippet injection for theme global setting.</p>

File: src/main/java/run/halo/app/theme/finders/impl/PostFinderImpl.java
Patch:
@@ -20,7 +20,6 @@
 import org.springframework.util.comparator.Comparators;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import reactor.util.function.Tuple2;
 import run.halo.app.content.PostService;
 import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ListResult;
@@ -135,7 +134,6 @@ static Pair<String, String> postPreviousNextPair(List<String> postNames,
         }
 
         List<String> elements = window.elements();
-        Tuple2<String, String> previousNext;
         // current post index
         int index = elements.indexOf(currentName);
 

File: src/main/java/run/halo/app/theme/finders/impl/SinglePageFinderImpl.java
Patch:
@@ -51,6 +51,7 @@ public class SinglePageFinderImpl implements SinglePageFinder {
     @Override
     public Mono<SinglePageVo> getByName(String pageName) {
         return client.fetch(SinglePage.class, pageName)
+            .filter(FIXED_PREDICATE)
             .map(page -> {
                 SinglePageVo pageVo = SinglePageVo.from(page);
                 pageVo.setContributors(List.of());

File: src/main/java/run/halo/app/theme/router/factories/ModelConst.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.theme.router.strategy;
+package run.halo.app.theme.router.factories;
 
 /**
  * Static variable keys for view model.

File: src/test/java/run/halo/app/core/extension/reconciler/PostReconcilerTest.java
Patch:
@@ -80,9 +80,6 @@ void reconcile() {
         verify(client, times(3)).update(captor.capture());
 
         verify(postPermalinkPolicy, times(1)).permalink(any());
-        verify(postPermalinkPolicy, times(1)).onPermalinkAdd(any());
-        verify(postPermalinkPolicy, times(1)).onPermalinkDelete(any());
-        verify(postPermalinkPolicy, times(0)).onPermalinkUpdate(any());
 
         Post value = captor.getValue();
         assertThat(value.getStatus().getExcerpt()).isNull();

File: src/test/java/run/halo/app/core/extension/reconciler/UserReconcilerTest.java
Patch:
@@ -24,7 +24,6 @@
 import run.halo.app.extension.controller.Reconciler;
 import run.halo.app.infra.AnonymousUserConst;
 import run.halo.app.infra.ExternalUrlSupplier;
-import run.halo.app.theme.router.PermalinkIndexUpdateCommand;
 
 /**
  * Tests for {@link UserReconciler}.
@@ -54,7 +53,6 @@ void permalinkForFakeUser() throws URISyntaxException {
             .thenReturn(Optional.of(user("fake-user")));
         userReconciler.reconcile(new Reconciler.Request("fake-user"));
         verify(client, times(1)).update(any(User.class));
-        verify(eventPublisher, times(1)).publishEvent(any(PermalinkIndexUpdateCommand.class));
 
         ArgumentCaptor<User> captor = ArgumentCaptor.forClass(User.class);
         verify(client, times(1)).update(captor.capture());
@@ -68,7 +66,6 @@ void permalinkForAnonymousUser() {
             .thenReturn(Optional.of(user(AnonymousUserConst.PRINCIPAL)));
         userReconciler.reconcile(new Reconciler.Request(AnonymousUserConst.PRINCIPAL));
         verify(client, times(0)).update(any(User.class));
-        verify(eventPublisher, times(0)).publishEvent(any(PermalinkIndexUpdateCommand.class));
     }
 
     User user(String name) {

File: src/test/java/run/halo/app/theme/dialect/HaloProcessorDialectTest.java
Patch:
@@ -38,7 +38,7 @@
 import run.halo.app.theme.finders.SinglePageFinder;
 import run.halo.app.theme.finders.vo.PostVo;
 import run.halo.app.theme.finders.vo.UserVo;
-import run.halo.app.theme.router.strategy.ModelConst;
+import run.halo.app.theme.router.factories.ModelConst;
 
 /**
  * Tests for {@link HaloProcessorDialect}.

File: src/test/java/run/halo/app/theme/router/EmptyView.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.theme.router.strategy;
+package run.halo.app.theme.router;
 
 import java.util.Map;
 import org.springframework.http.MediaType;

File: src/test/java/run/halo/app/theme/router/ViewNameResolverTest.java
Patch:
@@ -22,7 +22,6 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 import run.halo.app.theme.HaloViewResolver;
-import run.halo.app.theme.router.strategy.EmptyView;
 
 /**
  * Tests for {@link ViewNameResolver}.

File: src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -10,6 +10,8 @@ public interface UserService {
 
     Mono<User> getUser(String username);
 
+    Mono<User> getUserOrGhost(String username);
+
     Mono<User> updatePassword(String username, String newPassword);
 
     Mono<User> updateWithRawPassword(String username, String rawPassword);

File: src/main/java/run/halo/app/extension/JSONExtensionConverter.java
Patch:
@@ -53,8 +53,6 @@ public <E extends Extension> ExtensionStore convertTo(E extension) {
         var scheme = schemeManager.get(gvk);
 
         try {
-            var data = objectMapper.writeValueAsBytes(extension);
-
             var validation = new ValidationData<>(extension);
             var extensionJsonNode = objectMapper.valueToTree(extension);
             var validator = getValidator(scheme);
@@ -68,6 +66,7 @@ public <E extends Extension> ExtensionStore convertTo(E extension) {
 
             var version = extension.getMetadata().getVersion();
             var storeName = ExtensionUtil.buildStoreName(scheme, extension.getMetadata().getName());
+            var data = objectMapper.writeValueAsBytes(extensionJsonNode);
             return new ExtensionStore(storeName, data, version);
         } catch (IOException e) {
             throw new ExtensionConvertException("Failed write Extension as bytes", e);

File: src/main/java/run/halo/app/content/comment/CommentServiceImpl.java
Patch:
@@ -93,6 +93,9 @@ public Mono<Comment> create(Comment comment) {
                 if (comment.getSpec().getOwner() != null) {
                     return Mono.just(comment);
                 }
+                if (comment.getSpec().getCreationTime() == null) {
+                    comment.getSpec().setCreationTime(Instant.now());
+                }
                 // populate owner from current user
                 return fetchCurrentUser()
                     .map(this::toCommentOwner)

File: src/test/java/run/halo/app/content/comment/CommentServiceImplTest.java
Patch:
@@ -127,6 +127,7 @@ void create() throws JSONException {
 
         verify(client, times(1)).create(captor.capture());
         Comment comment = captor.getValue();
+        comment.getSpec().setCreationTime(null);
         JSONAssert.assertEquals("""
                 {
                     "spec": {

File: src/main/java/run/halo/app/infra/ConditionList.java
Patch:
@@ -31,6 +31,9 @@ public boolean add(@NonNull Condition condition) {
     }
 
     public boolean addFirst(@NonNull Condition condition) {
+        if (isSame(conditions.peekFirst(), condition)) {
+            return false;
+        }
         conditions.addFirst(condition);
         return true;
     }

File: src/test/java/run/halo/app/plugin/PluginStartedListenerTest.java
Patch:
@@ -35,7 +35,7 @@ void lookupFromClasses() throws IOException {
             Files.createFile(extensions.resolve("roles.yaml"));
 
             Set<String> extensionResources =
-                PluginStartedListener.PluginExtensionLoaderUtils.lookupFromClasses(tempPluginPath);
+                PluginExtensionLoaderUtils.lookupFromClasses(tempPluginPath);
             assertThat(extensionResources)
                 .containsAll(Set.of(Path.of("extensions/roles.yaml").toString()));
         }
@@ -50,7 +50,7 @@ void lookupFromJar() throws IOException {
                 Path targetJarPath = tempDirectory.resolve("plugin-0.0.1.jar");
                 FileUtils.jar(Paths.get(plugin001Uri), targetJarPath);
                 Set<String> unstructuredFilePathFromJar =
-                    PluginStartedListener.PluginExtensionLoaderUtils.lookupFromJar(targetJarPath);
+                    PluginExtensionLoaderUtils.lookupFromJar(targetJarPath);
                 assertThat(unstructuredFilePathFromJar).hasSize(3);
                 assertThat(unstructuredFilePathFromJar).containsAll(Set.of(
                     Path.of("extensions/roles.yaml").toString(),

File: src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -224,15 +224,15 @@ private Flux<Contributor> listContributors(List<String> usernames) {
             return Flux.empty();
         }
         return Flux.fromIterable(usernames)
-            .flatMap(username -> client.fetch(User.class, username))
+            .flatMap(username -> client.fetch(User.class, username)
+                .switchIfEmpty(Mono.defer(() -> client.fetch(User.class, "ghost"))))
             .map(user -> {
                 Contributor contributor = new Contributor();
                 contributor.setName(user.getMetadata().getName());
                 contributor.setDisplayName(user.getSpec().getDisplayName());
                 contributor.setAvatar(user.getSpec().getAvatar());
                 return contributor;
-            })
-            .defaultIfEmpty(Contributor.getGhost());
+            });
     }
 
     @Override

File: src/main/java/run/halo/app/core/extension/reconciler/TagReconciler.java
Patch:
@@ -53,6 +53,7 @@ public Result reconcile(Request request) {
     @Override
     public Controller setupWith(ControllerBuilder builder) {
         return builder
+            .syncAllOnStart(false)
             .extension(new Tag())
             .build();
     }

File: src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -231,7 +231,8 @@ private Flux<Contributor> listContributors(List<String> usernames) {
                 contributor.setDisplayName(user.getSpec().getDisplayName());
                 contributor.setAvatar(user.getSpec().getAvatar());
                 return contributor;
-            });
+            })
+            .defaultIfEmpty(Contributor.getGhost());
     }
 
     @Override

File: src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -208,15 +208,15 @@ private Flux<Tag> listTags(List<String> tagNames) {
             return Flux.empty();
         }
         return Flux.fromIterable(tagNames)
-            .flatMap(tagName -> client.fetch(Tag.class, tagName));
+            .flatMapSequential(tagName -> client.fetch(Tag.class, tagName));
     }
 
     private Flux<Category> listCategories(List<String> categoryNames) {
         if (categoryNames == null) {
             return Flux.empty();
         }
         return Flux.fromIterable(categoryNames)
-            .flatMap(categoryName -> client.fetch(Category.class, categoryName));
+            .flatMapSequential(categoryName -> client.fetch(Category.class, categoryName));
     }
 
     private Flux<Contributor> listContributors(List<String> usernames) {

File: src/main/java/run/halo/app/infra/exception/handlers/HaloErrorWebExceptionHandler.java
Patch:
@@ -12,6 +12,7 @@
 import org.springframework.web.reactive.function.server.ServerRequest;
 import org.springframework.web.reactive.function.server.ServerResponse;
 import reactor.core.publisher.Mono;
+import reactor.util.context.Context;
 import run.halo.app.theme.ThemeContext;
 import run.halo.app.theme.ThemeResolver;
 import run.halo.app.theme.engine.ThemeTemplateAvailabilityProvider;
@@ -59,9 +60,9 @@ protected Mono<ServerResponse> renderErrorResponse(ServerRequest request) {
 
     @Override
     protected Mono<ServerResponse> renderErrorView(ServerRequest request) {
-        return themeResolver.getTheme(request.exchange().getRequest())
+        return themeResolver.getTheme(request.exchange())
             .flatMap(themeContext -> super.renderErrorView(request)
-                .contextWrite(context -> context.put(ThemeContext.class, themeContext)));
+                .contextWrite(Context.of(ThemeContext.class, themeContext)));
     }
 
     @Override

File: src/main/java/run/halo/app/theme/HaloViewResolver.java
Patch:
@@ -50,7 +50,7 @@ public static class HaloView extends ThymeleafReactiveView {
         @Override
         public Mono<Void> render(Map<String, ?> model, MediaType contentType,
             ServerWebExchange exchange) {
-            return themeResolver.getTheme(exchange.getRequest()).flatMap(theme -> {
+            return themeResolver.getTheme(exchange).flatMap(theme -> {
                 // calculate the engine before rendering
                 setTemplateEngine(engineManager.getTemplateEngine(theme));
                 return super.render(model, contentType, exchange)

File: src/main/java/run/halo/app/theme/ThemeContextBasedVariablesAcquirer.java
Patch:
@@ -25,7 +25,7 @@ public ThemeContextBasedVariablesAcquirer(ThemeFinder themeFinder,
 
     @Override
     public Mono<Map<String, Object>> acquire(ServerWebExchange exchange) {
-        return themeResolver.getTheme(exchange.getRequest())
+        return themeResolver.getTheme(exchange)
             .flatMap(themeContext -> {
                 String name = themeContext.getName();
                 return themeFinder.getByName(name);

File: src/main/java/run/halo/app/core/extension/Role.java
Patch:
@@ -53,6 +53,7 @@ public class Role extends AbstractExtension {
      * @since 2.0.0
      */
     @Getter
+    @EqualsAndHashCode
     public static class PolicyRule implements Comparable<PolicyRule> {
         /**
          * APIGroups is the name of the APIGroup that contains the resources.

File: src/main/java/run/halo/app/extension/Metadata.java
Patch:
@@ -12,7 +12,7 @@
  * @author johnniang
  */
 @Data
-@EqualsAndHashCode
+@EqualsAndHashCode(exclude = "version")
 public class Metadata implements MetadataOperator {
 
     /**

File: src/main/java/run/halo/app/extension/Unstructured.java
Patch:
@@ -22,6 +22,7 @@
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
+import lombok.EqualsAndHashCode;
 
 /**
  * Unstructured is a generic Extension, which wraps ObjectNode to maintain the Extension data, like
@@ -65,6 +66,7 @@ public MetadataOperator getMetadata() {
         return new UnstructuredMetadata();
     }
 
+    @EqualsAndHashCode(exclude = "version")
     class UnstructuredMetadata implements MetadataOperator {
 
         @Override

File: src/main/java/run/halo/app/extension/controller/ControllerBuilder.java
Patch:
@@ -106,7 +106,7 @@ public Controller build() {
         Assert.notNull(extension, "Extension must not be null");
         Assert.notNull(reconciler, "Reconciler must not be null");
 
-        var queue = new DefaultDelayQueue<Request>(nowSupplier, minDelay);
+        var queue = new DefaultQueue<Request>(nowSupplier, minDelay);
         var predicates = new WatcherPredicates.Builder()
             .withGroupVersionKind(extension.groupVersionKind())
             .onAddPredicate(onAddPredicate)

File: src/main/java/run/halo/app/extension/gc/GcReconciler.java
Patch:
@@ -13,7 +13,7 @@
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.DefaultController;
-import run.halo.app.extension.controller.DefaultDelayQueue;
+import run.halo.app.extension.controller.DefaultQueue;
 import run.halo.app.extension.controller.Reconciler;
 import run.halo.app.extension.store.ExtensionStoreClient;
 
@@ -55,7 +55,7 @@ public Result reconcile(GcRequest request) {
 
     @Override
     public Controller setupWith(ControllerBuilder builder) {
-        var queue = new DefaultDelayQueue<GcRequest>(Instant::now, Duration.ofMillis(500));
+        var queue = new DefaultQueue<GcRequest>(Instant::now, Duration.ofMillis(500));
         var synchronizer = new GcSynchronizer(client, queue, schemeManager);
         return new DefaultController<>(
             "garbage-collector-controller",

File: src/main/java/run/halo/app/metrics/ReplyEventReconciler.java
Patch:
@@ -16,7 +16,7 @@
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.DefaultController;
-import run.halo.app.extension.controller.DefaultDelayQueue;
+import run.halo.app.extension.controller.DefaultQueue;
 import run.halo.app.extension.controller.Reconciler;
 import run.halo.app.extension.controller.RequestQueue;
 
@@ -37,7 +37,7 @@ public class ReplyEventReconciler implements Reconciler<ReplyEvent>, SmartLifecy
 
     public ReplyEventReconciler(ExtensionClient client) {
         this.client = client;
-        replyEventQueue = new DefaultDelayQueue<>(Instant::now);
+        replyEventQueue = new DefaultQueue<>(Instant::now);
         replyEventController = this.setupWith(null);
     }
 

File: src/main/java/run/halo/app/metrics/VisitedEventReconciler.java
Patch:
@@ -17,7 +17,7 @@
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.DefaultController;
-import run.halo.app.extension.controller.DefaultDelayQueue;
+import run.halo.app.extension.controller.DefaultQueue;
 import run.halo.app.extension.controller.Reconciler;
 import run.halo.app.extension.controller.RequestQueue;
 
@@ -41,7 +41,7 @@ public class VisitedEventReconciler
 
     public VisitedEventReconciler(ExtensionClient client) {
         this.client = client;
-        visitedEventQueue = new DefaultDelayQueue<>(Instant::now);
+        visitedEventQueue = new DefaultQueue<>(Instant::now);
         visitedEventController = this.setupWith(null);
     }
 

File: src/main/java/run/halo/app/metrics/VotedEventReconciler.java
Patch:
@@ -15,7 +15,7 @@
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.DefaultController;
-import run.halo.app.extension.controller.DefaultDelayQueue;
+import run.halo.app.extension.controller.DefaultQueue;
 import run.halo.app.extension.controller.Reconciler;
 import run.halo.app.extension.controller.RequestQueue;
 
@@ -36,7 +36,7 @@ public class VotedEventReconciler implements Reconciler<VotedEvent>, SmartLifecy
 
     public VotedEventReconciler(ExtensionClient client) {
         this.client = client;
-        votedEventQueue = new DefaultDelayQueue<>(Instant::now);
+        votedEventQueue = new DefaultQueue<>(Instant::now);
         votedEventController = this.setupWith(null);
     }
 

File: src/main/java/run/halo/app/plugin/PluginCreatedEventReconciler.java
Patch:
@@ -15,7 +15,7 @@
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.DefaultController;
-import run.halo.app.extension.controller.DefaultDelayQueue;
+import run.halo.app.extension.controller.DefaultQueue;
 import run.halo.app.extension.controller.Reconciler;
 import run.halo.app.extension.controller.RequestQueue;
 import run.halo.app.plugin.event.PluginCreatedEvent;
@@ -42,7 +42,7 @@ public class PluginCreatedEventReconciler
 
     public PluginCreatedEventReconciler(ReactiveExtensionClient client) {
         this.client = client;
-        pluginEventQueue = new DefaultDelayQueue<>(Instant::now);
+        pluginEventQueue = new DefaultQueue<>(Instant::now);
         pluginEventController = this.setupWith(null);
     }
 

File: src/main/java/run/halo/app/search/post/PostEventReconciler.java
Patch:
@@ -17,7 +17,7 @@
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.DefaultController;
-import run.halo.app.extension.controller.DefaultDelayQueue;
+import run.halo.app.extension.controller.DefaultQueue;
 import run.halo.app.extension.controller.Reconciler;
 import run.halo.app.extension.controller.RequestQueue;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
@@ -43,7 +43,7 @@ public PostEventReconciler(ExtensionGetter extensionGetter,
         this.extensionGetter = extensionGetter;
         this.postFinder = postFinder;
 
-        postEventQueue = new DefaultDelayQueue<>(Instant::now);
+        postEventQueue = new DefaultQueue<>(Instant::now);
         postEventController = this.setupWith(null);
     }
 

File: src/main/java/run/halo/app/core/extension/Theme.java
Patch:
@@ -1,5 +1,7 @@
 package run.halo.app.core.extension;
 
+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.NOT_REQUIRED;
+
 import io.swagger.v3.oas.annotations.media.Schema;
 import java.util.List;
 import lombok.Data;
@@ -60,6 +62,7 @@ public static class ThemeSpec {
         @Schema(description = "Deprecated, use `requires` instead.")
         private String require;
 
+        @Schema(requiredMode = NOT_REQUIRED)
         private String requires;
 
         private String settingName;

File: src/main/java/run/halo/app/config/WebServerSecurityConfig.java
Patch:
@@ -51,7 +51,8 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,
         ObjectProvider<SecurityConfigurer> securityConfigurers,
         ServerSecurityContextRepository securityContextRepository) {
 
-        http.securityMatcher(pathMatchers("/api/**", "/apis/**", "/login", "/logout"))
+        http.securityMatcher(
+                pathMatchers("/api/**", "/apis/**", "/login", "/logout", "/actuator/**"))
             .authorizeExchange().anyExchange()
             .access(new RequestInfoAuthorizationManager(roleService)).and()
             .anonymous(spec -> {

File: src/main/java/run/halo/app/theme/router/RadixRouterTree.java
Patch:
@@ -31,9 +31,7 @@ public class RadixRouterTree extends RadixTree<HandlerFunction<ServerResponse>>
     @Override
     public void insert(String key, HandlerFunction<ServerResponse> value)
         throws IllegalArgumentException {
-        // uri decode key to insert
-        String decodedKey = UriUtils.decode(key, StandardCharsets.UTF_8);
-        super.insert(decodedKey, value);
+        super.insert(key, value);
         if (log.isDebugEnabled()) {
             checkIndices();
         }

File: src/main/java/run/halo/app/theme/TemplateEngineManager.java
Patch:
@@ -100,7 +100,7 @@ private ISpringWebFluxTemplateEngine templateEngineGenerator(ThemeContext theme)
             thymeleafProperties.isRenderHiddenMarkersBeforeCheckboxes());
 
         var mainResolver = haloTemplateResolver();
-        mainResolver.setPrefix(theme.getPath() + "/templates/");
+        mainResolver.setPrefix(theme.getPath().resolve("templates") + "/");
         engine.addTemplateResolver(mainResolver);
         // replace StandardDialect with SpringStandardDialect
         engine.setDialect(new SpringStandardDialect() {

File: src/main/java/run/halo/app/theme/finders/impl/PostFinderImpl.java
Patch:
@@ -276,7 +276,9 @@ public Mono<ListResult<PostArchiveVo>> archives(Integer page, Integer size, Stri
                             .year(String.valueOf(key))
                             .months(monthArchives)
                             .build();
-                    }).toList();
+                    })
+                    .sorted(Comparator.comparing(PostArchiveVo::getYear).reversed())
+                    .toList();
                 return new ListResult<>(list.getPage(), list.getSize(), list.getTotal(),
                     postArchives);
             })

File: src/main/java/run/halo/app/theme/finders/impl/PostFinderImpl.java
Patch:
@@ -373,12 +373,12 @@ static Comparator<Post> defaultComparator() {
             post -> Objects.requireNonNullElse(post.getSpec().getPinned(), false);
         Function<Post, Integer> priority =
             post -> Objects.requireNonNullElse(post.getSpec().getPriority(), 0);
-        Function<Post, Instant> creationTimestamp =
-            post -> post.getMetadata().getCreationTimestamp();
+        Function<Post, Instant> publishTime =
+            post -> post.getSpec().getPublishTime();
         Function<Post, String> name = post -> post.getMetadata().getName();
         return Comparator.comparing(pinned)
             .thenComparing(priority)
-            .thenComparing(creationTimestamp)
+            .thenComparing(publishTime, Comparators.nullsLow())
             .thenComparing(name)
             .reversed();
     }

File: src/main/java/run/halo/app/theme/TemplateEngineManager.java
Patch:
@@ -18,7 +18,7 @@
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.infra.exception.NotFoundException;
 import run.halo.app.theme.dialect.HaloProcessorDialect;
-import run.halo.app.theme.engine.SpringWebFluxTemplateEngine;
+import run.halo.app.theme.engine.HaloTemplateEngine;
 import run.halo.app.theme.message.ThemeMessageResolver;
 
 /**
@@ -93,9 +93,8 @@ public Mono<Void> clearCache(String themeName) {
     }
 
     private ISpringWebFluxTemplateEngine templateEngineGenerator(ThemeContext theme) {
-        var engine = new SpringWebFluxTemplateEngine();
+        var engine = new HaloTemplateEngine(new ThemeMessageResolver(theme));
         engine.setEnableSpringELCompiler(thymeleafProperties.isEnableSpringElCompiler());
-        engine.setMessageResolver(new ThemeMessageResolver(theme));
         engine.setLinkBuilder(new ThemeLinkBuilder(theme, externalUrlSupplier));
         engine.setRenderHiddenMarkersBeforeCheckboxes(
             thymeleafProperties.isRenderHiddenMarkersBeforeCheckboxes());

File: src/main/java/run/halo/app/plugin/PluginProperties.java
Patch:
@@ -17,6 +17,7 @@
 @Data
 @ConfigurationProperties(prefix = "halo.plugin")
 public class PluginProperties {
+    public static final String GRADLE_LIBS_DIR = "build/libs";
 
     /**
      * Auto start plugin when main app is ready.
@@ -53,7 +54,7 @@ public class PluginProperties {
     /**
      * Extended Plugin Jar Directory.
      */
-    private List<String> libDirectories = new ArrayList<>();
+    private List<String> libDirectories = new ArrayList<>(List.of(GRADLE_LIBS_DIR));
 
     /**
      * Runtime Mode：development/deployment.

File: src/main/java/run/halo/app/core/extension/content/Post.java
Patch:
@@ -150,6 +150,8 @@ public static class PostStatus {
 
         private List<String> contributors;
 
+        private Instant lastModifyTime;
+
         @JsonIgnore
         public ConditionList getConditionsOrDefault() {
             if (this.conditions == null) {

File: src/main/java/run/halo/app/theme/finders/vo/CategoryTreeVo.java
Patch:
@@ -20,7 +20,7 @@
 @Builder
 @ToString
 @EqualsAndHashCode
-public class CategoryTreeVo implements VisualizableTreeNode<CategoryTreeVo> {
+public class CategoryTreeVo implements VisualizableTreeNode<CategoryTreeVo>, ExtensionVoOperator {
 
     private MetadataOperator metadata;
 

File: src/main/java/run/halo/app/theme/finders/vo/CategoryVo.java
Patch:
@@ -15,7 +15,7 @@
 @Value
 @Builder
 @EqualsAndHashCode
-public class CategoryVo {
+public class CategoryVo implements ExtensionVoOperator {
 
     MetadataOperator metadata;
 

File: src/main/java/run/halo/app/theme/finders/vo/CommentVo.java
Patch:
@@ -18,7 +18,7 @@
 @Value
 @Builder
 @EqualsAndHashCode
-public class CommentVo {
+public class CommentVo implements ExtensionVoOperator {
 
     @Schema(required = true)
     MetadataOperator metadata;

File: src/main/java/run/halo/app/theme/finders/vo/ListedPostVo.java
Patch:
@@ -19,7 +19,7 @@
 @SuperBuilder
 @ToString
 @EqualsAndHashCode
-public class ListedPostVo {
+public class ListedPostVo implements ExtensionVoOperator {
 
     private MetadataOperator metadata;
 

File: src/main/java/run/halo/app/theme/finders/vo/ListedSinglePageVo.java
Patch:
@@ -19,7 +19,7 @@
 @SuperBuilder
 @ToString
 @EqualsAndHashCode
-public class ListedSinglePageVo {
+public class ListedSinglePageVo implements ExtensionVoOperator {
 
     private MetadataOperator metadata;
 

File: src/main/java/run/halo/app/theme/finders/vo/MenuItemVo.java
Patch:
@@ -17,7 +17,7 @@
 @Data
 @ToString
 @Builder
-public class MenuItemVo implements VisualizableTreeNode<MenuItemVo> {
+public class MenuItemVo implements VisualizableTreeNode<MenuItemVo>, ExtensionVoOperator {
 
     MetadataOperator metadata;
 

File: src/main/java/run/halo/app/theme/finders/vo/MenuVo.java
Patch:
@@ -18,7 +18,7 @@
 @Value
 @ToString
 @Builder
-public class MenuVo {
+public class MenuVo implements ExtensionVoOperator {
 
     MetadataOperator metadata;
 

File: src/main/java/run/halo/app/theme/finders/vo/ReplyVo.java
Patch:
@@ -20,7 +20,7 @@
 @Builder
 @ToString
 @EqualsAndHashCode
-public class ReplyVo {
+public class ReplyVo implements ExtensionVoOperator {
 
     @Schema(required = true)
     MetadataOperator metadata;

File: src/main/java/run/halo/app/theme/finders/vo/TagVo.java
Patch:
@@ -10,7 +10,7 @@
  */
 @Value
 @Builder
-public class TagVo {
+public class TagVo implements ExtensionVoOperator {
 
     MetadataOperator metadata;
 

File: src/main/java/run/halo/app/theme/finders/vo/ThemeVo.java
Patch:
@@ -17,7 +17,7 @@
 @Value
 @Builder
 @ToString
-public class ThemeVo {
+public class ThemeVo implements ExtensionVoOperator {
 
     MetadataOperator metadata;
 

File: src/main/java/run/halo/app/theme/finders/vo/UserVo.java
Patch:
@@ -10,7 +10,7 @@
 
 @Value
 @Builder
-public class UserVo {
+public class UserVo implements ExtensionVoOperator {
     MetadataOperator metadata;
 
     User.UserSpec spec;

File: src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -93,7 +93,7 @@ Predicate<Post> postListPredicate(PostQuery query) {
         Predicate<Post> paramPredicate = post ->
             contains(query.getCategories(), post.getSpec().getCategories())
                 && contains(query.getTags(), post.getSpec().getTags())
-                && contains(query.getContributors(), post.getStatus().getContributors());
+                && contains(query.getContributors(), post.getStatusOrDefault().getContributors());
 
         String keyword = query.getKeyword();
         if (keyword != null) {
@@ -162,7 +162,7 @@ private Mono<ListedPost> getListedPost(Post post) {
             )
             .flatMap(lp -> setTags(post.getSpec().getTags(), lp))
             .flatMap(lp -> setCategories(post.getSpec().getCategories(), lp))
-            .flatMap(lp -> setContributors(post.getStatus().getContributors(), lp))
+            .flatMap(lp -> setContributors(post.getStatusOrDefault().getContributors(), lp))
             .flatMap(lp -> setOwner(post.getSpec().getOwner(), lp));
     }
 

File: src/main/java/run/halo/app/content/impl/SinglePageServiceImpl.java
Patch:
@@ -14,7 +14,6 @@
 import lombok.AllArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
-import org.springframework.context.ApplicationContext;
 import org.springframework.dao.OptimisticLockingFailureException;
 import org.springframework.security.core.context.ReactiveSecurityContextHolder;
 import org.springframework.security.core.context.SecurityContext;
@@ -60,8 +59,6 @@ public class SinglePageServiceImpl implements SinglePageService {
 
     private final CounterService counterService;
 
-    private final ApplicationContext applicationContext;
-
     @Override
     public Mono<ListResult<ListedSinglePage>> list(SinglePageQuery query) {
         Comparator<SinglePage> comparator =

File: src/main/java/run/halo/app/extension/GroupVersionKind.java
Patch:
@@ -49,7 +49,7 @@ public static GroupVersionKind fromAPIVersionAndKind(String apiVersion, String k
         return new GroupVersionKind(gv.group(), gv.version(), kind);
     }
 
-    public static <T extends AbstractExtension> GroupVersionKind fromExtension(Class<T> extension) {
+    public static <T extends Extension> GroupVersionKind fromExtension(Class<T> extension) {
         GVK gvk = extension.getAnnotation(GVK.class);
         return new GroupVersionKind(gvk.group(), gvk.version(), gvk.kind());
     }

File: src/main/java/run/halo/app/extension/JSONExtensionConverter.java
Patch:
@@ -62,8 +62,8 @@ public <E extends Extension> ExtensionStore convertTo(E extension) {
             if (!validation.isValid()) {
                 log.debug("Failed to validate Extension: {}, and errors were: {}",
                     extension.getClass(), validation.results());
-                throw new SchemaViolationException("Failed to validate Extension "
-                    + extension.getClass(), validation.results());
+                throw new SchemaViolationException(extension.groupVersionKind(),
+                    validation.results());
             }
 
             var version = extension.getMetadata().getVersion();

File: src/main/java/run/halo/app/extension/SchemeManager.java
Patch:
@@ -40,7 +40,7 @@ default Optional<Scheme> fetch(@NonNull GroupVersionKind gvk) {
     @NonNull
     default Scheme get(@NonNull GroupVersionKind gvk) {
         return fetch(gvk).orElseThrow(
-            () -> new SchemeNotFoundException("Scheme was not found for " + gvk));
+            () -> new SchemeNotFoundException(gvk));
     }
 
     @NonNull

File: src/main/java/run/halo/app/infra/exception/NotFoundException.java
Patch:
@@ -6,7 +6,7 @@
  * @author guqing
  * @since 2.0.0
  */
-public class NotFoundException extends HaloException {
+public class NotFoundException extends RuntimeException {
     public NotFoundException(String message) {
         super(message);
     }

File: src/main/java/run/halo/app/infra/exception/ThemeUninstallException.java
Patch:
@@ -4,7 +4,7 @@
  * @author guqing
  * @since 2.0.0
  */
-public class ThemeUninstallException extends HaloException {
+public class ThemeUninstallException extends RuntimeException {
 
     public ThemeUninstallException(String message) {
         super(message);

File: src/main/java/run/halo/app/infra/utils/FileUtils.java
Patch:
@@ -194,7 +194,8 @@ public static void checkDirectoryTraversal(@NonNull Path parentPath,
             return;
         }
 
-        throw new AccessDeniedException(pathToCheck.toString());
+        throw new AccessDeniedException("Directory traversal detected: " + pathToCheck,
+            "problemDetail.directoryTraversal", new Object[] {parentPath, pathToCheck});
     }
 
     /**

File: src/test/java/run/halo/app/extension/DefaultSchemeManagerTest.java
Patch:
@@ -20,7 +20,6 @@
 import run.halo.app.extension.SchemeWatcherManager.SchemeRegistered;
 import run.halo.app.extension.SchemeWatcherManager.SchemeUnregistered;
 import run.halo.app.extension.SchemeWatcherManager.SchemeWatcher;
-import run.halo.app.extension.exception.ExtensionException;
 import run.halo.app.extension.exception.SchemeNotFoundException;
 
 @ExtendWith(MockitoExtension.class)
@@ -37,7 +36,7 @@ void shouldThrowExceptionWhenNoGvkAnnotation() {
         class WithoutGvkExtension extends AbstractExtension {
         }
 
-        assertThrows(ExtensionException.class,
+        assertThrows(IllegalArgumentException.class,
             () -> schemeManager.register(WithoutGvkExtension.class));
     }
 

File: src/test/java/run/halo/app/extension/SchemeTest.java
Patch:
@@ -6,7 +6,6 @@
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import org.junit.jupiter.api.Test;
-import run.halo.app.extension.exception.ExtensionException;
 
 class SchemeTest {
 
@@ -40,9 +39,9 @@ void shouldThrowExceptionWhenTypeHasNoGvkAnno() {
         class NoGvkExtension extends AbstractExtension {
         }
 
-        assertThrows(ExtensionException.class,
+        assertThrows(IllegalArgumentException.class,
             () -> Scheme.getGvkFromType(NoGvkExtension.class));
-        assertThrows(ExtensionException.class,
+        assertThrows(IllegalArgumentException.class,
             () -> Scheme.buildFromType(NoGvkExtension.class));
     }
 

File: src/test/java/run/halo/app/extension/router/ExtensionDeleteHandlerTest.java
Patch:
@@ -10,6 +10,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static run.halo.app.extension.GroupVersionKind.fromExtension;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -92,7 +93,8 @@ void shouldReturnErrorWhenExtensionNotFound() {
             .pathVariable("name", "my-fake")
             .build();
         when(client.get(FakeExtension.class, "my-fake")).thenReturn(
-            Mono.error(new ExtensionNotFoundException()));
+            Mono.error(
+                new ExtensionNotFoundException(fromExtension(FakeExtension.class), "my-fake")));
 
         var scheme = Scheme.buildFromType(FakeExtension.class);
         var deleteHandler = new ExtensionDeleteHandler(scheme, client);

File: src/test/java/run/halo/app/extension/router/ExtensionGetHandlerTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.when;
+import static run.halo.app.extension.GroupVersionKind.fromExtension;
 
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
@@ -64,8 +65,8 @@ void shouldThrowExceptionWhenExtensionNotFound() {
         var serverRequest = MockServerRequest.builder()
             .pathVariable("name", "my-fake")
             .build();
-        when(client.get(eq(FakeExtension.class), eq("my-fake"))).thenReturn(
-            Mono.error(new ExtensionNotFoundException()));
+        when(client.get(eq(FakeExtension.class), eq("my-fake"))).thenReturn(Mono.error(
+            new ExtensionNotFoundException(fromExtension(FakeExtension.class), "my-fake")));
 
         Mono<ServerResponse> responseMono = getHandler.handle(serverRequest);
         StepVerifier.create(responseMono)

File: src/test/java/run/halo/app/security/DefaultUserDetailServiceTest.java
Patch:
@@ -5,6 +5,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static run.halo.app.extension.GroupVersionKind.fromExtension;
 
 import java.util.List;
 import java.util.stream.Collectors;
@@ -163,7 +164,8 @@ void shouldFindUserDetailsByExistingUsernameButWithoutAnyRoles() {
     @Test
     void shouldNotFindUserDetailsByNonExistingUsername() {
         when(userService.getUser("non-existing-user")).thenReturn(
-            Mono.error(() -> new ExtensionNotFoundException("The user was not found")));
+            Mono.error(() -> new ExtensionNotFoundException(
+                fromExtension(run.halo.app.core.extension.User.class), "non-existing-user")));
 
         var userDetailsMono = userDetailService.findByUsername("non-existing-user");
 

File: src/test/java/run/halo/app/security/authorization/AuthorizationTest.java
Patch:
@@ -10,6 +10,7 @@
 import static org.springframework.web.reactive.function.server.RequestPredicates.PUT;
 import static org.springframework.web.reactive.function.server.RequestPredicates.accept;
 import static org.springframework.web.reactive.function.server.RouterFunctions.route;
+import static run.halo.app.extension.GroupVersionKind.fromExtension;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -92,7 +93,8 @@ void accessProtectedApiWithSufficientRole() {
 
         when(roleService.getMonoRole("post.read")).thenReturn(Mono.just(role));
         when(roleService.getMonoRole("authenticated")).thenReturn(
-            Mono.error(ExtensionNotFoundException::new));
+            Mono.error(
+                () -> new ExtensionNotFoundException(fromExtension(Role.class), "authenticated")));
 
         var token = LoginUtils.login(webClient, "user", "password").block();
         webClient.get().uri("/apis/fake.halo.run/v1/posts")

File: src/main/java/run/halo/app/core/extension/Theme.java
Patch:
@@ -25,6 +25,8 @@ public class Theme extends AbstractExtension {
 
     public static final String KIND = "Theme";
 
+    public static final String THEME_NAME_LABEL = "theme.halo.run/theme-name";
+
     @Schema(required = true)
     private ThemeSpec spec;
 

File: src/main/java/run/halo/app/infra/SchemeInitializer.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.context.ApplicationListener;
 import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Component;
+import run.halo.app.core.extension.AnnotationSetting;
 import run.halo.app.core.extension.Counter;
 import run.halo.app.core.extension.Menu;
 import run.halo.app.core.extension.MenuItem;
@@ -57,6 +58,7 @@ public void onApplicationEvent(@NonNull ApplicationStartedEvent event) {
         schemeManager.register(User.class);
         schemeManager.register(ReverseProxy.class);
         schemeManager.register(Setting.class);
+        schemeManager.register(AnnotationSetting.class);
         schemeManager.register(ConfigMap.class);
         schemeManager.register(Theme.class);
         schemeManager.register(Menu.class);

File: src/main/java/run/halo/app/theme/finders/CategoryFinder.java
Patch:
@@ -26,4 +26,6 @@ public interface CategoryFinder {
     Flux<CategoryVo> listAll();
 
     Flux<CategoryTreeVo> listAsTree();
+
+    Flux<CategoryTreeVo> listAsTree(String name);
 }

File: src/main/java/run/halo/app/core/extension/theme/ThemeService.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.InputStream;
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.Theme;
+import run.halo.app.extension.ConfigMap;
 
 public interface ThemeService {
 
@@ -11,6 +12,8 @@ public interface ThemeService {
     Mono<Theme> upgrade(String themeName, InputStream is);
 
     Mono<Theme> reloadTheme(String name);
+
+    Mono<ConfigMap> resetSettingConfig(String name);
     // TODO Migrate other useful methods in ThemeEndpoint in the future.
 
 }

File: src/test/java/run/halo/app/core/extension/reconciler/ThemeReconcilerTest.java
Patch:
@@ -51,6 +51,7 @@ class ThemeReconcilerTest {
     @Mock
     private HaloProperties haloProperties;
 
+    @Mock
     private File defaultTheme;
 
     private Path tempDirectory;

File: src/main/java/run/halo/app/theme/finders/impl/PostFinderImpl.java
Patch:
@@ -264,12 +264,13 @@ public Mono<ListResult<PostArchiveVo>> archives(Integer page, Integer size, Stri
                         // convert to archive year month value objects
                         List<PostArchiveYearMonthVo> monthArchives = monthPosts.entrySet()
                             .stream()
-                            .sorted(Map.Entry.comparingByKey())
                             .map(monthEntry -> PostArchiveYearMonthVo.builder()
                                 .posts(monthEntry.getValue())
                                 .month(monthEntry.getKey())
                                 .build()
                             )
+                            .sorted(
+                                Comparator.comparing(PostArchiveYearMonthVo::getMonth).reversed())
                             .toList();
                         return PostArchiveVo.builder()
                             .year(String.valueOf(key))

File: src/main/java/run/halo/app/content/comment/ReplyServiceImpl.java
Patch:
@@ -62,7 +62,8 @@ public Mono<Reply> create(String commentName, Reply reply) {
                         }
                         reply.getSpec().setApproved(
                             Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));
-                        reply.getSpec().setHidden(!reply.getSpec().getApproved());
+                        // fix https://github.com/halo-dev/halo/issues/2951
+                        reply.getSpec().setHidden(false);
 
                         if (BooleanUtils.isTrue(reply.getSpec().getApproved())
                             && reply.getSpec().getApprovedTime() == null) {

File: src/main/java/run/halo/app/plugin/BasePlugin.java
Patch:
@@ -2,6 +2,7 @@
 
 import lombok.extern.slf4j.Slf4j;
 import org.pf4j.Plugin;
+import org.pf4j.PluginManager;
 import org.pf4j.PluginWrapper;
 
 /**
@@ -18,7 +19,7 @@ public BasePlugin(PluginWrapper wrapper) {
         super(wrapper);
     }
 
-    private HaloPluginManager getPluginManager() {
-        return (HaloPluginManager) getWrapper().getPluginManager();
+    private PluginManager getPluginManager() {
+        return getWrapper().getPluginManager();
     }
 }

File: src/main/java/run/halo/app/core/extension/User.java
Patch:
@@ -71,6 +71,8 @@ public static class UserStatus {
 
         private Instant lastLoginAt;
 
+        private String permalink;
+
         private List<LoginHistory> loginHistories;
 
     }

File: src/main/java/run/halo/app/theme/DefaultTemplateEnum.java
Patch:
@@ -19,7 +19,9 @@ public enum DefaultTemplateEnum {
 
     TAGS("tags"),
 
-    SINGLE_PAGE("page");
+    SINGLE_PAGE("page"),
+
+    AUTHOR("author");
 
     private final String value;
 

File: src/main/java/run/halo/app/theme/finders/ContributorFinder.java
Patch:
@@ -4,14 +4,14 @@
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.User;
-import run.halo.app.theme.finders.vo.Contributor;
+import run.halo.app.theme.finders.vo.ContributorVo;
 
 /**
  * A finder for {@link User}.
  */
 public interface ContributorFinder {
 
-    Mono<Contributor> getContributor(String name);
+    Mono<ContributorVo> getContributor(String name);
 
-    Flux<Contributor> getContributors(List<String> names);
+    Flux<ContributorVo> getContributors(List<String> names);
 }

File: src/main/java/run/halo/app/theme/finders/PostFinder.java
Patch:
@@ -35,6 +35,9 @@ Mono<ListResult<ListedPostVo>> listByCategory(@Nullable Integer page, @Nullable
     Mono<ListResult<ListedPostVo>> listByTag(@Nullable Integer page, @Nullable Integer size,
         String tag);
 
+    Mono<ListResult<ListedPostVo>> listByOwner(@Nullable Integer page, @Nullable Integer size,
+        String owner);
+
     Mono<ListResult<PostArchiveVo>> archives(Integer page, Integer size);
 
     Mono<ListResult<PostArchiveVo>> archives(Integer page, Integer size, String year);

File: src/main/java/run/halo/app/theme/finders/vo/ListedPostVo.java
Patch:
@@ -31,9 +31,9 @@ public class ListedPostVo {
 
     private List<TagVo> tags;
 
-    private List<Contributor> contributors;
+    private List<ContributorVo> contributors;
 
-    private Contributor owner;
+    private ContributorVo owner;
 
     private StatsVo stats;
 

File: src/main/java/run/halo/app/theme/finders/vo/ListedSinglePageVo.java
Patch:
@@ -29,9 +29,9 @@ public class ListedSinglePageVo {
 
     private StatsVo stats;
 
-    private List<Contributor> contributors;
+    private List<ContributorVo> contributors;
 
-    private Contributor owner;
+    private ContributorVo owner;
 
     /**
      * Convert {@link SinglePage} to {@link ListedSinglePageVo}.

File: src/main/java/run/halo/app/theme/router/PermalinkPatternProvider.java
Patch:
@@ -50,7 +50,7 @@ private SystemSetting.ThemeRouteRules getPermalinkRules() {
     public String getPattern(DefaultTemplateEnum defaultTemplateEnum) {
         SystemSetting.ThemeRouteRules permalinkRules = getPermalinkRules();
         return switch (defaultTemplateEnum) {
-            case INDEX, SINGLE_PAGE -> null;
+            case INDEX, SINGLE_PAGE, AUTHOR -> null;
             case POST -> permalinkRules.getPost();
             case ARCHIVES -> permalinkRules.getArchives();
             case CATEGORY, CATEGORIES -> permalinkRules.getCategories();

File: src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java
Patch:
@@ -231,6 +231,9 @@ private void cleanUpResources(Plugin plugin) {
         // stop and unload plugin, see also PluginBeforeStopSyncListener
         haloPluginManager.stopPlugin(pluginWrapper.getPluginId());
         haloPluginManager.unloadPlugin(pluginWrapper.getPluginId());
+        // delete initial reverse proxy
+        client.fetch(ReverseProxy.class, initialReverseProxyName(pluginWrapper.getPluginId()))
+            .ifPresent(client::delete);
         // delete plugin resources
         if (RuntimeMode.DEPLOYMENT.equals(pluginWrapper.getRuntimeMode())) {
             // delete plugin file

File: src/main/java/run/halo/app/core/extension/reconciler/ReverseProxyReconciler.java
Patch:
@@ -60,7 +60,7 @@ private void registerReverseProxy(ReverseProxy reverseProxy) {
 
     private void cleanUpResources(ReverseProxy reverseProxy) {
         String pluginId = getPluginId(reverseProxy);
-        routerFunctionRegistry.remove(pluginId).block();
+        routerFunctionRegistry.remove(pluginId, reverseProxy.getMetadata().getName()).block();
     }
 
     private void addFinalizerIfNecessary(ReverseProxy oldReverseProxy) {

File: src/main/java/run/halo/app/core/extension/content/Constant.java
Patch:
@@ -6,4 +6,5 @@ public enum Constant {
     public static final String GROUP = "content.halo.run";
     public static final String VERSION = "v1alpha1";
 
+    public static final String LAST_READ_TIME_ANNO = "content.halo.run/last-read-time";
 }

File: src/main/java/run/halo/app/metrics/CounterService.java
Patch:
@@ -9,7 +9,7 @@
  */
 public interface CounterService {
 
-    Counter getByName(String counterName);
+    Mono<Counter> getByName(String counterName);
 
     Mono<Counter> deleteByName(String counterName);
 }

File: src/main/java/run/halo/app/metrics/VisitLogWriter.java
Patch:
@@ -96,7 +96,7 @@ public void destroy() throws Exception {
         this.started = false;
         interruptThread = true;
         asyncLogWriter.dispose();
-        executorService.shutdown();
+        executorService.shutdownNow();
     }
 
     static class AsyncLogWriter implements Disposable {

File: src/main/java/run/halo/app/theme/router/strategy/SinglePageRouteStrategy.java
Patch:
@@ -42,6 +42,7 @@ public HandlerFunction<ServerResponse> getHandler(SystemSetting.ThemeRouteRules
         String name) {
         return request -> {
             Map<String, Object> model = new HashMap<>();
+            model.put("name", name);
             model.put("groupVersionKind", gvk);
             model.put("plural", getPlural());
             model.put(ModelConst.TEMPLATE_ID, DefaultTemplateEnum.SINGLE_PAGE.getValue());

File: src/main/java/run/halo/app/core/extension/Role.java
Patch:
@@ -32,6 +32,9 @@ public class Role extends AbstractExtension {
         "rbac.authorization.halo.run/dependency-rules";
     public static final String ROLE_DEPENDENCIES_ANNO = "rbac.authorization.halo.run/dependencies";
     public static final String UI_PERMISSIONS_ANNO = "rbac.authorization.halo.run/ui-permissions";
+
+    public static final String SYSTEM_RESERVED_LABELS =
+        "rbac.authorization.halo.run/system-reserved";
     public static final String UI_PERMISSIONS_AGGREGATED_ANNO =
         "rbac.authorization.halo.run/ui-permissions-aggregated";
 

File: src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -165,23 +165,23 @@ private Mono<ListedPost> getListedPost(Post post) {
 
     private Mono<ListedPost> setTags(List<String> tagNames, ListedPost post) {
         return listTags(tagNames)
-            .collectSortedList()
+            .collectList()
             .doOnNext(post::setTags)
             .map(tags -> post)
             .switchIfEmpty(Mono.defer(() -> Mono.just(post)));
     }
 
     private Mono<ListedPost> setCategories(List<String> categoryNames, ListedPost post) {
         return listCategories(categoryNames)
-            .collectSortedList()
+            .collectList()
             .doOnNext(post::setCategories)
             .map(categories -> post)
             .switchIfEmpty(Mono.defer(() -> Mono.just(post)));
     }
 
     private Mono<ListedPost> setContributors(List<String> contributorNames, ListedPost post) {
         return listContributors(contributorNames)
-            .collectSortedList()
+            .collectList()
             .doOnNext(post::setContributors)
             .map(contributors -> post)
             .switchIfEmpty(Mono.defer(() -> Mono.just(post)));

File: src/main/java/run/halo/app/infra/properties/HaloProperties.java
Patch:
@@ -45,4 +45,7 @@ public class HaloProperties {
 
     @Valid
     private final ThemeProperties theme = new ThemeProperties();
+
+    @Valid
+    private final AttachmentProperties attachment = new AttachmentProperties();
 }

File: src/main/java/run/halo/app/plugin/YamlPluginDescriptorFinder.java
Patch:
@@ -46,14 +46,16 @@ public PluginDescriptor find(Path pluginPath) {
     private DefaultPluginDescriptor convert(Plugin plugin) {
         String pluginId = plugin.getMetadata().getName();
         Plugin.PluginSpec spec = plugin.getSpec();
+        Plugin.PluginAuthor author = spec.getAuthor();
+        String provider = (author == null ? StringUtils.EMPTY : author.getName());
 
         DefaultPluginDescriptor defaultPluginDescriptor =
             new DefaultPluginDescriptor(pluginId,
                 spec.getDescription(),
                 BasePlugin.class.getName(),
                 spec.getVersion(),
                 spec.getRequires(),
-                spec.getAuthor(),
+                provider,
                 joinLicense(spec.getLicense()));
         // add dependencies
         spec.getPluginDependencies().forEach((pluginDepName, versionRequire) -> {

File: src/main/java/run/halo/app/content/ContentRequest.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 import java.util.HashMap;
 import org.apache.commons.lang3.StringUtils;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.Ref;
 

File: src/main/java/run/halo/app/content/ContentService.java
Patch:
@@ -2,7 +2,7 @@
 
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.extension.Ref;
 
 /**

File: src/main/java/run/halo/app/content/ListedPost.java
Patch:
@@ -3,9 +3,9 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 import java.util.List;
 import lombok.Data;
-import run.halo.app.core.extension.Category;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Category;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Tag;
 
 /**
  * An aggregate object of {@link Post} and {@link Category}

File: src/main/java/run/halo/app/content/ListedSinglePage.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 import java.util.List;
 import lombok.Data;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.SinglePage;
 
 
 /**

File: src/main/java/run/halo/app/content/PostQuery.java
Patch:
@@ -6,7 +6,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.lang.Nullable;
 import org.springframework.util.MultiValueMap;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.router.IListRequest;
 
 /**

File: src/main/java/run/halo/app/content/PostRequest.java
Patch:
@@ -1,7 +1,7 @@
 package run.halo.app.content;
 
 import io.swagger.v3.oas.annotations.media.Schema;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.Ref;
 
 /**

File: src/main/java/run/halo/app/content/PostService.java
Patch:
@@ -1,7 +1,7 @@
 package run.halo.app.content;
 
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ListResult;
 
 /**

File: src/main/java/run/halo/app/content/PostSorter.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.Objects;
 import java.util.function.Function;
 import org.springframework.util.comparator.Comparators;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 
 /**
  * A sorter for {@link Post}.

File: src/main/java/run/halo/app/content/SinglePageQuery.java
Patch:
@@ -6,8 +6,8 @@
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.lang.Nullable;
 import org.springframework.util.MultiValueMap;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.router.IListRequest;
 
 /**

File: src/main/java/run/halo/app/content/SinglePageRequest.java
Patch:
@@ -1,7 +1,7 @@
 package run.halo.app.content;
 
 import io.swagger.v3.oas.annotations.media.Schema;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.Ref;
 
 /**

File: src/main/java/run/halo/app/content/SinglePageService.java
Patch:
@@ -1,7 +1,7 @@
 package run.halo.app.content;
 
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.ListResult;
 
 /**

File: src/main/java/run/halo/app/content/SinglePageSorter.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.Objects;
 import java.util.function.Function;
 import org.springframework.util.comparator.Comparators;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.SinglePage;
 
 /**
  * A sorter for {@link SinglePage}.

File: src/main/java/run/halo/app/content/comment/CommentEmailOwner.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.Map;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.util.Assert;
-import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.content.Comment;
 
 /**
  * <p>The creator info of the comment.</p>

File: src/main/java/run/halo/app/content/comment/CommentRequest.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 import java.util.UUID;
 import lombok.Data;
-import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.content.Comment;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.Ref;
 

File: src/main/java/run/halo/app/content/comment/CommentService.java
Patch:
@@ -1,7 +1,7 @@
 package run.halo.app.content.comment;
 
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.content.Comment;
 import run.halo.app.extension.ListResult;
 
 /**

File: src/main/java/run/halo/app/content/comment/CommentServiceImpl.java
Patch:
@@ -13,8 +13,8 @@
 import org.springframework.stereotype.Component;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Comment;
 import run.halo.app.core.extension.User;
+import run.halo.app.core.extension.content.Comment;
 import run.halo.app.extension.Extension;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;

File: src/main/java/run/halo/app/content/comment/CommentSorter.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.Objects;
 import java.util.function.Function;
 import org.springframework.util.comparator.Comparators;
-import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.content.Comment;
 
 /**
  * Comment sorter.

File: src/main/java/run/halo/app/content/comment/ListedComment.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 import lombok.Builder;
 import lombok.Value;
-import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.content.Comment;
 import run.halo.app.extension.Extension;
 
 /**

File: src/main/java/run/halo/app/content/comment/ListedReply.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 import lombok.Builder;
 import lombok.Value;
-import run.halo.app.core.extension.Reply;
+import run.halo.app.core.extension.content.Reply;
 
 /**
  * Listed reply for {@link Reply}.

File: src/main/java/run/halo/app/content/comment/OwnerInfo.java
Patch:
@@ -3,8 +3,8 @@
 import lombok.Builder;
 import lombok.Value;
 import org.apache.commons.lang3.StringUtils;
-import run.halo.app.core.extension.Comment;
 import run.halo.app.core.extension.User;
+import run.halo.app.core.extension.content.Comment;
 
 /**
  * Comment owner info.

File: src/main/java/run/halo/app/content/comment/PostCommentSubject.java
Patch:
@@ -3,7 +3,7 @@
 import org.springframework.stereotype.Component;
 import org.springframework.util.Assert;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Ref;

File: src/main/java/run/halo/app/content/comment/ReplyQuery.java
Patch:
@@ -3,10 +3,11 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.util.MultiValueMap;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.router.IListRequest;
 
 /**
- * Query criteria for {@link run.halo.app.core.extension.Reply} list.
+ * Query criteria for {@link Reply} list.
  *
  * @author guqing
  * @since 2.0.0

File: src/main/java/run/halo/app/content/comment/ReplyRequest.java
Patch:
@@ -3,7 +3,7 @@
 import io.swagger.v3.oas.annotations.media.Schema;
 import java.util.UUID;
 import lombok.Data;
-import run.halo.app.core.extension.Reply;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.Metadata;
 
 /**

File: src/main/java/run/halo/app/content/comment/ReplyService.java
Patch:
@@ -1,7 +1,7 @@
 package run.halo.app.content.comment;
 
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Reply;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ListResult;
 
 /**

File: src/main/java/run/halo/app/content/comment/ReplyServiceImpl.java
Patch:
@@ -11,9 +11,9 @@
 import org.springframework.stereotype.Service;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Comment;
-import run.halo.app.core.extension.Reply;
 import run.halo.app.core.extension.User;
+import run.halo.app.core.extension.content.Comment;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.Extension;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;

File: src/main/java/run/halo/app/content/comment/SinglePageCommentSubject.java
Patch:
@@ -3,7 +3,7 @@
 import org.springframework.stereotype.Component;
 import org.springframework.util.Assert;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Ref;

File: src/main/java/run/halo/app/content/impl/ContentServiceImpl.java
Patch:
@@ -15,7 +15,7 @@
 import run.halo.app.content.ContentRequest;
 import run.halo.app.content.ContentService;
 import run.halo.app.content.ContentWrapper;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Ref;

File: src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -32,11 +32,11 @@
 import run.halo.app.content.PostService;
 import run.halo.app.content.PostSorter;
 import run.halo.app.content.Stats;
-import run.halo.app.core.extension.Category;
 import run.halo.app.core.extension.Counter;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Tag;
 import run.halo.app.core.extension.User;
+import run.halo.app.core.extension.content.Category;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Ref;

File: src/main/java/run/halo/app/content/impl/SinglePageServiceImpl.java
Patch:
@@ -34,9 +34,9 @@
 import run.halo.app.content.SinglePageSorter;
 import run.halo.app.content.Stats;
 import run.halo.app.core.extension.Counter;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.SinglePage;
 import run.halo.app.core.extension.User;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Ref;

File: src/main/java/run/halo/app/content/permalinks/CategoryPermalinkPolicy.java
Patch:
@@ -5,7 +5,7 @@
 import java.nio.charset.StandardCharsets;
 import org.springframework.context.ApplicationContext;
 import org.springframework.stereotype.Component;
-import run.halo.app.core.extension.Category;
+import run.halo.app.core.extension.content.Category;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.infra.utils.PathUtils;

File: src/main/java/run/halo/app/content/permalinks/PostPermalinkPolicy.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.Properties;
 import org.springframework.context.ApplicationContext;
 import org.springframework.stereotype.Component;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.infra.utils.PathUtils;

File: src/main/java/run/halo/app/content/permalinks/TagPermalinkPolicy.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.context.ApplicationContext;
 import org.springframework.stereotype.Component;
 import org.springframework.web.util.UriUtils;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.infra.utils.PathUtils;

File: src/main/java/run/halo/app/core/extension/content/Reply.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.core.extension;
+package run.halo.app.core.extension.content;
 
 import io.swagger.v3.oas.annotations.media.Schema;
 import lombok.Data;
@@ -14,8 +14,8 @@
  */
 @Data
 @ToString(callSuper = true)
-@GVK(group = "content.halo.run", version = "v1alpha1",
-    kind = Reply.KIND, plural = "replies", singular = "reply")
+@GVK(group = Constant.GROUP, version = Constant.VERSION, kind = Reply.KIND,
+    plural = "replies", singular = "reply")
 @EqualsAndHashCode(callSuper = true)
 public class Reply extends AbstractExtension {
 

File: src/main/java/run/halo/app/core/extension/content/Snapshot.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.core.extension;
+package run.halo.app.core.extension.content;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.swagger.v3.oas.annotations.media.Schema;
@@ -23,8 +23,8 @@
  */
 @Data
 @ToString(callSuper = true)
-@GVK(group = "content.halo.run", version = "v1alpha1",
-    kind = Snapshot.KIND, plural = "snapshots", singular = "snapshot")
+@GVK(group = Constant.GROUP, version = Constant.VERSION, kind = Snapshot.KIND,
+    plural = "snapshots", singular = "snapshot")
 @EqualsAndHashCode(callSuper = true)
 public class Snapshot extends AbstractExtension {
     public static final String KIND = "Snapshot";

File: src/main/java/run/halo/app/core/extension/endpoint/CommentEndpoint.java
Patch:
@@ -20,8 +20,8 @@
 import run.halo.app.content.comment.ListedComment;
 import run.halo.app.content.comment.ReplyRequest;
 import run.halo.app.content.comment.ReplyService;
-import run.halo.app.core.extension.Comment;
-import run.halo.app.core.extension.Reply;
+import run.halo.app.core.extension.content.Comment;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.router.QueryParamBuildUtil;
 import run.halo.app.infra.utils.HaloUtils;

File: src/main/java/run/halo/app/core/extension/endpoint/PostEndpoint.java
Patch:
@@ -26,7 +26,7 @@
 import run.halo.app.content.PostQuery;
 import run.halo.app.content.PostRequest;
 import run.halo.app.content.PostService;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.event.post.PostRecycledEvent;
 import run.halo.app.event.post.PostUnpublishedEvent;
 import run.halo.app.extension.ExtensionUtil;

File: src/main/java/run/halo/app/core/extension/endpoint/ReplyEndpoint.java
Patch:
@@ -11,7 +11,7 @@
 import run.halo.app.content.comment.ListedReply;
 import run.halo.app.content.comment.ReplyQuery;
 import run.halo.app.content.comment.ReplyService;
-import run.halo.app.core.extension.Reply;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.router.QueryParamBuildUtil;
 

File: src/main/java/run/halo/app/core/extension/endpoint/SinglePageEndpoint.java
Patch:
@@ -24,8 +24,8 @@
 import run.halo.app.content.SinglePageQuery;
 import run.halo.app.content.SinglePageRequest;
 import run.halo.app.content.SinglePageService;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;

File: src/main/java/run/halo/app/core/extension/endpoint/StatsEndpoint.java
Patch:
@@ -10,8 +10,8 @@
 import org.springframework.web.reactive.function.server.ServerResponse;
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.Counter;
-import run.halo.app.core.extension.Post;
 import run.halo.app.core.extension.User;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ReactiveExtensionClient;
 
 /**

File: src/main/java/run/halo/app/core/extension/reconciler/CategoryReconciler.java
Patch:
@@ -14,8 +14,8 @@
 import org.springframework.lang.Nullable;
 import org.springframework.stereotype.Component;
 import run.halo.app.content.permalinks.CategoryPermalinkPolicy;
-import run.halo.app.core.extension.Category;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Category;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;

File: src/main/java/run/halo/app/core/extension/reconciler/CommentReconciler.java
Patch:
@@ -14,8 +14,8 @@
 import java.util.stream.Collectors;
 import org.springframework.lang.Nullable;
 import org.springframework.stereotype.Component;
-import run.halo.app.core.extension.Comment;
-import run.halo.app.core.extension.Reply;
+import run.halo.app.core.extension.content.Comment;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.extension.Ref;

File: src/main/java/run/halo/app/core/extension/reconciler/PostReconciler.java
Patch:
@@ -15,9 +15,9 @@
 import run.halo.app.content.ContentService;
 import run.halo.app.content.PostService;
 import run.halo.app.content.permalinks.PostPermalinkPolicy;
-import run.halo.app.core.extension.Comment;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Comment;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.event.post.PostPublishedEvent;
 import run.halo.app.event.post.PostUnpublishedEvent;
 import run.halo.app.extension.ExtensionClient;

File: src/main/java/run/halo/app/core/extension/reconciler/TagReconciler.java
Patch:
@@ -7,8 +7,8 @@
 import java.util.Set;
 import org.springframework.stereotype.Component;
 import run.halo.app.content.permalinks.TagPermalinkPolicy;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;

File: src/main/java/run/halo/app/search/IndicesServiceImpl.java
Patch:
@@ -3,7 +3,7 @@
 import org.springframework.stereotype.Service;
 import reactor.core.Exceptions;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.plugin.extensionpoint.ExtensionGetter;
 import run.halo.app.search.post.PostDoc;
 import run.halo.app.search.post.PostSearchService;

File: src/main/java/run/halo/app/theme/endpoint/CommentFinderEndpoint.java
Patch:
@@ -24,8 +24,8 @@
 import run.halo.app.content.comment.CommentService;
 import run.halo.app.content.comment.ReplyRequest;
 import run.halo.app.content.comment.ReplyService;
-import run.halo.app.core.extension.Comment;
-import run.halo.app.core.extension.Reply;
+import run.halo.app.core.extension.content.Comment;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.core.extension.endpoint.CustomEndpoint;
 import run.halo.app.extension.GroupVersion;
 import run.halo.app.extension.ListResult;

File: src/main/java/run/halo/app/theme/finders/CategoryFinder.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.lang.Nullable;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Category;
+import run.halo.app.core.extension.content.Category;
 import run.halo.app.extension.ListResult;
 import run.halo.app.theme.finders.vo.CategoryTreeVo;
 import run.halo.app.theme.finders.vo.CategoryVo;

File: src/main/java/run/halo/app/theme/finders/CommentFinder.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.lang.Nullable;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.content.Comment;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.Ref;
 import run.halo.app.theme.finders.vo.CommentVo;

File: src/main/java/run/halo/app/theme/finders/PostFinder.java
Patch:
@@ -3,7 +3,7 @@
 import org.springframework.lang.Nullable;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ListResult;
 import run.halo.app.theme.finders.vo.ContentVo;
 import run.halo.app.theme.finders.vo.ListedPostVo;

File: src/main/java/run/halo/app/theme/finders/SinglePageFinder.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.lang.Nullable;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.ListResult;
 import run.halo.app.theme.finders.vo.ContentVo;
 import run.halo.app.theme.finders.vo.ListedSinglePageVo;

File: src/main/java/run/halo/app/theme/finders/TagFinder.java
Patch:
@@ -4,7 +4,7 @@
 import org.springframework.lang.Nullable;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.ListResult;
 import run.halo.app.theme.finders.vo.TagVo;
 

File: src/main/java/run/halo/app/theme/finders/impl/CategoryFinderImpl.java
Patch:
@@ -12,7 +12,7 @@
 import org.apache.commons.lang3.ObjectUtils;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Category;
+import run.halo.app.core.extension.content.Category;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.theme.finders.CategoryFinder;

File: src/main/java/run/halo/app/theme/finders/impl/CommentFinderImpl.java
Patch:
@@ -11,9 +11,9 @@
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import run.halo.app.content.comment.OwnerInfo;
-import run.halo.app.core.extension.Comment;
-import run.halo.app.core.extension.Reply;
 import run.halo.app.core.extension.User;
+import run.halo.app.core.extension.content.Comment;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Ref;

File: src/main/java/run/halo/app/theme/finders/impl/PostFinderImpl.java
Patch:
@@ -22,7 +22,7 @@
 import reactor.util.function.Tuple2;
 import run.halo.app.content.ContentService;
 import run.halo.app.core.extension.Counter;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.infra.utils.HaloUtils;

File: src/main/java/run/halo/app/theme/finders/impl/SinglePageFinderImpl.java
Patch:
@@ -12,8 +12,8 @@
 import reactor.core.publisher.Mono;
 import run.halo.app.content.ContentService;
 import run.halo.app.core.extension.Counter;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.metrics.CounterService;

File: src/main/java/run/halo/app/theme/finders/impl/SiteStatsFinderImpl.java
Patch:
@@ -2,9 +2,9 @@
 
 import lombok.AllArgsConstructor;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Category;
 import run.halo.app.core.extension.Counter;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Category;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.theme.finders.Finder;
 import run.halo.app.theme.finders.SiteStatsFinder;

File: src/main/java/run/halo/app/theme/finders/impl/TagFinderImpl.java
Patch:
@@ -6,7 +6,7 @@
 import org.apache.commons.lang3.ObjectUtils;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.theme.finders.Finder;

File: src/main/java/run/halo/app/theme/finders/vo/CategoryTreeVo.java
Patch:
@@ -7,7 +7,7 @@
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import org.springframework.util.Assert;
-import run.halo.app.core.extension.Category;
+import run.halo.app.core.extension.content.Category;
 import run.halo.app.extension.MetadataOperator;
 
 /**

File: src/main/java/run/halo/app/theme/finders/vo/CategoryVo.java
Patch:
@@ -3,7 +3,7 @@
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
 import lombok.Value;
-import run.halo.app.core.extension.Category;
+import run.halo.app.core.extension.content.Category;
 import run.halo.app.extension.MetadataOperator;
 
 /**

File: src/main/java/run/halo/app/theme/finders/vo/CommentVo.java
Patch:
@@ -6,7 +6,7 @@
 import lombok.Value;
 import lombok.With;
 import run.halo.app.content.comment.OwnerInfo;
-import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.content.Comment;
 import run.halo.app.extension.MetadataOperator;
 
 /**

File: src/main/java/run/halo/app/theme/finders/vo/ContentVo.java
Patch:
@@ -3,7 +3,7 @@
 import lombok.Builder;
 import lombok.ToString;
 import lombok.Value;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Snapshot;
 
 /**
  * A value object for Content from {@link Snapshot}.

File: src/main/java/run/halo/app/theme/finders/vo/ListedPostVo.java
Patch:
@@ -6,7 +6,7 @@
 import lombok.ToString;
 import lombok.experimental.SuperBuilder;
 import org.springframework.util.Assert;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.MetadataOperator;
 
 /**

File: src/main/java/run/halo/app/theme/finders/vo/ListedSinglePageVo.java
Patch:
@@ -6,7 +6,7 @@
 import lombok.ToString;
 import lombok.experimental.SuperBuilder;
 import org.springframework.util.Assert;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.MetadataOperator;
 
 /**

File: src/main/java/run/halo/app/theme/finders/vo/PostVo.java
Patch:
@@ -6,7 +6,7 @@
 import lombok.ToString;
 import lombok.experimental.SuperBuilder;
 import org.springframework.util.Assert;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 
 /**
  * A value object for {@link Post}.

File: src/main/java/run/halo/app/theme/finders/vo/ReplyVo.java
Patch:
@@ -7,7 +7,7 @@
 import lombok.Value;
 import lombok.With;
 import run.halo.app.content.comment.OwnerInfo;
-import run.halo.app.core.extension.Reply;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.MetadataOperator;
 
 /**

File: src/main/java/run/halo/app/theme/finders/vo/SinglePageVo.java
Patch:
@@ -6,7 +6,7 @@
 import lombok.ToString;
 import lombok.experimental.SuperBuilder;
 import org.springframework.util.Assert;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.SinglePage;
 
 /**
  * A value object for {@link SinglePage}.

File: src/main/java/run/halo/app/theme/finders/vo/TagVo.java
Patch:
@@ -2,7 +2,7 @@
 
 import lombok.Builder;
 import lombok.Value;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.MetadataOperator;
 
 /**

File: src/main/java/run/halo/app/theme/router/PermalinkRefreshHandler.java
Patch:
@@ -8,9 +8,9 @@
 import run.halo.app.content.permalinks.CategoryPermalinkPolicy;
 import run.halo.app.content.permalinks.PostPermalinkPolicy;
 import run.halo.app.content.permalinks.TagPermalinkPolicy;
-import run.halo.app.core.extension.Category;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Category;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.theme.DefaultTemplateEnum;
 

File: src/main/java/run/halo/app/theme/router/strategy/CategoryRouteStrategy.java
Patch:
@@ -12,7 +12,7 @@
 import org.springframework.web.reactive.function.server.ServerRequest;
 import org.springframework.web.reactive.function.server.ServerResponse;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Category;
+import run.halo.app.core.extension.content.Category;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;

File: src/main/java/run/halo/app/theme/router/strategy/PostRouteStrategy.java
Patch:
@@ -8,7 +8,7 @@
 import org.springframework.web.reactive.function.server.ServerResponse;
 import org.springframework.web.util.pattern.PathPattern;
 import org.springframework.web.util.pattern.PathPatternParser;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.GVK;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.infra.SystemSetting;

File: src/main/java/run/halo/app/theme/router/strategy/SinglePageRouteStrategy.java
Patch:
@@ -5,7 +5,7 @@
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.function.server.HandlerFunction;
 import org.springframework.web.reactive.function.server.ServerResponse;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.GVK;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.infra.SystemSetting;

File: src/main/java/run/halo/app/theme/router/strategy/TagRouteStrategy.java
Patch:
@@ -12,7 +12,7 @@
 import org.springframework.web.reactive.function.server.ServerRequest;
 import org.springframework.web.reactive.function.server.ServerResponse;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;

File: src/test/java/run/halo/app/content/ContentRequestTest.java
Patch:
@@ -4,8 +4,8 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.skyscreamer.jsonassert.JSONAssert;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.extension.Ref;
 import run.halo.app.infra.utils.JsonUtils;
 

File: src/test/java/run/halo/app/content/ContentServiceTest.java
Patch:
@@ -23,8 +23,8 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 import run.halo.app.content.impl.ContentServiceImpl;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Ref;

File: src/test/java/run/halo/app/content/PostIntegrationTests.java
Patch:
@@ -16,8 +16,8 @@
 import org.springframework.security.test.context.support.WithMockUser;
 import org.springframework.test.web.reactive.server.WebTestClient;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Post;
 import run.halo.app.core.extension.Role;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.core.extension.service.RoleService;
 import run.halo.app.extension.MetadataOperator;
 import run.halo.app.extension.ReactiveExtensionClient;

File: src/test/java/run/halo/app/content/TestPost.java
Patch:
@@ -1,8 +1,8 @@
 package run.halo.app.content;
 
 import java.time.Instant;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.extension.AbstractExtension;
 import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.GVK;

File: src/test/java/run/halo/app/content/comment/CommentEmailOwnerTest.java
Patch:
@@ -3,7 +3,7 @@
 import org.json.JSONException;
 import org.junit.jupiter.api.Test;
 import org.skyscreamer.jsonassert.JSONAssert;
-import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.content.Comment;
 import run.halo.app.infra.utils.JsonUtils;
 
 /**

File: src/test/java/run/halo/app/content/comment/CommentRequestTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.json.JSONException;
 import org.junit.jupiter.api.Test;
 import org.skyscreamer.jsonassert.JSONAssert;
-import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.content.Comment;
 import run.halo.app.extension.FakeExtension;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.Ref;

File: src/test/java/run/halo/app/content/comment/CommentServiceImplTest.java
Patch:
@@ -28,9 +28,9 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 import run.halo.app.content.TestPost;
-import run.halo.app.core.extension.Comment;
-import run.halo.app.core.extension.Post;
 import run.halo.app.core.extension.User;
+import run.halo.app.core.extension.content.Comment;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.ReactiveExtensionClient;

File: src/test/java/run/halo/app/content/comment/CommentSorterTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.Comparator;
 import java.util.List;
 import org.junit.jupiter.api.Test;
-import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.content.Comment;
 import run.halo.app.extension.Metadata;
 
 /**

File: src/test/java/run/halo/app/content/comment/PostCommentSubjectTest.java
Patch:
@@ -13,7 +13,7 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 import run.halo.app.content.TestPost;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.FakeExtension;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.ReactiveExtensionClient;

File: src/test/java/run/halo/app/content/comment/SinglePageCommentSubjectTest.java
Patch:
@@ -14,7 +14,7 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
-import run.halo.app.core.extension.SinglePage;
+import run.halo.app.core.extension.content.SinglePage;
 import run.halo.app.extension.FakeExtension;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.ReactiveExtensionClient;

File: src/test/java/run/halo/app/content/impl/ContentServiceImplTest.java
Patch:
@@ -14,7 +14,7 @@
 import reactor.core.publisher.Flux;
 import reactor.test.StepVerifier;
 import run.halo.app.content.TestPost;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.extension.ExtensionUtil;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Ref;

File: src/test/java/run/halo/app/content/impl/PostServiceImplTest.java
Patch:
@@ -15,7 +15,7 @@
 import run.halo.app.content.ContentService;
 import run.halo.app.content.PostQuery;
 import run.halo.app.content.TestPost;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ReactiveExtensionClient;
 
 /**

File: src/test/java/run/halo/app/content/permalinks/CategoryPermalinkPolicyTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.context.ApplicationContext;
-import run.halo.app.core.extension.Category;
+import run.halo.app.core.extension.content.Category;
 import run.halo.app.extension.Metadata;
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.theme.DefaultTemplateEnum;

File: src/test/java/run/halo/app/content/permalinks/PostPermalinkPolicyTest.java
Patch:
@@ -17,7 +17,7 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.context.ApplicationContext;
 import run.halo.app.content.TestPost;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.infra.utils.PathUtils;
 import run.halo.app.theme.DefaultTemplateEnum;

File: src/test/java/run/halo/app/content/permalinks/TagPermalinkPolicyTest.java
Patch:
@@ -11,7 +11,7 @@
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.springframework.context.ApplicationContext;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.Metadata;
 import run.halo.app.infra.ExternalUrlSupplier;
 import run.halo.app.theme.DefaultTemplateEnum;

File: src/test/java/run/halo/app/core/extension/PostTest.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.function.Function;
 import org.junit.jupiter.api.Test;
 import org.mockito.Mockito;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.MetadataOperator;
 
 class PostTest {

File: src/test/java/run/halo/app/core/extension/endpoint/PostEndpointTest.java
Patch:
@@ -16,7 +16,7 @@
 import run.halo.app.content.PostRequest;
 import run.halo.app.content.PostService;
 import run.halo.app.content.TestPost;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ReactiveExtensionClient;
 
 /**

File: src/test/java/run/halo/app/core/extension/reconciler/CategoryReconcilerTest.java
Patch:
@@ -19,8 +19,8 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import run.halo.app.content.TestPost;
 import run.halo.app.content.permalinks.CategoryPermalinkPolicy;
-import run.halo.app.core.extension.Category;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Category;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.controller.Reconciler;

File: src/test/java/run/halo/app/core/extension/reconciler/CommentReconcilerTest.java
Patch:
@@ -26,9 +26,9 @@
 import org.mockito.Mock;
 import org.mockito.Mockito;
 import org.mockito.junit.jupiter.MockitoExtension;
-import run.halo.app.core.extension.Comment;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Reply;
+import run.halo.app.core.extension.content.Comment;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.GroupVersionKind;
 import run.halo.app.extension.Metadata;

File: src/test/java/run/halo/app/core/extension/reconciler/PostReconcilerTest.java
Patch:
@@ -24,8 +24,8 @@
 import run.halo.app.content.PostService;
 import run.halo.app.content.TestPost;
 import run.halo.app.content.permalinks.PostPermalinkPolicy;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
 

File: src/test/java/run/halo/app/core/extension/reconciler/SinglePageReconcilerTest.java
Patch:
@@ -26,9 +26,9 @@
 import run.halo.app.content.ContentWrapper;
 import run.halo.app.content.SinglePageService;
 import run.halo.app.content.TestPost;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.SinglePage;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.SinglePage;
+import run.halo.app.core.extension.content.Snapshot;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.controller.Reconciler;

File: src/test/java/run/halo/app/core/extension/reconciler/TagReconcilerTest.java
Patch:
@@ -18,8 +18,8 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import run.halo.app.content.TestPost;
 import run.halo.app.content.permalinks.TagPermalinkPolicy;
-import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Post;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.Metadata;
 

File: src/test/java/run/halo/app/metrics/CounterMeterHandlerTest.java
Patch:
@@ -19,7 +19,7 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 import run.halo.app.core.extension.Counter;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.ReactiveExtensionClient;
 

File: src/test/java/run/halo/app/metrics/CounterServiceImplTest.java
Patch:
@@ -16,7 +16,7 @@
 import reactor.core.publisher.Mono;
 import reactor.test.StepVerifier;
 import run.halo.app.core.extension.Counter;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.ReactiveExtensionClient;
 

File: src/test/java/run/halo/app/metrics/MeterUtilsTest.java
Patch:
@@ -8,7 +8,7 @@
 import io.micrometer.core.instrument.search.RequiredSearch;
 import io.micrometer.core.instrument.simple.SimpleMeterRegistry;
 import org.junit.jupiter.api.Test;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 
 /**
  * Tests for {@link MeterUtils}.

File: src/test/java/run/halo/app/theme/dialect/HaloProcessorDialectTest.java
Patch:
@@ -26,7 +26,7 @@
 import org.thymeleaf.templateresource.ITemplateResource;
 import org.thymeleaf.templateresource.StringTemplateResource;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.Metadata;
 import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;
 import run.halo.app.infra.SystemSetting;

File: src/test/java/run/halo/app/theme/endpoint/CommentFinderEndpointTest.java
Patch:
@@ -22,8 +22,8 @@
 import run.halo.app.content.comment.CommentService;
 import run.halo.app.content.comment.ReplyRequest;
 import run.halo.app.content.comment.ReplyService;
-import run.halo.app.core.extension.Comment;
-import run.halo.app.core.extension.Reply;
+import run.halo.app.core.extension.content.Comment;
+import run.halo.app.core.extension.content.Reply;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.Ref;
 import run.halo.app.theme.finders.CommentFinder;

File: src/test/java/run/halo/app/theme/finders/impl/CategoryFinderImplTest.java
Patch:
@@ -20,7 +20,7 @@
 import org.skyscreamer.jsonassert.JSONAssert;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Category;
+import run.halo.app.core.extension.content.Category;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.ReactiveExtensionClient;

File: src/test/java/run/halo/app/theme/finders/impl/PostFinderImplTest.java
Patch:
@@ -23,7 +23,7 @@
 import run.halo.app.content.ContentService;
 import run.halo.app.content.ContentWrapper;
 import run.halo.app.core.extension.Counter;
-import run.halo.app.core.extension.Post;
+import run.halo.app.core.extension.content.Post;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.ReactiveExtensionClient;

File: src/test/java/run/halo/app/theme/finders/impl/TagFinderImplTest.java
Patch:
@@ -18,7 +18,7 @@
 import org.skyscreamer.jsonassert.JSONAssert;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.core.extension.Tag;
+import run.halo.app.core.extension.content.Tag;
 import run.halo.app.extension.Metadata;
 import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.infra.utils.JsonUtils;

File: src/main/java/run/halo/app/Application.java
Patch:
@@ -6,7 +6,6 @@
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import org.springframework.scheduling.annotation.EnableScheduling;
 import run.halo.app.infra.properties.HaloProperties;
-import run.halo.app.infra.properties.JwtProperties;
 
 /**
  * Halo main class.
@@ -19,7 +18,7 @@
 @EnableScheduling
 @SpringBootApplication(scanBasePackages = "run.halo.app", exclude =
     IntegrationAutoConfiguration.class)
-@EnableConfigurationProperties({HaloProperties.class, JwtProperties.class})
+@EnableConfigurationProperties({HaloProperties.class})
 public class Application {
 
     public static void main(String[] args) {

File: src/main/java/run/halo/app/infra/properties/JwtProperties.java
Patch:
@@ -7,7 +7,6 @@
 import java.nio.charset.StandardCharsets;
 import java.security.interfaces.RSAPrivateKey;
 import java.security.interfaces.RSAPublicKey;
-import org.springframework.boot.context.properties.ConfigurationProperties;
 import org.springframework.boot.context.properties.source.InvalidConfigurationPropertyValueException;
 import org.springframework.core.io.Resource;
 import org.springframework.security.converter.RsaKeyConverters;
@@ -21,7 +20,6 @@
  * @author johnniang
  * @date 2022-04-12
  */
-@ConfigurationProperties(prefix = "halo.security.oauth2.jwt")
 @Validated
 public class JwtProperties {
 

File: src/main/java/run/halo/app/security/authentication/jwt/JwtAuthenticationConfigurer.java
Patch:
@@ -13,12 +13,13 @@
 import org.springframework.security.web.server.authentication.AuthenticationWebFilter;
 import org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher;
 import org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher;
-import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.function.server.ServerResponse;
 import run.halo.app.infra.properties.JwtProperties;
 import run.halo.app.security.authentication.SecurityConfigurer;
 
-@Component
+/**
+ * TODO: Use It after 2.0.0.
+ */
 public class JwtAuthenticationConfigurer implements SecurityConfigurer {
 
     private final ReactiveUserDetailsService userDetailsService;

File: src/test/java/run/halo/app/security/SuperAdminInitializerTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.jdbc.AutoConfigureTestDatabase;
@@ -17,6 +18,7 @@
 import run.halo.app.core.extension.User;
 import run.halo.app.extension.ReactiveExtensionClient;
 
+@Disabled
 @SpringBootTest(properties = {"halo.security.initializer.disabled=false",
     "halo.security.initializer.super-admin-username=fake-admin",
     "halo.security.initializer.super-admin-password=fake-password",

File: src/test/java/run/halo/app/security/authentication/jwt/JwtAuthenticationTest.java
Patch:
@@ -9,6 +9,7 @@
 
 import java.util.List;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
@@ -25,6 +26,7 @@
 import run.halo.app.infra.AnonymousUserConst;
 import run.halo.app.security.LoginUtils;
 
+@Disabled
 @SpringBootTest
 @AutoConfigureWebTestClient
 class JwtAuthenticationTest {

File: src/test/java/run/halo/app/security/authentication/jwt/LoginTest.java
Patch:
@@ -8,6 +8,7 @@
 
 import com.nimbusds.jwt.JWTClaimNames;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
@@ -22,6 +23,7 @@
 import org.springframework.test.web.reactive.server.WebTestClient;
 import reactor.core.publisher.Mono;
 
+@Disabled
 @SpringBootTest
 @AutoConfigureWebTestClient
 class LoginTest {

File: src/test/java/run/halo/app/security/authorization/AuthorizationTest.java
Patch:
@@ -14,6 +14,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
@@ -41,6 +42,7 @@
 import run.halo.app.infra.AnonymousUserConst;
 import run.halo.app.security.LoginUtils;
 
+@Disabled
 @SpringBootTest
 @AutoConfigureWebTestClient
 @Import(AuthorizationTest.TestConfig.class)

File: src/main/java/run/halo/app/core/extension/attachment/endpoint/LocalAttachmentUploadHandler.java
Patch:
@@ -130,10 +130,10 @@ public Mono<Attachment> delete(DeleteContext deleteContext) {
     private boolean shouldHandle(Policy policy) {
         if (policy == null
             || policy.getSpec() == null
-            || policy.getSpec().getTemplateRef() == null) {
+            || !StringUtils.hasText(policy.getSpec().getTemplateName())) {
             return false;
         }
-        return "local".equals(policy.getSpec().getTemplateRef().getName());
+        return "local".equals(policy.getSpec().getTemplateName());
     }
 
     @Data

File: src/main/java/run/halo/app/event/post/PostPublishedEvent.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.context.ApplicationEvent;
 
-public class PostPublishedEvent extends ApplicationEvent {
+public class PostPublishedEvent extends ApplicationEvent implements PostEvent {
 
     private final String postName;
 
@@ -11,7 +11,8 @@ public PostPublishedEvent(Object source, String postName) {
         this.postName = postName;
     }
 
-    public String getPostName() {
+    @Override
+    public String getName() {
         return postName;
     }
 

File: src/main/java/run/halo/app/event/post/PostRecycledEvent.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.context.ApplicationEvent;
 
-public class PostRecycledEvent extends ApplicationEvent {
+public class PostRecycledEvent extends ApplicationEvent implements PostEvent {
 
     private final String postName;
 
@@ -11,7 +11,7 @@ public PostRecycledEvent(Object source, String postName) {
         this.postName = postName;
     }
 
-    public String getPostName() {
+    public String getName() {
         return postName;
     }
 }

File: src/main/java/run/halo/app/event/post/PostUnpublishedEvent.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.springframework.context.ApplicationEvent;
 
-public class PostUnpublishedEvent extends ApplicationEvent {
+public class PostUnpublishedEvent extends ApplicationEvent implements PostEvent {
 
     private final String postName;
 
@@ -11,7 +11,8 @@ public PostUnpublishedEvent(Object source, String postName) {
         this.postName = postName;
     }
 
-    public String getPostName() {
+    @Override
+    public String getName() {
         return postName;
     }
 

File: src/main/java/run/halo/app/core/extension/theme/ThemeService.java
Patch:
@@ -10,6 +10,7 @@ public interface ThemeService {
 
     Mono<Theme> upgrade(String themeName, InputStream is);
 
+    Mono<Theme> reloadTheme(String name);
     // TODO Migrate other useful methods in ThemeEndpoint in the future.
 
 }

File: src/main/java/run/halo/app/extension/ExtensionClient.java
Patch:
@@ -10,9 +10,9 @@
  * ExtensionStore.
  *
  * @author johnniang
- * @deprecated Use {@link ReactiveExtensionClient} instead.
+ * @apiNote Please note that this client can only use in non-reactive environment. If you want to
+ * use Extension client in reactive environment, please use {@link ReactiveExtensionClient} instead.
  */
-@Deprecated(forRemoval = true, since = "2.0")
 public interface ExtensionClient {
 
     /**

File: src/main/java/run/halo/app/core/extension/Comment.java
Patch:
@@ -65,6 +65,8 @@ public static class BaseCommentSpec {
 
         private String ipAddress;
 
+        private Instant approvedTime;
+
         @Schema(required = true, defaultValue = "0")
         private Integer priority;
 

File: src/main/java/run/halo/app/extension/controller/Reconciler.java
Patch:
@@ -6,6 +6,8 @@ public interface Reconciler<R> {
 
     Result reconcile(R request);
 
+    Controller setupWith(ControllerBuilder builder);
+
     record Request(String name) {
     }
 

File: src/main/java/run/halo/app/core/extension/reconciler/SinglePageReconciler.java
Patch:
@@ -108,8 +108,9 @@ private void publishPage(String name) {
                 if (StringUtils.isBlank(releaseSnapshot)) {
                     return;
                 }
-                // do nothing if release snapshot is not changed
-                if (StringUtils.equals(lastReleasedSnapshot, releaseSnapshot)) {
+                // do nothing if release snapshot is not changed and page is published
+                if (page.isPublished()
+                    && StringUtils.equals(lastReleasedSnapshot, releaseSnapshot)) {
                     return;
                 }
                 SinglePage.SinglePageStatus status = page.getStatusOrDefault();

File: src/main/java/run/halo/app/plugin/PluginNotFoundException.java
Patch:
@@ -1,14 +1,14 @@
 package run.halo.app.plugin;
 
-import org.pf4j.PluginRuntimeException;
+import run.halo.app.infra.exception.NotFoundException;
 
 /**
  * Exception for plugin not found.
  *
  * @author guqing
  * @since 2.0.0
  */
-public class PluginNotFoundException extends PluginRuntimeException {
+public class PluginNotFoundException extends NotFoundException {
     public PluginNotFoundException(String message) {
         super(message);
     }

File: src/test/java/run/halo/app/core/extension/endpoint/UserEndpointTest.java
Patch:
@@ -79,7 +79,7 @@ void shouldResponseErrorIfUserNotFound() {
                 .thenReturn(Mono.error(new ExtensionNotFoundException()));
             webClient.get().uri("/apis/api.console.halo.run/v1alpha1/users/-")
                 .exchange()
-                .expectStatus().is5xxServerError();
+                .expectStatus().isNotFound();
 
             verify(client).get(User.class, "fake-user");
         }

File: src/main/java/run/halo/app/console/ConsoleProxyFilter.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.http.MediaType;
 import org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher;
 import org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher;
+import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;
 import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;
 import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;
 import org.springframework.web.reactive.function.BodyExtractors;
@@ -31,6 +32,8 @@ public ConsoleProxyFilter(HaloProperties haloProperties) {
         var consoleMatcher = ServerWebExchangeMatchers.pathMatchers(HttpMethod.GET, "/console/**");
         consoleMatcher = new AndServerWebExchangeMatcher(consoleMatcher,
             new MediaTypeServerWebExchangeMatcher(MediaType.TEXT_HTML));
+        consoleMatcher = new AndServerWebExchangeMatcher(consoleMatcher,
+            new NegatedServerWebExchangeMatcher(new WebSocketServerWebExchangeMatcher()));
         this.consoleMatcher = consoleMatcher;
         this.webClient = WebClient.create(proxyProperties.getEndpoint().toString());
         log.info("Initialized ConsoleProxyFilter to proxy console");

File: src/main/java/run/halo/app/theme/finders/impl/ContributorFinderImpl.java
Patch:
@@ -36,6 +36,6 @@ public Flux<Contributor> getContributors(List<String> names) {
             return Flux.empty();
         }
         return Flux.fromIterable(names)
-            .flatMap(this::getContributor);
+            .concatMap(this::getContributor);
     }
 }

File: src/main/java/run/halo/app/theme/finders/impl/PostFinderImpl.java
Patch:
@@ -127,7 +127,7 @@ public Mono<NavigationPostVo> cursor(String currentName) {
     @Override
     public Flux<ListedPostVo> listAll() {
         return client.list(Post.class, FIXED_PREDICATE, defaultComparator())
-            .flatMap(this::getListedPostVo);
+            .concatMap(this::getListedPostVo);
     }
 
     static Pair<String, String> postPreviousNextPair(List<String> postNames,
@@ -292,7 +292,7 @@ private Mono<ListResult<ListedPostVo>> listPost(Integer page, Integer size,
         return client.list(Post.class, predicate,
                 comparator, pageNullSafe(page), sizeNullSafe(size))
             .flatMap(list -> Flux.fromStream(list.get())
-                .flatMap(post -> getListedPostVo(post)
+                .concatMap(post -> getListedPostVo(post)
                     .map(postVo -> {
                         populateStats(postVo);
                         return postVo;

File: src/main/java/run/halo/app/theme/finders/impl/SinglePageFinderImpl.java
Patch:
@@ -96,7 +96,7 @@ public Mono<ListResult<ListedSinglePageVo>> list(Integer page, Integer size) {
                     populateStats(pageVo);
                     return pageVo;
                 })
-                .flatMap(this::populateContributors)
+                .concatMap(this::populateContributors)
                 .collectList()
                 .map(pageVos -> new ListResult<>(list.getPage(), list.getSize(), list.getTotal(),
                     pageVos)

File: src/main/java/run/halo/app/theme/finders/impl/TagFinderImpl.java
Patch:
@@ -40,7 +40,7 @@ public Mono<TagVo> getByName(String name) {
     @Override
     public Flux<TagVo> getByNames(List<String> names) {
         return Flux.fromIterable(names)
-            .flatMap(this::getByName);
+            .concatMap(this::getByName);
     }
 
     @Override

File: src/main/java/run/halo/app/content/ContentWrapper.java
Patch:
@@ -11,7 +11,6 @@
 @Builder
 public class ContentWrapper {
     private String snapshotName;
-    private Integer version;
     private String raw;
     private String content;
     private String rawType;

File: src/main/java/run/halo/app/content/PostService.java
Patch:
@@ -17,6 +17,4 @@ public interface PostService {
     Mono<Post> draftPost(PostRequest postRequest);
 
     Mono<Post> updatePost(PostRequest postRequest);
-
-    Mono<Post> publishPost(String postName);
 }

File: src/main/java/run/halo/app/content/SinglePageService.java
Patch:
@@ -17,6 +17,4 @@ public interface SinglePageService {
     Mono<SinglePage> draft(SinglePageRequest pageRequest);
 
     Mono<SinglePage> update(SinglePageRequest pageRequest);
-
-    Mono<SinglePage> publish(String name);
 }

File: src/main/java/run/halo/app/core/extension/SinglePage.java
Patch:
@@ -27,6 +27,8 @@ public class SinglePage extends AbstractExtension {
     public static final String KIND = "SinglePage";
     public static final String DELETED_LABEL = "content.halo.run/deleted";
     public static final String PUBLISHED_LABEL = "content.halo.run/published";
+    public static final String LAST_RELEASED_SNAPSHOT_ANNO =
+        "content.halo.run/last-released-snapshot";
     public static final String OWNER_LABEL = "content.halo.run/owner";
     public static final String VISIBLE_LABEL = "content.halo.run/visible";
 
@@ -90,9 +92,6 @@ public static class SinglePageSpec {
         @Schema(required = true, defaultValue = "PUBLIC")
         private Post.VisibleEnum visible;
 
-        @Schema(required = true, defaultValue = "1")
-        private Integer version;
-
         @Schema(required = true, defaultValue = "0")
         private Integer priority;
 

File: src/test/java/run/halo/app/core/extension/reconciler/SinglePageReconcilerTest.java
Patch:
@@ -89,7 +89,6 @@ void reconcile() {
         when(contentService.listSnapshots(any()))
             .thenReturn(Flux.just(snapshotV1, snapshotV2));
         when(externalUrlSupplier.get()).thenReturn(URI.create(""));
-        when(singlePageService.publish(eq(name))).thenReturn(Mono.empty());
 
         ArgumentCaptor<SinglePage> captor = ArgumentCaptor.forClass(SinglePage.class);
         singlePageReconciler.reconcile(new Reconciler.Request(name));
@@ -138,7 +137,6 @@ public static SinglePage pageV1() {
 
         spec.setTitle("page-A");
         spec.setSlug("page-slug");
-        spec.setVersion(1);
         spec.setBaseSnapshot(snapshotV1().getMetadata().getName());
         spec.setHeadSnapshot("base-snapshot");
         spec.setReleaseSnapshot(null);

File: src/main/java/run/halo/app/extension/gc/GarbageCollectorConfiguration.java
Patch:
@@ -15,7 +15,6 @@
 @Configuration(proxyBeanMethods = false)
 public class GarbageCollectorConfiguration {
 
-
     @Bean
     Controller garbageCollector(ExtensionClient client,
         ExtensionStoreClient storeClient,
@@ -30,7 +29,8 @@ Controller garbageCollector(ExtensionClient client,
             queue,
             synchronizer,
             Duration.ofMillis(500),
-            Duration.ofSeconds(1000)
-        );
+            Duration.ofSeconds(1000),
+            // TODO Make it configurable
+            10);
     }
 }

File: src/main/java/run/halo/app/theme/ReactiveSpelVariableExpressionEvaluator.java
Patch:
@@ -37,7 +37,7 @@ public Object evaluate(IExpressionContext context, IStandardVariableExpression e
             return ((Mono<?>) returnValue).block();
         }
         if (Flux.class.isAssignableFrom(clazz)) {
-            return ((Flux<?>) returnValue).toIterable();
+            return ((Flux<?>) returnValue).collectList().block();
         }
         return returnValue;
     }

File: src/main/java/run/halo/app/plugin/SharedApplicationContextHolder.java
Patch:
@@ -6,6 +6,7 @@
 import run.halo.app.extension.DefaultSchemeManager;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.ReactiveExtensionClient;
+import run.halo.app.infra.ExternalUrlSupplier;
 
 /**
  * <p>This {@link SharedApplicationContextHolder} class is used to hold a singleton instance of
@@ -61,6 +62,8 @@ SharedApplicationContext createSharedApplicationContext() {
         DefaultSchemeManager defaultSchemeManager =
             rootApplicationContext.getBean(DefaultSchemeManager.class);
         beanFactory.registerSingleton("schemeManager", defaultSchemeManager);
+        beanFactory.registerSingleton("externalUrlSupplier",
+            rootApplicationContext.getBean(ExternalUrlSupplier.class));
         // TODO add more shared instance here
 
         return sharedApplicationContext;

File: src/main/java/run/halo/app/theme/finders/PostFinder.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.theme.finders;
 
 import org.springframework.lang.Nullable;
+import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.Post;
 import run.halo.app.extension.ListResult;
@@ -24,6 +25,8 @@ public interface PostFinder {
 
     Mono<NavigationPostVo> cursor(String current);
 
+    Flux<ListedPostVo> listAll();
+
     Mono<ListResult<ListedPostVo>> list(@Nullable Integer page, @Nullable Integer size);
 
     Mono<ListResult<ListedPostVo>> listByCategory(@Nullable Integer page, @Nullable Integer size,

File: src/main/java/run/halo/app/theme/dialect/PostTemplateHeadProcessor.java
Patch:
@@ -36,7 +36,7 @@ public Mono<Void> process(ITemplateContext context, IModel model,
             return Mono.empty();
         }
         return Mono.justOrEmpty((String) context.getVariable(POST_NAME_VARIABLE))
-            .map(postFinder::getByName)
+            .flatMap(postFinder::getByName)
             .doOnNext(postVo -> {
                 List<Map<String, String>> htmlMetas = postVo.getSpec().getHtmlMetas();
                 String metaHtml = headMetaBuilder(htmlMetas);

File: src/main/java/run/halo/app/theme/finders/MenuFinder.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.theme.finders;
 
+import reactor.core.publisher.Mono;
 import run.halo.app.theme.finders.vo.MenuVo;
 
 /**
@@ -10,7 +11,7 @@
  */
 public interface MenuFinder {
 
-    MenuVo getByName(String name);
+    Mono<MenuVo> getByName(String name);
 
-    MenuVo getPrimary();
+    Mono<MenuVo> getPrimary();
 }

File: src/main/java/run/halo/app/theme/finders/SiteStatsFinder.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.theme.finders;
 
+import reactor.core.publisher.Mono;
 import run.halo.app.theme.finders.vo.SiteStatsVo;
 
 /**
@@ -10,5 +11,5 @@
  */
 public interface SiteStatsFinder {
 
-    SiteStatsVo getStats();
+    Mono<SiteStatsVo> getStats();
 }

File: src/main/java/run/halo/app/theme/finders/ThemeFinder.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.theme.finders;
 
+import reactor.core.publisher.Mono;
 import run.halo.app.theme.finders.vo.ThemeVo;
 
 /**
@@ -10,7 +11,7 @@
  */
 public interface ThemeFinder {
 
-    ThemeVo activation();
+    Mono<ThemeVo> activation();
 
-    ThemeVo getByName(String themeName);
+    Mono<ThemeVo> getByName(String themeName);
 }

File: src/main/java/run/halo/app/theme/finders/impl/SiteStatsFinderImpl.java
Patch:
@@ -22,7 +22,7 @@ public class SiteStatsFinderImpl implements SiteStatsFinder {
     private final ReactiveExtensionClient client;
 
     @Override
-    public SiteStatsVo getStats() {
+    public Mono<SiteStatsVo> getStats() {
         return client.list(Counter.class, null, null)
             .reduce(SiteStatsVo.empty(), (stats, counter) -> {
                 stats.setVisit(stats.getVisit() + counter.getVisit());
@@ -36,8 +36,7 @@ public SiteStatsVo getStats() {
             )
             .flatMap(siteStatsVo -> categoryCount()
                 .doOnNext(siteStatsVo::setCategory)
-                .thenReturn(siteStatsVo))
-            .block();
+                .thenReturn(siteStatsVo));
     }
 
     Mono<Integer> postCount() {

File: src/main/java/run/halo/app/theme/finders/vo/PostArchiveYearMonthVo.java
Patch:
@@ -16,5 +16,5 @@ public class PostArchiveYearMonthVo {
 
     String month;
 
-    List<PostVo> posts;
+    List<ListedPostVo> posts;
 }

File: src/test/java/run/halo/app/theme/dialect/HaloProcessorDialectTest.java
Patch:
@@ -142,7 +142,7 @@ void contentHeadAndFooterAndPostProcessors() {
         PostVo postVo = PostVo.builder()
             .spec(postSpec)
             .metadata(metadata).build();
-        when(postFinder.getByName(eq("fake-post"))).thenReturn(postVo);
+        when(postFinder.getByName(eq("fake-post"))).thenReturn(Mono.just(postVo));
 
         SystemSetting.Basic basic = new SystemSetting.Basic();
         basic.setFavicon(null);

File: src/test/java/run/halo/app/theme/finders/impl/MenuFinderImplTest.java
Patch:
@@ -45,7 +45,7 @@ void listAsTree() {
         Mockito.when(client.list(eq(MenuItem.class), eq(null), any()))
             .thenReturn(Flux.fromIterable(tuple.getT2()));
 
-        List<MenuVo> menuVos = menuFinder.listAsTree();
+        List<MenuVo> menuVos = menuFinder.listAsTree().collectList().block();
         assertThat(visualizeTree(menuVos)).isEqualTo("""
             D
             └── E

File: src/test/java/run/halo/app/theme/finders/impl/TagFinderImplTest.java
Patch:
@@ -47,7 +47,7 @@ void setUp() {
     void getByName() throws JSONException {
         when(client.fetch(eq(Tag.class), eq("t1")))
             .thenReturn(Mono.just(tag(1)));
-        TagVo tagVo = tagFinder.getByName("t1");
+        TagVo tagVo = tagFinder.getByName("t1").block();
         tagVo.getMetadata().setCreationTimestamp(null);
         JSONAssert.assertEquals("""
                 {
@@ -82,7 +82,7 @@ void listAll() {
                     tags().stream().sorted(TagFinderImpl.DEFAULT_COMPARATOR.reversed()).toList()
                 )
             );
-        List<TagVo> tags = tagFinder.listAll();
+        List<TagVo> tags = tagFinder.listAll().collectList().block();
         assertThat(tags).hasSize(3);
         assertThat(tags.stream()
             .map(tag -> tag.getMetadata().getName())

File: src/test/java/run/halo/app/theme/router/strategy/PostRouteStrategyTest.java
Patch:
@@ -42,7 +42,8 @@ class PostRouteStrategyTest extends RouterStrategyTestSuite {
     public void setUp() {
         lenient().when(viewNameResolver.resolveViewNameOrDefault(any(), any(), any()))
             .thenReturn(Mono.just(DefaultTemplateEnum.POST.getValue()));
-        lenient().when(postFinder.getByName(any())).thenReturn(PostVo.from(TestPost.postV1()));
+        lenient().when(postFinder.getByName(any()))
+            .thenReturn(Mono.just(PostVo.from(TestPost.postV1())));
     }
 
     @Test

File: src/main/java/run/halo/app/infra/properties/HaloProperties.java
Patch:
@@ -42,4 +42,7 @@ public class HaloProperties {
 
     @Valid
     private final ConsoleProperties console = new ConsoleProperties();
+
+    @Valid
+    private final ThemeProperties theme = new ThemeProperties();
 }

File: src/main/java/run/halo/app/theme/ThemePathPolicy.java
Patch:
@@ -9,7 +9,9 @@
  *
  * @author guqing
  * @since 2.0.0
+ * @deprecated Use {@code run.halo.app.infra.ThemeRootGetter}
  */
+@Deprecated(forRemoval = true)
 public class ThemePathPolicy {
     public static final String THEME_WORK_DIR = "themes";
 

File: src/test/java/run/halo/app/security/SuperAdminInitializerTest.java
Patch:
@@ -20,7 +20,8 @@
 @SpringBootTest(properties = {"halo.security.initializer.disabled=false",
     "halo.security.initializer.super-admin-username=fake-admin",
     "halo.security.initializer.super-admin-password=fake-password",
-    "halo.required-extension-disabled=true"})
+    "halo.required-extension-disabled=true",
+    "halo.theme.initializer.disabled=true"})
 @AutoConfigureWebTestClient
 @AutoConfigureTestDatabase
 class SuperAdminInitializerTest {

File: src/main/java/run/halo/app/config/HaloConfiguration.java
Patch:
@@ -4,8 +4,10 @@
 import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.scheduling.annotation.EnableAsync;
 
 @Configuration(proxyBeanMethods = false)
+@EnableAsync
 public class HaloConfiguration {
 
     @Bean

File: src/test/java/run/halo/app/security/SuperAdminInitializerTest.java
Patch:
@@ -19,7 +19,8 @@
 
 @SpringBootTest(properties = {"halo.security.initializer.disabled=false",
     "halo.security.initializer.super-admin-username=fake-admin",
-    "halo.security.initializer.super-admin-password=fake-password"})
+    "halo.security.initializer.super-admin-password=fake-password",
+    "halo.required-extension-disabled=true"})
 @AutoConfigureWebTestClient
 @AutoConfigureTestDatabase
 class SuperAdminInitializerTest {

File: src/main/java/run/halo/app/infra/utils/PathUtils.java
Patch:
@@ -55,6 +55,7 @@ public static boolean isAbsoluteUri(final String uriString) {
      *
      * @param pathSegments Path segments to be combined
      * @return the combined path
+     * @apiNote This method doesn't work for Windows system currently.
      */
     public static String combinePath(String... pathSegments) {
         StringBuilder sb = new StringBuilder();

File: src/test/java/run/halo/app/plugin/PluginStartedListenerTest.java
Patch:
@@ -34,7 +34,8 @@ void lookupFromClasses() throws IOException {
 
             Set<String> extensionResources =
                 PluginStartedListener.PluginExtensionLoaderUtils.lookupFromClasses(tempPluginPath);
-            assertThat(extensionResources).containsAll(Set.of("extensions/roles.yaml"));
+            assertThat(extensionResources)
+                .containsAll(Set.of(Path.of("extensions/roles.yaml").toString()));
         }
 
         @Test

File: src/main/java/run/halo/app/content/ListedPost.java
Patch:
@@ -29,6 +29,9 @@ public class ListedPost {
     @Schema(required = true)
     private List<Contributor> contributors;
 
+    @Schema(required = true)
+    private Contributor owner;
+
     @Schema(required = true)
     private Stats stats;
 }

File: src/main/java/run/halo/app/content/ListedSinglePage.java
Patch:
@@ -21,6 +21,9 @@ public class ListedSinglePage {
     @Schema(required = true)
     private List<Contributor> contributors;
 
+    @Schema(required = true)
+    private Contributor owner;
+
     @Schema(required = true)
     private Stats stats;
 }

File: src/main/java/run/halo/app/content/PostRequest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.swagger.v3.oas.annotations.media.Schema;
 import run.halo.app.core.extension.Post;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.extension.Ref;
 
 /**
  * @author guqing
@@ -12,8 +12,7 @@ public record PostRequest(@Schema(required = true) Post post,
                           @Schema(required = true) Content content) {
 
     public ContentRequest contentRequest() {
-        Snapshot.SubjectRef subjectRef =
-            Snapshot.SubjectRef.of(Post.KIND, post.getMetadata().getName());
+        Ref subjectRef = Ref.of(post);
         return new ContentRequest(subjectRef, post.getSpec().getHeadSnapshot(), content.raw,
             content.content, content.rawType);
     }

File: src/main/java/run/halo/app/content/SinglePageRequest.java
Patch:
@@ -2,7 +2,7 @@
 
 import io.swagger.v3.oas.annotations.media.Schema;
 import run.halo.app.core.extension.SinglePage;
-import run.halo.app.core.extension.Snapshot;
+import run.halo.app.extension.Ref;
 
 /**
  * A request parameter for {@link SinglePage}.
@@ -14,8 +14,7 @@ public record SinglePageRequest(@Schema(required = true) SinglePage page,
                                 @Schema(required = true) Content content) {
 
     public ContentRequest contentRequest() {
-        Snapshot.SubjectRef subjectRef =
-            Snapshot.SubjectRef.of(SinglePage.KIND, page.getMetadata().getName());
+        Ref subjectRef = Ref.of(page);
         return new ContentRequest(subjectRef, page.getSpec().getHeadSnapshot(), content.raw,
             content.content, content.rawType);
     }

File: src/main/java/run/halo/app/theme/finders/vo/PostVo.java
Patch:
@@ -35,6 +35,8 @@ public class PostVo {
 
     private List<Contributor> contributors;
 
+    private Contributor owner;
+
     private StatsVo stats;
 
     /**

File: src/main/java/run/halo/app/theme/finders/vo/SinglePageVo.java
Patch:
@@ -33,6 +33,8 @@ public class SinglePageVo {
 
     private List<Contributor> contributors;
 
+    private Contributor owner;
+
     /**
      * Convert {@link SinglePage} to {@link SinglePageVo}.
      *

File: src/main/java/run/halo/app/core/extension/Plugin.java
Patch:
@@ -112,6 +112,8 @@ public static class PluginStatus {
         private String entry;
 
         private String stylesheet;
+
+        private String logo;
     }
 
     @JsonIgnore

File: src/main/java/run/halo/app/plugin/resources/BundleResourceUtils.java
Patch:
@@ -76,7 +76,7 @@ public static Resource getJsBundleResource(HaloPluginManager pluginManager, Stri
     }
 
     @Nullable
-    private static DefaultResourceLoader getResourceLoader(HaloPluginManager pluginManager,
+    public static DefaultResourceLoader getResourceLoader(HaloPluginManager pluginManager,
         String pluginName) {
         Assert.notNull(pluginManager, "Plugin manager must not be null");
         PluginWrapper plugin = pluginManager.getPlugin(pluginName);

File: src/test/java/run/halo/app/theme/router/strategy/RouterStrategyTestSuite.java
Patch:
@@ -3,7 +3,6 @@
 import static org.mockito.ArgumentMatchers.any;
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.lenient;
-import static org.mockito.Mockito.when;
 
 import java.net.URI;
 import java.net.URISyntaxException;
@@ -51,7 +50,7 @@ final void setUpParent() throws URISyntaxException {
         lenient().when(environmentFetcher.fetch(eq(SystemSetting.ThemeRouteRules.GROUP),
             eq(SystemSetting.ThemeRouteRules.class))).thenReturn(Mono.just(getThemeRouteRules()));
         lenient().when(haloProperties.getExternalUrl()).thenReturn(new URI("http://example.com"));
-        when(viewResolver.resolveViewName(any(), any()))
+        lenient().when(viewResolver.resolveViewName(any(), any()))
             .thenReturn(Mono.just(new EmptyView()));
         setUp();
     }

File: src/main/java/run/halo/app/config/ExtensionConfiguration.java
Patch:
@@ -197,10 +197,11 @@ Controller attachmentController(ExtensionClient client,
 
         @Bean
         Controller singlePageController(ExtensionClient client, ContentService contentService,
-            ApplicationContext applicationContext, CounterService counterService) {
+            ApplicationContext applicationContext, CounterService counterService,
+            ExternalUrlSupplier externalUrlSupplier) {
             return new ControllerBuilder("single-page-controller", client)
                 .reconciler(new SinglePageReconciler(client, contentService,
-                    applicationContext, counterService)
+                    applicationContext, counterService, externalUrlSupplier)
                 )
                 .extension(new SinglePage())
                 .build();

File: src/test/java/run/halo/app/theme/finders/impl/PostFinderImplTest.java
Patch:
@@ -104,7 +104,6 @@ void archives() {
             .thenReturn(Mono.just(listResult));
         ListResult<PostArchiveVo> archives = postFinder.archives(1, 10);
         List<PostArchiveVo> items = archives.getItems();
-
         assertThat(items.size()).isEqualTo(2);
         assertThat(items.get(0).getYear()).isEqualTo("2022");
         assertThat(items.get(0).getMonths().size()).isEqualTo(1);

File: src/test/java/run/halo/app/theme/finders/impl/CategoryFinderImplTest.java
Patch:
@@ -226,6 +226,7 @@ private Category category() {
     }
 
     private List<Category> moreCategories() {
+        // see also https://github.com/halo-dev/halo/issues/2643
         String s = """
             [
                {
@@ -318,7 +319,8 @@ private List<Category> moreCategories() {
                         "bd95f914-22fc-4de5-afcc-a9ffba2f6401",
                         "e1150fd9-4512-453c-9186-f8de9c156c3d",
                         "acf09686-d5a7-4227-ba8c-3aeff063f12f",
-                        "ed064d5e-2b6f-4123-8114-78d0c6f2c4e2"
+                        "ed064d5e-2b6f-4123-8114-78d0c6f2c4e2",
+                        "non-existent-children-name"
                      ]
                   },
                   "status":{

File: src/test/java/run/halo/app/theme/finders/impl/MenuFinderImplTest.java
Patch:
@@ -90,7 +90,7 @@ Tuple2<List<Menu>, List<MenuItem>> testTree() {
         Menu menuX = menu("X", of("G"));
         Menu menuY = menu("Y", of("F"));
 
-        MenuItem itemE = menuItem("E", of("A", "C"));
+        MenuItem itemE = menuItem("E", of("A", "C", "non-existent-children-name"));
         MenuItem itemG = menuItem("G", null);
         MenuItem itemF = menuItem("F", of("H"));
         MenuItem itemA = menuItem("A", of("B"));

File: src/test/java/run/halo/app/core/extension/reconciler/PostReconcilerTest.java
Patch:
@@ -71,7 +71,7 @@ void reconcile() {
         verify(client, times(3)).update(captor.capture());
 
         verify(postPermalinkPolicy, times(1)).permalink(any());
-        verify(postPermalinkPolicy, times(0)).onPermalinkAdd(any());
+        verify(postPermalinkPolicy, times(1)).onPermalinkAdd(any());
         verify(postPermalinkPolicy, times(1)).onPermalinkDelete(any());
         verify(postPermalinkPolicy, times(0)).onPermalinkUpdate(any());
 

File: src/main/java/run/halo/app/theme/finders/PostFinder.java
Patch:
@@ -4,6 +4,7 @@
 import run.halo.app.core.extension.Post;
 import run.halo.app.extension.ListResult;
 import run.halo.app.theme.finders.vo.ContentVo;
+import run.halo.app.theme.finders.vo.NavigationPostVo;
 import run.halo.app.theme.finders.vo.PostArchiveVo;
 import run.halo.app.theme.finders.vo.PostVo;
 
@@ -19,6 +20,8 @@ public interface PostFinder {
 
     ContentVo content(String postName);
 
+    NavigationPostVo cursor(String current);
+
     ListResult<PostVo> list(@Nullable Integer page, @Nullable Integer size);
 
     ListResult<PostVo> listByCategory(@Nullable Integer page, @Nullable Integer size,

File: src/main/java/run/halo/app/theme/router/RadixRouterTree.java
Patch:
@@ -125,7 +125,7 @@ public HandlerFunction<ServerResponse> match(ServerRequest request) {
      * TODO Optimize parameter route matching query.
      * Router 仅匹配请求方法和请求的 URL 路径, 形如 /?p=post-name 是 URL query，而不是 URL 路径的一部分。
      */
-    private String pathToFind(ServerRequest request) {
+    static String pathToFind(ServerRequest request) {
         String requestPath = processRequestPath(request.path());
         MultiValueMap<String, String> queryParams = request.queryParams();
         // 文章的 permalink 规则需要对 p 参数规则特殊处理
@@ -141,6 +141,7 @@ private String pathToFind(ServerRequest request) {
                 requestPath = requestPath.substring(0, i);
             }
         }
+        requestPath = StringUtils.removeEnd(requestPath, "/");
         return StringUtils.prependIfMissing(requestPath, "/");
     }
 
@@ -177,7 +178,7 @@ private static Map<String, String> mergePathVariables(Map<String, String> oldVar
         }
     }
 
-    private String processRequestPath(String requestPath) {
+    private static String processRequestPath(String requestPath) {
         String path = StringUtils.prependIfMissing(requestPath, "/");
         return UriUtils.decode(path, StandardCharsets.UTF_8);
     }

File: src/main/java/run/halo/app/theme/router/strategy/ArchivesRouteStrategy.java
Patch:
@@ -5,6 +5,7 @@
 
 import java.util.List;
 import java.util.Map;
+import org.apache.commons.lang3.StringUtils;
 import org.springframework.stereotype.Component;
 import org.springframework.web.reactive.function.server.HandlerFunction;
 import org.springframework.web.reactive.function.server.ServerRequest;
@@ -64,7 +65,7 @@ public HandlerFunction<ServerResponse> getHandler() {
     @Override
     public List<String> getRouterPaths(String prefix) {
         return List.of(
-            prefix,
+            StringUtils.prependIfMissing(prefix, "/"),
             PathUtils.combinePath(prefix, "/page/{page:\\d+}"),
             PathUtils.combinePath(prefix, "/{year:\\d{4}}"),
             PathUtils.combinePath(prefix, "/{year:\\d{4}}/page/{page:\\d+}"),

File: src/test/java/run/halo/app/security/DefaultUserDetailServiceTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.mockito.ArgumentMatchers.eq;
-import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
@@ -65,7 +64,7 @@ void shouldUpdatePasswordSuccessfully() {
     void shouldReturnErrorWhenFailedToUpdatePassword() {
         var fakeUser = createFakeUserDetails();
 
-        var exception = mock(RuntimeException.class);
+        var exception = new RuntimeException("failed to update password");
         when(userService.updatePassword("faker", "new-fake-password")).thenReturn(
             Mono.error(exception)
         );

File: src/main/java/run/halo/app/theme/router/strategy/CategoriesRouteStrategy.java
Patch:
@@ -36,7 +36,8 @@ private Mono<List<CategoryTreeVo>> categories() {
     public HandlerFunction<ServerResponse> getHandler() {
         return request -> ServerResponse.ok()
             .render(DefaultTemplateEnum.CATEGORIES.getValue(),
-                Map.of("categories", categories()));
+                Map.of("categories", categories(),
+                    ModelConst.TEMPLATE_ID, DefaultTemplateEnum.CATEGORIES.getValue()));
     }
 
     @Override

File: src/main/java/run/halo/app/theme/router/strategy/CategoryRouteStrategy.java
Patch:
@@ -65,7 +65,8 @@ public HandlerFunction<ServerResponse> getHandler(SystemSetting.ThemeRouteRules
             .render(DefaultTemplateEnum.CATEGORY.getValue(),
                 Map.of("name", name,
                     "posts", postListByCategoryName(name, request),
-                    "category", categoryByName(name)));
+                    "category", categoryByName(name),
+                    ModelConst.TEMPLATE_ID, DefaultTemplateEnum.CATEGORY.getValue()));
     }
 
     @Override

File: src/main/java/run/halo/app/theme/router/strategy/IndexRouteStrategy.java
Patch:
@@ -48,7 +48,8 @@ private Mono<UrlContextListResult<PostVo>> postList(ServerRequest request) {
     public HandlerFunction<ServerResponse> getHandler() {
         return request -> ServerResponse.ok()
             .render(DefaultTemplateEnum.INDEX.getValue(),
-                Map.of("posts", postList(request)));
+                Map.of("posts", postList(request),
+                    ModelConst.TEMPLATE_ID, DefaultTemplateEnum.INDEX.getValue()));
     }
 
     @Override

File: src/main/java/run/halo/app/theme/router/strategy/TagRouteStrategy.java
Patch:
@@ -65,7 +65,9 @@ public HandlerFunction<ServerResponse> getHandler(SystemSetting.ThemeRouteRules
             .render(DefaultTemplateEnum.TAG.getValue(),
                 Map.of("name", name,
                     "posts", postList(request, name),
-                    "tag", tagByName(name))
+                    "tag", tagByName(name),
+                    ModelConst.TEMPLATE_ID, DefaultTemplateEnum.TAG.getValue()
+                )
             );
     }
 

File: src/test/java/run/halo/app/theme/dialect/HaloProcessorDialectTest.java
Patch:
@@ -34,6 +34,7 @@
 import run.halo.app.theme.DefaultTemplateEnum;
 import run.halo.app.theme.finders.PostFinder;
 import run.halo.app.theme.finders.vo.PostVo;
+import run.halo.app.theme.router.strategy.ModelConst;
 
 /**
  * Tests for {@link HaloProcessorDialect}.
@@ -128,6 +129,8 @@ void globalHeadAndFooterProcessors() {
     void contentHeadAndFooterAndPostProcessors() {
         Context context = getContext();
         context.setVariable("name", "fake-post");
+        // template id flag is used by TemplateGlobalHeadProcessor
+        context.setVariable(ModelConst.TEMPLATE_ID, DefaultTemplateEnum.POST.getValue());
 
         List<Map<String, String>> htmlMetas = new ArrayList<>();
         htmlMetas.add(ImmutableSortedMap.of("name", "post-meta-V1", "content", "post-meta-V1"));

File: src/main/java/run/halo/app/theme/router/PermalinkRefreshHandler.java
Patch:
@@ -59,7 +59,7 @@ private void updatePostPermalink() {
                 String oldPermalink = post.getStatusOrDefault().getPermalink();
                 String permalink = postPermalinkPolicy.permalink(post);
                 post.getStatusOrDefault().setPermalink(permalink);
-                if (oldPermalink.equals(permalink)) {
+                if (StringUtils.equals(oldPermalink, permalink)) {
                     return;
                 }
                 // update permalink

File: src/main/java/run/halo/app/content/comment/CommentServiceImpl.java
Patch:
@@ -52,7 +52,7 @@ public Mono<ListResult<ListedComment>> listComment(CommentQuery commentQuery) {
                 commentQuery.getPage(), commentQuery.getSize())
             .flatMap(comments -> Flux.fromStream(comments.get()
                     .map(this::toListedComment))
-                .flatMap(Function.identity())
+                .concatMap(Function.identity())
                 .collectList()
                 .map(list -> new ListResult<>(comments.getPage(), comments.getSize(),
                     comments.getTotal(), list)

File: src/main/java/run/halo/app/content/comment/ReplyServiceImpl.java
Patch:
@@ -99,7 +99,7 @@ public Mono<ListResult<ListedReply>> list(ReplyQuery query) {
                 query.getPage(), query.getSize())
             .flatMap(list -> Flux.fromStream(list.get()
                     .map(this::toListedReply))
-                .flatMap(Function.identity())
+                .concatMap(Function.identity())
                 .collectList()
                 .map(listedReplies -> new ListResult<>(list.getPage(), list.getSize(),
                     list.getTotal(), listedReplies))

File: src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -69,7 +69,7 @@ public Mono<ListResult<ListedPost>> listPost(PostQuery query) {
             .flatMap(listResult -> Flux.fromStream(
                         listResult.get().map(this::getListedPost)
                     )
-                    .flatMap(Function.identity())
+                    .concatMap(Function.identity())
                     .collectList()
                     .map(listedPosts -> new ListResult<>(listResult.getPage(), listResult.getSize(),
                         listResult.getTotal(), listedPosts)

File: src/main/java/run/halo/app/content/impl/SinglePageServiceImpl.java
Patch:
@@ -70,7 +70,7 @@ public Mono<ListResult<ListedSinglePage>> list(SinglePageQuery query) {
             .flatMap(listResult -> Flux.fromStream(
                         listResult.get().map(this::getListedSinglePage)
                     )
-                    .flatMap(Function.identity())
+                    .concatMap(Function.identity())
                     .collectList()
                     .map(listedSinglePages -> new ListResult<>(listResult.getPage(),
                         listResult.getSize(),

File: src/main/java/run/halo/app/theme/finders/impl/CommentFinderImpl.java
Patch:
@@ -49,7 +49,7 @@ public ListResult<CommentVo> list(Ref ref, Integer page, Integer size) {
                 defaultComparator(),
                 pageNullSafe(page), sizeNullSafe(size))
             .flatMap(list -> Flux.fromStream(list.get().map(this::toCommentVo))
-                .flatMap(Function.identity())
+                .concatMap(Function.identity())
                 .collectList()
                 .map(commentVos -> new ListResult<>(list.getPage(), list.getSize(), list.getTotal(),
                     commentVos)
@@ -68,7 +68,7 @@ public ListResult<ReplyVo> listReply(String commentName, Integer page, Integer s
                     && Objects.equals(true, reply.getSpec().getApproved()),
                 comparator.reversed(), pageNullSafe(page), sizeNullSafe(size))
             .flatMap(list -> Flux.fromStream(list.get().map(this::toReplyVo))
-                .flatMap(Function.identity())
+                .concatMap(Function.identity())
                 .collectList()
                 .map(replyVos -> new ListResult<>(list.getPage(), list.getSize(), list.getTotal(),
                     replyVos))

File: src/main/java/run/halo/app/security/authentication/pat/PatAuthenticationConverter.java
Patch:
@@ -1,8 +1,8 @@
 package run.halo.app.security.authentication.pat;
 
 import org.springframework.security.core.Authentication;
-import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;
-import org.springframework.security.oauth2.server.resource.web.server.ServerBearerTokenAuthenticationConverter;
+import org.springframework.security.oauth2.server.resource.authentication.BearerTokenAuthenticationToken;
+import org.springframework.security.oauth2.server.resource.web.server.authentication.ServerBearerTokenAuthenticationConverter;
 import org.springframework.security.web.server.authentication.ServerAuthenticationConverter;
 import org.springframework.web.server.ServerWebExchange;
 import reactor.core.publisher.Mono;

File: src/test/java/run/halo/app/core/extension/reconciler/PluginReconcilerTest.java
Patch:
@@ -189,7 +189,7 @@ private ArgumentCaptor<Plugin> doReconcileNeedRequeue() {
         assertThat(result).isNotNull();
         assertThat(result.reEnqueue()).isEqualTo(true);
 
-        verify(extensionClient, times(1)).update(any());
+        verify(extensionClient, times(2)).update(any());
         return pluginCaptor;
     }
 
@@ -202,7 +202,7 @@ private ArgumentCaptor<Plugin> doReconcileWithoutRequeue() {
         assertThat(result).isNotNull();
         assertThat(result.reEnqueue()).isEqualTo(false);
 
-        verify(extensionClient, times(1)).update(any());
+        verify(extensionClient, times(2)).update(any());
         return pluginCaptor;
     }
 

File: src/main/java/run/halo/app/metrics/CounterService.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.metrics;
 
+import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.Counter;
 
 /**
@@ -9,4 +10,6 @@
 public interface CounterService {
 
     Counter getByName(String counterName);
+
+    Mono<Counter> deleteByName(String counterName);
 }

File: src/main/java/run/halo/app/config/ExtensionConfiguration.java
Patch:
@@ -58,7 +58,6 @@
 import run.halo.app.plugin.ExtensionComponentsFinder;
 import run.halo.app.plugin.HaloPluginManager;
 import run.halo.app.plugin.resources.ReverseProxyRouterFunctionRegistry;
-import run.halo.app.theme.router.TemplateRouteManager;
 
 @Configuration(proxyBeanMethods = false)
 public class ExtensionConfiguration {
@@ -196,10 +195,10 @@ Controller attachmentController(ExtensionClient client,
 
         @Bean
         Controller singlePageController(ExtensionClient client, ContentService contentService,
-            ApplicationContext applicationContext, TemplateRouteManager templateRouteManager) {
+            ApplicationContext applicationContext) {
             return new ControllerBuilder("single-page-controller", client)
                 .reconciler(new SinglePageReconciler(client, contentService,
-                    applicationContext, templateRouteManager)
+                    applicationContext)
                 )
                 .extension(new SinglePage())
                 .build();

File: src/main/java/run/halo/app/extension/JSONExtensionConverter.java
Patch:
@@ -92,7 +92,6 @@ private SchemaValidator getValidator(Scheme scheme)
         throws MalformedURLException, ResolutionException {
         var context = new ValidationContext<OAI3>(
             new OAI3Context(new URL("file:/"), scheme.openApiSchema()));
-        context.addValidator("x-validation", ExtraValidationValidator::new);
         context.setFastFail(false);
         return new SchemaValidator(context, null, scheme.openApiSchema());
     }

File: src/main/java/run/halo/app/extension/MetadataOperator.java
Patch:
@@ -17,7 +17,7 @@
 @Schema(implementation = Metadata.class)
 public interface MetadataOperator {
 
-    @Schema(name = "name", description = "Metadata name")
+    @Schema(name = "name", description = "Metadata name", required = true)
     @JsonProperty("name")
     String getName();
 

File: src/main/java/run/halo/app/infra/utils/YamlUnstructuredLoader.java
Patch:
@@ -27,7 +27,8 @@ public class YamlUnstructuredLoader extends YamlProcessor {
     private static final DocumentMatcher DEFAULT_UNSTRUCTURED_MATCHER = properties -> {
         if (properties.containsKey("apiVersion")
             && properties.containsKey("kind")
-            && properties.containsKey("metadata.name")) {
+            && (properties.containsKey("metadata.name")
+            || properties.containsKey("metadata.generateName"))) {
             return YamlProcessor.MatchStatus.FOUND;
         }
         return MatchStatus.NOT_FOUND;

File: src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertThrows;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -85,8 +84,8 @@ void shouldThrowSchemaViolationExceptionWhenNameNotSet() {
         var error = assertThrows(SchemaViolationException.class, () -> converter.convertTo(fake));
         assertEquals(1, error.getErrors().size());
         var result = error.getErrors().items().get(0);
-        // error.getErrors().items().get(0).message();
-        assertTrue(result.toString().contains("name, generateName"));
+        assertEquals(1026, result.code());
+        assertEquals("Field 'name' is required.", result.message());
     }
 
     FakeExtension createFakeExtension(String name, Long version) {

File: src/main/java/run/halo/app/core/extension/endpoint/ThemeEndpoint.java
Patch:
@@ -310,6 +310,7 @@ static Flux<Theme> listAllThemesFromThemeDir(Path themesDir) {
             return walkThemesFromPath(themesDir)
                 .filter(Files::isDirectory)
                 .map(themePath -> loadUnstructured(themePath, THEME_MANIFESTS))
+                .flatMap(Flux::fromIterable)
                 .map(unstructured -> Unstructured.OBJECT_MAPPER.convertValue(unstructured,
                     Theme.class))
                 .sort(Comparator.comparing(theme -> theme.getMetadata().getName()));

File: src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java
Patch:
@@ -84,8 +84,9 @@ void shouldThrowSchemaViolationExceptionWhenNameNotSet() {
         fake.setKind("Fake");
         var error = assertThrows(SchemaViolationException.class, () -> converter.convertTo(fake));
         assertEquals(1, error.getErrors().size());
+        var result = error.getErrors().items().get(0);
         // error.getErrors().items().get(0).message();
-        assertTrue(error.getErrors().items().get(0).toString().contains("'name' is required"));
+        assertTrue(result.toString().contains("name, generateName"));
     }
 
     FakeExtension createFakeExtension(String name, Long version) {

File: src/main/java/run/halo/app/theme/dialect/TemplateHeadProcessor.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.theme.dialect;
 
+import org.pf4j.ExtensionPoint;
 import org.thymeleaf.context.ITemplateContext;
 import org.thymeleaf.model.IModel;
 import org.thymeleaf.processor.element.IElementModelStructureHandler;
@@ -12,7 +13,7 @@
  * @since 2.0.0
  */
 @FunctionalInterface
-public interface TemplateHeadProcessor {
+public interface TemplateHeadProcessor extends ExtensionPoint {
 
     Mono<Void> process(ITemplateContext context, IModel model,
         IElementModelStructureHandler structureHandler);

File: src/test/java/run/halo/app/core/extension/reconciler/PluginReconcilerTest.java
Patch:
@@ -25,7 +25,6 @@
 import run.halo.app.infra.utils.JsonUtils;
 import run.halo.app.plugin.HaloPluginManager;
 import run.halo.app.plugin.PluginStartingError;
-import run.halo.app.plugin.resources.JsBundleRuleProvider;
 
 /**
  * Tests for {@link PluginReconciler}.
@@ -49,8 +48,7 @@ class PluginReconcilerTest {
 
     @BeforeEach
     void setUp() {
-        JsBundleRuleProvider jsBundleRule = new JsBundleRuleProvider(haloPluginManager);
-        pluginReconciler = new PluginReconciler(extensionClient, haloPluginManager, jsBundleRule);
+        pluginReconciler = new PluginReconciler(extensionClient, haloPluginManager);
 
         when(haloPluginManager.getPlugin(any())).thenReturn(pluginWrapper);
         when(haloPluginManager.getUnresolvedPlugins()).thenReturn(List.of());

File: src/test/java/run/halo/app/infra/utils/PathUtilsTest.java
Patch:
@@ -21,6 +21,9 @@ void combinePath() {
             String s = PathUtils.combinePath(segments.split(","));
             assertThat(s).isEqualTo(expected);
         });
+
+        String s = PathUtils.combinePath("a", "", "c");
+        assertThat(s).isEqualTo("/a/c");
     }
 
     private Map<String, String> getCombinePathCases() {

File: src/main/java/run/halo/app/security/authorization/RbacRequestEvaluation.java
Patch:
@@ -125,7 +125,7 @@ protected boolean nonResourceURLMatches(Role.PolicyRule rule, String requestedUR
             if (Objects.equals(ruleURL, requestedURL)) {
                 return true;
             }
-            if (StringUtils.startsWith(ruleURL, WildCard.NonResourceAll)
+            if (StringUtils.endsWith(ruleURL, WildCard.NonResourceAll)
                 && StringUtils.startsWith(requestedURL,
                 StringUtils.stripEnd(ruleURL, WildCard.NonResourceAll))) {
                 return true;

File: src/test/java/run/halo/app/config/ExtensionConfigurationTest.java
Patch:
@@ -6,6 +6,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 import static org.mockito.ArgumentMatchers.anyString;
 import static org.mockito.Mockito.when;
+import static org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf;
 
 import java.time.Instant;
 import java.util.List;
@@ -59,6 +60,8 @@ void setUp() {
 
         // register scheme
         schemeManager.register(FakeExtension.class);
+
+        webClient = webClient.mutateWith(csrf());
     }
 
     @AfterEach

File: src/test/java/run/halo/app/core/extension/endpoint/UserEndpointTest.java
Patch:
@@ -7,6 +7,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
+import static org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf;
 
 import java.util.List;
 import java.util.Set;
@@ -69,6 +70,7 @@ void setUp() {
         var role = new Role();
         role.setRules(List.of(rule));
         when(roleService.getMonoRole("authenticated")).thenReturn(Mono.just(role));
+        webClient = webClient.mutateWith(csrf());
     }
 
     @Nested

File: src/test/java/run/halo/app/security/authentication/jwt/JwtAuthenticationTest.java
Patch:
@@ -5,6 +5,7 @@
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.lenient;
 import static org.mockito.Mockito.when;
+import static org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf;
 
 import java.util.List;
 import org.junit.jupiter.api.BeforeEach;
@@ -41,6 +42,7 @@ class JwtAuthenticationTest {
     void setUp() {
         lenient().when(roleService.getMonoRole(eq(AnonymousUserConst.Role)))
             .thenReturn(Mono.empty());
+        webClient = webClient.mutateWith(csrf());
     }
 
     @Test

File: src/test/java/run/halo/app/security/authentication/jwt/LoginTest.java
Patch:
@@ -4,6 +4,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.mockito.Mockito.when;
+import static org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf;
 
 import com.nimbusds.jwt.JWTClaimNames;
 import org.junit.jupiter.api.BeforeEach;
@@ -41,6 +42,8 @@ void setUp(@Autowired PasswordEncoder passwordEncoder) {
                 .roles("USER")
                 .build()
         ));
+
+        webClient = webClient.mutateWith(csrf());
     }
 
     @Test

File: src/main/java/run/halo/app/plugin/PluginConst.java
Patch:
@@ -11,4 +11,6 @@ public interface PluginConst {
      * Plugin metadata labels key.
      */
     String PLUGIN_NAME_LABEL_NAME = "plugin.halo.run/plugin-name";
+
+    String SYSTEM_PLUGIN_NAME = "system";
 }

File: src/main/java/run/halo/app/plugin/SpringExtensionFactory.java
Patch:
@@ -165,7 +165,9 @@ protected <T> Optional<PluginApplicationContext> getPluginApplicationContextBy(
                 "  Extension class ' " + nameOf(extensionClass) + "' belongs to halo-plugin '"
                     + nameOf(plugin)
                     + "' and will be autowired by using its application context.");
-            applicationContext = ((BasePlugin) plugin).getApplicationContext();
+            applicationContext = ExtensionContextRegistry.getInstance()
+                .getByPluginId(plugin.getWrapper().getPluginId());
+            return Optional.of(applicationContext);
         } else if (this.pluginManager instanceof HaloPluginManager && plugin != null) {
             log.debug("  Extension class ' " + nameOf(extensionClass)
                 + "' belongs to a non halo-plugin (or main application)"

File: src/main/java/run/halo/app/content/impl/PostServiceImpl.java
Patch:
@@ -85,7 +85,7 @@ Stats fetchStats(Post post) {
         return Stats.builder()
             .visit(counter.getVisit())
             .upvote(counter.getUpvote())
-            .totalComment(counter.getApprovedComment())
+            .totalComment(counter.getTotalComment())
             .approvedComment(counter.getApprovedComment())
             .build();
     }

File: src/main/java/run/halo/app/content/impl/SinglePageServiceImpl.java
Patch:
@@ -218,7 +218,7 @@ Stats fetchStats(SinglePage singlePage) {
         return Stats.builder()
             .visit(counter.getVisit())
             .upvote(counter.getUpvote())
-            .totalComment(counter.getApprovedComment())
+            .totalComment(counter.getTotalComment())
             .approvedComment(counter.getApprovedComment())
             .build();
     }

File: src/main/java/run/halo/app/core/extension/Role.java
Patch:
@@ -143,8 +143,6 @@ public static class Builder {
 
             String[] verbs;
 
-            String pluginName;
-
             public Builder apiGroups(String... apiGroups) {
                 this.apiGroups = apiGroups;
                 return this;

File: src/main/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpoint.java
Patch:
@@ -59,7 +59,7 @@ public AttachmentEndpoint(ReactiveExtensionClient client, PluginManager pluginMa
 
     @Override
     public RouterFunction<ServerResponse> endpoint() {
-        var tag = "storage.halo.run/v1alpha1/Attachment";
+        var tag = "api.console.halo.run/v1alpha1/Attachment";
         return SpringdocRouteBuilder.route()
             .POST("/attachments/upload", contentType(MediaType.MULTIPART_FORM_DATA), this::upload,
                 builder -> builder

File: src/main/java/run/halo/app/core/extension/reconciler/PostReconciler.java
Patch:
@@ -110,7 +110,8 @@ private void reconcileStatus(String name) {
             }
             if (excerpt.getAutoGenerate()) {
                 contentService.getContent(spec.getReleaseSnapshot())
-                    .subscribe(content -> {
+                    .blockOptional()
+                    .ifPresent(content -> {
                         String contentRevised = content.content();
                         status.setExcerpt(getExcerpt(contentRevised));
                     });

File: src/main/java/run/halo/app/core/extension/service/DefaultRoleService.java
Patch:
@@ -74,7 +74,8 @@ public List<Role> listDependencies(Set<String> names) {
             }
             visited.add(roleName);
             extensionClient.fetch(Role.class, roleName)
-                .subscribe(role -> {
+                .blockOptional()
+                .ifPresent(role -> {
                     result.add(role);
                     Map<String, String> annotations = role.getMetadata().getAnnotations();
                     if (annotations != null) {

File: src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.core.extension.service;
 
+import java.util.Set;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.Role;
@@ -14,4 +15,6 @@ public interface UserService {
     Mono<User> updateWithRawPassword(String username, String rawPassword);
 
     Flux<Role> listRoles(String username);
+
+    Mono<User> grantRoles(String username, Set<String> roles);
 }

File: src/main/java/run/halo/app/Application.java
Patch:
@@ -4,6 +4,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
+import org.springframework.scheduling.annotation.EnableScheduling;
 import run.halo.app.infra.properties.HaloProperties;
 import run.halo.app.infra.properties.JwtProperties;
 
@@ -15,6 +16,7 @@
  * @author guqing
  * @date 2017-11-14
  */
+@EnableScheduling
 @SpringBootApplication(scanBasePackages = "run.halo.app", exclude =
     IntegrationAutoConfiguration.class)
 @EnableConfigurationProperties({HaloProperties.class, JwtProperties.class})

File: src/main/java/run/halo/app/content/ListedPost.java
Patch:
@@ -28,4 +28,7 @@ public class ListedPost {
 
     @Schema(required = true)
     private List<Contributor> contributors;
+
+    @Schema(required = true)
+    private Stats stats;
 }

File: src/main/java/run/halo/app/content/ListedSinglePage.java
Patch:
@@ -20,4 +20,7 @@ public class ListedSinglePage {
 
     @Schema(required = true)
     private List<Contributor> contributors;
+
+    @Schema(required = true)
+    private Stats stats;
 }

File: src/main/java/run/halo/app/infra/SchemeInitializer.java
Patch:
@@ -6,6 +6,7 @@
 import org.springframework.stereotype.Component;
 import run.halo.app.core.extension.Category;
 import run.halo.app.core.extension.Comment;
+import run.halo.app.core.extension.Counter;
 import run.halo.app.core.extension.Menu;
 import run.halo.app.core.extension.MenuItem;
 import run.halo.app.core.extension.Plugin;
@@ -62,5 +63,7 @@ public void onApplicationEvent(@NonNull ApplicationStartedEvent event) {
         schemeManager.register(Policy.class);
         schemeManager.register(Attachment.class);
         schemeManager.register(PolicyTemplate.class);
+        // metrics.halo.run
+        schemeManager.register(Counter.class);
     }
 }

File: src/main/java/run/halo/app/theme/dialect/GlobalHeadInjectionProcessor.java
Patch:
@@ -68,7 +68,7 @@ protected void doProcess(ITemplateContext context, IModel model,
             getTemplateHeadProcessors(appCtx);
         for (TemplateHeadProcessor processor : templateHeadProcessors) {
             processor.process(context, modelToInsert, structureHandler)
-                .subscribe();
+                .block();
         }
 
         // add to target model

File: src/main/java/run/halo/app/theme/endpoint/CommentFinderEndpoint.java
Patch:
@@ -26,13 +26,13 @@
 import run.halo.app.content.comment.ReplyService;
 import run.halo.app.core.extension.Comment;
 import run.halo.app.core.extension.Reply;
-import run.halo.app.core.extension.endpoint.CommentEndpoint;
 import run.halo.app.core.extension.endpoint.CustomEndpoint;
 import run.halo.app.extension.GroupVersion;
 import run.halo.app.extension.ListResult;
 import run.halo.app.extension.Ref;
 import run.halo.app.extension.router.IListRequest;
 import run.halo.app.extension.router.QueryParamBuildUtil;
+import run.halo.app.infra.utils.HaloUtils;
 import run.halo.app.infra.utils.IpAddressUtils;
 import run.halo.app.theme.finders.CommentFinder;
 import run.halo.app.theme.finders.vo.CommentVo;
@@ -145,7 +145,7 @@ Mono<ServerResponse> createComment(ServerRequest request) {
             .flatMap(commentRequest -> {
                 Comment comment = commentRequest.toComment();
                 comment.getSpec().setIpAddress(IpAddressUtils.getIpAddress(request));
-                comment.getSpec().setUserAgent(CommentEndpoint.userAgentFrom(request));
+                comment.getSpec().setUserAgent(HaloUtils.userAgentFrom(request));
                 return commentService.create(comment);
             })
             .flatMap(comment -> ServerResponse.ok().bodyValue(comment));
@@ -157,7 +157,7 @@ Mono<ServerResponse> createReply(ServerRequest request) {
             .flatMap(replyRequest -> {
                 Reply reply = replyRequest.toReply();
                 reply.getSpec().setIpAddress(IpAddressUtils.getIpAddress(request));
-                reply.getSpec().setUserAgent(CommentEndpoint.userAgentFrom(request));
+                reply.getSpec().setUserAgent(HaloUtils.userAgentFrom(request));
                 return replyService.create(commentName, reply);
             })
             .flatMap(comment -> ServerResponse.ok().bodyValue(comment));

File: src/main/java/run/halo/app/theme/finders/vo/PostVo.java
Patch:
@@ -35,6 +35,8 @@ public class PostVo {
 
     private List<Contributor> contributors;
 
+    private StatsVo stats;
+
     /**
      * Convert {@link Post} to {@link PostVo}.
      *

File: src/main/java/run/halo/app/theme/finders/vo/SinglePageVo.java
Patch:
@@ -29,6 +29,8 @@ public class SinglePageVo {
 
     private ContentVo content;
 
+    private StatsVo stats;
+
     private List<Contributor> contributors;
 
     /**

File: src/main/java/run/halo/app/content/comment/CommentServiceImpl.java
Patch:
@@ -81,7 +81,7 @@ public Mono<Comment> create(Comment comment) {
                 }
                 comment.getSpec()
                     .setApproved(Boolean.FALSE.equals(commentSetting.getRequireReviewForNew()));
-                comment.getSpec().setHidden(!comment.getSpec().getApproved());
+                comment.getSpec().setHidden(false);
                 if (comment.getSpec().getOwner() != null) {
                     return Mono.just(comment);
                 }

File: src/test/java/run/halo/app/content/comment/CommentServiceImplTest.java
Patch:
@@ -141,7 +141,7 @@ void create() throws JSONException {
                         "top": false,
                         "allowNotification": true,
                         "approved": false,
-                        "hidden": true,
+                        "hidden": false,
                         "subjectRef": {
                             "group": "content.halo.run",
                             "version": "v1alpha1",

File: src/test/java/run/halo/app/core/extension/service/UserServiceImplTest.java
Patch:
@@ -229,19 +229,18 @@ void shouldUpdatePasswordWithDifferentPassword() {
 
         @Test
         void shouldUpdatePasswordIfNoPasswordBefore() {
-            var oldUser = createUser("");
+            var oldUser = createUser(null);
             var newUser = createUser("new-password");
 
             when(client.get(User.class, "fake-user")).thenReturn(Mono.just(oldUser));
             when(client.update(oldUser)).thenReturn(Mono.just(newUser));
-            when(passwordEncoder.matches("new-password", "")).thenReturn(false);
             when(passwordEncoder.encode("new-password")).thenReturn("encoded-new-password");
 
             StepVerifier.create(userService.updateWithRawPassword("fake-user", "new-password"))
                 .expectNext(newUser)
                 .verifyComplete();
 
-            verify(passwordEncoder).matches("new-password", "");
+            verify(passwordEncoder, never()).matches("new-password", null);
             verify(passwordEncoder).encode("new-password");
             verify(client).update(argThat(extension -> {
                 var user = (User) extension;

File: src/main/java/run/halo/app/core/extension/Tag.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import io.swagger.v3.oas.annotations.media.Schema;
-import java.util.List;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
@@ -69,6 +68,8 @@ public static class TagStatus {
 
         private String permalink;
 
-        private List<Post.CompactPost> posts;
+        public Integer visiblePostCount;
+
+        public Integer postCount;
     }
 }

File: src/main/java/run/halo/app/theme/engine/SpringWebFluxTemplateEngine.java
Patch:
@@ -200,7 +200,6 @@ private Mono<DataBuffer> createFullStream(
                     try {
 
                         process(templateName, markupSelectors, context, writer);
-                        Mono.empty().block();
 
                     } catch (final Throwable t) {
                         logger.error(

File: src/main/java/run/halo/app/content/PostSorter.java
Patch:
@@ -73,7 +73,6 @@ static Comparator<Post> defaultComparator() {
         Function<Post, Instant> createTime =
             post -> post.getMetadata().getCreationTimestamp();
         return Comparator.comparing(createTime)
-            .thenComparing(name)
-            .reversed();
+            .thenComparing(name);
     }
 }

File: src/main/java/run/halo/app/core/extension/reconciler/SinglePageReconciler.java
Patch:
@@ -172,7 +172,8 @@ private void reconcileStatus(String name) {
 
             if (excerpt.getAutoGenerate()) {
                 contentService.getContent(spec.getHeadSnapshot())
-                    .subscribe(content -> {
+                    .blockOptional()
+                    .ifPresent(content -> {
                         String contentRevised = content.content();
                         status.setExcerpt(getExcerpt(contentRevised));
                     });
@@ -184,7 +185,7 @@ private void reconcileStatus(String name) {
             String headSnapshot = singlePage.getSpec().getHeadSnapshot();
             contentService.listSnapshots(Snapshot.SubjectRef.of(SinglePage.KIND, name))
                 .collectList()
-                .subscribe(snapshots -> {
+                .blockOptional().ifPresent(snapshots -> {
                     List<String> contributors = snapshots.stream()
                         .map(snapshot -> {
                             Set<String> usernames = snapshot.getSpec().getContributors();

File: src/main/java/run/halo/app/core/extension/reconciler/PostReconciler.java
Patch:
@@ -122,7 +122,8 @@ private void reconcileStatus(String name) {
             String headSnapshot = post.getSpec().getHeadSnapshot();
             contentService.listSnapshots(Snapshot.SubjectRef.of(Post.KIND, name))
                 .collectList()
-                .subscribe(snapshots -> {
+                .blockOptional()
+                .ifPresent(snapshots -> {
                     List<String> contributors = snapshots.stream()
                         .map(snapshot -> {
                             Set<String> usernames = snapshot.getSpec().getContributors();
@@ -143,6 +144,7 @@ private void reconcileStatus(String name) {
                         .ifPresent(snapshot -> {
                             status.setInProgress(!isPublished(snapshot));
                         });
+
                 });
 
             // handle cancel publish,has released version and published is false and not handled

File: src/main/java/run/halo/app/core/extension/reconciler/PostReconciler.java
Patch:
@@ -109,7 +109,7 @@ private void reconcileStatus(String name) {
                 spec.setExcerpt(excerpt);
             }
             if (excerpt.getAutoGenerate()) {
-                contentService.getContent(spec.getHeadSnapshot())
+                contentService.getContent(spec.getReleaseSnapshot())
                     .subscribe(content -> {
                         String contentRevised = content.content();
                         status.setExcerpt(getExcerpt(contentRevised));

File: src/main/java/run/halo/app/theme/dialect/HaloProcessorDialect.java
Patch:
@@ -28,6 +28,7 @@ public Set<IProcessor> getProcessors(String dialectPrefix) {
         processors.add(new GlobalHeadInjectionProcessor(dialectPrefix));
         processors.add(new TemplateFooterElementTagProcessor(dialectPrefix));
         processors.add(new JsonNodePropertyAccessorBoundariesProcessor());
+        processors.add(new CommentElementTagProcessor(dialectPrefix));
         return processors;
     }
 }

File: src/test/java/run/halo/app/content/comment/CommentServiceImplTest.java
Patch:
@@ -141,7 +141,7 @@ void create() throws JSONException {
                         "top": false,
                         "allowNotification": true,
                         "approved": false,
-                        "hidden": false,
+                        "hidden": true,
                         "subjectRef": {
                             "group": "content.halo.run",
                             "version": "v1alpha1",

File: src/main/java/run/halo/app/config/WebServerSecurityConfig.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.List;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
 import org.springframework.core.Ordered;
 import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpHeaders;
@@ -48,6 +49,7 @@
  *
  * @author johnniang
  */
+@Configuration
 @EnableWebFluxSecurity
 public class WebServerSecurityConfig {
 

File: src/main/java/run/halo/app/theme/ThemeLinkBuilder.java
Patch:
@@ -11,8 +11,8 @@
  * @since 2.0.0
  */
 public class ThemeLinkBuilder extends StandardLinkBuilder {
-    private static final String THEME_ASSETS_PREFIX = "/assets";
-    private static final String THEME_PREVIEW_PREFIX = "/themes";
+    public static final String THEME_ASSETS_PREFIX = "/assets";
+    public static final String THEME_PREVIEW_PREFIX = "/themes";
 
     private final ThemeContext theme;
 

File: src/main/java/run/halo/app/infra/properties/HaloProperties.java
Patch:
@@ -39,4 +39,7 @@ public class HaloProperties {
 
     @Valid
     private final SecurityProperties security = new SecurityProperties();
+
+    @Valid
+    private final ConsoleProperties console = new ConsoleProperties();
 }

File: src/main/java/run/halo/app/infra/SystemSetting.java
Patch:
@@ -9,6 +9,7 @@
  * @since 2.0.0
  */
 public class SystemSetting {
+    public static final String SYSTEM_CONFIG_DEFAULT = "system-default";
     public static final String SYSTEM_CONFIG = "system";
 
     @Data

File: src/main/java/run/halo/app/plugin/SettingFetcher.java
Patch:
@@ -16,7 +16,7 @@
 import run.halo.app.infra.utils.JsonUtils;
 
 /**
- * <p>A value fetcher for pPlugin form configuration.</p>
+ * <p>A value fetcher for plugin form configuration.</p>
  *
  * @author guqing
  * @since 2.0.0

File: src/main/java/run/halo/app/config/WebFluxConfig.java
Patch:
@@ -65,8 +65,7 @@ public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {
     @Bean
     RouterFunction<ServerResponse> customEndpoints(ApplicationContext context) {
         var builder = new CustomEndpointsBuilder();
-        context.getBeansOfType(CustomEndpoint.class).values()
-            .forEach(customEndpoint -> builder.add(customEndpoint.endpoint()));
+        context.getBeansOfType(CustomEndpoint.class).values().forEach(builder::add);
         return builder.build();
     }
 

File: src/main/java/run/halo/app/config/SwaggerConfig.java
Patch:
@@ -43,7 +43,7 @@ GroupedOpenApi extensionApi() {
             .group("extension-api")
             .displayName("Extension APIs")
             .pathsToMatch("/apis/**")
-            .pathsToExclude("/apis/api.halo.run/**", "/apis/plugin.api.halo.run/**")
+            .pathsToExclude("/apis/api.console.halo.run/**", "/apis/api.plugin.halo.run/**")
             .build();
     }
 
@@ -52,7 +52,7 @@ GroupedOpenApi systemCustomApi() {
         return GroupedOpenApi.builder()
             .group("core-custom-api")
             .displayName("Custom APIs in Core")
-            .pathsToMatch("/apis/api.halo.run/**")
+            .pathsToMatch("/apis/api.console.halo.run/**")
             .build();
     }
 
@@ -61,7 +61,7 @@ GroupedOpenApi pluginCustomApi() {
         return GroupedOpenApi.builder()
             .group("plugin-custom-api")
             .displayName("Custom APIs in Plugin")
-            .pathsToMatch("/apis/plugin.api.halo.run/**")
+            .pathsToMatch("/apis/api.plugin.halo.run/**")
             .build();
     }
 

File: src/main/java/run/halo/app/core/extension/endpoint/CommentEndpoint.java
Patch:
@@ -48,7 +48,7 @@ public CommentEndpoint(CommentService commentService, ReplyService replyService)
 
     @Override
     public RouterFunction<ServerResponse> endpoint() {
-        final var tag = "api.halo.run/v1alpha1/Comment";
+        final var tag = "api.console.halo.run/v1alpha1/Comment";
         return SpringdocRouteBuilder.route()
             .GET("comments", this::listComments, builder -> {
                     builder.operationId("ListComments")

File: src/main/java/run/halo/app/core/extension/endpoint/ContentEndpoint.java
Patch:
@@ -36,7 +36,7 @@ public ContentEndpoint(ContentService contentService) {
 
     @Override
     public RouterFunction<ServerResponse> endpoint() {
-        final var tag = "api.halo.run/v1alpha1/Content";
+        final var tag = "api.console.halo.run/v1alpha1/Content";
         return SpringdocRouteBuilder.route()
             .GET("contents/{snapshotName}", this::obtainContent,
                 builder -> builder.operationId("ObtainSnapshotContent")

File: src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java
Patch:
@@ -22,12 +22,12 @@ public CustomEndpointsBuilder add(RouterFunction<ServerResponse> routerFunction)
 
     public RouterFunction<ServerResponse> build() {
         return SpringdocRouteBuilder.route()
-            .nest(RequestPredicates.path("/apis/api.halo.run/v1alpha1"),
+            .nest(RequestPredicates.path("/apis/api.console.halo.run/v1alpha1"),
                 () -> routerFunctions.stream().reduce(RouterFunction::and).orElse(null),
                 builder -> builder
                     .operationId("CustomEndpoints")
                     .description("Custom endpoints")
-                    .tag("api.halo.run/v1alpha1/CustomEndpoint"))
+                    .tag("api.console.halo.run/v1alpha1/CustomEndpoint"))
             .build();
     }
 }

File: src/main/java/run/halo/app/core/extension/endpoint/PluginEndpoint.java
Patch:
@@ -44,7 +44,7 @@ public PluginEndpoint(PluginProperties pluginProperties, ReactiveExtensionClient
 
     @Override
     public RouterFunction<ServerResponse> endpoint() {
-        final var tag = "api.halo.run/v1alpha1/Plugin";
+        final var tag = "api.console.halo.run/v1alpha1/Plugin";
         return SpringdocRouteBuilder.route()
             .POST("plugins/install", contentType(MediaType.MULTIPART_FORM_DATA),
                 this::install, builder -> builder.operationId("InstallPlugin")

File: src/main/java/run/halo/app/core/extension/endpoint/PostEndpoint.java
Patch:
@@ -39,7 +39,7 @@ public PostEndpoint(PostService postService) {
 
     @Override
     public RouterFunction<ServerResponse> endpoint() {
-        final var tag = "api.halo.run/v1alpha1/Post";
+        final var tag = "api.console.halo.run/v1alpha1/Post";
         return SpringdocRouteBuilder.route()
             .GET("posts", this::listPost, builder -> {
                     builder.operationId("ListPosts")

File: src/main/java/run/halo/app/core/extension/endpoint/ReplyEndpoint.java
Patch:
@@ -32,7 +32,7 @@ public ReplyEndpoint(ReplyService replyService) {
 
     @Override
     public RouterFunction<ServerResponse> endpoint() {
-        final var tag = "api.halo.run/v1alpha1/Reply";
+        final var tag = "api.console.halo.run/v1alpha1/Reply";
         return SpringdocRouteBuilder.route()
             .GET("replies", this::listReplies, builder -> {
                     builder.operationId("ListReplies")

File: src/main/java/run/halo/app/core/extension/endpoint/SinglePageEndpoint.java
Patch:
@@ -39,7 +39,7 @@ public SinglePageEndpoint(SinglePageService singlePageService) {
 
     @Override
     public RouterFunction<ServerResponse> endpoint() {
-        final var tag = "api.halo.run/v1alpha1/SinglePage";
+        final var tag = "api.console.halo.run/v1alpha1/SinglePage";
         return SpringdocRouteBuilder.route()
             .GET("singlepages", this::listSinglePage, builder -> {
                     builder.operationId("ListSinglePages")

File: src/main/java/run/halo/app/core/extension/endpoint/ThemeEndpoint.java
Patch:
@@ -71,7 +71,7 @@ public ThemeEndpoint(ReactiveExtensionClient client, HaloProperties haloProperti
 
     @Override
     public RouterFunction<ServerResponse> endpoint() {
-        final var tag = "api.halo.run/v1alpha1/Theme";
+        final var tag = "api.console.halo.run/v1alpha1/Theme";
         return SpringdocRouteBuilder.route()
             .POST("themes/install", contentType(MediaType.MULTIPART_FORM_DATA),
                 this::install, builder -> builder.operationId("InstallTheme")

File: src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java
Patch:
@@ -47,7 +47,7 @@ public UserEndpoint(ReactiveExtensionClient client, UserService userService) {
 
     @Override
     public RouterFunction<ServerResponse> endpoint() {
-        var tag = "api.halo.run/v1alpha1/User";
+        var tag = "api.console.halo.run/v1alpha1/User";
         return SpringdocRouteBuilder.route()
             .GET("/users/-", this::me, builder -> builder.operationId("GetCurrentUserDetail")
                 .description("Get current user detail")

File: src/main/java/run/halo/app/plugin/PluginRequestMappingHandlerMapping.java
Patch:
@@ -128,7 +128,7 @@ protected RequestMappingInfo getPluginMappingForMethod(String pluginId,
 
     protected String buildPrefix(String pluginId, String version) {
         GroupVersion groupVersion = GroupVersion.parseAPIVersion(version);
-        return String.format("/apis/plugin.api.halo.run/%s/plugins/%s", groupVersion.version(),
+        return String.format("/apis/api.plugin.halo.run/%s/plugins/%s", groupVersion.version(),
             pluginId);
     }
 }

File: src/main/java/run/halo/app/theme/finders/CommentFinder.java
Patch:
@@ -3,6 +3,7 @@
 import org.springframework.lang.Nullable;
 import run.halo.app.core.extension.Comment;
 import run.halo.app.extension.ListResult;
+import run.halo.app.extension.Ref;
 import run.halo.app.theme.finders.vo.CommentVo;
 import run.halo.app.theme.finders.vo.ReplyVo;
 
@@ -16,7 +17,7 @@ public interface CommentFinder {
 
     CommentVo getByName(String name);
 
-    ListResult<CommentVo> list(Comment.CommentSubjectRef ref, @Nullable Integer page,
+    ListResult<CommentVo> list(Ref ref, @Nullable Integer page,
         @Nullable Integer size);
 
     ListResult<ReplyVo> listReply(String commentName, @Nullable Integer page,

File: src/main/java/run/halo/app/core/extension/Tag.java
Patch:
@@ -69,6 +69,6 @@ public static class TagStatus {
 
         private String permalink;
 
-        private List<String> posts;
+        private List<Post.CompactPost> posts;
     }
 }

File: src/main/java/run/halo/app/Application.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;
 import org.springframework.boot.context.properties.EnableConfigurationProperties;
 import run.halo.app.infra.properties.HaloProperties;
 import run.halo.app.infra.properties.JwtProperties;
@@ -14,7 +15,8 @@
  * @author guqing
  * @date 2017-11-14
  */
-@SpringBootApplication
+@SpringBootApplication(scanBasePackages = "run.halo.app", exclude =
+    IntegrationAutoConfiguration.class)
 @EnableConfigurationProperties({HaloProperties.class, JwtProperties.class})
 public class Application {
 

File: src/main/java/run/halo/app/theme/dialect/HaloProcessorDialect.java
Patch:
@@ -13,7 +13,7 @@
  * @since 2.0.0
  */
 public class HaloProcessorDialect extends AbstractProcessorDialect {
-    private static final String DIALECT_NAME = "Halo Theme Dialect";
+    private static final String DIALECT_NAME = "haloThemeProcessorDialect";
 
     public HaloProcessorDialect() {
         // We will set this dialect the same "dialect processor" precedence as
@@ -27,6 +27,7 @@ public Set<IProcessor> getProcessors(String dialectPrefix) {
         // add more processors
         processors.add(new GlobalHeadInjectionProcessor(dialectPrefix));
         processors.add(new TemplateFooterElementTagProcessor(dialectPrefix));
+        processors.add(new JsonNodePropertyAccessorBoundariesProcessor());
         return processors;
     }
 }

File: src/main/java/run/halo/app/content/permalinks/CategoryPermalinkPolicy.java
Patch:
@@ -58,8 +58,8 @@ public void onPermalinkUpdate(Category category) {
 
     @Override
     public void onPermalinkDelete(Category category) {
-        applicationContext.publishEvent(new PermalinkIndexDeleteCommand(this, getLocator(category),
-            category.getStatusOrDefault().getPermalink()));
+        applicationContext.publishEvent(
+            new PermalinkIndexDeleteCommand(this, getLocator(category)));
     }
 
     private ExtensionLocator getLocator(Category category) {

File: src/main/java/run/halo/app/content/permalinks/TagPermalinkPolicy.java
Patch:
@@ -57,8 +57,7 @@ public void onPermalinkUpdate(Tag tag) {
 
     @Override
     public void onPermalinkDelete(Tag tag) {
-        applicationContext.publishEvent(new PermalinkIndexDeleteCommand(this, getLocator(tag),
-            tag.getStatusOrDefault().getPermalink()));
+        applicationContext.publishEvent(new PermalinkIndexDeleteCommand(this, getLocator(tag)));
     }
 
     private ExtensionLocator getLocator(Tag tag) {

File: src/main/java/run/halo/app/core/extension/reconciler/SinglePageReconciler.java
Patch:
@@ -133,8 +133,7 @@ private void permalinkOnDelete(SinglePage singlePage) {
             .setPermalink(PathUtils.combinePath(singlePage.getSpec().getSlug()));
         ExtensionLocator locator = new ExtensionLocator(GVK, singlePage.getMetadata().getName(),
             singlePage.getSpec().getSlug());
-        applicationContext.publishEvent(new PermalinkIndexDeleteCommand(this, locator,
-            singlePage.getStatusOrDefault().getPermalink()));
+        applicationContext.publishEvent(new PermalinkIndexDeleteCommand(this, locator));
         templateRouteManager.changeTemplatePattern(DefaultTemplateEnum.SINGLE_PAGE.getValue());
     }
 

File: src/main/java/run/halo/app/theme/router/strategy/IndexRouteStrategy.java
Patch:
@@ -39,7 +39,7 @@ public IndexRouteStrategy(PostFinder postFinder) {
     @Override
     public RouterFunction<ServerResponse> getRouteFunction(String template, String pattern) {
         return RouterFunctions
-            .route(GET("/").or(GET("/page/{page}"))
+            .route(GET("/").or(GET("/page/{page:\\d+}"))
                     .and(accept(MediaType.TEXT_HTML)),
                 request -> ServerResponse.ok()
                     .render(DefaultTemplateEnum.INDEX.getValue(),

File: src/main/java/run/halo/app/theme/router/strategy/SinglePageRouteStrategy.java
Patch:
@@ -4,7 +4,6 @@
 
 import java.util.List;
 import java.util.Map;
-import java.util.Objects;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.http.MediaType;
 import org.springframework.stereotype.Component;
@@ -48,8 +47,7 @@ public RouterFunction<ServerResponse> getRouteFunction(String template, String p
 
         RequestPredicate requestPredicate = request -> false;
 
-        List<String> permalinks =
-            Objects.requireNonNullElse(permalinkIndexer.getPermalinks(gvk), List.of());
+        List<String> permalinks = permalinkIndexer.getPermalinks(gvk);
         for (String permalink : permalinks) {
             requestPredicate = requestPredicate.or(RequestPredicates.GET(permalink));
         }

File: src/main/java/run/halo/app/theme/finders/vo/ContentVo.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.theme.finders.vo;
 
 import lombok.Builder;
+import lombok.ToString;
 import lombok.Value;
 import run.halo.app.core.extension.Snapshot;
 
@@ -11,6 +12,7 @@
  * @since 2.0.0
  */
 @Value
+@ToString
 @Builder
 public class ContentVo {
 

File: src/main/java/run/halo/app/theme/finders/vo/Contributor.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.theme.finders.vo;
 
 import lombok.Builder;
+import lombok.ToString;
 import lombok.Value;
 import run.halo.app.core.extension.User;
 
@@ -11,6 +12,7 @@
  * @since 2.0.0
  */
 @Value
+@ToString
 @Builder
 public class Contributor {
     String name;

File: src/main/java/run/halo/app/infra/utils/HaloUtils.java
Patch:
@@ -3,13 +3,15 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.nio.charset.StandardCharsets;
+import lombok.extern.slf4j.Slf4j;
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.util.StreamUtils;
 
 /**
  * @author guqing
  * @date 2022-04-12
  */
+@Slf4j
 public class HaloUtils {
 
     /**
@@ -28,4 +30,5 @@ public static String readClassPathResourceAsString(String location) {
                     location), e);
         }
     }
+
 }

File: src/main/java/run/halo/app/core/extension/MenuItem.java
Patch:
@@ -49,8 +49,8 @@ public static class MenuItemSpec {
         @Schema(description = "Post reference.")
         private Ref postRef;
 
-        @Schema(description = "Page reference.")
-        private Ref pageRef;
+        @Schema(description = "SinglePage reference.")
+        private Ref singlePageRef;
 
     }
 

File: src/main/java/run/halo/app/infra/SchemeInitializer.java
Patch:
@@ -15,6 +15,7 @@
 import run.halo.app.core.extension.Role;
 import run.halo.app.core.extension.RoleBinding;
 import run.halo.app.core.extension.Setting;
+import run.halo.app.core.extension.SinglePage;
 import run.halo.app.core.extension.Snapshot;
 import run.halo.app.core.extension.Tag;
 import run.halo.app.core.extension.Theme;
@@ -55,6 +56,7 @@ public void onApplicationEvent(@NonNull ApplicationStartedEvent event) {
         schemeManager.register(Snapshot.class);
         schemeManager.register(Comment.class);
         schemeManager.register(Reply.class);
+        schemeManager.register(SinglePage.class);
         // storage.halo.run
         schemeManager.register(Group.class);
         schemeManager.register(Policy.class);

File: src/main/java/run/halo/app/theme/DefaultTemplateEnum.java
Patch:
@@ -17,7 +17,9 @@ public enum DefaultTemplateEnum {
 
     TAG("tag"),
 
-    TAGS("tags");
+    TAGS("tags"),
+
+    SINGLE_PAGE("page");
 
     private final String value;
 

File: src/main/java/run/halo/app/theme/router/PermalinkPatternProvider.java
Patch:
@@ -51,7 +51,7 @@ private SystemSetting.ThemeRouteRules getPermalinkRules() {
     public String getPattern(DefaultTemplateEnum defaultTemplateEnum) {
         SystemSetting.ThemeRouteRules permalinkRules = getPermalinkRules();
         return switch (defaultTemplateEnum) {
-            case INDEX -> null;
+            case INDEX, SINGLE_PAGE -> null;
             case POST -> permalinkRules.getPost();
             case ARCHIVES -> permalinkRules.getArchives();
             case CATEGORY, CATEGORIES -> permalinkRules.getCategories();

File: src/main/java/run/halo/app/theme/router/TemplateRouteManager.java
Patch:
@@ -16,6 +16,7 @@
 import run.halo.app.theme.router.strategy.CategoryRouteStrategy;
 import run.halo.app.theme.router.strategy.IndexRouteStrategy;
 import run.halo.app.theme.router.strategy.PostRouteStrategy;
+import run.halo.app.theme.router.strategy.SinglePageRouteStrategy;
 import run.halo.app.theme.router.strategy.TagRouteStrategy;
 import run.halo.app.theme.router.strategy.TagsRouteStrategy;
 
@@ -113,6 +114,7 @@ private TemplateRouterStrategy templateRouterStrategy(String template) {
             case TAG -> new TagRouteStrategy(permalinkIndexer);
             case CATEGORIES -> new CategoriesRouteStrategy();
             case CATEGORY -> new CategoryRouteStrategy(permalinkIndexer);
+            case SINGLE_PAGE -> new SinglePageRouteStrategy(permalinkIndexer);
         };
     }
 

File: src/main/java/run/halo/app/theme/TemplateEngineManager.java
Patch:
@@ -12,6 +12,7 @@
 import org.thymeleaf.templateresolver.FileTemplateResolver;
 import org.thymeleaf.templateresolver.ITemplateResolver;
 import run.halo.app.infra.exception.NotFoundException;
+import run.halo.app.theme.dialect.HaloProcessorDialect;
 import run.halo.app.theme.engine.SpringWebFluxTemplateEngine;
 import run.halo.app.theme.message.ThemeMessageResolver;
 
@@ -80,6 +81,7 @@ private ISpringWebFluxTemplateEngine templateEngineGenerator(ThemeContext theme)
         var mainResolver = haloTemplateResolver();
         mainResolver.setPrefix(theme.getPath() + "/templates/");
         engine.addTemplateResolver(mainResolver);
+        engine.addDialect(new HaloProcessorDialect());
 
         templateResolvers.orderedStream().forEach(engine::addTemplateResolver);
         dialects.orderedStream().forEach(engine::addDialect);

File: src/main/java/run/halo/app/theme/router/PermalinkPatternProvider.java
Patch:
@@ -28,9 +28,10 @@ private SystemSetting.ThemeRouteRules getPermalinkRules() {
         return client.fetch(ConfigMap.class, SystemSetting.SYSTEM_CONFIG)
             .map(configMap -> {
                 Map<String, String> data = configMap.getData();
-                String routeRulesJson = data.get(SystemSetting.ThemeRouteRules.GROUP);
-                return JsonUtils.jsonToObject(routeRulesJson, SystemSetting.ThemeRouteRules.class);
+                return data.get(SystemSetting.ThemeRouteRules.GROUP);
             })
+            .map(routeRulesJson -> JsonUtils.jsonToObject(routeRulesJson,
+                SystemSetting.ThemeRouteRules.class))
             .orElseGet(() -> {
                 SystemSetting.ThemeRouteRules themeRouteRules = new SystemSetting.ThemeRouteRules();
                 themeRouteRules.setArchives("archives");

File: src/main/java/run/halo/app/core/extension/endpoint/PluginEndpoint.java
Patch:
@@ -56,7 +56,7 @@ public RouterFunction<ServerResponse> endpoint() {
                             .mediaType(MediaType.MULTIPART_FORM_DATA_VALUE)
                             .schema(Builder.schemaBuilder().implementation(InstallRequest.class))
                         ))
-                    .response(responseBuilder())
+                    .response(responseBuilder().implementation(Plugin.class))
             )
             .build();
     }

File: src/main/java/run/halo/app/infra/exception/NotFoundException.java
Patch:
@@ -6,7 +6,7 @@
  * @author guqing
  * @since 2.0.0
  */
-public class NotFoundException extends RuntimeException {
+public class NotFoundException extends HaloException {
     public NotFoundException(String message) {
         super(message);
     }

File: src/main/java/run/halo/app/infra/exception/ThemeInstallationException.java
Patch:
@@ -4,7 +4,7 @@
  * @author guqing
  * @since 2.0.0
  */
-public class ThemeInstallationException extends RuntimeException {
+public class ThemeInstallationException extends HaloException {
     public ThemeInstallationException(String message) {
         super(message);
     }

File: src/main/java/run/halo/app/infra/exception/ThemeUninstallException.java
Patch:
@@ -4,7 +4,7 @@
  * @author guqing
  * @since 2.0.0
  */
-public class ThemeUninstallException extends RuntimeException {
+public class ThemeUninstallException extends HaloException {
 
     public ThemeUninstallException(String message) {
         super(message);

File: src/main/java/run/halo/app/theme/engine/SpringWebFluxTemplateEngine.java
Patch:
@@ -200,6 +200,7 @@ private Mono<DataBuffer> createFullStream(
                     try {
 
                         process(templateName, markupSelectors, context, writer);
+                        Mono.empty().block();
 
                     } catch (final Throwable t) {
                         logger.error(
@@ -231,7 +232,8 @@ private Mono<DataBuffer> createFullStream(
                 });
 
         // Will add some logging to the data stream
-        return stream.log(LOG_CATEGORY_FULL_OUTPUT, Level.FINEST);
+        return stream.log(LOG_CATEGORY_FULL_OUTPUT, Level.FINEST)
+            .subscribeOn(Schedulers.boundedElastic());
 
     }
 

File: src/main/java/run/halo/app/core/extension/Tag.java
Patch:
@@ -64,7 +64,6 @@ public TagStatus getStatusOrDefault() {
         return this.status;
     }
 
-
     @Data
     public static class TagStatus {
 

File: src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java
Patch:
@@ -41,7 +41,7 @@ public ExtensionResourceInitializer(HaloProperties haloProperties,
         this.extensionClient = extensionClient;
     }
 
-    @EventListener
+    @EventListener(ApplicationReadyEvent.class)
     public Mono<Void> initialize(ApplicationReadyEvent readyEvent) {
         var locations = new HashSet<String>();
         if (!haloProperties.isRequiredExtensionDisabled()) {

File: src/main/java/run/halo/app/theme/finders/CategoryFinder.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.theme.finders;
 
 import java.util.List;
+import org.springframework.lang.Nullable;
 import run.halo.app.core.extension.Category;
 import run.halo.app.extension.ListResult;
 import run.halo.app.theme.finders.vo.CategoryTreeVo;
@@ -18,7 +19,7 @@ public interface CategoryFinder {
 
     List<CategoryVo> getByNames(List<String> names);
 
-    ListResult<CategoryVo> list(int page, int size);
+    ListResult<CategoryVo> list(@Nullable Integer page, @Nullable Integer size);
 
     List<CategoryVo> listAll();
 

File: src/main/java/run/halo/app/theme/finders/ContributorFinder.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 import run.halo.app.core.extension.User;
+import run.halo.app.theme.finders.vo.Contributor;
 
 /**
  * A finder for {@link User}.

File: src/main/java/run/halo/app/theme/finders/TagFinder.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.theme.finders;
 
 import java.util.List;
+import org.springframework.lang.Nullable;
 import run.halo.app.core.extension.Tag;
 import run.halo.app.extension.ListResult;
 import run.halo.app.theme.finders.vo.TagVo;
@@ -17,7 +18,7 @@ public interface TagFinder {
 
     List<TagVo> getByNames(List<String> names);
 
-    ListResult<TagVo> list(int page, int size);
+    ListResult<TagVo> list(@Nullable Integer page, @Nullable Integer size);
 
     List<TagVo> listAll();
 }

File: src/main/java/run/halo/app/theme/finders/impl/ContributorFinderImpl.java
Patch:
@@ -4,9 +4,9 @@
 import java.util.Objects;
 import run.halo.app.core.extension.User;
 import run.halo.app.extension.ReactiveExtensionClient;
-import run.halo.app.theme.finders.Contributor;
 import run.halo.app.theme.finders.ContributorFinder;
 import run.halo.app.theme.finders.Finder;
+import run.halo.app.theme.finders.vo.Contributor;
 
 /**
  * A default implementation of {@link ContributorFinder}.

File: src/main/java/run/halo/app/theme/finders/vo/Contributor.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.theme.finders;
+package run.halo.app.theme.finders.vo;
 
 import lombok.Builder;
 import lombok.Value;

File: src/main/java/run/halo/app/theme/finders/vo/PostVo.java
Patch:
@@ -8,7 +8,6 @@
 import lombok.Data;
 import org.springframework.util.Assert;
 import run.halo.app.core.extension.Post;
-import run.halo.app.theme.finders.Contributor;
 
 /**
  * A value object for {@link Post}.

File: src/main/java/run/halo/app/core/extension/reconciler/MenuItemReconciler.java
Patch:
@@ -5,8 +5,9 @@
 import run.halo.app.core.extension.MenuItem.MenuItemStatus;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
+import run.halo.app.extension.controller.Reconciler.Request;
 
-public class MenuItemReconciler implements Reconciler {
+public class MenuItemReconciler implements Reconciler<Request> {
 
     private final ExtensionClient client;
 

File: src/main/java/run/halo/app/core/extension/reconciler/MenuReconciler.java
Patch:
@@ -3,7 +3,7 @@
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
 
-public class MenuReconciler implements Reconciler {
+public class MenuReconciler implements Reconciler<Reconciler.Request> {
 
     private final ExtensionClient client;
 

File: src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java
Patch:
@@ -13,6 +13,7 @@
 import run.halo.app.core.extension.Plugin;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
+import run.halo.app.extension.controller.Reconciler.Request;
 import run.halo.app.infra.utils.JsonUtils;
 import run.halo.app.plugin.HaloPluginManager;
 import run.halo.app.plugin.PluginStartingError;
@@ -26,7 +27,7 @@
  * @since 2.0.0
  */
 @Slf4j
-public class PluginReconciler implements Reconciler {
+public class PluginReconciler implements Reconciler<Request> {
 
     private final ExtensionClient client;
     private final HaloPluginManager haloPluginManager;

File: src/main/java/run/halo/app/core/extension/reconciler/PostReconciler.java
Patch:
@@ -15,6 +15,7 @@
 import run.halo.app.core.extension.Snapshot;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
+import run.halo.app.extension.controller.Reconciler.Request;
 import run.halo.app.infra.Condition;
 import run.halo.app.infra.ConditionStatus;
 import run.halo.app.infra.utils.JsonUtils;
@@ -31,7 +32,7 @@
  * @author guqing
  * @since 2.0.0
  */
-public class PostReconciler implements Reconciler {
+public class PostReconciler implements Reconciler<Request> {
     public static final String PERMALINK_PREFIX = "/permalink/posts/";
     private final ExtensionClient client;
     private final ContentService contentService;

File: src/main/java/run/halo/app/core/extension/reconciler/RoleBindingReconciler.java
Patch:
@@ -15,10 +15,11 @@
 import run.halo.app.core.extension.User;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
+import run.halo.app.extension.controller.Reconciler.Request;
 import run.halo.app.infra.utils.JsonUtils;
 
 @Slf4j
-public class RoleBindingReconciler implements Reconciler {
+public class RoleBindingReconciler implements Reconciler<Request> {
 
     private final ExtensionClient client;
 

File: src/main/java/run/halo/app/core/extension/reconciler/RoleReconciler.java
Patch:
@@ -13,6 +13,7 @@
 import run.halo.app.core.extension.service.RoleService;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
+import run.halo.app.extension.controller.Reconciler.Request;
 import run.halo.app.infra.utils.JsonUtils;
 
 /**
@@ -22,7 +23,7 @@
  * @since 2.0.0
  */
 @Slf4j
-public class RoleReconciler implements Reconciler {
+public class RoleReconciler implements Reconciler<Request> {
 
     private final ExtensionClient client;
 

File: src/main/java/run/halo/app/core/extension/reconciler/ThemeReconciler.java
Patch:
@@ -8,6 +8,7 @@
 import run.halo.app.core.extension.Theme;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
+import run.halo.app.extension.controller.Reconciler.Request;
 import run.halo.app.infra.exception.ThemeUninstallException;
 import run.halo.app.infra.properties.HaloProperties;
 import run.halo.app.theme.ThemePathPolicy;
@@ -18,7 +19,7 @@
  * @author guqing
  * @since 2.0.0
  */
-public class ThemeReconciler implements Reconciler {
+public class ThemeReconciler implements Reconciler<Request> {
 
     private final ExtensionClient client;
     private final ThemePathPolicy themePathPolicy;

File: src/main/java/run/halo/app/core/extension/reconciler/UserReconciler.java
Patch:
@@ -3,9 +3,10 @@
 import lombok.extern.slf4j.Slf4j;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
+import run.halo.app.extension.controller.Reconciler.Request;
 
 @Slf4j
-public class UserReconciler implements Reconciler {
+public class UserReconciler implements Reconciler<Request> {
 
     private final ExtensionClient client;
 

File: src/main/java/run/halo/app/extension/Metadata.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.time.Instant;
 import java.util.Map;
+import java.util.Set;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 
@@ -44,4 +45,6 @@ public class Metadata implements MetadataOperator {
      */
     private Instant deletionTimestamp;
 
+    private Set<String> finalizers;
+
 }

File: src/main/java/run/halo/app/extension/controller/Reconciler.java
Patch:
@@ -2,14 +2,13 @@
 
 import java.time.Duration;
 
-public interface Reconciler {
+public interface Reconciler<R> {
 
-    Result reconcile(Request request);
+    Result reconcile(R request);
 
     record Request(String name) {
     }
 
     record Result(boolean reEnqueue, Duration retryAfter) {
-
     }
 }

File: src/main/java/run/halo/app/extension/controller/RequestSynchronizer.java
Patch:
@@ -2,13 +2,13 @@
 
 import java.util.function.Predicate;
 import lombok.extern.slf4j.Slf4j;
-import reactor.core.Disposable;
 import run.halo.app.extension.Extension;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.Watcher;
+import run.halo.app.extension.controller.Reconciler.Request;
 
 @Slf4j
-public class RequestSynchronizer implements Disposable {
+public class RequestSynchronizer implements Synchronizer<Request> {
 
     private final ExtensionClient client;
 
@@ -39,6 +39,7 @@ public RequestSynchronizer(boolean syncAllOnStart,
         this.listPredicate = listPredicate;
     }
 
+    @Override
     public void start() {
         if (isDisposed() || started) {
             return;

File: src/test/java/run/halo/app/extension/controller/DefaultDelayQueueTest.java
Patch:
@@ -20,13 +20,13 @@ class DefaultDelayQueueTest {
 
     Instant now = Instant.now();
 
-    DefaultDelayQueue queue;
+    DefaultDelayQueue<Request> queue;
 
     final Duration minDelay = Duration.ofMillis(1);
 
     @BeforeEach
     void setUp() {
-        queue = new DefaultDelayQueue(() -> now, minDelay);
+        queue = new DefaultDelayQueue<>(() -> now, minDelay);
     }
 
     @Test

File: src/test/java/run/halo/app/extension/controller/ExtensionWatcherTest.java
Patch:
@@ -14,12 +14,13 @@
 import org.mockito.Mock;
 import org.mockito.junit.jupiter.MockitoExtension;
 import run.halo.app.extension.WatcherPredicates;
+import run.halo.app.extension.controller.Reconciler.Request;
 
 @ExtendWith(MockitoExtension.class)
 class ExtensionWatcherTest {
 
     @Mock
-    RequestQueue queue;
+    RequestQueue<Request> queue;
 
     @Mock
     WatcherPredicates predicates;

File: src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -9,8 +9,7 @@ public interface UserService {
 
     Mono<User> getUser(String username);
 
-    @Deprecated
-    Mono<Void> updatePassword(String username, String newPassword);
+    Mono<User> updatePassword(String username, String newPassword);
 
     Mono<User> updateWithRawPassword(String username, String rawPassword);
 

File: src/main/java/run/halo/app/extension/ExtensionClient.java
Patch:
@@ -10,7 +10,9 @@
  * ExtensionStore.
  *
  * @author johnniang
+ * @deprecated Use {@link ReactiveExtensionClient} instead.
  */
+@Deprecated(forRemoval = true, since = "2.0")
 public interface ExtensionClient {
 
     /**

File: src/main/java/run/halo/app/extension/JSONExtensionConverter.java
Patch:
@@ -7,6 +7,7 @@
 import org.openapi4j.core.exception.ResolutionException;
 import org.openapi4j.schema.validator.ValidationData;
 import org.openapi4j.schema.validator.v3.SchemaValidator;
+import org.springframework.stereotype.Component;
 import run.halo.app.extension.exception.ExtensionConvertException;
 import run.halo.app.extension.exception.SchemaViolationException;
 import run.halo.app.extension.store.ExtensionStore;
@@ -17,6 +18,7 @@
  * @author johnniang
  */
 @Slf4j
+@Component
 public class JSONExtensionConverter implements ExtensionConverter {
 
     public final ObjectMapper objectMapper;

File: src/main/java/run/halo/app/extension/router/ExtensionCompositeRouterFunction.java
Patch:
@@ -11,7 +11,7 @@
 import org.springframework.web.reactive.function.server.ServerResponse;
 import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
-import run.halo.app.extension.ExtensionClient;
+import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Scheme;
 import run.halo.app.extension.SchemeWatcherManager;
 import run.halo.app.extension.SchemeWatcherManager.SchemeWatcher;
@@ -21,9 +21,9 @@ public class ExtensionCompositeRouterFunction implements
 
     private final Map<Scheme, RouterFunction<ServerResponse>> schemeRouterFuncMapper;
 
-    private final ExtensionClient client;
+    private final ReactiveExtensionClient client;
 
-    public ExtensionCompositeRouterFunction(ExtensionClient client,
+    public ExtensionCompositeRouterFunction(ReactiveExtensionClient client,
         SchemeWatcherManager watcherManager) {
         this.client = client;
         schemeRouterFuncMapper = new ConcurrentHashMap<>();

File: src/main/java/run/halo/app/extension/router/ExtensionRouterFunctionFactory.java
Patch:
@@ -12,17 +12,17 @@
 import org.springframework.web.reactive.function.server.HandlerFunction;
 import org.springframework.web.reactive.function.server.RouterFunction;
 import org.springframework.web.reactive.function.server.ServerResponse;
-import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.ListResult;
+import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Scheme;
 
 public class ExtensionRouterFunctionFactory {
 
     private final Scheme scheme;
 
-    private final ExtensionClient client;
+    private final ReactiveExtensionClient client;
 
-    public ExtensionRouterFunctionFactory(Scheme scheme, ExtensionClient client) {
+    public ExtensionRouterFunctionFactory(Scheme scheme, ReactiveExtensionClient client) {
         this.scheme = scheme;
         this.client = client;
     }

File: src/test/java/run/halo/app/config/ExtensionConfigurationTest.java
Patch:
@@ -22,6 +22,7 @@
 import org.springframework.http.MediaType;
 import org.springframework.security.test.context.support.WithMockUser;
 import org.springframework.test.web.reactive.server.WebTestClient;
+import reactor.core.publisher.Mono;
 import run.halo.app.core.extension.Role;
 import run.halo.app.core.extension.service.RoleService;
 import run.halo.app.extension.ExtensionClient;
@@ -54,15 +55,15 @@ void setUp() {
             .build();
         var role = new Role();
         role.setRules(List.of(rule));
-        when(roleService.getRole(anyString())).thenReturn(role);
+        when(roleService.getMonoRole(anyString())).thenReturn(Mono.just(role));
 
         // register scheme
         schemeManager.register(FakeExtension.class);
     }
 
     @AfterEach
     void cleanUp(@Autowired ExtensionStoreRepository repository) {
-        repository.deleteAll();
+        repository.deleteAll().subscribe();
     }
 
     @Test

File: src/test/java/run/halo/app/extension/router/ExtensionCompositeRouterFunctionTest.java
Patch:
@@ -15,8 +15,8 @@
 import org.springframework.mock.web.server.MockServerWebExchange;
 import org.springframework.web.reactive.function.server.HandlerStrategies;
 import org.springframework.web.reactive.function.server.ServerRequest;
-import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.FakeExtension;
+import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Scheme;
 import run.halo.app.extension.SchemeWatcherManager;
 import run.halo.app.extension.SchemeWatcherManager.SchemeRegistered;
@@ -26,7 +26,7 @@
 class ExtensionCompositeRouterFunctionTest {
 
     @Mock
-    ExtensionClient client;
+    ReactiveExtensionClient client;
 
     @Test
     void shouldRouteWhenSchemeRegistered() {

File: src/test/java/run/halo/app/extension/router/ExtensionRouterFunctionFactoryTest.java
Patch:
@@ -15,10 +15,9 @@
 import org.springframework.web.reactive.function.server.ServerRequest;
 import org.springframework.web.reactive.function.server.ServerResponse;
 import org.springframework.web.server.ServerWebExchange;
-import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.FakeExtension;
+import run.halo.app.extension.ReactiveExtensionClient;
 import run.halo.app.extension.Scheme;
-import run.halo.app.extension.router.ExtensionRouterFunctionFactory;
 import run.halo.app.extension.router.ExtensionRouterFunctionFactory.CreateHandler;
 import run.halo.app.extension.router.ExtensionRouterFunctionFactory.GetHandler;
 import run.halo.app.extension.router.ExtensionRouterFunctionFactory.ListHandler;
@@ -28,7 +27,7 @@
 class ExtensionRouterFunctionFactoryTest {
 
     @Mock
-    ExtensionClient client;
+    ReactiveExtensionClient client;
 
     @Test
     void shouldCreateSuccessfully() {

File: src/test/java/run/halo/app/security/DefaultUserDetailServiceTest.java
Patch:
@@ -43,8 +43,10 @@ class DefaultUserDetailServiceTest {
     void shouldUpdatePasswordSuccessfully() {
         var fakeUser = createFakeUserDetails();
 
+        var user = new run.halo.app.core.extension.User();
+
         when(userService.updatePassword("faker", "new-fake-password")).thenReturn(
-            Mono.just("").then()
+            Mono.just(user)
         );
 
         var userDetailsMono = userDetailService.updatePassword(fakeUser, "new-fake-password");

File: src/test/java/run/halo/app/security/SuperAdminInitializerTest.java
Patch:
@@ -15,7 +15,7 @@
 import run.halo.app.core.extension.Role;
 import run.halo.app.core.extension.RoleBinding;
 import run.halo.app.core.extension.User;
-import run.halo.app.extension.ExtensionClient;
+import run.halo.app.extension.ReactiveExtensionClient;
 
 @SpringBootTest(properties = {"halo.security.initializer.disabled=false",
     "halo.security.initializer.super-admin-username=fake-admin",
@@ -24,9 +24,8 @@
 @AutoConfigureTestDatabase
 class SuperAdminInitializerTest {
 
-    @Autowired
     @SpyBean
-    ExtensionClient client;
+    ReactiveExtensionClient client;
 
     @Autowired
     WebTestClient webClient;

File: src/main/java/run/halo/app/core/extension/endpoint/ThemeEndpoint.java
Patch:
@@ -42,7 +42,7 @@
 import run.halo.app.extension.ConfigMap;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.Unstructured;
-import run.halo.app.infra.ThemeInstallationException;
+import run.halo.app.infra.exception.ThemeInstallationException;
 import run.halo.app.infra.properties.HaloProperties;
 import run.halo.app.infra.utils.FileUtils;
 import run.halo.app.infra.utils.YamlUnstructuredLoader;

File: src/main/java/run/halo/app/infra/exception/NotFoundException.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.infra;
+package run.halo.app.infra.exception;
 
 /**
  * Not found exception.

File: src/main/java/run/halo/app/infra/exception/ThemeInstallationException.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.infra;
+package run.halo.app.infra.exception;
 
 /**
  * @author guqing

File: src/main/java/run/halo/app/theme/TemplateEngineManager.java
Patch:
@@ -11,7 +11,7 @@
 import org.thymeleaf.spring6.ISpringWebFluxTemplateEngine;
 import org.thymeleaf.templateresolver.FileTemplateResolver;
 import org.thymeleaf.templateresolver.ITemplateResolver;
-import run.halo.app.infra.NotFoundException;
+import run.halo.app.infra.exception.NotFoundException;
 import run.halo.app.theme.engine.SpringWebFluxTemplateEngine;
 import run.halo.app.theme.message.ThemeMessageResolver;
 

File: src/main/java/run/halo/app/core/extension/Setting.java
Patch:
@@ -15,10 +15,12 @@
  */
 @Data
 @EqualsAndHashCode(callSuper = true)
-@GVK(group = "", version = "v1alpha1", kind = "Setting",
+@GVK(group = "", version = "v1alpha1", kind = Setting.KIND,
     plural = "settings", singular = "setting")
 public class Setting extends AbstractExtension {
 
+    public static final String KIND = "Setting";
+
     @Schema(required = true, minLength = 1)
     private List<SettingSpec> spec;
 

File: src/main/java/run/halo/app/core/extension/Theme.java
Patch:
@@ -16,10 +16,12 @@
 @Data
 @ToString(callSuper = true)
 @EqualsAndHashCode(callSuper = true)
-@GVK(group = "theme.halo.run", version = "v1alpha1", kind = "Theme",
+@GVK(group = "theme.halo.run", version = "v1alpha1", kind = Theme.KIND,
     plural = "themes", singular = "theme")
 public class Theme extends AbstractExtension {
 
+    public static final String KIND = "Theme";
+
     @Schema(required = true)
     private ThemeSpec spec;
 

File: src/main/java/run/halo/app/extension/ConfigMap.java
Patch:
@@ -15,10 +15,12 @@
 @Data
 @ToString(callSuper = true)
 @EqualsAndHashCode(callSuper = true)
-@GVK(group = "", version = "v1alpha1", kind = "ConfigMap", plural = "configmaps",
+@GVK(group = "", version = "v1alpha1", kind = ConfigMap.KIND, plural = "configmaps",
     singular = "configmap")
 public class ConfigMap extends AbstractExtension {
 
+    public static final String KIND = "ConfigMap";
+
     private Map<String, String> data;
 
     public ConfigMap putDataItem(String key, String dataItem) {

File: src/main/java/run/halo/app/config/SwaggerConfig.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.swagger.v3.oas.models.Components;
 import io.swagger.v3.oas.models.OpenAPI;
+import io.swagger.v3.oas.models.SpecVersion;
 import io.swagger.v3.oas.models.info.Info;
 import io.swagger.v3.oas.models.security.SecurityRequirement;
 import io.swagger.v3.oas.models.security.SecurityScheme;
@@ -13,8 +14,8 @@
 public class SwaggerConfig {
 
     @Bean
-    OpenAPI customOpenAPI() {
-        return new OpenAPI()
+    OpenAPI haloOpenApi() {
+        return new OpenAPI(SpecVersion.V30)
             // See https://swagger.io/docs/specification/authentication/ for more.
             .components(new Components()
                 .addSecuritySchemes("BasicAuth", new SecurityScheme()

File: src/main/java/run/halo/app/extension/Unstructured.java
Patch:
@@ -9,6 +9,7 @@
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
 import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import io.swagger.v3.core.util.Json;
 import java.io.IOException;
 import java.time.Instant;
 import java.util.Arrays;
@@ -28,7 +29,7 @@
 @SuppressWarnings("rawtypes")
 public class Unstructured implements Extension {
 
-    public static final ObjectMapper OBJECT_MAPPER = JSONExtensionConverter.OBJECT_MAPPER;
+    public static final ObjectMapper OBJECT_MAPPER = Json.mapper();
 
     private final Map data;
 

File: src/test/java/run/halo/app/extension/SchemeTest.java
Patch:
@@ -63,7 +63,7 @@ void shouldCreateSchemeSuccessfully() {
             scheme.groupVersionKind());
         assertEquals("fake", scheme.singular());
         assertEquals("fakes", scheme.plural());
-        assertNotNull(scheme.jsonSchema());
+        assertNotNull(scheme.openApiSchema());
         assertEquals(FakeExtension.class, scheme.type());
     }
 

File: src/main/java/run/halo/app/config/HaloConfiguration.java
Patch:
@@ -14,5 +14,4 @@ Jackson2ObjectMapperBuilderCustomizer objectMapperCustomizer() {
             builder.serializationInclusion(JsonInclude.Include.NON_NULL);
         };
     }
-
-}
+}
\ No newline at end of file

File: src/main/java/run/halo/app/config/WebFluxConfig.java
Patch:
@@ -11,7 +11,6 @@
 import org.springframework.http.codec.json.Jackson2JsonDecoder;
 import org.springframework.http.codec.json.Jackson2JsonEncoder;
 import org.springframework.lang.NonNull;
-import org.springframework.web.reactive.config.EnableWebFlux;
 import org.springframework.web.reactive.config.WebFluxConfigurer;
 import org.springframework.web.reactive.function.server.RouterFunction;
 import org.springframework.web.reactive.function.server.ServerResponse;
@@ -21,7 +20,6 @@
 import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;
 
 @Configuration
-@EnableWebFlux
 public class WebFluxConfig implements WebFluxConfigurer {
 
     final ObjectMapper objectMapper;
@@ -64,4 +62,5 @@ RouterFunction<ServerResponse> customEndpoints(ApplicationContext context) {
             .forEach(customEndpoint -> builder.add(customEndpoint.endpoint()));
         return builder.build();
     }
+
 }

File: src/main/java/run/halo/app/infra/SchemeInitializer.java
Patch:
@@ -9,6 +9,7 @@
 import run.halo.app.core.extension.Role;
 import run.halo.app.core.extension.RoleBinding;
 import run.halo.app.core.extension.Setting;
+import run.halo.app.core.extension.Theme;
 import run.halo.app.core.extension.User;
 import run.halo.app.extension.ConfigMap;
 import run.halo.app.extension.SchemeManager;
@@ -33,5 +34,6 @@ public void onApplicationEvent(@NonNull ApplicationStartedEvent event) {
         schemeManager.register(ReverseProxy.class);
         schemeManager.register(Setting.class);
         schemeManager.register(ConfigMap.class);
+        schemeManager.register(Theme.class);
     }
 }

File: src/main/java/run/halo/app/infra/properties/HaloProperties.java
Patch:
@@ -28,5 +28,4 @@ public class HaloProperties {
     private final ExtensionProperties extension = new ExtensionProperties();
 
     private final SecurityProperties security = new SecurityProperties();
-
 }

File: src/main/java/run/halo/app/extension/router/selector/FieldCriteriaPredicateConverter.java
Patch:
@@ -19,7 +19,7 @@ public Predicate<E> convert(SelectorCriteria criteria) {
                     return false;
                 }
                 switch (criteria.operator()) {
-                    case Equals -> {
+                    case Equals, IN -> {
                         return criteria.values().contains(name);
                     }
                     case NotEquals -> {

File: src/main/java/run/halo/app/config/ExtensionConfiguration.java
Patch:
@@ -19,14 +19,14 @@
 import run.halo.app.extension.DefaultSchemeManager;
 import run.halo.app.extension.DefaultSchemeWatcherManager;
 import run.halo.app.extension.ExtensionClient;
-import run.halo.app.extension.ExtensionCompositeRouterFunction;
 import run.halo.app.extension.JSONExtensionConverter;
 import run.halo.app.extension.SchemeManager;
 import run.halo.app.extension.SchemeWatcherManager;
 import run.halo.app.extension.SchemeWatcherManager.SchemeWatcher;
 import run.halo.app.extension.controller.Controller;
 import run.halo.app.extension.controller.ControllerBuilder;
 import run.halo.app.extension.controller.ControllerManager;
+import run.halo.app.extension.router.ExtensionCompositeRouterFunction;
 import run.halo.app.extension.store.ExtensionStoreClient;
 import run.halo.app.plugin.HaloPluginManager;
 import run.halo.app.plugin.resources.JsBundleRuleProvider;

File: src/main/java/run/halo/app/config/WebServerSecurityConfig.java
Patch:
@@ -69,6 +69,7 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,
             .securityMatcher(pathMatchers("/api/**", "/apis/**"))
             .authorizeExchange(exchanges ->
                 exchanges.anyExchange().access(new RequestInfoAuthorizationManager(roleService)))
+            .httpBasic(withDefaults())
             // for reuse the JWT authentication
             .oauth2ResourceServer().jwt();
 
@@ -82,15 +83,15 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,
             context);
 
         http.addFilterAt(loginFilter, SecurityWebFiltersOrder.FORM_LOGIN);
-
         return http.build();
     }
 
     @Bean
     @Order(0)
     SecurityWebFilterChain webFilterChain(ServerHttpSecurity http) {
         http.authorizeExchange(exchanges -> exchanges.pathMatchers(
-                "/actuator/**"
+                "/actuator/**",
+                "/swagger-ui.html", "/webjars/**", "/v3/api-docs/**"
             ).permitAll())
             .cors(corsSpec -> corsSpec.configurationSource(apiCorsConfigurationSource()))
             .authorizeExchange(exchanges -> exchanges.anyExchange().authenticated())

File: src/main/java/run/halo/app/infra/properties/HaloProperties.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.infra.properties;
 
+import java.nio.file.Path;
 import java.util.HashSet;
 import java.util.Set;
 import lombok.Data;
@@ -13,6 +14,8 @@
 @ConfigurationProperties(prefix = "halo")
 public class HaloProperties {
 
+    private Path workDir;
+
     private Set<String> initialExtensionLocations = new HashSet<>();
 
     private final ExtensionProperties extension = new ExtensionProperties();

File: src/main/java/run/halo/app/plugin/PluginProperties.java
Patch:
@@ -57,7 +57,7 @@ public class PluginProperties {
      * Plugin root directory: default “plugins”; when non-jar mode plugin, the value should be an
      * absolute directory address.
      */
-    private String pluginsRoot = "plugins";
+    private String pluginsRoot;
 
     /**
      * Allows providing custom plugin loaders.

File: src/main/java/run/halo/app/extension/DefaultExtensionClient.java
Patch:
@@ -105,8 +105,10 @@ public <E extends Extension> void update(E extension) {
 
     @Override
     public <E extends Extension> void delete(E extension) {
+        extension.getMetadata().setDeletionTimestamp(Instant.now());
         var extensionStore = converter.convertTo(extension);
-        var deleteStore = storeClient.delete(extensionStore.getName(), extensionStore.getVersion());
+        var deleteStore = storeClient.update(extensionStore.getName(), extensionStore.getVersion(),
+            extensionStore.getData());
         Extension deleteExt = converter.convertFrom(extension.getClass(), deleteStore);
         watchers.onDelete(deleteExt);
     }

File: src/main/java/run/halo/app/core/extension/Plugin.java
Patch:
@@ -44,7 +44,7 @@ public class Plugin extends AbstractExtension {
     @JsonIgnore
     public PluginStatus statusNonNull() {
         if (this.status == null) {
-            return new PluginStatus();
+            this.status = new PluginStatus();
         }
         return status;
     }
@@ -87,7 +87,8 @@ public static class PluginSpec {
         @NonNull
         @JsonIgnore
         public List<String> extensionLocationsNonNull() {
-            return Objects.requireNonNullElseGet(extensionLocations, List::of);
+            this.extensionLocations = Objects.requireNonNullElseGet(extensionLocations, List::of);
+            return this.extensionLocations;
         }
     }
 

File: src/test/java/run/halo/app/core/extension/reconciler/PluginReconcilerTest.java
Patch:
@@ -19,7 +19,6 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.pf4j.PluginState;
 import org.pf4j.PluginWrapper;
-import org.pf4j.RuntimeMode;
 import run.halo.app.core.extension.Plugin;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
@@ -50,11 +49,10 @@ class PluginReconcilerTest {
 
     @BeforeEach
     void setUp() {
-        JsBundleRuleProvider jsBundleRule = new JsBundleRuleProvider();
+        JsBundleRuleProvider jsBundleRule = new JsBundleRuleProvider(haloPluginManager);
         pluginReconciler = new PluginReconciler(extensionClient, haloPluginManager, jsBundleRule);
 
         when(haloPluginManager.getPlugin(any())).thenReturn(pluginWrapper);
-        when(pluginWrapper.getRuntimeMode()).thenReturn(RuntimeMode.DEPLOYMENT);
         when(haloPluginManager.getUnresolvedPlugins()).thenReturn(List.of());
     }
 

File: src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -9,7 +9,10 @@ public interface UserService {
 
     Mono<User> getUser(String username);
 
+    @Deprecated
     Mono<Void> updatePassword(String username, String newPassword);
 
+    Mono<User> updateWithRawPassword(String username, String rawPassword);
+
     Flux<Role> listRoles(String username);
 }

File: src/main/java/run/halo/app/core/extension/Plugin.java
Patch:
@@ -16,7 +16,6 @@
 import org.springframework.lang.NonNull;
 import run.halo.app.extension.AbstractExtension;
 import run.halo.app.extension.GVK;
-import run.halo.app.plugin.BasePlugin;
 
 /**
  * A custom resource for Plugin.
@@ -74,7 +73,8 @@ public static class PluginSpec {
          */
         private String requires = "*";
 
-        private String pluginClass = BasePlugin.class.getName();
+        @Deprecated
+        private String pluginClass;
 
         private Boolean enabled = false;
 

File: src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java
Patch:
@@ -173,7 +173,7 @@ private void handleStatus(Plugin plugin, PluginState currentState,
 
     private void ensureSpecUpToDateWhenDevelopmentMode(PluginWrapper pluginWrapper,
         Plugin oldPlugin) {
-        if (!RuntimeMode.DEPLOYMENT.equals(pluginWrapper.getRuntimeMode())) {
+        if (RuntimeMode.DEPLOYMENT.equals(pluginWrapper.getRuntimeMode())) {
             return;
         }
         YamlPluginFinder yamlPluginFinder = new YamlPluginFinder();

File: src/main/java/run/halo/app/plugin/BasePlugin.java
Patch:
@@ -35,7 +35,7 @@ public final synchronized PluginApplicationContext getApplicationContext() {
         return applicationContext;
     }
 
-    public HaloPluginManager getPluginManager() {
+    private HaloPluginManager getPluginManager() {
         return (HaloPluginManager) getWrapper().getPluginManager();
     }
 }

File: src/main/java/run/halo/app/plugin/PluginApplicationInitializer.java
Patch:
@@ -66,6 +66,8 @@ private PluginApplicationContext createPluginApplicationContext(String pluginId)
         AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);
         stopWatch.stop();
 
+        beanFactory.registerSingleton("pluginWrapper", haloPluginManager.getPlugin(pluginId));
+
         populateSettingFetcher(pluginId, beanFactory);
 
         log.debug("Total millis: {} ms -> {}", stopWatch.getTotalTimeMillis(),

File: src/main/java/run/halo/app/plugin/YamlPluginDescriptorFinder.java
Patch:
@@ -50,7 +50,7 @@ private DefaultPluginDescriptor convert(Plugin plugin) {
         DefaultPluginDescriptor defaultPluginDescriptor =
             new DefaultPluginDescriptor(pluginId,
                 spec.getDescription(),
-                spec.getPluginClass(),
+                BasePlugin.class.getName(),
                 spec.getVersion(),
                 spec.getRequires(),
                 spec.getAuthor(),

File: src/test/java/run/halo/app/core/extension/reconciler/PluginReconcilerTest.java
Patch:
@@ -19,6 +19,7 @@
 import org.mockito.junit.jupiter.MockitoExtension;
 import org.pf4j.PluginState;
 import org.pf4j.PluginWrapper;
+import org.pf4j.RuntimeMode;
 import run.halo.app.core.extension.Plugin;
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.controller.Reconciler;
@@ -53,6 +54,7 @@ void setUp() {
         pluginReconciler = new PluginReconciler(extensionClient, haloPluginManager, jsBundleRule);
 
         when(haloPluginManager.getPlugin(any())).thenReturn(pluginWrapper);
+        when(pluginWrapper.getRuntimeMode()).thenReturn(RuntimeMode.DEPLOYMENT);
         when(haloPluginManager.getUnresolvedPlugins()).thenReturn(List.of());
     }
 

File: src/test/java/run/halo/app/plugin/YamlPluginFinderTest.java
Patch:
@@ -92,7 +92,7 @@ void unstructuredToPluginTest() throws JsonProcessingException, JSONException {
                             }
                         ],
                         "requires": ">=2.0.0",
-                        "pluginClass": "run.halo.app.plugin.BasePlugin",
+                        "pluginClass": null,
                         "enabled": false,
                         "extensionLocations": null,
                         settingName: null,

File: src/main/java/run/halo/app/plugin/PluginStartedListener.java
Patch:
@@ -37,8 +37,7 @@ public void onApplicationEvent(HaloPluginStartedEvent event) {
         // load unstructured
         DefaultResourceLoader resourceLoader =
             new DefaultResourceLoader(pluginWrapper.getPluginClassLoader());
-        plugin.getSpec().getExtensionLocations()
-            .stream()
+        plugin.getSpec().extensionLocationsNonNull().stream()
             .map(resourceLoader::getResource)
             .filter(Resource::exists)
             .map(resource -> new YamlUnstructuredLoader(resource).load())

File: src/main/java/run/halo/app/plugin/YamlPluginFinder.java
Patch:
@@ -47,7 +47,8 @@
  *   # 'displayName' explains what the plugin does in only a few words
  *   displayName: "a name to show"
  *   description: "Tell me more about this plugin."
- *   license: MIT
+ *   license:
+ *     - name: MIT
  * </pre>
  *
  * @author guqing

File: src/main/java/run/halo/app/extension/ExtensionClient.java
Patch:
@@ -4,7 +4,6 @@
 import java.util.List;
 import java.util.Optional;
 import java.util.function.Predicate;
-import org.springframework.data.domain.Page;
 
 /**
  * ExtensionClient is an interface which contains some operations on Extension instead of
@@ -35,9 +34,9 @@ <E extends Extension> List<E> list(Class<E> type, Predicate<E> predicate,
      * @param page is page number which starts from 0.
      * @param size is page size.
      * @param <E> is Extension type.
-     * @return a page of Extensions.
+     * @return a list of Extensions.
      */
-    <E extends Extension> Page<E> page(Class<E> type, Predicate<E> predicate,
+    <E extends Extension> ListResult<E> list(Class<E> type, Predicate<E> predicate,
         Comparator<E> comparator, int page, int size);
 
     /**

File: src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java
Patch:
@@ -135,7 +135,7 @@ public RouterFunction<ServerResponse> endpoint() {
                     .parameter(parameterBuilder().in(ParameterIn.PATH).name("name")
                         .description("User name")
                         .required(true))
-                    .response(responseBuilder().implementation(Set.class)))
+                    .response(responseBuilder().implementation(UserPermission.class)))
             .build();
     }
 

File: src/main/java/run/halo/app/config/ExtensionConfiguration.java
Patch:
@@ -13,6 +13,7 @@
 import run.halo.app.core.extension.reconciler.RoleBindingReconciler;
 import run.halo.app.core.extension.reconciler.RoleReconciler;
 import run.halo.app.core.extension.reconciler.UserReconciler;
+import run.halo.app.core.extension.service.RoleService;
 import run.halo.app.extension.DefaultExtensionClient;
 import run.halo.app.extension.DefaultSchemeManager;
 import run.halo.app.extension.DefaultSchemeWatcherManager;
@@ -62,9 +63,9 @@ Controller userController(ExtensionClient client) {
     }
 
     @Bean
-    Controller roleController(ExtensionClient client) {
+    Controller roleController(ExtensionClient client, RoleService roleService) {
         return new ControllerBuilder("role-controller", client)
-            .reconciler(new RoleReconciler(client))
+            .reconciler(new RoleReconciler(client, roleService))
             .extension(new Role())
             .build();
     }

File: src/main/java/run/halo/app/core/extension/User.java
Patch:
@@ -32,6 +32,8 @@ public class User extends AbstractExtension {
     public static final String VERSION = "v1alpha1";
     public static final String KIND = "User";
 
+    public static final String ROLE_NAMES_ANNO = "rbac.authorization.halo.run/role-names";
+
     @Schema(required = true)
     private UserSpec spec;
 

File: src/main/java/run/halo/app/core/extension/reconciler/RoleBindingReconciler.java
Patch:
@@ -20,8 +20,6 @@
 @Slf4j
 public class RoleBindingReconciler implements Reconciler {
 
-    static final String ROLE_NAMES_ANNO = "rbac.authorization.halo.run/role-names";
-
     private final ExtensionClient client;
 
     public RoleBindingReconciler(ExtensionClient client) {
@@ -57,7 +55,7 @@ public Result reconcile(Request request) {
                         annotations = new HashMap<>();
                     }
                     var oldAnnotations = Map.copyOf(annotations);
-                    annotations.put(ROLE_NAMES_ANNO, JsonUtils.objectToJson(roleNames));
+                    annotations.put(User.ROLE_NAMES_ANNO, JsonUtils.objectToJson(roleNames));
                     user.getMetadata().setAnnotations(annotations);
                     if (!Objects.deepEquals(oldAnnotations, annotations)) {
                         // update user

File: src/main/java/run/halo/app/core/extension/service/UserService.java
Patch:
@@ -1,6 +1,8 @@
 package run.halo.app.core.extension.service;
 
+import reactor.core.publisher.Flux;
 import reactor.core.publisher.Mono;
+import run.halo.app.core.extension.Role;
 import run.halo.app.core.extension.User;
 
 public interface UserService {
@@ -9,4 +11,5 @@ public interface UserService {
 
     Mono<Void> updatePassword(String username, String newPassword);
 
+    Flux<Role> listRoles(String username);
 }

File: src/main/java/run/halo/app/security/authorization/DefaultRuleResolver.java
Patch:
@@ -11,7 +11,6 @@
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.util.Assert;
 import run.halo.app.core.extension.Role;
-import run.halo.app.core.extension.reconciler.RoleReconciler;
 import run.halo.app.core.extension.service.DefaultRoleBindingService;
 import run.halo.app.core.extension.service.RoleBindingService;
 import run.halo.app.core.extension.service.RoleService;
@@ -81,7 +80,7 @@ private List<Role.PolicyRule> fetchRules(Role role) {
         }
         // merge policy rules
         String roleDependencyRules = metadata.getAnnotations()
-            .get(RoleReconciler.ROLE_DEPENDENCY_RULES);
+            .get(Role.ROLE_DEPENDENCY_RULES);
         List<Role.PolicyRule> rules = convertFrom(roleDependencyRules);
         rules.addAll(role.getRules());
         return rules;

File: src/test/java/run/halo/app/core/extension/reconciler/RoleBindingReconcilerTest.java
Patch:
@@ -13,7 +13,7 @@
 import static org.mockito.Mockito.times;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
-import static run.halo.app.core.extension.reconciler.RoleBindingReconciler.ROLE_NAMES_ANNO;
+import static run.halo.app.core.extension.User.ROLE_NAMES_ANNO;
 
 import java.time.Instant;
 import java.util.List;

File: src/test/java/run/halo/app/plugin/YamlPluginFinderTest.java
Patch:
@@ -94,7 +94,9 @@ void unstructuredToPluginTest() throws JsonProcessingException, JSONException {
                         "requires": ">=2.0.0",
                         "pluginClass": "run.halo.app.plugin.BasePlugin",
                         "enabled": false,
-                        "extensionLocations": null
+                        "extensionLocations": null,
+                        settingName: null,
+                        configMapName: null
                     },
                     "status": null,
                     "apiVersion": "plugin.halo.run/v1alpha1",

File: src/test/java/run/halo/app/infra/utils/JsonUtilsTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import java.time.Instant;
 import java.time.LocalDateTime;
 import java.util.List;
@@ -17,7 +16,7 @@
 public class JsonUtilsTest {
 
     @Test
-    public void serializerTime() throws JsonProcessingException {
+    public void serializerTime() {
         Instant now = Instant.now();
         String instantStr = JsonUtils.objectToJson(now);
         assertThat(instantStr).isNotNull();

File: src/test/java/run/halo/app/infra/utils/YamlUnstructuredLoaderTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.assertj.core.api.Assertions.assertThat;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import java.util.List;
 import java.util.stream.Stream;
 import org.junit.jupiter.api.BeforeEach;
@@ -63,7 +62,7 @@ void setUp() {
     }
 
     @Test
-    void loadTest() throws JsonProcessingException {
+    void loadTest() {
         Resource[] resources = yamlResources.toArray(Resource[]::new);
         YamlUnstructuredLoader yamlUnstructuredLoader = new YamlUnstructuredLoader(resources);
         List<Unstructured> unstructuredList = yamlUnstructuredLoader.load();

File: src/test/java/run/halo/app/plugin/YamlPluginDescriptorFinderTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;
 
-import com.fasterxml.jackson.core.JsonProcessingException;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -60,7 +59,7 @@ void isApplicable() throws IOException {
     }
 
     @Test
-    void find() throws JsonProcessingException, JSONException {
+    void find() throws JSONException {
         PluginDescriptor pluginDescriptor = yamlPluginDescriptorFinder.find(testFile.toPath());
         String actual = JsonUtils.objectToJson(pluginDescriptor);
         JSONAssert.assertEquals("""

File: src/test/java/run/halo/app/plugin/YamlPluginFinderTest.java
Patch:
@@ -123,7 +123,7 @@ void findFailedWhenFileNotFound() {
     }
 
     @Test
-    void acceptArrayLicense() throws JSONException, JsonProcessingException {
+    void acceptArrayLicense() throws JSONException {
         Resource pluginResource = new InMemoryResource("""
             apiVersion: v1
             kind: Plugin
@@ -143,7 +143,7 @@ void acceptArrayLicense() throws JSONException, JsonProcessingException {
     }
 
     @Test
-    void acceptMultipleItemArrayLicense() throws JsonProcessingException, JSONException {
+    void acceptMultipleItemArrayLicense() throws JSONException {
         Resource pluginResource = new InMemoryResource("""
             apiVersion: v1
             kind: Plugin
@@ -167,7 +167,7 @@ void acceptMultipleItemArrayLicense() throws JsonProcessingException, JSONExcept
     }
 
     @Test
-    void acceptArrayObjectLicense() throws JSONException, JsonProcessingException {
+    void acceptArrayObjectLicense() throws JSONException {
         Resource pluginResource = new InMemoryResource("""
             apiVersion: v1
             kind: Plugin

File: src/main/java/run/halo/app/plugin/PluginRequestMappingHandlerMapping.java
Patch:
@@ -121,6 +121,7 @@ protected RequestMappingInfo getPluginMappingForMethod(String pluginId,
 
     protected String buildPrefix(String pluginId, String version) {
         GroupVersion groupVersion = GroupVersion.parseAPIVersion(version);
-        return String.format("/api/%s/plugins/%s", groupVersion.version(), pluginId);
+        return String.format("/apis/plugin.api.halo.run/%s/plugins/%s", groupVersion.version(),
+            pluginId);
     }
 }

File: src/main/java/run/halo/app/security/authorization/Attributes.java
Patch:
@@ -66,5 +66,5 @@ public interface Attributes {
      */
     String getPath();
 
-    String pluginName();
+    String getSubName();
 }

File: src/main/java/run/halo/app/security/authorization/AttributesRecord.java
Patch:
@@ -69,7 +69,7 @@ public String getPath() {
     }
 
     @Override
-    public String pluginName() {
-        return requestInfo.getPluginName();
+    public String getSubName() {
+        return requestInfo.getSubName();
     }
 }

File: src/main/java/run/halo/app/core/extension/Plugin.java
Patch:
@@ -62,6 +62,8 @@ public static class PluginSpec {
         private String pluginClass = BasePlugin.class.getName();
 
         private Boolean enabled = false;
+
+        private List<String> extensionLocations;
     }
 
     @Getter

File: src/main/java/run/halo/app/plugin/PluginAutoConfiguration.java
Patch:
@@ -96,7 +96,7 @@ public ClassLoader loadPlugin(Path pluginPath,
                                     PluginDescriptor pluginDescriptor) {
                                     PluginClassLoader pluginClassLoader =
                                         new PluginClassLoader(pluginManager, pluginDescriptor,
-                                            getClass().getClassLoader());
+                                            getClass().getClassLoader(), ClassLoadingStrategy.APD);
 
                                     loadClasses(pluginPath, pluginClassLoader);
                                     loadJars(pluginPath, pluginClassLoader);

File: src/main/java/run/halo/app/plugin/PluginServiceImpl.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.plugin;
 
+import java.time.Instant;
 import java.util.List;
 import org.pf4j.PluginState;
 import org.springframework.stereotype.Service;
@@ -55,6 +56,7 @@ public Plugin startup(String pluginName) {
             jsBundleRule.cssRule(pluginName));
         status.setEntry(jsBundleRoute);
         status.setStylesheet(cssBundleRoute);
+        status.setLastStartTime(Instant.now());
         extensionClient.update(plugin);
         return plugin;
     }

File: src/main/java/run/halo/app/plugin/resources/ReverseProxyRouterFunctionFactory.java
Patch:
@@ -25,6 +25,7 @@
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.infra.utils.PathUtils;
 import run.halo.app.plugin.PluginApplicationContext;
+import run.halo.app.plugin.PluginConst;
 
 /**
  * <p>Plugin's reverse proxy router factory.</p>
@@ -39,8 +40,6 @@
 public class ReverseProxyRouterFunctionFactory {
     private static final String REVERSE_PROXY_API_PREFIX = "/assets";
 
-    public static final String REVERSE_PROXY_PLUGIN_LABEL_NAME = "plugin.halo.run/plugin-name";
-
     private final ExtensionClient extensionClient;
 
     private final JsBundleRuleProvider jsBundleRuleProvider;
@@ -99,7 +98,7 @@ private List<ReverseProxyRule> getReverseProxyRules(String pluginId) {
                 reverseProxy -> {
                     String pluginName = reverseProxy.getMetadata()
                         .getLabels()
-                        .get(REVERSE_PROXY_PLUGIN_LABEL_NAME);
+                        .get(PluginConst.PLUGIN_NAME_LABEL_NAME);
                     return pluginId.equals(pluginName);
                 },
                 null)

File: src/test/java/run/halo/app/plugin/resources/ReverseProxyRouterFunctionFactoryTest.java
Patch:
@@ -18,6 +18,7 @@
 import run.halo.app.extension.ExtensionClient;
 import run.halo.app.extension.Metadata;
 import run.halo.app.plugin.PluginApplicationContext;
+import run.halo.app.plugin.PluginConst;
 
 /**
  * Tests for {@link ReverseProxyRouterFunctionFactory}.
@@ -64,7 +65,7 @@ private ReverseProxy mockReverseProxy() {
         ReverseProxy reverseProxy = new ReverseProxy();
         Metadata metadata = new Metadata();
         metadata.setLabels(
-            Map.of(ReverseProxyRouterFunctionFactory.REVERSE_PROXY_PLUGIN_LABEL_NAME, "fakeA"));
+            Map.of(PluginConst.PLUGIN_NAME_LABEL_NAME, "fakeA"));
         reverseProxy.setMetadata(metadata);
         reverseProxy.setRules(List.of(reverseProxyRule));
         return reverseProxy;

File: src/main/java/run/halo/app/plugin/HaloPluginManager.java
Patch:
@@ -183,7 +183,7 @@ public void startPlugins() {
 
                     pluginWrapper.getPlugin().start();
 
-                    requestMappingManager.registerControllers(pluginWrapper);
+                    requestMappingManager.registerHandlerMappings(pluginWrapper);
 
                     pluginWrapper.setPluginState(PluginState.STARTED);
                     pluginWrapper.setFailedException(null);
@@ -259,7 +259,7 @@ private PluginState doStartPlugin(String pluginId) {
             // create plugin instance and start it
             pluginWrapper.getPlugin().start();
 
-            requestMappingManager.registerControllers(pluginWrapper);
+            requestMappingManager.registerHandlerMappings(pluginWrapper);
 
             pluginWrapper.setPluginState(PluginState.STARTED);
             startedPlugins.add(pluginWrapper);
@@ -358,7 +358,7 @@ public PluginState reloadPlugin(String pluginId) {
      */
     public void releaseAdditionalResources(String pluginId) {
         // release request mapping
-        requestMappingManager.removeControllerMapping(pluginId);
+        requestMappingManager.removeHandlerMappings(pluginId);
         try {
             pluginApplicationInitializer.contextDestroyed(pluginId);
         } catch (Exception e) {

File: src/main/java/run/halo/app/plugin/PluginCompositeRouterFunction.java
Patch:
@@ -98,6 +98,9 @@ public void onPluginStopped(HaloPluginStoppedEvent haloPluginStoppedEvent) {
     @SuppressWarnings("unchecked")
     private List<RouterFunction<ServerResponse>> routerFunctions(
         PluginApplicationContext applicationContext) {
+        // TODO: Since the parent of the ApplicationContext of the plugin is RootApplicationContext
+        //  obtaining the RouterFunction here will obtain the existing in the parent
+        //  resulting in a loop when there is no matching route
         List<RouterFunction<ServerResponse>> functions =
             applicationContext.getBeanProvider(RouterFunction.class)
                 .orderedStream()

File: src/main/java/run/halo/app/security/authorization/Attributes.java
Patch:
@@ -65,4 +65,6 @@ public interface Attributes {
      * @return returns the path of the request
      */
     String getPath();
+
+    String pluginName();
 }

File: src/test/java/run/halo/app/security/authorization/DefaultRoleBindingServiceTest.java
Patch:
@@ -18,7 +18,6 @@
  * @author guqing
  * @since 2.0.0
  */
-// @ExtendWith(SpringExtension.class)
 public class DefaultRoleBindingServiceTest {
 
     private DefaultRoleBindingService roleBindingLister;

File: src/main/java/run/halo/app/core/extension/service/DefaultRoleBindingService.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.security.authorization;
+package run.halo.app.core.extension.service;
 
 import java.util.Collection;
 import java.util.Set;
@@ -20,7 +20,7 @@
  * @since 2.0.0
  */
 @Slf4j
-public class DefaultRoleBindingLister implements RoleBindingLister {
+public class DefaultRoleBindingService implements RoleBindingService {
     private static final String SCOPE_AUTHORITY_PREFIX = "SCOPE_";
     private static final String ROLE_AUTHORITY_PREFIX = "ROLE_";
 

File: src/main/java/run/halo/app/core/extension/service/RoleBindingService.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.security.authorization;
+package run.halo.app.core.extension.service;
 
 import java.util.Collection;
 import java.util.Set;
@@ -9,7 +9,8 @@
  * @since 2.0.0
  */
 @FunctionalInterface
-public interface RoleBindingLister {
+public interface RoleBindingService {
 
     Set<String> listBoundRoleNames(Collection<? extends GrantedAuthority> authorities);
+
 }

File: src/main/java/run/halo/app/security/authorization/AuthorizingVisitor.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import run.halo.app.core.extension.Role;
 
 /**
  * authorizing visitor short-circuits once allowed, and collects any resolution errors encountered.
@@ -25,7 +26,7 @@ public AuthorizingVisitor(Attributes requestAttributes) {
     }
 
     @Override
-    public boolean visit(String source, PolicyRule rule, Throwable error) {
+    public boolean visit(String source, Role.PolicyRule rule, Throwable error) {
         if (rule != null && requestEvaluation.ruleAllows(requestAttributes, rule)) {
             this.allowed = true;
             this.reason = String.format("RBAC: allowed by %s", source);

File: src/main/java/run/halo/app/security/authorization/PolicyRuleList.java
Patch:
@@ -3,12 +3,13 @@
 import java.util.ArrayList;
 import java.util.LinkedList;
 import java.util.List;
+import run.halo.app.core.extension.Role;
 
 /**
  * @author guqing
  * @since 2.0.0
  */
-public class PolicyRuleList extends LinkedList<PolicyRule> {
+public class PolicyRuleList extends LinkedList<Role.PolicyRule> {
     private final List<Throwable> errors = new ArrayList<>(4);
 
     /**

File: src/main/java/run/halo/app/security/authorization/RequestInfoAuthorizationManager.java
Patch:
@@ -14,6 +14,7 @@
 import org.springframework.util.Assert;
 import org.springframework.util.CollectionUtils;
 import reactor.core.publisher.Mono;
+import run.halo.app.core.extension.service.RoleService;
 
 @Slf4j
 public class RequestInfoAuthorizationManager
@@ -23,8 +24,8 @@ public class RequestInfoAuthorizationManager
 
     private final AuthorizationRuleResolver ruleResolver;
 
-    public RequestInfoAuthorizationManager(RoleGetter roleGetter) {
-        this.ruleResolver = new DefaultRuleResolver(roleGetter);
+    public RequestInfoAuthorizationManager(RoleService roleService) {
+        this.ruleResolver = new DefaultRuleResolver(roleService);
     }
 
     @Override

File: src/main/java/run/halo/app/security/authorization/RuleAccumulator.java
Patch:
@@ -1,9 +1,11 @@
 package run.halo.app.security.authorization;
 
+import run.halo.app.core.extension.Role;
+
 /**
  * @author guqing
  * @since 2.0.0
  */
 public interface RuleAccumulator {
-    boolean visit(String source, PolicyRule rule, Throwable err);
+    boolean visit(String source, Role.PolicyRule rule, Throwable err);
 }

File: src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java
Patch:
@@ -12,7 +12,7 @@
 import run.halo.app.extension.exception.SchemaViolationException;
 import run.halo.app.extension.store.ExtensionStore;
 
-class JSONExtensionConverterTest {
+class JsonExtensionConverterTest {
 
     JSONExtensionConverter converter;
 
@@ -71,7 +71,7 @@ void shouldThrowSchemaViolationExceptionWhenNameNotSet() {
         fake.setKind("Fake");
         var error = assertThrows(SchemaViolationException.class, () -> converter.convertTo(fake));
         assertEquals(1, error.getErrors().size());
-        assertEquals("$.metadata.name: null found, string expected",
+        assertEquals("$.metadata.name: is missing but it is required",
             error.getErrors().iterator().next().getMessage());
     }
 

File: src/main/java/run/halo/app/extension/Metadata.java
Patch:
@@ -3,13 +3,15 @@
 import java.time.Instant;
 import java.util.Map;
 import lombok.Data;
+import lombok.EqualsAndHashCode;
 
 /**
  * Metadata of Extension.
  *
  * @author johnniang
  */
 @Data
+@EqualsAndHashCode
 public class Metadata implements MetadataOperator {
 
     /**

File: src/test/java/run/halo/app/extension/FakeExtension.java
Patch:
@@ -5,5 +5,5 @@
     kind = "Fake",
     plural = "fakes",
     singular = "fake")
-class FakeExtension extends AbstractExtension {
+public class FakeExtension extends AbstractExtension {
 }

File: src/test/java/run/halo/app/plugin/YamlPluginFinderTest.java
Patch:
@@ -59,7 +59,7 @@ void findTest() throws JsonProcessingException, JSONException {
                         "requires": ">=2.0.0",
                         "pluginClass": "run.halo.app.plugin.BasePlugin"
                     },
-                    "apiVersion": "v1",
+                    "apiVersion": "plugin.halo.run/v1alpha1",
                     "kind": "Plugin",
                     "metadata": {
                         "name": "plugin-1",
@@ -72,7 +72,7 @@ void findTest() throws JsonProcessingException, JSONException {
                 }
                 """,
             JsonUtils.objectToJson(plugin),
-            false);
+            true);
     }
 
     @Test
@@ -154,7 +154,7 @@ void acceptArrayObjectLicense() throws JSONException, JsonProcessingException {
     void deserializeLicense() throws JSONException, JsonProcessingException {
         String pluginJson = """
             {
-                "apiVersion": "v1",
+                "apiVersion": "plugin.halo.run/v1alpha1",
                 "kind": "Plugin",
                 "metadata": {
                     "name": "plugin-1"

File: src/main/java/run/halo/app/plugin/PluginAutoConfiguration.java
Patch:
@@ -18,7 +18,7 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.util.StringUtils;
-import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
+import org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping;
 
 /**
  * Plugin autoconfiguration for Spring Boot.

File: src/main/java/run/halo/app/plugin/PluginRequestMappingManager.java
Patch:
@@ -8,7 +8,7 @@
 import org.springframework.context.support.GenericApplicationContext;
 import org.springframework.stereotype.Controller;
 import org.springframework.util.ReflectionUtils;
-import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
+import org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerMapping;
 
 /**
  * Plugin mapping manager.

File: src/main/java/run/halo/app/security/authorization/Attributes.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import org.springframework.security.core.userdetails.UserDetails;
 

File: src/main/java/run/halo/app/security/authorization/AttributesRecord.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import org.springframework.security.core.userdetails.UserDetails;
 

File: src/main/java/run/halo/app/security/authorization/AuthorizationRuleResolver.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import org.springframework.security.core.userdetails.UserDetails;
 

File: src/main/java/run/halo/app/security/authorization/AuthorizingVisitor.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import java.util.ArrayList;
 import java.util.List;

File: src/main/java/run/halo/app/security/authorization/DefaultRoleGetter.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Component;

File: src/main/java/run/halo/app/security/authorization/DefaultRuleResolver.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import java.util.Collections;
 import java.util.List;
@@ -39,7 +39,7 @@ public PolicyRuleList rulesFor(UserDetails user) {
 
     @Override
     public void visitRulesFor(UserDetails user, RuleAccumulator visitor) {
-        Set<String> roleNames = roleBindingLister.listBoundRoleNames();
+        Set<String> roleNames = roleBindingLister.listBoundRoleNames(user.getAuthorities());
 
         List<PolicyRule> rules = Collections.emptyList();
         for (String roleName : roleNames) {

File: src/main/java/run/halo/app/security/authorization/PolicyRule.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import lombok.Data;
 

File: src/main/java/run/halo/app/security/authorization/PolicyRuleList.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import java.util.ArrayList;
 import java.util.LinkedList;

File: src/main/java/run/halo/app/security/authorization/RbacRequestEvaluation.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import java.util.List;
 import java.util.Objects;

File: src/main/java/run/halo/app/security/authorization/RequestInfo.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import java.util.Objects;
 import lombok.Getter;

File: src/main/java/run/halo/app/security/authorization/Role.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import io.swagger.v3.oas.annotations.media.Schema;
 import java.util.List;

File: src/main/java/run/halo/app/security/authorization/RoleBinding.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import java.util.List;
 import lombok.Data;

File: src/main/java/run/halo/app/security/authorization/RoleGetter.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import org.springframework.lang.NonNull;
 

File: src/main/java/run/halo/app/security/authorization/RoleRef.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import lombok.Data;
 

File: src/main/java/run/halo/app/security/authorization/RuleAccumulator.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 /**
  * @author guqing

File: src/main/java/run/halo/app/security/authorization/Subject.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import lombok.Data;
 

File: src/test/java/run/halo/app/PathPrefixPredicateTest.java
Patch:
@@ -28,9 +28,9 @@ public void prefixPredicate() {
         assertThat(result).isTrue();
     }
 
-    @RestController
+    @RestController("controller-for-test")
     @RequestMapping("/test-prefix")
-    public static class TestController {
+    class TestController {
 
     }
 }

File: src/test/java/run/halo/app/security/authorization/PolicyRuleTest.java
Patch:
@@ -1,4 +1,4 @@
-package run.halo.app.identity.authorization;
+package run.halo.app.security.authorization;
 
 import static org.assertj.core.api.Assertions.assertThat;
 

File: src/main/java/run/halo/app/identity/authorization/DefaultRuleResolver.java
Patch:
@@ -76,7 +76,7 @@ public void visitRulesFor(UserDetails user, RuleAccumulator visitor) {
 
     String roleBindingDescriber(RoleBinding roleBinding, Subject subject) {
         String describeSubject = String.format("%s %s", subject.kind, subject.name);
-        return String.format("RoleBinding %s of %s %s to %s", roleBinding.metadata().getName(),
+        return String.format("RoleBinding %s of %s %s to %s", roleBinding.getMetadata().getName(),
             roleBinding.roleRef.getKind(), roleBinding.roleRef.getName(), describeSubject);
     }
 

File: src/main/java/run/halo/app/identity/authentication/verifier/AbstractOAuth2TokenAuthenticationToken.java
Patch:
@@ -14,8 +14,7 @@
  * Base class for {@link AbstractAuthenticationToken} implementations that expose common
  * attributes between different OAuth 2.0 Access Token Formats.
  *
- * <p>
- * For example, a {@link Jwt} could expose its {@link Jwt#getClaims() claims} via
+ * <p>For example, a {@link Jwt} could expose its {@link Jwt#getClaims() claims} via
  * {@link #getTokenAttributes()} or an &quot;Introspected&quot; OAuth 2.0 Access Token
  * could expose the attributes of the Introspection Response via
  * {@link #getTokenAttributes()}.

File: src/main/java/run/halo/app/identity/authentication/verifier/BearerTokenAuthenticationFilter.java
Patch:
@@ -25,9 +25,8 @@
 import org.springframework.web.filter.OncePerRequestFilter;
 
 /**
- * Authenticates requests that contain an OAuth 2.0
- * <a href="https://tools.ietf.org/html/rfc6750#section-1.2">Bearer Token</a>.
- * <p>
+ * <p>Authenticates requests that contain an OAuth 2.0
+ * <a href="https://tools.ietf.org/html/rfc6750#section-1.2">Bearer Token</a>.</p>
  * This filter should be wired with an {@link AuthenticationManager} that can authenticate
  * a {@link BearerTokenAuthenticationToken}.
  *

File: src/main/java/run/halo/app/identity/authorization/DefaultRuleResolver.java
Patch:
@@ -76,7 +76,7 @@ public void visitRulesFor(UserDetails user, RuleAccumulator visitor) {
 
     String roleBindingDescriber(RoleBinding roleBinding, Subject subject) {
         String describeSubject = String.format("%s %s", subject.kind, subject.name);
-        return String.format("RoleBinding %s of %s %s to %s", roleBinding.getName(),
+        return String.format("RoleBinding %s of %s %s to %s", roleBinding.metadata().getName(),
             roleBinding.roleRef.getKind(), roleBinding.roleRef.getName(), describeSubject);
     }
 

File: src/main/java/run/halo/app/identity/authorization/PolicyRule.java
Patch:
@@ -6,7 +6,7 @@
 
 /**
  * PolicyRule holds information that describes a policy rule, but does not contain information
- * about who the rule applies to or which namespace the rule applies to.
+ * about whom the rule applies to or which namespace the rule applies to.
  *
  * @author guqing
  * @since 2.0.0

File: src/main/java/run/halo/app/identity/authorization/RoleBindingLister.java
Patch:
@@ -8,5 +8,6 @@
  */
 @FunctionalInterface
 public interface RoleBindingLister {
+
     List<RoleBinding> listRoleBindings();
 }

File: src/main/java/run/halo/app/identity/authentication/ProviderSettings.java
Patch:
@@ -18,7 +18,7 @@ private ProviderSettings(Map<String, Object> settings) {
     }
 
     /**
-     * Returns the URL of the Provider's Issuer Identifier
+     * Returns the URL of the Provider's Issuer Identifier.
      *
      * @return the URL of the Provider's Issuer Identifier
      */

File: src/main/java/run/halo/app/identity/authentication/verifier/BearerTokenAuthentication.java
Patch:
@@ -23,7 +23,7 @@ public class BearerTokenAuthentication
     private final Map<String, Object> attributes;
 
     /**
-     * Constructs a {@link BearerTokenAuthentication} with the provided arguments
+     * Constructs a {@link BearerTokenAuthentication} with the provided arguments.
      *
      * @param principal The OAuth 2.0 attributes
      * @param credentials The verified token

File: src/main/java/run/halo/app/identity/authentication/verifier/BearerTokenAuthenticationEntryPoint.java
Patch:
@@ -58,7 +58,7 @@ public void commence(HttpServletRequest request, HttpServletResponse response,
     }
 
     /**
-     * Set the default realm name to use in the bearer token error response
+     * Set the default realm name to use in the bearer token error response.
      *
      * @param realmName realm name
      */

File: src/main/java/run/halo/app/identity/authentication/verifier/BearerTokenAuthenticationFilter.java
Patch:
@@ -60,7 +60,7 @@ public class BearerTokenAuthenticationFilter extends OncePerRequestFilter {
         new NullSecurityContextRepository();
 
     /**
-     * Construct a {@code BearerTokenAuthenticationFilter} using the provided parameter(s)
+     * Construct a {@code BearerTokenAuthenticationFilter} using the provided parameter(s).
      *
      * @param authenticationManagerResolver authentication manager resolver
      */
@@ -72,7 +72,7 @@ public BearerTokenAuthenticationFilter(
     }
 
     /**
-     * Construct a {@code BearerTokenAuthenticationFilter} using the provided parameter(s)
+     * Construct a {@code BearerTokenAuthenticationFilter} using the provided parameter(s).
      *
      * @param authenticationManager authentication manager
      */

File: src/main/java/run/halo/app/identity/authentication/verifier/BearerTokenAuthenticationToken.java
Patch:
@@ -16,7 +16,7 @@ public class BearerTokenAuthenticationToken extends AbstractAuthenticationToken
     private final String token;
 
     /**
-     * Create a {@code BearerTokenAuthenticationToken} using the provided parameter(s)
+     * Create a {@code BearerTokenAuthenticationToken} using the provided parameter(s).
      *
      * @param token - the bearer token
      */
@@ -28,7 +28,7 @@ public BearerTokenAuthenticationToken(String token) {
 
     /**
      * Get the
-     * <a href="https://tools.ietf.org/html/rfc6750#section-1.2">Bearer Token</a>
+     * <a href="https://tools.ietf.org/html/rfc6750#section-1.2">Bearer Token</a>.
      *
      * @return the token that proves the caller's authority to perform the
      * {@link jakarta.servlet.http.HttpServletRequest}

File: src/main/java/run/halo/app/identity/authentication/verifier/BearerTokenError.java
Patch:
@@ -22,7 +22,7 @@ public final class BearerTokenError extends OAuth2Error {
     private final String scope;
 
     /**
-     * Create a {@code BearerTokenError} using the provided parameters
+     * Create a {@code BearerTokenError} using the provided parameters.
      *
      * @param errorCode the error code
      * @param httpStatus the HTTP status
@@ -33,7 +33,7 @@ public BearerTokenError(String errorCode, HttpStatus httpStatus, String descript
     }
 
     /**
-     * Create a {@code BearerTokenError} using the provided parameters
+     * Create a {@code BearerTokenError} using the provided parameters.
      *
      * @param errorCode the error code
      * @param httpStatus the HTTP status

File: src/main/java/run/halo/app/identity/authentication/verifier/JwtAuthenticationToken.java
Patch:
@@ -61,7 +61,7 @@ public Map<String, Object> getTokenAttributes() {
     }
 
     /**
-     * The principal name which is, by default, the {@link Jwt}'s subject
+     * The principal name which is, by default, the {@link Jwt}'s subject.
      */
     @Override
     public String getName() {

File: src/main/java/run/halo/app/identity/authorization/AuthorizingVisitor.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.List;
 
 /**
- * authorizing visitor short-circuits once allowed, and collects any resolution errors encountered
+ * authorizing visitor short-circuits once allowed, and collects any resolution errors encountered.
  *
  * @author guqing
  * @since 2.0.0

File: src/main/java/run/halo/app/identity/authorization/RequestInfoFactory.java
Patch:
@@ -15,11 +15,12 @@ public class RequestInfoFactory {
         new RequestInfoFactory(Set.of("api", "apis"), Set.of("api"));
 
     /**
-     * without leading and trailing slashes
+     * without leading and trailing slashes.
      */
     final Set<String> apiPrefixes;
+
     /**
-     * without leading and trailing slashes
+     * without leading and trailing slashes.
      */
     final Set<String> grouplessApiPrefixes;
 

File: src/test/java/run/halo/app/authentication/verifyer/BearerTokenAuthenticationTest.java
Patch:
@@ -22,7 +22,7 @@
 import run.halo.app.identity.authentication.verifier.BearerTokenAuthentication;
 
 /**
- * Tests for {@link BearerTokenAuthentication}
+ * Tests for {@link BearerTokenAuthentication}.
  *
  * @author guqing
  * @since 2.0.0

File: src/test/java/run/halo/app/authentication/verifyer/BearerTokenAuthenticationTokenTest.java
Patch:
@@ -7,7 +7,7 @@
 import run.halo.app.identity.authentication.verifier.BearerTokenAuthenticationToken;
 
 /**
- * Tests for {@link BearerTokenAuthenticationToken}
+ * Tests for {@link BearerTokenAuthenticationToken}.
  *
  * @author guqing
  * @since 2.0.0

File: src/test/java/run/halo/app/authentication/verifyer/BearerTokenErrorTest.java
Patch:
@@ -8,7 +8,7 @@
 import run.halo.app.identity.authentication.verifier.BearerTokenError;
 
 /**
- * Tests for {@link BearerTokenError}
+ * Tests for {@link BearerTokenError}.
  *
  * @author guqing
  * @see <a href="https://tools.ietf.org/html/rfc6750#section-3.1">Bearer Token Error</a>

File: src/test/java/run/halo/app/authentication/verifyer/BearerTokenErrorsTest.java
Patch:
@@ -9,7 +9,7 @@
 import run.halo.app.identity.authentication.verifier.BearerTokenErrors;
 
 /**
- * Tests for {@link BearerTokenErrors}
+ * Tests for {@link BearerTokenErrors}.
  *
  * @author guqing
  * @since 2.0.0

File: src/test/java/run/halo/app/authentication/verifyer/JwtAuthenticationProviderTest.java
Patch:
@@ -26,7 +26,7 @@
 import run.halo.app.identity.authentication.verifier.JwtAuthenticationToken;
 
 /**
- * Tests for {@link JwtAuthenticationProvider}
+ * Tests for {@link JwtAuthenticationProvider}.
  *
  * @author guqing
  * @since 2.0.0

File: src/test/java/run/halo/app/authentication/verifyer/JwtGrantedAuthoritiesConverterTest.java
Patch:
@@ -13,7 +13,7 @@
 import run.halo.app.identity.authentication.verifier.JwtGrantedAuthoritiesConverter;
 
 /**
- * Tests for {@link JwtGrantedAuthoritiesConverter}
+ * Tests for {@link JwtGrantedAuthoritiesConverter}.
  *
  * @author guqing
  * @since 2.0.0

File: src/main/java/run/halo/app/identity/authentication/JwtDaoAuthenticationProvider.java
Patch:
@@ -60,11 +60,9 @@ protected Authentication createSuccessAuthentication(Object principal,
         Set<String> scopes = usernamePasswordAuthenticationToken.getAuthorities().stream()
             .map(GrantedAuthority::getAuthority).collect(Collectors.toSet());
 
-        ProviderContext providerContext =
-            new ProviderContext(ProviderSettings.builder().build(), () -> "/issuer");
         DefaultOAuth2TokenContext.Builder tokenContextBuilder = DefaultOAuth2TokenContext.builder()
             .principal(authentication)
-            .providerContext(providerContext)
+            .providerContext(ProviderContextHolder.getProviderContext())
             .authorizedScopes(scopes);
 
         OAuth2Authorization.Builder authorizationBuilder = OAuth2Authorization.from(authorization);

File: src/main/java/run/halo/app/identity/authentication/JwtGenerator.java
Patch:
@@ -41,7 +41,8 @@ public record JwtGenerator(JwtEncoder jwtEncoder) implements OAuth2TokenGenerato
     @Override
     public Jwt generate(OAuth2TokenContext context) {
         if (context.getTokenType() == null
-            || !OAuth2TokenType.ACCESS_TOKEN.equals(context.getTokenType())) {
+            || (!OAuth2TokenType.ACCESS_TOKEN.equals(context.getTokenType())
+            && !OAuth2TokenType.REFRESH_TOKEN.equals(context.getTokenType()))) {
             return null;
         }
         Instant issuedAt = Instant.now();

File: src/main/java/run/halo/app/cache/AbstractStringCacheStore.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.cache;
 
 import com.fasterxml.jackson.core.JsonProcessingException;
+import com.fasterxml.jackson.core.type.TypeReference;
 import java.io.IOException;
 import java.util.Optional;
 import java.util.concurrent.TimeUnit;
@@ -22,8 +23,8 @@ protected Optional<CacheWrapper<String>> jsonToCacheWrapper(String json) {
         Assert.hasText(json, "json value must not be null");
         CacheWrapper<String> cacheWrapper = null;
         try {
-            cacheWrapper = JsonUtils.jsonToObject(json, CacheWrapper.class);
-        } catch (IOException e) {
+            cacheWrapper = JsonUtils.jsonToObject(json, new TypeReference<>() {});
+        } catch (Exception e) {
             log.debug("Failed to convert json to wrapper value bytes: [{}]", json, e);
         }
         return Optional.ofNullable(cacheWrapper);

File: src/main/java/run/halo/app/model/properties/PrimaryProperties.java
Patch:
@@ -23,7 +23,7 @@ public enum PrimaryProperties implements PropertyEnum {
     /**
      * blog birthday
      */
-    BIRTHDAY("birthday", Long.class, ""),
+    BIRTHDAY("birthday", Long.class, "0"),
 
     /**
      * developer mode.

File: src/main/java/run/halo/app/service/impl/ContentPatchLogServiceImpl.java
Patch:
@@ -70,7 +70,8 @@ private Integer getVersionByPostId(Integer postId) {
         if (latestPatchLog == null) {
             // There is no patchLog record
             version = 1;
-        } else if (PostStatus.PUBLISHED.equals(latestPatchLog.getStatus())) {
+        } else if (PostStatus.PUBLISHED.equals(latestPatchLog.getStatus())
+            || PostStatus.INTIMATE.equals(latestPatchLog.getStatus())) {
             // There is no draft, a draft record needs to be created
             // so the version number needs to be incremented
             version = latestPatchLog.getVersion() + 1;

File: src/main/java/run/halo/app/service/base/BasePostService.java
Patch:
@@ -330,8 +330,8 @@ POST updateDraftContent(@Nullable String content, String originalContent,
     /**
      * Generate description.
      *
-     * @param content html content must not be null.
+     * @param content html content.
      * @return description
      */
-    String generateDescription(@NonNull String content);
+    String generateDescription(@Nullable String content);
 }

File: src/main/java/run/halo/app/controller/content/api/PostController.java
Patch:
@@ -109,7 +109,7 @@ public PostDetailVO getBy(@PathVariable("postId") Integer postId,
 
         if (formatDisabled) {
             // Clear the format content
-            postDetailVO.setFormatContent(null);
+            postDetailVO.setContent(null);
         }
 
         if (sourceDisabled) {
@@ -133,7 +133,7 @@ public PostDetailVO getBy(@RequestParam("slug") String slug,
 
         if (formatDisabled) {
             // Clear the format content
-            postDetailVO.setFormatContent(null);
+            postDetailVO.setContent(null);
         }
 
         if (sourceDisabled) {

File: src/main/java/run/halo/app/controller/content/api/SheetController.java
Patch:
@@ -78,7 +78,7 @@ public SheetDetailVO getBy(@PathVariable("sheetId") Integer sheetId,
 
         if (formatDisabled) {
             // Clear the format content
-            sheetDetailVO.setFormatContent(null);
+            sheetDetailVO.setContent(null);
         }
 
         if (sourceDisabled) {
@@ -102,7 +102,7 @@ public SheetDetailVO getBy(@RequestParam("slug") String slug,
 
         if (formatDisabled) {
             // Clear the format content
-            sheetDetailVO.setFormatContent(null);
+            sheetDetailVO.setContent(null);
         }
 
         if (sourceDisabled) {

File: src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java
Patch:
@@ -32,6 +32,8 @@ public class BasePostSimpleDTO extends BasePostMinimalDTO {
 
     private Long wordCount;
 
+    private Boolean inProgress;
+
     public boolean isTopped() {
         return this.topPriority != null && this.topPriority > 0;
     }

File: src/main/java/run/halo/app/model/params/CategoryParam.java
Patch:
@@ -14,11 +14,14 @@
  *
  * @author johnniang
  * @author ryanwang
+ * @author guqing
  * @date 2019-03-21
  */
 @Data
 public class CategoryParam implements InputConverter<Category> {
 
+    private Integer id;
+
     @NotBlank(message = "分类名称不能为空")
     @Size(max = 255, message = "分类名称的字符长度不能超过 {max}")
     private String name;

File: src/main/java/run/halo/app/controller/admin/api/CategoryController.java
Patch:
@@ -53,7 +53,7 @@ public CategoryDTO getBy(@PathVariable("categoryId") Integer categoryId) {
     @GetMapping
     @ApiOperation("Lists all categories")
     public List<? extends CategoryDTO> listAll(
-        @SortDefault(sort = "createTime", direction = DESC) Sort sort,
+        @SortDefault(sort = "priority", direction = ASC) Sort sort,
         @RequestParam(name = "more", required = false, defaultValue = "false") boolean more) {
         if (more) {
             return postCategoryService.listCategoryWithPostCountDto(sort, true);
@@ -64,7 +64,8 @@ public List<? extends CategoryDTO> listAll(
 
     @GetMapping("tree_view")
     @ApiOperation("List all categories as tree")
-    public List<CategoryVO> listAsTree(@SortDefault(sort = "name", direction = ASC) Sort sort) {
+    public List<CategoryVO> listAsTree(
+        @SortDefault(sort = "priority", direction = ASC) Sort sort) {
         return categoryService.listAsTree(sort);
     }
 

File: src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java
Patch:
@@ -1,6 +1,6 @@
 package run.halo.app.core.freemarker.tag;
 
-import static org.springframework.data.domain.Sort.Direction.DESC;
+import static org.springframework.data.domain.Sort.Direction.ASC;
 
 import freemarker.core.Environment;
 import freemarker.template.Configuration;
@@ -51,11 +51,11 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars,
             switch (method) {
                 case "list":
                     env.setVariable("categories", builder.build().wrap(postCategoryService
-                        .listCategoryWithPostCountDto(Sort.by(DESC, "createTime"), false)));
+                        .listCategoryWithPostCountDto(Sort.by(ASC, "priority"), false)));
                     break;
                 case "tree":
                     env.setVariable("categories", builder.build()
-                        .wrap(categoryService.listAsTree(Sort.by(DESC, "createTime"))));
+                        .wrap(categoryService.listAsTree(Sort.by(ASC, "priority"))));
                     break;
                 case "listByPostId":
                     Integer postId = Integer.parseInt(params.get("postId").toString());

File: src/main/java/run/halo/app/model/dto/CategoryDTO.java
Patch:
@@ -36,4 +36,6 @@ public class CategoryDTO implements OutputConverter<CategoryDTO, Category> {
     private Date createTime;
 
     private String fullPath;
+
+    private Integer priority;
 }

File: src/main/java/run/halo/app/service/PostCategoryService.java
Patch:
@@ -22,6 +22,7 @@
  *
  * @author johnniang
  * @author ryanwang
+ * @author guqing
  * @date 2019-03-19
  */
 public interface PostCategoryService extends CrudService<PostCategory, Integer> {

File: src/main/java/run/halo/app/handler/file/HuaweiObsFileHandler.java
Patch:
@@ -82,7 +82,7 @@ public HuaweiObsFileHandler(OptionService optionService,
 
         try {
             FilePathDescriptor pathDescriptor = new FilePathDescriptor.Builder()
-                .setBasePath(domain)
+                .setBasePath(basePath.toString())
                 .setSubPath(source)
                 .setAutomaticRename(true)
                 .setRenamePredicate(relativePath ->

File: src/main/java/run/halo/app/listener/StartedListener.java
Patch:
@@ -165,10 +165,10 @@ private void initThemes() {
             }
 
             // Create theme folder
-            Path themePath = themeService.getBasePath();
+            Path themePath = themeService.getBasePath().resolve(HaloConst.DEFAULT_THEME_ID);
 
             if (themeService.fetchThemePropertyBy(HaloConst.DEFAULT_THEME_ID).isEmpty()) {
-                FileUtils.copyFolder(source, themePath);
+                FileUtils.copyFolder(source.resolve(HaloConst.DEFAULT_THEME_DIR_NAME), themePath);
                 log.info("Copied theme folder from [{}] to [{}]", source, themePath);
             }
         } catch (Exception e) {

File: src/main/java/run/halo/app/model/entity/BaseComment.java
Patch:
@@ -51,7 +51,7 @@ public class BaseComment extends BaseEntity {
     /**
      * Commentator's email.
      */
-    @Column(name = "email", nullable = false)
+    @Column(name = "email")
     private String email;
 
     /**

File: src/main/java/run/halo/app/model/params/BaseCommentParam.java
Patch:
@@ -24,7 +24,6 @@ public abstract class BaseCommentParam<COMMENT> implements InputConverter<COMMEN
     @Size(max = 50, message = "评论者昵称的字符长度不能超过 {max}")
     private String author;
 
-    @NotBlank(message = "邮箱不能为空")
     @Email(message = "邮箱格式不正确")
     @Size(max = 255, message = "邮箱的字符长度不能超过 {max}")
     private String email;

File: src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.Set;
 import java.util.stream.Collectors;
 import javax.persistence.criteria.Predicate;
@@ -330,7 +331,8 @@ public COMMENT create(@NonNull COMMENT comment) {
         }
 
         if (comment.getGravatarMd5() == null) {
-            comment.setGravatarMd5(DigestUtils.md5Hex(comment.getEmail()));
+            comment.setGravatarMd5(
+                DigestUtils.md5Hex(Optional.ofNullable(comment.getEmail()).orElse("")));
         }
 
         if (StringUtils.isNotEmpty(comment.getAuthorUrl())) {

File: src/test/java/run/halo/app/it/BaseApiTest.java
Patch:
@@ -3,9 +3,9 @@
 import org.junit.jupiter.api.BeforeEach;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.test.context.SpringBootTest;
+import org.springframework.boot.test.web.client.TestRestTemplate;
 import org.springframework.boot.web.server.LocalServerPort;
 import org.springframework.test.context.ActiveProfiles;
-import org.springframework.web.client.RestTemplate;
 import run.halo.app.model.params.InstallParam;
 
 /**
@@ -18,7 +18,7 @@
 class BaseApiTest {
 
     @Autowired
-    RestTemplate restTemplate;
+    TestRestTemplate restTemplate;
 
     @LocalServerPort
     int port;

File: src/main/java/run/halo/app/controller/content/ContentSearchController.java
Patch:
@@ -74,7 +74,7 @@ public String search(Model model,
         final Page<PostListVO> posts = postService.convertToListVo(postPage);
 
         model.addAttribute("is_search", true);
-        model.addAttribute("keyword", keyword);
+        model.addAttribute("keyword", HtmlUtils.htmlEscape(keyword));
         model.addAttribute("posts", posts);
         model.addAttribute("meta_keywords", optionService.getSeoKeywords());
         model.addAttribute("meta_description", optionService.getSeoDescription());

File: src/main/java/run/halo/app/controller/admin/api/MenuController.java
Patch:
@@ -5,6 +5,7 @@
 
 import io.swagger.annotations.ApiOperation;
 import java.util.List;
+import java.util.Objects;
 import java.util.stream.Collectors;
 import javax.validation.Valid;
 import org.springframework.data.domain.Sort;
@@ -103,6 +104,7 @@ public MenuDTO updateBy(@PathVariable("menuId") Integer menuId,
     public List<MenuDTO> updateBatchBy(@RequestBody @Valid List<MenuParam> menuParams) {
         List<Menu> menus = menuParams
             .stream()
+            .filter(menuParam -> Objects.nonNull(menuParam.getId()))
             .map(InputConverter::convertTo)
             .collect(Collectors.toList());
         return menuService.updateInBatch(menus).stream()

File: src/main/java/run/halo/app/theme/GitThemeUpdater.java
Patch:
@@ -42,7 +42,7 @@ public ThemeProperty update(String themeId) throws IOException {
         // get theme property
         final var oldThemeProperty = themeRepository.fetchThemePropertyByThemeId(themeId)
             .orElseThrow(
-                () -> new NotFoundException("主题 " + themeId + " 不存在或以删除！").setErrorData(themeId));
+                () -> new NotFoundException("主题 " + themeId + " 不存在或已删除！").setErrorData(themeId));
 
         // get update config
         final var gitRepo = oldThemeProperty.getRepo();

File: src/main/java/run/halo/app/handler/file/SmmsFileHandler.java
Patch:
@@ -113,7 +113,7 @@ public UploadResult upload(MultipartFile file) {
 
         // Check status
         if (mapResponseEntity.getStatusCode().isError()) {
-            log.error("Server response detail: [{}]", mapResponseEntity.toString());
+            log.error("Server response detail: [{}]", mapResponseEntity);
             throw new FileOperationException(
                 "SM.MS 服务状态异常，状态码: " + mapResponseEntity.getStatusCodeValue());
         }

File: src/main/java/run/halo/app/handler/file/UpOssFileHandler.java
Patch:
@@ -107,6 +107,7 @@ public UploadResult upload(MultipartFile file) {
                         filePath + thumbnailStyleRule;
                 }
             });
+            result.close();
             return uploadResult;
         } catch (Exception e) {
             throw new FileOperationException("上传附件 " + file.getOriginalFilename() + " 到又拍云失败", e);

File: src/test/java/run/halo/app/utils/FilenameUtilsTest.java
Patch:
@@ -26,6 +26,7 @@ void getBasename() {
         assertEquals("", FilenameUtils.getBasename("a/b/c/"));
         assertEquals("o", FilenameUtils.getBasename("he/ll/o.tar.gz"));
         assertEquals("i", FilenameUtils.getBasename("h/i.tar.bz2"));
+        assertEquals("1.4.9", FilenameUtils.getBasename("1.4.9.png"));
     }
 
     // foo.txt      --> "txt"

File: src/main/java/run/halo/app/controller/content/api/JournalController.java
Patch:
@@ -71,7 +71,7 @@ public Page<JournalWithCmtCountDTO> pageBy(
 
     @GetMapping("{journalId:\\d+}")
     @ApiOperation("Gets a journal detail")
-    public JournalDTO getBy(@PathVariable("journalId") Integer journalId) {
+    public JournalWithCmtCountDTO getBy(@PathVariable("journalId") Integer journalId) {
         Journal journal = journalService.getById(journalId);
         return journalService.convertTo(journal);
     }

File: src/main/java/run/halo/app/service/JournalService.java
Patch:
@@ -68,13 +68,13 @@ public interface JournalService extends CrudService<Journal, Integer> {
     Page<Journal> pageBy(@NonNull JournalType type, @NonNull Pageable pageable);
 
     /**
-     * Converts to journal dto.
+     * Converts to journal with comment count dto.
      *
      * @param journal journal must not be null
-     * @return journal dto
+     * @return journal with comment count dto
      */
     @NonNull
-    JournalDTO convertTo(@NonNull Journal journal);
+    JournalWithCmtCountDTO convertTo(@NonNull Journal journal);
 
     /**
      * Converts to journal with comment count dto list.

File: src/main/java/run/halo/app/service/impl/PostServiceImpl.java
Patch:
@@ -787,7 +787,8 @@ private PostDetailVO convertTo(@NonNull Post post, @Nullable List<Tag> tags,
         postDetailVO.setMetaIds(metaIds);
         postDetailVO.setMetas(postMetaService.convertTo(postMetaList));
 
-        postDetailVO.setCommentCount(postCommentService.countByPostId(post.getId()));
+        postDetailVO.setCommentCount(postCommentService.countByStatusAndPostId(
+            CommentStatus.PUBLISHED, post.getId()));
 
         postDetailVO.setFullPath(buildFullPath(post));
 

File: src/main/java/run/halo/app/service/impl/SheetServiceImpl.java
Patch:
@@ -341,7 +341,8 @@ private SheetDetailVO convertTo(@NonNull Sheet sheet, List<SheetMeta> metas) {
             sheetDetailVO.setSummary(generateSummary(sheet.getFormatContent()));
         }
 
-        sheetDetailVO.setCommentCount(sheetCommentService.countByPostId(sheet.getId()));
+        sheetDetailVO.setCommentCount(sheetCommentService.countByStatusAndPostId(
+            CommentStatus.PUBLISHED, sheet.getId()));
 
         sheetDetailVO.setFullPath(buildFullPath(sheet));
 

File: src/main/java/run/halo/app/service/TagService.java
Patch:
@@ -31,7 +31,7 @@ public interface TagService extends CrudService<Tag, Integer> {
      * @param slug slug
      * @return tag
      */
-    @NonNull
+    @Nullable
     Tag getBySlug(@NonNull String slug);
 
     /**

File: src/main/java/run/halo/app/controller/admin/api/InstallController.java
Patch:
@@ -1,13 +1,13 @@
 package run.halo.app.controller.admin.api;
 
-import cn.hutool.crypto.SecureUtil;
 import io.swagger.annotations.ApiOperation;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.codec.digest.DigestUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.context.ApplicationEventPublisher;
 import org.springframework.lang.Nullable;
@@ -279,7 +279,7 @@ private User createUser(InstallParam installParam) {
             return userService.update(user);
         }).orElseGet(() -> {
             String gravatar =
-                "//cn.gravatar.com/avatar/" + SecureUtil.md5(installParam.getEmail())
+                "//cn.gravatar.com/avatar/" + DigestUtils.md5Hex(installParam.getEmail())
                     + "?s=256&d=mm";
             installParam.setAvatar(gravatar);
             return userService.createBy(installParam);

File: src/main/java/run/halo/app/controller/admin/api/PostController.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.springframework.data.domain.Sort.Direction.DESC;
 
-import cn.hutool.core.util.IdUtil;
 import io.swagger.annotations.ApiOperation;
 import java.io.UnsupportedEncodingException;
 import java.net.URISyntaxException;
@@ -37,6 +36,7 @@
 import run.halo.app.model.vo.PostDetailVO;
 import run.halo.app.service.OptionService;
 import run.halo.app.service.PostService;
+import run.halo.app.utils.HaloUtils;
 
 /**
  * Post controller.
@@ -188,7 +188,7 @@ public String preview(@PathVariable("postId") Integer postId)
 
         BasePostMinimalDTO postMinimalDTO = postService.convertToMinimal(post);
 
-        String token = IdUtil.simpleUUID();
+        String token = HaloUtils.simpleUUID();
 
         // cache preview token
         cacheStore.putAny(token, token, 10, TimeUnit.MINUTES);

File: src/main/java/run/halo/app/controller/admin/api/SheetController.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.springframework.data.domain.Sort.Direction.DESC;
 
-import cn.hutool.core.util.IdUtil;
 import io.swagger.annotations.ApiOperation;
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
@@ -34,6 +33,7 @@
 import run.halo.app.model.vo.SheetListVO;
 import run.halo.app.service.OptionService;
 import run.halo.app.service.SheetService;
+import run.halo.app.utils.HaloUtils;
 
 /**
  * Sheet controller.
@@ -149,7 +149,7 @@ public String preview(@PathVariable("sheetId") Integer sheetId)
 
         BasePostMinimalDTO sheetMinimalDTO = sheetService.convertToMinimal(sheet);
 
-        String token = IdUtil.simpleUUID();
+        String token = HaloUtils.simpleUUID();
 
         // cache preview token
         cacheStore.putAny(token, token, 10, TimeUnit.MINUTES);

File: src/main/java/run/halo/app/controller/content/model/PostModel.java
Patch:
@@ -3,7 +3,6 @@
 import static run.halo.app.model.support.HaloConst.POST_PASSWORD_TEMPLATE;
 import static run.halo.app.model.support.HaloConst.SUFFIX_FTL;
 
-import cn.hutool.core.util.StrUtil;
 import java.util.List;
 import java.util.stream.Collectors;
 import org.apache.commons.lang3.StringUtils;
@@ -91,7 +90,7 @@ public String content(Post post, String token, Model model) {
         if (PostStatus.RECYCLE.equals(post.getStatus())) {
             // Articles in the recycle bin are not allowed to be accessed.
             throw new NotFoundException("查询不到该文章的信息");
-        } else if (StrUtil.isNotEmpty(token)) {
+        } else if (StringUtils.isNotBlank(token)) {
             // If the token is not empty, it means it is an admin request,
             // then verify the token.
 

File: src/main/java/run/halo/app/core/ControllerLogAop.java
Patch:
@@ -1,6 +1,5 @@
 package run.halo.app.core;
 
-import cn.hutool.extra.servlet.ServletUtil;
 import com.fasterxml.jackson.core.JsonProcessingException;
 import java.lang.reflect.Method;
 import java.util.Objects;
@@ -22,6 +21,7 @@
 import org.springframework.web.context.request.ServletRequestAttributes;
 import org.springframework.web.multipart.MultipartFile;
 import run.halo.app.utils.JsonUtils;
+import run.halo.app.utils.ServletUtils;
 
 /**
  * @author johnniang
@@ -82,7 +82,7 @@ private void printRequestLog(HttpServletRequest request, String clazzName, Strin
             request.getRequestURL(),
             request.getRequestURI(),
             request.getMethod(),
-            ServletUtil.getClientIP(request));
+            ServletUtils.getClientIP(request));
 
         if (args == null || !log.isDebugEnabled()) {
             return;

File: src/main/java/run/halo/app/core/freemarker/method/RandomMethod.java
Patch:
@@ -1,12 +1,13 @@
 package run.halo.app.core.freemarker.method;
 
-import cn.hutool.core.util.RandomUtil;
 import freemarker.template.Configuration;
 import freemarker.template.SimpleNumber;
 import freemarker.template.TemplateMethodModelEx;
 import freemarker.template.TemplateModelException;
 import java.util.List;
+import org.apache.commons.lang3.RandomUtils;
 import org.springframework.stereotype.Component;
+import run.halo.app.utils.HaloUtils;
 
 /**
  * Freemarker template random method.
@@ -42,6 +43,6 @@ public Object exec(List arguments) throws TemplateModelException {
         SimpleNumber argTwo = (SimpleNumber) arguments.get(1);
         int start = argOne.getAsNumber().intValue();
         int end = argTwo.getAsNumber().intValue();
-        return RandomUtil.randomInt(start, end);
+        return RandomUtils.nextInt(start, end);
     }
 }

File: src/main/java/run/halo/app/core/freemarker/tag/PaginationTagDirective.java
Patch:
@@ -2,7 +2,6 @@
 
 import static run.halo.app.model.support.HaloConst.URL_SEPARATOR;
 
-import cn.hutool.core.util.PageUtil;
 import freemarker.core.Environment;
 import freemarker.template.Configuration;
 import freemarker.template.DefaultObjectWrapperBuilder;
@@ -19,6 +18,7 @@
 import run.halo.app.model.support.Pagination;
 import run.halo.app.model.support.RainbowPage;
 import run.halo.app.service.OptionService;
+import run.halo.app.utils.HaloUtils;
 
 /**
  * @author ryanwang
@@ -60,7 +60,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars,
                 prevPageFullPath.append(optionService.getBlogBaseUrl());
             }
 
-            int[] rainbow = PageUtil.rainbow(page + 1, total, display);
+            int[] rainbow = HaloUtils.rainbow(page + 1, total, display);
 
             List<RainbowPage> rainbowPages = new ArrayList<>();
             StringBuilder fullPath = new StringBuilder();

File: src/main/java/run/halo/app/filter/LogFilter.java
Patch:
@@ -1,6 +1,5 @@
 package run.halo.app.filter;
 
-import cn.hutool.extra.servlet.ServletUtil;
 import java.io.IOException;
 import javax.servlet.FilterChain;
 import javax.servlet.ServletException;
@@ -11,6 +10,7 @@
 import org.springframework.core.annotation.Order;
 import org.springframework.stereotype.Component;
 import org.springframework.web.filter.OncePerRequestFilter;
+import run.halo.app.utils.ServletUtils;
 
 /**
  * Filter for logging.
@@ -26,7 +26,7 @@ public class LogFilter extends OncePerRequestFilter {
     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
         FilterChain filterChain) throws ServletException, IOException {
 
-        final String remoteAddr = ServletUtil.getClientIP(request);
+        final String remoteAddr = ServletUtils.getClientIP(request);
 
         log.debug("Starting url: [{}], method: [{}], ip: [{}]",
             request.getRequestURL(),

File: src/main/java/run/halo/app/model/enums/EncryptTypeEnum.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * @author zhixiang.yuan
- * @since 2021/01/24 10:45:33
+ * @date 2021/01/24 10:45:33
  */
 public enum EncryptTypeEnum {
 

File: src/main/java/run/halo/app/security/handler/DefaultAuthenticationFailureHandler.java
Patch:
@@ -1,6 +1,5 @@
 package run.halo.app.security.handler;
 
-import cn.hutool.extra.servlet.ServletUtil;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import java.io.IOException;
 import javax.servlet.http.HttpServletRequest;
@@ -12,6 +11,7 @@
 import run.halo.app.model.support.BaseResponse;
 import run.halo.app.utils.ExceptionUtils;
 import run.halo.app.utils.JsonUtils;
+import run.halo.app.utils.ServletUtils;
 
 /**
  * Default AuthenticationFailureHandler.
@@ -32,7 +32,7 @@ public DefaultAuthenticationFailureHandler() {
     @Override
     public void onFailure(HttpServletRequest request, HttpServletResponse response,
         AbstractHaloException exception) throws IOException {
-        log.warn("Handle unsuccessful authentication, ip: [{}]", ServletUtil.getClientIP(request));
+        log.warn("Handle unsuccessful authentication, ip: [{}]", ServletUtils.getClientIP(request));
         log.error("Authentication failure: [{}], status: [{}], data: [{}]", exception.getMessage(),
             exception.getStatus(), exception.getErrorData());
 

File: src/main/java/run/halo/app/service/impl/AuthenticationServiceImpl.java
Patch:
@@ -1,10 +1,10 @@
 package run.halo.app.service.impl;
 
-import cn.hutool.core.util.StrUtil;
 import java.util.Map;
 import java.util.Set;
 import java.util.function.Function;
 import java.util.stream.Collectors;
+import org.apache.commons.lang3.StringUtils;
 import org.springframework.stereotype.Service;
 import run.halo.app.model.entity.Category;
 import run.halo.app.model.entity.Post;
@@ -40,7 +40,7 @@ public AuthenticationServiceImpl(PostCategoryRepository postCategoryRepository,
     public boolean postAuthentication(Post post, String password) {
         Set<String> accessPermissionStore = authorizationService.getAccessPermissionStore();
 
-        if (StrUtil.isNotBlank(post.getPassword())) {
+        if (StringUtils.isNotBlank(post.getPassword())) {
             if (accessPermissionStore.contains(AuthorizationService.buildPostToken(post.getId()))) {
                 return true;
             }
@@ -86,7 +86,7 @@ private boolean doCategoryAuthentication(Map<Integer, Category> idToCategoryMap,
 
         Category category = idToCategoryMap.get(categoryId);
 
-        if (StrUtil.isNotBlank(category.getPassword())) {
+        if (StringUtils.isNotBlank(category.getPassword())) {
             if (accessPermissionStore.contains(
                 AuthorizationService.buildCategoryToken(category.getId()))) {
                 return true;

File: src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java
Patch:
@@ -2,7 +2,6 @@
 
 import static org.springframework.data.domain.Sort.Direction.DESC;
 
-import cn.hutool.core.util.URLUtil;
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
@@ -54,6 +53,7 @@
 import run.halo.app.service.UserService;
 import run.halo.app.service.base.AbstractCrudService;
 import run.halo.app.service.base.BaseCommentService;
+import run.halo.app.utils.HaloUtils;
 import run.halo.app.utils.ServiceUtils;
 import run.halo.app.utils.ServletUtils;
 import run.halo.app.utils.ValidationUtils;
@@ -328,7 +328,7 @@ public COMMENT create(@NonNull COMMENT comment) {
         }
 
         if (StringUtils.isNotEmpty(comment.getAuthorUrl())) {
-            comment.setAuthorUrl(URLUtil.normalize(comment.getAuthorUrl()));
+            comment.setAuthorUrl(HaloUtils.normalizeUrl(comment.getAuthorUrl()));
         }
 
         if (authentication != null) {

File: src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java
Patch:
@@ -1,6 +1,5 @@
 package run.halo.app.service.impl;
 
-import cn.hutool.core.collection.CollectionUtil;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -12,6 +11,7 @@
 import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Service;
 import org.springframework.util.Assert;
+import org.springframework.util.CollectionUtils;
 import run.halo.app.exception.NotFoundException;
 import run.halo.app.model.dto.JournalDTO;
 import run.halo.app.model.entity.Journal;
@@ -56,7 +56,7 @@ public void validateTarget(@NonNull Integer journalId) {
     public List<JournalCommentWithJournalVO> convertToWithJournalVo(
         List<JournalComment> journalComments) {
 
-        if (CollectionUtil.isEmpty(journalComments)) {
+        if (CollectionUtils.isEmpty(journalComments)) {
             return Collections.emptyList();
         }
 

File: src/main/java/run/halo/app/service/impl/StaticStorageServiceImpl.java
Patch:
@@ -1,6 +1,5 @@
 package run.halo.app.service.impl;
 
-import cn.hutool.core.util.IdUtil;
 import java.io.IOException;
 import java.nio.charset.StandardCharsets;
 import java.nio.file.FileAlreadyExistsException;
@@ -28,6 +27,7 @@
 import run.halo.app.model.support.StaticFile;
 import run.halo.app.service.StaticStorageService;
 import run.halo.app.utils.FileUtils;
+import run.halo.app.utils.HaloUtils;
 
 /**
  * StaticStorageService implementation class.
@@ -69,7 +69,7 @@ private List<StaticFile> listStaticFileTree(@NonNull Path topPath) {
 
             pathStream.forEach(path -> {
                 StaticFile staticFile = new StaticFile();
-                staticFile.setId(IdUtil.fastSimpleUUID());
+                staticFile.setId(HaloUtils.simpleUUID());
                 staticFile.setName(path.getFileName().toString());
                 staticFile.setPath(path.toString());
                 staticFile.setRelativePath(

File: src/main/java/run/halo/app/service/impl/UserServiceImpl.java
Patch:
@@ -1,6 +1,5 @@
 package run.halo.app.service.impl;
 
-import cn.hutool.crypto.digest.BCrypt;
 import java.util.Date;
 import java.util.List;
 import java.util.Optional;
@@ -25,6 +24,7 @@
 import run.halo.app.repository.UserRepository;
 import run.halo.app.service.UserService;
 import run.halo.app.service.base.AbstractCrudService;
+import run.halo.app.utils.BCrypt;
 import run.halo.app.utils.DateUtils;
 import run.halo.app.utils.HaloUtils;
 

File: src/main/java/run/halo/app/task/RecycledPostCleaningTask.java
Patch:
@@ -1,6 +1,5 @@
 package run.halo.app.task;
 
-import cn.hutool.core.date.DateUtil;
 import java.time.LocalDateTime;
 import java.time.temporal.ChronoUnit;
 import java.util.List;
@@ -17,9 +16,11 @@
 import run.halo.app.model.properties.PostProperties;
 import run.halo.app.service.OptionService;
 import run.halo.app.service.PostService;
+import run.halo.app.utils.DateTimeUtils;
 
 /**
  * @author Wh1te
+ * @author guqing
  * @date 2020-10-19
  */
 @Slf4j
@@ -73,7 +74,7 @@ public synchronized void run() {
         List<Post> recyclePost = postService.listAllBy(PostStatus.RECYCLE);
         LocalDateTime now = LocalDateTime.now();
         List<Integer> ids = recyclePost.stream().filter(post -> {
-            LocalDateTime updateTime = DateUtil.toLocalDateTime(post.getUpdateTime());
+            LocalDateTime updateTime = DateTimeUtils.toLocalDateTime(post.getUpdateTime());
             long until = updateTime.until(now, ChronoUnit.HOURS);
             return until >= expiredIn;
         }).map(BasePost::getId).collect(Collectors.toList());

File: src/test/java/run/halo/app/utils/TimeUnitTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.jupiter.api.Test;
 
 /**
- * Time unit test
+ * Time unit test.
  *
  * @author johnniang
  * @date 19-4-29

File: src/main/java/run/halo/app/model/properties/CommentProperties.java
Patch:
@@ -12,7 +12,7 @@ public enum CommentProperties implements PropertyEnum {
     /**
      * The default gravatar type.
      */
-    GRAVATAR_DEFAULT("comment_gravatar_default", String.class, "mm"),
+    GRAVATAR_DEFAULT("comment_gravatar_default", String.class, ""),
 
     /**
      * Does it need to be checked.

File: src/main/java/run/halo/app/theme/GitThemeUpdater.java
Patch:
@@ -76,7 +76,7 @@ public ThemeProperty merge(ThemeProperty oldThemeProperty, ThemeProperty newThem
 
         final var oldThemePath = Paths.get(oldThemeProperty.getThemePath());
         // open old git repo
-        try (final var oldGit = Git.open(oldThemePath.toFile())) {
+        try (final var oldGit = Git.init().setDirectory(oldThemePath.toFile()).call()) {
             // 0. commit old repo
             commitAutomatically(oldGit);
 

File: src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java
Patch:
@@ -770,6 +770,6 @@ public String buildAvatarUrl(String gravatarMd5) {
         final String gravatarDefault =
             optionService.getByPropertyOrDefault(CommentProperties.GRAVATAR_DEFAULT, String.class);
 
-        return gravatarSource + gravatarMd5 + "?d=" + gravatarDefault;
+        return gravatarSource + gravatarMd5 + "?s=256&d=" + gravatarDefault;
     }
 }

File: src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java
Patch:
@@ -25,6 +25,7 @@
 import run.halo.app.model.properties.BlogProperties;
 import run.halo.app.model.properties.SeoProperties;
 import run.halo.app.model.support.HaloConst;
+import run.halo.app.service.ClientOptionService;
 import run.halo.app.service.OptionService;
 import run.halo.app.service.ThemeService;
 import run.halo.app.service.ThemeSettingService;
@@ -41,7 +42,7 @@
 @Component
 public class FreemarkerConfigAwareListener {
 
-    private final OptionService optionService;
+    private final ClientOptionService optionService;
 
     private final Configuration configuration;
 
@@ -53,7 +54,7 @@ public class FreemarkerConfigAwareListener {
 
     private final AbstractStringCacheStore cacheStore;
 
-    public FreemarkerConfigAwareListener(OptionService optionService,
+    public FreemarkerConfigAwareListener(ClientOptionService optionService,
         Configuration configuration,
         ThemeService themeService,
         ThemeSettingService themeSettingService,

File: src/main/java/run/halo/app/model/properties/MinioProperties.java
Patch:
@@ -36,7 +36,7 @@ public enum MinioProperties implements PropertyEnum {
     /**
      * Minio regoin
      */
-    REGION("minio_region", String.class, "");
+    REGION("minio_region", String.class, "us-east-1");
 
     private final String value;
 

File: src/main/java/run/halo/app/handler/file/LocalFileHandler.java
Patch:
@@ -194,7 +194,6 @@ public void delete(String key) {
             boolean deleteResult = Files.deleteIfExists(thumbnailPath);
             if (!deleteResult) {
                 log.warn("Thumbnail: [{}] may not exist", thumbnailPath.toString());
-                throw new FileOperationException("附件缩略图 " + thumbnailName + " 删除失败");
             }
         } catch (IOException e) {
             throw new FileOperationException("附件缩略图 " + thumbnailName + " 删除失败", e);

File: src/main/java/run/halo/app/utils/MarkdownUtils.java
Patch:
@@ -6,7 +6,6 @@
 import com.vladsch.flexmark.ext.emoji.EmojiImageType;
 import com.vladsch.flexmark.ext.emoji.EmojiShortcutType;
 import com.vladsch.flexmark.ext.escaped.character.EscapedCharacterExtension;
-import com.vladsch.flexmark.ext.footnotes.FootnoteExtension;
 import com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughExtension;
 import com.vladsch.flexmark.ext.gfm.tasklist.TaskListExtension;
 import com.vladsch.flexmark.ext.gitlab.GitLabExtension;
@@ -30,6 +29,7 @@
 import java.util.stream.Collectors;
 import org.apache.commons.lang3.StringUtils;
 import run.halo.app.model.support.HaloConst;
+import run.halo.app.utils.footnotes.FootnoteExtension;
 
 /**
  * Markdown utils.
@@ -111,8 +111,6 @@ public static String renderHtml(String markdown) {
             markdown = markdown
                 .replaceAll(HaloConst.YOUTUBE_VIDEO_REG_PATTERN, HaloConst.YOUTUBE_VIDEO_IFRAME);
         }
-        // footnote render method delegation.
-        FootnoteNodeRendererInterceptor.doDelegationMethod();
 
         Node document = PARSER.parse(markdown);
 

File: src/main/java/run/halo/app/repository/base/BaseCommentRepository.java
Patch:
@@ -221,6 +221,7 @@ List<COMMENT> findAllByStatusAndParentIdIn(@NonNull CommentStatus status,
             + "where comment.parentId in ?1 "
             + "group by comment.parentId")
     @NonNull
+    @Deprecated
     List<CommentChildrenCountProjection> findDirectChildrenCount(
         @NonNull Collection<Long> commentIds);
 

File: src/main/java/run/halo/app/controller/content/api/PostController.java
Patch:
@@ -20,6 +20,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.util.HtmlUtils;
 import run.halo.app.cache.lock.CacheLock;
+import run.halo.app.cache.lock.CacheParam;
 import run.halo.app.exception.NotFoundException;
 import run.halo.app.model.dto.BaseCommentDTO;
 import run.halo.app.model.dto.post.BasePostSimpleDTO;
@@ -214,7 +215,7 @@ public BaseCommentDTO comment(@RequestBody PostCommentParam postCommentParam) {
     @PostMapping("{postId:\\d+}/likes")
     @ApiOperation("Likes a post")
     @CacheLock(autoDelete = false, traceRequest = true)
-    public void like(@PathVariable("postId") Integer postId) {
+    public void like(@PathVariable("postId") @CacheParam Integer postId) {
         postService.increaseLike(postId);
     }
 }

File: src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java
Patch:
@@ -2,6 +2,7 @@
 
 import static run.halo.app.model.support.HaloConst.OPTIONS_CACHE_KEY;
 
+import freemarker.core.TemplateClassResolver;
 import freemarker.template.Configuration;
 import freemarker.template.TemplateModel;
 import freemarker.template.TemplateModelException;
@@ -78,6 +79,7 @@ private Map<String, TemplateModel> freemarkerLayoutDirectives() {
 
     private void initFreemarkerConfig() throws TemplateModelException {
         configuration.setSharedVariable("layout", freemarkerLayoutDirectives());
+        configuration.setNewBuiltinClassResolver(TemplateClassResolver.SAFER_RESOLVER);
     }
 
     @EventListener

File: src/test/java/run/halo/app/it/IndexPageRequestTest.java
Patch:
@@ -33,7 +33,7 @@ void indexPage() throws IOException {
         // validate post link
         Element postTitleLink =
             document.body().selectFirst(".content > .post > .post-title > h3 > a");
-        assertEquals(blogUrl + "/archives/hello-halo", postTitleLink.attr("href"));
+        assertEquals("/archives/hello-halo", postTitleLink.attr("href"));
         assertEquals("Hello Halo", postTitleLink.text());
     }
 }

File: src/main/java/run/halo/app/service/impl/BackupServiceImpl.java
Patch:
@@ -336,7 +336,7 @@ public BackupDTO exportData() {
         data.put("version", HaloConst.HALO_VERSION);
         data.put("export_date", DateUtil.now());
         data.put("attachments", attachmentService.listAll());
-        data.put("categories", categoryService.listAll());
+        data.put("categories", categoryService.listAll(true));
         data.put("comment_black_list", commentBlackListService.listAll());
         data.put("journals", journalService.listAll());
         data.put("journal_comments", journalCommentService.listAll());

File: src/main/java/run/halo/app/controller/content/api/CategoryController.java
Patch:
@@ -80,7 +80,7 @@ public Page<PostListVO> listPostsBy(@PathVariable("slug") String slug,
 
         Page<Post> postPage =
             postCategoryService.pagePostBy(category.getId(),
-                Sets.immutableEnumSet(PostStatus.PUBLISHED, PostStatus.INTIMATE), pageable);
+                Sets.immutableEnumSet(PostStatus.PUBLISHED), pageable);
         return postService.convertToListVo(postPage);
     }
 }

File: src/main/java/run/halo/app/controller/content/model/CategoryModel.java
Patch:
@@ -102,7 +102,7 @@ public String listPost(Model model, String slug, Integer page) {
             Sort.by(DESC, "topPriority", "createTime"));
         Page<Post> postPage =
             postCategoryService.pagePostBy(category.getId(), Sets
-                .immutableEnumSet(PostStatus.PUBLISHED, PostStatus.INTIMATE), pageable);
+                .immutableEnumSet(PostStatus.PUBLISHED), pageable);
         Page<PostListVO> posts = postService.convertToListVo(postPage);
 
         // Generate meta description.

File: src/main/java/run/halo/app/controller/content/api/OptionController.java
Patch:
@@ -82,7 +82,7 @@ public Map<String, Object> listAllWithMapView(
     @ApiOperation("Gets option value by option key")
     public BaseResponse<Object> getBy(@PathVariable("key") String key) {
         Object optionValue = optionFilter.filter(key)
-            .map(k -> optionService.getByKey(key))
+            .flatMap(k -> optionService.getByKey(key))
             .orElse(null);
         return BaseResponse.ok(optionValue);
     }

File: src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java
Patch:
@@ -580,7 +580,7 @@ public Page<CommentWithHasChildrenVO> pageTopCommentsBy(@NonNull Integer targetI
 
         // Get direct children count
         List<CommentChildrenCountProjection> directChildrenCount =
-            baseCommentRepository.findDirectChildrenCount(topCommentIds);
+            baseCommentRepository.findDirectChildrenCount(topCommentIds, CommentStatus.PUBLISHED);
 
         // Convert to comment - children count map
         Map<Long, Long> commentChildrenCountMap = ServiceUtils

File: src/main/java/run/halo/app/service/impl/JournalServiceImpl.java
Patch:
@@ -23,6 +23,7 @@
 import run.halo.app.model.dto.JournalWithCmtCountDTO;
 import run.halo.app.model.entity.Journal;
 import run.halo.app.model.entity.JournalComment;
+import run.halo.app.model.enums.CommentStatus;
 import run.halo.app.model.enums.JournalType;
 import run.halo.app.model.params.JournalParam;
 import run.halo.app.model.params.JournalQuery;
@@ -123,7 +124,7 @@ public List<JournalWithCmtCountDTO> convertToCmtCountDto(List<Journal> journals)
 
         // Get comment count map
         Map<Integer, Long> journalCommentCountMap =
-            journalCommentService.countByPostIds(journalIds);
+            journalCommentService.countByStatusAndPostIds(CommentStatus.PUBLISHED, journalIds);
 
         return journals.stream()
             .map(journal -> {
@@ -182,7 +183,7 @@ public void increaseLike(long likes, Integer id) {
     private Specification<Journal> buildSpecByQuery(@NonNull JournalQuery journalQuery) {
         Assert.notNull(journalQuery, "Journal query must not be null");
 
-        return (Specification<Journal>) (root, query, criteriaBuilder) -> {
+        return (root, query, criteriaBuilder) -> {
             List<Predicate> predicates = new LinkedList<>();
 
             if (journalQuery.getType() != null) {

File: src/main/java/run/halo/app/service/impl/SheetServiceImpl.java
Patch:
@@ -27,6 +27,7 @@
 import run.halo.app.model.entity.Sheet;
 import run.halo.app.model.entity.SheetComment;
 import run.halo.app.model.entity.SheetMeta;
+import run.halo.app.model.enums.CommentStatus;
 import run.halo.app.model.enums.LogType;
 import run.halo.app.model.enums.PostStatus;
 import run.halo.app.model.enums.SheetPermalinkType;
@@ -276,7 +277,8 @@ public Page<SheetListVO> convertToListVo(Page<Sheet> sheetPage) {
         Set<Integer> sheetIds = ServiceUtils.fetchProperty(sheets, Sheet::getId);
 
         // key: sheet id, value: comment count
-        Map<Integer, Long> sheetCommentCountMap = sheetCommentService.countByPostIds(sheetIds);
+        Map<Integer, Long> sheetCommentCountMap = sheetCommentService.countByStatusAndPostIds(
+            CommentStatus.PUBLISHED, sheetIds);
 
         return sheetPage.map(sheet -> {
             SheetListVO sheetListVO = new SheetListVO().convertFrom(sheet);

File: src/main/java/run/halo/app/config/HaloConfiguration.java
Patch:
@@ -10,6 +10,7 @@
 import org.springframework.boot.web.client.RestTemplateBuilder;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Import;
 import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
 import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
 import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;
@@ -19,6 +20,7 @@
 import run.halo.app.cache.AbstractStringCacheStore;
 import run.halo.app.cache.InMemoryCacheStore;
 import run.halo.app.cache.LevelCacheStore;
+import run.halo.app.config.attributeconverter.AttributeConverterAutoGenerateConfiguration;
 import run.halo.app.config.properties.HaloProperties;
 import run.halo.app.repository.base.BaseRepositoryImpl;
 import run.halo.app.utils.HttpClientUtils;
@@ -35,6 +37,7 @@
 @EnableConfigurationProperties(HaloProperties.class)
 @EnableJpaRepositories(basePackages = "run.halo.app.repository", repositoryBaseClass =
     BaseRepositoryImpl.class)
+@Import(AttributeConverterAutoGenerateConfiguration.class)
 public class HaloConfiguration {
 
     private final HaloProperties haloProperties;

File: src/main/java/run/halo/app/model/entity/Journal.java
Patch:
@@ -47,7 +47,7 @@ public class Journal extends BaseEntity {
     private Long likes;
 
     @Column(name = "type")
-    @ColumnDefault("1")
+    @ColumnDefault("0")
     private JournalType type;
 
     @Override

File: src/main/java/run/halo/app/model/enums/JournalType.java
Patch:
@@ -10,12 +10,12 @@ public enum JournalType implements ValueEnum<Integer> {
     /**
      * Public type.
      */
-    PUBLIC(1),
+    PUBLIC(0),
 
     /**
      * Intimate type.
      */
-    INTIMATE(0);
+    INTIMATE(1);
 
     private final int value;
 

File: src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java
Patch:
@@ -28,8 +28,7 @@ public DisableOnConditionAspect(HaloProperties haloProperties) {
         this.haloProperties = haloProperties;
     }
 
-    @Pointcut("execution(* run.halo.app.controller.*.*(..)) "
-        + "&& @annotation(run.halo.app.annotation.DisableOnCondition)")
+    @Pointcut("within(run.halo.app.controller..*)")
     public void pointcut() {
     }
 

File: src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java
Patch:
@@ -19,7 +19,7 @@
 public class SensitiveConcealAspect {
 
 
-    @Pointcut("execution(* run.halo.app.repository.*.*(..)) "
+    @Pointcut("within(run.halo.app.repository..*) "
         + "&& @annotation(run.halo.app.annotation.SensitiveConceal)")
     public void pointCut() {
     }

File: src/main/java/run/halo/app/config/properties/HaloProperties.java
Patch:
@@ -25,15 +25,17 @@ public class HaloProperties {
     /**
      * Doc api disabled. (Default is true)
      */
+    @Deprecated
     private boolean docDisabled = true;
 
     /**
      * Production env. (Default is true)
      */
+    @Deprecated
     private boolean productionEnv = true;
 
     /**
-     * Authentication enabled
+     * Authentication enabled.
      */
     private boolean authEnabled = true;
 

File: src/main/java/run/halo/app/listener/StartedListener.java
Patch:
@@ -169,7 +169,7 @@ private void initThemes() {
             Path themePath = themeService.getBasePath();
 
             // Fix the problem that the project cannot start after moving to a new server
-            if (!haloProperties.isProductionEnv() || Files.notExists(themePath)) {
+            if (!haloProperties.getMode().isProductionEnv() || Files.notExists(themePath)) {
                 FileUtils.copyFolder(source, themePath);
                 log.debug("Copied theme folder from [{}] to [{}]", source, themePath);
             } else {

File: src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java
Patch:
@@ -183,7 +183,7 @@ private AuthenticationFailureHandler getFailureHandler() {
                     // Create default authentication failure handler
                     DefaultAuthenticationFailureHandler failureHandler =
                         new DefaultAuthenticationFailureHandler();
-                    failureHandler.setProductionEnv(haloProperties.isProductionEnv());
+                    failureHandler.setProductionEnv(haloProperties.getMode().isProductionEnv());
 
                     this.failureHandler = failureHandler;
                 }

File: src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java
Patch:
@@ -69,7 +69,7 @@ public AdminAuthenticationFilter(AbstractStringCacheStore cacheStore,
         // set failure handler
         DefaultAuthenticationFailureHandler failureHandler =
             new DefaultAuthenticationFailureHandler();
-        failureHandler.setProductionEnv(haloProperties.isProductionEnv());
+        failureHandler.setProductionEnv(haloProperties.getMode().isProductionEnv());
         failureHandler.setObjectMapper(objectMapper);
 
         setFailureHandler(failureHandler);

File: src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java
Patch:
@@ -58,7 +58,7 @@ public ApiAuthenticationFilter(HaloProperties haloProperties,
         // set failure handler
         DefaultAuthenticationFailureHandler failureHandler =
             new DefaultAuthenticationFailureHandler();
-        failureHandler.setProductionEnv(haloProperties.isProductionEnv());
+        failureHandler.setProductionEnv(haloProperties.getMode().isProductionEnv());
         failureHandler.setObjectMapper(objectMapper);
         setFailureHandler(failureHandler);
     }
@@ -91,7 +91,7 @@ protected void doAuthenticate(HttpServletRequest request, HttpServletResponse re
         Optional<String> optionalAccessKey =
             optionService.getByProperty(ApiProperties.API_ACCESS_KEY, String.class);
 
-        if (!optionalAccessKey.isPresent()) {
+        if (optionalAccessKey.isEmpty()) {
             // If the access key is not set
             throw new AuthenticationException("API access key hasn't been set by blogger");
         }

File: src/main/java/run/halo/app/security/filter/ContentFilter.java
Patch:
@@ -54,6 +54,8 @@ protected String getTokenFromRequest(HttpServletRequest request) {
     protected void doAuthenticate(HttpServletRequest request, HttpServletResponse response,
         FilterChain filterChain) throws ServletException, IOException {
         // Do nothing
+        // create session
+        request.getSession(true);
         filterChain.doFilter(request, response);
     }
 }

File: src/main/java/run/halo/app/service/impl/AuthorizationServiceImpl.java
Patch:
@@ -35,7 +35,7 @@ public void categoryAuthorization(Integer categoryId) {
 
     @Override
     public Set<String> getAccessPermissionStore() {
-        return cacheStore.getAny(buildAccessPermissionKey(), Set.class).orElse(new HashSet());
+        return cacheStore.getAny(buildAccessPermissionKey(), Set.class).orElseGet(HashSet::new);
     }
 
     @Override

File: src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java
Patch:
@@ -132,7 +132,7 @@ public void setActivatedTheme(@NonNull String themeId) {
     @Override
     public ThemeProperty attemptToAdd(ThemeProperty newProperty) {
         // 1. check existence
-        final var alreadyExist = fetchThemePropertyByThemeId(newProperty.getId()).isPresent();
+        final var alreadyExist = fetchThemeByThemeId(newProperty.getId()).isPresent();
         if (alreadyExist) {
             throw new AlreadyExistsException("当前安装的主题已存在");
         }

File: src/main/java/run/halo/app/config/properties/HaloProperties.java
Patch:
@@ -6,8 +6,6 @@
 import static run.halo.app.utils.HaloUtils.ensureSuffix;
 
 import java.time.Duration;
-import java.util.ArrayList;
-import java.util.List;
 import lombok.Data;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 import run.halo.app.model.enums.Mode;

File: src/test/java/run/halo/app/utils/GitTest.java
Patch:
@@ -133,6 +133,7 @@ void getAllBranchesTest() throws GitAPIException {
     }
 
     @Test
+    @Disabled("Due to time-consumption fetching")
     void getBranchesFromRemote() throws GitAPIException {
         Map<String, Ref> refMap = Git.lsRemoteRepository()
             .setRemote("https://github.com/halo-dev/halo.git")

File: src/main/java/run/halo/app/controller/admin/api/BackupController.java
Patch:
@@ -56,7 +56,8 @@ public BackupController(BackupService backupService, HaloProperties haloProperti
 
     @GetMapping("work-dir/fetch")
     public BackupDTO getWorkDirBackup(@RequestParam("filename") String filename) {
-        return backupService.getBackup(Paths.get(haloProperties.getWorkDir(), filename), WHOLE_SITE)
+        return backupService
+            .getBackup(Paths.get(haloProperties.getBackupDir(), filename), WHOLE_SITE)
             .orElseThrow(() ->
                 new NotFoundException("备份文件 " + filename + " 不存在或已删除！").setErrorData(filename));
     }

File: src/main/java/run/halo/app/controller/content/api/JournalController.java
Patch:
@@ -20,6 +20,7 @@
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.util.HtmlUtils;
 import run.halo.app.cache.lock.CacheLock;
+import run.halo.app.cache.lock.CacheParam;
 import run.halo.app.model.dto.BaseCommentDTO;
 import run.halo.app.model.dto.JournalDTO;
 import run.halo.app.model.dto.JournalWithCmtCountDTO;
@@ -127,7 +128,7 @@ public BaseCommentDTO comment(@RequestBody JournalCommentParam journalCommentPar
     @PostMapping("{id:\\d+}/likes")
     @ApiOperation("Likes a journal")
     @CacheLock(autoDelete = false, traceRequest = true)
-    public void like(@PathVariable("id") Integer id) {
+    public void like(@PathVariable("id") @CacheParam Integer id) {
         journalService.increaseLike(id);
     }
 }

File: src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java
Patch:
@@ -252,7 +252,8 @@ private boolean isSufficientOneTimeToken(HttpServletRequest request) {
 
         // Get allowed uri
         String allowedUri = oneTimeTokenService.get(oneTimeToken)
-            .orElseThrow(() -> new BadRequestException("The one-time token does not exist")
+            .orElseThrow(() -> new BadRequestException(
+                "The one-time token does not exist or has been expired")
                 .setErrorData(oneTimeToken));
 
         // Get request uri

File: src/main/java/run/halo/app/controller/admin/api/AdminController.java
Patch:
@@ -51,8 +51,8 @@ public AdminController(AdminService adminService, OptionService optionService) {
     @GetMapping(value = "/is_installed")
     @ApiOperation("Checks Installation status")
     public boolean isInstall() {
-        return optionService
-            .getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);
+        return optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class,
+            false);
     }
 
     @PostMapping("login/precheck")

File: src/main/java/run/halo/app/controller/admin/api/MigrateController.java
Patch:
@@ -35,8 +35,8 @@ public MigrateController(MigrateService migrateService,
     @PostMapping("halo")
     @ApiOperation("Migrate from Halo")
     public void migrateHalo(@RequestPart("file") MultipartFile file) {
-        if (optionService
-            .getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false)) {
+        if (optionService.getByPropertyOrDefault(
+            PrimaryProperties.IS_INSTALLED, Boolean.class, false)) {
             throw new BadRequestException("无法在博客初始化完成之后迁移数据");
         }
         migrateService.migrate(file, MigrateType.HALO);

File: src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java
Patch:
@@ -51,7 +51,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars,
             switch (method) {
                 case "list":
                     env.setVariable("categories", builder.build().wrap(postCategoryService
-                        .listCategoryWithPostCountDto(Sort.by(DESC, "createTime"))));
+                        .listCategoryWithPostCountDto(Sort.by(DESC, "createTime"), false)));
                     break;
                 case "tree":
                     env.setVariable("categories", builder.build()

File: src/main/java/run/halo/app/model/dto/CategoryDTO.java
Patch:
@@ -31,6 +31,8 @@ public class CategoryDTO implements OutputConverter<CategoryDTO, Category> {
 
     private Integer parentId;
 
+    private String password;
+
     private Date createTime;
 
     private String fullPath;

File: src/main/java/run/halo/app/model/params/CategoryParam.java
Patch:
@@ -31,6 +31,9 @@ public class CategoryParam implements InputConverter<Category> {
     @Size(max = 1023, message = "封面图链接的字符长度不能超过 {max}")
     private String thumbnail;
 
+    @Size(max = 255, message = "分类密码的字符长度不能超过 {max}")
+    private String password;
+
     private Integer parentId = 0;
 
     @Override

File: src/main/java/run/halo/app/utils/FileUtils.java
Patch:
@@ -56,15 +56,15 @@ public static void copyFolder(@NonNull Path source, @NonNull Path target) throws
             @Override
             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
                 throws IOException {
-                Path current = target.resolve(source.relativize(dir));
+                Path current = target.resolve(source.relativize(dir).toString());
                 Files.createDirectories(current);
                 return FileVisitResult.CONTINUE;
             }
 
             @Override
             public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)
                 throws IOException {
-                Files.copy(file, target.resolve(source.relativize(file)),
+                Files.copy(file, target.resolve(source.relativize(file).toString()),
                     StandardCopyOption.REPLACE_EXISTING);
                 return FileVisitResult.CONTINUE;
             }

File: src/main/java/run/halo/app/Application.java
Patch:
@@ -15,7 +15,7 @@ public class Application {
     public static void main(String[] args) {
         // Customize the spring config location
         System.setProperty("spring.config.additional-location",
-                "optional:file:${user.home}/.halo/,optional:file:${user.home}/halo-dev/");
+            "optional:file:${user.home}/.halo/,optional:file:${user.home}/halo-dev/");
 
         // Run application
         SpringApplication.run(Application.class, args);

File: src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java
Patch:
@@ -28,13 +28,14 @@ public DisableOnConditionAspect(HaloProperties haloProperties) {
         this.haloProperties = haloProperties;
     }
 
-    @Pointcut("execution(* run.halo.app.controller.*.*(..)) && @annotation(run.halo.app.annotation.DisableOnCondition)")
+    @Pointcut("execution(* run.halo.app.controller.*.*(..)) "
+        + "&& @annotation(run.halo.app.annotation.DisableOnCondition)")
     public void pointcut() {
     }
 
     @Around("pointcut() && @annotation(disableApi)")
     public Object around(ProceedingJoinPoint joinPoint,
-            DisableOnCondition disableApi) throws Throwable {
+        DisableOnCondition disableApi) throws Throwable {
         Mode mode = disableApi.mode();
         if (haloProperties.getMode().equals(mode)) {
             throw new ForbiddenException("禁止访问");

File: src/main/java/run/halo/app/controller/admin/api/MailController.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.controller.admin.api;
 
 import io.swagger.annotations.ApiOperation;
+import javax.validation.Valid;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -10,8 +11,6 @@
 import run.halo.app.model.params.MailParam;
 import run.halo.app.model.support.BaseResponse;
 
-import javax.validation.Valid;
-
 /**
  * Mail controller.
  *

File: src/main/java/run/halo/app/controller/admin/api/MigrateController.java
Patch:
@@ -27,15 +27,16 @@ public class MigrateController {
     private final OptionService optionService;
 
     public MigrateController(MigrateService migrateService,
-            OptionService optionService) {
+        OptionService optionService) {
         this.migrateService = migrateService;
         this.optionService = optionService;
     }
 
     @PostMapping("halo")
     @ApiOperation("Migrate from Halo")
     public void migrateHalo(@RequestPart("file") MultipartFile file) {
-        if (optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false)) {
+        if (optionService
+            .getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false)) {
             throw new BadRequestException("无法在博客初始化完成之后迁移数据");
         }
         migrateService.migrate(file, MigrateType.HALO);

File: src/main/java/run/halo/app/controller/content/api/ArchiveController.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.controller.content.api;
 
+import java.util.List;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 import run.halo.app.model.vo.ArchiveMonthVO;
 import run.halo.app.model.vo.ArchiveYearVO;
 import run.halo.app.service.PostService;
 
-import java.util.List;
-
 /**
  * Content archive controller.
  *

File: src/main/java/run/halo/app/controller/content/api/ThemeController.java
Patch:
@@ -1,15 +1,14 @@
 package run.halo.app.controller.content.api;
 
 import io.swagger.annotations.ApiOperation;
+import java.util.Map;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 import run.halo.app.handler.theme.config.support.ThemeProperty;
 import run.halo.app.service.ThemeService;
 import run.halo.app.service.ThemeSettingService;
 
-import java.util.Map;
-
 /**
  * Content theme controller.
  *

File: src/main/java/run/halo/app/controller/content/api/UserController.java
Patch:
@@ -26,6 +26,7 @@ public UserController(UserService userService) {
     @GetMapping("profile")
     @ApiOperation("Gets blogger profile")
     public UserDTO getProfile() {
-        return userService.getCurrentUser().map(user -> (UserDTO) new UserDTO().convertFrom(user)).get();
+        return userService.getCurrentUser().map(user -> (UserDTO) new UserDTO().convertFrom(user))
+            .get();
     }
 }

File: src/main/java/run/halo/app/controller/content/model/LinkModel.java
Patch:
@@ -17,7 +17,7 @@ public class LinkModel {
     private final OptionService optionService;
 
     public LinkModel(ThemeService themeService,
-            OptionService optionService) {
+        OptionService optionService) {
         this.themeService = themeService;
         this.optionService = optionService;
     }

File: src/main/java/run/halo/app/core/PageJacksonSerializer.java
Patch:
@@ -3,11 +3,10 @@
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
+import java.io.IOException;
 import org.springframework.data.domain.Page;
 import run.halo.app.model.support.CommentPage;
 
-import java.io.IOException;
-
 /**
  * Custom serializer for Page object.
  *
@@ -17,7 +16,8 @@
 public class PageJacksonSerializer extends JsonSerializer<Page> {
 
     @Override
-    public void serialize(Page page, JsonGenerator generator, SerializerProvider serializers) throws IOException {
+    public void serialize(Page page, JsonGenerator generator, SerializerProvider serializers)
+        throws IOException {
         generator.writeStartObject();
 
         generator.writeObjectField("content", page.getContent());

File: src/main/java/run/halo/app/core/freemarker/method/RandomMethod.java
Patch:
@@ -5,9 +5,8 @@
 import freemarker.template.SimpleNumber;
 import freemarker.template.TemplateMethodModelEx;
 import freemarker.template.TemplateModelException;
-import org.springframework.stereotype.Component;
-
 import java.util.List;
+import org.springframework.stereotype.Component;
 
 /**
  * Freemarker template random method.

File: src/main/java/run/halo/app/event/StaticStorageChangedEvent.java
Patch:
@@ -1,10 +1,9 @@
 package run.halo.app.event;
 
+import java.nio.file.Path;
 import lombok.Getter;
 import org.springframework.context.ApplicationEvent;
 
-import java.nio.file.Path;
-
 /**
  * @author ryanwang
  * @date 2020-03-24
@@ -18,7 +17,7 @@ public class StaticStorageChangedEvent extends ApplicationEvent {
      * Create a new {@code ApplicationEvent}.
      *
      * @param source the object on which the event initially occurred or with
-     *               which the event is associated (never {@code null})
+     * which the event is associated (never {@code null})
      */
     public StaticStorageChangedEvent(Object source, Path staticPath) {
         super(source);

File: src/main/java/run/halo/app/event/comment/AbstractCommentBaseEvent.java
Patch:
@@ -20,7 +20,7 @@ public abstract class AbstractCommentBaseEvent extends ApplicationEvent {
     /**
      * Create a new ApplicationEvent.
      *
-     * @param source    the object on which the event initially occurred (never {@code null})
+     * @param source the object on which the event initially occurred (never {@code null})
      * @param commentId comment id
      */
     public AbstractCommentBaseEvent(Object source, @NonNull Long commentId) {

File: src/main/java/run/halo/app/event/comment/CommentNewEvent.java
Patch:
@@ -13,7 +13,7 @@ public class CommentNewEvent extends AbstractCommentBaseEvent {
     /**
      * Create a new ApplicationEvent.
      *
-     * @param source    the object on which the event initially occurred (never {@code null})
+     * @param source the object on which the event initially occurred (never {@code null})
      * @param commentId comment id
      */
     public CommentNewEvent(Object source, @NonNull Long commentId) {

File: src/main/java/run/halo/app/event/comment/CommentReplyEvent.java
Patch:
@@ -13,7 +13,7 @@ public class CommentReplyEvent extends AbstractCommentBaseEvent {
     /**
      * Create a new ApplicationEvent.
      *
-     * @param source    the object on which the event initially occurred (never {@code null})
+     * @param source the object on which the event initially occurred (never {@code null})
      * @param commentId comment id
      */
     public CommentReplyEvent(Object source, @NonNull Long commentId) {

File: src/main/java/run/halo/app/event/logger/LogEvent.java
Patch:
@@ -17,7 +17,7 @@ public class LogEvent extends ApplicationEvent {
     /**
      * Create a new ApplicationEvent.
      *
-     * @param source   the object on which the event initially occurred (never {@code null})
+     * @param source the object on which the event initially occurred (never {@code null})
      * @param logParam login param
      */
     public LogEvent(Object source, LogParam logParam) {

File: src/main/java/run/halo/app/event/post/AbstractVisitEvent.java
Patch:
@@ -18,7 +18,7 @@ public abstract class AbstractVisitEvent extends ApplicationEvent {
      * Create a new ApplicationEvent.
      *
      * @param source the object on which the event initially occurred (never {@code null})
-     * @param id     id
+     * @param id id
      */
     public AbstractVisitEvent(@NonNull Object source, @NonNull Integer id) {
         super(source);

File: src/main/java/run/halo/app/event/post/SheetVisitEvent.java
Patch:
@@ -11,7 +11,7 @@ public class SheetVisitEvent extends AbstractVisitEvent {
     /**
      * Create a new ApplicationEvent.
      *
-     * @param source  the object on which the event initially occurred (never {@code null})
+     * @param source the object on which the event initially occurred (never {@code null})
      * @param sheetId sheet id must not be null
      */
     public SheetVisitEvent(Object source, Integer sheetId) {

File: src/main/java/run/halo/app/factory/StringToEnumConverterFactory.java
Patch:
@@ -1,8 +1,8 @@
 package run.halo.app.factory;
 
-import org.springframework.lang.NonNull;
 import org.springframework.core.convert.converter.Converter;
 import org.springframework.core.convert.converter.ConverterFactory;
+import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Component;
 
 /**
@@ -19,7 +19,7 @@ public <T extends Enum<?>> Converter<String, T> getConverter(@NonNull Class<T> t
     }
 
     private static class StringToEnumConverter<T extends Enum<T>>
-            implements Converter<String, T> {
+        implements Converter<String, T> {
 
         private final Class<T> enumType;
 

File: src/main/java/run/halo/app/handler/migrate/HaloMigrateHandler.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.handler.migrate;
 
+import java.io.IOException;
 import org.springframework.stereotype.Component;
 import org.springframework.web.multipart.MultipartFile;
 import run.halo.app.model.enums.MigrateType;
 import run.halo.app.service.BackupService;
 
-import java.io.IOException;
-
 /**
  * @author ryanwang
  * @date 2020-03-14

File: src/main/java/run/halo/app/handler/theme/config/ThemeConfigResolver.java
Patch:
@@ -1,10 +1,9 @@
 package run.halo.app.handler.theme.config;
 
-import org.springframework.lang.NonNull;
-import run.halo.app.handler.theme.config.support.Group;
-
 import java.io.IOException;
 import java.util.List;
+import org.springframework.lang.NonNull;
+import run.halo.app.handler.theme.config.support.Group;
 
 /**
  * Theme config resolver interface.

File: src/main/java/run/halo/app/handler/theme/config/ThemePropertyResolver.java
Patch:
@@ -1,10 +1,9 @@
 package run.halo.app.handler.theme.config;
 
+import java.io.IOException;
 import org.springframework.lang.NonNull;
 import run.halo.app.handler.theme.config.support.ThemeProperty;
 
-import java.io.IOException;
-
 /**
  * Theme file resolver.
  *

File: src/main/java/run/halo/app/handler/theme/config/impl/YamlThemePropertyResolver.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.handler.theme.config.impl;
 
+import java.io.IOException;
 import org.springframework.lang.NonNull;
 import org.springframework.stereotype.Service;
 import org.springframework.util.Assert;
 import run.halo.app.handler.theme.config.ThemePropertyResolver;
 import run.halo.app.handler.theme.config.support.ThemeProperty;
 import run.halo.app.theme.YamlResolver;
 
-import java.io.IOException;
-
 /**
  * Yaml theme file resolver.
  *

File: src/main/java/run/halo/app/handler/theme/config/support/Group.java
Patch:
@@ -1,8 +1,7 @@
 package run.halo.app.handler.theme.config.support;
 
-import lombok.Data;
-
 import java.util.List;
+import lombok.Data;
 
 /**
  * Theme configuration: group entity.

File: src/main/java/run/halo/app/handler/theme/config/support/Item.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.handler.theme.config.support;
 
+import java.util.List;
+import java.util.Objects;
 import lombok.Data;
 import run.halo.app.model.enums.DataType;
 import run.halo.app.model.enums.InputType;
 
-import java.util.List;
-import java.util.Objects;
-
 /**
  * Theme configuration: item entity
  *

File: src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java
Patch:
@@ -1,9 +1,8 @@
 package run.halo.app.handler.theme.config.support;
 
-import lombok.Data;
-
 import java.util.Objects;
 import java.util.Set;
+import lombok.Data;
 
 /**
  * Theme property.

File: src/main/java/run/halo/app/mail/MailProperties.java
Patch:
@@ -1,10 +1,9 @@
 package run.halo.app.mail;
 
 
-import org.apache.commons.lang3.StringUtils;
-
 import java.util.HashMap;
 import java.util.Map;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * Mail properties.

File: src/main/java/run/halo/app/mail/MailSenderFactory.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.mail;
 
+import java.util.Properties;
 import org.springframework.boot.autoconfigure.mail.MailProperties;
 import org.springframework.lang.NonNull;
 import org.springframework.mail.javamail.JavaMailSender;
 import org.springframework.mail.javamail.JavaMailSenderImpl;
 import org.springframework.util.Assert;
 import org.springframework.util.CollectionUtils;
 
-import java.util.Properties;
-
 /**
  * Java mail sender factory.
  *
@@ -34,7 +33,8 @@ public JavaMailSender getMailSender(@NonNull MailProperties mailProperties) {
         return mailSender;
     }
 
-    private void setProperties(@NonNull JavaMailSenderImpl mailSender, @NonNull MailProperties mailProperties) {
+    private void setProperties(@NonNull JavaMailSenderImpl mailSender,
+        @NonNull MailProperties mailProperties) {
         mailSender.setHost(mailProperties.getHost());
         mailSender.setPort(mailProperties.getPort());
         mailSender.setUsername(mailProperties.getUsername());

File: src/main/java/run/halo/app/model/dto/AttachmentDTO.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.model.dto;
 
+import java.util.Date;
 import lombok.Data;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.Attachment;
 import run.halo.app.model.enums.AttachmentType;
 
-import java.util.Date;
-
 /**
  * Attachment output dto.
  *

File: src/main/java/run/halo/app/model/dto/BaseCommentDTO.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.model.dto;
 
+import java.util.Date;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.BaseComment;
 import run.halo.app.model.enums.CommentStatus;
 
-import java.util.Date;
-
 /**
  * Base comment output dto.
  *

File: src/main/java/run/halo/app/model/dto/BaseMetaDTO.java
Patch:
@@ -1,13 +1,12 @@
 package run.halo.app.model.dto;
 
+import java.util.Date;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.BaseMeta;
 
-import java.util.Date;
-
 /**
  * Base meta Dto.
  *

File: src/main/java/run/halo/app/model/dto/CategoryDTO.java
Patch:
@@ -1,13 +1,12 @@
 package run.halo.app.model.dto;
 
+import java.util.Date;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.Category;
 
-import java.util.Date;
-
 /**
  * Category output dto.
  *

File: src/main/java/run/halo/app/model/dto/JournalDTO.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.model.dto;
 
+import java.util.Date;
 import lombok.Data;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.Journal;
 import run.halo.app.model.enums.JournalType;
 
-import java.util.Date;
-
 /**
  * Journal dto.
  *

File: src/main/java/run/halo/app/model/dto/LogDTO.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.model.dto;
 
+import java.util.Date;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.Log;
 import run.halo.app.model.enums.LogType;
 
-import java.util.Date;
-
 /**
  * @author johnniang
  * @date 3/19/19

File: src/main/java/run/halo/app/model/dto/OptionSimpleDTO.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.model.dto;
 
+import java.util.Date;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import run.halo.app.model.enums.OptionType;
 
-import java.util.Date;
-
 /**
  * Option list output dto.
  *

File: src/main/java/run/halo/app/model/dto/PhotoDTO.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.model.dto;
 
+import java.util.Date;
 import lombok.Data;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.Photo;
 
-import java.util.Date;
-
 /**
  * @author ryanwang
  * @date 2019-03-21

File: src/main/java/run/halo/app/model/dto/StatisticWithUserDTO.java
Patch:
@@ -12,7 +12,8 @@
  */
 @Data
 @EqualsAndHashCode(callSuper = true)
-public class StatisticWithUserDTO extends StatisticDTO implements OutputConverter<StatisticWithUserDTO, StatisticDTO> {
+public class StatisticWithUserDTO extends StatisticDTO
+    implements OutputConverter<StatisticWithUserDTO, StatisticDTO> {
 
     private UserDTO user;
 }

File: src/main/java/run/halo/app/model/dto/TagDTO.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.model.dto;
 
+import java.util.Date;
 import lombok.Data;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.Tag;
 
-import java.util.Date;
-
 /**
  * Tag output dto.
  *

File: src/main/java/run/halo/app/model/dto/UserDTO.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.model.dto;
 
+import java.util.Date;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.User;
 import run.halo.app.model.enums.MFAType;
 
-import java.util.Date;
-
 /**
  * User output dto.
  *

File: src/main/java/run/halo/app/model/dto/post/BasePostMinimalDTO.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.model.dto.post;
 
+import java.util.Date;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
@@ -8,8 +9,6 @@
 import run.halo.app.model.enums.PostEditorType;
 import run.halo.app.model.enums.PostStatus;
 
-import java.util.Date;
-
 /**
  * Base post minimal output dto.
  *

File: src/main/java/run/halo/app/model/entity/PostMeta.java
Patch:
@@ -1,9 +1,8 @@
 package run.halo.app.model.entity;
 
-import lombok.EqualsAndHashCode;
-
 import javax.persistence.DiscriminatorValue;
 import javax.persistence.Entity;
+import lombok.EqualsAndHashCode;
 
 /**
  * PostMeta entity.

File: src/main/java/run/halo/app/model/entity/SheetMeta.java
Patch:
@@ -1,9 +1,8 @@
 package run.halo.app.model.entity;
 
-import lombok.EqualsAndHashCode;
-
 import javax.persistence.DiscriminatorValue;
 import javax.persistence.Entity;
+import lombok.EqualsAndHashCode;
 
 /**
  * SheetMeta entity.

File: src/main/java/run/halo/app/model/entity/support/CustomIdGenerator.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.model.entity.support;
 
+import java.io.Serializable;
 import org.hibernate.engine.spi.SharedSessionContractImplementor;
 import org.hibernate.id.IdentityGenerator;
 import run.halo.app.utils.ReflectionUtils;
 
-import java.io.Serializable;
-
 /**
  * @author ryanwang
  * @date 2020-03-16

File: src/main/java/run/halo/app/model/enums/StaticDeployType.java
Patch:
@@ -9,7 +9,8 @@
 public enum StaticDeployType implements ValueEnum<Integer> {
 
     /**
-     * Deploy static pages in remote git repository, such as github pages,gitee pages,coding pages.etc.
+     * Deploy static pages in remote git repository, such as github pages,gitee pages,coding
+     * pages.etc.
      */
     GIT(0),
 

File: src/main/java/run/halo/app/model/enums/converter/AttachmentTypeConverter.java
Patch:
@@ -1,8 +1,7 @@
 package run.halo.app.model.enums.converter;
 
-import run.halo.app.model.enums.AttachmentType;
-
 import javax.persistence.Converter;
+import run.halo.app.model.enums.AttachmentType;
 
 /**
  * Attachment type converter

File: src/main/java/run/halo/app/model/enums/converter/CommentStatusConverter.java
Patch:
@@ -1,8 +1,7 @@
 package run.halo.app.model.enums.converter;
 
-import run.halo.app.model.enums.CommentStatus;
-
 import javax.persistence.Converter;
+import run.halo.app.model.enums.CommentStatus;
 
 /**
  * PostComment status converter.

File: src/main/java/run/halo/app/model/enums/converter/DataTypeConverter.java
Patch:
@@ -1,8 +1,7 @@
 package run.halo.app.model.enums.converter;
 
-import run.halo.app.model.enums.DataType;
-
 import javax.persistence.Converter;
+import run.halo.app.model.enums.DataType;
 
 /**
  * Data type converter.

File: src/main/java/run/halo/app/model/enums/converter/LogTypeConverter.java
Patch:
@@ -1,8 +1,7 @@
 package run.halo.app.model.enums.converter;
 
-import run.halo.app.model.enums.LogType;
-
 import javax.persistence.Converter;
+import run.halo.app.model.enums.LogType;
 
 /**
  * Log type converter.

File: src/main/java/run/halo/app/model/enums/converter/PostStatusConverter.java
Patch:
@@ -1,8 +1,7 @@
 package run.halo.app.model.enums.converter;
 
-import run.halo.app.model.enums.PostStatus;
-
 import javax.persistence.Converter;
+import run.halo.app.model.enums.PostStatus;
 
 /**
  * PostStatus converter.

File: src/main/java/run/halo/app/model/enums/converter/PostTypeConverter.java
Patch:
@@ -1,8 +1,7 @@
 package run.halo.app.model.enums.converter;
 
-import run.halo.app.model.enums.PostType;
-
 import javax.persistence.Converter;
+import run.halo.app.model.enums.PostType;
 
 /**
  * PostType converter.

File: src/main/java/run/halo/app/model/params/AttachmentParam.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.model.params;
 
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.Size;
 import lombok.Data;
 import run.halo.app.model.dto.base.InputConverter;
 import run.halo.app.model.entity.Attachment;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.Size;
-
 /**
  * Attachment params.
  *

File: src/main/java/run/halo/app/model/params/CategoryParam.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.model.params;
 
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.Size;
 import lombok.Data;
 import org.apache.commons.lang3.StringUtils;
 import run.halo.app.model.dto.base.InputConverter;
 import run.halo.app.model.entity.Category;
 import run.halo.app.utils.SlugUtils;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.Size;
-
 /**
  * Category param.
  *

File: src/main/java/run/halo/app/model/params/InstallParam.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.model.params;
 
+import javax.validation.constraints.NotBlank;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import run.halo.app.model.support.CreateCheck;
 
-import javax.validation.constraints.NotBlank;
-
 /**
  * Install parameters.
  *

File: src/main/java/run/halo/app/model/params/JournalParam.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.model.params;
 
+import javax.validation.constraints.NotBlank;
 import lombok.Data;
 import run.halo.app.model.dto.base.InputConverter;
 import run.halo.app.model.entity.Journal;
 import run.halo.app.model.enums.JournalType;
 
-import javax.validation.constraints.NotBlank;
-
 /**
  * Journal param.
  *

File: src/main/java/run/halo/app/model/params/LoginParam.java
Patch:
@@ -1,10 +1,9 @@
 package run.halo.app.model.params;
 
-import lombok.Data;
-import lombok.ToString;
-
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.Size;
+import lombok.Data;
+import lombok.ToString;
 
 /**
  * Login param.

File: src/main/java/run/halo/app/model/params/MailParam.java
Patch:
@@ -1,9 +1,8 @@
 package run.halo.app.model.params;
 
-import lombok.Data;
-
 import javax.validation.constraints.Email;
 import javax.validation.constraints.NotBlank;
+import lombok.Data;
 
 /**
  * Journal query params.

File: src/main/java/run/halo/app/model/params/MultiFactorAuthParam.java
Patch:
@@ -1,10 +1,9 @@
 package run.halo.app.model.params;
 
-import lombok.Data;
-import run.halo.app.model.enums.MFAType;
-
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.Size;
+import lombok.Data;
+import run.halo.app.model.enums.MFAType;
 
 /**
  * Multi-Factor Auth Param.

File: src/main/java/run/halo/app/model/params/OptionParam.java
Patch:
@@ -1,13 +1,12 @@
 package run.halo.app.model.params;
 
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.Size;
 import lombok.Data;
 import run.halo.app.model.dto.base.InputConverter;
 import run.halo.app.model.entity.Option;
 import run.halo.app.model.enums.OptionType;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.Size;
-
 /**
  * Optional param.
  *

File: src/main/java/run/halo/app/model/params/PasswordParam.java
Patch:
@@ -1,9 +1,8 @@
 package run.halo.app.model.params;
 
-import lombok.Data;
-
 import javax.validation.constraints.NotBlank;
 import javax.validation.constraints.Size;
+import lombok.Data;
 
 /**
  * User password param.

File: src/main/java/run/halo/app/model/params/PhotoParam.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.model.params;
 
+import java.util.Date;
+import javax.validation.constraints.NotBlank;
 import lombok.Data;
 import run.halo.app.model.dto.base.InputConverter;
 import run.halo.app.model.entity.Photo;
 
-import javax.validation.constraints.NotBlank;
-import java.util.Date;
-
 /**
  * Post param.
  *

File: src/main/java/run/halo/app/model/params/ResetPasswordParam.java
Patch:
@@ -1,8 +1,7 @@
 package run.halo.app.model.params;
 
-import lombok.Data;
-
 import javax.validation.constraints.NotBlank;
+import lombok.Data;
 
 /**
  * Reset password params.

File: src/main/java/run/halo/app/model/params/TagParam.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.model.params;
 
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.Size;
 import lombok.Data;
 import org.apache.commons.lang3.StringUtils;
 import run.halo.app.model.dto.base.InputConverter;
 import run.halo.app.model.entity.Tag;
 import run.halo.app.utils.SlugUtils;
 
-import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.Size;
-
 /**
  * Tag param.
  *

File: src/main/java/run/halo/app/model/properties/CommentProperties.java
Patch:
@@ -47,7 +47,8 @@ public enum CommentProperties implements PropertyEnum {
     /**
      * Dependent comment js.
      */
-    INTERNAL_PLUGIN_JS("comment_internal_plugin_js", String.class, "//cdn.jsdelivr.net/npm/halo-comment@latest/dist/halo-comment.min.js"),
+    INTERNAL_PLUGIN_JS("comment_internal_plugin_js", String.class,
+        "//cdn.jsdelivr.net/npm/halo-comment@latest/dist/halo-comment.min.js"),
 
     COMMENT_BAN_TIME("comment_ban_time", Integer.class, "10"),
 

File: src/main/java/run/halo/app/model/properties/PostProperties.java
Patch:
@@ -54,7 +54,8 @@ public enum PostProperties implements PropertyEnum {
     /**
      * Recycled post retention time unit.
      */
-    RECYCLED_POST_RETENTION_TIMEUNIT("recycled_post_retention_timeunit", TimeUnit.class, TimeUnit.DAY.name());
+    RECYCLED_POST_RETENTION_TIMEUNIT("recycled_post_retention_timeunit", TimeUnit.class,
+        TimeUnit.DAY.name());
 
     private final String value;
 

File: src/main/java/run/halo/app/model/support/CommentPage.java
Patch:
@@ -1,13 +1,12 @@
 package run.halo.app.model.support;
 
+import java.util.List;
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.ToString;
 import org.springframework.data.domain.PageImpl;
 import org.springframework.data.domain.Pageable;
 
-import java.util.List;
-
 /**
  * PostComment page implementation.
  *

File: src/main/java/run/halo/app/model/support/Pagination.java
Patch:
@@ -1,8 +1,7 @@
 package run.halo.app.model.support;
 
-import lombok.Data;
-
 import java.util.List;
+import lombok.Data;
 
 /**
  * @author ryanwang

File: src/main/java/run/halo/app/model/support/StaticFile.java
Patch:
@@ -1,10 +1,9 @@
 package run.halo.app.model.support;
 
-import lombok.Data;
-import lombok.ToString;
-
 import java.util.Comparator;
 import java.util.List;
+import lombok.Data;
+import lombok.ToString;
 
 /**
  * Static file.

File: src/main/java/run/halo/app/model/support/StaticPageFile.java
Patch:
@@ -1,9 +1,8 @@
 package run.halo.app.model.support;
 
-import lombok.Data;
-
 import java.util.Comparator;
 import java.util.List;
+import lombok.Data;
 
 /**
  * Static page dto.

File: src/main/java/run/halo/app/model/support/ThemeFile.java
Patch:
@@ -1,10 +1,9 @@
 package run.halo.app.model.support;
 
-import lombok.Data;
-import lombok.ToString;
-
 import java.util.Comparator;
 import java.util.List;
+import lombok.Data;
+import lombok.ToString;
 
 /**
  * Theme file.

File: src/main/java/run/halo/app/model/vo/ArchiveMonthVO.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.model.vo;
 
+import java.util.Comparator;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 
-import java.util.Comparator;
-
 /**
  * Month archive vo.
  *

File: src/main/java/run/halo/app/model/vo/ArchiveYearVO.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.model.vo;
 
+import java.util.Comparator;
+import java.util.List;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 
-import java.util.Comparator;
-import java.util.List;
-
 /**
  * Year archive vo.
  *

File: src/main/java/run/halo/app/model/vo/BaseCommentVO.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.model.vo;
 
+import java.util.List;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.model.dto.BaseCommentDTO;
 
-import java.util.List;
-
 /**
  * Base comment vo.
  *

File: src/main/java/run/halo/app/model/vo/CategoryVO.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.model.vo;
 
+import java.util.List;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.model.dto.CategoryDTO;
 
-import java.util.List;
-
 /**
  * Category vo.
  *

File: src/main/java/run/halo/app/model/vo/LinkTeamVO.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.model.vo;
 
+import java.util.List;
 import lombok.Data;
 import lombok.ToString;
 import run.halo.app.model.dto.LinkDTO;
 
-import java.util.List;
-
 /**
  * Link team vo.
  *

File: src/main/java/run/halo/app/model/vo/MenuTeamVO.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.model.vo;
 
+import java.util.List;
 import lombok.Data;
 import lombok.ToString;
 import run.halo.app.model.dto.MenuDTO;
 
-import java.util.List;
-
 /**
  * Menu team vo.
  *

File: src/main/java/run/halo/app/model/vo/MenuVO.java
Patch:
@@ -1,13 +1,12 @@
 package run.halo.app.model.vo;
 
+import java.util.LinkedList;
+import java.util.List;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.model.dto.MenuDTO;
 
-import java.util.LinkedList;
-import java.util.List;
-
 /**
  * @author ryanwang
  * @date 2019-04-07

File: src/main/java/run/halo/app/model/vo/PhotoTeamVO.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.model.vo;
 
+import java.util.List;
 import lombok.Data;
 import lombok.ToString;
 import run.halo.app.model.dto.PhotoDTO;
 
-import java.util.List;
-
 /**
  * Link team vo.
  *

File: src/main/java/run/halo/app/model/vo/PostDetailVO.java
Patch:
@@ -1,5 +1,7 @@
 package run.halo.app.model.vo;
 
+import java.util.List;
+import java.util.Set;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
@@ -8,9 +10,6 @@
 import run.halo.app.model.dto.TagDTO;
 import run.halo.app.model.dto.post.BasePostDetailDTO;
 
-import java.util.List;
-import java.util.Set;
-
 /**
  * Post vo.
  *

File: src/main/java/run/halo/app/model/vo/PostListVO.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.model.vo;
 
+import java.util.List;
+import java.util.Map;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import run.halo.app.model.dto.CategoryDTO;
 import run.halo.app.model.dto.TagDTO;
 import run.halo.app.model.dto.post.BasePostSimpleDTO;
 
-import java.util.List;
-import java.util.Map;
-
 /**
  * Post list vo.
  *

File: src/main/java/run/halo/app/model/vo/SheetDetailVO.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.model.vo;
 
+import java.util.List;
+import java.util.Set;
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.model.dto.BaseMetaDTO;
 import run.halo.app.model.dto.post.BasePostDetailDTO;
 
-import java.util.List;
-import java.util.Set;
-
 /**
  * Sheet detail VO.
  *

File: src/main/java/run/halo/app/repository/AttachmentRepository.java
Patch:
@@ -1,22 +1,22 @@
 package run.halo.app.repository;
 
+import java.util.List;
 import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.lang.NonNull;
 import run.halo.app.model.entity.Attachment;
 import run.halo.app.model.enums.AttachmentType;
 import run.halo.app.repository.base.BaseRepository;
 
-import java.util.List;
-
 /**
  * Attachment repository
  *
  * @author johnniang
  * @author ryanwang
  * @date 2019-04-03
  */
-public interface AttachmentRepository extends BaseRepository<Attachment, Integer>, JpaSpecificationExecutor<Attachment> {
+public interface AttachmentRepository
+    extends BaseRepository<Attachment, Integer>, JpaSpecificationExecutor<Attachment> {
 
     /**
      * Find all attachment media type.

File: src/main/java/run/halo/app/repository/CategoryRepository.java
Patch:
@@ -1,12 +1,11 @@
 package run.halo.app.repository;
 
+import java.util.List;
+import java.util.Optional;
 import org.springframework.lang.NonNull;
 import run.halo.app.model.entity.Category;
 import run.halo.app.repository.base.BaseRepository;
 
-import java.util.List;
-import java.util.Optional;
-
 /**
  * Category repository.
  *

File: src/main/java/run/halo/app/repository/LinkRepository.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.repository;
 
+import java.util.List;
 import org.springframework.data.jpa.repository.Query;
 import run.halo.app.model.entity.Link;
 import run.halo.app.repository.base.BaseRepository;
 
-import java.util.List;
-
 /**
  * Link repository.
  *

File: src/main/java/run/halo/app/repository/MenuRepository.java
Patch:
@@ -1,13 +1,12 @@
 package run.halo.app.repository;
 
+import java.util.List;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.lang.NonNull;
 import run.halo.app.model.entity.Menu;
 import run.halo.app.repository.base.BaseRepository;
 
-import java.util.List;
-
 /**
  * Menu repository.
  *
@@ -28,7 +27,7 @@ public interface MenuRepository extends BaseRepository<Menu, Integer> {
     /**
      * Query if the menu name already exists by id and name.
      *
-     * @param id   id must not be null.
+     * @param id id must not be null.
      * @param name name must not be null.
      * @return true or false.
      */

File: src/main/java/run/halo/app/repository/OptionRepository.java
Patch:
@@ -1,19 +1,19 @@
 package run.halo.app.repository;
 
+import java.util.Optional;
 import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
 import run.halo.app.model.entity.Option;
 import run.halo.app.repository.base.BaseRepository;
 
-import java.util.Optional;
-
 /**
  * Option repository.
  *
  * @author johnniang
  * @author ryanwang
  * @date 2019-03-20
  */
-public interface OptionRepository extends BaseRepository<Option, Integer>, JpaSpecificationExecutor<Option> {
+public interface OptionRepository
+    extends BaseRepository<Option, Integer>, JpaSpecificationExecutor<Option> {
 
     /**
      * Query option by key

File: src/main/java/run/halo/app/repository/PhotoRepository.java
Patch:
@@ -1,21 +1,21 @@
 package run.halo.app.repository;
 
+import java.util.List;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
 import org.springframework.data.jpa.repository.Query;
 import run.halo.app.model.entity.Photo;
 import run.halo.app.repository.base.BaseRepository;
 
-import java.util.List;
-
 /**
  * Photo repository.
  *
  * @author johnniang
  * @author ryanwang
  * @date 2019-04-03
  */
-public interface PhotoRepository extends BaseRepository<Photo, Integer>, JpaSpecificationExecutor<Photo> {
+public interface PhotoRepository
+    extends BaseRepository<Photo, Integer>, JpaSpecificationExecutor<Photo> {
 
     /**
      * Query photos by team

File: src/main/java/run/halo/app/repository/SheetRepository.java
Patch:
@@ -1,13 +1,12 @@
 package run.halo.app.repository;
 
+import java.util.Optional;
 import org.springframework.data.jpa.repository.Query;
 import org.springframework.lang.NonNull;
 import run.halo.app.model.entity.Sheet;
 import run.halo.app.model.enums.PostStatus;
 import run.halo.app.repository.base.BasePostRepository;
 
-import java.util.Optional;
-
 /**
  * Sheet repository.
  *
@@ -37,7 +36,7 @@ public interface SheetRepository extends BasePostRepository<Sheet> {
     /**
      * Gets sheet by slug and status.
      *
-     * @param slug   slug must not be blank
+     * @param slug slug must not be blank
      * @param status status must not be null
      * @return an optional of sheet.
      */

File: src/main/java/run/halo/app/repository/TagRepository.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.repository;
 
+import java.util.Optional;
 import org.springframework.lang.NonNull;
 import run.halo.app.model.entity.Tag;
 import run.halo.app.repository.base.BaseRepository;
 
-import java.util.Optional;
-
 /**
  * Tag repository.
  *

File: src/main/java/run/halo/app/repository/UserRepository.java
Patch:
@@ -1,11 +1,10 @@
 package run.halo.app.repository;
 
+import java.util.Optional;
 import org.springframework.lang.NonNull;
 import run.halo.app.model.entity.User;
 import run.halo.app.repository.base.BaseRepository;
 
-import java.util.Optional;
-
 /**
  * User repository.
  *

File: src/main/java/run/halo/app/security/context/SecurityContext.java
Patch:
@@ -21,7 +21,8 @@ public interface SecurityContext {
     /**
      * Changes the currently authenticated principal, or removes the authentication information.
      *
-     * @param authentication the new authentication or null if no further authentication should not be stored
+     * @param authentication the new authentication or null if no further authentication should
+     * not be stored
      */
     void setAuthentication(@Nullable Authentication authentication);
 

File: src/main/java/run/halo/app/security/context/SecurityContextHolder.java
Patch:
@@ -11,7 +11,7 @@
  */
 public class SecurityContextHolder {
 
-    private final static ThreadLocal<SecurityContext> CONTEXT_HOLDER = new ThreadLocal<>();
+    private static final ThreadLocal<SecurityContext> CONTEXT_HOLDER = new ThreadLocal<>();
 
     private SecurityContextHolder() {
     }

File: src/main/java/run/halo/app/security/service/OneTimeTokenService.java
Patch:
@@ -1,8 +1,7 @@
 package run.halo.app.security.service;
 
-import org.springframework.lang.NonNull;
-
 import java.util.Optional;
+import org.springframework.lang.NonNull;
 
 /**
  * One-time-token service interface.

File: src/main/java/run/halo/app/security/service/impl/OneTimeTokenServiceImpl.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.security.service.impl;
 
+import java.util.Optional;
+import java.util.concurrent.TimeUnit;
 import org.springframework.stereotype.Service;
 import org.springframework.util.Assert;
 import run.halo.app.cache.AbstractStringCacheStore;
 import run.halo.app.security.service.OneTimeTokenService;
 import run.halo.app.utils.HaloUtils;
 
-import java.util.Optional;
-import java.util.concurrent.TimeUnit;
-
 /**
  * One-time token service implementation.
  *

File: src/main/java/run/halo/app/service/CategoryService.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.service;
 
+import java.util.List;
 import org.springframework.data.domain.Sort;
 import org.springframework.lang.NonNull;
 import org.springframework.lang.Nullable;
@@ -9,8 +10,6 @@
 import run.halo.app.model.vo.CategoryVO;
 import run.halo.app.service.base.CrudService;
 
-import java.util.List;
-
 /**
  * Category service.
  *

File: src/main/java/run/halo/app/service/MenuService.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.service;
 
+import java.util.List;
 import org.springframework.data.domain.Sort;
 import org.springframework.lang.NonNull;
 import run.halo.app.model.dto.MenuDTO;
@@ -9,8 +10,6 @@
 import run.halo.app.model.vo.MenuVO;
 import run.halo.app.service.base.CrudService;
 
-import java.util.List;
-
 /**
  * Menu service interface.
  *

File: src/main/java/run/halo/app/service/MigrateService.java
Patch:
@@ -15,7 +15,7 @@ public interface MigrateService {
     /**
      * Migrate.
      *
-     * @param file        multipart file must not be null
+     * @param file multipart file must not be null
      * @param migrateType migrate type
      */
     void migrate(@NonNull MultipartFile file, @NonNull MigrateType migrateType);

File: src/main/java/run/halo/app/service/PhotoService.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.service;
 
+import java.util.List;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.domain.Sort;
@@ -11,8 +12,6 @@
 import run.halo.app.model.vo.PhotoTeamVO;
 import run.halo.app.service.base.CrudService;
 
-import java.util.List;
-
 /**
  * Photo service interface.
  *
@@ -58,7 +57,7 @@ public interface PhotoService extends CrudService<Photo, Integer> {
     /**
      * Pages photo output dtos.
      *
-     * @param pageable   page info must not be null
+     * @param pageable page info must not be null
      * @param photoQuery photoQuery
      * @return a page of photo output dto
      */

File: src/main/java/run/halo/app/service/PostCommentService.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.service;
 
+import java.util.List;
 import org.springframework.data.domain.Page;
 import org.springframework.lang.NonNull;
 import org.springframework.lang.Nullable;
 import run.halo.app.model.entity.PostComment;
 import run.halo.app.model.vo.PostCommentWithPostVO;
 import run.halo.app.service.base.BaseCommentService;
 
-import java.util.List;
-
 /**
  * Post comment service interface.
  *

File: src/main/java/run/halo/app/service/SheetCommentService.java
Patch:
@@ -1,14 +1,13 @@
 package run.halo.app.service;
 
+import java.util.List;
 import org.springframework.data.domain.Page;
 import org.springframework.lang.NonNull;
 import org.springframework.lang.Nullable;
 import run.halo.app.model.entity.SheetComment;
 import run.halo.app.model.vo.SheetCommentWithSheetVO;
 import run.halo.app.service.base.BaseCommentService;
 
-import java.util.List;
-
 /**
  * Sheet comment service interface.
  *
@@ -43,5 +42,6 @@ public interface SheetCommentService extends BaseCommentService<SheetComment> {
      * @return a page of sheet comments with sheet vo
      */
     @NonNull
-    Page<SheetCommentWithSheetVO> convertToWithSheetVo(@NonNull Page<SheetComment> sheetCommentPage);
+    Page<SheetCommentWithSheetVO> convertToWithSheetVo(
+        @NonNull Page<SheetComment> sheetCommentPage);
 }

File: src/main/java/run/halo/app/service/TagService.java
Patch:
@@ -1,13 +1,12 @@
 package run.halo.app.service;
 
+import java.util.List;
 import org.springframework.lang.NonNull;
 import org.springframework.lang.Nullable;
 import run.halo.app.model.dto.TagDTO;
 import run.halo.app.model.entity.Tag;
 import run.halo.app.service.base.CrudService;
 
-import java.util.List;
-
 /**
  * Tag service interface.
  *

File: src/main/java/run/halo/app/service/impl/LogServiceImpl.java
Patch:
@@ -32,7 +32,8 @@ public Page<LogDTO> pageLatest(int top) {
         Assert.isTrue(top > 0, "Top number must not be less than 0");
 
         // Build page request
-        PageRequest latestPageable = PageRequest.of(0, top, Sort.by(Sort.Direction.DESC, "createTime"));
+        PageRequest latestPageable =
+            PageRequest.of(0, top, Sort.by(Sort.Direction.DESC, "createTime"));
 
         // List all
         return listAll(latestPageable).map(log -> new LogDTO().convertFrom(log));

File: src/main/java/run/halo/app/service/impl/PostMetaServiceImpl.java
Patch:
@@ -23,14 +23,15 @@ public class PostMetaServiceImpl extends BaseMetaServiceImpl<PostMeta> implement
 
     private final PostRepository postRepository;
 
-    public PostMetaServiceImpl(BaseMetaRepository<PostMeta> baseMetaRepository, PostRepository postRepository) {
+    public PostMetaServiceImpl(BaseMetaRepository<PostMeta> baseMetaRepository,
+        PostRepository postRepository) {
         super(baseMetaRepository);
         this.postRepository = postRepository;
     }
 
     @Override
     public void validateTarget(@NonNull Integer postId) {
         postRepository.findById(postId)
-                .orElseThrow(() -> new NotFoundException("查询不到该文章的信息").setErrorData(postId));
+            .orElseThrow(() -> new NotFoundException("查询不到该文章的信息").setErrorData(postId));
     }
 }

File: src/main/java/run/halo/app/controller/admin/api/ThemeController.java
Patch:
@@ -165,7 +165,7 @@ public ThemeProperty uploadTheme(@RequestPart("file") MultipartFile file) {
         return themeService.upload(file);
     }
 
-    @PutMapping("upload/{themeId}")
+    @PostMapping("upload/{themeId}")
     @ApiOperation("Upgrades theme by file")
     public ThemeProperty updateThemeByUpload(@PathVariable("themeId") String themeId,
             @RequestPart("file") MultipartFile file) {

File: src/main/java/run/halo/app/task/RecycledPostCleaningTask.java
Patch:
@@ -39,7 +39,7 @@ public RecycledPostCleaningTask(OptionService optionService, PostService postSer
     /**
      * Clean recycled posts if RECYCLED_POST_CLEANING_ENABLED is true
      */
-    @Scheduled(cron = "0 0 */1 * * *")
+    @Scheduled(cron = "0 0 */1 * * ?")
     public synchronized void run() {
         Boolean recycledPostCleaningEnabled = optionService.getByPropertyOrDefault(PostProperties.RECYCLED_POST_CLEANING_ENABLED, Boolean.class, false);
         log.debug("{} = {}", PostProperties.RECYCLED_POST_CLEANING_ENABLED.getValue(), recycledPostCleaningEnabled);

File: src/main/java/run/halo/app/core/ControllerExceptionHandler.java
Patch:
@@ -140,11 +140,10 @@ private <T> BaseResponse<T> handleBaseException(Throwable t) {
         BaseResponse<T> baseResponse = new BaseResponse<>();
         baseResponse.setMessage(t.getMessage());
 
+        log.error("Captured an exception:", t);
+
         if (log.isDebugEnabled()) {
-            log.error("Captured an exception:", t);
             baseResponse.setDevMessage(ExceptionUtils.getStackTrace(t));
-        } else {
-            log.error("Captured an exception: [{}]", t.getMessage());
         }
 
         return baseResponse;

File: src/main/java/run/halo/app/handler/file/FileHandlers.java
Patch:
@@ -51,7 +51,6 @@ public UploadResult upload(@NonNull MultipartFile file, @NonNull AttachmentType
         return getSupportedType(attachmentType).upload(file);
     }
 
-
     /**
      * Deletes attachment.
      *

File: src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java
Patch:
@@ -31,7 +31,6 @@
 import java.nio.file.Paths;
 import java.util.Objects;
 
-import static run.halo.app.handler.file.FileHandler.isImageType;
 import static run.halo.app.model.support.HaloConst.*;
 import static run.halo.app.utils.HaloUtils.ensureSuffix;
 
@@ -129,7 +128,7 @@ public UploadResult upload(MultipartFile file) {
             result.setMediaType(MediaType.valueOf(Objects.requireNonNull(file.getContentType())));
             result.setSize(file.getSize());
 
-            if (isImageType(result.getMediaType())) {
+            if (isImageType(file)) {
                 if (ImageUtils.EXTENSION_ICO.equals(extension)) {
                     result.setThumbPath(filePath);
                 } else {

File: src/main/java/run/halo/app/handler/file/SmmsFileHandler.java
Patch:
@@ -76,7 +76,7 @@ public UploadResult upload(MultipartFile file) {
             throw new ServiceException("请先设置 SM.MS 的 Secret Token");
         }
 
-        if (!FileHandler.isImageType(file.getContentType())) {
+        if (!isImageType(file)) {
             log.error("Invalid extension: [{}]", file.getContentType());
             throw new FileOperationException("不支持的文件类型，仅支持 \"jpeg, jpg, png, gif, bmp\" 格式的图片");
         }

File: src/main/java/run/halo/app/Application.java
Patch:
@@ -2,6 +2,7 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
 import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
@@ -14,7 +15,7 @@
  * @author ryanwang
  * @date 2017-11-14
  */
-@SpringBootApplication
+@SpringBootApplication(exclude = { MultipartAutoConfiguration.class })
 @EnableAsync
 @EnableJpaRepositories(basePackages = "run.halo.app.repository", repositoryBaseClass = BaseRepositoryImpl.class)
 public class Application extends SpringBootServletInitializer {

File: src/main/java/run/halo/app/controller/core/CommonController.java
Patch:
@@ -83,7 +83,6 @@ public String handleError(HttpServletRequest request, HttpServletResponse respon
         model.addAttribute("error", errorDetail);
         model.addAttribute("meta_keywords", optionService.getSeoKeywords());
         model.addAttribute("meta_description", optionService.getSeoDescription());
-        model.addAttribute("message", HttpStatus.valueOf(optionService.getSeoKeywords()).value());
         log.debug("Error detail: [{}]", errorDetail);
 
         HttpStatus status = getStatus(request);

File: src/main/java/run/halo/app/theme/ThemePropertyScanner.java
Patch:
@@ -63,7 +63,7 @@ public List<ThemeProperty> scan(@NonNull Path themePath, @Nullable String active
         }
         try (Stream<Path> pathStream = Files.list(themePath)) {
             // List and filter sub folders
-            List<Path> themePaths = pathStream.filter(path -> Files.isDirectory(path))
+            List<Path> themePaths = pathStream.filter(Files::isDirectory)
                     .collect(Collectors.toList());
 
             if (CollectionUtils.isEmpty(themePaths)) {

File: src/main/java/run/halo/app/utils/GithubUtils.java
Patch:
@@ -7,6 +7,7 @@
 
 import java.io.FileNotFoundException;
 import java.util.*;
+import java.util.concurrent.TimeUnit;
 
 /**
  * GithubUtils send request to api.github.com
@@ -298,7 +299,7 @@ public void run() {
                 }
 
                 try {
-                    Thread.sleep(2000);
+                    TimeUnit.SECONDS.sleep(2);
                 } catch (InterruptedException e) {
                     break;
                 }

File: src/main/java/run/halo/app/controller/admin/api/ThemeController.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.web.bind.annotation.*;
 import org.springframework.web.multipart.MultipartFile;
 import run.halo.app.annotation.DisableOnCondition;
+import run.halo.app.cache.lock.CacheLock;
 import run.halo.app.handler.theme.config.support.Group;
 import run.halo.app.handler.theme.config.support.ThemeProperty;
 import run.halo.app.model.params.ThemeContentParam;
@@ -144,6 +145,7 @@ public void saveSettingsBy(@RequestBody Map<String, Object> settings) {
 
     @PostMapping("{themeId}/settings")
     @ApiOperation("Saves theme settings")
+    @CacheLock(prefix = "save_theme_setting_by_themeId")
     public void saveSettingsBy(@PathVariable("themeId") String themeId,
             @RequestBody Map<String, Object> settings) {
         themeSettingService.save(settings, themeId);

File: src/main/java/run/halo/app/controller/core/CommonController.java
Patch:
@@ -83,7 +83,7 @@ public String handleError(HttpServletRequest request, HttpServletResponse respon
         model.addAttribute("error", errorDetail);
         model.addAttribute("meta_keywords", optionService.getSeoKeywords());
         model.addAttribute("meta_description", optionService.getSeoDescription());
-
+        model.addAttribute("message", HttpStatus.valueOf(optionService.getSeoKeywords()).value());
         log.debug("Error detail: [{}]", errorDetail);
 
         HttpStatus status = getStatus(request);

File: src/main/java/run/halo/app/service/PostService.java
Patch:
@@ -265,4 +265,5 @@ public interface PostService extends BasePostService<Post> {
      */
     @NotNull
     Sort getPostDefaultSort();
+
 }

File: src/main/java/run/halo/app/service/SheetService.java
Patch:
@@ -131,4 +131,5 @@ public interface SheetService extends BasePostService<Sheet> {
      * @param sheetId sheetId must not be null
      */
     void publishVisitEvent(@NonNull Integer sheetId);
+
 }

File: src/main/java/run/halo/app/service/impl/SheetServiceImpl.java
Patch:
@@ -358,4 +358,5 @@ private String buildFullPath(Sheet sheet) {
 
         return fullPath.toString();
     }
+
 }

File: src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java
Patch:
@@ -34,7 +34,7 @@ public void pointcut() {
 
     @Around("pointcut() && @annotation(disableApi)")
     public Object around(ProceedingJoinPoint joinPoint,
-                         DisableOnCondition disableApi) throws Throwable {
+            DisableOnCondition disableApi) throws Throwable {
         Mode mode = disableApi.mode();
         if (haloProperties.getMode().equals(mode)) {
             throw new ForbiddenException("禁止访问");

File: src/main/java/run/halo/app/config/HaloConfiguration.java
Patch:
@@ -43,10 +43,10 @@ public ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {
 
     @Bean
     public RestTemplate httpsRestTemplate(RestTemplateBuilder builder)
-        throws NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
+            throws NoSuchAlgorithmException, KeyStoreException, KeyManagementException {
         RestTemplate httpsRestTemplate = builder.build();
         httpsRestTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(HttpClientUtils.createHttpsClient(
-            (int) haloProperties.getDownloadTimeout().toMillis())));
+                (int) haloProperties.getDownloadTimeout().toMillis())));
         return httpsRestTemplate;
     }
 

File: src/main/java/run/halo/app/controller/admin/api/AttachmentController.java
Patch:
@@ -38,7 +38,7 @@ public AttachmentController(AttachmentService attachmentService) {
 
     @GetMapping
     public Page<AttachmentDTO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable,
-                                      AttachmentQuery attachmentQuery) {
+            AttachmentQuery attachmentQuery) {
         return attachmentService.pageDtosBy(pageable, attachmentQuery);
     }
 
@@ -52,7 +52,7 @@ public AttachmentDTO getBy(@PathVariable("id") Integer id) {
     @PutMapping("{attachmentId:\\d+}")
     @ApiOperation("Updates a attachment")
     public AttachmentDTO updateBy(@PathVariable("attachmentId") Integer attachmentId,
-                                  @RequestBody @Valid AttachmentParam attachmentParam) {
+            @RequestBody @Valid AttachmentParam attachmentParam) {
         Attachment attachment = attachmentService.getById(attachmentId);
         attachmentParam.update(attachment);
         return new AttachmentDTO().convertFrom(attachmentService.update(attachment));

File: src/main/java/run/halo/app/controller/admin/api/JournalController.java
Patch:
@@ -37,7 +37,7 @@ public JournalController(JournalService journalService) {
     @GetMapping
     @ApiOperation("Lists journals")
     public Page<JournalWithCmtCountDTO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable,
-                                               JournalQuery journalQuery) {
+            JournalQuery journalQuery) {
         Page<Journal> journalPage = journalService.pageBy(journalQuery, pageable);
         return journalService.convertToCmtCountDto(journalPage);
     }
@@ -59,7 +59,7 @@ public JournalDTO createBy(@RequestBody @Valid JournalParam journalParam) {
     @PutMapping("{id:\\d+}")
     @ApiOperation("Updates a Journal")
     public JournalDTO updateBy(@PathVariable("id") Integer id,
-                               @RequestBody @Valid JournalParam journalParam) {
+            @RequestBody @Valid JournalParam journalParam) {
         Journal journal = journalService.getById(id);
         journalParam.update(journal);
         Journal updatedJournal = journalService.updateBy(journal);

File: src/main/java/run/halo/app/controller/admin/api/LinkController.java
Patch:
@@ -53,7 +53,7 @@ public LinkDTO createBy(@RequestBody @Valid LinkParam linkParam) {
     @PutMapping("{id:\\d+}")
     @ApiOperation("Updates a link")
     public LinkDTO updateBy(@PathVariable("id") Integer id,
-                            @RequestBody @Valid LinkParam linkParam) {
+            @RequestBody @Valid LinkParam linkParam) {
         Link link = linkService.getById(id);
         linkParam.update(link);
         return new LinkDTO().convertFrom(linkService.update(link));

File: src/main/java/run/halo/app/controller/admin/api/MenuController.java
Patch:
@@ -60,7 +60,7 @@ public MenuDTO createBy(@RequestBody @Valid MenuParam menuParam) {
     @PutMapping("{menuId:\\d+}")
     @ApiOperation("Updates a menu")
     public MenuDTO updateBy(@PathVariable("menuId") Integer menuId,
-                            @RequestBody @Valid MenuParam menuParam) {
+            @RequestBody @Valid MenuParam menuParam) {
         // Get the menu
         Menu menu = menuService.getById(menuId);
 

File: src/main/java/run/halo/app/controller/admin/api/OptionController.java
Patch:
@@ -64,7 +64,7 @@ public Map<String, Object> listAllWithMapView(@RequestBody List<String> keys) {
     @GetMapping("list_view")
     @ApiOperation("Lists all options with list view")
     public Page<OptionSimpleDTO> listAllWithListView(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable,
-                                                     OptionQuery optionQuery) {
+            OptionQuery optionQuery) {
         return optionService.pageDtosBy(pageable, optionQuery);
     }
 
@@ -86,7 +86,7 @@ public void createBy(@RequestBody @Valid OptionParam optionParam) {
     @ApiOperation("Updates option")
     @DisableOnCondition
     public void updateBy(@PathVariable("optionId") Integer optionId,
-                         @RequestBody @Valid OptionParam optionParam) {
+            @RequestBody @Valid OptionParam optionParam) {
         optionService.update(optionId, optionParam);
     }
 

File: src/main/java/run/halo/app/controller/admin/api/PhotoController.java
Patch:
@@ -43,7 +43,7 @@ public List<PhotoDTO> listPhotos(@SortDefault(sort = "createTime", direction = S
     @GetMapping
     @ApiOperation("Lists photos")
     public Page<PhotoDTO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable,
-                                 PhotoQuery photoQuery) {
+            PhotoQuery photoQuery) {
         return photoService.pageDtosBy(pageable, photoQuery);
     }
 
@@ -68,7 +68,7 @@ public PhotoDTO createBy(@Valid @RequestBody PhotoParam photoParam) {
     @PutMapping("{photoId:\\d+}")
     @ApiOperation("Updates a photo")
     public PhotoDTO updateBy(@PathVariable("photoId") Integer photoId,
-                             @RequestBody @Valid PhotoParam photoParam) {
+            @RequestBody @Valid PhotoParam photoParam) {
         // Get the photo
         Photo photo = photoService.getById(photoId);
 

File: src/main/java/run/halo/app/controller/admin/api/StaticStorageController.java
Patch:
@@ -40,21 +40,21 @@ public void deletePermanently(@RequestParam("path") String path) {
     @PostMapping
     @ApiOperation("Creates a folder")
     public void createFolder(String basePath,
-                             @RequestParam("folderName") String folderName) {
+            @RequestParam("folderName") String folderName) {
         staticStorageService.createFolder(basePath, folderName);
     }
 
     @PostMapping("upload")
     @ApiOperation("Uploads static file")
     public void upload(String basePath,
-                       @RequestPart("file") MultipartFile file) {
+            @RequestPart("file") MultipartFile file) {
         staticStorageService.upload(basePath, file);
     }
 
     @PostMapping("rename")
     @ApiOperation("Renames static file")
     public void rename(String basePath,
-                       String newName) {
+            String newName) {
         staticStorageService.rename(basePath, newName);
     }
 

File: src/main/java/run/halo/app/controller/admin/api/UserController.java
Patch:
@@ -76,7 +76,7 @@ public MultiFactorAuthVO generateMFAQrImage(@RequestBody MultiFactorAuthParam mu
                 String mfaKey = TwoFactorAuthUtils.generateTFAKey();
                 String optAuthUrl = TwoFactorAuthUtils.generateOtpAuthUrl(user.getNickname(), mfaKey);
                 String qrImageBase64 = "data:image/png;base64," +
-                    Base64.encode(QrCodeUtil.generatePng(optAuthUrl, 128, 128));
+                        Base64.encode(QrCodeUtil.generatePng(optAuthUrl, 128, 128));
                 return new MultiFactorAuthVO(qrImageBase64, optAuthUrl, mfaKey, MFAType.TFA_TOTP);
             } else {
                 throw new BadRequestException("暂不支持的 MFA 认证的方式");

File: src/main/java/run/halo/app/controller/content/ContentIndexController.java
Patch:
@@ -32,8 +32,8 @@ public class ContentIndexController {
     private final PostModel postModel;
 
     public ContentIndexController(PostService postService,
-                                  OptionService optionService,
-                                  PostModel postModel) {
+            OptionService optionService,
+            PostModel postModel) {
         this.postService = postService;
         this.optionService = optionService;
         this.postModel = postModel;
@@ -69,7 +69,7 @@ public String index(Integer p, String token, Model model) {
      */
     @GetMapping(value = "page/{page}")
     public String index(Model model,
-                        @PathVariable(value = "page") Integer page) {
+            @PathVariable(value = "page") Integer page) {
         return postModel.list(page, model);
     }
 }

File: src/main/java/run/halo/app/controller/content/api/PhotoController.java
Patch:
@@ -45,7 +45,7 @@ public List<PhotoDTO> listPhotos(@SortDefault(sort = "updateTime", direction = S
 
     @GetMapping
     public Page<PhotoDTO> pageBy(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable,
-                                 PhotoQuery photoQuery) {
+            PhotoQuery photoQuery) {
         return photoService.pageDtosBy(pageable, photoQuery);
     }
 }

File: src/main/java/run/halo/app/controller/content/model/CategoryModel.java
Patch:
@@ -70,8 +70,8 @@ public String listPost(Model model, String slug, Integer page) {
         CategoryDTO categoryDTO = categoryService.convertTo(category);
 
         final Pageable pageable = PageRequest.of(page - 1,
-            optionService.getArchivesPageSize(),
-            Sort.by(DESC, "topPriority", "createTime"));
+                optionService.getArchivesPageSize(),
+                Sort.by(DESC, "topPriority", "createTime"));
         Page<Post> postPage = postCategoryService.pagePostBy(category.getId(), PostStatus.PUBLISHED, pageable);
         Page<PostListVO> posts = postService.convertToListVo(postPage);
 

File: src/main/java/run/halo/app/controller/content/model/JournalModel.java
Patch:
@@ -29,8 +29,8 @@ public class JournalModel {
     private final ThemeService themeService;
 
     public JournalModel(JournalService journalService,
-                        OptionService optionService,
-                        ThemeService themeService) {
+            OptionService optionService,
+            ThemeService themeService) {
         this.journalService = journalService;
         this.optionService = optionService;
         this.themeService = themeService;

File: src/main/java/run/halo/app/controller/content/model/LinkModel.java
Patch:
@@ -17,7 +17,7 @@ public class LinkModel {
     private final OptionService optionService;
 
     public LinkModel(ThemeService themeService,
-                     OptionService optionService) {
+            OptionService optionService) {
         this.themeService = themeService;
         this.optionService = optionService;
     }

File: src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java
Patch:
@@ -29,8 +29,8 @@ public class CategoryTagDirective implements TemplateDirectiveModel {
     private final PostCategoryService postCategoryService;
 
     public CategoryTagDirective(Configuration configuration,
-                                CategoryService categoryService,
-                                PostCategoryService postCategoryService) {
+            CategoryService categoryService,
+            PostCategoryService postCategoryService) {
         this.categoryService = categoryService;
         this.postCategoryService = postCategoryService;
         configuration.setSharedVariable("categoryTag", this);

File: src/main/java/run/halo/app/core/freemarker/tag/PostTagDirective.java
Patch:
@@ -30,9 +30,9 @@ public class PostTagDirective implements TemplateDirectiveModel {
     private final PostCategoryService postCategoryService;
 
     public PostTagDirective(Configuration configuration,
-                            PostService postService,
-                            PostTagService postTagService,
-                            PostCategoryService postCategoryService) {
+            PostService postService,
+            PostTagService postTagService,
+            PostCategoryService postCategoryService) {
         this.postService = postService;
         this.postTagService = postTagService;
         this.postCategoryService = postCategoryService;

File: src/main/java/run/halo/app/core/freemarker/tag/TagTagDirective.java
Patch:
@@ -29,8 +29,8 @@ public class TagTagDirective implements TemplateDirectiveModel {
     private final PostTagService postTagService;
 
     public TagTagDirective(Configuration configuration,
-                           TagService tagService,
-                           PostTagService postTagService) {
+            TagService tagService,
+            PostTagService postTagService) {
         this.tagService = tagService;
         this.postTagService = postTagService;
         configuration.setSharedVariable("tagTag", this);

File: src/main/java/run/halo/app/handler/file/FileHandlers.java
Patch:
@@ -61,7 +61,7 @@ public UploadResult upload(@NonNull MultipartFile file, @NonNull AttachmentType
     public void delete(@NonNull Attachment attachment) {
         Assert.notNull(attachment, "Attachment must not be null");
         getSupportedType(attachment.getType())
-            .delete(attachment.getFileKey());
+                .delete(attachment.getFileKey());
     }
 
     /**

File: src/main/java/run/halo/app/handler/file/LocalFileHandler.java
Patch:
@@ -60,7 +60,7 @@ public class LocalFileHandler implements FileHandler {
     ReentrantLock lock = new ReentrantLock();
 
     public LocalFileHandler(OptionService optionService,
-                            HaloProperties haloProperties) {
+            HaloProperties haloProperties) {
         this.optionService = optionService;
 
         // Get work dir

File: src/main/java/run/halo/app/handler/file/SmmsFileHandler.java
Patch:
@@ -57,7 +57,7 @@ public class SmmsFileHandler implements FileHandler {
     private final HttpHeaders headers = new HttpHeaders();
 
     public SmmsFileHandler(RestTemplate httpsRestTemplate,
-                           OptionService optionService) {
+            OptionService optionService) {
         this.httpsRestTemplate = httpsRestTemplate;
         this.optionService = optionService;
 

File: src/main/java/run/halo/app/mail/AbstractMailService.java
Patch:
@@ -107,9 +107,9 @@ protected void sendMailTemplate(@Nullable Callback callback) {
             mailSender.send(mimeMessage);
 
             log.info("Sent an email to [{}] successfully, subject: [{}], sent date: [{}]",
-                Arrays.toString(mimeMessage.getAllRecipients()),
-                mimeMessage.getSubject(),
-                mimeMessage.getSentDate());
+                    Arrays.toString(mimeMessage.getAllRecipients()),
+                    mimeMessage.getSubject(),
+                    mimeMessage.getSentDate());
         } catch (Exception e) {
             throw new EmailException("邮件发送失败，请检查 SMTP 服务配置是否正确", e);
         }

File: src/main/java/run/halo/app/mail/MailServiceImpl.java
Patch:
@@ -27,7 +27,7 @@ public class MailServiceImpl extends AbstractMailService implements ApplicationL
     private final FreeMarkerConfigurer freeMarker;
 
     public MailServiceImpl(FreeMarkerConfigurer freeMarker,
-                           OptionService optionService) {
+            OptionService optionService) {
         super(optionService);
         this.freeMarker = freeMarker;
     }

File: src/main/java/run/halo/app/model/entity/Attachment.java
Patch:
@@ -17,8 +17,8 @@
  */
 @Data
 @Entity
-@Table(name = "attachments",
-    indexes = {@Index(name = "attachments_media_type", columnList = "media_type"),
+@Table(name = "attachments", indexes = {
+        @Index(name = "attachments_media_type", columnList = "media_type"),
         @Index(name = "attachments_create_time", columnList = "create_time")})
 @ToString
 @EqualsAndHashCode(callSuper = true)

File: src/main/java/run/halo/app/model/entity/BaseComment.java
Patch:
@@ -19,8 +19,8 @@
  */
 @Data
 @Entity(name = "BaseComment")
-@Table(name = "comments",
-    indexes = {@Index(name = "comments_post_id", columnList = "post_id"),
+@Table(name = "comments", indexes = {
+        @Index(name = "comments_post_id", columnList = "post_id"),
         @Index(name = "comments_type_status", columnList = "type, status"),
         @Index(name = "comments_parent_id", columnList = "parent_id")})
 @DiscriminatorColumn(name = "type", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = "int default 0")

File: src/main/java/run/halo/app/model/entity/BasePost.java
Patch:
@@ -20,8 +20,8 @@
  */
 @Data
 @Entity(name = "BasePost")
-@Table(name = "posts",
-    indexes = {@Index(name = "posts_type_status", columnList = "type, status"),
+@Table(name = "posts", indexes = {
+        @Index(name = "posts_type_status", columnList = "type, status"),
         @Index(name = "posts_create_time", columnList = "create_time")})
 @DiscriminatorColumn(name = "type", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = "int default 0")
 @ToString(callSuper = true)

File: src/main/java/run/halo/app/model/entity/Category.java
Patch:
@@ -17,8 +17,8 @@
  */
 @Data
 @Entity
-@Table(name = "categories",
-    indexes = {@Index(name = "categories_name", columnList = "name"),
+@Table(name = "categories", indexes = {
+        @Index(name = "categories_name", columnList = "name"),
         @Index(name = "categories_parent_id", columnList = "parent_id")})
 @ToString
 @EqualsAndHashCode(callSuper = true)

File: src/main/java/run/halo/app/model/entity/Menu.java
Patch:
@@ -16,8 +16,8 @@
  */
 @Data
 @Entity
-@Table(name = "menus",
-    indexes = {@Index(name = "menus_parent_id", columnList = "parent_id"),
+@Table(name = "menus", indexes = {
+        @Index(name = "menus_parent_id", columnList = "parent_id"),
         @Index(name = "menus_name", columnList = "name")})
 @ToString
 @EqualsAndHashCode(callSuper = true)

File: src/main/java/run/halo/app/model/entity/Photo.java
Patch:
@@ -16,8 +16,8 @@
  */
 @Data
 @Entity
-@Table(name = "photos",
-    indexes = {@Index(name = "photos_team", columnList = "team"),
+@Table(name = "photos", indexes = {
+        @Index(name = "photos_team", columnList = "team"),
         @Index(name = "photos_create_time", columnList = "create_time")})
 @ToString
 @EqualsAndHashCode(callSuper = true)

File: src/main/java/run/halo/app/model/entity/PostCategory.java
Patch:
@@ -19,8 +19,8 @@
 @ToString(callSuper = true)
 @RequiredArgsConstructor
 @Entity
-@Table(name = "post_categories",
-    indexes = {@Index(name = "post_categories_post_id", columnList = "post_id"),
+@Table(name = "post_categories", indexes = {
+        @Index(name = "post_categories_post_id", columnList = "post_id"),
         @Index(name = "post_categories_category_id", columnList = "category_id")})
 public class PostCategory extends BaseEntity {
 
@@ -51,7 +51,7 @@ public boolean equals(Object o) {
         }
         PostCategory that = (PostCategory) o;
         return categoryId.equals(that.categoryId) &&
-            postId.equals(that.postId);
+                postId.equals(that.postId);
     }
 
     @Override

File: src/main/java/run/halo/app/model/entity/PostTag.java
Patch:
@@ -20,8 +20,8 @@
 @ToString(callSuper = true)
 @RequiredArgsConstructor
 @Entity
-@Table(name = "post_tags",
-    indexes = {@Index(name = "post_tags_post_id", columnList = "post_id"),
+@Table(name = "post_tags", indexes = {
+        @Index(name = "post_tags_post_id", columnList = "post_id"),
         @Index(name = "post_tags_tag_id", columnList = "tag_id")})
 public class PostTag extends BaseEntity {
 
@@ -52,7 +52,7 @@ public boolean equals(Object o) {
         }
         PostTag postTag = (PostTag) o;
         return Objects.equals(postId, postTag.postId) &&
-            Objects.equals(tagId, postTag.tagId);
+                Objects.equals(tagId, postTag.tagId);
     }
 
     @Override

File: src/main/java/run/halo/app/model/entity/ThemeSetting.java
Patch:
@@ -15,8 +15,8 @@
  */
 @Data
 @Entity
-@Table(name = "theme_settings",
-    indexes = {@Index(name = "theme_settings_setting_key", columnList = "setting_key"),
+@Table(name = "theme_settings", indexes = {
+        @Index(name = "theme_settings_setting_key", columnList = "setting_key"),
         @Index(name = "theme_settings_theme_id", columnList = "theme_id")})
 @ToString(callSuper = true)
 @EqualsAndHashCode(callSuper = true)

File: src/main/java/run/halo/app/model/enums/ValueEnum.java
Patch:
@@ -27,9 +27,9 @@ static <V, E extends ValueEnum<V>> E valueToEnum(Class<E> enumType, V value) {
         Assert.isTrue(enumType.isEnum(), "type must be an enum type");
 
         return Stream.of(enumType.getEnumConstants())
-            .filter(item -> item.getValue().equals(value))
-            .findFirst()
-            .orElseThrow(() -> new IllegalArgumentException("unknown database value: " + value));
+                .filter(item -> item.getValue().equals(value))
+                .findFirst()
+                .orElseThrow(() -> new IllegalArgumentException("unknown database value: " + value));
     }
 
     /**

File: src/main/java/run/halo/app/model/properties/SheetProperties.java
Patch:
@@ -1,5 +1,7 @@
 package run.halo.app.model.properties;
 
+import org.springframework.lang.NonNull;
+
 /**
  * Sheet properties.
  *
@@ -56,6 +58,7 @@ public Class<?> getType() {
     }
 
     @Override
+    @NonNull
     public String defaultValue() {
         return defaultValue;
     }

File: src/main/java/run/halo/app/repository/base/BaseRepositoryImpl.java
Patch:
@@ -113,8 +113,8 @@ public Page<DOMAIN> findAllByIdIn(Collection<ID> ids, Pageable pageable) {
         TypedQuery<Long> countQuery = getCountQuery(specification, getDomainClass()).setParameter(specification.parameter, ids);
 
         return pageable.isUnpaged() ?
-            new PageImpl<>(query.getResultList())
-            : readPage(query, getDomainClass(), pageable, countQuery);
+                new PageImpl<>(query.getResultList())
+                : readPage(query, getDomainClass(), pageable, countQuery);
     }
 
     /**
@@ -146,7 +146,7 @@ protected <S extends DOMAIN> Page<S> readPage(TypedQuery<S> query, Class<S> doma
         }
 
         return PageableExecutionUtils.getPage(query.getResultList(), pageable,
-            () -> executeCountQuery(countQuery));
+                () -> executeCountQuery(countQuery));
     }
 
     private static final class ByIdsSpecification<T> implements Specification<T> {

File: src/main/java/run/halo/app/security/resolver/AuthenticationArgumentResolver.java
Patch:
@@ -32,8 +32,8 @@ public AuthenticationArgumentResolver() {
     public boolean supportsParameter(MethodParameter parameter) {
         Class<?> parameterType = parameter.getParameterType();
         return Authentication.class.isAssignableFrom(parameterType)
-            || UserDetail.class.isAssignableFrom(parameterType)
-            || User.class.isAssignableFrom(parameterType);
+                || UserDetail.class.isAssignableFrom(parameterType)
+                || User.class.isAssignableFrom(parameterType);
     }
 
     @Override
@@ -44,7 +44,7 @@ public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewC
         Class<?> parameterType = parameter.getParameterType();
 
         Authentication authentication = Optional.ofNullable(SecurityContextHolder.getContext().getAuthentication())
-            .orElseThrow(() -> new AuthenticationException("You haven't signed in yet"));
+                .orElseThrow(() -> new AuthenticationException("You haven't signed in yet"));
 
         if (Authentication.class.isAssignableFrom(parameterType)) {
             return authentication;

File: src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java
Patch:
@@ -47,8 +47,8 @@ public class AttachmentServiceImpl extends AbstractCrudService<Attachment, Integ
     private final FileHandlers fileHandlers;
 
     public AttachmentServiceImpl(AttachmentRepository attachmentRepository,
-                                 OptionService optionService,
-                                 FileHandlers fileHandlers) {
+            OptionService optionService,
+            FileHandlers fileHandlers) {
         super(attachmentRepository);
         this.attachmentRepository = attachmentRepository;
         this.optionService = optionService;

File: src/main/java/run/halo/app/service/impl/PostMetaServiceImpl.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.service.impl;
 
 import lombok.extern.slf4j.Slf4j;
+import org.jetbrains.annotations.NotNull;
 import org.springframework.stereotype.Service;
 import run.halo.app.exception.NotFoundException;
 import run.halo.app.model.entity.PostMeta;
@@ -28,8 +29,8 @@ public PostMetaServiceImpl(BaseMetaRepository<PostMeta> baseMetaRepository, Post
     }
 
     @Override
-    public void validateTarget(Integer postId) {
+    public void validateTarget(@NotNull Integer postId) {
         postRepository.findById(postId)
-            .orElseThrow(() -> new NotFoundException("查询不到该文章的信息").setErrorData(postId));
+                .orElseThrow(() -> new NotFoundException("查询不到该文章的信息").setErrorData(postId));
     }
 }

File: src/main/java/run/halo/app/service/impl/StaticStorageServiceImpl.java
Patch:
@@ -45,7 +45,7 @@ public class StaticStorageServiceImpl implements StaticStorageService, Applicati
     private final ApplicationEventPublisher eventPublisher;
 
     public StaticStorageServiceImpl(HaloProperties haloProperties,
-                                    ApplicationEventPublisher eventPublisher) throws IOException {
+            ApplicationEventPublisher eventPublisher) throws IOException {
         staticDir = Paths.get(haloProperties.getWorkDir(), STATIC_FOLDER);
         this.eventPublisher = eventPublisher;
         FileUtils.createIfAbsent(staticDir);

File: src/main/java/run/halo/app/service/impl/UserServiceImpl.java
Patch:
@@ -47,8 +47,8 @@ public class UserServiceImpl extends AbstractCrudService<User, Integer> implemen
     private final ApplicationEventPublisher eventPublisher;
 
     public UserServiceImpl(UserRepository userRepository,
-                           AbstractStringCacheStore stringCacheStore,
-                           ApplicationEventPublisher eventPublisher) {
+            AbstractStringCacheStore stringCacheStore,
+            ApplicationEventPublisher eventPublisher) {
         super(userRepository);
         this.userRepository = userRepository;
         this.stringCacheStore = stringCacheStore;

File: src/main/java/run/halo/app/utils/BeanUtils.java
Patch:
@@ -69,8 +69,8 @@ public static <T> List<T> transformFromInBatch(Collection<?> sources, @NonNull C
 
         // Transform in batch
         return sources.stream()
-            .map(source -> transformFrom(source, targetClass))
-            .collect(Collectors.toList());
+                .map(source -> transformFrom(source, targetClass))
+                .collect(Collectors.toList());
     }
 
     /**

File: src/main/java/run/halo/app/utils/DateTimeUtils.java
Patch:
@@ -19,9 +19,9 @@ public class DateTimeUtils {
      * 标准日期格式 {@link DateTimeFormatter}：yyyyMMddHHmmssSSS
      */
     public static final DateTimeFormatter PURE_DATETIME_MS_FORMATTER = new DateTimeFormatterBuilder()
-        .appendPattern(PURE_DATETIME_PATTERN)
-        .appendValue(ChronoField.MILLI_OF_SECOND, 3)
-        .toFormatter();
+            .appendPattern(PURE_DATETIME_PATTERN)
+            .appendValue(ChronoField.MILLI_OF_SECOND, 3)
+            .toFormatter();
     /**
      * 标准日期格式 {@link DateTimeFormatter}：yyyyMMdd
      */

File: src/main/java/run/halo/app/utils/FileUtils.java
Patch:
@@ -73,7 +73,7 @@ public static void deleteFolder(@NonNull Path deletingPath) throws IOException {
 
         // Delete folder recursively
         org.eclipse.jgit.util.FileUtils.delete(deletingPath.toFile(),
-            org.eclipse.jgit.util.FileUtils.RECURSIVE | org.eclipse.jgit.util.FileUtils.RETRY);
+                org.eclipse.jgit.util.FileUtils.RECURSIVE | org.eclipse.jgit.util.FileUtils.RETRY);
 
         log.info("Deleted [{}] successfully", deletingPath);
     }

File: src/main/java/run/halo/app/utils/HaloUtils.java
Patch:
@@ -245,7 +245,7 @@ public static String normalizeUrl(@NonNull String originalUrl) {
         Assert.hasText(originalUrl, "Original Url must not be blank");
 
         if (StringUtils.startsWithAny(originalUrl, URL_SEPARATOR, HaloConst.PROTOCOL_HTTPS, HaloConst.PROTOCOL_HTTP)
-            && !StringUtils.startsWith(originalUrl, "//")) {
+                && !StringUtils.startsWith(originalUrl, "//")) {
             return originalUrl;
         }
 

File: src/main/java/run/halo/app/utils/ServiceUtils.java
Patch:
@@ -32,8 +32,8 @@ private ServiceUtils() {
     @NonNull
     public static <ID, T> Set<ID> fetchProperty(final Collection<T> datas, Function<T, ID> mappingFunction) {
         return CollectionUtils.isEmpty(datas) ?
-            Collections.emptySet() :
-            datas.stream().map(mappingFunction).collect(Collectors.toSet());
+                Collections.emptySet() :
+                datas.stream().map(mappingFunction).collect(Collectors.toSet());
     }
 
     /**

File: src/main/java/run/halo/app/utils/ServletUtils.java
Patch:
@@ -28,9 +28,9 @@ private ServletUtils() {
     @NonNull
     public static Optional<HttpServletRequest> getCurrentRequest() {
         return Optional.ofNullable(RequestContextHolder.getRequestAttributes())
-            .filter(requestAttributes -> requestAttributes instanceof ServletRequestAttributes)
-            .map(requestAttributes -> (ServletRequestAttributes) requestAttributes)
-            .map(ServletRequestAttributes::getRequest);
+                .filter(requestAttributes -> requestAttributes instanceof ServletRequestAttributes)
+                .map(requestAttributes -> (ServletRequestAttributes) requestAttributes)
+                .map(ServletRequestAttributes::getRequest);
     }
 
     /**

File: src/main/java/run/halo/app/utils/ValidationUtils.java
Patch:
@@ -115,8 +115,7 @@ public static Map<String, String> mapWithValidError(Set<ConstraintViolation<?>>
 
         Map<String, String> errMap = new HashMap<>(4);
         // Format the error message
-        constraintViolations.forEach(
-            constraintViolation ->
+        constraintViolations.forEach(constraintViolation ->
                 errMap.put(constraintViolation.getPropertyPath().toString(), constraintViolation.getMessage()));
         return errMap;
     }

File: src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java
Patch:
@@ -86,7 +86,7 @@ void getQiniuZoneTest(Zone actualZone, Option option) {
         QiniuOssProperties zoneProperty = QiniuOssProperties.OSS_ZONE;
 
         // Given
-//        given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));
+        // given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));
         Map<String, Object> optionMap = new HashMap<>(1);
         optionMap.put(zoneProperty.getValue(), Optional.ofNullable(option).map(Option::getValue).orElse(null));
         given(cacheStore.getAny(OptionService.OPTIONS_KEY, Map.class)).willReturn(Optional.of(optionMap));

File: src/test/java/run/halo/app/utils/DirectoryAttackTest.java
Patch:
@@ -80,6 +80,6 @@ void traversalTestWhenSuccess() {
     @Test
     void traversalTestWhenFailure() {
         assertThrows(ForbiddenException.class,
-            () -> FileUtils.checkDirectoryTraversal("/etc/", "/etc/../tmp"));
+                () -> FileUtils.checkDirectoryTraversal("/etc/", "/etc/../tmp"));
     }
 }

File: src/test/java/run/halo/app/utils/GithubTest.java
Patch:
@@ -58,8 +58,8 @@ void getLatestReleaseTest() throws Throwable {
                 Object name = aAssetMap.getOrDefault("name", "");
                 return name.toString().matches(HALO_ADMIN_REGEX);
             })
-                .findFirst()
-                .orElseThrow(() -> new BadRequestException("Halo admin has no assets available"));
+                    .findFirst()
+                    .orElseThrow(() -> new BadRequestException("Halo admin has no assets available"));
 
             Object name = assetMap.getOrDefault("name", "");
             Object browserDownloadUrl = assetMap.getOrDefault("browser_download_url", "");

File: src/test/java/run/halo/app/utils/HttpClientUtilsTest.java
Patch:
@@ -25,10 +25,10 @@ void resolveHttpProxyTest() throws Exception {
         assertEquals(result.get(0), "https://127.0.0.1:123");
 
         result = (Tuple) resolveHttpProxy.invoke(null, "https://u:p@127.0.0.1:123");
-        assertArrayEquals(result.getMembers(), new Object[]{"https://127.0.0.1:123", "u", "p"});
+        assertArrayEquals(result.getMembers(), new Object[] {"https://127.0.0.1:123", "u", "p"});
 
         result = (Tuple) resolveHttpProxy.invoke(null, "https://u@127.0.0.1");
-        assertArrayEquals(result.getMembers(), new Object[]{"https://127.0.0.1:443", "u", null});
+        assertArrayEquals(result.getMembers(), new Object[] {"https://127.0.0.1:443", "u", null});
     }
 
 }

File: src/test/java/run/halo/app/utils/VersionUtilTest.java
Patch:
@@ -26,9 +26,9 @@ void compareVersion() {
     void unknownVersionCompareTest() {
         // build a random version
         String randomVersion = String.join(".",
-            RandomStringUtils.randomNumeric(1),
-            RandomStringUtils.randomNumeric(2),
-            RandomStringUtils.randomNumeric(3));
+                RandomStringUtils.randomNumeric(1),
+                RandomStringUtils.randomNumeric(2),
+                RandomStringUtils.randomNumeric(3));
         VersionUtil.compareVersion(HaloConst.UNKNOWN_VERSION, randomVersion);
     }
 

File: src/main/java/run/halo/app/service/ThemeService.java
Patch:
@@ -343,7 +343,7 @@ public interface ThemeService {
     /**
      * Fetches a specific release
      *
-     * @param uri theme remote uri must not be null
+     * @param uri     theme remote uri must not be null
      * @param tagName release tag name must not be null
      * @return theme property
      */
@@ -353,7 +353,7 @@ public interface ThemeService {
     /**
      * Fetches a specific branch (clone)
      *
-     * @param uri theme remote uri must not be null
+     * @param uri        theme remote uri must not be null
      * @param branchName wanted branch must not be null
      * @return theme property
      */

File: src/main/java/run/halo/app/service/impl/LinkServiceImpl.java
Patch:
@@ -131,6 +131,6 @@ private List<LinkDTO> convertTo(@Nullable List<Link> links) {
         }
 
         return links.stream().map(link -> (LinkDTO) new LinkDTO().convertFrom(link))
-                .collect(Collectors.toList());
+            .collect(Collectors.toList());
     }
 }

File: src/main/java/run/halo/app/theme/ThemePropertyScanner.java
Patch:
@@ -34,17 +34,15 @@ public enum ThemePropertyScanner {
 
     INSTANCE;
 
-    private final ThemePropertyResolver propertyResolver = new YamlThemePropertyResolver();
-
     /**
      * Theme property file name.
      */
     private static final String[] THEME_PROPERTY_FILE_NAMES = {"theme.yaml", "theme.yml"};
-
     /**
      * Theme screenshots name.
      */
     private static final String THEME_SCREENSHOTS_NAME = "screenshot";
+    private final ThemePropertyResolver propertyResolver = new YamlThemePropertyResolver();
 
     /**
      * Scan theme properties.

File: src/main/java/run/halo/app/utils/FileUtils.java
Patch:
@@ -137,8 +137,8 @@ public static void unzip(@NonNull ZipInputStream zis, @NonNull Path targetPath)
         // if zip file has root file
         if (files.size() == 1 && files.get(0).isDirectory()) {
             String rootPath = files.get(0).toPath().toString();
-            String rootFile = rootPath.substring(rootPath.lastIndexOf("/", rootPath.length() - 1) + 1,rootPath.length());
-            List<File> propertyFiles = Arrays.asList(files.get(0).listFiles());
+            String rootFile = rootPath.substring(rootPath.lastIndexOf("/") + 1);
+            File[] propertyFiles = files.get(0).listFiles();
             for (File propertyFile : propertyFiles) {
                 String filePath = propertyFile.toPath().toString();
                 String destPath = filePath.replace(rootFile, "");

File: src/main/java/run/halo/app/utils/TwoFactorAuthUtils.java
Patch:
@@ -86,7 +86,7 @@ class TimeBasedOneTimePasswordUtil {
     /**
      * set to the number of digits to control 0 prefix, set to 0 for no prefix
      */
-    private static int NUM_DIGITS_OUTPUT = 6;
+    private static final int NUM_DIGITS_OUTPUT = 6;
 
     static {
         char[] chars = new char[NUM_DIGITS_OUTPUT];

File: src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java
Patch:
@@ -52,7 +52,7 @@ public abstract class BasePostServiceImpl<POST extends BasePost> extends Abstrac
 
     private final OptionService optionService;
 
-    private final Pattern summaryPattern = Pattern.compile("\\s*|\t|\r|\n");
+    private final Pattern summaryPattern = Pattern.compile("\t|\r|\n");
 
     public BasePostServiceImpl(BasePostRepository<POST> basePostRepository,
                                OptionService optionService) {

File: src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java
Patch:
@@ -534,7 +534,7 @@ private void generateCategory(int page, Category category) throws IOException, T
      * Generate tags/{slug}/index.html and tags/{slug}/{page}/index.html.
      *
      * @param page     current page
-     * @param category current category
+     * @param tag      current tag
      * @throws IOException       IOException
      * @throws TemplateException TemplateException
      */

File: src/main/java/run/halo/app/config/HaloConfiguration.java
Patch:
@@ -68,7 +68,7 @@ public AbstractStringCacheStore stringCacheStore() {
                 break;
 
         }
-        log.info("halo cache store load impl : [{}]", stringCacheStore.getClass());
+        log.info("Halo cache store load impl : [{}]", stringCacheStore.getClass());
         return stringCacheStore;
 
     }

File: src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java
Patch:
@@ -32,7 +32,8 @@
 import java.util.Objects;
 
 import static run.halo.app.handler.file.FileHandler.isImageType;
-import static run.halo.app.model.support.HaloConst.URL_SEPARATOR;
+import static run.halo.app.model.support.HaloConst.*;
+import static run.halo.app.utils.HaloUtils.ensureSuffix;
 
 /**
  * Qiniu oss file handler.
@@ -78,7 +79,7 @@ public UploadResult upload(MultipartFile file) {
         String uploadToken = auth.uploadToken(bucket, null, 60 * 60, putPolicy);
 
         // Create temp path
-        Path tmpPath = Paths.get(System.getProperty("java.io.tmpdir"), bucket);
+        Path tmpPath = Paths.get(ensureSuffix(TEMP_DIR, FILE_SEPARATOR), bucket);
 
         StringBuilder basePath = new StringBuilder(protocol)
             .append(domain)

File: src/main/java/run/halo/app/model/support/HaloConst.java
Patch:
@@ -23,7 +23,7 @@ public class HaloConst {
     /**
      * Temporary directory.
      */
-    public final static String TEMP_DIR = System.getProperties().getProperty("java.io.tmpdir");
+    public final static String TEMP_DIR = "/tmp/run.halo.app";
 
     public final static String PROTOCOL_HTTPS = "https://";
 

File: src/main/java/run/halo/app/controller/content/api/PostController.java
Patch:
@@ -83,6 +83,8 @@ public PostDetailVO getBy(@PathVariable("postId") Integer postId,
             postDetailVO.setOriginalContent(null);
         }
 
+        postService.publishVisitEvent(postDetailVO.getId());
+
         return postDetailVO;
     }
 

File: src/main/java/run/halo/app/controller/content/api/SheetController.java
Patch:
@@ -73,6 +73,8 @@ public SheetDetailVO getBy(@PathVariable("sheetId") Integer sheetId,
             sheetDetailVO.setOriginalContent(null);
         }
 
+        sheetService.publishVisitEvent(sheetDetailVO.getId());
+
         return sheetDetailVO;
     }
 

File: src/main/java/run/halo/app/security/handler/DefaultAuthenticationFailureHandler.java
Patch:
@@ -10,7 +10,6 @@
 import run.halo.app.utils.ExceptionUtils;
 import run.halo.app.utils.JsonUtils;
 
-import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
@@ -32,9 +31,9 @@ public DefaultAuthenticationFailureHandler() {
     }
 
     @Override
-    public void onFailure(HttpServletRequest request, HttpServletResponse response, AbstractHaloException exception) throws IOException, ServletException {
+    public void onFailure(HttpServletRequest request, HttpServletResponse response, AbstractHaloException exception) throws IOException {
         log.warn("Handle unsuccessful authentication, ip: [{}]", ServletUtil.getClientIP(request));
-        log.error("Authentication failure", exception);
+        log.error("Authentication failure: [{}], status: [{}], data: [{}]", exception.getMessage(), exception.getStatus(), exception.getErrorData());
 
         BaseResponse<Object> errorDetail = new BaseResponse<>();
 

File: src/main/java/run/halo/app/handler/file/LocalFileHandler.java
Patch:
@@ -187,7 +187,7 @@ public void delete(String key) {
 
         // Delete the file key
         try {
-            Files.delete(path);
+            Files.deleteIfExists(path);
         } catch (IOException e) {
             throw new FileOperationException("附件 " + key + " 删除失败", e);
         }

File: src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java
Patch:
@@ -5,7 +5,7 @@
 import org.junit.runner.RunWith;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
-import org.mockito.junit.MockitoJUnitRunner;
+import org.mockito.runners.MockitoJUnitRunner;
 import run.halo.app.cache.AbstractStringCacheStore;
 import run.halo.app.model.entity.Option;
 import run.halo.app.model.properties.QiniuOssProperties;

File: src/main/java/run/halo/app/listener/StartedListener.java
Patch:
@@ -74,7 +74,6 @@ public void onApplicationEvent(ApplicationStartedEvent event) {
 
     private void printStartInfo() {
         String blogUrl = optionService.getBlogBaseUrl();
-
         log.info(AnsiOutput.toString(AnsiColor.BRIGHT_BLUE, "Halo started at         ", blogUrl));
         log.info(AnsiOutput.toString(AnsiColor.BRIGHT_BLUE, "Halo admin started at   ", blogUrl, "/", haloProperties.getAdminPath()));
         if (!haloProperties.isDocDisabled()) {
@@ -149,7 +148,7 @@ private void initThemes() {
                 log.debug("Skipped copying theme folder due to existence of theme folder");
             }
         } catch (Exception e) {
-            throw new RuntimeException("Initialize internal theme to user path error", e);
+            log.error("Initialize internal theme to user path error!", e);
         }
     }
 
@@ -188,7 +187,6 @@ private void initDirectory() {
                 Files.createDirectories(dataExportPath);
                 log.info("Created data export directory: [{}]", dataExportPath);
             }
-
         } catch (IOException ie) {
             throw new RuntimeException("Failed to initialize directories", ie);
         }

File: src/main/java/run/halo/app/cache/AbstractStringCacheStore.java
Patch:
@@ -25,7 +25,7 @@ protected Optional<CacheWrapper<String>> jsonToCacheWrapper(String json) {
             cacheWrapper = JsonUtils.jsonToObject(json, CacheWrapper.class);
         } catch (IOException e) {
             e.printStackTrace();
-            log.debug("erro json to wrapper value bytes: [{}]", json, e);
+            log.debug("Failed to convert json to wrapper value bytes: [{}]", json, e);
         }
         return Optional.ofNullable(cacheWrapper);
     }

File: src/main/java/run/halo/app/listener/StartedListener.java
Patch:
@@ -65,7 +65,7 @@ public void onApplicationEvent(ApplicationStartedEvent event) {
         try {
             this.migrate();
         } catch (SQLException e) {
-            e.printStackTrace();
+            log.error("Failed to migrate database!", e);
         }
         this.initThemes();
         this.initDirectory();

File: src/main/java/run/halo/app/repository/base/BaseRepositoryImpl.java
Patch:
@@ -12,6 +12,7 @@
 import org.springframework.lang.Nullable;
 import org.springframework.transaction.annotation.Transactional;
 import org.springframework.util.Assert;
+import run.halo.app.annotation.SensitiveConceal;
 
 import javax.persistence.EntityManager;
 import javax.persistence.TypedQuery;
@@ -71,6 +72,7 @@ private static long executeCountQuery(TypedQuery<Long> query) {
      * @return a list of domains
      */
     @Override
+    @SensitiveConceal
     public List<DOMAIN> findAllByIdIn(Collection<ID> ids, Sort sort) {
         Assert.notNull(ids, "The given Collection of Id's must not be null!");
         Assert.notNull(sort, "Sort info must nto be null");
@@ -93,6 +95,7 @@ public List<DOMAIN> findAllByIdIn(Collection<ID> ids, Sort sort) {
     }
 
     @Override
+    @SensitiveConceal
     public Page<DOMAIN> findAllByIdIn(Collection<ID> ids, Pageable pageable) {
         Assert.notNull(ids, "The given Collection of Id's must not be null!");
         Assert.notNull(pageable, "Page info must nto be null");

File: src/main/java/run/halo/app/service/base/BaseCommentService.java
Patch:
@@ -287,20 +287,23 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer
      *
      * @param comment comment dto must not be null
      */
+    @Deprecated
     <T extends BaseCommentDTO> T filterIpAddress(@NonNull T comment);
 
     /**
      * Filters comment ip address.
      *
      * @param comments comment dto list
      */
+    @Deprecated
     <T extends BaseCommentDTO> List<T> filterIpAddress(@Nullable List<T> comments);
 
     /**
      * Filters comment ip address.
      *
      * @param commentPage comment page
      */
+    @Deprecated
     <T extends BaseCommentDTO> Page<T> filterIpAddress(@NonNull Page<T> commentPage);
 
     /**

File: src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java
Patch:
@@ -564,6 +564,7 @@ public List<COMMENT> listChildrenBy(Integer targetId, Long commentParentId, Sort
     }
 
     @Override
+    @Deprecated
     public <T extends BaseCommentDTO> T filterIpAddress(@NonNull T comment) {
         Assert.notNull(comment, "Base comment dto must not be null");
 
@@ -592,6 +593,7 @@ public <T extends BaseCommentDTO> T filterIpAddress(@NonNull T comment) {
     }
 
     @Override
+    @Deprecated
     public <T extends BaseCommentDTO> List<T> filterIpAddress(List<T> comments) {
         if (CollectionUtils.isEmpty(comments)) {
             return Collections.emptyList();
@@ -603,6 +605,7 @@ public <T extends BaseCommentDTO> List<T> filterIpAddress(List<T> comments) {
     }
 
     @Override
+    @Deprecated
     public <T extends BaseCommentDTO> Page<T> filterIpAddress(Page<T> commentPage) {
         Assert.notNull(commentPage, "Comment page must not be null");
         commentPage.forEach(this::filterIpAddress);

File: src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java
Patch:
@@ -107,6 +107,7 @@ private void loadOptionsConfig() throws TemplateModelException {
         configuration.setSharedVariable("context", context);
         configuration.setSharedVariable("version", HaloConst.HALO_VERSION);
 
+        configuration.setSharedVariable("globalAbsolutePathEnabled", optionService.isEnabledAbsolutePath());
         configuration.setSharedVariable("blog_title", optionService.getBlogTitle());
         configuration.setSharedVariable("blog_url", optionService.getBlogBaseUrl());
         configuration.setSharedVariable("blog_logo", optionService.getByPropertyOrDefault(BlogProperties.BLOG_LOGO, String.class, BlogProperties.BLOG_LOGO.defaultValue()));

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -106,7 +106,7 @@ public ThemeServiceImpl(HaloProperties haloProperties,
         Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(() -> {
             try {
                 String newActivatedThemeId = optionService.getByPropertyOrDefault(PrimaryProperties.THEME, String.class, DEFAULT_THEME_ID);
-                if (newActivatedThemeId != activatedThemeId) {
+                if (!activatedThemeId.equals(newActivatedThemeId)) {
                     activateTheme(newActivatedThemeId);
                 }
             } catch (Exception e) {

File: src/main/java/run/halo/app/handler/migrate/support/wordpress/Item.java
Patch:
@@ -3,7 +3,6 @@
 import com.alibaba.fastjson.annotation.JSONField;
 import lombok.Data;
 import run.halo.app.handler.migrate.utils.PropertyMappingTo;
-import run.halo.app.model.entity.BasePost;
 
 import java.util.List;
 

File: src/main/java/run/halo/app/model/support/HaloConst.java
Patch:
@@ -143,5 +143,4 @@ public class HaloConst {
      * Version constant.
      */
     public static String HALO_VERSION = null;
-
 }

File: src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java
Patch:
@@ -35,6 +35,7 @@
 import run.halo.app.model.vo.PostListVO;
 import run.halo.app.model.vo.SheetDetailVO;
 import run.halo.app.service.*;
+import run.halo.app.utils.DateTimeUtils;
 import run.halo.app.utils.FileUtils;
 
 import java.io.File;
@@ -46,7 +47,6 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.time.LocalDateTime;
-import java.time.format.DateTimeFormatter;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.stream.Stream;
@@ -168,8 +168,8 @@ public void deploy() {
     public Path zipStaticPagesDirectory() {
         try {
             String staticPagePackName = HaloConst.STATIC_PAGE_PACK_PREFIX +
-                LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd-HH-mm-ss-")) +
-                IdUtil.simpleUUID().hashCode() + ".zip";
+                    DateTimeUtils.format(LocalDateTime.now(), DateTimeUtils.HORIZONTAL_LINE_DATETIME_FORMATTER) +
+                    IdUtil.simpleUUID().hashCode() + ".zip";
             Path staticPageZipPath = Files.createFile(Paths.get(STATIC_PAGE_PACK_DIR, staticPagePackName));
 
             FileUtils.zip(pagesDir, staticPageZipPath);

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -81,12 +81,12 @@ public class ThemeServiceImpl implements ThemeService {
     /**
      * Activated theme id.
      */
-    private String activatedThemeId;
+    private volatile String activatedThemeId;
 
     /**
      * Activated theme property.
      */
-    private ThemeProperty activatedTheme;
+    private volatile ThemeProperty activatedTheme;
 
     public ThemeServiceImpl(HaloProperties haloProperties,
                             OptionService optionService,

File: src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java
Patch:
@@ -113,8 +113,8 @@ private List<Item> handleItems(@Nullable Object items) {
                 item.setName(itemMap.get("name").toString());
                 item.setLabel(itemMap.getOrDefault("label", item.getName()).toString());
                 Object dataType = itemMap.getOrDefault("data-type", itemMap.get("dataType"));
-                item.setDataType(DataType.typeOf(dataType));
                 item.setType(InputType.typeOf(itemMap.get("type")));
+                item.setDataType(item.getType().equals(InputType.SWITCH) ? DataType.BOOL : DataType.typeOf(dataType));
                 item.setDefaultValue(itemMap.get("default"));
                 item.setPlaceholder(itemMap.getOrDefault("placeholder", "").toString());
                 item.setDescription(itemMap.getOrDefault("description", "").toString());
@@ -140,8 +140,8 @@ private List<Item> handleItems(@Nullable Object items) {
                 item.setName(key.toString());
                 item.setLabel(itemMap.getOrDefault("label", item.getName()).toString());
                 Object dataType = itemMap.getOrDefault("data-type", itemMap.get("dataType"));
-                item.setDataType(DataType.typeOf(dataType));
                 item.setType(InputType.typeOf(itemMap.get("type")));
+                item.setDataType(item.getType().equals(InputType.SWITCH) ? DataType.BOOL : DataType.typeOf(dataType));
                 item.setDefaultValue(itemMap.get("default"));
                 item.setPlaceholder(itemMap.getOrDefault("placeholder", "").toString());
                 item.setDescription(itemMap.getOrDefault("description", "").toString());

File: src/main/java/run/halo/app/model/entity/Attachment.java
Patch:
@@ -17,7 +17,7 @@
  */
 @Data
 @Entity
-@Table(name = "attachments")
+@Table(name = "attachments", indexes = {@Index(name = "attachments_media_type", columnList = "media_type")})
 @ToString
 @EqualsAndHashCode(callSuper = true)
 public class Attachment extends BaseEntity {

File: src/main/java/run/halo/app/security/filter/ContentFilter.java
Patch:
@@ -31,6 +31,8 @@ public ContentFilter(HaloProperties haloProperties,
                          OneTimeTokenService oneTimeTokenService) {
         super(haloProperties, optionService, cacheStore, oneTimeTokenService);
 
+        addUrlPatterns("/**");
+
         String adminPattern = HaloUtils.ensureBoth(haloProperties.getAdminPath(), "/") + "**";
         addExcludeUrlPatterns(
             adminPattern,

File: src/main/java/run/halo/app/service/impl/StatisticServiceImpl.java
Patch:
@@ -68,7 +68,7 @@ public StatisticServiceImpl(PostService postService,
     @Override
     public StatisticDTO getStatistic() {
         StatisticDTO statisticDTO = new StatisticDTO();
-        statisticDTO.setPostCount(postService.countByStatus(PostStatus.PUBLISHED) + sheetService.countByStatus(PostStatus.PUBLISHED));
+        statisticDTO.setPostCount(postService.countByStatus(PostStatus.PUBLISHED));
 
         // Handle comment count
         long postCommentCount = postCommentService.countByStatus(CommentStatus.PUBLISHED);

File: src/main/java/run/halo/app/handler/migrate/converter/WordPressConverter.java
Patch:
@@ -9,7 +9,6 @@
 import run.halo.app.model.entity.BasePost;
 import run.halo.app.model.entity.Category;
 import run.halo.app.model.entity.Tag;
-import run.halo.app.utils.MarkdownUtils;
 
 import java.util.ArrayList;
 import java.util.Date;
@@ -129,7 +128,7 @@ private BasePost getBasePostFromItem(Item item) {
         BasePost post = RelationMapperUtils.convertFrom(item, BasePost.class);
         Date postDate = DateUtil.parseDateTime(item.getPostDate());
         if (StringUtils.isNoneEmpty(post.getFormatContent())) {
-            post.setOriginalContent(MarkdownUtils.renderMarkdown(post.getFormatContent()));
+            post.setOriginalContent(post.getFormatContent());
         }
         post.setCreateTime(postDate);
         post.setUpdateTime(postDate);

File: src/main/java/run/halo/app/controller/admin/api/DataProcessController.java
Patch:
@@ -1,7 +1,9 @@
 package run.halo.app.controller.admin.api;
 
 import io.swagger.annotations.ApiOperation;
-import org.springframework.web.bind.annotation.*;
+import org.springframework.web.bind.annotation.DeleteMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
 import run.halo.app.service.DataProcessService;
 import run.halo.app.service.ThemeSettingService;
 

File: src/main/java/run/halo/app/model/dto/BackupDTO.java
Patch:
@@ -9,9 +9,6 @@
 @Data
 public class BackupDTO {
 
-    @Deprecated
-    private String downloadUrl;
-
     private String downloadLink;
 
     private String filename;

File: src/main/java/run/halo/app/model/entity/PostCategory.java
Patch:
@@ -15,7 +15,7 @@
 @Entity
 @Table(name = "post_categories",
     indexes = {@Index(name = "post_categories_post_id", columnList = "post_id"),
-    @Index(name = "post_categories_category_id", columnList = "category_id")})
+        @Index(name = "post_categories_category_id", columnList = "category_id")})
 @Data
 @ToString(callSuper = true)
 public class PostCategory extends BaseEntity {

File: src/main/java/run/halo/app/model/entity/BasePost.java
Patch:
@@ -19,7 +19,9 @@
  */
 @Data
 @Entity(name = "BasePost")
-@Table(name = "posts")
+@Table(name = "posts",
+    indexes = {@Index(name = "posts_type_status", columnList = "type, status"),
+        @Index(name = "posts_create_time", columnList = "create_time")})
 @DiscriminatorColumn(name = "type", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = "int default 0")
 @ToString(callSuper = true)
 @EqualsAndHashCode(callSuper = true)

File: src/main/java/run/halo/app/handler/file/LocalFileHandler.java
Patch:
@@ -236,7 +236,9 @@ private boolean generateThumbnail(BufferedImage originalImage, Path thumbPath, S
             log.warn("Failed to generate thumbnail: " + thumbPath, t);
         } finally {
             // Disposes of this graphics context and releases any system resources that it is using.
-            originalImage.getGraphics().dispose();
+            if (originalImage != null) {
+                originalImage.getGraphics().dispose();
+            }
         }
         return result;
     }

File: src/main/java/run/halo/app/handler/file/AliOssFileHandler.java
Patch:
@@ -148,7 +148,8 @@ public void delete(String key) {
     }
 
     @Override
-    public boolean supportType(String type) {
-        return AttachmentType.ALIOSS.name().equalsIgnoreCase(type);
+    public AttachmentType getAttachmentType() {
+        return AttachmentType.ALIOSS;
     }
+
 }

File: src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java
Patch:
@@ -132,7 +132,7 @@ public void delete(String key) {
     }
 
     @Override
-    public boolean supportType(String type) {
-        return AttachmentType.BAIDUBOS.name().equalsIgnoreCase(type);
+    public AttachmentType getAttachmentType() {
+        return AttachmentType.BAIDUBOS;
     }
 }

File: src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java
Patch:
@@ -177,7 +177,7 @@ public void delete(String key) {
     }
 
     @Override
-    public boolean supportType(String type) {
-        return AttachmentType.QINIUOSS.name().equalsIgnoreCase(type);
+    public AttachmentType getAttachmentType() {
+        return AttachmentType.QINIUOSS;
     }
 }

File: src/main/java/run/halo/app/handler/file/SmmsFileHandler.java
Patch:
@@ -165,8 +165,8 @@ public void delete(String key) {
     }
 
     @Override
-    public boolean supportType(String type) {
-        return AttachmentType.SMMS.name().equalsIgnoreCase(type);
+    public AttachmentType getAttachmentType() {
+        return AttachmentType.SMMS;
     }
 
     /**

File: src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java
Patch:
@@ -163,7 +163,7 @@ public void delete(String key) {
     }
 
     @Override
-    public boolean supportType(String type) {
-        return AttachmentType.TENCENTCOS.name().equalsIgnoreCase(type);
+    public AttachmentType getAttachmentType() {
+        return AttachmentType.TENCENTCOS;
     }
 }

File: src/main/java/run/halo/app/handler/file/UpOssFileHandler.java
Patch:
@@ -128,7 +128,7 @@ public void delete(String key) {
     }
 
     @Override
-    public boolean supportType(String type) {
-        return AttachmentType.UPOSS.name().equalsIgnoreCase(type);
+    public AttachmentType getAttachmentType() {
+        return AttachmentType.UPOSS;
     }
 }

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -934,7 +934,6 @@ private boolean hasOptions(@NonNull Path themePath) {
                 return true;
             }
         }
-
         return false;
     }
 }

File: src/main/java/run/halo/app/controller/admin/api/AttachmentController.java
Patch:
@@ -37,7 +37,7 @@ public AttachmentController(AttachmentService attachmentService) {
     }
 
     @GetMapping
-    public Page<AttachmentDTO> pageBy(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable,
+    public Page<AttachmentDTO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable,
                                       AttachmentQuery attachmentQuery) {
         return attachmentService.pageDtosBy(pageable, attachmentQuery);
     }

File: src/main/java/run/halo/app/controller/admin/api/CategoryController.java
Patch:
@@ -46,7 +46,7 @@ public CategoryDTO getBy(@PathVariable("categoryId") Integer categoryId) {
     @GetMapping
     @ApiOperation("Lists all categories")
     public List<? extends CategoryDTO> listAll(
-        @SortDefault(sort = "updateTime", direction = DESC) Sort sort,
+        @SortDefault(sort = "createTime", direction = DESC) Sort sort,
         @RequestParam(name = "more", required = false, defaultValue = "false") boolean more) {
         if (more) {
             return postCategoryService.listCategoryWithPostCountDto(sort);

File: src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java
Patch:
@@ -45,7 +45,7 @@ public JournalCommentController(JournalCommentService journalCommentService,
 
     @GetMapping
     @ApiOperation("Lists journal comments")
-    public Page<JournalCommentWithJournalVO> pageBy(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable,
+    public Page<JournalCommentWithJournalVO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable,
                                                     CommentQuery commentQuery) {
         Page<JournalComment> journalCommentPage = journalCommentService.pageBy(commentQuery, pageable);
 

File: src/main/java/run/halo/app/controller/admin/api/LogController.java
Patch:
@@ -40,7 +40,7 @@ public List<LogDTO> pageLatest(@RequestParam(name = "top", defaultValue = "10")
 
     @GetMapping
     @ApiOperation("Lists logs")
-    public Page<LogDTO> pageBy(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable) {
+    public Page<LogDTO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable) {
         Page<Log> logPage = logService.listAll(pageable);
         return logPage.map(log -> new LogDTO().convertFrom(log));
     }

File: src/main/java/run/halo/app/controller/admin/api/PhotoController.java
Patch:
@@ -36,13 +36,13 @@ public PhotoController(PhotoService photoService) {
 
     @GetMapping(value = "latest")
     @ApiOperation("Lists latest photos")
-    public List<PhotoDTO> listPhotos(@SortDefault(sort = "updateTime", direction = Sort.Direction.DESC) Sort sort) {
+    public List<PhotoDTO> listPhotos(@SortDefault(sort = "createTime", direction = Sort.Direction.DESC) Sort sort) {
         return photoService.listDtos(sort);
     }
 
     @GetMapping
     @ApiOperation("Lists photos")
-    public Page<PhotoDTO> pageBy(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable,
+    public Page<PhotoDTO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable,
                                  PhotoQuery photoQuery) {
         return photoService.pageDtosBy(pageable, photoQuery);
     }

File: src/main/java/run/halo/app/controller/admin/api/PostCommentController.java
Patch:
@@ -47,7 +47,7 @@ public PostCommentController(PostCommentService postCommentService,
 
     @GetMapping
     @ApiOperation("Lists post comments")
-    public Page<PostCommentWithPostVO> pageBy(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable,
+    public Page<PostCommentWithPostVO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable,
                                               CommentQuery commentQuery) {
         Page<PostComment> commentPage = postCommentService.pageBy(commentQuery, pageable);
         return postCommentService.convertToWithPostVo(commentPage);

File: src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java
Patch:
@@ -47,7 +47,7 @@ public SheetCommentController(SheetCommentService sheetCommentService,
 
     @GetMapping
     @ApiOperation("Lists sheet comments")
-    public Page<SheetCommentWithSheetVO> pageBy(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable,
+    public Page<SheetCommentWithSheetVO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable,
                                                 CommentQuery commentQuery) {
         Page<SheetComment> sheetCommentPage = sheetCommentService.pageBy(commentQuery, pageable);
         return sheetCommentService.convertToWithSheetVo(sheetCommentPage);

File: src/main/java/run/halo/app/controller/admin/api/TagController.java
Patch:
@@ -38,7 +38,7 @@ public TagController(TagService tagService,
 
     @GetMapping
     @ApiOperation("Lists tags")
-    public List<? extends TagDTO> listTags(@SortDefault(sort = "updateTime", direction = Sort.Direction.DESC) Sort sort,
+    public List<? extends TagDTO> listTags(@SortDefault(sort = "createTime", direction = Sort.Direction.DESC) Sort sort,
                                            @ApiParam("Return more information(post count) if it is set")
                                            @RequestParam(name = "more", required = false, defaultValue = "false") Boolean more) {
         if (more) {

File: src/main/java/run/halo/app/controller/content/ContentContentController.java
Patch:
@@ -118,7 +118,7 @@ public String content(@PathVariable("prefix") String prefix,
         }
     }
 
-    @GetMapping("{prefix}/{slug:.+}")
+    @GetMapping("{prefix}/{slug}")
     public String content(@PathVariable("prefix") String prefix,
                           @PathVariable("slug") String slug,
                           @RequestParam(value = "token", required = false) String token,
@@ -154,7 +154,7 @@ public String content(@PathVariable("prefix") String prefix,
         }
     }
 
-    @GetMapping("{year:\\d+}/{month:\\d+}/{slug:.+}")
+    @GetMapping("{year:\\d+}/{month:\\d+}/{slug}")
     public String content(@PathVariable("year") Integer year,
                           @PathVariable("month") Integer month,
                           @PathVariable("slug") String slug,
@@ -169,7 +169,7 @@ public String content(@PathVariable("year") Integer year,
         }
     }
 
-    @GetMapping("{year:\\d+}/{month:\\d+}/{day:\\d+}/{slug:.+}")
+    @GetMapping("{year:\\d+}/{month:\\d+}/{day:\\d+}/{slug}")
     public String content(@PathVariable("year") Integer year,
                           @PathVariable("month") Integer month,
                           @PathVariable("day") Integer day,

File: src/main/java/run/halo/app/controller/content/model/JournalModel.java
Patch:
@@ -70,7 +70,7 @@ public String list(Integer page, Model model) {
             .append(optionService.getPathSuffix());
 
         if (journals.getNumber() == 1) {
-            prePageFullPath.append("/");
+            prePageFullPath.append(optionService.getPathSuffix());
         } else {
             prePageFullPath.append("/page/")
                 .append(journals.getNumber())

File: src/main/java/run/halo/app/controller/content/model/PhotoModel.java
Patch:
@@ -65,7 +65,7 @@ public String list(Integer page, Model model) {
             .append(optionService.getPathSuffix());
 
         if (photos.getNumber() == 1) {
-            prePageFullPath.append("/");
+            prePageFullPath.append(optionService.getPathSuffix());
         } else {
             prePageFullPath.append("/page/")
                 .append(photos.getNumber())

File: src/main/java/run/halo/app/controller/content/model/PostModel.java
Patch:
@@ -212,7 +212,7 @@ public String archives(Integer page, Model model) {
             .append(optionService.getPathSuffix());
 
         if (posts.getNumber() == 1) {
-            prePageFullPath.append("/");
+            prePageFullPath.append(optionService.getPathSuffix());
         } else {
             prePageFullPath.append("/page/")
                 .append(posts.getNumber())

File: src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java
Patch:
@@ -242,6 +242,7 @@ private void initBlackPatterns() {
             blackPatterns.add("/fonts/**");
             blackPatterns.add("/css/**");
             blackPatterns.add("/assets/**");
+            blackPatterns.add("/color.less");
             blackPatterns.add("/swagger-ui.html");
             blackPatterns.add("/csrf");
             blackPatterns.add("/webjars/**");

File: src/main/java/run/halo/app/controller/content/ContentContentController.java
Patch:
@@ -83,7 +83,7 @@ public ContentContentController(PostModel postModel,
     public String content(@PathVariable("prefix") String prefix,
                           Model model) {
         if (optionService.getArchivesPrefix().equals(prefix)) {
-            return postModel.list(1, model, "is_archives", "archives");
+            return postModel.archives(1, model);
         } else if (optionService.getCategoriesPrefix().equals(prefix)) {
             return categoryModel.list(model);
         } else if (optionService.getTagsPrefix().equals(prefix)) {
@@ -105,7 +105,7 @@ public String content(@PathVariable("prefix") String prefix,
                           @PathVariable(value = "page") Integer page,
                           Model model) {
         if (optionService.getArchivesPrefix().equals(prefix)) {
-            return postModel.list(page, model, "is_archives", "archives");
+            return postModel.archives(page, model);
         } else if (optionService.getJournalsPrefix().equals(prefix)) {
             return journalModel.list(page, model);
         } else if (optionService.getPhotosPrefix().equals(prefix)) {

File: src/main/java/run/halo/app/controller/content/ContentIndexController.java
Patch:
@@ -70,6 +70,6 @@ public String index(Integer p, String token, Model model) {
     @GetMapping(value = "page/{page}")
     public String index(Model model,
                         @PathVariable(value = "page") Integer page) {
-        return postModel.list(page, model, "is_index", "index");
+        return postModel.list(page, model);
     }
 }

File: src/main/java/run/halo/app/model/vo/ArchiveYearVO.java
Patch:
@@ -3,7 +3,6 @@
 import lombok.Data;
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
-import run.halo.app.model.dto.post.BasePostMinimalDTO;
 
 import java.util.Comparator;
 import java.util.List;
@@ -21,7 +20,7 @@ public class ArchiveYearVO {
 
     private Integer year;
 
-    private List<BasePostMinimalDTO> posts;
+    private List<PostListVO> posts;
 
     public static class ArchiveComparator implements Comparator<ArchiveYearVO> {
 

File: src/main/java/run/halo/app/model/dto/post/BasePostMinimalDTO.java
Patch:
@@ -5,6 +5,7 @@
 import lombok.ToString;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.BasePost;
+import run.halo.app.model.enums.PostEditorType;
 import run.halo.app.model.enums.PostStatus;
 
 import java.util.Date;
@@ -32,6 +33,8 @@ public class BasePostMinimalDTO implements OutputConverter<BasePostMinimalDTO, B
 
     private String slug;
 
+    private PostEditorType editorType;
+
     private Date updateTime;
 
     private Date createTime;

File: src/main/java/run/halo/app/model/properties/PropertyEnum.java
Patch:
@@ -185,6 +185,7 @@ static Map<String, PropertyEnum> getValuePropertyEnumMap() {
         propertyEnumClasses.add(EmailProperties.class);
         propertyEnumClasses.add(OtherProperties.class);
         propertyEnumClasses.add(PostProperties.class);
+        propertyEnumClasses.add(SheetProperties.class);
         propertyEnumClasses.add(PrimaryProperties.class);
         propertyEnumClasses.add(QiniuOssProperties.class);
         propertyEnumClasses.add(SeoProperties.class);

File: src/main/java/run/halo/app/service/impl/AdminServiceImpl.java
Patch:
@@ -131,6 +131,7 @@ public AdminServiceImpl(PostService postService,
         this.mode = mode;
     }
 
+
     @Override
     public AuthToken authenticate(LoginParam loginParam) {
         Assert.notNull(loginParam, "Login param must not be null");

File: src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java
Patch:
@@ -18,7 +18,6 @@
 import run.halo.app.model.enums.AttachmentType;
 import run.halo.app.model.params.AttachmentQuery;
 import run.halo.app.model.properties.AttachmentProperties;
-import run.halo.app.model.properties.OtherProperties;
 import run.halo.app.model.support.UploadResult;
 import run.halo.app.repository.AttachmentRepository;
 import run.halo.app.service.AttachmentService;
@@ -158,7 +157,7 @@ public AttachmentDTO convertToDto(Attachment attachment) {
         // Get blog base url
         String blogBaseUrl = optionService.getBlogBaseUrl();
 
-        Boolean enabledAbsolutePath = optionService.getByPropertyOrDefault(OtherProperties.GLOBAL_ABSOLUTE_PATH_ENABLED, Boolean.class, true);
+        Boolean enabledAbsolutePath = optionService.isEnabledAbsolutePath();
 
         // Convert to output dto
         AttachmentDTO attachmentDTO = new AttachmentDTO().convertFrom(attachment);

File: src/main/java/run/halo/app/controller/content/MainController.java
Patch:
@@ -69,23 +69,23 @@ public void installation(HttpServletResponse response) throws IOException {
     public void avatar(HttpServletResponse response) throws IOException {
         User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException("未查询到博主信息"));
         if (StringUtils.isNotEmpty(user.getAvatar())) {
-            response.sendRedirect(user.getAvatar());
+            response.sendRedirect(HaloUtils.normalizeUrl(user.getAvatar()));
         }
     }
 
     @GetMapping("logo")
     public void logo(HttpServletResponse response) throws IOException {
         String blogLogo = optionService.getByProperty(BlogProperties.BLOG_LOGO).orElse("").toString();
         if (StringUtils.isNotEmpty(blogLogo)) {
-            response.sendRedirect(blogLogo);
+            response.sendRedirect(HaloUtils.normalizeUrl(blogLogo));
         }
     }
 
     @GetMapping("favicon.ico")
     public void favicon(HttpServletResponse response) throws IOException {
         String favicon = optionService.getByProperty(BlogProperties.BLOG_FAVICON).orElse("").toString();
         if (StringUtils.isNotEmpty(favicon)) {
-            response.sendRedirect(favicon);
+            response.sendRedirect(HaloUtils.normalizeUrl(favicon));
         }
     }
 }

File: src/main/java/run/halo/app/model/params/LoginParam.java
Patch:
@@ -20,7 +20,7 @@ public class LoginParam {
     @Size(max = 255, message = "用户名或邮箱的字符长度不能超过 {max}")
     private String username;
 
-    @NotBlank(message = "登陆密码不能为空")
+    @NotBlank(message = "登录密码不能为空")
     @Size(max = 100, message = "用户密码字符长度不能超过 {max}")
     private String password;
 

File: src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java
Patch:
@@ -65,7 +65,7 @@ protected void doAuthenticate(HttpServletRequest request, HttpServletResponse re
         String token = getTokenFromRequest(request);
 
         if (StringUtils.isBlank(token)) {
-            throw new AuthenticationException("未登录，请登陆后访问");
+            throw new AuthenticationException("未登录，请登录后访问");
         }
 
         // Get user id from cache

File: src/main/java/run/halo/app/service/impl/AdminServiceImpl.java
Patch:
@@ -309,7 +309,7 @@ public AuthToken refreshToken(String refreshToken) {
         Assert.hasText(refreshToken, "Refresh token must not be blank");
 
         Integer userId = cacheStore.getAny(SecurityUtils.buildTokenRefreshKey(refreshToken), Integer.class)
-                .orElseThrow(() -> new BadRequestException("登陆状态已失效，请重新登陆").setErrorData(refreshToken));
+                .orElseThrow(() -> new BadRequestException("登录状态已失效，请重新登录").setErrorData(refreshToken));
 
         // Get user info
         User user = userService.getById(userId);

File: src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java
Patch:
@@ -64,7 +64,7 @@ public UploadResult upload(MultipartFile file) {
         domain = protocol + domain;
 
         try {
-            String basename = FilenameUtils.getBasename(file.getOriginalFilename());
+            String basename = FilenameUtils.getBasename(Objects.requireNonNull(file.getOriginalFilename()));
             String extension = FilenameUtils.getExtension(file.getOriginalFilename());
             String timestamp = String.valueOf(System.currentTimeMillis());
             String upFilePath = StringUtils.join(basename, "_", timestamp, ".", extension);
@@ -132,7 +132,7 @@ public void delete(String key) {
     }
 
     @Override
-    public boolean supportType(AttachmentType type) {
-        return AttachmentType.BAIDUBOS.equals(type);
+    public boolean supportType(String type) {
+        return AttachmentType.BAIDUBOS.name().equalsIgnoreCase(type);
     }
 }

File: src/main/java/run/halo/app/handler/file/FileHandler.java
Patch:
@@ -77,7 +77,7 @@ static String normalizeDirectory(@NonNull String dir) {
      * Checks if the given type is supported.
      *
      * @param type attachment type
-     * @return true if supported; false or else
+     * @return true if supported; false otherwise
      */
-    boolean supportType(@Nullable AttachmentType type);
+    boolean supportType(@Nullable String type);
 }

File: src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java
Patch:
@@ -78,7 +78,7 @@ public UploadResult upload(MultipartFile file) {
         }
 
         try {
-            String basename = FilenameUtils.getBasename(file.getOriginalFilename());
+            String basename = FilenameUtils.getBasename(Objects.requireNonNull(file.getOriginalFilename()));
             String extension = FilenameUtils.getExtension(file.getOriginalFilename());
             String timestamp = String.valueOf(System.currentTimeMillis());
             StringBuilder upFilePath = new StringBuilder();
@@ -163,7 +163,7 @@ public void delete(String key) {
     }
 
     @Override
-    public boolean supportType(AttachmentType type) {
-        return AttachmentType.TENCENTCOS.equals(type);
+    public boolean supportType(String type) {
+        return AttachmentType.TENCENTCOS.name().equalsIgnoreCase(type);
     }
 }

File: src/main/java/run/halo/app/handler/file/UpOssFileHandler.java
Patch:
@@ -58,7 +58,7 @@ public UploadResult upload(MultipartFile file) {
 
         try {
             // Get file basename
-            String basename = FilenameUtils.getBasename(file.getOriginalFilename());
+            String basename = FilenameUtils.getBasename(Objects.requireNonNull(file.getOriginalFilename()));
             // Get file extension
             String extension = FilenameUtils.getExtension(file.getOriginalFilename());
             // Get md5 value of the file
@@ -128,7 +128,7 @@ public void delete(String key) {
     }
 
     @Override
-    public boolean supportType(AttachmentType type) {
-        return AttachmentType.UPOSS.equals(type);
+    public boolean supportType(String type) {
+        return AttachmentType.UPOSS.name().equalsIgnoreCase(type);
     }
 }

File: src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java
Patch:
@@ -234,6 +234,6 @@ private void pathMustNotExist(@NonNull Attachment attachment) {
      */
     @NonNull
     private AttachmentType getAttachmentType() {
-        return optionService.getEnumByPropertyOrDefault(AttachmentProperties.ATTACHMENT_TYPE, AttachmentType.class, AttachmentType.LOCAL);
+        return Objects.requireNonNull(optionService.getEnumByPropertyOrDefault(AttachmentProperties.ATTACHMENT_TYPE, AttachmentType.class, AttachmentType.LOCAL));
     }
 }

File: src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java
Patch:
@@ -227,7 +227,7 @@ protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletReques
             log.debug("Looking path: [{}]", lookupPath);
             for (String blackPattern : blackPatterns) {
                 if (this.pathMatcher.match(blackPattern, lookupPath)) {
-                    log.info("Skipped path [{}] with pattern: [{}]", lookupPath, blackPattern);
+                    log.debug("Skipped path [{}] with pattern: [{}]", lookupPath, blackPattern);
                     return null;
                 }
             }

File: src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java
Patch:
@@ -158,7 +158,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse
         // Check whether the blog is installed or not
         Boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);
 
-        if (!isInstalled && Mode.TEST.equals(haloProperties.getMode())) {
+        if (!isInstalled && !Mode.TEST.equals(haloProperties.getMode())) {
             // If not installed
             getFailureHandler().onFailure(request, response, new NotInstallException("当前博客还没有初始化"));
             return;

File: src/main/java/run/halo/app/controller/admin/api/UserController.java
Patch:
@@ -2,6 +2,7 @@
 
 import io.swagger.annotations.ApiOperation;
 import org.springframework.web.bind.annotation.*;
+import run.halo.app.model.annotation.DisableOnCondition;
 import run.halo.app.model.dto.UserDTO;
 import run.halo.app.model.entity.User;
 import run.halo.app.model.params.PasswordParam;
@@ -49,6 +50,7 @@ public UserDTO updateProfile(@RequestBody UserParam userParam, User user) {
     }
 
     @PutMapping("profiles/password")
+    @DisableOnCondition
     @ApiOperation("Updates user's password")
     public BaseResponse updatePassword(@RequestBody @Valid PasswordParam passwordParam, User user) {
         userService.updatePassword(passwordParam.getOldPassword(), passwordParam.getNewPassword(), user.getId());

File: src/main/java/run/halo/app/model/enums/Mode.java
Patch:
@@ -13,6 +13,7 @@
 public enum Mode {
     PRODUCTION,
     DEVELOPMENT,
+    DEMO,
     TEST;
 
     /**

File: src/main/java/run/halo/app/controller/admin/api/BackupController.java
Patch:
@@ -68,6 +68,7 @@ public ResponseEntity<Resource> downloadBackup(@PathVariable("fileName") String
             contentType = request.getServletContext().getMimeType(backupResource.getFile().getAbsolutePath());
         } catch (IOException e) {
             log.warn("Could not determine file type", e);
+            // Ignore this error
         }
 
         return ResponseEntity.ok()

File: src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java
Patch:
@@ -236,8 +236,7 @@ protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletReques
 
         private void initBlackPatterns() {
             String uploadUrlPattern = ensureBoth(haloProperties.getUploadUrlPrefix(), URL_SEPARATOR) + "**";
-            String adminPathPattern = ensureBoth(haloProperties.getAdminPath(), URL_SEPARATOR) + "**";
-
+            String adminPathPattern = ensureBoth(haloProperties.getAdminPath(), URL_SEPARATOR) + "?*/**";
 
             blackPatterns.add("/themes/**");
             blackPatterns.add("/js/**");

File: src/main/java/run/halo/app/controller/content/MainController.java
Patch:
@@ -11,6 +11,7 @@
 import run.halo.app.model.support.HaloConst;
 import run.halo.app.service.OptionService;
 import run.halo.app.service.UserService;
+import run.halo.app.utils.HaloUtils;
 
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
@@ -48,7 +49,7 @@ public MainController(UserService userService, OptionService optionService, Halo
 
     @GetMapping("${halo.admin-path:admin}")
     public void admin(HttpServletResponse response) throws IOException {
-        String adminIndexRedirectUri = StringUtils.appendIfMissing(this.haloProperties.getAdminPath(), "/") + INDEX_REDIRECT_URI;
+        String adminIndexRedirectUri = HaloUtils.ensureBoth(haloProperties.getAdminPath(), HaloUtils.URL_SEPARATOR) + INDEX_REDIRECT_URI;
         response.sendRedirect(adminIndexRedirectUri);
     }
 

File: src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java
Patch:
@@ -236,8 +236,7 @@ protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletReques
 
         private void initBlackPatterns() {
             String uploadUrlPattern = ensureBoth(haloProperties.getUploadUrlPrefix(), URL_SEPARATOR) + "**";
-            String adminPathPattern = ensureBoth(haloProperties.getAdminPath(), URL_SEPARATOR) + "**";
-
+            String adminPathPattern = ensureBoth(haloProperties.getAdminPath(), URL_SEPARATOR) + "?*/**";
 
             blackPatterns.add("/themes/**");
             blackPatterns.add("/js/**");

File: src/main/java/run/halo/app/controller/content/MainController.java
Patch:
@@ -11,6 +11,7 @@
 import run.halo.app.model.support.HaloConst;
 import run.halo.app.service.OptionService;
 import run.halo.app.service.UserService;
+import run.halo.app.utils.HaloUtils;
 
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
@@ -48,7 +49,7 @@ public MainController(UserService userService, OptionService optionService, Halo
 
     @GetMapping("${halo.admin-path:admin}")
     public void admin(HttpServletResponse response) throws IOException {
-        String adminIndexRedirectUri = StringUtils.appendIfMissing(this.haloProperties.getAdminPath(), "/") + INDEX_REDIRECT_URI;
+        String adminIndexRedirectUri = HaloUtils.ensureBoth(haloProperties.getAdminPath(), HaloUtils.URL_SEPARATOR) + INDEX_REDIRECT_URI;
         response.sendRedirect(adminIndexRedirectUri);
     }
 

File: src/main/java/run/halo/app/controller/content/ContentArchiveController.java
Patch:
@@ -33,6 +33,7 @@ public class ContentArchiveController {
 
     private final StringCacheStore cacheStore;
 
+
     public ContentArchiveController(PostService postService,
                                     OptionService optionService,
                                     StringCacheStore cacheStore) {
@@ -41,14 +42,14 @@ public ContentArchiveController(PostService postService,
         this.cacheStore = cacheStore;
     }
 
-    @GetMapping(value = "{url}/password")
+    @GetMapping(value = "{url:.*}/password")
     public String password(@PathVariable("url") String url,
                            Model model) {
         model.addAttribute("url", url);
         return "common/template/post_password";
     }
 
-    @PostMapping(value = "{url}/password")
+    @PostMapping(value = "{url:.*}/password")
     @CacheLock(traceRequest = true, expired = 2)
     public String password(@PathVariable("url") String url,
                            @RequestParam(value = "password") String password) {

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -597,6 +597,8 @@ public ThemeProperty update(String themeId, MultipartFile file) {
             // Coping new theme files to old theme folder.
             FileUtils.copyFolder(preparePath, Paths.get(updatingTheme.getThemePath()));
 
+            eventPublisher.publishEvent(new ThemeUpdatedEvent(this));
+
             // Gets theme property again.
             return getProperty(Paths.get(updatingTheme.getThemePath()));
         } catch (IOException e) {

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -597,6 +597,8 @@ public ThemeProperty update(String themeId, MultipartFile file) {
             // Coping new theme files to old theme folder.
             FileUtils.copyFolder(preparePath, Paths.get(updatingTheme.getThemePath()));
 
+            eventPublisher.publishEvent(new ThemeUpdatedEvent(this));
+
             // Gets theme property again.
             return getProperty(Paths.get(updatingTheme.getThemePath()));
         } catch (IOException e) {

File: src/test/java/run/halo/app/utils/HaloUtilsTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.RandomUtils;
-import org.junit.Assert;
 import org.junit.Test;
 
 import java.util.stream.IntStream;
@@ -15,7 +14,8 @@
  * Halo utilities test.
  *
  * @author johnniang
- * @date 3/29/19
+ * @author ryanwang
+ * @date 2019-03-29
  */
 @Slf4j
 public class HaloUtilsTest {

File: src/main/java/run/halo/app/handler/migrate/WordPressMigrateHandler.java
Patch:
@@ -14,7 +14,6 @@
 import run.halo.app.service.*;
 import run.halo.app.utils.XmlMigrateUtils;
 
-import java.io.FileInputStream;
 import java.io.InputStreamReader;
 import java.nio.charset.StandardCharsets;
 import java.util.List;
@@ -23,6 +22,7 @@
  * WordPress migrate handler
  *
  * @author ryanwang
+ * @author guqing
  * @date 2019-10-28
  */
 @Slf4j
@@ -84,7 +84,7 @@ public WordPressMigrateHandler(AttachmentService attachmentService,
     public void migrate(MultipartFile file) {
         try {
             String migrationContent = FileCopyUtils.copyToString(new InputStreamReader(file.getInputStream(), StandardCharsets.UTF_8));
-            String jsonString = XmlMigrateUtils.xml2jsonString(new FileInputStream(migrationContent));
+            String jsonString = XmlMigrateUtils.xml2jsonString(migrationContent);
             JSONObject json = JSONObject.parseObject(jsonString);
             Rss rss = json.getObject("rss", Rss.class);
 

File: src/main/java/run/halo/app/handler/migrate/support/wordpress/Comment.java
Patch:
@@ -11,11 +11,14 @@
  * </p>
  *
  * @author guqing
+ * @author ryanwang
  * @date 2019-11-17 14:01
  */
 @Data
 public class Comment {
+
     @JSONField(name = "wp:comment_id")
+    @PropertyMappingTo("id")
     private String commentId;
 
     @JSONField(name = "wp:comment_author")

File: src/main/java/run/halo/app/handler/migrate/utils/PropertyMappingTo.java
Patch:
@@ -4,6 +4,7 @@
 
 /**
  * 该注解用于定义两个对象之间的属性映射关系
+ *
  * @author guqing
  * @date 2020-1-19 13:51
  */
@@ -13,6 +14,7 @@
 public @interface PropertyMappingTo {
     /**
      * value对应的是目标对象的属性名称
+     *
      * @return 返回源对象属性对应的目标对象的属性名
      */
     String value() default "";

File: src/main/java/run/halo/app/controller/content/ContentArchiveController.java
Patch:
@@ -1,6 +1,8 @@
 package run.halo.app.controller.content;
 
 import cn.hutool.core.util.IdUtil;
+import cn.hutool.core.util.PageUtil;
+import java.util.Optional;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Controller;
 import org.springframework.ui.Model;

File: src/main/java/run/halo/app/controller/content/ContentIndexController.java
Patch:
@@ -64,7 +64,7 @@ public String index(Integer p, String token, Model model) {
      * Render blog index
      *
      * @param model model
-     * @param page  current page number
+     * @param page current page number
      * @return template path: themes/{theme}/index.ftl
      */
     @GetMapping(value = "page/{page}")

File: src/main/java/run/halo/app/controller/content/api/PostController.java
Patch:
@@ -130,6 +130,7 @@ public Page<BaseCommentWithParentVO> listComments(@PathVariable("postId") Intege
     @ApiOperation("Comments a post")
     @CacheLock(autoDelete = false, traceRequest = true)
     public BaseCommentDTO comment(@RequestBody PostCommentParam postCommentParam) {
+        postCommentService.validateCommentBlackListStatus();
         return postCommentService.convertTo(postCommentService.createBy(postCommentParam));
     }
 

File: src/main/java/run/halo/app/controller/content/MainController.java
Patch:
@@ -12,7 +12,6 @@
 import run.halo.app.service.OptionService;
 import run.halo.app.service.UserService;
 
-import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
 
@@ -48,7 +47,7 @@ public MainController(UserService userService, OptionService optionService, Halo
     }
 
     @GetMapping("${halo.admin-path:admin}")
-    public void admin(HttpServletRequest request, HttpServletResponse response) throws IOException {
+    public void admin(HttpServletResponse response) throws IOException {
         String adminIndexRedirectUri = StringUtils.appendIfMissing(this.haloProperties.getAdminPath(), "/") + INDEX_REDIRECT_URI;
         response.sendRedirect(adminIndexRedirectUri);
     }

File: src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java
Patch:
@@ -65,7 +65,7 @@ public List<JournalCommentWithJournalVO> listLatest(@RequestParam(name = "top",
     public Page<BaseCommentVO> listCommentTree(@PathVariable("journalId") Integer journalId,
                                                @RequestParam(name = "page", required = false, defaultValue = "0") int page,
                                                @SortDefault(sort = "createTime", direction = DESC) Sort sort) {
-        return journalCommentService.pageVosBy(journalId, PageRequest.of(page, optionService.getCommentPageSize(), sort));
+        return journalCommentService.pageVosAllBy(journalId, PageRequest.of(page, optionService.getCommentPageSize(), sort));
     }
 
     @GetMapping("{journalId:\\d+}/list_view")

File: src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java
Patch:
@@ -18,8 +18,8 @@
 import java.io.IOException;
 import java.util.Optional;
 
-import static run.halo.app.model.support.HaloConst.ADMIN_TOKEN_HEADER_NAME;
-import static run.halo.app.model.support.HaloConst.ADMIN_TOKEN_QUERY_NAME;
+import static run.halo.app.model.support.HaloConst.API_ACCESS_KEY_HEADER_NAME;
+import static run.halo.app.model.support.HaloConst.API_ACCESS_KEY_QUERY_NAME;
 
 /**
  * Api authentication Filter
@@ -98,6 +98,6 @@ protected boolean shouldNotFilter(HttpServletRequest request) {
 
     @Override
     protected String getTokenFromRequest(@NonNull HttpServletRequest request) {
-        return getTokenFromRequest(request, ADMIN_TOKEN_QUERY_NAME, ADMIN_TOKEN_HEADER_NAME);
+        return getTokenFromRequest(request, API_ACCESS_KEY_QUERY_NAME, API_ACCESS_KEY_HEADER_NAME);
     }
 }

File: src/main/java/run/halo/app/controller/content/ContentArchiveController.java
Patch:
@@ -35,6 +35,7 @@
  *
  * @author ryanwang
  * @author guqing
+ * @author evanwang
  * @date 2019-03-17
  */
 @Slf4j
@@ -135,7 +136,7 @@ public String post(@PathVariable("url") String url,
             }
             post.setFormatContent(MarkdownUtils.renderHtml(post.getOriginalContent()));
         }
-
+        postService.publishVisitEvent(post.getId());
         postService.getNextPost(post.getCreateTime()).ifPresent(nextPost -> model.addAttribute("nextPost", nextPost));
         postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> model.addAttribute("prePost", prePost));
 

File: src/main/java/run/halo/app/controller/content/ContentSheetController.java
Patch:
@@ -28,6 +28,7 @@
  * Content sheet controller.
  *
  * @author ryanwang
+ * @author evanwang
  * @date 2019-03-21
  */
 @Controller
@@ -119,6 +120,7 @@ public String sheet(@PathVariable(value = "url") String url,
                 throw new ForbiddenException("您没有该页面的访问权限");
             }
         }
+        sheetService.publishVisitEvent(sheet.getId());
 
         SheetDetailVO sheetDetailVO = sheetService.convertToDetailVo(sheet);
 

File: src/main/java/run/halo/app/model/params/SheetParam.java
Patch:
@@ -43,7 +43,7 @@ public class SheetParam implements InputConverter<Sheet> {
 
     private Date createTime;
 
-    @Size(max = 255, message = "Length of password must not be more than {max}")
+    @Size(max = 255, message = "页面密码的字符长度不能超过 {max}")
     private String password;
 
     @Size(max = 255, message = "Length of template must not be more than {max}")

File: src/main/java/run/halo/app/service/impl/AdminServiceImpl.java
Patch:
@@ -439,7 +439,7 @@ private AuthToken buildAuthToken(@NonNull User user) {
         token.setRefreshToken(HaloUtils.randomUUIDWithoutDash());
 
         // Cache those tokens, just for clearing
-        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);
+        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), ACCESS_TOKEN_EXPIRED_SECONDS, TimeUnit.SECONDS);
         cacheStore.putAny(SecurityUtils.buildRefreshTokenKey(user), token.getRefreshToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);
 
         // Cache those tokens with user id

File: src/main/java/run/halo/app/core/freemarker/tag/PostTagDirective.java
Patch:
@@ -48,7 +48,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
                     env.setVariable("posts", builder.build().wrap(postService.listLatest(top)));
                     break;
                 case "count":
-                    env.setVariable("count", builder.build().wrap(postService.count()));
+                    env.setVariable("count", builder.build().wrap(postService.countByStatus(PostStatus.PUBLISHED)));
                     break;
                 case "archiveYear":
                     env.setVariable("archives", builder.build().wrap(postService.listYearArchives()));

File: src/main/java/run/halo/app/utils/MarkdownUtils.java
Patch:
@@ -56,6 +56,7 @@ public class MarkdownUtils {
             .set(TocExtension.LEVELS, 255)
             .set(TablesExtension.WITH_CAPTION, false)
             .set(TablesExtension.COLUMN_SPANS, false)
+            .set(TablesExtension.MIN_SEPARATOR_DASHES,1)
             .set(TablesExtension.MIN_HEADER_ROWS, 1)
             .set(TablesExtension.MAX_HEADER_ROWS, 1)
             .set(TablesExtension.APPEND_MISSING_COLUMNS, true)

File: src/main/java/run/halo/app/utils/MarkdownUtils.java
Patch:
@@ -23,8 +23,6 @@
 import com.vladsch.flexmark.util.options.DataHolder;
 import com.vladsch.flexmark.util.options.MutableDataSet;
 import org.apache.commons.lang3.StringUtils;
-import org.jsoup.Jsoup;
-import org.jsoup.nodes.Document;
 import run.halo.app.model.support.HaloConst;
 
 import java.util.Arrays;
@@ -64,7 +62,8 @@ public class MarkdownUtils {
             .set(TablesExtension.DISCARD_EXTRA_COLUMNS, true)
             .set(TablesExtension.HEADER_SEPARATOR_COLUMN_MATCH, true)
             .set(EmojiExtension.USE_SHORTCUT_TYPE, EmojiShortcutType.EMOJI_CHEAT_SHEET)
-            .set(EmojiExtension.USE_IMAGE_TYPE, EmojiImageType.UNICODE_ONLY);
+            .set(EmojiExtension.USE_IMAGE_TYPE, EmojiImageType.UNICODE_ONLY)
+            .set(HtmlRenderer.SOFT_BREAK, "<br />\n");
 
     private static final Parser PARSER = Parser.builder(OPTIONS).build();
 

File: src/main/java/run/halo/app/service/impl/AdminServiceImpl.java
Patch:
@@ -453,7 +453,7 @@ private AuthToken buildAuthToken(@NonNull User user) {
     public String getApplicationConfig() {
         File file = new File(haloProperties.getWorkDir(), APPLICATION_CONFIG_NAME);
         if (!file.exists()) {
-            return "";
+            return StringUtils.EMPTY;
         }
         FileReader reader = new FileReader(file);
         return reader.readString();

File: src/main/java/run/halo/app/utils/FilenameUtils.java
Patch:
@@ -34,7 +34,7 @@ public static String getBasename(@NonNull String filename) {
         int separatorLastIndex = StringUtils.lastIndexOf(filename, File.separatorChar);
 
         if (separatorLastIndex == filename.length() - 1) {
-            return "";
+            return StringUtils.EMPTY;
         }
 
         if (separatorLastIndex >= 0 && separatorLastIndex < filename.length() - 1) {
@@ -70,7 +70,7 @@ public static String getExtension(@NonNull String filename) {
         int separatorLastIndex = StringUtils.lastIndexOf(filename, File.separatorChar);
 
         if (separatorLastIndex == filename.length() - 1) {
-            return "";
+            return StringUtils.EMPTY;
         }
 
         if (separatorLastIndex >= 0 && separatorLastIndex < filename.length() - 1) {
@@ -81,7 +81,7 @@ public static String getExtension(@NonNull String filename) {
         int dotLastIndex = StringUtils.lastIndexOf(filename, '.');
 
         if (dotLastIndex < 0) {
-            return "";
+            return StringUtils.EMPTY;
         }
 
         return filename.substring(dotLastIndex + 1);

File: src/main/java/run/halo/app/controller/admin/api/PostCommentController.java
Patch:
@@ -69,7 +69,7 @@ public List<PostCommentWithPostVO> listLatest(@RequestParam(name = "top", defaul
     public Page<BaseCommentVO> listCommentTree(@PathVariable("postId") Integer postId,
                                                @RequestParam(name = "page", required = false, defaultValue = "0") int page,
                                                @SortDefault(sort = "createTime", direction = DESC) Sort sort) {
-        return postCommentService.pageVosBy(postId, PageRequest.of(page, optionService.getCommentPageSize(), sort));
+        return postCommentService.pageVosAllBy(postId, PageRequest.of(page, optionService.getCommentPageSize(), sort));
     }
 
     @GetMapping("{postId:\\d+}/list_view")

File: src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java
Patch:
@@ -64,7 +64,7 @@ public List<SheetCommentWithSheetVO> listLatest(@RequestParam(name = "top", defa
     public Page<BaseCommentVO> listCommentTree(@PathVariable("sheetId") Integer sheetId,
                                                @RequestParam(name = "page", required = false, defaultValue = "0") int page,
                                                @SortDefault(sort = "createTime", direction = DESC) Sort sort) {
-        return sheetCommentService.pageVosBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));
+        return sheetCommentService.pageVosAllBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));
     }
 
     @GetMapping("{sheetId:\\d+}/list_view")

File: src/main/java/run/halo/app/utils/WordPressMigrateUtils.java
Patch:
@@ -43,6 +43,7 @@ public static Element getRootElement(FileInputStream fileInputStream) {
         try {
             SAXReader saxReader = new SAXReader();
             Document document = saxReader.read(fileInputStream);
+            saxReader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
             return document.getRootElement();
         } catch (Exception e) {
             throw new RuntimeException("can not get root element");

File: src/main/java/run/halo/app/utils/FileUtils.java
Patch:
@@ -296,7 +296,7 @@ public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Pa
         Assert.notNull(parentPath, "Parent path must not be null");
         Assert.notNull(pathToCheck, "Path to check must not be null");
 
-        if (pathToCheck.startsWith(parentPath.normalize())) {
+        if (pathToCheck.normalize().startsWith(parentPath)) {
             return;
         }
 

File: src/main/java/run/halo/app/service/PostMetaService.java
Patch:
@@ -26,7 +26,7 @@ public interface PostMetaService extends BaseMetaService<PostMeta> {
      * @param postMetas post metas must not be null
      * @return a list of post meta
      */
-    List<PostMeta> createOrUpdateByPostId(@NonNull Integer postId, @NonNull Set<PostMeta> postMetas);
+    List<PostMeta> createOrUpdateByPostId(@NonNull Integer postId, Set<PostMeta> postMetas);
 
     /**
      * Lists post metas by post id.

File: src/main/java/run/halo/app/service/impl/PostMetaServiceImpl.java
Patch:
@@ -47,7 +47,6 @@ public void validateTarget(Integer postId) {
     @Override
     public List<PostMeta> createOrUpdateByPostId(Integer postId, Set<PostMeta> postMetas) {
         Assert.notNull(postId, "Post id must not be null");
-        Assert.notNull(postMetas, "Post metas must not be null");
         if (CollectionUtils.isEmpty(postMetas)) {
             return Collections.emptyList();
         }

File: src/main/java/run/halo/app/service/impl/PostServiceImpl.java
Patch:
@@ -557,6 +557,8 @@ private PostDetailVO createOrUpdate(@NonNull Post post, Set<Integer> tagIds, Set
 
         postCategoryService.removeByPostId(post.getId());
 
+        postMetaService.removeByPostId(post.getId());
+
         // List all tags
         List<Tag> tags = tagService.listAllByIds(tagIds);
 

File: src/main/java/run/halo/app/handler/file/AliOssFileHandler.java
Patch:
@@ -127,6 +127,6 @@ public void delete(String key) {
 
     @Override
     public boolean supportType(AttachmentType type) {
-        return AttachmentType.ALIYUN.equals(type);
+        return AttachmentType.ALIOSS.equals(type);
     }
 }

File: src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java
Patch:
@@ -129,6 +129,6 @@ public void delete(String key) {
 
     @Override
     public boolean supportType(AttachmentType type) {
-        return AttachmentType.BAIDUYUN.equals(type);
+        return AttachmentType.BAIDUBOS.equals(type);
     }
 }

File: src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java
Patch:
@@ -155,6 +155,6 @@ public void delete(String key) {
 
     @Override
     public boolean supportType(AttachmentType type) {
-        return AttachmentType.QNYUN.equals(type);
+        return AttachmentType.QINIUOSS.equals(type);
     }
 }

File: src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java
Patch:
@@ -142,6 +142,6 @@ public void delete(String key) {
 
     @Override
     public boolean supportType(AttachmentType type) {
-        return AttachmentType.TENCENTYUN.equals(type);
+        return AttachmentType.TENCENTCOS.equals(type);
     }
 }

File: src/main/java/run/halo/app/handler/file/UpOssFileHandler.java
Patch:
@@ -125,6 +125,6 @@ public void delete(String key) {
 
     @Override
     public boolean supportType(AttachmentType type) {
-        return AttachmentType.UPYUN.equals(type);
+        return AttachmentType.UPOSS.equals(type);
     }
 }

File: src/main/java/run/halo/app/handler/migrate/OldVersionMigrateHandler.java
Patch:
@@ -624,9 +624,9 @@ private List<Attachment> handleAttachments(@Nullable Object attachmentsObject) {
             // Set location
             String attachLocation = attachmentMap.getOrDefault("attachLocation", "").toString();
             if (StringUtils.equalsIgnoreCase(attachLocation, "qiniu")) {
-                attachment.setType(AttachmentType.QNYUN);
+                attachment.setType(AttachmentType.QINIUOSS);
             } else if (StringUtils.equalsIgnoreCase(attachLocation, "upyun")) {
-                attachment.setType(AttachmentType.UPYUN);
+                attachment.setType(AttachmentType.UPOSS);
             } else {
                 attachment.setType(AttachmentType.LOCAL);
             }

File: src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java
Patch:
@@ -634,9 +634,9 @@ private List<Attachment> handleAttachments(@Nullable Object attachmentsObject) {
             // Set location
             String attachLocation = attachmentMap.getOrDefault("attachLocation", "").toString();
             if (StringUtils.equalsIgnoreCase(attachLocation, "qiniu")) {
-                attachment.setType(AttachmentType.QNYUN);
+                attachment.setType(AttachmentType.QINIUOSS);
             } else if (StringUtils.equalsIgnoreCase(attachLocation, "upyun")) {
-                attachment.setType(AttachmentType.UPYUN);
+                attachment.setType(AttachmentType.UPOSS);
             } else {
                 attachment.setType(AttachmentType.LOCAL);
             }

File: src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java
Patch:
@@ -92,7 +92,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
                 .addResourceLocations(workDir + "upload/");
         registry.addResourceHandler(haloProperties.getBackupUrlPrefix() + "/**")
                 .addResourceLocations(workDir + "backup/", backupDir);
-        registry.addResourceHandler("/halo" + haloProperties.getAdminPath() + "/**")
+        registry.addResourceHandler(haloProperties.getAdminPath() + "/**")
                 .addResourceLocations(workDir + HALO_ADMIN_RELATIVE_PATH)
                 .addResourceLocations("classpath:/admin/");
 

File: src/main/java/run/halo/app/listener/StartedListener.java
Patch:
@@ -52,7 +52,7 @@ private void printStartInfo() {
         String blogUrl = optionService.getBlogBaseUrl();
 
         log.info("Halo started at         {}", blogUrl);
-        log.info("Halo admin started at   {}/halo{}", blogUrl, haloProperties.getAdminPath());
+        log.info("Halo admin started at   {}{}", blogUrl, haloProperties.getAdminPath());
         if (!haloProperties.isDocDisabled()) {
             log.debug("Halo doc was enable at  {}/swagger-ui.html", blogUrl);
         }

File: src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java
Patch:
@@ -92,7 +92,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {
                 .addResourceLocations(workDir + "upload/");
         registry.addResourceHandler(haloProperties.getBackupUrlPrefix() + "/**")
                 .addResourceLocations(workDir + "backup/", backupDir);
-        registry.addResourceHandler(haloProperties.getAdminPath() + "/**")
+        registry.addResourceHandler("/halo" + haloProperties.getAdminPath() + "/**")
                 .addResourceLocations(workDir + HALO_ADMIN_RELATIVE_PATH)
                 .addResourceLocations("classpath:/admin/");
 

File: src/main/java/run/halo/app/service/base/AbstractCrudService.java
Patch:
@@ -290,7 +290,7 @@ public void remove(DOMAIN domain) {
     @Override
     public void removeInBatch(Collection<ID> ids) {
         if (CollectionUtils.isEmpty(ids)) {
-            log.warn(domainName + " id collection is empty");
+            log.debug(domainName + " id collection is empty");
             return;
         }
 
@@ -305,7 +305,7 @@ public void removeInBatch(Collection<ID> ids) {
     @Override
     public void removeAll(Collection<DOMAIN> domains) {
         if (CollectionUtils.isEmpty(domains)) {
-            log.warn(domainName + " collection is empty");
+            log.debug(domainName + " collection is empty");
             return;
         }
         repository.deleteInBatch(domains);

File: src/main/java/run/halo/app/event/logger/LogEventListener.java
Patch:
@@ -26,6 +26,7 @@ public LogEventListener(LogService logService) {
     public void onApplicationEvent(LogEvent event) {
         // Convert to log
         Log logToCreate = event.getLogParam().convertTo();
+
         // Create log
         logService.create(logToCreate);
     }

File: src/main/java/run/halo/app/model/entity/Log.java
Patch:
@@ -60,7 +60,8 @@ public void prePersist() {
         }
 
         // Get ip address
-        ipAddress = ServletUtils.getRequestIp();
+        // ###!!! Do not get request IP from here due to asynchronous
+        // ipAddress = ServletUtils.getRequestIp();
 
         if (ipAddress == null) {
             logKey = "";

File: src/main/java/run/halo/app/model/entity/BasePost.java
Patch:
@@ -48,15 +48,15 @@ public class BasePost extends BaseEntity {
     /**
      * Original content,not format.
      */
-    @Column(name = "original_content", columnDefinition = "text not null")
+    @Column(name = "original_content", columnDefinition = "longtext not null")
     private String originalContent;
 
     /**
      * Rendered content.
      *
      * @see run.halo.app.utils.MarkdownUtils#renderHtml(String)
      */
-    @Column(name = "format_content", columnDefinition = "text not null")
+    @Column(name = "format_content", columnDefinition = "longtext not null")
     private String formatContent;
 
     /**

File: src/main/java/run/halo/app/model/entity/Attachment.java
Patch:
@@ -52,7 +52,7 @@ public class Attachment extends BaseEntity {
     /**
      * Attachment media type.
      */
-    @Column(name = "media_type", columnDefinition = "varchar(50) not null")
+    @Column(name = "media_type", columnDefinition = "varchar(127) not null")
     private String mediaType;
 
     /**

File: src/main/java/run/halo/app/service/impl/UserServiceImpl.java
Patch:
@@ -75,7 +75,7 @@ public Optional<User> getByUsername(String username) {
 
     @Override
     public User getByUsernameOfNonNull(String username) {
-        return getByUsername(username).orElseThrow(() -> new NotFoundException("The username dose not exist").setErrorData(username));
+        return getByUsername(username).orElseThrow(() -> new NotFoundException("The username does not exist").setErrorData(username));
     }
 
     @Override
@@ -85,7 +85,7 @@ public Optional<User> getByEmail(String email) {
 
     @Override
     public User getByEmailOfNonNull(String email) {
-        return getByEmail(email).orElseThrow(() -> new NotFoundException("The email dose not exist").setErrorData(email));
+        return getByEmail(email).orElseThrow(() -> new NotFoundException("The email does not exist").setErrorData(email));
     }
 
     @Override

File: src/main/java/run/halo/app/service/impl/UserServiceImpl.java
Patch:
@@ -75,7 +75,7 @@ public Optional<User> getByUsername(String username) {
 
     @Override
     public User getByUsernameOfNonNull(String username) {
-        return getByUsername(username).orElseThrow(() -> new NotFoundException("The username dose not exist").setErrorData(username));
+        return getByUsername(username).orElseThrow(() -> new NotFoundException("The username does not exist").setErrorData(username));
     }
 
     @Override
@@ -85,7 +85,7 @@ public Optional<User> getByEmail(String email) {
 
     @Override
     public User getByEmailOfNonNull(String email) {
-        return getByEmail(email).orElseThrow(() -> new NotFoundException("The email dose not exist").setErrorData(email));
+        return getByEmail(email).orElseThrow(() -> new NotFoundException("The email does not exist").setErrorData(email));
     }
 
     @Override

File: src/main/java/run/halo/app/service/BackupService.java
Patch:
@@ -19,5 +19,5 @@ public interface BackupService {
      * @param file file
      * @return post info
      */
-    BasePostDetailDTO importMarkdowns(MultipartFile file) throws IOException;
+    BasePostDetailDTO importMarkdown(MultipartFile file) throws IOException;
 }

File: src/main/java/run/halo/app/service/impl/BackupServiceImpl.java
Patch:
@@ -26,7 +26,7 @@ public BackupServiceImpl(PostService postService) {
     }
 
     @Override
-    public BasePostDetailDTO importMarkdowns(MultipartFile file) throws IOException {
+    public BasePostDetailDTO importMarkdown(MultipartFile file) throws IOException {
 
         // Read markdown content.
         String markdown = IoUtil.read(file.getInputStream(), StandardCharsets.UTF_8);

File: src/main/java/run/halo/app/controller/admin/api/JournalController.java
Patch:
@@ -51,7 +51,7 @@ public JournalController(JournalService journalService,
 
     @GetMapping
     @ApiOperation("Lists journals")
-    public Page<JournalWithCmtCountDTO> pageBy(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable,
+    public Page<JournalWithCmtCountDTO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable,
                                                JournalQuery journalQuery) {
         Page<Journal> journalPage = journalService.pageBy(journalQuery, pageable);
         return journalService.convertToCmtCountDto(journalPage);

File: src/main/java/run/halo/app/model/dto/JournalDTO.java
Patch:
@@ -3,6 +3,7 @@
 import lombok.Data;
 import run.halo.app.model.dto.base.OutputConverter;
 import run.halo.app.model.entity.Journal;
+import run.halo.app.model.enums.JournalType;
 
 import java.util.Date;
 
@@ -22,4 +23,6 @@ public class JournalDTO implements OutputConverter<JournalDTO, Journal> {
     private Long likes;
 
     private Date createTime;
+
+    private JournalType type;
 }

File: src/main/java/run/halo/app/model/properties/PropertyEnum.java
Patch:
@@ -29,7 +29,7 @@ public interface PropertyEnum extends ValueEnum<String> {
      */
     @SuppressWarnings("unchecked")
     static <T> T convertTo(@NonNull String value, @NonNull Class<T> type) {
-        Assert.hasText(value, "Value must not be null");
+        Assert.notNull(value, "Value must not be null");
         Assert.notNull(type, "Type must not be null");
 
         if (type.isAssignableFrom(String.class)) {

File: src/main/java/run/halo/app/model/params/PostParam.java
Patch:
@@ -62,7 +62,7 @@ public class PostParam implements InputConverter<Post> {
     @Override
     public Post convertTo() {
         if (StringUtils.isBlank(url)) {
-            url = title;
+            url = title.replace(".","");
         }
         if (null == thumbnail) {
             thumbnail = "";
@@ -80,7 +80,7 @@ public Post convertTo() {
     @Override
     public void update(Post post) {
         if (StringUtils.isBlank(url)) {
-            url = title;
+            url = title.replace(".","");
         }
         if (null == thumbnail) {
             thumbnail = "";

File: src/main/java/run/halo/app/service/impl/AdminServiceImpl.java
Patch:
@@ -194,7 +194,7 @@ public void clearToken() {
     @Override
     public StatisticDTO getCount() {
         StatisticDTO statisticDTO = new StatisticDTO();
-        statisticDTO.setPostCount(postService.countByStatus(PostStatus.PUBLISHED));
+        statisticDTO.setPostCount(postService.countByStatus(PostStatus.PUBLISHED) + sheetService.countByStatus(PostStatus.PUBLISHED));
         statisticDTO.setAttachmentCount(attachmentService.count());
 
         // Handle comment count

File: src/main/java/run/halo/app/controller/admin/api/ThemeController.java
Patch:
@@ -6,6 +6,7 @@
 import org.springframework.web.multipart.MultipartFile;
 import run.halo.app.handler.theme.config.support.Group;
 import run.halo.app.handler.theme.config.support.ThemeProperty;
+import run.halo.app.model.params.ThemeContentParam;
 import run.halo.app.model.support.BaseResponse;
 import run.halo.app.model.support.ThemeFile;
 import run.halo.app.service.ThemeService;
@@ -63,9 +64,8 @@ public BaseResponse<String> getContentBy(@RequestParam(name = "path") String pat
     }
 
     @PutMapping("files/content")
-    public void updateContentBy(@RequestParam(name = "path") String path,
-                                @RequestBody String content) {
-        themeService.saveTemplateContent(path, content);
+    public void updateContentBy(@RequestBody ThemeContentParam param) {
+        themeService.saveTemplateContent(param.getPath(), param.getContent());
     }
 
     @GetMapping("files/custom")

File: src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java
Patch:
@@ -4,7 +4,6 @@
 import lombok.EqualsAndHashCode;
 import lombok.ToString;
 import run.halo.app.model.enums.PostCreateFrom;
-import run.halo.app.model.enums.PostType;
 
 /**
  * Base page simple output dto.

File: src/main/java/run/halo/app/model/properties/PropertyEnum.java
Patch:
@@ -57,7 +57,7 @@ static <T> T convertTo(@NonNull String value, @NonNull Class<T> type) {
         }
 
         if (type.isAssignableFrom(Double.class)) {
-            return (T) Byte.valueOf(value);
+            return (T) Double.valueOf(value);
         }
 
         if (type.isAssignableFrom(Float.class)) {

File: src/main/java/run/halo/app/handler/file/UpYunFileHandler.java
Patch:
@@ -77,7 +77,7 @@ public UploadResult upload(MultipartFile file) {
             // Build upload result
             UploadResult uploadResult = new UploadResult();
             uploadResult.setFilename(basename);
-            uploadResult.setFilePath(StringUtils.isBlank(filePath) ? filePath : filePath + ossStyleRule);
+            uploadResult.setFilePath(StringUtils.isBlank(ossStyleRule) ? filePath : filePath + ossStyleRule);
             uploadResult.setKey(upFilePath);
             uploadResult.setMediaType(MediaType.valueOf(Objects.requireNonNull(file.getContentType())));
             uploadResult.setSuffix(extension);
@@ -88,7 +88,7 @@ public UploadResult upload(MultipartFile file) {
                 BufferedImage image = ImageIO.read(file.getInputStream());
                 uploadResult.setWidth(image.getWidth());
                 uploadResult.setHeight(image.getHeight());
-                uploadResult.setThumbPath(StringUtils.isBlank(ossStyleRule) ? filePath : filePath + ossThumbnailStyleRule);
+                uploadResult.setThumbPath(StringUtils.isBlank(ossThumbnailStyleRule) ? filePath : filePath + ossThumbnailStyleRule);
             }
 
             return uploadResult;
@@ -102,7 +102,6 @@ public void delete(String key) {
         Assert.notNull(key, "File key must not be blank");
 
         // Get config
-        // String ossSource = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_SOURCE).toString();
         String ossPassword = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_PASSWORD).toString();
         String ossBucket = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_BUCKET).toString();
         String ossOperator = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_OPERATOR).toString();

File: src/main/java/run/halo/app/model/enums/InputType.java
Patch:
@@ -21,7 +21,9 @@ public enum InputType {
 
     TEXTAREA,
 
-    COLOR;
+    COLOR,
+
+    ATTACHMENT;
 
     /**
      * Convert type to input type.

File: src/main/java/run/halo/app/model/params/JournalQuery.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.model.params;
 
 import lombok.Data;
+import run.halo.app.model.enums.JournalType;
 
 /**
  * Journal query params.
@@ -15,4 +16,6 @@ public class JournalQuery {
      * Keyword.
      */
     private String keyword;
+
+    private JournalType type;
 }

File: src/main/java/run/halo/app/model/entity/SheetMeta.java
Patch:
@@ -11,6 +11,6 @@
  * @date 2019-08-04
  */
 @Entity(name = "SheetMeta")
-@DiscriminatorValue("0")
+@DiscriminatorValue("1")
 public class SheetMeta extends BaseMeta {
 }

File: src/main/java/run/halo/app/model/dto/post/BasePostMinimalDTO.java
Patch:
@@ -28,8 +28,6 @@ public class BasePostMinimalDTO implements OutputConverter<BasePostMinimalDTO, B
 
     private String url;
 
-    private PostType type;
-
     private Date updateTime;
 
     private Date createTime;

File: src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java
Patch:
@@ -16,8 +16,6 @@
 @EqualsAndHashCode(callSuper = true)
 public class BasePostSimpleDTO extends BasePostMinimalDTO {
 
-    private PostType type;
-
     private String summary;
 
     private String thumbnail;

File: src/main/java/run/halo/app/model/enums/PostType.java
Patch:
@@ -5,6 +5,7 @@
  *
  * @author johnniang
  */
+@Deprecated
 public enum PostType implements ValueEnum<Integer> {
 
     /**

File: src/main/java/run/halo/app/model/enums/converter/PostTypeConverter.java
Patch:
@@ -11,6 +11,7 @@
  * @date 3/27/19
  */
 @Converter(autoApply = true)
+@Deprecated
 public class PostTypeConverter extends AbstractConverter<PostType, Integer> {
 
     public PostTypeConverter() {

File: src/main/java/run/halo/app/controller/admin/api/SheetController.java
Patch:
@@ -44,7 +44,7 @@ public BasePostDetailDTO getBy(@PathVariable("sheetId") Integer sheetId) {
 
     @GetMapping
     @ApiOperation("Gets a page of sheet")
-    public Page<SheetListVO> pageBy(@PageableDefault(sort = "editTime", direction = DESC) Pageable pageable) {
+    public Page<SheetListVO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable) {
         Page<Sheet> sheetPage = sheetService.pageBy(pageable);
         return sheetService.convertToListVo(sheetPage);
     }

File: src/main/java/run/halo/app/controller/admin/api/PostController.java
Patch:
@@ -38,7 +38,7 @@ public PostController(PostService postService) {
 
     @GetMapping
     @ApiOperation("Lists posts")
-    public Page<PostListVO> pageBy(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable,
+    public Page<PostListVO> pageBy(@PageableDefault(sort = "createTime", direction = DESC) Pageable pageable,
                                    PostQuery postQuery) {
         Page<Post> postPage = postService.pageBy(postQuery, pageable);
         return postService.convertToListVo(postPage);
@@ -54,7 +54,7 @@ public List<BasePostMinimalDTO> pageLatest(@RequestParam(name = "top", defaultVa
     @ApiOperation("Gets a page of post by post status")
     public Page<? extends BasePostSimpleDTO> pageByStatus(@PathVariable(name = "status") PostStatus status,
                                                           @RequestParam(value = "more", required = false, defaultValue = "false") Boolean more,
-                                                          @PageableDefault(sort = "editTime", direction = DESC) Pageable pageable) {
+                                                          @PageableDefault(sort = "createTime", direction = DESC) Pageable pageable) {
         Page<Post> posts = postService.pageBy(status, pageable);
 
         if (more) {

File: src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java
Patch:
@@ -137,7 +137,7 @@ public Optional<POST> getNextPost(Date date) {
     public Page<POST> pageLatest(int top) {
         Assert.isTrue(top > 0, "Top number must not be less than 0");
 
-        PageRequest latestPageable = PageRequest.of(0, top, Sort.by(DESC, "editTime"));
+        PageRequest latestPageable = PageRequest.of(0, top, Sort.by(DESC, "createTime"));
 
         return listAll(latestPageable);
     }
@@ -152,7 +152,7 @@ public Page<POST> pageLatest(int top) {
     public List<POST> listLatest(int top) {
         Assert.isTrue(top > 0, "Top number must not be less than 0");
 
-        PageRequest latestPageable = PageRequest.of(0, top, Sort.by(DESC, "editTime"));
+        PageRequest latestPageable = PageRequest.of(0, top, Sort.by(DESC, "createTime"));
         return basePostRepository.findAllByStatus(PostStatus.PUBLISHED, latestPageable).getContent();
     }
 

File: src/main/java/run/halo/app/controller/content/ContentSearchController.java
Patch:
@@ -22,7 +22,7 @@
 import static org.springframework.data.domain.Sort.Direction.DESC;
 
 /**
- * Search Controller
+ * Search controller.
  *
  * @author ryanwang
  * @date : 2019-04-21

File: src/main/java/run/halo/app/controller/content/ContentTagController.java
Patch:
@@ -13,13 +13,14 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import run.halo.app.model.entity.Post;
 import run.halo.app.model.entity.Tag;
+import run.halo.app.model.enums.PostStatus;
 import run.halo.app.model.vo.PostListVO;
 import run.halo.app.service.*;
 
 import static org.springframework.data.domain.Sort.Direction.DESC;
 
 /**
- * Tag Controller
+ * Tag controller.
  *
  * @author ryanwang
  * @date : 2019-03-21
@@ -91,7 +92,7 @@ public String tags(Model model,
         final Tag tag = tagService.getBySlugNameOfNonNull(slugName);
 
         final Pageable pageable = PageRequest.of(page - 1, optionService.getPostPageSize(), sort);
-        Page<Post> postPage = postTagService.pagePostsBy(tag.getId(), pageable);
+        Page<Post> postPage = postTagService.pagePostsBy(tag.getId(), PostStatus.PUBLISHED, pageable);
         Page<PostListVO> posts = postService.convertToListVo(postPage);
         final int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);
 

File: src/main/java/run/halo/app/controller/content/api/CategoryController.java
Patch:
@@ -11,6 +11,7 @@
 import run.halo.app.model.dto.post.BasePostSimpleDTO;
 import run.halo.app.model.entity.Category;
 import run.halo.app.model.entity.Post;
+import run.halo.app.model.enums.PostStatus;
 import run.halo.app.service.CategoryService;
 import run.halo.app.service.PostCategoryService;
 import run.halo.app.service.PostService;
@@ -60,7 +61,7 @@ public Page<BasePostSimpleDTO> listPostsBy(@PathVariable("slugName") String slug
         // Get category by slug name
         Category category = categoryService.getBySlugNameOfNonNull(slugName);
 
-        Page<Post> postPage = postCategoryService.pagePostBy(category.getId(), pageable);
+        Page<Post> postPage = postCategoryService.pagePostBy(category.getId(), PostStatus.PUBLISHED, pageable);
         return postService.convertToSimple(postPage);
     }
 }

File: src/main/java/run/halo/app/controller/content/api/TagController.java
Patch:
@@ -12,6 +12,7 @@
 import run.halo.app.model.dto.post.BasePostSimpleDTO;
 import run.halo.app.model.entity.Post;
 import run.halo.app.model.entity.Tag;
+import run.halo.app.model.enums.PostStatus;
 import run.halo.app.service.PostService;
 import run.halo.app.service.PostTagService;
 import run.halo.app.service.TagService;
@@ -24,6 +25,7 @@
  * Portal tag controller.
  *
  * @author johnniang
+ * @author ryanwang
  * @date 4/2/19
  */
 @RestController("ApiContentTagController")
@@ -63,7 +65,7 @@ public Page<BasePostSimpleDTO> listPostsBy(@PathVariable("slugName") String slug
         Tag tag = tagService.getBySlugNameOfNonNull(slugName);
 
         // Get posts, convert and return
-        Page<Post> postPage = postTagService.pagePostsBy(tag.getId(), pageable);
+        Page<Post> postPage = postTagService.pagePostsBy(tag.getId(), PostStatus.PUBLISHED, pageable);
         return postService.convertToSimple(postPage);
     }
 }

File: src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java
Patch:
@@ -3,6 +3,7 @@
 import freemarker.core.Environment;
 import freemarker.template.*;
 import org.springframework.stereotype.Component;
+import run.halo.app.model.enums.PostStatus;
 import run.halo.app.model.support.HaloConst;
 import run.halo.app.service.PostCategoryService;
 import run.halo.app.service.PostService;
@@ -57,11 +58,11 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
                     break;
                 case "listByCategoryId":
                     Integer categoryId = Integer.parseInt(params.get("categoryId").toString());
-                    env.setVariable("posts", builder.build().wrap(postCategoryService.listPostBy(categoryId)));
+                    env.setVariable("posts", builder.build().wrap(postCategoryService.listPostBy(categoryId, PostStatus.PUBLISHED)));
                     break;
                 case "listByTagId":
                     Integer tagId = Integer.parseInt(params.get("tagId").toString());
-                    env.setVariable("posts", builder.build().wrap(postTagService.listPostsBy(tagId)));
+                    env.setVariable("posts", builder.build().wrap(postTagService.listPostsBy(tagId, PostStatus.PUBLISHED)));
                     break;
                 default:
                     break;

File: src/main/java/run/halo/app/service/impl/PostServiceImpl.java
Patch:
@@ -463,7 +463,7 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {
             PostListVO postListVO = new PostListVO().convertFrom(post);
 
             if (StringUtils.isBlank(postListVO.getSummary())) {
-                // TODO Set summary
+                postListVO.setSummary(generateSummary(post.getFormatContent()));
             }
 
             Optional.ofNullable(tagListMap.get(post.getId())).orElseGet(LinkedList::new);

File: src/main/java/run/halo/app/controller/content/ContentCategoryController.java
Patch:
@@ -85,7 +85,7 @@ public String categories(Model model,
                              @PathVariable("page") Integer page,
                              @SortDefault(sort = "createTime", direction = DESC) Sort sort) {
         // Get category by slug name
-        final Category category = categoryService.getBySlugName(slugName);
+        final Category category = categoryService.getBySlugNameOfNonNull(slugName);
 
         final Pageable pageable = PageRequest.of(page - 1, optionService.getPostPageSize(), sort);
         Page<Post> postPage = postCategoryService.pagePostBy(category.getId(), pageable);

File: src/main/java/run/halo/app/controller/content/api/CategoryController.java
Patch:
@@ -58,7 +58,7 @@ public List<? extends CategoryDTO> listCategories(@SortDefault(sort = "updateTim
     public Page<BasePostSimpleDTO> listPostsBy(@PathVariable("slugName") String slugName,
                                                @PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable) {
         // Get category by slug name
-        Category category = categoryService.getBySlugName(slugName);
+        Category category = categoryService.getBySlugNameOfNonNull(slugName);
 
         Page<Post> postPage = postCategoryService.pagePostBy(category.getId(), pageable);
         return postService.convertToSimple(postPage);

File: src/main/java/run/halo/app/service/AdminService.java
Patch:
@@ -7,11 +7,11 @@
 import run.halo.app.security.token.AuthToken;
 
 /**
- * Admin service.
+ * Admin service interface.
  *
  * @author johnniang
  * @author ryanwang
- * @date 19-4-29
+ * @date 2019-04-29
  */
 public interface AdminService {
 

File: src/main/java/run/halo/app/service/AttachmentService.java
Patch:
@@ -17,6 +17,7 @@
  * Attachment service.
  *
  * @author johnniang
+ * @date : 2019-03-14
  */
 public interface AttachmentService extends CrudService<Attachment, Integer> {
 

File: src/main/java/run/halo/app/service/BackupService.java
Patch:
@@ -9,7 +9,7 @@
  * Backup service interface.
  *
  * @author johnniang
- * @date 19-4-26
+ * @date 2019-04-26
  */
 public interface BackupService {
 

File: src/main/java/run/halo/app/service/JournalCommentService.java
Patch:
@@ -13,7 +13,7 @@
  * Journal comment service interface.
  *
  * @author johnniang
- * @date 19-4-25
+ * @date 2019-04-25
  */
 public interface JournalCommentService extends BaseCommentService<JournalComment> {
 

File: src/main/java/run/halo/app/service/JournalService.java
Patch:
@@ -18,7 +18,7 @@
  *
  * @author johnniang
  * @author ryanwang
- * @date 19-4-24
+ * @date 2019-04-24
  */
 public interface JournalService extends CrudService<Journal, Integer> {
 

File: src/main/java/run/halo/app/service/LinkService.java
Patch:
@@ -11,9 +11,10 @@
 import java.util.List;
 
 /**
- * Link service.
+ * Link service interface.
  *
  * @author johnniang
+ * @date 2019-03-14
  */
 public interface LinkService extends CrudService<Link, Integer> {
 

File: src/main/java/run/halo/app/service/LogService.java
Patch:
@@ -6,9 +6,10 @@
 import run.halo.app.service.base.CrudService;
 
 /**
- * Log service.
+ * Log service interface.
  *
  * @author johnniang
+ * @date 2019-03-14
  */
 public interface LogService extends CrudService<Log, Long> {
 

File: src/main/java/run/halo/app/service/MailService.java
Patch:
@@ -3,10 +3,10 @@
 import java.util.Map;
 
 /**
- * Mail server
+ * Mail service interface.
  *
  * @author ryanwang
- * @date : 2019-03-17
+ * @date 2019-03-17
  */
 public interface MailService {
 

File: src/main/java/run/halo/app/service/MenuService.java
Patch:
@@ -11,10 +11,11 @@
 import java.util.List;
 
 /**
- * Menu service.
+ * Menu service interface.
  *
  * @author johnniang
  * @author ryanwang
+ * @date 2019-03-14
  */
 public interface MenuService extends CrudService<Menu, Integer> {
 

File: src/main/java/run/halo/app/service/OptionService.java
Patch:
@@ -18,9 +18,10 @@
 import java.util.Optional;
 
 /**
- * Option service.
+ * Option service interface.
  *
  * @author johnniang
+ * @date 2019-03-14
  */
 public interface OptionService extends CrudService<Option, Integer> {
 

File: src/main/java/run/halo/app/service/PhotoService.java
Patch:
@@ -14,9 +14,10 @@
 import java.util.List;
 
 /**
- * Photo service.
+ * Photo service interface.
  *
  * @author johnniang
+ * @date 2019-03-14
  */
 public interface PhotoService extends CrudService<Photo, Integer> {
 

File: src/main/java/run/halo/app/service/PostCategoryService.java
Patch:
@@ -21,7 +21,7 @@
  * Post category service interface.
  *
  * @author johnniang
- * @date 3/19/19
+ * @date 2019-03-19
  */
 public interface PostCategoryService extends CrudService<PostCategory, Integer> {
 

File: src/main/java/run/halo/app/service/PostCommentService.java
Patch:
@@ -12,9 +12,10 @@
 import java.util.List;
 
 /**
- * PostComment service.
+ * Post comment service interface.
  *
  * @author johnniang
+ * @date 2019-03-14
  */
 public interface PostCommentService extends BaseCommentService<PostComment> {
 

File: src/main/java/run/halo/app/service/PostService.java
Patch:
@@ -17,10 +17,11 @@
 import java.util.Set;
 
 /**
- * Post service.
+ * Post service interface.
  *
  * @author johnniang
  * @author ryanwang
+ * @date 2019-03-14
  */
 public interface PostService extends BasePostService<Post> {
 

File: src/main/java/run/halo/app/service/PostTagService.java
Patch:
@@ -21,7 +21,7 @@
  * Post tag service interface.
  *
  * @author johnniang
- * @date 3/19/19
+ * @date 2019-03-19
  */
 public interface PostTagService extends CrudService<PostTag, Integer> {
 

File: src/main/java/run/halo/app/service/RecoveryService.java
Patch:
@@ -7,7 +7,7 @@
  * Recovery service interface.
  *
  * @author johnniang
- * @date 19-4-26
+ * @date 2019-04-26
  */
 public interface RecoveryService {
 

File: src/main/java/run/halo/app/service/SheetCommentService.java
Patch:
@@ -13,7 +13,7 @@
  * Sheet comment service interface.
  *
  * @author johnniang
- * @date 19-4-24
+ * @date 2019-04-24
  */
 public interface SheetCommentService extends BaseCommentService<SheetComment> {
 

File: src/main/java/run/halo/app/service/SheetService.java
Patch:
@@ -15,7 +15,7 @@
  *
  * @author johnniang
  * @author ryanwang
- * @date 19-4-24
+ * @date 2019-04-24
  */
 public interface SheetService extends BasePostService<Sheet> {
 

File: src/main/java/run/halo/app/service/ThemeService.java
Patch:
@@ -14,8 +14,10 @@
 import java.util.Set;
 
 /**
+ * Theme service interface.
+ *
  * @author ryanwang
- * @date : 2019/3/26
+ * @date 2019-03-26
  */
 public interface ThemeService {
 

File: src/main/java/run/halo/app/service/ThemeSettingService.java
Patch:
@@ -12,7 +12,7 @@
  * Theme setting service interface.
  *
  * @author johnniang
- * @date 4/8/19
+ * @date 2019-04-08
  */
 public interface ThemeSettingService {
 

File: src/main/java/run/halo/app/service/TraceService.java
Patch:
@@ -9,7 +9,7 @@
  * Trace service interface.
  *
  * @author johnniang
- * @date 19-6-18
+ * @date 2019-06-18
  */
 public interface TraceService {
 

File: src/main/java/run/halo/app/service/UserService.java
Patch:
@@ -11,9 +11,10 @@
 import java.util.Optional;
 
 /**
- * User service.
+ * User service interface.
  *
  * @author johnniang
+ * @date 2019-03-14
  */
 public interface UserService extends CrudService<User, Integer> {
 

File: src/main/java/run/halo/app/service/impl/AdminServiceImpl.java
Patch:
@@ -51,7 +51,7 @@
  *
  * @author johnniang
  * @author ryanwang
- * @date 19-4-29
+ * @date 2019-04-29
  */
 @Slf4j
 @Service

File: src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java
Patch:
@@ -32,6 +32,7 @@
  * AttachmentService implementation
  *
  * @author ryanwang
+ * @author johnniang
  * @date : 2019-03-14
  */
 @Slf4j

File: src/main/java/run/halo/app/service/impl/BackupServiceImpl.java
Patch:
@@ -14,7 +14,7 @@
  * Backup service implementation.
  *
  * @author johnniang
- * @date 19-4-26
+ * @date 2019-04-26
  */
 @Service
 public class BackupServiceImpl implements BackupService {

File: src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java
Patch:
@@ -51,7 +51,7 @@
  * Base comment service implementation.
  *
  * @author johnniang
- * @date 19-4-24
+ * @date 2019-04-24
  */
 @Slf4j
 public abstract class BaseCommentServiceImpl<COMMENT extends BaseComment> extends AbstractCrudService<COMMENT, Long> implements BaseCommentService<COMMENT> {

File: src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java
Patch:
@@ -40,7 +40,7 @@
  * Base post service implementation.
  *
  * @author johnniang
- * @date 19-4-24
+ * @date 2019-04-24
  */
 @Slf4j
 public abstract class BasePostServiceImpl<POST extends BasePost> extends AbstractCrudService<POST, Integer> implements BasePostService<POST> {

File: src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java
Patch:
@@ -28,7 +28,7 @@
  * Journal comment service implementation.
  *
  * @author johnniang
- * @date 19-4-25
+ * @date 2019-04-25
  */
 @Service
 public class JournalCommentServiceImpl extends BaseCommentServiceImpl<JournalComment> implements JournalCommentService {

File: src/main/java/run/halo/app/service/impl/JournalServiceImpl.java
Patch:
@@ -29,7 +29,7 @@
  *
  * @author johnniang
  * @author ryanwang
- * @date 19-4-24
+ * @date 2019-04-24
  */
 @Service
 public class JournalServiceImpl extends AbstractCrudService<Journal, Integer> implements JournalService {

File: src/main/java/run/halo/app/service/impl/LinkServiceImpl.java
Patch:
@@ -24,7 +24,7 @@
  * LinkService implementation class
  *
  * @author ryanwang
- * @date : 2019-03-14
+ * @date 2019-03-14
  */
 @Service
 public class LinkServiceImpl extends AbstractCrudService<Link, Integer> implements LinkService {

File: src/main/java/run/halo/app/service/impl/LogServiceImpl.java
Patch:
@@ -15,7 +15,7 @@
  * LogService implementation class
  *
  * @author ryanwang
- * @date : 2019-03-14
+ * @date 2019-03-14
  */
 @Service
 public class LogServiceImpl extends AbstractCrudService<Log, Long> implements LogService {

File: src/main/java/run/halo/app/service/impl/MailServiceImpl.java
Patch:
@@ -20,7 +20,7 @@
  * Mail service implementation.
  *
  * @author ryanwang
- * @date : 2019-03-17
+ * @date 2019-03-17
  */
 @Slf4j
 @Service

File: src/main/java/run/halo/app/service/impl/MenuServiceImpl.java
Patch:
@@ -21,10 +21,10 @@
 import java.util.stream.Collectors;
 
 /**
- * MenuService implementation class
+ * MenuService implementation class.
  *
  * @author ryanwang
- * @date : 2019-03-14
+ * @date 2019-03-14
  */
 @Service
 public class MenuServiceImpl extends AbstractCrudService<Menu, Integer> implements MenuService {

File: src/main/java/run/halo/app/service/impl/OptionServiceImpl.java
Patch:
@@ -30,7 +30,7 @@
  * OptionService implementation class
  *
  * @author ryanwang
- * @date : 2019-03-14
+ * @date 2019-03-14
  */
 @Slf4j
 @Service

File: src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java
Patch:
@@ -29,7 +29,7 @@
  * PhotoService implementation class
  *
  * @author ryanwang
- * @date : 2019-03-14
+ * @date 2019-03-14
  */
 @Service
 public class PhotoServiceImpl extends AbstractCrudService<Photo, Integer> implements PhotoService {

File: src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java
Patch:
@@ -25,7 +25,7 @@
  * Post category service implementation.
  *
  * @author johnniang
- * @date 3/19/19
+ * @date 2019-03-19
  */
 @Service
 public class PostCategoryServiceImpl extends AbstractCrudService<PostCategory, Integer> implements PostCategoryService {

File: src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java
Patch:
@@ -32,7 +32,8 @@
  * PostCommentService implementation class
  *
  * @author ryanwang
- * @date : 2019-03-14
+ * @author johnniang
+ * @date 2019-03-14
  */
 @Slf4j
 @Service

File: src/main/java/run/halo/app/service/impl/PostServiceImpl.java
Patch:
@@ -45,6 +45,7 @@
  *
  * @author johnniang
  * @author ryanwang
+ * @date 2019-03-14
  */
 @Slf4j
 @Service

File: src/main/java/run/halo/app/service/impl/PostTagServiceImpl.java
Patch:
@@ -25,7 +25,7 @@
  * Post tag service implementation.
  *
  * @author johnniang
- * @date 3/19/19
+ * @date 2019-03-19
  */
 @Service
 public class PostTagServiceImpl extends AbstractCrudService<PostTag, Integer> implements PostTagService {

File: src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java
Patch:
@@ -29,7 +29,7 @@
  * Sheet comment service implementation.
  *
  * @author johnniang
- * @date 19-4-24
+ * @date 2019-04-24
  */
 @Service
 public class SheetCommentServiceImpl extends BaseCommentServiceImpl<SheetComment> implements SheetCommentService {

File: src/main/java/run/halo/app/service/impl/SheetServiceImpl.java
Patch:
@@ -31,7 +31,7 @@
  *
  * @author johnniang
  * @author ryanwang
- * @date 19-4-24
+ * @date 2019-04-24
  */
 @Service
 public class SheetServiceImpl extends BasePostServiceImpl<Sheet> implements SheetService {

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -53,7 +53,7 @@
  * Theme service implementation.
  *
  * @author ryanwang
- * @date : 2019/3/26
+ * @date 2019-03-26
  */
 @Slf4j
 @Service

File: src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java
Patch:
@@ -24,7 +24,7 @@
  * Theme setting service implementation.
  *
  * @author johnniang
- * @date 4/8/19
+ * @date 2019-04-08
  */
 @Slf4j
 @Service

File: src/main/java/run/halo/app/service/impl/UserServiceImpl.java
Patch:
@@ -31,10 +31,11 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * UserService implementation class
+ * UserService implementation class.
  *
  * @author ryanwang
- * @date : 2019-03-14
+ * @author johnniang
+ * @date 2019-03-14
  */
 @Service
 public class UserServiceImpl extends AbstractCrudService<User, Integer> implements UserService {

File: src/main/java/run/halo/app/controller/content/MainController.java
Patch:
@@ -15,7 +15,7 @@
 import java.io.IOException;
 
 /**
- * Admin page.
+ * Main controller.
  *
  * @author ryanwang
  * @date : 2019-04-23

File: src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java
Patch:
@@ -45,6 +45,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
                 case "listByPostId":
                     Integer postId = Integer.parseInt(params.get("postId").toString());
                     env.setVariable("categories", builder.build().wrap(postCategoryService.listCategoryBy(postId)));
+                    break;
                 case "count":
                     env.setVariable("count", builder.build().wrap(categoryService.count()));
                     break;

File: src/main/java/run/halo/app/controller/admin/api/InstallController.java
Patch:
@@ -196,6 +196,8 @@ private User createUser(InstallParam installParam) {
             installParam.update(user);
             // Set password manually
             userService.setPassword(user, installParam.getPassword());
+            // Set default avatar
+            userService.setDefaultAvatar(user);
             // Update user
             return userService.update(user);
         }).orElseGet(() -> userService.createBy(installParam));

File: src/main/java/run/halo/app/service/base/BasePostService.java
Patch:
@@ -182,7 +182,6 @@ public interface BasePostService<POST extends BasePost> extends CrudService<POST
     @Transactional
     void increaseLike(@NonNull Integer postId);
 
-
     /**
      * Creates or updates by post.
      *

File: src/test/java/run/halo/app/utils/PathsTest.java
Patch:
@@ -1,6 +1,5 @@
 package run.halo.app.utils;
 
-import io.micrometer.core.annotation.TimedSet;
 import org.junit.Test;
 
 import java.nio.file.Path;

File: src/main/java/run/halo/app/controller/content/ContentCategoryController.java
Patch:
@@ -52,7 +52,8 @@ public ContentCategoryController(CategoryService categoryService,
      * @return template path: themes/{theme}/categories.ftl
      */
     @GetMapping
-    public String categories() {
+    public String categories(Model model) {
+        model.addAttribute("is_categories", true);
         return themeService.render("categories");
     }
 
@@ -89,7 +90,7 @@ public String categories(Model model,
         Page<Post> posts = postCategoryService.pagePostBy(category.getId(), pageable);
         final int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);
 
-        model.addAttribute("is_categories", true);
+        model.addAttribute("is_category", true);
         model.addAttribute("posts", posts);
         model.addAttribute("rainbow", rainbow);
         model.addAttribute("category", category);

File: src/main/java/run/halo/app/controller/content/ContentSheetController.java
Patch:
@@ -60,7 +60,6 @@ public String links() {
      */
     @GetMapping(value = "/s/{url}")
     public String sheet(@PathVariable(value = "url") String url,
-                        @RequestParam(value = "cp", defaultValue = "1") Integer cp,
                         Model model) {
         Sheet sheet = sheetService.getBy(PostStatus.PUBLISHED, url);
 

File: src/main/java/run/halo/app/controller/content/ContentTagController.java
Patch:
@@ -56,7 +56,8 @@ public ContentTagController(TagService tagService,
      * @return template path: themes/{theme}/tags.ftl
      */
     @GetMapping
-    public String tags() {
+    public String tags(Model model) {
+        model.addAttribute("is_tags", true);
         return themeService.render("tags");
     }
 
@@ -93,7 +94,7 @@ public String tags(Model model,
         Page<PostListVO> posts = postService.convertToListVo(postPage);
         final int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);
 
-        model.addAttribute("is_tags", true);
+        model.addAttribute("is_tag", true);
         model.addAttribute("posts", posts);
         model.addAttribute("rainbow", rainbow);
         model.addAttribute("tag", tag);

File: src/main/java/run/halo/app/service/impl/PostServiceImpl.java
Patch:
@@ -330,6 +330,7 @@ public PostDetailVO importMarkdown(String markdown, String filename) {
                                 tag = tagService.create(tag);
                             }
                             tagIds.add(tag.getId());
+                            break;
                         case "categories":
                             Category category = categoryService.getByName(ele);
                             if (null == category) {

File: src/main/java/run/halo/app/service/impl/UserServiceImpl.java
Patch:
@@ -124,7 +124,7 @@ public User updatePassword(String oldPassword, String newPassword, Integer userI
         User updatedUser = update(user);
 
         // Log it
-        eventPublisher.publishEvent(new LogEvent(this, updatedUser.getId().toString(), LogType.PASSWORD_UPDATED, oldPassword));
+        eventPublisher.publishEvent(new LogEvent(this, updatedUser.getId().toString(), LogType.PASSWORD_UPDATED, HaloUtils.desensitize(oldPassword, 2, 1)));
 
         return updatedUser;
     }

File: src/main/java/run/halo/app/controller/base/ControllerExceptionHandler.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @author johnniang
  */
-@RestControllerAdvice
+@RestControllerAdvice({"run.halo.app.controller.admin.api", "run.halo.app.controller.content.api"})
 @Slf4j
 public class ControllerExceptionHandler {
 

File: src/main/java/run/halo/app/controller/core/CommonController.java
Patch:
@@ -53,11 +53,11 @@ public String handleError(HttpServletRequest request) {
             if (StringUtils.startsWithIgnoreCase(throwable.getMessage(), "Could not resolve view with name '")) {
                 // TODO May cause unknown-reason problem
                 // if Ftl was not found then redirect to /404
-                return "redirect:/404";
+                return contentNotFround();
             }
         }
 
-        return statusCode == 500 ? "redirect:/500" : "redirect:/404";
+        return statusCode == 500 ? contentInternalError() : contentNotFround();
     }
 
     /**

File: src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java
Patch:
@@ -34,7 +34,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
             switch (method) {
                 case "latest":
                     int top = Integer.parseInt(params.get("top").toString());
-                    env.setVariable("categories", builder.build().wrap(postCommentService.pageLatest(top)));
+                    env.setVariable("comments", builder.build().wrap(postCommentService.pageLatest(top)));
                     break;
                 case "count":
                     env.setVariable("count", builder.build().wrap(postCommentService.count()));

File: src/main/java/run/halo/app/controller/admin/api/JournalController.java
Patch:
@@ -50,7 +50,7 @@ public JournalController(JournalService journalService,
     }
 
     @GetMapping
-    @ApiOperation("Gets latest journals")
+    @ApiOperation("Lists journals")
     public Page<JournalWithCmtCountDTO> pageBy(@PageableDefault(sort = "updateTime", direction = DESC) Pageable pageable,
                                                JournalQuery journalQuery) {
         Page<Journal> journalPage = journalService.pageBy(journalQuery, pageable);

File: src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java
Patch:
@@ -80,7 +80,7 @@ private void getQiniuZoneTest(String region, Zone actualZone) {
     }
 
     private void getQiniuZoneTest(Zone actualZone, Option option) {
-        QnYunProperties zoneProperty = QnYunProperties.ZONE;
+        QnYunProperties zoneProperty = QnYunProperties.OSS_ZONE;
 
         // Given
 //        given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));

File: src/main/java/run/halo/app/handler/file/AliYunFileHandler.java
Patch:
@@ -46,6 +46,7 @@ public UploadResult upload(MultipartFile file) {
         String ossAccessKey = optionService.getByPropertyOfNonNull(AliYunProperties.OSS_ACCESS_KEY).toString();
         String ossAccessSecret = optionService.getByPropertyOfNonNull(AliYunProperties.OSS_ACCESS_SECRET).toString();
         String ossBucketName = optionService.getByPropertyOfNonNull(AliYunProperties.OSS_BUCKET_NAME).toString();
+        String ossStyleRule = optionService.getByPropertyOfNonNull(AliYunProperties.OSS_STYLE_RULE).toString();
         String ossSource = StringUtils.join("https://", ossBucketName, "." + ossEndPoint);
 
         // Init OSS client
@@ -78,7 +79,7 @@ public UploadResult upload(MultipartFile file) {
                 BufferedImage image = ImageIO.read(file.getInputStream());
                 uploadResult.setWidth(image.getWidth());
                 uploadResult.setHeight(image.getHeight());
-                uploadResult.setThumbPath(filePath);
+                uploadResult.setThumbPath(StringUtils.isBlank(ossStyleRule) ? filePath : filePath + ossStyleRule);
             }
 
             return uploadResult;

File: src/main/java/run/halo/app/handler/file/UpYunFileHandler.java
Patch:
@@ -44,8 +44,8 @@ public UploadResult upload(MultipartFile file) {
         String ossBucket = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_BUCKET).toString();
         String ossDomain = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_DOMAIN).toString();
         String ossOperator = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_OPERATOR).toString();
-        // small url can be null
-        String ossSmallUrl = optionService.getByPropertyOrDefault(UpYunProperties.OSS_SMALL_URL, String.class, "");
+        // style rule can be null
+        String ossStyleRule = optionService.getByPropertyOrDefault(UpYunProperties.OSS_STYLE_RULE, String.class, "");
 
         // Create up yun
         UpYun upYun = new UpYun(ossBucket, ossOperator, ossPassword);
@@ -86,7 +86,7 @@ public UploadResult upload(MultipartFile file) {
                 BufferedImage image = ImageIO.read(file.getInputStream());
                 uploadResult.setWidth(image.getWidth());
                 uploadResult.setHeight(image.getHeight());
-                uploadResult.setThumbPath(StringUtils.isBlank(ossSmallUrl) ? filePath : filePath + ossSmallUrl);
+                uploadResult.setThumbPath(StringUtils.isBlank(ossStyleRule) ? filePath : filePath + ossStyleRule);
             }
 
             return uploadResult;

File: src/main/java/run/halo/app/model/properties/UpYunProperties.java
Patch:
@@ -18,7 +18,7 @@ public enum UpYunProperties implements PropertyEnum {
 
     OSS_OPERATOR("oss_upyun_operator", String.class, ""),
 
-    OSS_SMALL_URL("oss_upyun_small_url", String.class, "");
+    OSS_STYLE_RULE("oss_upyun_style_rule", String.class, "");
 
     private final String defaultValue;
     private String value;

File: src/main/java/run/halo/app/service/impl/OptionServiceImpl.java
Patch:
@@ -312,7 +312,7 @@ public int getRssPageSize() {
 
     @Override
     public Zone getQnYunZone() {
-        return getByProperty(QnYunProperties.ZONE).map(qiniuZone -> {
+        return getByProperty(QnYunProperties.OSS_ZONE).map(qiniuZone -> {
 
             Zone zone;
             switch (qiniuZone.toString()) {

File: src/main/java/run/halo/app/service/TagService.java
Patch:
@@ -31,6 +31,7 @@ public interface TagService extends CrudService<Tag, Integer> {
      * @param name name
      * @return Tag
      */
+    @Nullable
     Tag getByName(@NonNull String name);
 
     /**

File: src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java
Patch:
@@ -16,6 +16,7 @@
 import run.halo.app.service.CategoryService;
 import run.halo.app.service.PostCategoryService;
 import run.halo.app.service.base.AbstractCrudService;
+import run.halo.app.utils.ServiceUtils;
 
 import java.util.Collections;
 import java.util.LinkedList;
@@ -56,7 +57,7 @@ public Category create(Category category) {
         }
 
         // Check parent id
-        if (category.getParentId() > 0) {
+        if (!ServiceUtils.isEmptyId(category.getParentId())) {
             count = categoryRepository.countById(category.getParentId());
 
             if (count == 0) {

File: src/main/java/run/halo/app/controller/core/CommonController.java
Patch:
@@ -75,7 +75,7 @@ public String contentNotFround() {
             return "common/error/404";
         }
         StrBuilder path = new StrBuilder("themes/");
-        path.append(themeService.getActivatedThemeId());
+        path.append(themeService.getActivatedTheme().getFolderName());
         path.append("/404");
         return path.toString();
     }
@@ -91,7 +91,7 @@ public String contentInternalError() {
             return "common/error/500";
         }
         StrBuilder path = new StrBuilder("themes/");
-        path.append(themeService.getActivatedThemeId());
+        path.append(themeService.getActivatedTheme().getFolderName());
         path.append("/500");
         return path.toString();
     }

File: src/main/java/run/halo/app/event/comment/CommentEventListener.java
Patch:
@@ -70,7 +70,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {
 
         Map<String, Object> data = new HashMap<>();
 
-        if (newEvent.getSource() instanceof PostService) {
+        if (newEvent.getSource() instanceof PostCommentService) {
             // Get postComment id
             PostComment postComment = postCommentService.getById(newEvent.getCommentId());
 
@@ -85,7 +85,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {
             data.put("page", post.getTitle());
             data.put("author", postComment.getAuthor());
             data.put("content", postComment.getContent());
-        } else if (newEvent.getSource() instanceof SheetService) {
+        } else if (newEvent.getSource() instanceof SheetCommentService) {
             SheetComment sheetComment = sheetCommentService.getById(newEvent.getCommentId());
 
             log.debug("Got sheet comment: [{}]", sheetComment);
@@ -99,7 +99,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {
             data.put("page", sheet.getTitle());
             data.put("author", sheetComment.getAuthor());
             data.put("content", sheetComment.getContent());
-        } else if (newEvent.getSource() instanceof JournalService) {
+        } else if (newEvent.getSource() instanceof JournalCommentService) {
             JournalComment journalComment = journalCommentService.getById(newEvent.getCommentId());
 
             log.debug("Got journal comment: [{}]", journalComment);

File: src/main/java/run/halo/app/service/impl/AdminServiceImpl.java
Patch:
@@ -192,7 +192,7 @@ public AuthToken refreshToken(String refreshToken) {
         Assert.hasText(refreshToken, "Refresh token must not be blank");
 
         Integer userId = cacheStore.getAny(SecurityUtils.buildTokenRefreshKey(refreshToken), Integer.class)
-                .orElseThrow(() -> new BadRequestException("The refresh token may have been expired already").setErrorData(refreshToken));
+                .orElseThrow(() -> new BadRequestException("登陆状态已失效，请重新登陆").setErrorData(refreshToken));
 
         // Get user info
         User user = userService.getById(userId);

File: src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java
Patch:
@@ -78,6 +78,7 @@ public void onOptionUpdate(OptionUpdatedEvent event) throws TemplateModelExcepti
         log.debug("Received option updated event");
 
         loadOptionsConfig();
+        loadThemeConfig();
     }
 
 

File: src/main/java/run/halo/app/controller/content/ContentFeedController.java
Patch:
@@ -106,7 +106,7 @@ public String sitemapXml(Model model,
      * @param model model
      * @return String
      */
-    @GetMapping(value = "sitemap.html", produces = MediaType.TEXT_PLAIN_VALUE)
+    @GetMapping(value = "sitemap.html")
     public String sitemapHtml(Model model,
                               @PageableDefault(size = Integer.MAX_VALUE, sort = "createTime", direction = DESC) Pageable pageable) {
         model.addAttribute("posts", buildPosts(pageable));

File: src/main/java/run/halo/app/listener/StartedListener.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.listener;
 
+import com.sun.nio.zipfs.JarFileSystemProvider;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.context.event.ApplicationStartedEvent;
@@ -81,6 +82,8 @@ private void initThemes() {
 
             URI themeUri = ResourceUtils.getURL(themeClassPath).toURI();
 
+            log.debug("Theme uri: [{}]", themeUri);
+
             Path source;
 
             if (themeUri.getScheme().equalsIgnoreCase("jar")) {

File: src/main/java/run/halo/app/service/base/BaseCommentService.java
Patch:
@@ -186,11 +186,11 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer
     List<BaseCommentVO> convertToVo(@Nullable List<COMMENT> comments, @Nullable Comparator<BaseCommentVO> comparator);
 
     /**
-     * Target must exist.
+     * Target validation.
      *
      * @param targetId target id must not be null (post id, sheet id or journal id)
      */
-    void targetMustExist(@NonNull Integer targetId);
+    void validateTarget(@NonNull Integer targetId);
 
     /**
      * Lists a page of top comment.

File: src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java
Patch:
@@ -223,7 +223,7 @@ public COMMENT create(COMMENT comment) {
 
         // Check post id
         if (!ServiceUtils.isEmptyId(comment.getPostId())) {
-            targetMustExist(comment.getPostId());
+            validateTarget(comment.getPostId());
         }
 
         // Check parent id

File: src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java
Patch:
@@ -47,9 +47,9 @@ public JournalCommentServiceImpl(JournalCommentRepository journalCommentReposito
     }
 
     @Override
-    public void targetMustExist(Integer journalId) {
+    public void validateTarget(Integer journalId) {
         if (!journalRepository.existsById(journalId)) {
-            throw new NotFoundException("The journal with id " + journalId + " was not found");
+            throw new NotFoundException("该日志不存在或已删除").setErrorData(journalId);
         }
     }
 

File: src/main/java/run/halo/app/controller/admin/api/ThemeController.java
Patch:
@@ -59,8 +59,7 @@ public BaseResponse<String> getContentBy(@RequestParam(name = "path") String pat
 
     @PutMapping("files/content")
     public void updateContentBy(@RequestParam(name = "path") String path,
-                                @RequestParam(name = "content") String content) {
-        // TODO Refactor the params to body
+                                @RequestBody String content) {
         themeService.saveTemplateContent(path, content);
     }
 

File: src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java
Patch:
@@ -425,7 +425,7 @@ public Page<CommentWithHasChildrenVO> pageTopCommentsBy(Integer targetId, Commen
         Assert.notNull(pageable, "Page info must not be null");
 
         // Get all comments
-        Page<COMMENT> topCommentPage = baseCommentRepository.findAllByPostIdAndStatus(targetId, status, pageable);
+        Page<COMMENT> topCommentPage = baseCommentRepository.findAllByPostIdAndStatusAndParentId(targetId, status, 0L, pageable);
 
         // Get top comment ids
         Set<Long> topCommentIds = ServiceUtils.fetchProperty(topCommentPage.getContent(), BaseComment::getId);

File: src/main/java/run/halo/app/controller/content/ContentFeedController.java
Patch:
@@ -106,7 +106,7 @@ public String sitemapXml(Model model,
      * @param model model
      * @return String
      */
-    @GetMapping(value = "sitemap.html", produces = MediaType.TEXT_PLAIN_VALUE)
+    @GetMapping(value = "sitemap.html")
     public String sitemapHtml(Model model,
                               @PageableDefault(size = Integer.MAX_VALUE, sort = "createTime", direction = DESC) Pageable pageable) {
         model.addAttribute("posts", buildPosts(pageable));

File: src/main/java/run/halo/app/listener/StartedListener.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.listener;
 
+import com.sun.nio.zipfs.JarFileSystemProvider;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.context.event.ApplicationStartedEvent;
@@ -81,6 +82,8 @@ private void initThemes() {
 
             URI themeUri = ResourceUtils.getURL(themeClassPath).toURI();
 
+            log.debug("Theme uri: [{}]", themeUri);
+
             Path source;
 
             if (themeUri.getScheme().equalsIgnoreCase("jar")) {

File: src/main/java/run/halo/app/service/base/BaseCommentService.java
Patch:
@@ -186,11 +186,11 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer
     List<BaseCommentVO> convertToVo(@Nullable List<COMMENT> comments, @Nullable Comparator<BaseCommentVO> comparator);
 
     /**
-     * Target must exist.
+     * Target validation.
      *
      * @param targetId target id must not be null (post id, sheet id or journal id)
      */
-    void targetMustExist(@NonNull Integer targetId);
+    void validateTarget(@NonNull Integer targetId);
 
     /**
      * Lists a page of top comment.

File: src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java
Patch:
@@ -223,7 +223,7 @@ public COMMENT create(COMMENT comment) {
 
         // Check post id
         if (!ServiceUtils.isEmptyId(comment.getPostId())) {
-            targetMustExist(comment.getPostId());
+            validateTarget(comment.getPostId());
         }
 
         // Check parent id

File: src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java
Patch:
@@ -47,9 +47,9 @@ public JournalCommentServiceImpl(JournalCommentRepository journalCommentReposito
     }
 
     @Override
-    public void targetMustExist(Integer journalId) {
+    public void validateTarget(Integer journalId) {
         if (!journalRepository.existsById(journalId)) {
-            throw new NotFoundException("The journal with id " + journalId + " was not found");
+            throw new NotFoundException("该日志不存在或已删除").setErrorData(journalId);
         }
     }
 

File: src/main/java/run/halo/app/controller/admin/api/ThemeController.java
Patch:
@@ -59,8 +59,7 @@ public BaseResponse<String> getContentBy(@RequestParam(name = "path") String pat
 
     @PutMapping("files/content")
     public void updateContentBy(@RequestParam(name = "path") String path,
-                                @RequestParam(name = "content") String content) {
-        // TODO Refactor the params to body
+                                @RequestBody String content) {
         themeService.saveTemplateContent(path, content);
     }
 

File: src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java
Patch:
@@ -425,7 +425,7 @@ public Page<CommentWithHasChildrenVO> pageTopCommentsBy(Integer targetId, Commen
         Assert.notNull(pageable, "Page info must not be null");
 
         // Get all comments
-        Page<COMMENT> topCommentPage = baseCommentRepository.findAllByPostIdAndStatus(targetId, status, pageable);
+        Page<COMMENT> topCommentPage = baseCommentRepository.findAllByPostIdAndStatusAndParentId(targetId, status, 0L, pageable);
 
         // Get top comment ids
         Set<Long> topCommentIds = ServiceUtils.fetchProperty(topCommentPage.getContent(), BaseComment::getId);

File: src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java
Patch:
@@ -15,6 +15,7 @@
 import run.halo.app.repository.JournalRepository;
 import run.halo.app.service.JournalCommentService;
 import run.halo.app.service.OptionService;
+import run.halo.app.service.UserService;
 import run.halo.app.utils.ServiceUtils;
 
 import java.util.Collections;
@@ -38,8 +39,9 @@ public class JournalCommentServiceImpl extends BaseCommentServiceImpl<JournalCom
 
     public JournalCommentServiceImpl(JournalCommentRepository journalCommentRepository,
                                      OptionService optionService,
+                                     UserService userService,
                                      ApplicationEventPublisher eventPublisher, JournalRepository journalRepository) {
-        super(journalCommentRepository, optionService, eventPublisher);
+        super(journalCommentRepository, optionService, userService, eventPublisher);
         this.journalCommentRepository = journalCommentRepository;
         this.journalRepository = journalRepository;
     }

File: src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java
Patch:
@@ -18,6 +18,7 @@
 import run.halo.app.repository.PostRepository;
 import run.halo.app.service.OptionService;
 import run.halo.app.service.PostCommentService;
+import run.halo.app.service.UserService;
 import run.halo.app.utils.ServiceUtils;
 
 import java.util.Collections;
@@ -42,9 +43,10 @@ public class PostCommentServiceImpl extends BaseCommentServiceImpl<PostComment>
 
     public PostCommentServiceImpl(PostCommentRepository postCommentRepository,
                                   PostRepository postRepository,
+                                  UserService userService,
                                   OptionService optionService,
                                   ApplicationEventPublisher eventPublisher) {
-        super(postCommentRepository, optionService, eventPublisher);
+        super(postCommentRepository, optionService, userService, eventPublisher);
         this.postCommentRepository = postCommentRepository;
         this.postRepository = postRepository;
     }

File: src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java
Patch:
@@ -15,6 +15,7 @@
 import run.halo.app.repository.SheetRepository;
 import run.halo.app.service.OptionService;
 import run.halo.app.service.SheetCommentService;
+import run.halo.app.service.UserService;
 import run.halo.app.utils.ServiceUtils;
 
 import java.util.Collections;
@@ -38,9 +39,10 @@ public class SheetCommentServiceImpl extends BaseCommentServiceImpl<SheetComment
 
     public SheetCommentServiceImpl(SheetCommentRepository sheetCommentRepository,
                                    OptionService optionService,
+                                   UserService userService,
                                    ApplicationEventPublisher eventPublisher,
                                    SheetRepository sheetRepository) {
-        super(sheetCommentRepository, optionService, eventPublisher);
+        super(sheetCommentRepository, optionService, userService, eventPublisher);
         this.sheetCommentRepository = sheetCommentRepository;
         this.sheetRepository = sheetRepository;
     }

File: src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java
Patch:
@@ -100,7 +100,7 @@ public Page<Post> pagePostBy(Integer categoryId, Pageable pageable) {
         Assert.notNull(pageable, "Page info must not be null");
 
         // Find all post ids
-        Set<Integer> postIds = postCategoryRepository.findAllCategoryIdsByPostId(categoryId);
+        Set<Integer> postIds = postCategoryRepository.findAllPostIdsByCategoryId(categoryId);
 
         return postRepository.findAllByIdIn(postIds, pageable);
     }

File: src/main/java/run/halo/app/handler/file/LocalFileHandler.java
Patch:
@@ -18,15 +18,15 @@
 
 import javax.imageio.ImageIO;
 import java.awt.image.BufferedImage;
-import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.Calendar;
-import java.util.Locale;
 import java.util.Objects;
 
+import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;
+
 /**
  * Local file handler.
  *
@@ -97,7 +97,7 @@ public UploadResult upload(MultipartFile file) {
         int month = current.get(Calendar.MONTH) + 1;
 
         // Build directory
-        String subDir = UPLOAD_SUB_DIR + year + File.separator + month + File.separator;
+        String subDir = UPLOAD_SUB_DIR + year + FILE_SEPARATOR + month + FILE_SEPARATOR;
 
         String originalBasename = FilenameUtils.getBasename(file.getOriginalFilename());
 

File: src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java
Patch:
@@ -21,6 +21,7 @@
 import run.halo.app.service.AttachmentService;
 import run.halo.app.service.OptionService;
 import run.halo.app.service.base.AbstractCrudService;
+import run.halo.app.utils.HaloUtils;
 
 import javax.persistence.criteria.Predicate;
 import java.util.LinkedList;
@@ -108,7 +109,8 @@ public Attachment upload(MultipartFile file) {
         // Build attachment
         Attachment attachment = new Attachment();
         attachment.setName(uploadResult.getFilename());
-        attachment.setPath(uploadResult.getFilePath());
+        // Convert separator
+        attachment.setPath(HaloUtils.changeFileSeparatorToUrlSeparator(uploadResult.getFilePath()));
         attachment.setFileKey(uploadResult.getKey());
         attachment.setThumbPath(uploadResult.getThumbPath());
         attachment.setMediaType(uploadResult.getMediaType().toString());

File: src/main/java/run/halo/app/service/impl/UserServiceImpl.java
Patch:
@@ -252,7 +252,8 @@ public User update(User user) {
         return updatedUser;
     }
 
-    private void setPassword(@NonNull User user, @NonNull String plainPassword) {
+    @Override
+    public void setPassword(@NonNull User user, @NonNull String plainPassword) {
         Assert.notNull(user, "User must not be null");
         Assert.hasText(plainPassword, "Plain password must not be blank");
 

File: src/main/java/run/halo/app/service/OptionService.java
Patch:
@@ -71,6 +71,7 @@ public interface OptionService extends CrudService<Option, Integer> {
      * @return Map
      */
     @NonNull
+    @Transactional
     Map<String, Object> listOptions();
 
     /**

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -353,7 +353,7 @@ public ThemeProperty activateTheme(String themeId) {
     public ThemeProperty upload(MultipartFile file) {
         Assert.notNull(file, "Multipart file must not be null");
 
-        if (!HaloMediaType.isZipType(file.getContentType())) {
+        if (!StringUtils.endsWithIgnoreCase(file.getOriginalFilename(), ".zip")) {
             throw new UnsupportedMediaTypeException("Unsupported theme media type: " + file.getContentType()).setErrorData(file.getOriginalFilename());
         }
 

File: src/main/java/run/halo/app/service/support/HaloMediaType.java
Patch:
@@ -70,6 +70,7 @@ public HaloMediaType(String type, String subtype, Map<String, String> parameters
      * @param mediaType media type
      * @return true if the given media type is zip type; false otherwise
      */
+    @Deprecated
     public static boolean isZipType(MediaType mediaType) {
         if (mediaType == null) {
             return false;
@@ -84,6 +85,7 @@ public static boolean isZipType(MediaType mediaType) {
      * @param contentType content type
      * @return true if the given content type is zip type; false otherwise
      */
+    @Deprecated
     public static boolean isZipType(String contentType) {
         if (StringUtils.isBlank(contentType)) {
             return false;

File: src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java
Patch:
@@ -87,14 +87,17 @@ public void onOptionUpdate(OptionUpdatedEvent event) throws TemplateModelExcepti
 
     private void loadUserConfig() throws TemplateModelException {
         configuration.setSharedVariable("user", userService.getCurrentUser().orElse(null));
+        log.debug("Loaded user");
     }
 
     private void loadOptionsConfig() throws TemplateModelException {
         configuration.setSharedVariable("options", optionService.listOptions());
+        log.debug("Loaded options");
     }
 
     private void loadThemeConfig() throws TemplateModelException {
         configuration.setSharedVariable("theme", themeService.getActivatedTheme());
         configuration.setSharedVariable("settings", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));
+        log.debug("Loaded theme and settings");
     }
 }

File: src/main/java/run/halo/app/service/impl/OptionServiceImpl.java
Patch:
@@ -382,10 +382,11 @@ public long getBirthday() {
     }
 
     private void cleanCache() {
-        cacheStore.delete(OptionService.OPTIONS_KEY);
+        cacheStore.delete(OPTIONS_KEY);
     }
 
     private void publishOptionUpdatedEvent() {
+        flush();
         cleanCache();
         eventPublisher.publishEvent(new OptionUpdatedEvent(this));
     }

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -340,8 +340,6 @@ public ThemeProperty activateTheme(String themeId) {
         // Set activated theme
         setActivatedTheme(themeProperty);
 
-        optionService.flush();
-
         // Clear the cache
         eventPublisher.publishEvent(new ThemeUpdatedEvent(this));
 

File: src/main/java/run/halo/app/model/params/InstallParam.java
Patch:
@@ -2,9 +2,9 @@
 
 import lombok.Data;
 import lombok.EqualsAndHashCode;
+import run.halo.app.model.support.CreateCheck;
 
 import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.Size;
 
 /**
  * Install parameters.
@@ -24,7 +24,7 @@ public class InstallParam extends UserParam {
     /**
      * Blog title.
      */
-    @NotBlank(message = "Blog title must not be blank")
+    @NotBlank(message = "Blog title must not be blank", groups = CreateCheck.class)
     private String title;
 
     /**

File: src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java
Patch:
@@ -12,14 +12,11 @@
 import run.halo.app.event.options.OptionUpdatedEvent;
 import run.halo.app.event.theme.ThemeActivatedEvent;
 import run.halo.app.event.user.UserUpdatedEvent;
-import run.halo.app.handler.theme.config.support.ThemeProperty;
 import run.halo.app.service.OptionService;
 import run.halo.app.service.ThemeService;
 import run.halo.app.service.ThemeSettingService;
 import run.halo.app.service.UserService;
 
-import java.util.Map;
-
 /**
  * Freemarker config aware listener.
  *

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -331,6 +331,8 @@ public ThemeProperty activateTheme(String themeId) {
         // Set activated theme
         setActivatedTheme(themeProperty);
 
+        optionService.flush();
+
         // Clear the cache
         eventPublisher.publishEvent(new ThemeUpdatedEvent(this));
 

File: src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java
Patch:
@@ -24,6 +24,7 @@
 
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.nio.charset.StandardCharsets;
 import java.text.SimpleDateFormat;
 import java.util.*;
 import java.util.stream.Collectors;
@@ -94,7 +95,7 @@ public RecoveryServiceImpl(AttachmentService attachmentService,
     public void migrateFromV0_4_3(MultipartFile file) {
         // Get migration content
         try {
-            String migrationContent = FileCopyUtils.copyToString(new InputStreamReader(file.getInputStream()));
+            String migrationContent = FileCopyUtils.copyToString(new InputStreamReader(file.getInputStream(), StandardCharsets.UTF_8));
 
             Object migrationObject = JsonUtils.jsonToObject(migrationContent, Object.class);
 

File: src/main/java/run/halo/app/config/HaloConfiguration.java
Patch:
@@ -97,7 +97,7 @@ public FilterRegistrationBean<ContentFilter> contentFilter(HaloProperties haloPr
                                                                OptionService optionService) {
         ContentFilter contentFilter = new ContentFilter(haloProperties, optionService);
         contentFilter.setFailureHandler(new ContentAuthenticationFailureHandler());
-        contentFilter.addExcludeUrlPatterns("/api/*", "/install", "/version", "/admin/*", "/js/*", "/css/*");
+        contentFilter.addExcludeUrlPatterns("/api/**", "/install", "/version", "/admin/**", "/js/**", "/css/**");
 
         FilterRegistrationBean<ContentFilter> contentFrb = new FilterRegistrationBean<>();
         contentFrb.addUrlPatterns("/*");

File: src/main/java/run/halo/app/security/filter/ContentFilter.java
Patch:
@@ -29,6 +29,6 @@ protected String getTokenFromRequest(HttpServletRequest request) {
     @Override
     protected void doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
         // Do nothing
-        return;
+        filterChain.doFilter(request, response);
     }
 }

File: src/main/java/run/halo/app/controller/content/ContentSheetController.java
Patch:
@@ -70,7 +70,7 @@ public String sheet(@PathVariable(value = "url") String url,
 
         if (StrUtil.isNotEmpty(sheet.getTemplate())) {
             if (themeService.templateExists(ThemeService.CUSTOM_SHEET_PREFIX + sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {
-                return themeService.render(sheet.getTemplate());
+                return themeService.render(ThemeService.CUSTOM_SHEET_PREFIX + sheet.getTemplate());
             }
         }
         return themeService.render("sheet");

File: src/main/java/run/halo/app/controller/content/ContentSheetController.java
Patch:
@@ -69,7 +69,7 @@ public String sheet(@PathVariable(value = "url") String url,
         model.addAttribute("is_sheet", true);
 
         if (StrUtil.isNotEmpty(sheet.getTemplate())) {
-            if (themeService.templateExists(sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {
+            if (themeService.templateExists(ThemeService.CUSTOM_SHEET_PREFIX + sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {
                 return themeService.render(sheet.getTemplate());
             }
         }

File: src/main/java/run/halo/app/repository/base/BaseRepository.java
Patch:
@@ -46,4 +46,5 @@ public interface BaseRepository<DOMAIN, ID> extends JpaRepository<DOMAIN, ID> {
      * @return number of rows affected
      */
     long deleteByIdIn(@NonNull Iterable<ID> ids);
+
 }

File: src/main/java/run/halo/app/repository/base/BaseRepositoryImpl.java
Patch:
@@ -10,6 +10,7 @@
 import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
 import org.springframework.data.repository.support.PageableExecutionUtils;
 import org.springframework.lang.Nullable;
+import org.springframework.transaction.annotation.Transactional;
 import org.springframework.util.Assert;
 
 import javax.persistence.EntityManager;
@@ -97,6 +98,7 @@ public Page<DOMAIN> findAllByIdIn(Iterable<ID> ids, Pageable pageable) {
      * @return number of rows affected
      */
     @Override
+    @Transactional
     public long deleteByIdIn(Iterable<ID> ids) {
 
         log.debug("Customized deleteByIdIn method was invoked");

File: src/main/java/run/halo/app/controller/admin/api/InstallController.java
Patch:
@@ -158,7 +158,7 @@ private Post createDefaultPost(Category category) {
         Set<Integer> categoryIds = new HashSet<>();
         categoryIds.add(category.getId());
         postParam.setCategoryIds(categoryIds);
-        return postService.create(postParam.convertTo());
+        return postService.createOrUpdateBy(postParam.convertTo());
     }
 
     @NonNull

File: src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java
Patch:
@@ -35,12 +35,12 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
 
         if (params.containsKey(HaloConst.METHOD_KEY)) {
             String method = params.get(HaloConst.METHOD_KEY).toString();
-            Integer postId = Integer.parseInt(params.get("postId").toString());
             switch (method) {
                 case "list":
                     env.setVariable("categories", builder.build().wrap(categoryService.listAll()));
                     break;
                 case "listByPostId":
+                    Integer postId = Integer.parseInt(params.get("postId").toString());
                     env.setVariable("categories", builder.build().wrap(postCategoryService.listCategoryBy(postId)));
                 case "count":
                     env.setVariable("count", builder.build().wrap(categoryService.count()));

File: src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java
Patch:
@@ -31,9 +31,9 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
 
         if (params.containsKey(HaloConst.METHOD_KEY)) {
             String method = params.get(HaloConst.METHOD_KEY).toString();
-            int top = Integer.parseInt(params.get("top").toString());
             switch (method) {
                 case "latest":
+                    int top = Integer.parseInt(params.get("top").toString());
                     env.setVariable("categories", builder.build().wrap(postCommentService.pageLatest(top)));
                     break;
                 case "count":

File: src/main/java/run/halo/app/model/freemarker/tag/PhotoTagDirective.java
Patch:
@@ -34,7 +34,6 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
 
         if (params.containsKey(HaloConst.METHOD_KEY)) {
             String method = params.get(HaloConst.METHOD_KEY).toString();
-            String team = params.get("team").toString();
             switch (method) {
                 case "list":
                     env.setVariable("photos", builder.build().wrap(photoService.listAll()));
@@ -43,6 +42,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
                     env.setVariable("teams", builder.build().wrap(photoService.listDtos(Sort.by(DESC, "createTime"))));
                     break;
                 case "listByTeam":
+                    String team = params.get("team").toString();
                     env.setVariable("photos", builder.build().wrap(photoService.listByTeam(team, Sort.by(DESC, "createTime"))));
                     break;
                 case "count":

File: src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java
Patch:
@@ -41,11 +41,9 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
         final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);
         if (params.containsKey(HaloConst.METHOD_KEY)) {
             String method = params.get(HaloConst.METHOD_KEY).toString();
-            Integer categoryId = Integer.parseInt(params.get("categoryId").toString());
-            Integer tagId = Integer.parseInt(params.get("tagId").toString());
-            int top = Integer.parseInt(params.get("top").toString());
             switch (method) {
                 case "latest":
+                    int top = Integer.parseInt(params.get("top").toString());
                     env.setVariable("posts", builder.build().wrap(postService.listLatest(top)));
                     break;
                 case "count":
@@ -58,9 +56,11 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
                     env.setVariable("archives", builder.build().wrap(postService.listMonthArchives()));
                     break;
                 case "listByCategoryId":
+                    Integer categoryId = Integer.parseInt(params.get("categoryId").toString());
                     env.setVariable("posts", builder.build().wrap(postCategoryService.listPostBy(categoryId)));
                     break;
                 case "listByTagId":
+                    Integer tagId = Integer.parseInt(params.get("tagId").toString());
                     env.setVariable("posts", builder.build().wrap(postTagService.listPostsBy(tagId)));
                     break;
                 default:

File: src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java
Patch:
@@ -35,12 +35,12 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
 
         if (params.containsKey(HaloConst.METHOD_KEY)) {
             String method = params.get(HaloConst.METHOD_KEY).toString();
-            Integer postId = Integer.parseInt(params.get("postId").toString());
             switch (method) {
                 case "list":
                     env.setVariable("tags", builder.build().wrap(tagService.listAll()));
                     break;
                 case "listByPostId":
+                    Integer postId = Integer.parseInt(params.get("postId").toString());
                     env.setVariable("tags", builder.build().wrap(postTagService.listTagsBy(postId)));
                     break;
                 case "count":

File: src/main/java/run/halo/app/controller/content/api/ArchiveController.java
Patch:
@@ -16,7 +16,7 @@
  * @date 4/2/19
  */
 @RestController("ApiContentArchiveController")
-@RequestMapping("/api/archives")
+@RequestMapping("/api/portal/archives")
 public class ArchiveController {
 
     private final PostService postService;

File: src/main/java/run/halo/app/controller/content/api/JournalController.java
Patch:
@@ -21,7 +21,7 @@
  * @date 19-4-26
  */
 @RestController("PortalJournalController")
-@RequestMapping("/api/journals")
+@RequestMapping("/api/portal/journals")
 public class JournalController {
 
     private final JournalService journalService;

File: src/main/java/run/halo/app/controller/content/api/LinkController.java
Patch:
@@ -18,7 +18,7 @@
  * @date 4/3/19
  */
 @RestController("ApiContentLinkController")
-@RequestMapping("/api/links")
+@RequestMapping("/api/portal/links")
 public class LinkController {
 
     private final LinkService linkService;

File: src/main/java/run/halo/app/controller/content/api/MenuController.java
Patch:
@@ -20,7 +20,7 @@
  * @date 4/3/19
  */
 @RestController("ApiContentMenuController")
-@RequestMapping("/api/menus")
+@RequestMapping("/api/portal/menus")
 public class MenuController {
 
     private final MenuService menuService;

File: src/main/java/run/halo/app/controller/content/api/OptionController.java
Patch:
@@ -18,7 +18,7 @@
  * @date 4/3/19
  */
 @RestController("ApiContentOptionController")
-@RequestMapping("/api/options")
+@RequestMapping("/api/portal/options")
 public class OptionController {
 
     private final OptionService optionService;

File: src/main/java/run/halo/app/controller/content/api/PostController.java
Patch:
@@ -29,7 +29,7 @@
  * @date 4/2/19
  */
 @RestController("ApiContentPostController")
-@RequestMapping("/api/posts")
+@RequestMapping("/api/portal/posts")
 public class PostController {
 
     private final PostService postService;

File: src/main/java/run/halo/app/controller/content/api/SheetController.java
Patch:
@@ -23,7 +23,7 @@
  * @date 19-4-26
  */
 @RestController("PortalSheetController")
-@RequestMapping("/api/sheets")
+@RequestMapping("/api/portal/sheets")
 public class SheetController {
 
     private final SheetService sheetService;

File: src/main/java/run/halo/app/controller/content/api/TagController.java
Patch:
@@ -27,7 +27,7 @@
  * @date 4/2/19
  */
 @RestController("ApiContentTagController")
-@RequestMapping("/api/tags")
+@RequestMapping("/api/portal/tags")
 public class TagController {
 
     private final TagService tagService;

File: src/main/java/run/halo/app/controller/content/api/UserController.java
Patch:
@@ -14,7 +14,7 @@
  * @date 4/3/19
  */
 @RestController("ApiContentUserController")
-@RequestMapping("/api/users")
+@RequestMapping("/api/portal/users")
 public class UserController {
 
     private final UserService userService;

File: src/main/java/run/halo/app/cache/InMemoryCacheStore.java
Patch:
@@ -57,7 +57,7 @@ void putInternal(String key, CacheWrapper<String> cacheWrapper) {
         // Put the cache wrapper
         CacheWrapper<String> putCacheWrapper = cacheContainer.put(key, cacheWrapper);
 
-        log.debug("Put cache wrapper: [{}]", putCacheWrapper);
+        log.debug("Put [{}] cache result: [{}], original cache wrapper: [{}]", key, putCacheWrapper, cacheWrapper);
     }
 
     @Override

File: src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java
Patch:
@@ -307,10 +307,10 @@ protected void urlMustNotExist(@NonNull POST post) {
 
         if (ServiceUtils.isEmptyId(post.getId())) {
             // The sheet will be created
-            exist = basePostRepository.countByUrl(post.getUrl());
+            exist = basePostRepository.existsByUrl(post.getUrl());
         } else {
             // The sheet will be updated
-            exist = basePostRepository.countByIdNotAndUrl(post.getId(), post.getUrl());
+            exist = basePostRepository.existsByIdNotAndUrl(post.getId(), post.getUrl());
         }
 
         if (exist) {

File: src/main/java/run/halo/app/repository/base/BasePostRepository.java
Patch:
@@ -108,9 +108,9 @@ public interface BasePostRepository<POST extends BasePost> extends BaseRepositor
      */
     long countByStatus(@NonNull PostStatus status);
 
-    boolean countByUrl(@NonNull String title);
+    boolean existsByUrl(@NonNull String title);
 
-    boolean countByIdNotAndUrl(@NonNull Integer id, @NonNull String title);
+    boolean existsByIdNotAndUrl(@NonNull Integer id, @NonNull String title);
 
     /**
      * Get post by url

File: src/main/java/run/halo/app/model/entity/Attachment.java
Patch:
@@ -92,7 +92,6 @@ public class Attachment extends BaseEntity {
     @Override
     public void prePersist() {
         super.prePersist();
-        id = null;
 
         if (fileKey == null) {
             fileKey = "";

File: src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java
Patch:
@@ -440,7 +440,7 @@ private List<Attachment> handleAttachments(@Nullable Object attachmentsObject) {
             }
 
             // Set location
-            String attachLocation = attachmentMap.get("attachLocation").toString();
+            String attachLocation = attachmentMap.getOrDefault("attachLocation", "").toString();
             if (StringUtils.equalsIgnoreCase(attachLocation, "qiniu")) {
                 attachment.setType(AttachmentType.QNYUN);
             } else if (StringUtils.equalsIgnoreCase(attachLocation, "upyun")) {

File: src/main/java/run/halo/app/model/properties/EmailProperties.java
Patch:
@@ -20,7 +20,7 @@ public enum EmailProperties implements PropertyEnum {
 
     FROM_NAME("email_from_name", String.class, ""),
 
-    ENABLED("email_enabled", Boolean.class, "");
+    ENABLED("email_enabled", Boolean.class, "false");
 
     private final String value;
 

File: src/main/java/run/halo/app/model/properties/OtherProperties.java
Patch:
@@ -8,7 +8,7 @@
  */
 public enum OtherProperties implements PropertyEnum {
 
-    API_ENABLED("api_enabled", Boolean.class, ""),
+    API_ENABLED("api_enabled", Boolean.class, "false"),
 
     API_TOKEN("api_token", String.class, ""),
 

File: src/main/java/run/halo/app/model/properties/PostProperties.java
Patch:
@@ -8,7 +8,7 @@
  */
 public enum PostProperties implements PropertyEnum {
 
-    SUMMARY_LENGTH("post_summary_length", Integer.class, ""),
+    SUMMARY_LENGTH("post_summary_length", Integer.class, "150"),
 
     RSS_PAGE_SIZE("rss_page_size", Integer.class, "20"),
 

File: src/main/java/run/halo/app/model/properties/QnYunProperties.java
Patch:
@@ -8,7 +8,7 @@
  */
 public enum QnYunProperties implements PropertyEnum {
 
-    ZONE("oss_qiniu_zone", String.class, ""),
+    ZONE("oss_qiniu_zone", String.class, "auto"),
 
     ACCESS_KEY("oss_qiniu_access_key", String.class, ""),
 
@@ -23,7 +23,7 @@ public enum QnYunProperties implements PropertyEnum {
     private final String value;
 
     private final Class<?> type;
-    
+
     private final String defaultValue;
 
     QnYunProperties(String value, Class<?> type, String defaultValue) {

File: src/main/java/run/halo/app/model/entity/BaseComment.java
Patch:
@@ -132,7 +132,6 @@ public void prePersist() {
         if (isAdmin == null) {
             isAdmin = false;
         }
-
     }
 
 }

File: src/main/java/run/halo/app/model/properties/PropertyEnum.java
Patch:
@@ -1,6 +1,5 @@
 package run.halo.app.model.properties;
 
-import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.lang.NonNull;
 import org.springframework.lang.Nullable;

File: src/main/java/run/halo/app/service/JournalService.java
Patch:
@@ -1,14 +1,14 @@
 package run.halo.app.service;
 
 import run.halo.app.model.entity.Journal;
-import run.halo.app.service.base.CrudService;
+import run.halo.app.service.base.BaseCommentService;
 
 /**
  * Journal service interface.
  *
  * @author johnniang
  * @date 19-4-24
  */
-public interface JournalService extends CrudService<Journal, Long> {
+public interface JournalService extends BaseCommentService<Journal> {
 
 }

File: src/main/java/run/halo/app/service/impl/OptionServiceImpl.java
Patch:
@@ -130,7 +130,7 @@ public Map<String, Object> listOptions() {
 
         Set<String> keys = ServiceUtils.fetchProperty(options, Option::getKey);
 
-        Map<String, Object> result = ServiceUtils.convertToMap(options, Option::getKey, option -> {
+        Map<String, Object> userDefinedOptionMap = ServiceUtils.convertToMap(options, Option::getKey, option -> {
             String key = option.getKey();
 
             PropertyEnum propertyEnum = propertyEnumMap.get(key);
@@ -142,6 +142,8 @@ public Map<String, Object> listOptions() {
             return PropertyEnum.convertTo(option.getValue(), propertyEnum);
         });
 
+        Map<String, Object> result = new HashMap<>(userDefinedOptionMap);
+
         // Add default property
         propertyEnumMap.keySet()
                 .stream()

File: src/main/java/run/halo/app/event/post/SheetVisitEventListener.java
Patch:
@@ -18,7 +18,6 @@ protected SheetVisitEventListener(SheetService sheetService) {
 
     @Async
     @EventListener
-
     public void onSheetVisitEvent(SheetVisitEvent event) throws InterruptedException {
         handleVisitEvent(event);
     }

File: src/main/java/run/halo/app/model/params/AttachmentQuery.java
Patch:
@@ -1,6 +1,7 @@
 package run.halo.app.model.params;
 
 import lombok.Data;
+import run.halo.app.model.enums.AttachmentType;
 
 /**
  * Attachment query params.
@@ -18,5 +19,5 @@ public class AttachmentQuery {
 
     private String mediaType;
 
-    private String attachmentType;
+    private AttachmentType attachmentType;
 }

File: src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java
Patch:
@@ -15,7 +15,6 @@
 import run.halo.app.model.enums.AttachmentType;
 import run.halo.app.model.params.AttachmentQuery;
 import run.halo.app.model.properties.AttachmentProperties;
-import run.halo.app.model.properties.PropertyEnum;
 import run.halo.app.model.support.UploadResult;
 import run.halo.app.repository.AttachmentRepository;
 import run.halo.app.service.AttachmentService;
@@ -74,8 +73,8 @@ private Specification<Attachment> buildSpecByQuery(@NonNull AttachmentQuery atta
                 predicates.add(criteriaBuilder.equal(root.get("mediaType"), attachmentQuery.getMediaType()));
             }
 
-            if(attachmentQuery.getAttachmentType() != null){
-                predicates.add(criteriaBuilder.equal(root.get("type"), PropertyEnum.convertToEnum(attachmentQuery.getAttachmentType(),AttachmentType.class)));
+            if (attachmentQuery.getAttachmentType() != null) {
+                predicates.add(criteriaBuilder.equal(root.get("type"), attachmentQuery.getAttachmentType()));
             }
 
             if (attachmentQuery.getKeyword() != null) {

File: src/main/java/run/halo/app/service/ThemeService.java
Patch:
@@ -38,7 +38,7 @@ public interface ThemeService {
     /**
      * The type of file that can be modified.
      */
-    String[] CAN_EDIT_SUFFIX = {"ftl", "css", "js"};
+    String[] CAN_EDIT_SUFFIX = {".ftl", ".css", ".js", ".yaml", ".yml", ".properties"};
 
     /**
      * These file names cannot be displayed.

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -573,7 +573,7 @@ private boolean isEditable(@NonNull Path path) {
 
         // Check suffix
         for (String suffix : CAN_EDIT_SUFFIX) {
-            if (path.endsWith(suffix)) {
+            if (path.toString().endsWith(suffix)) {
                 return true;
             }
         }

File: src/main/java/run/halo/app/config/HaloConfiguration.java
Patch:
@@ -85,7 +85,7 @@ public FilterRegistrationBean<LogFilter> logFilter() {
 
         logFilter.setOrder(Ordered.HIGHEST_PRECEDENCE + 9);
         logFilter.setFilter(new LogFilter());
-        logFilter.addUrlPatterns("/api/*");
+        logFilter.addUrlPatterns("/*");
 
         return logFilter;
     }

File: src/main/java/run/halo/app/service/PostCategoryService.java
Patch:
@@ -4,6 +4,7 @@
 import org.springframework.data.domain.Pageable;
 import org.springframework.lang.NonNull;
 import org.springframework.lang.Nullable;
+import org.springframework.transaction.annotation.Transactional;
 import run.halo.app.model.entity.Category;
 import run.halo.app.model.entity.Post;
 import run.halo.app.model.entity.PostCategory;
@@ -103,6 +104,7 @@ public interface PostCategoryService extends CrudService<PostCategory, Integer>
      * @return a list of post category deleted
      */
     @NonNull
+    @Transactional
     List<PostCategory> removeByPostId(@NonNull Integer postId);
 
     /**
@@ -112,5 +114,6 @@ public interface PostCategoryService extends CrudService<PostCategory, Integer>
      * @return a list of post category deleted
      */
     @NonNull
+    @Transactional
     List<PostCategory> removeByCategoryId(@NonNull Integer categoryId);
 }

File: src/main/java/run/halo/app/service/PostTagService.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.service;
 
+import org.springframework.transaction.annotation.Transactional;
 import run.halo.app.model.dto.TagWithCountOutputDTO;
 import run.halo.app.model.entity.Post;
 import run.halo.app.model.entity.PostTag;
@@ -113,6 +114,7 @@ public interface PostTagService extends CrudService<PostTag, Integer> {
      * @return a list of post tag
      */
     @NonNull
+    @Transactional
     List<PostTag> removeByPostId(@NonNull Integer postId);
 
     /**
@@ -122,5 +124,6 @@ public interface PostTagService extends CrudService<PostTag, Integer> {
      * @return a list of post tag
      */
     @NonNull
+    @Transactional
     List<PostTag> removeByTagId(@NonNull Integer tagId);
 }

File: src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java
Patch:
@@ -171,7 +171,7 @@ public Set<Integer> listCategoryIdsByPostId(Integer postId) {
 
     @Override
     public List<PostCategory> removeByPostId(Integer postId) {
-        Assert.notNull(postId, "Post id must not be null");
+        Assert.notNull(postId, "PoremoveByIdst id must not be null");
 
         return postCategoryRepository.deleteByPostId(postId);
     }

File: src/main/java/run/halo/app/service/impl/PostServiceImpl.java
Patch:
@@ -443,7 +443,6 @@ public List<ArchiveMonthVO> listMonthArchives() {
     }
 
     @Override
-    @Transactional
     public Post removeById(Integer postId) {
         Assert.notNull(postId, "Post id must not be null");
 
@@ -501,6 +500,7 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {
             postListVO.setTags(Optional.ofNullable(tagListMap.get(post.getId()))
                     .orElseGet(LinkedList::new)
                     .stream()
+                    .filter(Objects::nonNull)
                     .map(tag -> new TagOutputDTO().<TagOutputDTO>convertFrom(tag))
                     .collect(Collectors.toList()));
 

File: src/main/java/run/halo/app/web/controller/content/api/CommentController.java
Patch:
@@ -1,5 +1,6 @@
 package run.halo.app.web.controller.content.api;
 
+import io.swagger.annotations.ApiOperation;
 import run.halo.app.model.dto.CommentOutputDTO;
 import run.halo.app.model.entity.User;
 import run.halo.app.model.params.CommentParam;
@@ -43,6 +44,7 @@ public CommentController(CommentService commentService,
     }
 
     @PostMapping
+    @ApiOperation("Comments a post")
     public CommentOutputDTO comment(@RequestBody CommentParam commentParam, HttpServletRequest request) {
         // Get authentication
         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();

File: src/main/java/run/halo/app/model/params/AttachmentQuery.java
Patch:
@@ -17,4 +17,6 @@ public class AttachmentQuery {
     private String keyword;
 
     private String mediaType;
+
+    private String attachmentType;
 }

File: src/main/java/run/halo/app/service/impl/PostServiceImpl.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 
+import static org.springframework.data.domain.Sort.Direction.ASC;
 import static org.springframework.data.domain.Sort.Direction.DESC;
 
 /**
@@ -466,7 +467,7 @@ public List<Post> listPrePosts(Date date, int size) {
 
         return postRepository.findAllByStatusAndCreateTimeAfter(PostStatus.PUBLISHED,
                 date,
-                PageRequest.of(0, size, Sort.by(DESC, "createTime")))
+                PageRequest.of(0, size, Sort.by(ASC, "createTime")))
                 .getContent();
     }
 

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -245,7 +245,9 @@ public void deleteTheme(String themeId) {
 
     @Override
     public List<Group> fetchConfig(String themeId) {
-        Assert.hasText(themeId, "Theme name must not be blank");
+        Assert.hasText(themeId, "Theme id must not be blank");
+
+        // TODO Cache the config
 
         // Get theme property
         ThemeProperty themeProperty = getThemeOfNonNullBy(themeId);

File: src/main/java/run/halo/app/config/HaloConfiguration.java
Patch:
@@ -95,7 +95,7 @@ public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(H
         ApiAuthenticationFilter apiFilter = new ApiAuthenticationFilter(haloProperties);
 
         DefaultAuthenticationFailureHandler failureHandler = new DefaultAuthenticationFailureHandler();
-        failureHandler.setProductionEnv(haloProperties.getProductionEnv());
+        failureHandler.setProductionEnv(haloProperties.isProductionEnv());
         failureHandler.setObjectMapper(objectMapper);
 
         // Set failure handler
@@ -117,7 +117,7 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt
         AdminAuthenticationFilter adminAuthenticationFilter = new AdminAuthenticationFilter(cacheStore, userService, haloProperties);
 
         AdminAuthenticationFailureHandler failureHandler = new AdminAuthenticationFailureHandler();
-        failureHandler.setProductionEnv(haloProperties.getProductionEnv());
+        failureHandler.setProductionEnv(haloProperties.isProductionEnv());
         failureHandler.setObjectMapper(objectMapper);
 
         // Config the admin filter

File: src/main/java/run/halo/app/config/properties/HaloProperties.java
Patch:
@@ -16,17 +16,17 @@ public class HaloProperties {
     /**
      * Doc api disabled. (Default is true)
      */
-    private Boolean docDisabled = true;
+    private boolean docDisabled = true;
 
     /**
      * Production env. (Default is true)
      */
-    private Boolean productionEnv = true;
+    private boolean productionEnv = true;
 
     /**
      * Authentication enabled
      */
-    private Boolean authEnabled = true;
+    private boolean authEnabled = true;
 
     /**
      * Work directory.

File: src/main/java/run/halo/app/listener/StartedListener.java
Patch:
@@ -57,7 +57,7 @@ public void onApplicationEvent(ApplicationStartedEvent event) {
         this.initThemes();
 
         // Init user in development environment
-        if (!haloProperties.getProductionEnv()) {
+        if (!haloProperties.isProductionEnv()) {
             initAnTestUserIfAbsent();
         }
     }
@@ -89,7 +89,7 @@ private void printStartInfo() {
         log.info("Halo started at         {}", blogUrl);
         // TODO admin may be changeable
         log.info("Halo admin started at   {}/admin", blogUrl);
-        if (!haloProperties.getDocDisabled()) {
+        if (!haloProperties.isDocDisabled()) {
             log.debug("Halo doc was enable at  {}/swagger-ui.html", blogUrl);
         }
     }
@@ -140,7 +140,7 @@ private void initThemes() {
             // Create theme folder
             Path themePath = themeService.getBasePath();
 
-            if (!haloProperties.getProductionEnv() || Files.notExists(themePath)) {
+            if (!haloProperties.isProductionEnv() || Files.notExists(themePath)) {
                 log.info("Copying theme folder from [{}] to [{}]", source, themePath);
 
                 FileUtils.copyFolder(source, themePath);

File: src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java
Patch:
@@ -125,7 +125,7 @@ public AuthenticationFailureHandler getFailureHandler() {
                 if (failureHandler == null) {
                     // Create default authentication failure handler
                     DefaultAuthenticationFailureHandler failureHandler = new DefaultAuthenticationFailureHandler();
-                    failureHandler.setProductionEnv(haloProperties.getProductionEnv());
+                    failureHandler.setProductionEnv(haloProperties.isProductionEnv());
 
                     this.failureHandler = failureHandler;
                 }

File: src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java
Patch:
@@ -66,7 +66,7 @@ public AdminAuthenticationFilter(StringCacheStore cacheStore,
     @Override
     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
 
-        if (!haloProperties.getAuthEnabled()) {
+        if (!haloProperties.isProductionEnv()) {
             List<User> users = userService.listAll();
             if (!users.isEmpty()) {
                 // Set security context

File: src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java
Patch:
@@ -83,8 +83,10 @@ public List<ThemeSetting> listBy(String themeId) {
     @Override
     public Map<String, Object> listAsMapBy(String themeId) {
 
+        List<ThemeSetting> themeSettings = listBy(themeId);
+
         // TODO Convert to corresponding data type
-        return ServiceUtils.convertToMap(listBy(themeId), ThemeSetting::getKey, ThemeSetting::getValue);
+        return ServiceUtils.convertToMap(themeSettings, ThemeSetting::getKey, ThemeSetting::getValue);
     }
 
     /**

File: src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java
Patch:
@@ -101,9 +101,9 @@ public List<AttachmentOutputDTO> uploadAttachments(@RequestPart("files") Multipa
         return result;
     }
 
-    @GetMapping("mediaTypes")
-    @ApiOperation("List all of media types")
-    public List<String> mediaTypes(){
+    @GetMapping("media_types")
+    @ApiOperation("Lists all of media types")
+    public List<String> listMediaTypes() {
         return attachmentService.listAllMediaType();
     }
 }

File: src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java
Patch:
@@ -19,8 +19,8 @@
  * @author johnniang
  * @date 19-4-20
  */
-@Component
 @Slf4j
+@Component
 public class FreemarkerConfigAwareListener {
 
     private final OptionService optionService;

File: src/main/java/run/halo/app/service/ThemeService.java
Patch:
@@ -210,7 +210,7 @@ public interface ThemeService {
      * @return theme property
      */
     @NonNull
-    ThemeProperty activeTheme(@NonNull String themeId);
+    ThemeProperty activateTheme(@NonNull String themeId);
 
     /**
      * Upload theme.

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -316,7 +316,7 @@ public ThemeProperty getActivatedTheme() {
     }
 
     @Override
-    public ThemeProperty activeTheme(String themeId) {
+    public ThemeProperty activateTheme(String themeId) {
         // Check existence of the theme
         ThemeProperty themeProperty = getThemeOfNonNullBy(themeId);
 
@@ -508,6 +508,7 @@ private void clearThemeCache() {
      */
     private void setActivatedTheme(@Nullable ThemeProperty activatedTheme) {
         this.activatedTheme = activatedTheme;
+        this.activatedThemeId = activatedTheme.getId();
     }
 
     /**

File: src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java
Patch:
@@ -71,7 +71,7 @@ public List<String> customTemplate() {
     @PostMapping("{themeId}/activation")
     @ApiOperation("Activates a theme")
     public ThemeProperty active(@PathVariable("themeId") String themeId) {
-        return themeService.activeTheme(themeId);
+        return themeService.activateTheme(themeId);
     }
 
     @GetMapping("activation")

File: src/main/java/run/halo/app/model/params/AttachmentQuery.java
Patch:
@@ -15,4 +15,6 @@ public class AttachmentQuery {
      * Keyword.
      */
     private String keyword;
+
+    private String mediaType;
 }

File: src/main/java/run/halo/app/repository/PostRepository.java
Patch:
@@ -1,9 +1,8 @@
 package run.halo.app.repository;
 
-import run.halo.app.model.entity.Post;
-import run.halo.app.repository.base.BasePostRepository;
 import org.springframework.data.jpa.repository.JpaSpecificationExecutor;
 import org.springframework.data.jpa.repository.Query;
+import run.halo.app.model.entity.Post;
 import run.halo.app.repository.base.BasePostRepository;
 
 

File: src/main/java/run/halo/app/model/params/AttachmentParam.java
Patch:
@@ -5,6 +5,7 @@
 import run.halo.app.model.entity.Attachment;
 
 import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.Size;
 
 /**
  * Attachment params.
@@ -16,5 +17,7 @@
 public class AttachmentParam implements InputConverter<Attachment> {
 
     @NotBlank(message = "Attachment name must not be blank")
+    @Size(max = 255, message = "Length of attachment name must not be more than {max}")
     private String name;
+
 }

File: src/main/java/run/halo/app/model/support/HaloConst.java
Patch:
@@ -22,7 +22,7 @@ public class HaloConst {
     /**
      * Default theme name.
      */
-    public final static String DEFAULT_THEME_NAME = "anatole";
+    public final static String DEFAULT_THEME_ID = "caicai_anatole";
 
     /**
      * version constant

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -44,7 +44,7 @@
 import java.util.*;
 import java.util.stream.Collectors;
 
-import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_NAME;
+import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_ID;
 
 /**
  * @author : RYAN0UP
@@ -279,7 +279,7 @@ public String getActivatedThemeId() {
         if (StringUtils.isBlank(activatedThemeId)) {
             synchronized (this) {
                 if (StringUtils.isBlank(activatedThemeId)) {
-                    return optionService.getByProperty(PrimaryProperties.THEME).orElse(DEFAULT_THEME_NAME);
+                    return optionService.getByProperty(PrimaryProperties.THEME).orElse(DEFAULT_THEME_ID);
                 }
             }
         }

File: src/main/java/run/halo/app/web/controller/core/InstallController.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
-import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_NAME;
+import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_ID;
 
 /**
  * Installation controller.
@@ -166,7 +166,7 @@ private void initSettings(InstallParam installParam) {
         properties.put(BlogProperties.BLOG_LOCALE, installParam.getLocale());
         properties.put(BlogProperties.BLOG_TITLE, installParam.getTitle());
         properties.put(BlogProperties.BLOG_URL, installParam.getUrl());
-        properties.put(PrimaryProperties.THEME, DEFAULT_THEME_NAME);
+        properties.put(PrimaryProperties.THEME, DEFAULT_THEME_ID);
         properties.put(PrimaryProperties.BIRTHDAY, String.valueOf(System.currentTimeMillis()));
         properties.put(EmailProperties.ENABLED, Boolean.FALSE.toString());
         properties.put(CommentProperties.NEW_NOTICE, Boolean.FALSE.toString());

File: src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java
Patch:
@@ -297,6 +297,9 @@ public ThemeProperty activeTheme(String themeId) {
         // Set the activated theme id
         setActivatedThemeId(themeId);
 
+        // Clear the cache
+        cacheStore.delete(THEMES_CACHE_KEY);
+
         try {
             // TODO Refactor here in the future
             configuration.setSharedVariable("themeName", themeId);

File: src/main/java/run/halo/app/model/dto/OptionOutputDTO.java
Patch:
@@ -13,8 +13,8 @@
 @Data
 public class OptionOutputDTO implements OutputConverter<OptionOutputDTO, Option> {
 
-    private String optionKey;
+    private String key;
 
-    private String optionValue;
+    private String value;
 
 }

File: src/main/java/run/halo/app/repository/OptionRepository.java
Patch:
@@ -26,5 +26,5 @@ public interface OptionRepository extends BaseRepository<Option, Integer> {
      *
      * @param key key
      */
-    void removeByKey(String key);
+    void deleteByKey(String key);
 }

File: src/main/java/run/halo/app/service/impl/OptionServiceImpl.java
Patch:
@@ -46,7 +46,7 @@ public void save(String key, String value) {
 
         if (StringUtils.isBlank(value)) {
             // If the value is blank, remove the key
-            optionRepository.removeByKey(key);
+            optionRepository.deleteByKey(key);
             log.debug("Removed option key: [{}]", key);
             return;
         }

File: src/main/java/run/halo/app/model/support/ThemeProperty.java
Patch:
@@ -52,7 +52,7 @@ public class ThemeProperty {
     /**
      * Folder name.
      */
-    private String folderName;
+    private String themePath;
 
     /**
      * Has options.

File: src/main/java/run/halo/app/model/entity/ThemeSetting.java
Patch:
@@ -15,7 +15,7 @@
  * @date 4/8/19
  */
 @Entity
-@Table(name = "theme_settings", indexes = {@Index(columnList = "theme"), @Index(columnList = "setting_key")})
+@Table(name = "theme_settings", indexes = {@Index(columnList = "setting_key")})
 @SQLDelete(sql = "update theme_settings set deleted = true where id = ?")
 @Where(clause = "deleted = false")
 @Data

File: src/main/java/run/halo/app/repository/OptionRepository.java
Patch:
@@ -19,12 +19,12 @@ public interface OptionRepository extends BaseRepository<Option, Integer> {
      * @param key key
      * @return Option
      */
-    Optional<Option> findByOptionKey(String key);
+    Optional<Option> findByKey(String key);
 
     /**
      * Delete option by key
      *
      * @param key key
      */
-    void removeByOptionKey(String key);
+    void removeByKey(String key);
 }

File: src/main/java/run/halo/app/service/impl/OptionServiceImpl.java
Patch:
@@ -46,13 +46,13 @@ public void save(String key, String value) {
 
         if (StringUtils.isBlank(value)) {
             // If the value is blank, remove the key
-            optionRepository.removeByOptionKey(key);
+            optionRepository.removeByKey(key);
             log.debug("Removed option key: [{}]", key);
             return;
         }
 
         // TODO Consider cache options with map
-        Option option = optionRepository.findByOptionKey(key).map(anOption -> {
+        Option option = optionRepository.findByKey(key).map(anOption -> {
             log.debug("Updating option key: [{}], value: from [{}] to [{}]", key, anOption.getValue(), value);
             // Exist
             anOption.setValue(value);
@@ -143,7 +143,7 @@ public String getByKeyOfNonNull(String key) {
     public Optional<String> getByKey(String key) {
         Assert.hasText(key, "Option key must not be blank");
 
-        return optionRepository.findByOptionKey(key).map(Option::getValue);
+        return optionRepository.findByKey(key).map(Option::getValue);
     }
 
     @Override

File: src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java
Patch:
@@ -76,13 +76,13 @@ private void getQiniuZoneTest(Zone actualZone, Option option) {
         QnYunProperties zoneProperty = QnYunProperties.ZONE;
 
         // Given
-        given(optionRepository.findByOptionKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));
+        given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));
 
         // When
         Zone zone = optionService.getQnYunZone();
 
         // Then
-        then(optionRepository).should().findByOptionKey(zoneProperty.getValue());
+        then(optionRepository).should().findByKey(zoneProperty.getValue());
 
         assertNotNull(zone);
         assertThat(zone.getRegion(), equalTo(actualZone.getRegion()));

File: src/main/java/cc/ryanc/halo/model/freemarker/tag/CategoryTagDirective.java
Patch:
@@ -37,6 +37,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
                     break;
                 case "count":
                     env.setVariable("count", builder.build().wrap(categoryService.count()));
+                    break;
                 default:
                     break;
             }

File: src/main/java/cc/ryanc/halo/model/freemarker/tag/LinkTagDirective.java
Patch:
@@ -40,6 +40,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
                     break;
                 case "count":
                     env.setVariable("count", builder.build().wrap(linkService.count()));
+                    break;
                 default:
                     break;
             }

File: src/main/java/cc/ryanc/halo/model/freemarker/tag/MenuTagDirective.java
Patch:
@@ -37,6 +37,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
                     break;
                 case "count":
                     env.setVariable("count", builder.build().wrap(menuService.count()));
+                    break;
                 default:
                     break;
             }

File: src/main/java/cc/ryanc/halo/model/freemarker/tag/TagTagDirective.java
Patch:
@@ -37,6 +37,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ
                     break;
                 case "count":
                     env.setVariable("count", builder.build().wrap(tagService.count()));
+                    break;
                 default:
                     break;
             }

File: src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java
Patch:
@@ -70,7 +70,7 @@ public void pluralizeTest() {
         assertThat(pluralizedFormat, equalTo("2 chances"));
 
         pluralizedFormat = HaloUtils.pluralize(0, label, pluralLabel);
-        assertThat(pluralizedFormat, equalTo("no chance"));
+        assertThat(pluralizedFormat, equalTo("no chances"));
 
         // Test random positive time
         IntStream.range(0, 10000).forEach(i -> {
@@ -83,7 +83,7 @@ public void pluralizeTest() {
         IntStream.range(0, 10000).forEach(i -> {
             long time = (-1) * RandomUtils.nextLong();
             String result = HaloUtils.pluralize(time, label, pluralLabel);
-            assertThat(result, equalTo("no " + label));
+            assertThat(result, equalTo("no " + pluralLabel));
         });
 
     }

File: src/main/java/cc/ryanc/halo/model/properties/PrimaryProperties.java
Patch:
@@ -26,10 +26,10 @@ public enum PrimaryProperties implements PropertyEnum {
 
     @Override
     public Class<?> getType() {
-        return null;
+        return type;
     }
 
     @Override
     public String getValue() {
-        return null;
+        return value;
     }}

File: src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java
Patch:
@@ -95,12 +95,11 @@ public User login(String key, String password, HttpSession httpSession) {
 
         // Check expiration
         if (user.getExpireTime() != null && user.getExpireTime().after(now)) {
-            long seconds = TimeUnit.MINUTES.toSeconds(user.getExpireTime().getTime() - now.getTime());
+            long seconds = TimeUnit.MILLISECONDS.toSeconds(user.getExpireTime().getTime() - now.getTime());
             // If expired
-            throw new BadRequestException("You have been temporarily disabled，please try again " + seconds + " second(s) later").setErrorData(seconds);
+            throw new BadRequestException("You have been temporarily disabled，please try again " + HaloUtils.timeFormat(seconds) + " later").setErrorData(seconds);
         }
 
-
         if (!BCrypt.checkpw(password, user.getPassword())) {
             // If the password is mismatch
             // Add login failure count

File: src/main/java/cc/ryanc/halo/cache/AbstractCacheStore.java
Patch:
@@ -111,7 +111,6 @@ private CacheWrapper<V> buildCacheWrapper(@NonNull V value, long timeout, @Nulla
             expireAt = DateUtils.addMilliseconds(now, Long.valueOf(millis).intValue());
         }
 
-
         // Build cache wrapper
         CacheWrapper<V> cacheWrapper = new CacheWrapper<>();
         cacheWrapper.setCreateAt(now);

File: src/main/java/cc/ryanc/halo/cache/CacheWrapper.java
Patch:
@@ -2,6 +2,7 @@
 
 import lombok.*;
 
+import java.io.Serializable;
 import java.util.Date;
 
 /**
@@ -10,11 +11,11 @@
  * @author johnniang
  */
 @Data
-@EqualsAndHashCode
 @ToString
+@EqualsAndHashCode
 @NoArgsConstructor
 @AllArgsConstructor
-public class CacheWrapper<V> {
+class CacheWrapper<V> implements Serializable {
 
     /**
      * Cache data

File: src/main/java/cc/ryanc/halo/config/HaloConfiguration.java
Patch:
@@ -38,7 +38,7 @@ public StringCacheStore stringCacheStore() {
      * @return Cors filter registration bean
      */
     @Bean
-    FilterRegistrationBean<CorsFilter> corsFilter() {
+    public FilterRegistrationBean<CorsFilter> corsFilter() {
         FilterRegistrationBean<CorsFilter> corsFilter = new FilterRegistrationBean<>();
 
         corsFilter.setOrder(Ordered.HIGHEST_PRECEDENCE + 10);
@@ -54,7 +54,7 @@ FilterRegistrationBean<CorsFilter> corsFilter() {
      * @return Log filter registration bean
      */
     @Bean
-    FilterRegistrationBean<LogFilter> logFilter() {
+    public FilterRegistrationBean<LogFilter> logFilter() {
         FilterRegistrationBean<LogFilter> logFilter = new FilterRegistrationBean<>();
 
         logFilter.setOrder(Ordered.HIGHEST_PRECEDENCE + 9);

File: src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java
Patch:
@@ -36,10 +36,11 @@ public DefaultAuthenticationFailureHandler(boolean productionEnv,
     public void onFailure(HttpServletRequest request, HttpServletResponse response, HaloException exception) throws IOException, ServletException {
         log.warn("Handle unsuccessful authentication, ip: [{}]", ServletUtil.getClientIP(request));
 
-        BaseResponse errorDetail = new BaseResponse();
+        BaseResponse<Object> errorDetail = new BaseResponse<>();
 
         errorDetail.setStatus(exception.getStatus().value());
         errorDetail.setMessage(exception.getMessage());
+        errorDetail.setData(exception.getErrorData());
 
         if (!productionEnv) {
             errorDetail.setDevMessage(ExceptionUtils.getStackTrace(exception));

File: src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java
Patch:
@@ -52,7 +52,7 @@ public OptionServiceImpl(OptionRepository optionRepository) {
     public void save(String key, String value, String source) {
         Assert.hasText(key, "Option key must not be blank");
 
-        if (StringUtils.isNotBlank(value)) {
+        if (StringUtils.isBlank(value)) {
             // If the value is blank, remove the key
             optionRepository.removeByOptionKey(key);
             return;

File: src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java
Patch:
@@ -79,6 +79,8 @@ public Attachment upload(MultipartFile file) {
         attachment.setSize(uploadResult.getSize());
         attachment.setType(attachmentType);
 
+        log.debug("Creating attachment: [{}]", attachment);
+
         // Create and return
         return create(attachment);
     }

File: src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java
Patch:
@@ -145,7 +145,7 @@ public boolean isThemeExist(String theme) {
      */
     @Override
     public File getThemeBasePath() {
-        return new File(System.getProperties().getProperty("user.home"), ".halo/templates/themes");
+        return new File(System.getProperties().getProperty("user.home"), "halo/templates/themes");
     }
 
     /**

File: src/main/java/cc/ryanc/halo/Application.java
Patch:
@@ -28,7 +28,7 @@ public class Application {
 
     public static void main(String[] args) {
         // Customize the spring config location
-        System.setProperty("spring.config.location", "classpath:/,classpath:/config/,file:./,file:./config/,file:${user.home}/halo/,file:${user.home}/halo-dev");
+        System.setProperty("spring.config.additional-location", "file:${user.home}/halo/,file:${user.home}/halo-dev/");
 
         // Run application
         SpringApplication.run(Application.class, args);

File: src/main/java/cc/ryanc/halo/Application.java
Patch:
@@ -27,7 +27,8 @@ public class Application {
     private final static Logger LOG = Logger.getLogger(Application.class);
 
     public static void main(String[] args) {
-        System.setProperty("spring.config.additional-location", "file:${user.home}/halo/");
+        // Customize the spring config location
+        System.setProperty("spring.config.location", "classpath:/,classpath:/config/,file:./,file:./config/,file:${user.home}/halo/,file:${user.home}/halo-dev");
 
         // Run application
         SpringApplication.run(Application.class, args);

File: src/main/java/cc/ryanc/halo/Application.java
Patch:
@@ -27,6 +27,8 @@ public class Application {
     private final static Logger LOG = Logger.getLogger(Application.class);
 
     public static void main(String[] args) {
+        System.setProperty("spring.config.additional-location", "file:${user.home}/halo/");
+
         // Run application
         SpringApplication.run(Application.class, args);
     }

File: src/main/java/cc/ryanc/halo/listener/StartedListener.java
Patch:
@@ -86,9 +86,10 @@ private void getActiveTheme() {
     }
 
     private void printStartInfo() {
-        String blogUrl = getBlogUrl();
+        String blogUrl = getBaseUrl();
 
         log.info("Halo started at    {}", blogUrl);
+        // TODO admin may be changeable
         log.info("Halo admin is at   {}/admin", blogUrl);
         if (!haloProperties.getDocDisabled()) {
             log.debug("Halo doc enable at {}/swagger-ui.html", blogUrl);
@@ -100,7 +101,7 @@ private void printStartInfo() {
      *
      * @return blog url (If blog url isn't present, current machine IP address will be default)
      */
-    private String getBlogUrl() {
+    private String getBaseUrl() {
         // Get server port
         String serverPort = applicationContext.getEnvironment().getProperty("server.port", "8080");
 

File: src/main/java/cc/ryanc/halo/model/entity/Post.java
Patch:
@@ -135,6 +135,9 @@ public void prePersist() {
         super.prePersist();
         id = null;
         editTime = getCreateTime();
+        if (type == null) {
+            type = PostType.POST;
+        }
     }
 
 }

File: src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java
Patch:
@@ -14,6 +14,8 @@
 import org.springframework.web.bind.annotation.RestController;
 
 /**
+ * Admin controller.
+ *
  * @author johnniang
  * @date 3/19/19
  */

File: src/main/java/cc/ryanc/halo/model/support/BaseResponse.java
Patch:
@@ -12,7 +12,7 @@
 @EqualsAndHashCode
 @NoArgsConstructor
 @AllArgsConstructor
-public class ErrorResponse {
+public class BaseResponse {
 
     private Integer status;
 

File: src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java
Patch:
@@ -1,7 +1,7 @@
 package cc.ryanc.halo.security.handler;
 
 import cc.ryanc.halo.exception.HaloException;
-import cc.ryanc.halo.model.support.ErrorResponse;
+import cc.ryanc.halo.model.support.BaseResponse;
 import cc.ryanc.halo.utils.ExceptionUtils;
 import cn.hutool.extra.servlet.ServletUtil;
 import com.fasterxml.jackson.databind.ObjectMapper;
@@ -36,7 +36,7 @@ public DefaultAuthenticationFailureHandler(boolean productionEnv,
     public void onFailure(HttpServletRequest request, HttpServletResponse response, HaloException exception) throws IOException, ServletException {
         log.warn("Handle unsuccessful authentication, ip: [{}]", ServletUtil.getClientIP(request));
 
-        ErrorResponse errorDetail = new ErrorResponse();
+        BaseResponse errorDetail = new BaseResponse();
 
         errorDetail.setMessage(exception.getMessage());
 

File: src/main/java/cc/ryanc/halo/service/CommentService.java
Patch:
@@ -18,5 +18,5 @@ public interface CommentService extends CrudService<Comment, Long> {
      * @param top top number must not be less than 0
      * @return a page of comments
      */
-    Page<CommentVO> listLatest(int top);
+    Page<CommentVO> pageLatest(int top);
 }

File: src/main/java/cc/ryanc/halo/service/LogService.java
Patch:
@@ -18,5 +18,5 @@ public interface LogService extends CrudService<Log, Long> {
      * @param top top number must not be less than 0
      * @return a page of latest logs
      */
-    Page<LogOutputDTO> listLatest(int top);
+    Page<LogOutputDTO> pageLatest(int top);
 }

File: src/main/java/cc/ryanc/halo/service/PostService.java
Patch:
@@ -44,7 +44,7 @@ public interface PostService extends CrudService<Post, Integer> {
      * @return latest posts
      */
     @NonNull
-    Page<PostSimpleOutputDTO> listLatest(int top);
+    Page<PostSimpleOutputDTO> pageLatest(int top);
 
     /**
      * List by status and type

File: src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java
Patch:
@@ -39,7 +39,7 @@ public CommentServiceImpl(CommentRepository commentRepository,
     }
 
     @Override
-    public Page<CommentVO> listLatest(int top) {
+    public Page<CommentVO> pageLatest(int top) {
         Assert.isTrue(top > 0, "Top number must not be less than 0");
 
         // Build page request

File: src/main/java/cc/ryanc/halo/service/impl/LogServiceImpl.java
Patch:
@@ -28,7 +28,7 @@ public LogServiceImpl(LogRepository logRepository) {
     }
 
     @Override
-    public Page<LogOutputDTO> listLatest(int top) {
+    public Page<LogOutputDTO> pageLatest(int top) {
         Assert.isTrue(top > 0, "Top number must not be less than 0");
 
         // Build page request

File: src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java
Patch:
@@ -59,7 +59,7 @@ public void remove(Integer id) {
     }
 
     @Override
-    public Page<PostSimpleOutputDTO> listLatest(int top) {
+    public Page<PostSimpleOutputDTO> pageLatest(int top) {
         Assert.isTrue(top > 0, "Top number must not be less than 0");
 
         PageRequest latestPageable = PageRequest.of(0, top, Sort.by(Sort.Direction.DESC, "editTime"));

File: src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java
Patch:
@@ -52,11 +52,11 @@ public AdminController(PostService postService,
     @GetMapping(value = {"", "index"})
     public String admin(Model model) {
 
-        Page<PostSimpleOutputDTO> postPage = postService.listLatest(5);
+        Page<PostSimpleOutputDTO> postPage = postService.pageLatest(5);
 
-        Page<CommentVO> commentPage = commentService.listLatest(5);
+        Page<CommentVO> commentPage = commentService.pageLatest(5);
 
-        Page<LogOutputDTO> logPage = logService.listLatest(5);
+        Page<LogOutputDTO> logPage = logService.pageLatest(5);
 
         model.addAttribute("postsCount", postPage.getTotalElements());
         model.addAttribute("commentsCount", commentPage.getTotalElements());

File: src/main/java/cc/ryanc/halo/model/dto/post/PostWithTitleDTO.java
Patch:
@@ -19,6 +19,4 @@ public class PostWithTitleDTO implements OutputConverter<PostWithTitleDTO, Post>
     private Integer id;
 
     private String title;
-
-    private String type;
 }

File: src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java
Patch:
@@ -178,6 +178,8 @@ public JsonResult update(@ModelAttribute Post post,
         //old data
         final Post oldPost = postService.fetchById(post.getPostId()).orElse(new Post());
         post.setPostViews(oldPost.getPostViews());
+        post.setPostPriority(oldPost.getPostPriority());
+        post.setPostSource(oldPost.getPostSource());
         post.setPostContent(MarkdownUtils.renderMarkdown(post.getPostContentMd()));
         post.setUser(oldPost.getUser());
         if (null == post.getPostDate()) {

File: src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java
Patch:
@@ -242,7 +242,7 @@ public Post findByPostUrl(String postUrl, String postType) {
     public List<Post> findPostLatest() {
         Pageable pageable = PageRequest.of(0, 5, Sort.by(Sort.Direction.DESC, "postDate"));
 
-        Page<Post> postPage = postRepository.findAll(pageable);
+        Page<Post> postPage = postRepository.findAllByPostType("post", pageable);
 
         return postPage.getContent();
     }

File: src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java
Patch:
@@ -2,9 +2,9 @@
 
 import cc.ryanc.halo.logging.Logger;
 import cc.ryanc.halo.model.domain.Attachment;
-import cc.ryanc.halo.model.support.QiNiuPutSet;
 import cc.ryanc.halo.model.enums.AttachLocationEnum;
 import cc.ryanc.halo.model.enums.BlogPropertiesEnum;
+import cc.ryanc.halo.model.support.QiNiuPutSet;
 import cc.ryanc.halo.repository.AttachmentRepository;
 import cc.ryanc.halo.service.AttachmentService;
 import cc.ryanc.halo.service.base.AbstractCrudService;
@@ -260,8 +260,8 @@ public Map<String, String> attachUpload(MultipartFile file, HttpServletRequest r
     public Map<String, String> attachQiNiuUpload(MultipartFile file, HttpServletRequest request) {
         final Map<String, String> resultMap = new HashMap<>(7);
         try {
-            // TODO Dynamically set this zone of qiniuyun (七牛云上传附件失败 #110)
-            final Configuration cfg = new Configuration(Zone.zone0());
+            // TODO Wait for testing (七牛云上传附件失败 #110)
+            final Configuration cfg = new Configuration(HaloUtils.getDefaultQiniuZone());
             final String key = Md5Util.getMD5Checksum(file);
             final String accessKey = OPTIONS.get("qiniu_access_key");
             final String secretKey = OPTIONS.get("qiniu_secret_key");

File: src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java
Patch:
@@ -258,8 +258,9 @@ public Map<String, String> attachUpload(MultipartFile file, HttpServletRequest r
      */
     @Override
     public Map<String, String> attachQiNiuUpload(MultipartFile file, HttpServletRequest request) {
-        final Map<String, String> resultMap = new HashMap<>(6);
+        final Map<String, String> resultMap = new HashMap<>(7);
         try {
+            // TODO Dynamically set this zone of qiniuyun (七牛云上传附件失败 #110)
             final Configuration cfg = new Configuration(Zone.zone0());
             final String key = Md5Util.getMD5Checksum(file);
             final String accessKey = OPTIONS.get("qiniu_access_key");

File: src/main/java/cc/ryanc/halo/web/controller/api/ApiCommentController.java
Patch:
@@ -59,7 +59,7 @@ public ApiCommentController(CommentService commentService, PostService postServi
      * @param request request
      * @return JsonResult
      */
-    @PostMapping("save")
+    @PostMapping(value = "/save")
     public JsonResult save(@Valid Comment comment,
                            @RequestParam(value = "postId") Long postId,
                            HttpServletRequest request) {

File: src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * <pre>
- *     图库API
+ *     图库 API
  * </pre>
  *
  * @author : RYAN0UP

File: src/main/java/cc/ryanc/halo/web/controller/core/BaseController.java
Patch:
@@ -1,5 +1,6 @@
 package cc.ryanc.halo.web.controller.core;
 
+import cc.ryanc.halo.logging.Logger;
 import cn.hutool.core.text.StrBuilder;
 
 /**
@@ -12,6 +13,8 @@
  */
 public abstract class BaseController {
 
+    protected Logger log = Logger.getLogger(getClass());
+
     /**
      * 定义默认主题
      */

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java
Patch:
@@ -44,7 +44,6 @@
  * @author : RYAN0UP
  * @date : 2018/4/26
  */
-@Slf4j
 @Controller
 @RequestMapping(value = "/archives")
 public class FrontArchiveController extends BaseController {
@@ -141,7 +140,7 @@ public String getPost(@PathVariable String postUrl,
             model.addAttribute("afterPost", nextPost);
             model.addAttribute("nextPost", nextPost);
         }
-        List<Comment> comments = null;
+        List<Comment> comments;
         if (StrUtil.equals(OPTIONS.get(BlogPropertiesEnum.NEW_COMMENT_NEED_CHECK.getProp()), TrueFalseEnum.TRUE.getDesc()) || OPTIONS.get(BlogPropertiesEnum.NEW_COMMENT_NEED_CHECK.getProp()) == null) {
             comments = commentService.findCommentsByPostAndCommentStatus(post, CommentStatusEnum.PUBLISHED.getCode());
         } else {
@@ -162,7 +161,7 @@ public String getPost(@PathVariable String postUrl,
             size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_COMMENTS.getProp()));
         }
         //评论分页
-        final ListPage<Comment> commentsPage = new ListPage<Comment>(CommentUtil.getComments(comments), cp, size);
+        final ListPage<Comment> commentsPage = new ListPage<>(CommentUtil.getComments(comments), cp, size);
         final int[] rainbow = PageUtil.rainbow(cp, commentsPage.getTotalPage(), 3);
         model.addAttribute("is_post", true);
         model.addAttribute("comments", commentsPage);

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontCommentController.java
Patch:
@@ -1,5 +1,6 @@
 package cc.ryanc.halo.web.controller.front;
 
+import cc.ryanc.halo.logging.Logger;
 import cc.ryanc.halo.model.domain.Comment;
 import cc.ryanc.halo.model.domain.Post;
 import cc.ryanc.halo.model.dto.JsonResult;
@@ -43,10 +44,11 @@
  * @author : RYAN0UP
  * @date : 2018/4/26
  */
-@Slf4j
 @Controller
 public class FrontCommentController {
 
+    private final Logger log = Logger.getLogger(getClass());
+
     @Autowired
     private CommentService commentService;
 

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontSearchController.java
Patch:
@@ -1,5 +1,6 @@
 package cc.ryanc.halo.web.controller.front;
 
+import cc.ryanc.halo.logging.Logger;
 import cc.ryanc.halo.model.domain.Post;
 import cc.ryanc.halo.model.enums.BlogPropertiesEnum;
 import cc.ryanc.halo.model.enums.PostStatusEnum;
@@ -34,11 +35,12 @@
  * @author : RYAN0UP
  * @date : 2019/1/11
  */
-@Slf4j
 @Controller
 @RequestMapping(value = "/search")
 public class FrontSearchController extends BaseController {
 
+    private final Logger log = Logger.getLogger(getClass());
+
     @Autowired
     private PostService postService;
 

File: src/main/java/cc/ryanc/halo/model/domain/Tag.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import lombok.Data;
+import lombok.ToString;
 
 import javax.persistence.*;
 import javax.validation.constraints.NotEmpty;
@@ -18,6 +19,7 @@
  * @date : 2018/1/12
  */
 @Data
+@ToString
 @Entity
 @Table(name = "halo_tag")
 public class Tag implements Serializable {

File: src/main/java/cc/ryanc/halo/model/domain/User.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 import lombok.Data;
+import lombok.ToString;
 
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
@@ -21,6 +22,7 @@
  * @date : 2017/11/14
  */
 @Data
+@ToString
 @Entity
 @Table(name = "halo_user")
 public class User implements Serializable {

File: src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java
Patch:
@@ -53,7 +53,7 @@ public JsonResult handleMissingServletRequestParameterException(MissingServletRe
     public JsonResult handleConstraintViolationException(ConstraintViolationException e) {
         JsonResult jsonResult = handleBaseException(e);
         jsonResult.setCode(HttpStatus.BAD_REQUEST.value());
-        jsonResult.setMsg("Filed validation error");
+        jsonResult.setMsg("Field validation error");
         jsonResult.setResult(e.getConstraintViolations());
         return jsonResult;
     }
@@ -63,7 +63,7 @@ public JsonResult handleConstraintViolationException(ConstraintViolationExceptio
     public JsonResult handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {
         JsonResult jsonResult = handleBaseException(e);
         jsonResult.setCode(HttpStatus.BAD_REQUEST.value());
-        jsonResult.setMsg("Filed validation error");
+        jsonResult.setMsg("Field validation error");
         Map<String, String> errMap = ValidationUtils.mapWithFieldError(e.getBindingResult().getFieldErrors());
         jsonResult.setResult(errMap);
         return jsonResult;

File: src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java
Patch:
@@ -39,7 +39,7 @@ public String handleError(HttpServletRequest request) {
         // Get the exception
         Throwable throwable = (Throwable) request.getAttribute("javax.servlet.error.exception");
 
-        if (StringUtils.startsWithIgnoreCase(throwable.getMessage(), "Could not resolve view with name '")) {
+        if (throwable != null && StringUtils.startsWithIgnoreCase(throwable.getMessage(), "Could not resolve view with name '")) {
             // TODO May cause unreasoned problem
             // if Ftl was not found then redirect to /404
             return "redirect:/404";

File: src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java
Patch:
@@ -253,7 +253,7 @@ public JsonResult pushPage(@ModelAttribute Post post, HttpSession session) {
             post.setPostContent(MarkdownUtils.renderMarkdown(post.getPostContentMd()));
             //当没有选择文章缩略图的时候，自动分配一张内置的缩略图
             if (StrUtil.equals(post.getPostThumbnail(), BlogPropertiesEnum.DEFAULT_THUMBNAIL.getProp())) {
-                post.setPostThumbnail("/static/halo-frontend/images/thumbnail/thumbnail-" + RandomUtil.randomInt(1, 11) + ".jpg");
+                post.setPostThumbnail(OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + "/static/halo-frontend/images/thumbnail/thumbnail-" + RandomUtil.randomInt(1, 11) + ".jpg");
             }
             postService.create(post);
             logsService.save(LogsRecord.PUSH_PAGE, post.getPostTitle(), request);

File: src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java
Patch:
@@ -150,7 +150,7 @@ public JsonResult save(@ModelAttribute Post post,
             }
             //当没有选择文章缩略图的时候，自动分配一张内置的缩略图
             if (StrUtil.equals(post.getPostThumbnail(), BlogPropertiesEnum.DEFAULT_THUMBNAIL.getProp())) {
-                post.setPostThumbnail("/static/halo-frontend/images/thumbnail/thumbnail-" + RandomUtil.randomInt(1, 11) + ".jpg");
+                post.setPostThumbnail(OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + "/static/halo-frontend/images/thumbnail/thumbnail-" + RandomUtil.randomInt(1, 11) + ".jpg");
             }
             postService.create(post);
             logsService.save(LogsRecord.PUSH_POST, post.getPostTitle(), request);
@@ -189,7 +189,7 @@ public JsonResult update(@ModelAttribute Post post,
         }
         //当没有选择文章缩略图的时候，自动分配一张内置的缩略图
         if (StrUtil.equals(post.getPostThumbnail(), BlogPropertiesEnum.DEFAULT_THUMBNAIL.getProp())) {
-            post.setPostThumbnail("/static/halo-frontend/images/thumbnail/thumbnail-" + RandomUtil.randomInt(1, 11) + ".jpg");
+            post.setPostThumbnail(OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + "/static/halo-frontend/images/thumbnail/thumbnail-" + RandomUtil.randomInt(1, 11) + ".jpg");
         }
         post = postService.create(post);
         if (null != post) {

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontSearchController.java
Patch:
@@ -9,6 +9,7 @@
 import cc.ryanc.halo.web.controller.core.BaseController;
 import cn.hutool.core.util.PageUtil;
 import cn.hutool.core.util.StrUtil;
+import cn.hutool.http.HtmlUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
@@ -48,7 +49,7 @@ public class FrontSearchController extends BaseController {
     @GetMapping
     public String search(Model model,
                          @RequestParam(value = "keyword") String keyword) {
-        return this.search(model, keyword, 1);
+        return this.search(model, HtmlUtil.escape(keyword), 1);
     }
 
     /**
@@ -69,7 +70,7 @@ public String search(Model model,
             size = Integer.parseInt(HaloConst.OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()));
         }
         final Pageable pageable = PageRequest.of(page - 1, size, sort);
-        final Page<Post> posts = postService.searchPosts(keyword,PostTypeEnum.POST_TYPE_POST.getDesc(),PostStatusEnum.PUBLISHED.getCode(),pageable);
+        final Page<Post> posts = postService.searchPosts(HtmlUtil.escape(keyword),PostTypeEnum.POST_TYPE_POST.getDesc(),PostStatusEnum.PUBLISHED.getCode(),pageable);
         final int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);
         model.addAttribute("is_search", true);
         model.addAttribute("keyword", keyword);

File: src/main/java/cc/ryanc/halo/repository/CommentRepository.java
Patch:
@@ -79,7 +79,7 @@ public interface CommentRepository extends JpaRepository<Comment, Long> {
      *
      * @return List
      */
-    @Query(value = "SELECT * FROM HALO_COMMENT ORDER BY COMMENT_DATE DESC LIMIT 5", nativeQuery = true)
+    @Query(value = "SELECT * FROM halo_comment ORDER BY comment_date DESC LIMIT 5", nativeQuery = true)
     List<Comment> findTopFive();
 
     /**
@@ -96,6 +96,6 @@ public interface CommentRepository extends JpaRepository<Comment, Long> {
      * @param limit 条数
      * @return List
      */
-    @Query(value = "SELECT * FROM HALO_COMMENT WHERE COMMENT_STATUS = 0 ORDER BY COMMENT_DATE DESC LIMIT :limit",nativeQuery = true)
+    @Query(value = "SELECT * FROM halo_comment WHERE comment_status = 0 ORDER BY comment_date DESC LIMIT :limit",nativeQuery = true)
     List<Comment> getCommentsByLimit(@Param(value = "limit") int limit);
 }

File: src/main/java/cc/ryanc/halo/repository/LogsRepository.java
Patch:
@@ -21,6 +21,6 @@ public interface LogsRepository extends JpaRepository<Logs, Long> {
      *
      * @return List
      */
-    @Query(value = "SELECT * FROM HALO_LOGS ORDER BY LOG_CREATED DESC LIMIT 5", nativeQuery = true)
+    @Query(value = "SELECT * FROM halo_logs ORDER BY log_created DESC LIMIT 5", nativeQuery = true)
     List<Logs> findTopFive();
 }

File: src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java
Patch:
@@ -180,12 +180,14 @@ public JsonResult doInstall(@RequestParam("blogLocale") String blogLocale,
             menuIndex.setMenuName("首页");
             menuIndex.setMenuUrl("/");
             menuIndex.setMenuSort(1);
+            menuIndex.setMenuIcon(" ");
             menuService.save(menuIndex);
 
             Menu menuArchive = new Menu();
             menuArchive.setMenuName("归档");
             menuArchive.setMenuUrl("/archives");
             menuArchive.setMenuSort(2);
+            menuArchive.setMenuIcon(" ");
             menuService.save(menuArchive);
 
             HaloConst.OPTIONS.clear();

File: src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java
Patch:
@@ -52,6 +52,7 @@ public class WebMvcAutoConfiguration implements WebMvcConfigurer {
     @Override
     public void addInterceptors(InterceptorRegistry registry) {
         registry.addInterceptor(loginInterceptor)
+                .addPathPatterns("/admin.*")
                 .addPathPatterns("/admin/**")
                 .addPathPatterns("/backup/**")
                 .excludePathPatterns("/admin/login")
@@ -65,6 +66,7 @@ public void addInterceptors(InterceptorRegistry registry) {
         registry.addInterceptor(apiInterceptor)
                 .addPathPatterns("/api/**");
         registry.addInterceptor(localeInterceptor)
+                .addPathPatterns("/admin.*")
                 .addPathPatterns("/admin/**")
                 .addPathPatterns("/install");
         registry.addInterceptor(localeChangeInterceptor())

File: src/main/java/cc/ryanc/halo/config/FreeMarkerAutoConfiguration.java
Patch:
@@ -21,7 +21,7 @@
  */
 @Slf4j
 @Configuration
-public class FreeMarkerConfig {
+public class FreeMarkerAutoConfiguration {
 
     @Autowired
     private freemarker.template.Configuration configuration;

File: src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java
Patch:
@@ -30,7 +30,7 @@
 @EnableWebMvc
 @ComponentScan(basePackages = "cc.ryanc.halo.web.controller")
 @PropertySource(value = "classpath:application.yaml", ignoreResourceNotFound = true, encoding = "UTF-8")
-public class MvcConfig implements WebMvcConfigurer {
+public class WebMvcAutoConfiguration implements WebMvcConfigurer {
 
     @Autowired
     private LoginInterceptor loginInterceptor;

File: src/main/java/cc/ryanc/halo/utils/SpringUtil.java
Patch:
@@ -11,6 +11,7 @@
  */
 @Component
 public class SpringUtil implements ApplicationContextAware {
+
     private static ApplicationContext applicationContext;
 
     /**

File: src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java
Patch:
@@ -227,7 +227,7 @@ public String logsClear() {
     }
 
     /**
-     * 不可描述的页面
+     * Halo关于页面
      *
      * @return 模板路径admin/admin_halo
      */

File: src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java
Patch:
@@ -54,7 +54,7 @@ public class AttachmentController {
     private LocaleMessageUtil localeMessageUtil;
 
     /**
-     * 获取upload的所有图片资源并渲染页面
+     * 复印件列表
      *
      * @param model model
      * @return 模板路径admin/admin_attachment

File: src/main/java/cc/ryanc/halo/web/controller/admin/BackupController.java
Patch:
@@ -207,16 +207,16 @@ public JsonResult delBackup(@RequestParam("fileName") String fileName,
     public String backupOption(@RequestParam("auto_backup") String autoBackup) throws TemplateModelException {
         if (StrUtil.equals(autoBackup, TrueFalseEnum.TRUE.getDesc())) {
             if (StrUtil.equals(HaloConst.OPTIONS.get(BlogPropertiesEnum.AUTO_BACKUP.getProp()), TrueFalseEnum.FALSE.getDesc())) {
-                optionsService.saveOption("auto_backup", TrueFalseEnum.TRUE.getDesc());
                 CronUtil.start();
                 log.info("The scheduled task starts successfully!");
             }
+            optionsService.saveOption("auto_backup", TrueFalseEnum.TRUE.getDesc());
         } else {
             if (StrUtil.equals(HaloConst.OPTIONS.get(BlogPropertiesEnum.AUTO_BACKUP.getProp()), TrueFalseEnum.TRUE.getDesc())) {
-                optionsService.saveOption("auto_backup", TrueFalseEnum.FALSE.getDesc());
                 CronUtil.stop();
                 log.info("The scheduled task stops successfully!");
             }
+            optionsService.saveOption("auto_backup", TrueFalseEnum.FALSE.getDesc());
         }
         configuration.setSharedVariable("options", optionsService.findAllOptions());
         HaloConst.OPTIONS.clear();

File: src/main/java/cc/ryanc/halo/config/FreeMarkerConfig.java
Patch:
@@ -1,7 +1,5 @@
 package cc.ryanc.halo.config;
 
-import cc.ryanc.halo.model.dto.HaloConst;
-import cc.ryanc.halo.model.enums.BlogPropertiesEnum;
 import cc.ryanc.halo.model.tag.ArticleTagDirective;
 import cc.ryanc.halo.model.tag.CommonTagDirective;
 import cc.ryanc.halo.service.OptionsService;
@@ -48,7 +46,6 @@ public void setSharedVariable() {
             configuration.setSharedVariable("articleTag", articleTagDirective);
             configuration.setSharedVariable("options", optionsService.findAllOptions());
             configuration.setSharedVariable("user", userService.findUser());
-            configuration.setSharedVariable("themeName", HaloConst.OPTIONS.get(BlogPropertiesEnum.THEME.getProp()));
         } catch (TemplateModelException e) {
             log.error("自定义标签加载失败：{}", e.getMessage());
         }

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java
Patch:
@@ -11,6 +11,7 @@
 import cc.ryanc.halo.utils.CommentUtil;
 import cc.ryanc.halo.web.controller.core.BaseController;
 import cn.hutool.core.collection.CollUtil;
+import cn.hutool.core.util.PageUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -153,10 +154,12 @@ public String getPost(@PathVariable String postUrl,
         }
         //评论分页
         ListPage<Comment> commentsPage = new ListPage<Comment>(CommentUtil.getComments(comments),cp, size);
+        int[] rainbow = PageUtil.rainbow(cp, commentsPage.getTotalPage(), 3);
         model.addAttribute("is_post",true);
         model.addAttribute("post", post);
         model.addAttribute("comments", commentsPage);
         model.addAttribute("commentsCount", comments.size());
+        model.addAttribute("rainbow", rainbow);
         model.addAttribute("tagWords", CollUtil.join(tagWords, ","));
         postService.updatePostView(post);
         return this.render("post");

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontCategoryController.java
Patch:
@@ -7,6 +7,7 @@
 import cc.ryanc.halo.service.CategoryService;
 import cc.ryanc.halo.service.PostService;
 import cc.ryanc.halo.web.controller.core.BaseController;
+import cn.hutool.core.util.PageUtil;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
@@ -88,8 +89,10 @@ public String categories(Model model,
         }
         Pageable pageable = PageRequest.of(page - 1, size, sort);
         Page<Post> posts = postService.findPostByCategories(category, pageable);
+        int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);
         model.addAttribute("is_categories",true);
         model.addAttribute("posts", posts);
+        model.addAttribute("rainbow", rainbow);
         model.addAttribute("category", category);
         return this.render("category");
     }

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java
Patch:
@@ -5,6 +5,7 @@
 import cc.ryanc.halo.model.enums.BlogPropertiesEnum;
 import cc.ryanc.halo.service.PostService;
 import cc.ryanc.halo.web.controller.core.BaseController;
+import cn.hutool.core.util.PageUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -75,8 +76,10 @@ public String index(Model model,
         if (null == posts) {
             return this.renderNotFound();
         }
+        int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);
         model.addAttribute("is_index",true);
         model.addAttribute("posts", posts);
+        model.addAttribute("rainbow", rainbow);
         return this.render("index");
     }
 

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontPageController.java
Patch:
@@ -14,6 +14,7 @@
 import cc.ryanc.halo.service.PostService;
 import cc.ryanc.halo.utils.CommentUtil;
 import cc.ryanc.halo.web.controller.core.BaseController;
+import cn.hutool.core.util.PageUtil;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
@@ -95,10 +96,12 @@ public String getPage(@PathVariable(value = "postUrl") String postUrl,
         }
         //评论分页
         ListPage<Comment> commentsPage = new ListPage<Comment>(CommentUtil.getComments(comments),cp, size);
+        int[] rainbow = PageUtil.rainbow(cp, commentsPage.getTotalPage(), 3);
         model.addAttribute("is_page",true);
         model.addAttribute("post", post);
         model.addAttribute("comments", commentsPage);
         model.addAttribute("commentsCount", comments.size());
+        model.addAttribute("rainbow", rainbow);
         postService.updatePostView(post);
         return this.render("page");
     }

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontTagController.java
Patch:
@@ -7,6 +7,7 @@
 import cc.ryanc.halo.service.PostService;
 import cc.ryanc.halo.service.TagService;
 import cc.ryanc.halo.web.controller.core.BaseController;
+import cn.hutool.core.util.PageUtil;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.data.domain.Page;
@@ -83,8 +84,10 @@ public String tags(Model model,
         }
         Pageable pageable = PageRequest.of(page - 1, size, sort);
         Page<Post> posts = postService.findPostsByTags(tag, pageable);
+        int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);
         model.addAttribute("is_tags",true);
         model.addAttribute("posts", posts);
+        model.addAttribute("rainbow", rainbow);
         model.addAttribute("tag", tag);
         return this.render("tag");
     }

File: src/main/java/cc/ryanc/halo/model/enums/BlogProperties.java
Patch:
@@ -49,12 +49,12 @@ public enum BlogProperties {
     /**
      * 邮箱地址
      */
-    MAIL_SMTP_USERNAME("smtp_username"),
+    MAIL_SMTP_USERNAME("mail_smtp_username"),
 
     /**
      * 邮箱密码／授权码
      */
-    MAIL_SMTP_PASSWORD("smtp_password"),
+    MAIL_SMTP_PASSWORD("mail_smtp_password"),
 
     /**
      * 发送者名称

File: src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java
Patch:
@@ -164,7 +164,7 @@ public JsonResult pushPost(@ModelAttribute Post post, @RequestParam("cateList")
         try {
             //提取摘要
             int postSummary = 50;
-            if (StringUtils.isNotEmpty(BlogProperties.POST_SUMMARY.getProp())) {
+            if (StringUtils.isNotEmpty(HaloConst.OPTIONS.get(BlogProperties.POST_SUMMARY.getProp()))) {
                 postSummary = Integer.parseInt(HaloConst.OPTIONS.get(BlogProperties.POST_SUMMARY.getProp()));
             }
             //文章摘要

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontPageController.java
Patch:
@@ -76,8 +76,9 @@ public String getPage(@PathVariable(value = "postUrl") String postUrl, Model mod
         if(null==post){
             return this.renderNotFound();
         }
-        model.addAttribute("comments", CommentUtil.getComments(comments.getContent()));
         model.addAttribute("post", post);
+        model.addAttribute("comments", CommentUtil.getComments(comments.getContent()));
+        model.addAttribute("commentsCount", comments.getTotalElements());
         postService.updatePostView(post);
         return this.render("page");
     }

File: src/main/java/cc/ryanc/halo/model/tag/ArticleTagDirective.java
Patch:
@@ -1,5 +1,6 @@
 package cc.ryanc.halo.model.tag;
 
+import cc.ryanc.halo.model.enums.PostStatus;
 import cc.ryanc.halo.model.enums.PostType;
 import cc.ryanc.halo.service.PostService;
 import freemarker.core.Environment;
@@ -33,7 +34,7 @@ public void execute(Environment environment, Map map, TemplateModel[] templateMo
             String method = map.get(METHOD_KEY).toString();
             switch (method) {
                 case "postsCount":
-                    environment.setVariable("postsCount", builder.build().wrap(postService.findAllPosts(PostType.POST_TYPE_POST.getDesc()).size()));
+                    environment.setVariable("postsCount", builder.build().wrap(postService.findPostByStatus(PostStatus.PUBLISHED.getCode(), PostType.POST_TYPE_POST.getDesc()).size()));
                     break;
                 case "archives":
                     environment.setVariable("archives", builder.build().wrap(postService.findPostGroupByYearAndMonth()));

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java
Patch:
@@ -99,7 +99,7 @@ public String archives(Model model,
     @GetMapping(value = "{postUrl}")
     public String getPost(@PathVariable String postUrl, Model model) {
         Post post = postService.findByPostUrl(postUrl, HaloConst.POST_TYPE_POST);
-        if(null==post){
+        if(null==post || post.getPostStatus()!=0){
             return this.renderNotFound();
         }
         //获得当前文章的发布日期

File: src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java
Patch:
@@ -19,7 +19,7 @@ public interface AttachmentRepository extends JpaRepository<Attachment, Long> {
      * 查询所有附件，分页
      *
      * @param pageable pageable
-     * @return page
+     * @return Page
      */
     @Override
     Page<Attachment> findAll(Pageable pageable);

File: src/main/java/cc/ryanc/halo/repository/CategoryRepository.java
Patch:
@@ -17,7 +17,7 @@ public interface CategoryRepository extends JpaRepository<Category, Long> {
      * 根据分类目录路径查询，用于验证是否已经存在该路径
      *
      * @param cateUrl cateUrl 文章url
-     * @return category
+     * @return Category
      */
     Category findCategoryByCateUrl(String cateUrl);
 }

File: src/main/java/cc/ryanc/halo/repository/LogsRepository.java
Patch:
@@ -19,7 +19,7 @@ public interface LogsRepository extends JpaRepository<Logs, Long> {
     /**
      * 查询最新的五条数据
      *
-     * @return list
+     * @return List
      */
     @Query(value = "SELECT * FROM halo_logs ORDER BY log_created DESC LIMIT 5", nativeQuery = true)
     List<Logs> findTopFive();

File: src/main/java/cc/ryanc/halo/repository/OptionsRepository.java
Patch:
@@ -17,7 +17,7 @@ public interface OptionsRepository extends JpaRepository<Options, Long> {
      * 根据key查询单个option
      *
      * @param key key
-     * @return String
+     * @return Options
      */
     Options findOptionsByOptionName(String key);
 }

File: src/main/java/cc/ryanc/halo/repository/TagRepository.java
Patch:
@@ -17,15 +17,15 @@ public interface TagRepository extends JpaRepository<Tag, Long> {
      * 根据标签路径查询，用于验证是否已经存在该路径
      *
      * @param tagUrl tagUrl
-     * @return tag
+     * @return Tag
      */
     Tag findTagByTagUrl(String tagUrl);
 
     /**
      * 根据标签名称查询
      *
      * @param tagName 标签名
-     * @return tag
+     * @return Tag
      */
     Tag findTagByTagName(String tagName);
 }

File: src/main/java/cc/ryanc/halo/repository/UserRepository.java
Patch:
@@ -18,7 +18,7 @@ public interface UserRepository extends JpaRepository<User, Long> {
      *
      * @param userName userName
      * @param userPass userPass
-     * @return list
+     * @return User
      */
     User findByUserNameAndUserPass(String userName, String userPass);
 
@@ -27,7 +27,7 @@ public interface UserRepository extends JpaRepository<User, Long> {
      *
      * @param userEmail userEmail
      * @param userPass  userPass
-     * @return list
+     * @return User
      */
     User findByUserEmailAndUserPass(String userEmail, String userPass);
 

File: src/main/java/cc/ryanc/halo/service/AttachmentService.java
Patch:
@@ -24,15 +24,15 @@ public interface AttachmentService {
     /**
      * 查询所有附件信息
      *
-     * @return list
+     * @return List
      */
     List<Attachment> findAllAttachments();
 
     /**
      * 查询所有附件，分页
      *
      * @param pageable pageable
-     * @return page
+     * @return Page
      */
     Page<Attachment> findAllAttachments(Pageable pageable);
 

File: src/main/java/cc/ryanc/halo/service/MenuService.java
Patch:
@@ -22,23 +22,23 @@ public interface MenuService {
     /**
      * 查询所有菜单
      *
-     * @return list
+     * @return List
      */
     List<Menu> findAllMenus();
 
     /**
      * 删除菜单
      *
      * @param menuId menuId
-     * @return menu
+     * @return Menu
      */
     Menu removeByMenuId(Long menuId);
 
     /**
      * 根据编号查询菜单
      *
      * @param menuId menuId
-     * @return Menu
+     * @return Optional
      */
     Optional<Menu> findByMenuId(Long menuId);
 }

File: src/main/java/cc/ryanc/halo/service/OptionsService.java
Patch:
@@ -35,7 +35,7 @@ public interface OptionsService {
     /**
      * 获取所有设置选项
      *
-     * @return map
+     * @return Map
      */
     Map<String, String> findAllOptions();
 

File: src/main/java/cc/ryanc/halo/service/UserService.java
Patch:
@@ -31,14 +31,14 @@ public interface UserService {
      *
      * @param userEmail userEmail
      * @param userPass  userPass
-     * @return list
+     * @return User
      */
     User userLoginByEmail(String userEmail, String userPass);
 
     /**
      * 查询所有用户
      *
-     * @return list
+     * @return User
      */
     User findUser();
 
@@ -47,7 +47,7 @@ public interface UserService {
      *
      * @param userId   userid
      * @param userPass userpass
-     * @return user
+     * @return User
      */
     User findByUserIdAndUserPass(Long userId, String userPass);
 

File: src/main/java/cc/ryanc/halo/service/impl/CategoryServiceImpl.java
Patch:
@@ -47,7 +47,7 @@ public Category removeByCateId(Long cateId) {
     /**
      * 查询所有分类目录
      *
-     * @return list
+     * @return List
      */
     @Override
     public List<Category> findAllCategories() {
@@ -69,14 +69,13 @@ public Optional<Category> findByCateId(Long cateId) {
      * 根据分类目录路径查询，用于验证是否已经存在该路径
      *
      * @param cateUrl cateUrl
-     * @return category
+     * @return Category
      */
     @Override
     public Category findByCateUrl(String cateUrl) {
         return categoryRepository.findCategoryByCateUrl(cateUrl);
     }
 
-
     @Override
     public List<Category> strListToCateList(List<String> strings) {
         if (null == strings) {

File: src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java
Patch:
@@ -34,7 +34,7 @@ public Link saveByLink(Link link) {
      * 移除友情链接
      *
      * @param linkId linkId
-     * @return link
+     * @return Link
      */
     @Override
     public Link removeByLinkId(Long linkId) {
@@ -46,7 +46,7 @@ public Link removeByLinkId(Long linkId) {
     /**
      * 查询所有友情链接
      *
-     * @return list
+     * @return List
      */
     @Override
     public List<Link> findAllLinks() {
@@ -57,7 +57,7 @@ public List<Link> findAllLinks() {
      * 根据编号查询友情链接
      *
      * @param linkId linkId
-     * @return Link
+     * @return Optional
      */
     @Override
     public Optional<Link> findByLinkId(Long linkId) {

File: src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java
Patch:
@@ -22,7 +22,7 @@ public class MenuServiceImpl implements MenuService {
     /**
      * 查询所有菜单
      *
-     * @return list
+     * @return List
      */
     @Override
     public List<Menu> findAllMenus() {
@@ -44,7 +44,7 @@ public Menu saveByMenu(Menu menu) {
      * 删除菜单
      *
      * @param menuId menuId
-     * @return menu
+     * @return Menu
      */
     @Override
     public Menu removeByMenuId(Long menuId) {

File: src/main/java/cc/ryanc/halo/service/impl/OptionsServiceImpl.java
Patch:
@@ -76,7 +76,7 @@ public void removeOption(Options options) {
     /**
      * 获取设置选项
      *
-     * @return map
+     * @return Map
      */
     @Override
     public Map<String, String> findAllOptions() {

File: src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java
Patch:
@@ -34,7 +34,7 @@ public void saveByUser(User user) {
      *
      * @param userName userName
      * @param userPass userPass
-     * @return user
+     * @return User
      */
     @Override
     public User userLoginByName(String userName, String userPass) {
@@ -46,7 +46,7 @@ public User userLoginByName(String userName, String userPass) {
      *
      * @param userEmail userEmail
      * @param userPass  userPass
-     * @return list
+     * @return User
      */
     @Override
     public User userLoginByEmail(String userEmail, String userPass) {
@@ -56,7 +56,7 @@ public User userLoginByEmail(String userEmail, String userPass) {
     /**
      * 查询所有用户
      *
-     * @return list
+     * @return User
      */
     @Override
     public User findUser() {

File: src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java
Patch:
@@ -11,7 +11,6 @@
 import cc.ryanc.halo.service.LogsService;
 import cc.ryanc.halo.service.PostService;
 import cc.ryanc.halo.service.UserService;
-import cc.ryanc.halo.utils.HaloUtils;
 import cc.ryanc.halo.web.controller.core.BaseController;
 import cn.hutool.core.date.DateUnit;
 import cn.hutool.core.date.DateUtil;

File: src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java
Patch:
@@ -8,7 +8,6 @@
 import cc.ryanc.halo.service.LinkService;
 import cc.ryanc.halo.service.LogsService;
 import cc.ryanc.halo.service.PostService;
-import cc.ryanc.halo.utils.HaloUtils;
 import cn.hutool.core.date.DateUtil;
 import cn.hutool.extra.servlet.ServletUtil;
 import lombok.extern.slf4j.Slf4j;
@@ -25,7 +24,6 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpSession;
 import javax.websocket.server.PathParam;
-import java.util.Date;
 import java.util.List;
 import java.util.Optional;
 

File: src/main/java/cc/ryanc/halo/web/controller/admin/UserController.java
Patch:
@@ -42,7 +42,7 @@ public String profile() {
      *
      * @param user    user
      * @param session session
-     * @return true：修改成功，false：修改失败
+     * @return JsonResult
      */
     @PostMapping(value = "save")
     @ResponseBody
@@ -69,7 +69,7 @@ public JsonResult saveProfile(@ModelAttribute User user, HttpSession session) {
      * @param newPass    新密码
      * @param userId     用户编号
      * @param session    session
-     * @return true：修改密码成功，false：修改密码失败
+     * @return JsonResult
      */
     @PostMapping(value = "changePass")
     @ResponseBody

File: src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java
Patch:
@@ -23,7 +23,7 @@ public class CommonController implements ErrorController {
      * 渲染404，500
      *
      * @param request request
-     * @return string
+     * @return String
      */
     @GetMapping(value = ERROR_PATH)
     public String handleError(HttpServletRequest request) {
@@ -39,7 +39,7 @@ public String handleError(HttpServletRequest request) {
      * 渲染404页面
      *
      * @param model model
-     * @return string
+     * @return String
      */
     @GetMapping(value = "/404")
     public String fourZeroFour(Model model) {
@@ -52,7 +52,7 @@ public String fourZeroFour(Model model) {
      * 渲染500页面
      *
      * @param model model
-     * @return string
+     * @return String
      */
     @GetMapping(value = "/500")
     public String fiveZeroZero(Model model) {

File: src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java
Patch:
@@ -18,7 +18,6 @@
 
 import javax.servlet.http.HttpServletRequest;
 import java.util.ArrayList;
-import java.util.Date;
 import java.util.List;
 
 /**

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java
Patch:
@@ -17,7 +17,6 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.ResponseBody;
 
 import java.util.Date;
 import java.util.List;

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java
Patch:
@@ -78,7 +78,7 @@ public String index(Model model,
      * ajax分页
      *
      * @param page page 当前页码
-     * @return List<Post>集合</>
+     * @return List
      */
     @GetMapping(value = "next")
     @ResponseBody

File: src/main/java/cc/ryanc/halo/web/controller/front/FrontTagController.java
Patch:
@@ -47,7 +47,7 @@ public String tags() {
      *
      * @param tagUrl 标签路径
      * @param model  model
-     * @return string
+     * @return String
      */
     @GetMapping(value = "{tagUrl}")
     public String tags(Model model,
@@ -61,7 +61,7 @@ public String tags(Model model,
      * @param model  model
      * @param tagUrl 标签路径
      * @param page   页码
-     * @return string
+     * @return String
      */
     @GetMapping(value = "{tagUrl}/page/{page}")
     public String tags(Model model,

File: src/main/java/cc/ryanc/halo/web/controller/api/ApiCategoryController.java
Patch:
@@ -40,7 +40,7 @@ public JsonResult categories(){
      * @param cateUrl 分类路径
      * @return JsonResult
      */
-    @GetMapping(value = "/${cateUrl}")
+    @GetMapping(value = "/{cateUrl}")
     public JsonResult categories(@PathVariable("cateUrl") String cateUrl){
         Category category = categoryService.findByCateUrl(cateUrl);
         if(null!=category){

File: src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java
Patch:
@@ -4,6 +4,7 @@
 import cc.ryanc.halo.model.dto.JsonResult;
 import cc.ryanc.halo.service.LinkService;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
@@ -25,6 +26,7 @@ public class ApiLinkController {
      *
      * @return JsonResult
      */
+    @GetMapping
     public JsonResult links(){
         List<Link> links = linkService.findAllLinks();
         if(null!=links && links.size()>0){

File: src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java
Patch:
@@ -4,6 +4,7 @@
 import cc.ryanc.halo.model.dto.JsonResult;
 import cc.ryanc.halo.service.MenuService;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
@@ -25,6 +26,7 @@ public class ApiMenuController {
      *
      * @return JsonResult
      */
+    @GetMapping
     public JsonResult menus(){
         List<Menu> menus = menuService.findAllMenus();
         if(null!=menus && menus.size()>0){

File: src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java
Patch:
@@ -53,7 +53,7 @@ public JsonResult posts(@PathVariable(value = "page") Integer page){
      * @param postUrl 文章路径
      * @return JsonResult
      */
-    @GetMapping(value = "/posts/${postUrl}")
+    @GetMapping(value = "/posts/{postUrl}")
     public JsonResult posts(@PathVariable(value = "postUrl") String postUrl){
         Post post = postService.findByPostUrl(postUrl,HaloConst.POST_TYPE_POST);
         if(null!=post){

File: src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java
Patch:
@@ -43,7 +43,7 @@ public JsonResult tags(){
      * @param tagUrl tagUrl
      * @return JsonResult
      */
-    @GetMapping(value = "/${tagUrl}")
+    @GetMapping(value = "/{tagUrl}")
     public JsonResult tags(@PathVariable("tagUrl") String tagUrl){
         Tag tag = tagService.findByTagUrl(tagUrl);
         if(null!=tag){

File: src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java
Patch:
@@ -14,6 +14,7 @@
 import cc.ryanc.halo.web.controller.core.BaseController;
 import cn.hutool.core.lang.Validator;
 import cn.hutool.crypto.SecureUtil;
+import cn.hutool.http.HtmlUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -145,7 +146,7 @@ public String getLogin(@ModelAttribute("loginName") String loginName,
                 userService.updateUserLoginEnable("false");
             }
             userService.updateUserLoginLast(new Date());
-            logsService.saveByLogs(new Logs(LogsRecord.LOGIN, LogsRecord.LOGIN_ERROR + "[" + loginName + "," + loginPwd + "]", HaloUtils.getIpAddr(request), new Date()));
+            logsService.saveByLogs(new Logs(LogsRecord.LOGIN, LogsRecord.LOGIN_ERROR + "[" + HtmlUtil.encode(loginName) + "," + HtmlUtil.encode(loginPwd) + "]", HaloUtils.getIpAddr(request), new Date()));
             log.error("登录失败！：{0}", e.getMessage());
         }
         return status;

File: src/main/java/cc/ryanc/halo/web/controller/IndexController.java
Patch:
@@ -249,6 +249,8 @@ public String gallery(Model model){
         User user = userService.findUser();
         model.addAttribute("user",user);
 
+        model.addAttribute("is_gallery",true);
+
         //设置选项
         model.addAttribute("options",HaloConst.OPTIONS);
         return this.render("gallery");

File: src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java
Patch:
@@ -118,7 +118,8 @@ public String removeLink(@PathParam("linkId") Long linkId){
      * @return String
      */
     @GetMapping(value = "/gallery")
-    public String gallery(){
-        return "";
+    public String gallery(Model model){
+        model.addAttribute("options",HaloConst.OPTIONS);
+        return "admin/admin_page_gallery";
     }
 }

File: src/main/java/cc/ryanc/halo/model/domain/Attachment.java
Patch:
@@ -20,6 +20,8 @@
 @Table(name = "halo_attachment")
 public class Attachment implements Serializable{
 
+    private static final long serialVersionUID = 3060117944880138064L;
+
     /**
      * 附件编号
      */

File: src/main/java/cc/ryanc/halo/model/domain/Category.java
Patch:
@@ -19,6 +19,8 @@
 @Table(name = "halo_category")
 public class Category implements Serializable{
 
+    private static final long serialVersionUID = 8383678847517271505L;
+
     /**
      * 分类编号
      */

File: src/main/java/cc/ryanc/halo/model/domain/Link.java
Patch:
@@ -19,6 +19,8 @@
 @Table(name = "halo_link")
 public class Link implements Serializable{
 
+    private static final long serialVersionUID = 5441686055841177588L;
+
     /**
      * 友情链接编号
      */

File: src/main/java/cc/ryanc/halo/model/domain/Logs.java
Patch:
@@ -20,6 +20,8 @@
 @Table(name = "halo_logs")
 public class Logs implements Serializable {
 
+    private static final long serialVersionUID = -2571815432301283171L;
+
     /**
      * id
      */

File: src/main/java/cc/ryanc/halo/model/domain/Options.java
Patch:
@@ -19,6 +19,8 @@
 @Table(name = "halo_options")
 public class Options implements Serializable {
 
+    private static final long serialVersionUID = -4065369084341893446L;
+
     /**
      * 设置项名称
      */

File: src/main/java/cc/ryanc/halo/model/domain/Post.java
Patch:
@@ -17,6 +17,9 @@
 @Entity
 @Table(name = "halo_post")
 public class Post implements Serializable{
+
+    private static final long serialVersionUID = -6019684584665869629L;
+
     /**
      * 文章编号
      */

File: src/main/java/cc/ryanc/halo/model/domain/Tag.java
Patch:
@@ -19,6 +19,8 @@
 @Table(name = "halo_tag")
 public class Tag implements Serializable{
 
+    private static final long serialVersionUID = -7501342327884372194L;
+
     /**
      * 标签编号
      */

File: src/main/java/cc/ryanc/halo/model/domain/User.java
Patch:
@@ -16,6 +16,8 @@
 @Table(name = "halo_user")
 public class User implements Serializable{
 
+    private static final long serialVersionUID = -5144055068797033748L;
+
     /**
      * 编号
      */

File: src/main/java/cc/ryanc/halo/repository/CommentRepository.java
Patch:
@@ -43,7 +43,7 @@ public interface CommentRepository extends JpaRepository<Comment,Long> {
      * @param status status
      * @return page
      */
-    Page<Comment> findCommentsByPostAndCommentStatus(Post post,Pageable pageable,Integer status);
+    Page<Comment> findCommentsByPostAndCommentStatusNot(Post post,Pageable pageable,Integer status);
 
     /**
      * 查询最新的前五条评论

File: src/main/java/cc/ryanc/halo/repository/PostRepository.java
Patch:
@@ -2,7 +2,6 @@
 
 import cc.ryanc.halo.model.domain.Category;
 import cc.ryanc.halo.model.domain.Post;
-import cc.ryanc.halo.model.dto.Archive;
 import org.springframework.data.domain.Page;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.jpa.repository.JpaRepository;
@@ -116,7 +115,7 @@ public interface PostRepository extends JpaRepository<Post,Long>{
      * @param pageable pageable
      * @return page
      */
-    @Query(value = "select * from halo_post where post_status=0 and year(post_date)=:year and month(post_date)=:month order by ?#{#pageable}",countQuery = "select * from halo_post",nativeQuery = true)
+    @Query(value = "select * from halo_post where post_status=0 and year(post_date)=:year and month(post_date)=:month order by ?#{#pageable}",countQuery = "select count(*) from halo_post where post_status=0 and year(post_date)=:year and month(post_date)=:month",nativeQuery = true)
     Page<Post> findPostByYearAndMonth(@Param("year") String year,@Param("month") String month,Pageable pageable);
 
     List<Post> findPostByCategories(Category category);

File: src/main/java/cc/ryanc/halo/web/controller/admin/OptionController.java
Patch:
@@ -6,7 +6,6 @@
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;
-import org.springframework.ui.Model;
 import org.springframework.web.bind.annotation.*;
 import java.util.Map;
 
@@ -30,7 +29,7 @@ public class OptionController {
      * @return freemarker
      */
     @GetMapping
-    public String options(Model model){
+    public String options(){
         return "admin/admin_option";
     }
 

File: src/test/java/cc/ryanc/halo/util/DemoUtilTest.java
Patch:
@@ -5,7 +5,7 @@
 /**
  * @author : RYAN0UP
  * @date : 2017/12/26
- * @version: 1.0
+ * @version : 1.0
  * description:
  */
 public class DemoUtilTest {

File: src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java
Patch:
@@ -15,6 +15,7 @@ public interface AttachmentRepository extends JpaRepository<Attachment,Long>{
 
     /**
      * 查询所有附件，分页
+     *
      * @param pageable pageable
      * @return  page
      */

File: src/main/java/cc/ryanc/halo/repository/CategoryRepository.java
Patch:
@@ -13,7 +13,8 @@ public interface CategoryRepository extends JpaRepository<Category,Long>{
 
     /**
      * 根据分类目录路径查询，用于验证是否已经存在该路径
-     * @param cateUrl cateUrl
+     *
+     * @param cateUrl cateUrl 文章url
      * @return category
      */
     Category findCategoryByCateUrl(String cateUrl);

File: src/main/java/cc/ryanc/halo/repository/LogsRepository.java
Patch:
@@ -9,13 +9,14 @@
 /**
  * @author : RYAN0UP
  * @version : 1.0
- * description :
  * @date : 2018/1/19
+ * description :
  */
 public interface LogsRepository extends JpaRepository<Logs,Long> {
 
     /**
      * 查询最新的五条数据
+     *
      * @return list
      */
     @Query(value = "SELECT * FROM halo_logs ORDER BY log_created DESC LIMIT 5",nativeQuery = true)

File: src/main/java/cc/ryanc/halo/repository/OptionsRepository.java
Patch:
@@ -13,6 +13,7 @@ public interface OptionsRepository extends JpaRepository<Options,Long>{
 
     /**
      * 根据key查询单个option
+     *
      * @param key key
      * @return String
      */

File: src/main/java/cc/ryanc/halo/service/impl/LogsServiceImpl.java
Patch:
@@ -37,7 +37,6 @@ public Logs saveByLogs(Logs logs) {
      * 根据编号移除
      *
      * @param logsId logsId
-     * @return Logs
      */
     @Override
     public void removeByLogsId(Long logsId) {

File: src/main/java/cc/ryanc/halo/web/controller/admin/OptionController.java
Patch:
@@ -26,16 +26,18 @@ public class OptionController {
 
     /**
      * 请求跳转到option页面并完成渲染
+     *
      * @return freemarker
      */
     @GetMapping
     public String options(Model model){
         model.addAttribute("options", HaloConst.OPTIONS);
-        return "admin/option";
+        return "admin/admin_option";
     }
 
     /**
      * 保存设置选项
+     *
      * @param options options
      */
     @PostMapping(value = "/save")

