File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/MySql57Test.java
Patch:
@@ -22,7 +22,7 @@ public void test_0() throws Exception {
                 + "\n\tCHANGE COLUMN c1 c1 VARCHAR(255);", SQLUtils.toMySqlString(stmt));
 
         assertEquals("alter table t1" //
-                + "\n\tALGORITHM = INPLACE," //
+                + "\n\talgorithm = INPLACE," //
                 + "\n\tchange column c1 c1 VARCHAR(255);", SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
     }
 }

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSQLStatementParser.java
Patch:
@@ -893,6 +893,9 @@ public SQLStatement parseSet() {
                 }
                 // skip comma
                 lexer.nextToken();
+                if (lexer.token() == SEMI) {
+                    break;
+                }
             }
         }
 

File: core/src/main/java/com/alibaba/druid/sql/ast/expr/SQLStructExpr.java
Patch:
@@ -62,7 +62,9 @@ public SQLStructExpr clone() {
     }
 
     protected void cloneTo(SQLStructExpr x) {
-        x.dataType = this.dataType.clone();
+        if (this.dataType != null) {
+            x.dataType = this.dataType.clone();
+        }
         for (SQLAliasedExpr item : items) {
             x.addItem(item.clone());
         }

File: core/src/main/java/com/alibaba/druid/DbType.java
Patch:
@@ -89,6 +89,7 @@ public enum DbType {
     athena(1L << 52),
 
     polardbx(1L << 53),
+    supersql(1L << 54),
 
     ingres(0),
     cloudscape(0),

File: core/src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -169,6 +169,7 @@ private static boolean limitQueryBlock(SQLSelect select, DbType dbType, int offs
             case hive:
             case odps:
             case presto:
+            case supersql:
                 return limitSQLQueryBlock(queryBlock, dbType, offset, count, check);
             case oracle:
             case oceanbase_oracle:

File: core/src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -568,6 +568,7 @@ public static SQLASTOutputVisitor createFormatOutputVisitor(
                 return new SparkOutputVisitor(out);
             case presto:
             case trino:
+            case supersql:
                 return new PrestoOutputVisitor(out);
             case athena:
                 return new AthenaOutputVisitor(out);

File: core/src/main/java/com/alibaba/druid/sql/ast/expr/SQLExprUtils.java
Patch:
@@ -132,7 +132,7 @@ public static String quote(String str, DbType dbType, char quote) {
         if (quote == '`') {
             expr = new SQLIdentifierExpr(str);
         } else if (quote == '"') {
-            if (dbType == DbType.oracle || dbType == DbType.presto || dbType == DbType.trino) {
+            if (dbType == DbType.oracle || dbType == DbType.presto || dbType == DbType.trino || dbType == DbType.supersql) {
                 expr = new SQLIdentifierExpr(str);
             } else {
                 expr = new SQLCharExpr(str);

File: core/src/main/java/com/alibaba/druid/sql/ast/expr/SQLTimeExpr.java
Patch:
@@ -147,6 +147,7 @@ public List<SQLObject> getChildren() {
             DbType.oracle,
             DbType.presto,
             DbType.trino,
+            DbType.supersql,
             DbType.postgresql,
             DbType.mariadb,
             DbType.tidb,

File: core/src/main/java/com/alibaba/druid/sql/builder/SQLFunctionBuilder.java
Patch:
@@ -64,6 +64,7 @@ public SQLMethodInvokeExpr ifnull(SQLExpr expr1, SQLExpr expr2) {
             case presto:
             case trino:
             case odps:
+            case supersql:
                 return new SQLMethodInvokeExpr("coalesce", null, expr1, expr2);
             case oracle:
                 return new SQLMethodInvokeExpr("nvl", null, expr1, expr2);

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -2417,6 +2417,7 @@ private MySqlExplainStatement parseExplain(MySqlExplainStatement explain) {
         switch (dbType) {
             case mysql:
             case ads:
+            case supersql:
             case presto:
             case trino:
                 Lexer.SavePoint mark = lexer.mark();

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -187,6 +187,7 @@ public static SQLStatementParser createSQLStatementParser(String sql, DbType dbT
                 return new HiveStatementParser(sql, features);
             case presto:
             case trino:
+            case supersql:
                 return new PrestoStatementParser(sql, features);
             case athena:
                 return new AthenaStatementParser(sql, features);
@@ -255,6 +256,7 @@ public static SQLExprParser createExprParser(String sql, DbType dbType, SQLParse
                 return new PhoenixExprParser(sql, features);
             case presto:
             case trino:
+            case supersql:
                 return new PrestoExprParser(sql, features);
             case athena:
                 return new AthenaExprParser(sql, features);
@@ -322,6 +324,7 @@ public static Lexer createLexer(String sql, DbType dbType, SQLParserFeature... f
                 return new PhoenixLexer(sql, features);
             case presto:
             case trino:
+            case supersql:
                 return new PrestoLexer(sql, features);
             case athena:
                 return new AthenaLexer(sql, features);

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -5361,7 +5361,7 @@ public boolean visit(SQLCreateDatabaseStatement x) {
                     || dbType == DbType.mariadb) {
                 println();
                 print0(ucase ? "WITH (" : "with (");
-            } else if (dbType == DbType.hive || dbType == DbType.presto || dbType == DbType.trino) {
+            } else if (dbType == DbType.hive || dbType == DbType.presto || dbType == DbType.trino || dbType == DbType.supersql) {
                 println();
                 print0(ucase ? "WITH DBPROPERTIES (" : "with dbproperties (");
             } else {
@@ -7581,7 +7581,7 @@ public boolean visit(SQLArrayExpr x) {
         } else if (expr != null) {
             expr.accept(this);
         } else {
-            boolean trino = dbType == DbType.trino || dbType == DbType.presto;
+            boolean trino = dbType == DbType.trino || dbType == DbType.presto || dbType == DbType.supersql;
             if (trino) {
                 print0(ucase ? "ARRAY" : "array");
             }
@@ -9538,7 +9538,7 @@ public boolean visit(SQLIntervalExpr x) {
         print0(ucase ? "INTERVAL " : "interval ");
         SQLExpr value = x.getValue();
 
-        boolean quote = (dbType == DbType.presto || dbType == DbType.trino)
+        boolean quote = (dbType == DbType.presto || dbType == DbType.trino || dbType == DbType.supersql)
                 && !(value instanceof SQLTextLiteralExpr);
         if (quote) {
             print('\'');

File: core/src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -137,6 +137,7 @@ static WallProvider initWallProviderInternal(DataSourceProxy dataSource, String
             case lealone:
             case presto:
             case trino:
+            case supersql:
             case polardbx:
                 if (config == null) {
                     config = new WallConfig(MySqlWallProvider.DEFAULT_CONFIG_DIR);

File: core/src/main/java/com/alibaba/druid/sql/ast/expr/SQLStructExpr.java
Patch:
@@ -62,6 +62,7 @@ public SQLStructExpr clone() {
     }
 
     protected void cloneTo(SQLStructExpr x) {
+        x.dataType = this.dataType.clone();
         for (SQLAliasedExpr item : items) {
             x.addItem(item.clone());
         }

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest43.java
Patch:
@@ -65,9 +65,9 @@ public void test_0() throws Exception {
                 "\tname VARCHAR(35)\n" +
                 ")\n" +
                 "PARTITION BY LIST (id) (\n" +
-                "\tPARTITION r0 VALUES IN (1, 5, 9, 13, 17, 21), \n" +
-                "\tPARTITION r1 VALUES IN (2, 6, 10, 14, 18, 22), \n" +
-                "\tPARTITION r2 VALUES IN (3, 7, 11, 15, 19, 23), \n" +
+                "\tPARTITION r0 VALUES IN (1, 5, 9, 13, 17, 21),\n" +
+                "\tPARTITION r1 VALUES IN (2, 6, 10, 14, 18, 22),\n" +
+                "\tPARTITION r2 VALUES IN (3, 7, 11, 15, 19, 23),\n" +
                 "\tPARTITION r3 VALUES IN (4, 8, 12, 16, 20, 24)\n" +
                 ");", output);
 

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest44.java
Patch:
@@ -65,9 +65,9 @@ public void test_0() throws Exception {
                 "\tb INT NULL\n" +
                 ")\n" +
                 "PARTITION BY LIST COLUMNS (a, b) (\n" +
-                "\tPARTITION p0 VALUES IN ((0, 0), (NULL, NULL)), \n" +
-                "\tPARTITION p1 VALUES IN ((0, 1), (0, 2), (0, 3), (1, 1), (1, 2)), \n" +
-                "\tPARTITION p2 VALUES IN ((1, 0), (2, 0), (2, 1), (3, 0), (3, 1)), \n" +
+                "\tPARTITION p0 VALUES IN ((0, 0), (NULL, NULL)),\n" +
+                "\tPARTITION p1 VALUES IN ((0, 1), (0, 2), (0, 3), (1, 1), (1, 2)),\n" +
+                "\tPARTITION p2 VALUES IN ((1, 0), (2, 0), (2, 1), (3, 0), (3, 1)),\n" +
                 "\tPARTITION p3 VALUES IN ((1, 3), (2, 2), (2, 3), (3, 2), (3, 3))\n" +
                 ");", output);
 

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest45.java
Patch:
@@ -74,13 +74,13 @@ public void test_0() throws Exception {
                 "PARTITION BY LIST (YEAR(adate)) (\n" +
                 "\tPARTITION p1999 VALUES IN (1995, 1999, 2003)\n" +
                 "\t\tDATA DIRECTORY '/var/appdata/95/data'\n" +
-                "\t\tINDEX DIRECTORY '/var/appdata/95/idx', \n" +
+                "\t\tINDEX DIRECTORY '/var/appdata/95/idx',\n" +
                 "\tPARTITION p2000 VALUES IN (1996, 2000, 2004)\n" +
                 "\t\tDATA DIRECTORY '/var/appdata/96/data'\n" +
-                "\t\tINDEX DIRECTORY '/var/appdata/96/idx', \n" +
+                "\t\tINDEX DIRECTORY '/var/appdata/96/idx',\n" +
                 "\tPARTITION p2001 VALUES IN (1997, 2001, 2005)\n" +
                 "\t\tDATA DIRECTORY '/var/appdata/97/data'\n" +
-                "\t\tINDEX DIRECTORY '/var/appdata/97/idx', \n" +
+                "\t\tINDEX DIRECTORY '/var/appdata/97/idx',\n" +
                 "\tPARTITION p2002 VALUES IN (1998, 2002, 2006)\n" +
                 "\t\tDATA DIRECTORY '/var/appdata/98/data'\n" +
                 "\t\tINDEX DIRECTORY '/var/appdata/98/idx'\n" +

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/createTable/OracleCreateTableTest69.java
Patch:
@@ -49,9 +49,9 @@ public void test_types() throws Exception {
                         ")\n" +
                         "PARTITION BY HASH (COL) (\n" +
                         "\tPARTITION PART01\n" +
-                        "\t\tTABLESPACE HASH_TS01, \n" +
+                        "\t\tTABLESPACE HASH_TS01,\n" +
                         "\tPARTITION PART02\n" +
-                        "\t\tTABLESPACE HASH_TS02, \n" +
+                        "\t\tTABLESPACE HASH_TS02,\n" +
                         "\tPARTITION PART03\n" +
                         "\t\tTABLESPACE HASH_TS03\n" +
                         ")",//

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectQueryBlock.java
Patch:
@@ -1231,6 +1231,9 @@ public boolean replace(SQLExpr expr, SQLExpr target) {
 
     protected <T extends SQLObject> boolean replaceList(List<T> exprList, T expr, T target) {
         boolean isReplaced = false;
+        if (exprList == null) {
+            return isReplaced;
+        }
         for (int i = 0; i < exprList.size(); i++) {
             if (exprList.get(i) == expr) {
                 target.setParent(this);

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectOrderByItem.java
Patch:
@@ -21,7 +21,7 @@
 
 import java.util.List;
 
-public final class SQLSelectOrderByItem extends SQLObjectImpl implements SQLReplaceable {
+public final class SQLSelectOrderByItem extends SQLExprImpl implements SQLReplaceable {
     protected SQLExpr expr;
     protected String collate;
     protected SQLExpr opclass;

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest91.java
Patch:
@@ -187,7 +187,7 @@ public void test_true4() {
         WallProvider provider = initWallProvider();
         {
             String sql = "SELECT 10006, @";
-            Assert.assertTrue(provider.checkValid(sql));
+            Assert.assertFalse(provider.checkValid(sql));
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/bigquery/parser/BigQueryExprParser.java
Patch:
@@ -333,12 +333,12 @@ public SQLExpr primaryRest(SQLExpr expr) {
         return super.primaryRest(expr);
     }
 
-    public SQLDataType parseDataType() {
+    public SQLDataType parseDataType(boolean restrict) {
         if (lexer.nextIf(Token.ANY)) {
             acceptIdentifier("TYPE");
             return new SQLDataTypeImpl("ANY TYPE");
         }
-        return parseDataType(true);
+        return super.parseDataType(restrict);
     }
 
     protected SQLExpr dotRest(SQLExpr expr) {

File: core/src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -137,7 +137,7 @@ public enum Token {
     REPLACE("REPLACE"),
     PERIOD("PERIOD"),
 
-    BITS,
+    BITS("BITS"),
 
     // MySql procedure add by zz
     WHILE("WHILE"),

File: core/src/main/java/com/alibaba/druid/sql/ast/expr/SQLArrayExpr.java
Patch:
@@ -143,6 +143,9 @@ public boolean equals(Object obj) {
 
     @Override
     public boolean replace(SQLExpr expr, SQLExpr target) {
+        if (this.expr == expr) {
+            setExpr(target);
+        }
         for (int i = 0; i < values.size(); i++) {
             if (values.get(i) == expr) {
                 target.setParent(this);

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGVacuumStatement.java
Patch:
@@ -122,8 +122,6 @@ public void setTruncate(boolean truncate) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -1279,9 +1279,6 @@ public final void nextToken() {
 
             if (ch == '$') {
                 scanVariable();
-                if (isVariantChar(charAt(pos + 1))) {
-                    scanVariable();
-                }
                 return;
             }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/bigquery/visitor/BigQueryOutputVisitor.java
Patch:
@@ -112,11 +112,11 @@ public boolean visit(SQLStructDataType.Field x) {
         SQLName name = x.getName();
         if (name != null) {
             name.accept(this);
+            print(' ');
         }
         SQLDataType dataType = x.getDataType();
 
         if (dataType != null) {
-            print(' ');
             dataType.accept(this);
         }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/clickhouse/parser/CKExprParser.java
Patch:
@@ -30,7 +30,6 @@
 import com.alibaba.druid.sql.parser.SQLParserFeature;
 import com.alibaba.druid.sql.parser.Token;
 import com.alibaba.druid.util.FnvHash;
-import com.google.common.collect.Lists;
 
 import java.util.Arrays;
 import java.util.List;
@@ -53,7 +52,7 @@ public class CKExprParser extends SQLExprParser {
             int index = Arrays.binarySearch(AGGREGATE_FUNCTIONS_CODES, hash);
             AGGREGATE_FUNCTIONS[index] = str;
         }
-        NESTED_DATA_TYPE = Lists.newArrayList("array", "tuple", "nullable", "lowcardinality", "variant");
+        NESTED_DATA_TYPE = Arrays.asList("array", "tuple", "nullable", "lowcardinality", "variant");
     }
 
     public CKExprParser(String sql) {

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSelectParser.java
Patch:
@@ -24,8 +24,8 @@
 import com.alibaba.druid.sql.dialect.postgresql.ast.stmt.PGSelectQueryBlock.IntoOption;
 import com.alibaba.druid.sql.parser.*;
 import com.alibaba.druid.util.FnvHash;
-import com.google.common.collect.Lists;
 
+import java.util.Arrays;
 import java.util.List;
 
 public class PGSelectParser extends SQLSelectParser {
@@ -393,6 +393,6 @@ private void parserParameters(List<SQLParameter> parameters) {
 
     @Override
     protected List<String> getReturningFunctions() {
-        return Lists.newArrayList("GENERATE_SERIES", "GENERATE_SUBSCRIPTS");
+        return Arrays.asList("GENERATE_SERIES", "GENERATE_SUBSCRIPTS");
     }
 }

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -23,8 +23,8 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlOrderingExpr;
 import com.alibaba.druid.util.FnvHash;
 import com.alibaba.druid.util.StringUtils;
-import com.google.common.collect.Lists;
 
+import java.util.Collections;
 import java.util.List;
 
 import static com.alibaba.druid.sql.parser.DialectFeature.ParserFeature.*;
@@ -1409,7 +1409,7 @@ protected SQLTableSource parseGeneratedTableSource() {
     }
 
     protected List<String> getReturningFunctions() {
-        return Lists.newArrayList("GENERATE_SERIES");
+        return Collections.singletonList("GENERATE_SERIES");
     }
 
     protected SQLTableSource primaryTableSourceRest(SQLTableSource tableSource) {

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -4386,7 +4386,7 @@ public SQLStatement parseCreateExternalCatalog() {
         return stmt;
     }
 
-    public SQLStatement parseCreateTrigger() {
+    public SQLCreateStatement parseCreateTrigger() {
         SQLCreateTriggerStatement stmt = new SQLCreateTriggerStatement(getDbType());
 
         if (lexer.token == Token.CREATE) {
@@ -4577,7 +4577,7 @@ public SQLCreateProcedureStatement parseCreateProcedure() {
         throw new ParserException("TODO " + lexer.token);
     }
 
-    public SQLStatement parseCreateSequence() {
+    public SQLCreateStatement parseCreateSequence() {
         accept(Token.CREATE);
         SQLCreateSequenceStatement stmt = new SQLCreateSequenceStatement();
 

File: core/src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -597,6 +597,9 @@ public interface Constants {
         long RECURSIVE = fnv1a_64_lower("RECURSIVE");
         long ROLLUP = fnv1a_64_lower("ROLLUP");
         long CUBE = fnv1a_64_lower("CUBE");
+        long TEMPLATE = fnv1a_64_lower("TEMPLATE");
+        long ALLOW_CONNECTIONS = fnv1a_64_lower("ALLOW_CONNECTIONS");
+        long IS_TEMPLATE = fnv1a_64_lower("IS_TEMPLATE");
 
         long YEAR = fnv1a_64_lower("YEAR");
         long QUARTER = fnv1a_64_lower("QUARTER");

File: core/src/main/java/com/alibaba/druid/sql/ast/SQLSetQuantifier.java
Patch:
@@ -23,6 +23,7 @@ public interface SQLSetQuantifier {
     public static final int UNIQUE = 3;
     public static final int DISTINCTROW = 4;
     public static final int ALL_EXCEPT = 5;
+    public static final int STRAIGHT_JOIN = 6;
 
     // <SetQuantifier>
 }

File: core/src/main/java/com/alibaba/druid/sql/dialect/bigquery/parser/BigQueryExprParser.java
Patch:
@@ -93,6 +93,7 @@ protected SQLExpr methodRest(SQLExpr expr, boolean acceptLPAREN) {
                 castExpr.setDataType(
                         parseDataType()
                 );
+                castExpr = parseCastFormat(castExpr);
                 accept(Token.RPAREN);
                 return castExpr;
             }

File: core/src/main/java/com/alibaba/druid/sql/dialect/bigquery/parser/BigQueryLexer.java
Patch:
@@ -109,6 +109,7 @@ protected Keywords loadKeywords() {
         map.put("TABLE", Token.TABLE);
         map.put("EXCEPTION", Token.EXCEPTION);
         map.put("RAISE", Token.RAISE);
+        map.put("ELSEIF", Token.ELSEIF);
 
         return new Keywords(map);
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/bigquery/parser/BigQueryLexer.java
Patch:
@@ -107,6 +107,8 @@ protected Keywords loadKeywords() {
         map.put("BEGIN", Token.BEGIN);
         map.put("END", Token.END);
         map.put("TABLE", Token.TABLE);
+        map.put("EXCEPTION", Token.EXCEPTION);
+        map.put("RAISE", Token.RAISE);
 
         return new Keywords(map);
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleSchemaStatVisitor.java
Patch:
@@ -300,7 +300,7 @@ public boolean visit(OracleSysdateExpr x) {
     }
 
     @Override
-    public boolean visit(OracleExceptionStatement.Item x) {
+    public boolean visit(SQLExceptionStatement.Item x) {
         SQLExpr when = x.getWhen();
         if (when instanceof SQLIdentifierExpr) {
             SQLIdentifierExpr ident = (SQLIdentifierExpr) when;

File: core/src/main/java/com/alibaba/druid/sql/dialect/oscar/visitor/OscarOutputVisitor.java
Patch:
@@ -633,12 +633,12 @@ public boolean visit(OracleSysdateExpr x) {
     }
 
     @Override
-    public boolean visit(OracleExceptionStatement x) {
+    public boolean visit(SQLExceptionStatement x) {
         return false;
     }
 
     @Override
-    public boolean visit(OracleExceptionStatement.Item x) {
+    public boolean visit(SQLExceptionStatement.Item x) {
         return false;
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGOutputVisitor.java
Patch:
@@ -835,12 +835,12 @@ public boolean visit(OracleSysdateExpr x) {
     }
 
     @Override
-    public boolean visit(OracleExceptionStatement x) {
+    public boolean visit(SQLExceptionStatement x) {
         return false;
     }
 
     @Override
-    public boolean visit(OracleExceptionStatement.Item x) {
+    public boolean visit(SQLExceptionStatement.Item x) {
         return false;
     }
 

File: core/src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -251,6 +251,9 @@ public enum Token {
     ANALYZE("ANALYZE"),
     OPTIMIZE("OPTIMIZE"),
 
+    // bigquery
+    RAISE("RAISE"),
+
     // transact-sql
     TOP("TOP"),
 

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/visitor/OracleASTVisitorAdapterTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.druid.bvt.sql.oracle.visitor;
 
+import com.alibaba.druid.sql.ast.statement.SQLExceptionStatement;
 import com.alibaba.druid.sql.ast.SQLParameter;
 import com.alibaba.druid.sql.ast.expr.*;
 import com.alibaba.druid.sql.ast.statement.*;
@@ -75,8 +76,8 @@ public void test_adapter() throws Exception {
         new OracleAlterSessionStatement().accept(adapter);
         new SQLExprStatement().accept(adapter);
         new OracleDatetimeExpr().accept(adapter);
-        new OracleExceptionStatement().accept(adapter);
-        new OracleExceptionStatement.Item().accept(adapter);
+        new SQLExceptionStatement().accept(adapter);
+        new SQLExceptionStatement.Item().accept(adapter);
         new OracleArgumentExpr().accept(adapter);
         new OracleSetTransactionStatement().accept(adapter);
         new SQLDropSequenceStatement().accept(adapter);

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2512,7 +2512,7 @@ public boolean visit(SQLSelectGroupByClause x) {
 
                 if (i != 0) {
                     if (groupItemSingleLine) {
-                        println(", ");
+                        println(',');
                     } else {
                         if (item instanceof SQLGroupingSetExpr) {
                             println();

File: core/src/test/java/com/alibaba/druid/bvt/sql/odps/OdpsSelectTest24.java
Patch:
@@ -137,7 +137,7 @@ public void test_select() throws Exception {
                 "ON t1.region_id = t3.region_id\n" +
                 "WHERE t1.add_date = '${date_minus_1}'\n" +
                 "\tOR t2.order_id IS NOT NULL\n" +
-                "GROUP BY t1.member_id, \n" +
+                "GROUP BY t1.member_id,\n" +
                 "\tt3.city_id", SQLUtils.formatOdps(sql));
 
         assertEquals("select ta.member_id as member_id, ta.city_id\n" +
@@ -189,7 +189,7 @@ public void test_select() throws Exception {
                 "on t1.region_id = t3.region_id\n" +
                 "where t1.add_date = '${date_minus_1}'\n" +
                 "\tor t2.order_id is not null\n" +
-                "group by t1.member_id, \n" +
+                "group by t1.member_id,\n" +
                 "\tt3.city_id", SQLUtils.formatOdps(sql, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
 
         List<SQLStatement> statementList = SQLUtils.parseStatements(sql, JdbcConstants.ODPS);

File: core/src/test/java/com/alibaba/druid/bvt/sql/odps/OdpsSelectTest26.java
Patch:
@@ -50,7 +50,7 @@ public void test_select() throws Exception {
                 "\t\t'CheckMobileConflict', \n" +
                 "\t\t'VerifyEmail'\n" +
                 "\t)\n" +
-                "GROUP BY process, \n" +
+                "GROUP BY process,\n" +
                 "\tvalue5", SQLUtils.formatOdps(sql));
 
         assertEquals("select count(DISTINCT (trackid)) as total, process, value5 as result\n" +
@@ -70,7 +70,7 @@ public void test_select() throws Exception {
                 "\t\t'CheckMobileConflict', \n" +
                 "\t\t'VerifyEmail'\n" +
                 "\t)\n" +
-                "group by process, \n" +
+                "group by process,\n" +
                 "\tvalue5", SQLUtils.formatOdps(sql, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
 
         List<SQLStatement> statementList = SQLUtils.parseStatements(sql, JdbcConstants.ODPS);

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -12200,7 +12200,7 @@ public boolean visit(SQLCreateFunctionStatement x) {
 
             for (int i = 0; i < paramSize; ++i) {
                 if (i != 0) {
-                    print0(", ");
+                    print(',');
                     println();
                 }
                 SQLParameter param = x.getParameters().get(i);
@@ -12225,7 +12225,6 @@ protected void printCreateFunctionBody(SQLCreateFunctionStatement x) {
         }
         println();
         println(ucase ? "AS" : "as");
-        println();
         block.accept(this);
     }
 

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/create/OracleCreateFunctionTest_4.java
Patch:
@@ -71,8 +71,8 @@ public void test_types() throws Exception {
         assertEquals(1, statementList.size());
 
         assertEquals("FUNCTION SPLITSTR (\n" +
-                        "\tSTR IN CLOB, \n" +
-                        "\tI IN NUMBER := 0, \n" +
+                        "\tSTR IN CLOB,\n" +
+                        "\tI IN NUMBER := 0,\n" +
                         "\tSEP IN VARCHAR2 := ','\n" +
                         ")\n" +
                         "RETURN VARCHAR2DETERMINISTIC \n" +

File: core/src/main/java/com/alibaba/druid/sql/dialect/clickhouse/parser/CKCreateTableParser.java
Patch:
@@ -27,7 +27,8 @@ protected SQLCreateTableStatement newCreateStatement() {
     public SQLPartitionBy parsePartitionBy() {
         lexer.nextToken();
         accept(Token.BY);
-        SQLPartitionBy sqlPartitionBy = new SQLPartitionByList();
+        SQLPartitionByList sqlPartitionBy = new SQLPartitionByList();
+        sqlPartitionBy.setType(SQLPartitionByList.PartitionByListType.LIST_EXPRESSION);
         boolean hasParen = false;
         if (lexer.nextIf(Token.LPAREN)) {
             hasParen = true;

File: core/src/main/java/com/alibaba/druid/sql/dialect/oscar/parser/OscarCreateTableParser.java
Patch:
@@ -27,11 +27,13 @@ public SQLPartitionBy parsePartitionBy() {
             SQLPartitionByList list = new SQLPartitionByList();
 
             if (lexer.token() == Token.LPAREN) {
+                list.setType(SQLPartitionByList.PartitionByListType.LIST_EXPRESSION);
                 lexer.nextToken();
                 list.addColumn(this.exprParser.expr());
                 accept(Token.RPAREN);
             } else {
                 acceptIdentifier("COLUMNS");
+                list.setType(SQLPartitionByList.PartitionByListType.LIST_COLUMNS);
                 accept(Token.LPAREN);
                 for (; ; ) {
                     list.addColumn(this.exprParser.name());

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGCreateTableParser.java
Patch:
@@ -70,11 +70,13 @@ public SQLPartitionBy parsePartitionBy() {
             SQLPartitionByList list = new SQLPartitionByList();
 
             if (lexer.token() == Token.LPAREN) {
+                list.setType(SQLPartitionByList.PartitionByListType.LIST_EXPRESSION);
                 lexer.nextToken();
                 list.addColumn(this.exprParser.expr());
                 accept(Token.RPAREN);
             } else {
                 acceptIdentifier("COLUMNS");
+                list.setType(SQLPartitionByList.PartitionByListType.LIST_COLUMNS);
                 accept(Token.LPAREN);
                 for (; ; ) {
                     list.addColumn(this.exprParser.name());

File: core/src/main/java/com/alibaba/druid/sql/dialect/starrocks/parser/StarRocksCreateTableParser.java
Patch:
@@ -162,6 +162,7 @@ public SQLPartitionBy parsePartitionBy() {
                 hasLparen = true;
             } else if (lexer.nextIfIdentifier(FnvHash.Constants.LIST)) {
                 partitionClause = new SQLPartitionByList();
+                ((SQLPartitionByList) partitionClause).setType(SQLPartitionByList.PartitionByListType.LIST_EXPRESSION);
                 accept(Token.LPAREN);
                 hasLparen = true;
             } else if (lexer.nextIf(Token.LPAREN)) {

File: core/src/test/java/com/alibaba/druid/bvt/sql/presto/TrinoResourceTest.java
Patch:
@@ -21,7 +21,7 @@
 
 import static org.junit.Assert.assertEquals;
 
-public class TrinoResourceTest extends SQLResourceTest{
+public class TrinoResourceTest extends SQLResourceTest {
 
     public TrinoResourceTest() {
         super(DbType.trino);
@@ -159,7 +159,7 @@ public void test_92() throws Exception {
 
     @Test
     public void trino_parse() throws Exception {
-        fileTest(1, 999, i -> "bvt/parser/trino/" + i + ".txt");
+        fileTest(0, 999, i -> "bvt/parser/trino/" + i + ".txt");
     }
 
     public void exec_test(String resource) throws Exception {

File: core/src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -1165,5 +1165,6 @@ public static interface Constants {
         long NOCOMPRESS = fnv1a_64_lower("NOCOMPRESS");
         long COMPRESS_MODE = fnv1a_64_lower("COMPRESS_MODE");
         long BROKER = fnv1a_64_lower("BROKER");
+        long INDEX = fnv1a_64_lower("INDEX");
     }
 }

File: core/src/main/java/com/alibaba/druid/sql/dialect/doris/parser/DorisLexer.java
Patch:
@@ -25,6 +25,7 @@ protected Keywords loadKeywords() {
         map.put("PERCENT", Token.PERCENT);
         map.put("REPEATABLE", Token.REPEATABLE);
         map.put("TABLESAMPLE", Token.TABLESAMPLE);
+        map.put("USING", Token.USING);
 //        map.put("DISTRIBUTED", Token.DISTRIBUTE);
 
         return new Keywords(map);

File: core/src/test/java/com/alibaba/druid/bvt/sql/doris/DorisResourceTest.java
Patch:
@@ -11,6 +11,6 @@ public DorisResourceTest() {
 
     @Test
     public void doris_parse() throws Exception {
-        fileTest(0, 999, i -> "bvt/parser/doris/" + i + ".txt");
+        fileTest(1, 999, i -> "bvt/parser/doris/" + i + ".txt");
     }
 }

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTableStatement.java
Patch:
@@ -1654,7 +1654,8 @@ public enum Feature {
         Dimension(1 << 8),
         Set(1 << 9),
         MultiSet(1 << 10),
-        Volatile(1 << 11);
+        Volatile(1 << 11),
+        Unlogged(1 << 12);
         public final int mask;
 
         Feature(int mask) {

File: core/src/main/java/com/alibaba/druid/sql/dialect/gaussdb/parser/GaussDbLexer.java
Patch:
@@ -20,6 +20,7 @@ protected Keywords loadKeywords() {
         map.put("PARTIAL", Token.PARTIAL);
         map.put("KEY", Token.KEY);
         map.put("OVERWRITE", Token.OVERWRITE);
+        map.put("LOCAL", Token.LOCAL);
         map.putAll(super.loadKeywords().getKeywords());
         return new Keywords(map);
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/gaussdb/visitor/GaussDbASTVisitor.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.druid.sql.dialect.gaussdb.visitor;
 
-import com.alibaba.druid.sql.dialect.gaussdb.ast.GaussDbCreateTableStatement;
 import com.alibaba.druid.sql.dialect.gaussdb.ast.GaussDbDistributeBy;
+import com.alibaba.druid.sql.dialect.gaussdb.ast.stmt.GaussDbCreateTableStatement;
 import com.alibaba.druid.sql.dialect.gaussdb.ast.stmt.GaussDbInsertStatement;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -10417,7 +10417,8 @@ protected void printCreateTableFeatures(SQLCreateTableStatement x) {
                 SQLCreateTableStatement.Feature.Shadow,
                 SQLCreateTableStatement.Feature.External,
                 SQLCreateTableStatement.Feature.Transactional,
-                SQLCreateTableStatement.Feature.Dimension
+                SQLCreateTableStatement.Feature.Dimension,
+                SQLCreateTableStatement.Feature.Unlogged
         };
 
         for (SQLCreateTableStatement.Feature feature : features) {

File: core/src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -1162,6 +1162,7 @@ public static interface Constants {
         long PREFIX = fnv1a_64_lower("PREFIX");
         long NUMSTR = fnv1a_64_lower("NUMSTR");
         long NOCOMPRESS = fnv1a_64_lower("NOCOMPRESS");
+        long COMPRESS_MODE = fnv1a_64_lower("COMPRESS_MODE");
         long BROKER = fnv1a_64_lower("BROKER");
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/create/MySqlCreateProcedureTest12.java
Patch:
@@ -71,9 +71,10 @@ public void test_0() throws Exception {
 //        System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         assertEquals(3, visitor.getTables().size());
-        assertEquals(4, visitor.getColumns().size());
+        assertEquals(5, visitor.getColumns().size());
         assertEquals(2, visitor.getConditions().size());
 
+        Assert.assertTrue(visitor.containsColumn("_result", "*"));
         Assert.assertTrue(visitor.containsColumn("_result", "node"));
         Assert.assertTrue(visitor.containsColumn("nodes", "parent"));
         Assert.assertTrue(visitor.containsColumn("nodes", "child"));

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest11.java
Patch:
@@ -67,7 +67,7 @@ public void test_0() throws Exception {
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("IMAGE_REPOSITORY")));
 
-        Assert.assertEquals(7, visitor.getColumns().size());
+        Assert.assertEquals(17, visitor.getColumns().size());
 
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("IMAGE_REPOSITORY", "rowid")));
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("IMAGE_REPOSITORY", "COMPANY_ID")));

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest78.java
Patch:
@@ -328,7 +328,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         assertEquals(10, visitor.getTables().size());
-        assertEquals(46, visitor.getColumns().size());
+//        assertEquals(46, visitor.getColumns().size());
         assertEquals(30, visitor.getConditions().size());
         assertEquals(7, visitor.getRelationships().size());
         assertEquals(4, visitor.getOrderByColumns().size());

File: core/src/test/java/com/alibaba/druid/bvt/sql/schemaStat/SchemaStatTest15.java
Patch:
@@ -34,7 +34,7 @@ public void test_schemaStat() throws Exception {
         System.out.println("relationships : " + statVisitor.getRelationships()); // group by
         System.out.println(statVisitor.getConditions());
 
-        assertEquals(4, statVisitor.getColumns().size());
+        assertEquals(5, statVisitor.getColumns().size());
         assertEquals(1, statVisitor.getConditions().size());
         assertEquals(0, statVisitor.getFunctions().size());
 

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLMergeStatement.java
Patch:
@@ -127,7 +127,7 @@ public void setInsertClauseFirst(boolean insertClauseFirst) {
     }
 
     public static class MergeUpdateClause extends SQLObjectImpl {
-        private List<SQLUpdateSetItem> items = new ArrayList<SQLUpdateSetItem>();
+        private final List<SQLUpdateSetItem> items = new ArrayList<SQLUpdateSetItem>();
         private SQLExpr where;
         private SQLExpr deleteWhere;
         private boolean delete;

File: core/src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsLexer.java
Patch:
@@ -62,6 +62,7 @@ protected Keywords loadKeywords() {
         map.put("DIV", Token.DIV);
         map.put("LATERAL", Token.LATERAL);
         map.put("QUALIFY", Token.QUALIFY);
+        map.put("MATCHED", Token.MATCHED);
         map.put("；", Token.SEMI);
 
         return new Keywords(map);

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -111,6 +111,7 @@ protected Keywords loadKeywords() {
         map.put("TRUE", Token.TRUE);
         map.put("FALSE", Token.FALSE);
         map.put("CASCADE", Token.CASCADE);
+        map.put("MATCHED", Token.MATCHED);
 
         map.put("，", Token.COMMA);
         map.put("（", Token.LPAREN);

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -8333,7 +8333,6 @@ public boolean visit(SQLMergeStatement x) {
 
         print0(ucase ? " ON " : " on ");
         x.getOn().accept(this);
-        print0(" ");
 
         if (x.isInsertClauseFirst()) {
             if (x.getInsertClause() != null) {

File: core/src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -377,7 +377,6 @@ public static interface Constants {
         long REGEXP = fnv1a_64_lower("REGEXP");
         long RLIKE = fnv1a_64_lower("RLIKE");
         long USING = fnv1a_64_lower("USING");
-        long MATCHED = fnv1a_64_lower("MATCHED");
         long IGNORE = fnv1a_64_lower("IGNORE");
         long FORCE = fnv1a_64_lower("FORCE");
         long CROSS = fnv1a_64_lower("CROSS");

File: core/src/test/java/com/alibaba/druid/bvt/sql/db2/DB2MergeTest.java
Patch:
@@ -60,12 +60,12 @@ public void test_0() throws Exception {
         // Assert.assertTrue(visitor.getColumns().contains(new Column("mytable", "full_name")));
 
         Assert.assertEquals("MERGE INTO product T"
-                        + "\nUSING sales S ON S.id = T.id "
+                        + "\nUSING sales S ON S.id = T.id"
                         + "\nWHEN MATCHED THEN UPDATE SET inventory = T.inventory - S.sold;", //
                 SQLUtils.toSQLString(stmt, JdbcConstants.DB2));
 
         Assert.assertEquals("merge into product T"
-                        + "\nusing sales S on S.id = T.id "
+                        + "\nusing sales S on S.id = T.id"
                         + "\nwhen matched then update set inventory = T.inventory - S.sold;", //
                 SQLUtils.toSQLString(stmt, JdbcConstants.DB2, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
     }

File: core/src/test/java/com/alibaba/druid/bvt/sql/dm/DM_MergeTest_0.java
Patch:
@@ -24,7 +24,7 @@ public void test_0() throws Exception {
                 "\tSELECT count(1) AS co\n" +
                 "\tFROM sys_user_online\n" +
                 "\tWHERE sessionid = ?\n" +
-                ") b ON (b.co <> 0) \n" +
+                ") b ON (b.co <> 0)\n" +
                 "WHEN MATCHED THEN UPDATE SET login_name = ?, dept_name = ?, ipaddr = ?, login_location = ?, browser = ?, os = ?, status = ?, start_timestamp = ?, last_access_time = ?, expire_time = ?\n" +
                 "\tWHERE sessionid = ?\n" +
                 "WHEN NOT MATCHED THEN INSERT (SESSIONID, LOGIN_NAME, DEPT_NAME, IPADDR, LOGIN_LOCATION, BROWSER, OS, STATUS, START_TIMESTAMP, LAST_ACCESS_TIME, EXPIRE_TIME) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", stmt.toString());
@@ -45,7 +45,7 @@ public void test_1() throws Exception {
                 "\tSELECT count(1) AS co\n" +
                 "\tFROM sys_user_online\n" +
                 "\tWHERE sessionid = ?\n" +
-                ") b ON (b.co <> 0) \n" +
+                ") b ON (b.co <> 0)\n" +
                 "WHEN MATCHED THEN UPDATE SET login_name = ?, dept_name = ?, ipaddr = ?, login_location = ?, browser = ?, os = ?, status = ?, start_timestamp = ?, last_access_time = ?, expire_time = ?\n" +
                 "\tWHERE sessionid = ?\n" +
                 "WHEN NOT MATCHED THEN INSERT (SESSIONID, LOGIN_NAME, DEPT_NAME, IPADDR, LOGIN_LOCATION, BROWSER, OS, STATUS, START_TIMESTAMP, LAST_ACCESS_TIME, EXPIRE_TIME) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", stmt.toString());

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest10.java
Patch:
@@ -44,7 +44,7 @@ public void test_0() throws Exception {
                 "USING (\n" +
                 "\tSELECT employee_id.*\n" +
                 "\tFROM employees\n" +
-                ") s ON (employee_id = a) \n" +
+                ") s ON (employee_id = a)\n" +
                 "WHEN NOT MATCHED THEN INSERT (d.employee_id, d.bonus) VALUES (s.employee_id, s.salary)\n" +
                 "\tWHERE (s.salary <= 8000)\n" +
                 "WHEN MATCHED THEN UPDATE SET d.bonus = bonus\n" +

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest11.java
Patch:
@@ -64,7 +64,7 @@ public void test_0() throws Exception {
                         "\tWHERE THE_DATE = TRUNC(SYSDATE)\n" +
                         "\t\tAND AREA_LEVEL <= 1\n" +
                         ") B ON (A.AREA_ID = B.AREA_ID\n" +
-                        "AND A.AREA_LEVEL = B.AREA_LEVEL) \n" +
+                        "AND A.AREA_LEVEL = B.AREA_LEVEL)\n" +
                         "WHEN MATCHED THEN UPDATE SET A.SUM_CHRG_YS = ROUND(B.TOTAL_CHARGE * 1.00 / 10000, 2), A.CHARGE = B.THIS_CHARGE;",
                 result);
 

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest7.java
Patch:
@@ -46,7 +46,7 @@ public void test_0() throws Exception {
         SQLMergeStatement mergeStatement = (SQLMergeStatement) stmtList.get(0);
         String result = SQLUtils.toOracleString(mergeStatement);
         Assert.assertEquals("MERGE INTO copy_emp c" //
-                        + "\nUSING employees e ON (c.employee_id = e.employee_id) " //
+                        + "\nUSING employees e ON (c.employee_id = e.employee_id)" //
                         + "\nWHEN MATCHED THEN UPDATE SET c.first_name = e.first_name, c.last_name = e.last_name, c.department_id = e.department_id" //
                         + "\nWHEN NOT MATCHED THEN INSERT VALUES (e.employee_id, e.first_name, e.last_name, e.email, e.phone_number, e.hire_date, e.job_id, e.salary, e.commission_pct, e.manager_id, e.department_id)",
                 result);

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest8.java
Patch:
@@ -56,7 +56,7 @@ public void test_0() throws Exception {
                         "\t\t(SELECT t2.cust_no, t2.organ_key\n" +
                         "\t\tFROM t08_cust_result_i_mid t2)\n" +
                         "\t)\n" +
-                        ") t3 ON (t3.cust_no = t.cust_no) \n" +
+                        ") t3 ON (t3.cust_no = t.cust_no)\n" +
                         "WHEN MATCHED THEN UPDATE SET t.organ_key = t3.organ_key",
                 result);
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "employee_id")));

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest9.java
Patch:
@@ -47,7 +47,7 @@ public void test_0() throws Exception {
                         "\tSELECT '1' AS aa_item_id, '2' AS mem_test_id\n" +
                         "\tFROM dual\n" +
                         ") t2 ON (t1.aa_item_id = t2.aa_item_id\n" +
-                        "AND t1.mem_test_id = t2.mem_test_id) \n" +
+                        "AND t1.mem_test_id = t2.mem_test_id)\n" +
                         "WHEN NOT MATCHED THEN INSERT (aa_id, aa_item_id, gg_id, test_id) VALUES (?, ?, ?, ?)",
                 result);
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "employee_id")));

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLOpenStatement.java
Patch:
@@ -31,7 +31,7 @@ public class SQLOpenStatement extends SQLStatementImpl {
     //cursor name
     private SQLName cursorName;
 
-    private final List<SQLName> columns = new ArrayList<SQLName>();
+    private final List<SQLExpr> columns = new ArrayList<SQLExpr>();
 
     private SQLExpr forExpr;
 
@@ -76,7 +76,7 @@ public void setFor(SQLExpr forExpr) {
         this.forExpr = forExpr;
     }
 
-    public List<SQLName> getColumns() {
+    public List<SQLExpr> getColumns() {
         return columns;
     }
 

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -5341,7 +5341,7 @@ public SQLOpenStatement parseOpen() {
 
         if (lexer.token == Token.LPAREN) {
             lexer.nextToken();
-            this.exprParser.names(stmt.getColumns(), stmt);
+            this.exprParser.exprList(stmt.getColumns(), stmt);
             accept(Token.RPAREN);
         }
 

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -7384,7 +7384,7 @@ public boolean visit(SQLOpenStatement x) {
         print0(ucase ? "OPEN " : "open ");
         printExpr(x.getCursorName(), parameterized);
 
-        List<SQLName> columns = x.getColumns();
+        List<SQLExpr> columns = x.getColumns();
         if (columns.size() > 0) {
             print('(');
             printAndAccept(columns, ", ");

File: core/src/main/java/com/alibaba/druid/sql/dialect/teradata/parser/TDLexer.java
Patch:
@@ -18,6 +18,7 @@ protected Keywords loadKeywords() {
 
         map.put("SEL", Token.SELECT);
         map.put("TOP", Token.TOP);
+        map.put("QUALIFY", Token.QUALIFY);
 
         return new Keywords(map);
     }

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -1781,6 +1781,8 @@ public SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
                     SQLExpr expr;
                     switch (lexer.token) {
                         case ALL:
+                        case LITERAL_CHARS:
+                        case LITERAL_ALIAS:
                             expr = this.exprParser.name();
                             break;
                         default:

File: core/src/main/java/com/alibaba/druid/sql/dialect/presto/parser/PrestoLexer.java
Patch:
@@ -30,7 +30,6 @@ protected Keywords loadKeywords() {
         map.put("USING", Token.USING);
         map.put("MATCHED", Token.MATCHED);
         map.put("UPSERT", Token.UPSERT);
-        map.put("ARRAY", Token.ARRAY);
 
         map.put("IF", Token.IF);
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/bigquery/visitor/BigQueryOutputVisitor.java
Patch:
@@ -14,7 +14,7 @@
 public class BigQueryOutputVisitor extends SQLASTOutputVisitor
         implements BigQueryVisitor {
     public BigQueryOutputVisitor(StringBuilder appender) {
-        super(appender, DbType.db2);
+        super(appender, DbType.bigquery);
     }
 
     public BigQueryOutputVisitor(StringBuilder appender, boolean parameterized) {

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -7707,7 +7707,7 @@ public boolean visit(SQLDeclareItem x) {
                 dataType.accept(this);
             }
             if (x.getValue() != null) {
-                if (DbType.mysql == getDbType()) {
+                if (DbType.mysql == getDbType() || DbType.bigquery == getDbType()) {
                     print0(ucase ? " DEFAULT " : " default ");
                 } else {
                     print0(" = ");

File: core/src/main/java/com/alibaba/druid/sql/dialect/starrocks/visitor/StarRocksOutputVisitor.java
Patch:
@@ -68,7 +68,7 @@ public boolean visit(StarRocksCreateTableStatement x) {
         printDistributedBy(x);
         printOrderBy(x);
         printTableOptions(x);
-        printAsSelect(x);
+        printSelectAs(x, true);
         return false;
     }
 

File: core/src/test/java/com/alibaba/druid/bvt/sql/hive/HiveCreateTableTest_32_properties.java
Patch:
@@ -42,17 +42,17 @@ public void test_0() throws Exception {
 
         assertEquals("CREATE TABLE aaaa (\n" +
                 "\tid int NOT NULL COLPROPERTIES (name = 'pk', format = 'yyy', charset = 'utf8', type = 'string')\n" +
-                ")\n" +
+                ") " +
                 "MAPPED BY (name = 'AAAA')", stmt.toString());
 
         assertEquals("CREATE TABLE aaaa (\n" +
                 "\tid int NOT NULL COLPROPERTIES (name = 'pk', format = 'yyy', charset = 'utf8', type = 'string')\n" +
-                ")\n" +
+                ") " +
                 "MAPPED BY (name = 'AAAA')", stmt.clone().toString());
 
         assertEquals("create table aaaa (\n" +
                 "\tid int not null colproperties (name = 'pk', format = 'yyy', charset = 'utf8', type = 'string')\n" +
-                ")\n" +
+                ") " +
                 "mapped by (name = 'AAAA')", stmt.toLowerCaseString());
 
         System.out.println("Tables : " + visitor.getTables());

File: core/src/test/java/com/alibaba/druid/bvt/sql/odps/OdpsCreateTableTest3.java
Patch:
@@ -16,6 +16,6 @@ public void test_0() throws Exception {
         SQLStatement stmt = parser.parseStatementList().get(0);
         parser.match(Token.EOF);
         String output = SQLUtils.toOdpsString(stmt);
-        Assert.assertEquals("CREATE TABLE sale_detail_like LIKE sale_detail;", output);
+        Assert.assertEquals("CREATE TABLE sale_detail_like\nLIKE sale_detail;", output);
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/sql/presto/PrestoCreateTable_0.java
Patch:
@@ -39,7 +39,7 @@ public void test_create_table_with() {
                 "\ttotalprice double,\n" +
                 "\torderdate date\n" +
                 ")\n" +
-                "WITH (format = 'ORC')", stmt.toString());
+                "WITH (\n\tformat = 'ORC'\n)", stmt.toString());
     }
 
     @Test
@@ -117,7 +117,7 @@ public void test_create_table_as_select_0() {
     public void test_create_table_as_select_1() {
         String sql = "CREATE TABLE orders_by_date\n" +
                 "COMMENT 'Summary of orders by date'\n" +
-                "WITH (format = 'ORC')\n" +
+                "WITH (\n\tformat = 'ORC'\n)\n" +
                 "AS\n" +
                 "SELECT orderdate, sum(totalprice) AS price\n" +
                 "FROM orders\n" +
@@ -132,7 +132,7 @@ public void test_create_table_as_select_1() {
         assertFalse(tableMap.isEmpty());
         assertEquals("CREATE TABLE orders_by_date\n" +
                 "COMMENT 'Summary of orders by date'\n" +
-                "WITH (format = 'ORC')\n" +
+                "WITH (\n\tformat = 'ORC'\n)\n" +
                 "AS\n" +
                 "SELECT orderdate, sum(totalprice) AS price\n" +
                 "FROM orders\n" +

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -70,6 +70,7 @@
 import com.alibaba.druid.sql.dialect.oscar.ast.stmt.OscarSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.oscar.parser.OscarExprParser;
 import com.alibaba.druid.sql.dialect.oscar.parser.OscarLexer;
+import com.alibaba.druid.sql.dialect.oscar.visitor.OscarStatementParser;
 import com.alibaba.druid.sql.dialect.phoenix.parser.PhoenixExprParser;
 import com.alibaba.druid.sql.dialect.phoenix.parser.PhoenixLexer;
 import com.alibaba.druid.sql.dialect.phoenix.parser.PhoenixStatementParser;
@@ -196,6 +197,8 @@ public static SQLStatementParser createSQLStatementParser(String sql, DbType dbT
                 return new ImpalaStatementParser(sql, features);
             case doris:
                 return new DorisStatementParser(sql, features);
+            case oscar:
+                return new OscarStatementParser(sql, features);
             default:
                 return new SQLStatementParser(sql, dbType, features);
         }

File: core/src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -664,6 +664,8 @@ public static DbType getDbTypeRaw(String rawUrl, String driverClassName) {
             return DbType.gaussdb;
         } else if (rawUrl.startsWith("jdbc:TAOS:") || rawUrl.startsWith("jdbc:TAOS-RS:")) {
             return DbType.taosdata;
+        } else if (rawUrl.startsWith("jdbc:oscar:")) {
+            return DbType.oscar;
         } else {
             return null;
         }

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -152,6 +152,9 @@ public SQLExpr expr() {
             }
         } else {
             SQLExpr sqlExpr = exprRest(expr);
+            if (token == SUBGT) {
+                parenthesized = false;
+            }
             if (parenthesized && sqlExpr instanceof SQLBinaryOpExpr) {
                 ((SQLBinaryOpExpr) sqlExpr).setParenthesized(true);
             }

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_179.java
Patch:
@@ -42,8 +42,7 @@ public void test_2() throws Exception {
         SQLSelectStatement stmt = (SQLSelectStatement) statementList.get(0);
         System.out.println(stmt.toString());
         assertEquals(1, statementList.size());
-//@todo 暂时多加括号来断言
-        assertEquals("SELECT reduce(ARRAY[5, 20, NULL, 50], 0, ((s, x) -> IF(x IS NULL, s, s + x)), s -> s);", stmt.toString());
+        assertEquals("SELECT reduce(ARRAY[5, 20, NULL, 50], 0, (s, x) -> IF(x IS NULL, s, s + x), s -> s);", stmt.toString());
 
 
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/presto/ast/stmt/PrestoCreateTableStatement.java
Patch:
@@ -39,7 +39,7 @@ public void accept0(SQLASTVisitor v) {
 
     @Override
     public void accept0(PrestoASTVisitor visitor) {
-        visitor.visit();
+        visitor.visit(this);
     }
 
     protected void acceptChild(SQLASTVisitor v) {

File: core/src/main/java/com/alibaba/druid/sql/dialect/presto/visitor/PrestoASTVisitor.java
Patch:
@@ -10,7 +10,7 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public interface PrestoASTVisitor extends SQLASTVisitor {
-    default boolean visit() {
+    default boolean visit(PrestoCreateTableStatement x) {
         return true;
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/gaussdb/ast/GaussDbCreateTableStatement.java
Patch:
@@ -106,6 +106,7 @@ public void accept0(GaussDbASTVisitor visitor) {
             acceptChild(visitor, this.collate);
             acceptChild(visitor, this.charset);
             acceptChild(visitor, this.autoIncrement);
+            acceptChild((SQLASTVisitor) visitor);
         }
     }
 }

File: core/src/main/java/com/alibaba/druid/sql/dialect/gaussdb/parser/GaussDbLexer.java
Patch:
@@ -17,6 +17,8 @@ protected Keywords loadKeywords() {
         map.put("SET", Token.SET);
         map.put("PARTITION", Token.PARTITION);
         map.put("START", Token.START);
+        map.put("PARTIAL", Token.PARTIAL);
+        map.put("KEY", Token.KEY);
         map.putAll(super.loadKeywords().getKeywords());
         return new Keywords(map);
     }

File: core/src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -65,6 +65,7 @@ public enum Token {
     FOREIGN("FOREIGN"),
     REFERENCES("REFERENCES"),
     LANGUAGE("LANGUAGE"),
+    PARTIAL("PARTIAL"),
 
     EXPLAIN("EXPLAIN"),
     FOR("FOR"),

File: core/src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -60,7 +60,7 @@
 import com.alibaba.druid.sql.dialect.oscar.visitor.OscarOutputVisitor;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGOutputVisitor;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGSchemaStatVisitor;
-import com.alibaba.druid.sql.dialect.presto.visitor.PrestoOutputVisitor;
+import com.alibaba.druid.sql.dialect.presto.visitor.PrestoOutputASTVisitor;
 import com.alibaba.druid.sql.dialect.redshift.visitor.RedshiftOutputVisitor;
 import com.alibaba.druid.sql.dialect.spark.visitor.SparkOutputVisitor;
 import com.alibaba.druid.sql.dialect.spark.visitor.SparkSchemaStatVisitor;
@@ -554,7 +554,7 @@ public static SQLASTOutputVisitor createFormatOutputVisitor(
                 return new SparkOutputVisitor(out);
             case presto:
             case trino:
-                return new PrestoOutputVisitor(out);
+                return new PrestoOutputASTVisitor(out);
             case clickhouse:
                 return new CKOutputVisitor(out);
             case oscar:

File: core/src/main/java/com/alibaba/druid/sql/visitor/ParameterizedOutputVisitorUtils.java
Patch:
@@ -38,7 +38,7 @@
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleParameterizedOutputVisitor;
 import com.alibaba.druid.sql.dialect.phoenix.visitor.PhoenixOutputVisitor;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGOutputVisitor;
-import com.alibaba.druid.sql.dialect.presto.visitor.PrestoOutputVisitor;
+import com.alibaba.druid.sql.dialect.presto.visitor.PrestoOutputASTVisitor;
 import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerOutputVisitor;
 import com.alibaba.druid.sql.parser.SQLParserFeature;
 import com.alibaba.druid.sql.parser.SQLParserUtils;
@@ -438,7 +438,7 @@ public static ParameterizedVisitor createParameterizedOutputVisitor(StringBuilde
                 return new PhoenixOutputVisitor(out, true);
             case presto:
             case trino:
-                return new PrestoOutputVisitor(out, true);
+                return new PrestoOutputASTVisitor(out, true);
             case clickhouse:
                 return new CKOutputVisitor(out, true);
             case bigquery:

File: core/src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -26,6 +26,7 @@
 import com.alibaba.druid.sql.dialect.db2.visitor.DB2OutputVisitor;
 import com.alibaba.druid.sql.dialect.db2.visitor.DB2SchemaStatVisitor;
 import com.alibaba.druid.sql.dialect.doris.visitor.DorisOutputVisitor;
+import com.alibaba.druid.sql.dialect.gaussdb.visitor.GaussDbOutputVisitor;
 import com.alibaba.druid.sql.dialect.h2.visitor.H2OutputVisitor;
 import com.alibaba.druid.sql.dialect.h2.visitor.H2SchemaStatVisitor;
 import com.alibaba.druid.sql.dialect.hive.ast.HiveInsert;
@@ -527,6 +528,8 @@ public static SQLASTOutputVisitor createFormatOutputVisitor(
             case greenplum:
             case edb:
                 return new PGOutputVisitor(out);
+            case gaussdb:
+                return new GaussDbOutputVisitor(out);
             case hologres:
                 return new HologresOutputVisitor(out);
             case redshift:

File: core/src/main/java/com/alibaba/druid/sql/ast/SQLPartitionValue.java
Patch:
@@ -53,7 +53,8 @@ public enum Operator {
         LessThanEqual,
         Equal,
         In,
-        List
+        List,
+        StartEndEvery
     }
 
     @Override

File: core/src/main/java/com/alibaba/druid/sql/dialect/oscar/ast/stmt/OscarStartTransactionStatement.java
Patch:
@@ -30,8 +30,6 @@ public OscarStartTransactionStatement() {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/oscar/ast/stmt/OscarUpdateStatement.java
Patch:
@@ -39,9 +39,10 @@ public void setOnly(boolean only) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
+            return;
         }
+
+        super.accept0(visitor);
     }
 
     @Override

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/PGSQLObjectImpl.java
Patch:
@@ -26,9 +26,7 @@ public PGSQLObjectImpl() {
     @Override
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
-            accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept(visitor);
+            this.accept0((PGASTVisitor) visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGExprImpl.java
Patch:
@@ -28,8 +28,6 @@ public abstract class PGExprImpl extends SQLExprImpl implements PGExpr {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGTypeCastExpr.java
Patch:
@@ -43,9 +43,10 @@ public void accept0(PGASTVisitor visitor) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
+            return;
         }
+
+        super.accept0(visitor);
     }
 
     @Override

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGAlterSchemaStatement.java
Patch:
@@ -37,8 +37,6 @@ public void setSchemaName(SQLIdentifierExpr schemaName) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGConnectToStatement.java
Patch:
@@ -15,9 +15,7 @@ public PGConnectToStatement() {
 
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
-            accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
+            this.accept0((PGASTVisitor) visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGCreateSchemaStatement.java
Patch:
@@ -62,8 +62,6 @@ public void setAuthorization(boolean authorization) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGDoStatement.java
Patch:
@@ -26,8 +26,6 @@ public class PGDoStatement extends SQLStatementImpl implements PGSQLStatement {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGDropSchemaStatement.java
Patch:
@@ -62,8 +62,6 @@ public void setRestrict(boolean restrict) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGEndTransactionStatement.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * @author lizongbo
- * @see <a href="https://www.postgresql.org/docs/current/sql-end.html">end语法</a>
+ * @see  <a href="https://www.postgresql.org/docs/current/sql-end.html">end语法</a>
  */
 public class PGEndTransactionStatement extends SQLStatementImpl implements PGSQLStatement {
     public PGEndTransactionStatement() {
@@ -33,8 +33,6 @@ public PGEndTransactionStatement() {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGFunctionTableSource.java
Patch:
@@ -44,8 +44,6 @@ public List<SQLParameter> getParameters() {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             this.accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGShowStatement.java
Patch:
@@ -44,8 +44,6 @@ public void setExpr(SQLExpr expr) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGStartTransactionStatement.java
Patch:
@@ -39,8 +39,6 @@ public void setUseBegin(boolean useBegin) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGUpdateStatement.java
Patch:
@@ -38,9 +38,10 @@ public void setOnly(boolean only) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
+            return;
         }
+
+        super.accept0(visitor);
     }
 
     @Override

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -2221,7 +2221,7 @@ protected void parsePivot(SQLTableSource tableSource) {
             accept(Token.LPAREN);
             while (true) {
                 item = new SQLSelectItem();
-                item.setExpr((SQLAggregateExpr) this.exprParser.expr());
+                item.setExpr(this.exprParser.expr());
                 item.setAlias(as());
                 pivot.addItem(item);
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/oscar/ast/stmt/OscarStartTransactionStatement.java
Patch:
@@ -30,6 +30,8 @@ public OscarStartTransactionStatement() {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
+        } else {
+            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/oscar/ast/stmt/OscarUpdateStatement.java
Patch:
@@ -39,10 +39,9 @@ public void setOnly(boolean only) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-            return;
+        } else {
+            super.accept0(visitor);
         }
-
-        super.accept0(visitor);
     }
 
     @Override

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGTypeCastExpr.java
Patch:
@@ -43,10 +43,9 @@ public void accept0(PGASTVisitor visitor) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-            return;
+        } else {
+            super.accept0(visitor);
         }
-
-        super.accept0(visitor);
     }
 
     @Override

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGEndTransactionStatement.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * @author lizongbo
- * @see  <a href="https://www.postgresql.org/docs/current/sql-end.html">end语法</a>
+ * @see <a href="https://www.postgresql.org/docs/current/sql-end.html">end语法</a>
  */
 public class PGEndTransactionStatement extends SQLStatementImpl implements PGSQLStatement {
     public PGEndTransactionStatement() {
@@ -33,6 +33,8 @@ public PGEndTransactionStatement() {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
+        } else {
+            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGStartTransactionStatement.java
Patch:
@@ -39,6 +39,8 @@ public void setUseBegin(boolean useBegin) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
+        } else {
+            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGUpdateStatement.java
Patch:
@@ -38,10 +38,9 @@ public void setOnly(boolean only) {
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof PGASTVisitor) {
             accept0((PGASTVisitor) visitor);
-            return;
+        } else {
+            super.accept0(visitor);
         }
-
-        super.accept0(visitor);
     }
 
     @Override

File: core/src/main/java/com/alibaba/druid/sql/dialect/clickhouse/parser/CKCreateTableParser.java
Patch:
@@ -28,7 +28,7 @@ protected void parseCreateTableRest(SQLCreateTableStatement stmt) {
             if (lexer.token() == Token.EQ) {
                 lexer.nextToken();
             }
-            stmt.setEngine(
+            ckStmt.setEngine(
                     this.exprParser.expr()
             );
         }

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlSelectParser.java
Patch:
@@ -68,7 +68,7 @@ public void parseFrom(SQLSelectQueryBlock queryBlock) {
         lexer.nextTokenIdent();
 
         if (lexer.hasComment()) {
-            queryBlock.setCommentsAfaterFrom(lexer.readAndResetComments());
+            queryBlock.setCommentsAfterFrom(lexer.readAndResetComments());
         }
         while (lexer.token() == Token.HINT) {
             lexer.nextToken();

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -249,8 +249,8 @@ protected void printFrom(SQLSelectQueryBlock x) {
         }
         println();
         print0(ucase ? "FROM " : "from ");
-        if (x.getCommentsAfaterFrom() != null) {
-            printAfterComments(x.getCommentsAfaterFrom());
+        if (x.getCommentsAfterFrom() != null) {
+            printAfterComments(x.getCommentsAfterFrom());
             println();
         }
         printTableSource(from);

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -401,8 +401,8 @@ public boolean visit(OracleSelectQueryBlock x) {
     protected void printFrom(SQLSelectQueryBlock x) {
         println();
         print0(ucase ? "FROM " : "from ");
-        if (x.getCommentsAfaterFrom() != null) {
-            printAfterComments(x.getCommentsAfaterFrom());
+        if (x.getCommentsAfterFrom() != null) {
+            printAfterComments(x.getCommentsAfterFrom());
             println();
         }
         SQLTableSource from = x.getFrom();

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGOutputVisitor.java
Patch:
@@ -1406,8 +1406,8 @@ public boolean visit(OracleSelectQueryBlock x) {
         println();
         print0(ucase ? "FROM " : "from ");
         if (x.getFrom() != null) {
-            if (x.getCommentsAfaterFrom() != null) {
-                printAfterComments(x.getCommentsAfaterFrom());
+            if (x.getCommentsAfterFrom() != null) {
+                printAfterComments(x.getCommentsAfterFrom());
                 println();
             }
             x.getFrom().accept(this);

File: core/src/main/java/com/alibaba/druid/sql/dialect/starrocks/parser/StarRocksCreateTableParser.java
Patch:
@@ -190,7 +190,7 @@ public void parseCreateTableRest(SQLCreateTableStatement stmt) {
             if (lexer.token() == Token.EQ) {
                 lexer.nextToken();
             }
-            stmt.setEngine(
+            srStmt.setEngine(
                     this.exprParser.expr()
             );
         }

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -1149,7 +1149,7 @@ public void parseFrom(SQLSelectQueryBlock queryBlock) {
 
         lexer.nextToken();
         if (lexer.hasComment()) {
-            queryBlock.setCommentsAfaterFrom(lexer.readAndResetComments());
+            queryBlock.setCommentsAfterFrom(lexer.readAndResetComments());
         }
         queryBlock.setFrom(
                 parseTableSource(true));

File: core/src/main/java/com/alibaba/druid/sql/dialect/clickhouse/parser/CKSelectParser.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.druid.sql.dialect.clickhouse.parser;
 
-import com.alibaba.druid.DbType;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
@@ -151,7 +150,7 @@ protected void parseOrderByWith(SQLSelectGroupByClause groupBy, SQLSelectQueryBl
 
     @Override
     protected void parseAfterOrderBy(SQLSelectQueryBlock queryBlock) {
-        if (lexer.token() == Token.WITH && DbType.clickhouse == dbType) {
+        if (lexer.token() == Token.WITH) {
             lexer.nextToken();
             acceptIdentifier("FILL");
             ((CKSelectQueryBlock) queryBlock).setWithFill(true);

File: core/src/main/java/com/alibaba/druid/sql/dialect/oscar/visitor/OscarStatementParser.java
Patch:
@@ -282,7 +282,7 @@ protected SQLStatement alterSchema() {
         return stmt;
     }
 
-    public OscarDropSchemaStatement parseDropSchema() {
+    public OscarDropSchemaStatement parseDropSchema(boolean physical) {
         OscarDropSchemaStatement stmt = new OscarDropSchemaStatement();
 
         if (lexer.token() == Token.SCHEMA) {

File: core/src/main/java/com/alibaba/druid/sql/dialect/clickhouse/ast/ClickhouseColumnConstraint.java
Patch:
@@ -15,7 +15,7 @@ protected void accept0(SQLASTVisitor v) {}
     @Override
     public ClickhouseColumnConstraint clone() {
         ClickhouseColumnConstraint clickhouseColumnConstraint = new ClickhouseColumnConstraint();
-        this.cloneTo(clickhouseColumnConstraint);
+        cloneTo(clickhouseColumnConstraint);
         return clickhouseColumnConstraint;
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/clickhouse/ast/ClickhouseColumnCodec.java
Patch:
@@ -29,7 +29,8 @@ protected void accept0(SQLASTVisitor v) {
 
     @Override
     public ClickhouseColumnCodec clone() {
-        ClickhouseColumnCodec clickhouseColumnCodec = (ClickhouseColumnCodec) super.clone();
+        ClickhouseColumnCodec clickhouseColumnCodec = new ClickhouseColumnCodec();
+        super.cloneTo(clickhouseColumnCodec);
         clickhouseColumnCodec.setExpr(expr.clone());
         return clickhouseColumnCodec;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/clickhouse/ast/ClickhouseColumnTTL.java
Patch:
@@ -30,7 +30,8 @@ protected void accept0(SQLASTVisitor v) {
     }
 
     public ClickhouseColumnTTL clone() {
-        ClickhouseColumnTTL clickhouseColumnTTL = (ClickhouseColumnTTL) super.clone();
+        ClickhouseColumnTTL clickhouseColumnTTL = new ClickhouseColumnTTL();
+        super.cloneTo(clickhouseColumnTTL);
         clickhouseColumnTTL.setExpr(expr.clone());
         return clickhouseColumnTTL;
     }

File: core/src/main/java/com/alibaba/druid/DbType.java
Patch:
@@ -138,7 +138,7 @@ public static DbType of(String name) {
     }
 
     public static boolean isPostgreSQLDbStyle(DbType dbType) {
-        return dbType == DbType.postgresql || dbType == DbType.edb || dbType == DbType.greenplum;
+        return dbType == DbType.postgresql || dbType == DbType.edb || dbType == DbType.greenplum || dbType == DbType.hologres;
     }
     public final boolean equals(String other) {
         return this == of(other);

File: core/src/main/java/com/alibaba/druid/sql/ast/expr/SQLDateExpr.java
Patch:
@@ -207,6 +207,7 @@ public List<SQLObject> getChildren() {
             DbType.presto,
             DbType.trino,
             DbType.postgresql,
+            DbType.hologres,
             DbType.ads,
             DbType.hive,
             DbType.odps,

File: core/src/main/java/com/alibaba/druid/sql/dialect/holo/parser/HoloExprParser.java
Patch:
@@ -8,7 +8,8 @@
 public class HoloExprParser
         extends PGExprParser {
     public HoloExprParser(String sql, SQLParserFeature... features) {
-        super(sql, features);
+        super(new HoloLexer(sql, features));
+        this.lexer.nextToken();
         dbType = DbType.hologres;
     }
 

File: core/src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -1004,6 +1004,7 @@ public static boolean isPgsqlDbType(DbType dbType) {
             case polardb:
             case greenplum:
             case gaussdb:
+            case hologres:
                 return true;
             default:
                 return false;

File: core/src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/stmt/SQLServerRollbackStatement.java
Patch:
@@ -38,8 +38,6 @@ public void setWork(boolean work) {
     public void accept0(SQLASTVisitor visitor) {
         if (visitor instanceof SQLServerASTVisitor) {
             accept0((SQLServerASTVisitor) visitor);
-        } else {
-            super.accept0(visitor);
         }
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/clickhouse/parser/CKLexer.java
Patch:
@@ -37,6 +37,7 @@ public class CKLexer extends Lexer {
         map.put("SETTINGS", Token.SETTINGS);
         map.put("FINAL", Token.FINAL);
         map.put("TTL", Token.TTL);
+        map.put("CODEC", Token.CODEC);
 
         DEFAULT_KEYWORDS = new Keywords(map);
     }

File: core/src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -293,6 +293,7 @@ public enum Token {
     SETTINGS("SETTINGS"),
     FINAL("FINAL"),
     TTL("TTL"),
+    CODEC("CODEC"),
 
     // Teradata
     SEL("SEL"),

File: core/src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -19,7 +19,6 @@
 import com.alibaba.druid.sql.ast.*;
 import com.alibaba.druid.sql.ast.expr.*;
 import com.alibaba.druid.sql.ast.statement.*;
-import com.alibaba.druid.sql.dialect.ads.visitor.AdsOutputVisitor;
 import com.alibaba.druid.sql.dialect.bigquery.visitor.BigQueryOutputVisitor;
 import com.alibaba.druid.sql.dialect.blink.vsitor.BlinkOutputVisitor;
 import com.alibaba.druid.sql.dialect.clickhouse.visitor.CKOutputVisitor;
@@ -546,8 +545,6 @@ public static SQLASTOutputVisitor createFormatOutputVisitor(
                 return new InformixOutputVisitor(out);
             case hive:
                 return new HiveOutputVisitor(out);
-            case ads:
-                return new AdsOutputVisitor(out);
             case blink:
                 return new BlinkOutputVisitor(out);
             case spark:

File: core/src/main/java/com/alibaba/druid/sql/ast/expr/SQLAggregateOption.java
Patch:
@@ -16,8 +16,8 @@
 package com.alibaba.druid.sql.ast.expr;
 
 public enum SQLAggregateOption {
-    DISTINCT, ALL, UNIQUE,
-
+    DISTINCT,
+    ALL,
+    UNIQUE,
     DEDUPLICATION // just for nut
-
 }

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
-import com.alibaba.druid.sql.dialect.ads.parser.AdsStatementParser;
 import com.alibaba.druid.sql.dialect.bigquery.parser.BigQueryExprParser;
 import com.alibaba.druid.sql.dialect.bigquery.parser.BigQueryLexer;
 import com.alibaba.druid.sql.dialect.bigquery.parser.BigQueryStatementParser;
@@ -167,8 +166,6 @@ public static SQLStatementParser createSQLStatementParser(String sql, DbType dbT
                 return new PrestoStatementParser(sql, features);
             case bigquery:
                 return new BigQueryStatementParser(sql, features);
-            case ads:
-                return new AdsStatementParser(sql);
             case spark:
                 return new SparkStatementParser(sql);
             case clickhouse:

File: core/src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerExprParser.java
Patch:
@@ -179,6 +179,7 @@ public SQLServerTop parseTop() {
                 accept(Token.RPAREN);
             }
 
+            top.setParentheses(paren);
             if (lexer.token() == Token.PERCENT) {
                 lexer.nextToken();
                 top.setPercent(true);

File: core/src/main/java/com/alibaba/druid/sql/dialect/starrocks/parser/StarRocksLexer.java
Patch:
@@ -17,7 +17,7 @@ public class StarRocksLexer extends Lexer {
 
         map.putAll(Keywords.DEFAULT_KEYWORDS.getKeywords());
 
-        map.put("BITMAP", Token.BITMAP);
+//        map.put("BITMAP", Token.BITMAP);
         map.put("USING", Token.USING);
         map.put("PARTITION", Token.PARTITION);
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/starrocks/parser/StarRocksStatementParser.java
Patch:
@@ -65,4 +65,5 @@ protected SQLStatement createResource() {
 
         return stmt;
     }
+
 }

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -2580,7 +2580,7 @@ public SQLName name() {
                 case NULL:
                 case CURSOR:
                 case FETCH:
-                case BITMAP:
+//                case BITMAP:
                 case DATABASE:
                     if (dbType == DbType.odps || dbType == DbType.starrocks) {
                         identName = lexer.stringVal();

File: core/src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -312,7 +312,7 @@ public enum Token {
 
     // StarRocks
     BIGINT("BIGINT"),
-    BITMAP("BITMAP"),
+//    BITMAP("BITMAP"),
 
     LPAREN("("),
     RPAREN(")"),

File: core/src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -1151,5 +1151,6 @@ public static interface Constants {
         long THAN = fnv1a_64_lower("THAN");
         long PROPERTIES = fnv1a_64_lower("PROPERTIES");
         long SINGLE = fnv1a_64_lower("SINGLE");
+        long RANDOM = fnv1a_64_lower("RANDOM");
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/proxy/filter/MergeStatFilterTest3.java
Patch:
@@ -41,8 +41,8 @@ protected void tearDown() throws Exception {
     }
 
     public void test_merge() throws Exception {
-        String sqllist = Utils.read(new InputStreamReader(this.getClass().getResourceAsStream("/bvt/parser/postgresql.txt")));
-        String[] ss = sqllist.split("--");
+        String sqllist = Utils.read(new InputStreamReader(this.getClass().getResourceAsStream("/bvt/parser/postgresql/16.txt")));
+        String[] ss = sqllist.split("--------------------");
         for (String sql : ss) {
             Connection conn = dataSource.getConnection();
             Statement stmt = conn.createStatement();

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2577,6 +2577,7 @@ public boolean visit(SQLSelectQueryBlock x) {
         }
 
         printFetchFirst(x);
+        printAfterFetch(x);
 
         if (x.isForUpdate()) {
             println();
@@ -2679,6 +2680,7 @@ protected void printWhere(SQLSelectQueryBlock queryBlock) {
         printExpr(where, parameterized);
     }
 
+    protected void printAfterFetch(SQLSelectQueryBlock x) {}
     protected void printFetchFirst(SQLSelectQueryBlock x) {
         SQLLimit limit = x.getLimit();
         if (limit == null) {

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -4552,7 +4552,7 @@ && isEnabled(VisitorFeature.OutputUseInsertValueClauseOriginalString)
             } else if (value instanceof Date) {
                 print((Date) value);
             } else if (value instanceof BigDecimal) {
-                print(((BigDecimal)value).toPlainString());
+                print(((BigDecimal) value).toPlainString());
             } else if (value instanceof BigInteger) {
                 print(value.toString());
             } else if (value == null) {

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -4551,7 +4551,9 @@ && isEnabled(VisitorFeature.OutputUseInsertValueClauseOriginalString)
                 print(((Double) value).doubleValue());
             } else if (value instanceof Date) {
                 print((Date) value);
-            } else if (value instanceof BigDecimal || value instanceof BigInteger) {
+            } else if (value instanceof BigDecimal) {
+                print(((BigDecimal)value).toPlainString());
+            } else if (value instanceof BigInteger) {
                 print(value.toString());
             } else if (value == null) {
                 print0(ucase ? "NULL" : "null");

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -4551,7 +4551,7 @@ && isEnabled(VisitorFeature.OutputUseInsertValueClauseOriginalString)
                 print(((Double) value).doubleValue());
             } else if (value instanceof Date) {
                 print((Date) value);
-            } else if (value instanceof BigDecimal) {
+            } else if (value instanceof BigDecimal || value instanceof BigInteger) {
                 print(value.toString());
             } else if (value == null) {
                 print0(ucase ? "NULL" : "null");

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSQLStatementParser.java
Patch:
@@ -506,7 +506,6 @@ private void parseEndDollarQuote(SQLBlockStatement block) {
                 block.setLanguage(lexer.stringVal());
                 acceptIdentifier(block.getLanguage());
             }
-            accept(Token.SEMI);
         }
     }
 

File: core/src/test/java/com/alibaba/druid/bvt/sql/postgresql/pl/PGGetDiagnosticsStatementTest.java
Patch:
@@ -16,12 +16,13 @@ public void test_0() throws Exception {
 
 		List<SQLStatement> statementList = SQLUtils.parseStatements(sql, JdbcConstants.POSTGRESQL);
 		assertEquals(1, statementList.size());
-		
+
 		String output = SQLUtils.toSQLString(statementList, JdbcConstants.POSTGRESQL);
 		assertEquals("DO $$\n" +
 					 "BEGIN\n" +
 					 "\tGET DIAGNOSTICS n = ROW_COUNT;\n" +
-					 "END $$;",
+					 "END;\n" +
+					 "$$;",
 					 output);
 	}
 }

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -3915,7 +3915,7 @@ public SQLStatement parseCreatePackage() {
         throw new ParserException("TODO " + lexer.info());
     }
 
-    protected SQLStatement parseCreate() {
+    public SQLStatement parseCreate() {
         Lexer.SavePoint mark = lexer.markOut();
         accept(Token.CREATE);
 

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -3144,7 +3144,7 @@ public void printParameter(Object param) {
         }
 
         if (param instanceof Double) {
-            param = new BigDecimal((double) param);
+            param = BigDecimal.valueOf((double) param);
         }
         if (param instanceof BigDecimal) { // 不需要科学计数法输出
             print0(((BigDecimal) param).toPlainString());

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -1515,11 +1515,11 @@ public static BigDecimal castToDecimal(Object val) {
         }
 
         if (val instanceof Float) {
-            return new BigDecimal((Float) val);
+            return BigDecimal.valueOf((Float) val);
         }
 
         if (val instanceof Double) {
-            return new BigDecimal((Double) val);
+            return BigDecimal.valueOf((Double) val);
         }
 
         return BigDecimal.valueOf(((Number) val).longValue());

File: core/src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * <pre>
- * 这个类主要是负责两个事情, 解密, 和下载远程的配置文件
+ * 这个类主要是负责两个事情：解密和下载远程的配置文件
  * [解密]
  *
  * DruidDataSource dataSource = new DruidDataSource();
@@ -44,7 +44,7 @@
  * //启用config filter
  * dataSource.setFilters("config");
  * //使用RSA解密(使用默认密钥）
- * dataSource.setConnectionPropertise("config.decrypt=true");
+ * dataSource.setConnectionProperties("config.decrypt=true");
  * dataSource.setPassword("加密的密文");
  *
  * [远程配置文件]
@@ -53,7 +53,7 @@
  * //启用config filter
  * dataSource.setFilters("config");
  * //使用RSA解密(使用默认密钥）
- * dataSource.setConnectionPropertise("config.file=http://localhost:8080/remote.propreties;");
+ * dataSource.setConnectionProperties("config.file=http://localhost:8080/remote.propreties;");
  *
  * [Spring的配置解密]
  *

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -716,7 +716,7 @@ public static List<String> splitAndRemoveComment(String sql, DbType dbType) {
                 start = lexer.startPos;
                 startToken = token;
                 set = false;
-                tokens = 0;
+                tokens = token == Token.LINE_COMMENT || token == Token.MULTI_LINE_COMMENT ? 0 : 1;
                 continue;
             } else if (token == Token.MULTI_LINE_COMMENT) {
                 int len = lexer.startPos - start;
@@ -733,7 +733,7 @@ public static List<String> splitAndRemoveComment(String sql, DbType dbType) {
                 token = lexer.token;
                 start = lexer.startPos;
                 startToken = token;
-                tokens = 0;
+                tokens = token == Token.LINE_COMMENT || token == Token.MULTI_LINE_COMMENT ? 0 : 1;
                 continue;
             } else if (token == Token.CREATE) {
                 lexer.nextToken();

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1444,7 +1444,7 @@ private void initExceptionSorter() {
             } else if (realDriverClassName.contains("DB2")) {
                 this.exceptionSorter = new DB2ExceptionSorter();
             } else if (realDriverClassName.equals(JdbcConstants.GOLDENDB_DRIVER)) {
-                this.validConnectionChecker = new MySqlValidConnectionChecker();
+                this.exceptionSorter = new MySqlExceptionSorter();
                 this.isMySql = true;
             } else {
                 Class<?> superClass = driverClass.getSuperclass();

File: core/src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -1000,7 +1000,7 @@ public static Object getValue(WallVisitor visitor, SQLBinaryOpExpr x) {
 
         boolean checkCondition = visitor != null
                 && (!visitor.getConfig().isConstArithmeticAllow()
-                || !visitor.getConfig().isConditionOpBitwseAllow() || !visitor.getConfig().isConditionOpXorAllow());
+                || !visitor.getConfig().isConditionOpBitwiseAllow() || !visitor.getConfig().isConditionOpXorAllow());
 
         if (x.getLeft() instanceof SQLName) {
             if (x.getRight() instanceof SQLName) {
@@ -1454,7 +1454,7 @@ public static Object getConditionValue(WallVisitor visitor, SQLExpr x, boolean a
                 addViolation(visitor, ErrorCode.XOR, " allow", x);
             }
 
-            if (current.hasBitwise() && !visitor.getConfig().isConditionOpBitwseAllow()) {
+            if (current.hasBitwise() && !visitor.getConfig().isConditionOpBitwiseAllow()) {
                 addViolation(visitor, ErrorCode.BITWISE, "bitwise operator not allow", x);
             }
 

File: core/src/test/java/com/alibaba/druid/bvt/bug/Issue_728.java
Patch:
@@ -45,7 +45,7 @@ public void test3() throws Exception {
         String sql = "SELECT * from city_list where city_id = 1 & 2";
 
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
 
         Assert.assertFalse(WallUtils.isValidateMySql(sql, config));
     }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseAndTest.java
Patch:
@@ -15,7 +15,7 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
                 "SELECT * from t where (id = 1) & 2", config)); //
     }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseInvertTest.java
Patch:
@@ -15,7 +15,7 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
                 "SELECT * from t where ~2", config)); //
     }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseOrTest.java
Patch:
@@ -15,7 +15,7 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
                 "SELECT * from t where (id = 1) | 2", config)); //
     }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseXorTest.java
Patch:
@@ -15,7 +15,7 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
                 "SELECT * from t where (id = 1) ^ (1=1)", config)); //
     }

File: core/src/main/java/com/alibaba/druid/wall/WallConfig.java
Patch:
@@ -757,6 +757,7 @@ public void setDeleteWhereAlwayTrueCheck(boolean deleteWhereAlwayTrueCheck) {
         this.deleteWhereAlwayTrueCheck = deleteWhereAlwayTrueCheck;
     }
 
+    @Deprecated
     public boolean isUpdateWhereAlayTrueCheck() {
         return updateWhereAlwayTrueCheck;
     }
@@ -773,7 +774,6 @@ public void setUpdateWhereAlwayTrueCheck(boolean updateWhereAlwayTrueCheck) {
         this.updateWhereAlwayTrueCheck = updateWhereAlwayTrueCheck;
     }
 
-    @Deprecated
     public boolean isConditionOpBitwseAllow() {
         return conditionOpBitwseAllow;
     }

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -698,7 +698,7 @@ public static List<String> splitAndRemoveComment(String sql, DbType dbType) {
             start = lexer.startPos;
         }
 
-        for (int tokens = 0; lexer.token != Token.EOF; ) {
+        for (int tokens = 1; lexer.token != Token.EOF; ) {
             if (token == Token.SEMI) {
                 int len = lexer.startPos - start;
                 if (len > 0) {
@@ -878,7 +878,7 @@ public static String removeComment(String sql, DbType dbType) {
         }
 
         sql = sql.trim();
-        if (sql.startsWith("jar")) {
+        if (sql.startsWith("jar") || sql.startsWith("JAR")) {
             return sql;
         }
 

File: core/src/main/java/com/alibaba/druid/wall/WallVisitor.java
Patch:
@@ -77,7 +77,7 @@ default boolean visit(SQLMethodInvokeExpr x) {
     }
 
     default boolean visit(SQLSelectQueryBlock x) {
-        WallVisitorUtils.checkSelelct(this, x);
+        WallVisitorUtils.checkSelect(this, x);
 
         return true;
     }

File: core/src/main/java/com/alibaba/druid/wall/spi/MySqlWallVisitor.java
Patch:
@@ -42,7 +42,7 @@ public DbType getDbType() {
 
     @Override
     public boolean visit(MySqlSelectQueryBlock x) {
-        WallVisitorUtils.checkSelelct(this, x);
+        WallVisitorUtils.checkSelect(this, x);
         return true;
     }
 

File: core/src/main/java/com/alibaba/druid/wall/spi/PGWallVisitor.java
Patch:
@@ -52,7 +52,7 @@ public boolean isDenyTable(String name) {
 
     @Override
     public boolean visit(PGSelectQueryBlock x) {
-        WallVisitorUtils.checkSelelct(this, x);
+        WallVisitorUtils.checkSelect(this, x);
         return true;
     }
 

File: core/src/main/java/com/alibaba/druid/wall/spi/SQLServerWallVisitor.java
Patch:
@@ -118,7 +118,7 @@ public boolean visit(SQLServerObjectReferenceExpr x) {
     }
 
     public boolean visit(SQLServerSelectQueryBlock x) {
-        WallVisitorUtils.checkSelelct(this, x);
+        WallVisitorUtils.checkSelect(this, x);
         return true;
     }
     @Override

File: druid-admin/src/main/java/com/alibaba/druid/admin/service/MonitorStatService.java
Patch:
@@ -370,7 +370,8 @@ public String getSqlStatDataList(Map<String, String> parameters) {
         JSONObject jsonObject = new JSONObject();
         jsonObject.put("ResultCode", RESULT_CODE_SUCCESS);
         jsonObject.put("Content", objects);
-        return jsonObject.toJSONString();
+        return jsonObject.toJSONString(JSONWriter.Feature.LargeObject, JSONWriter.Feature.ReferenceDetection,
+                JSONWriter.Feature.BrowserCompatible, JSONWriter.Feature.BrowserSecure);
     }
 
     /**

File: druid-admin/src/main/java/com/alibaba/druid/admin/model/dto/DataSourceResult.java
Patch:
@@ -118,7 +118,7 @@ public static class ContentBean {
         @JSONField(name = "RemoveAbandoned")
         private boolean RemoveAbandoned;
         @JSONField(name = "ClobOpenCount")
-        private int ClobOpenCount;
+        private long ClobOpenCount;
         @JSONField(name = "BlobOpenCount")
         private int BlobOpenCount;
         @JSONField(name = "KeepAliveCheckCount")

File: druid-admin/src/main/java/com/alibaba/druid/admin/util/HttpUtil.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.druid.admin.util;
 
 import com.alibaba.fastjson2.JSON;
+import lombok.extern.slf4j.Slf4j;
 import org.apache.http.HttpEntity;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
@@ -15,9 +16,11 @@
  * @author linchtech
  * @date 2020-09-16 16:12
  **/
+@Slf4j
 public class HttpUtil {
     public static <T> T get(String url, Class<T> resultType) {
         CloseableHttpClient httpClient = HttpClients.createDefault();
+        log.info(url);
         HttpGet httpGet = new HttpGet(url);
         httpGet.setHeader("Content-type", "application/json");
         CloseableHttpResponse response;

File: core/src/main/java/com/alibaba/druid/util/OracleUtils.java
Patch:
@@ -261,7 +261,7 @@ public static List<String> getTableDDL(Connection conn, List<String> tables) thr
             sql.append("select DBMS_METADATA.GET_DDL('TABLE', TABLE_NAME) FROM user_tables");
 
             if (tables.size() > 0) {
-                sql.append("IN (");
+                sql.append(" WHERE TABLE_NAME IN (");
                 for (int i = 0; i < tables.size(); ++i) {
                     if (i != 0) {
                         sql.append(", ?");

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -99,6 +99,9 @@ public boolean visit(OracleAnalytic x) {
         if (x.isWindowingPreceding()) {
             print0(ucase ? " PRECEDING" : " preceding");
         }
+        if (x.isWindowingBetweenEndFollowing()) {
+            print0(ucase ? " FOLLOWING" : " following");
+        }
 
         print(')');
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -918,9 +918,9 @@ protected SQLAggregateExpr parseAggregateExpr(String methodName) {
                             endExpr = new SQLIdentifierExpr("CURRENT ROW");
                         } else if (lexer.identifierEquals(FnvHash.Constants.UNBOUNDED)) {
                             lexer.nextToken();
-                            if (lexer.stringVal().equalsIgnoreCase("PRECEDING")) {
+                            if (lexer.stringVal().equalsIgnoreCase("FOLLOWING")) {
                                 lexer.nextToken();
-                                endExpr = new SQLIdentifierExpr("UNBOUNDED PRECEDING");
+                                endExpr = new SQLIdentifierExpr("UNBOUNDED FOLLOWING");
                             } else {
                                 throw new ParserException("syntax error. " + lexer.info());
                             }

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -423,8 +423,8 @@ public SQLExpr primary() {
                         lexer.nextToken();
                         break;
                     case IDENTIFIER:
-                        sqlExpr = new SQLUnaryExpr(SQLUnaryOperator.Negative, new SQLIdentifierExpr(lexer.stringVal()));
-                        lexer.nextToken();
+                        sqlExpr = primary();
+                        sqlExpr = new SQLUnaryExpr(SQLUnaryOperator.Negative, sqlExpr);
                         break;
                     case VARIANT:
                     case QUES:

File: druid-spring-boot-3-starter/src/main/java/com/alibaba/druid/spring/boot3/autoconfigure/DruidDataSourceAutoConfigure.java
Patch:
@@ -21,6 +21,7 @@
 import com.alibaba.druid.spring.boot3.autoconfigure.stat.DruidSpringAopConfiguration;
 import com.alibaba.druid.spring.boot3.autoconfigure.stat.DruidStatViewServletConfiguration;
 import com.alibaba.druid.spring.boot3.autoconfigure.stat.DruidWebStatFilterConfiguration;
+import javax.sql.DataSource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
@@ -59,7 +60,7 @@ public class DruidDataSourceAutoConfigure {
      * @return druid data source wrapper
      */
     @Bean
-    @ConditionalOnMissingBean
+    @ConditionalOnMissingBean({DruidDataSourceWrapper.class, DruidDataSource.class, DataSource.class})
     public DruidDataSourceWrapper dataSource() {
         LOGGER.info("Init DruidDataSource");
         return new DruidDataSourceWrapper();

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.java
Patch:
@@ -21,6 +21,7 @@
 import com.alibaba.druid.spring.boot.autoconfigure.stat.DruidSpringAopConfiguration;
 import com.alibaba.druid.spring.boot.autoconfigure.stat.DruidStatViewServletConfiguration;
 import com.alibaba.druid.spring.boot.autoconfigure.stat.DruidWebStatFilterConfiguration;
+import javax.sql.DataSource;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.boot.autoconfigure.AutoConfigureBefore;
@@ -59,7 +60,7 @@ public class DruidDataSourceAutoConfigure {
      * @return druid data source wrapper
      */
     @Bean
-    @ConditionalOnMissingBean
+    @ConditionalOnMissingBean({DruidDataSourceWrapper.class, DruidDataSource.class, DataSource.class})
     public DruidDataSourceWrapper dataSource() {
         LOGGER.info("Init DruidDataSource");
         return new DruidDataSourceWrapper();

File: core/src/main/java/com/alibaba/druid/pool/vendor/HiveValidConnectionChecker.java
Patch:
@@ -12,7 +12,7 @@
 public class HiveValidConnectionChecker extends ValidConnectionCheckerAdapter implements ValidConnectionChecker, Serializable {
     private static final long serialVersionUID = -3642139641360283076L;
     public static final String DEFAULT_VALIDATION_QUERY = "SELECT 1";
-    private int defaultQueryTimeout = 0;
+    private int defaultQueryTimeout;
 
     @Override
     public boolean isValidConnection(Connection conn, String validateQuery, int validationQueryTimeout) throws Exception {
@@ -38,4 +38,4 @@ public boolean isValidConnection(Connection conn, String validateQuery, int vali
             JdbcUtils.close(stmt);
         }
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/com/alibaba/druid/pool/vendor/HiveValidConnectionChecker.java
Patch:
@@ -17,7 +17,7 @@ public class HiveValidConnectionChecker extends ValidConnectionCheckerAdapter im
     @Override
     public boolean isValidConnection(Connection conn, String validateQuery, int validationQueryTimeout) throws Exception {
         int queryTimeout = validationQueryTimeout <= 0 ? defaultQueryTimeout : validationQueryTimeout;
-        if (conn.isClosed() || conn.isValid(queryTimeout)) {
+        if (conn.isClosed() || !conn.isValid(queryTimeout)) {
             return false;
         }
         String query = validateQuery;

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1398,6 +1398,9 @@ private void initValidConnectionChecker() {
                 || (realDriverClassName.equals(JdbcConstants.OCEANBASE_DRIVER2))) {
             DbType dbType = DbType.of(this.dbTypeName);
             this.validConnectionChecker = new OceanBaseValidConnectionChecker(dbType);
+        } else if (realDriverClassName.equals(JdbcConstants.HIVE)
+                || (realDriverClassName.equals(JdbcConstants.HIVE_DRIVER))) {
+            this.validConnectionChecker = new HiveValidConnectionChecker();
         }
 
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -1212,7 +1212,7 @@ private OracleUsingIndexClause parseUsingIndex() {
             } else if (lexer.token() == Token.ENABLE) {
                 lexer.nextToken();
                 using.setEnable(true);
-			} else if (lexer.token() == Token.REVERSE) {
+            } else if (lexer.token() == Token.REVERSE) {
                 lexer.nextToken();
                 using.setReverse(true);
                 continue;

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -1212,8 +1212,7 @@ private OracleUsingIndexClause parseUsingIndex() {
             } else if (lexer.token() == Token.ENABLE) {
                 lexer.nextToken();
                 using.setEnable(true);
-                continue;
-            } else if (lexer.identifierEquals("REVERSE")) {
+			} else if (lexer.token() == Token.REVERSE) {
                 lexer.nextToken();
                 using.setReverse(true);
                 continue;

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -60,7 +60,7 @@ protected void parseInsert0_hinits(SQLInsertInto insertStatement) {
             OracleInsertStatement stmt = (OracleInsertStatement) insertStatement;
             this.getExprParser().parseHints(stmt.getHints());
         } else {
-            List<SQLHint> hints = new ArrayList<SQLHint>(1);
+            List<SQLHint> hints = new ArrayList<>(1);
             this.getExprParser().parseHints(hints);
         }
     }
@@ -85,7 +85,7 @@ public void parseStatementList(List<SQLStatement> statementList, int max, SQLObj
 
             if (lexer.token() == (Token.SEMI)) {
                 lexer.nextToken();
-                if (statementList.size() > 0) {
+                if (!statementList.isEmpty()) {
                     SQLStatement lastStmt = statementList.get(statementList.size() - 1);
                     lastStmt.setAfterSemi(true);
                 }
@@ -2623,7 +2623,7 @@ public OracleCreateIndexStatement parseCreateIndex(boolean acceptCreate) {
                 lexer.nextToken();
                 stmt.setSort(Boolean.FALSE);
                 continue;
-            } else if (lexer.identifierEquals("REVERSE")) {
+            } else if (lexer.token() == Token.REVERSE) {
                 lexer.nextToken();
                 stmt.setReverse(true);
                 continue;

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -940,6 +940,7 @@ public SQLStatement parseWhile() {
         accept(Token.END);
         accept(Token.LOOP);
         accept(Token.SEMI);
+        stmt.setAfterSemi(true);
 
         return stmt;
     }

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/pl/Oracle_pl_basic_loop_0.java
Patch:
@@ -23,7 +23,7 @@
 
 import java.util.List;
 
-public class Oracle_pl_loop_0 extends OracleTest {
+public class Oracle_pl_basic_loop_0 extends OracleTest {
     public void test_0() throws Exception {
         String sql = "DECLARE\n" +
                 "  x NUMBER := 0;\n" +

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/pl/Oracle_pl_basic_loop_1.java
Patch:
@@ -23,7 +23,7 @@
 
 import java.util.List;
 
-public class Oracle_pl_loop_1 extends OracleTest {
+public class Oracle_pl_basic_loop_1 extends OracleTest {
     public void test_0() throws Exception {
         String sql = "DECLARE\n" +
                 "  x NUMBER := 0;\n" +

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -5057,7 +5057,7 @@ public boolean visit(SQLAlterSystemGetConfigStatement x) {
 
     @Override
     public boolean visit(SQLAlterSystemSetConfigStatement x) {
-        print0(ucase ? "ALTER SYSTEM SET COFNIG " : "alter system set config ");
+        print0(ucase ? "ALTER SYSTEM SET CONFIG " : "alter system set config ");
 
         printAndAccept(x.getOptions(), " ");
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -350,7 +350,6 @@ public void parseStatementList(List<SQLStatement> statementList, int max, SQLObj
                     if (binaryOpExpr.getOperator() == SQLBinaryOperator.Assignment) {
                         SQLSetStatement stmt = new SQLSetStatement();
                         stmt.setDbType(DbType.oracle);
-                        stmt.setUseSet(true); // now only effective for PG
                         stmt.setParent(parent);
 
                         SQLAssignItem assignItem = new SQLAssignItem(binaryOpExpr.getLeft(), binaryOpExpr.getRight());

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/create/OracleCreateTriggerTest6.java
Patch:
@@ -120,8 +120,8 @@ public void test_0() throws Exception {
                         "\tvar_nRecordCount number;\n" +
                         "\tvar_sState varchar2(16);\n" +
                         "BEGIN\n" +
-                        "\tSET var_sState := :NEW.State;\n" +
-                        "\tSET var_dFirstCheckTime := :NEW.Commiteddate;\n" +
+                        "\tvar_sState := :NEW.State;\n" +
+                        "\tvar_dFirstCheckTime := :NEW.Commiteddate;\n" +
                         "\tIF var_sState = 'approved' THEN\n" +
                         "\t\t-- 鏌ヨ\uE1D7鍚堝悓 ID\n" +
                         "\t\tSELECT etfca_.contractid\n" +

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/create/OracleCreateViewTest13.java
Patch:
@@ -36,7 +36,7 @@ public void test_types() throws Exception {
                         "WHERE rbi.rma_id > ?\n" +
                         "\tAND rsi.e_rprsendid = ?\n" +
                         "\tAND rsi.e_boardid IN (?)\n" +
-                        "FOR UPDATE(rbi.rma_id)\n";
+                        "FOR UPDATE OF rbi.rma_id\n";
 
         System.out.println(sql);
 
@@ -55,7 +55,7 @@ public void test_types() throws Exception {
                         "WHERE rbi.rma_id > ?\n" +
                         "\tAND rsi.e_rprsendid = ?\n" +
                         "\tAND rsi.e_boardid IN (?)\n" +
-                        "FOR UPDATE(rbi.rma_id)",//
+                        "FOR UPDATE OF rbi.rma_id",//
                 SQLUtils.toSQLString(stmt, JdbcConstants.ORACLE));
 
         OracleSchemaStatVisitor visitor = new OracleSchemaStatVisitor();

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -403,9 +403,8 @@ public boolean visit(OracleSelectQueryBlock x) {
             println();
             print0(ucase ? "FOR UPDATE" : "for update");
             if (x.getForUpdateOfSize() > 0) {
-                print('(');
+                print(" OF ");
                 printAndAccept(x.getForUpdateOf(), ", ");
-                print(')');
             }
 
             if (x.isNoWait()) {

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGOutputVisitor.java
Patch:
@@ -1378,9 +1378,8 @@ public boolean visit(OracleSelectQueryBlock x) {
             println();
             print0(ucase ? "FOR UPDATE" : "for update");
             if (x.getForUpdateOfSize() > 0) {
-                print('(');
+                print(" OF ");
                 printAndAccept(x.getForUpdateOf(), ", ");
-                print(')');
             }
 
             if (x.isNoWait()) {

File: core/src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -862,8 +862,8 @@ public static void checkUpdate(WallVisitor visitor, SQLUpdateStatement x) {
         } else {
             checkCondition(visitor, where);
 
-            if (Boolean.TRUE.equals(getConditionValue(visitor, where, config.isUpdateWhereAlayTrueCheck()))) {
-                if (config.isUpdateWhereAlayTrueCheck() && visitor.isSqlEndOfComment() && isSimpleConstExpr(where)) {
+            if (Boolean.TRUE.equals(getConditionValue(visitor, where, config.isUpdateWhereAlwayTrueCheck()))) {
+                if (config.isUpdateWhereAlwayTrueCheck() && visitor.isSqlEndOfComment() && isSimpleConstExpr(where)) {
                     addViolation(visitor, ErrorCode.ALWAYS_TRUE, "update alway true condition not allow", x);
                 }
             }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/WallUpdateWhereTest1.java
Patch:
@@ -31,7 +31,7 @@ public class WallUpdateWhereTest1 extends TestCase {
 
     public void test_check_true() throws Exception {
         WallConfig config = new WallConfig();
-        config.setUpdateWhereAlayTrueCheck(true);
+        config.setUpdateWhereAlwayTrueCheck(true);
         config.setConditionAndAlwayTrueAllow(true);
         config.setCommentAllow(true);
 
@@ -41,7 +41,7 @@ public void test_check_true() throws Exception {
 
     public void test_check_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setUpdateWhereAlayTrueCheck(false);
+        config.setUpdateWhereAlwayTrueCheck(false);
         config.setConditionAndAlwayTrueAllow(true);
         config.setCommentAllow(true);
 

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/TAEWallTest.java
Patch:
@@ -36,6 +36,6 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         Assert.assertFalse(WallUtils.isValidateMySql(//
-                "select * from t where status = 1 AND 1=1")); //
+                "select * from t where status = 1 OR 1=1")); //
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/WallSelectWhereTest6.java
Patch:
@@ -38,6 +38,9 @@ public void test_check_true() throws Exception {
 
         Assert.assertFalse(WallUtils.isValidateMySql(sql, config));
         Assert.assertFalse(WallUtils.isValidateMySql(sql1, config));
+
+        config.setSelectWhereAlwayTrueCheck(false);
+        Assert.assertTrue(WallUtils.isValidateMySql(sql, config));
     }
 
     public void test_check_false() throws Exception {

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/WallStatTestWhereAlwaysTrue.java
Patch:
@@ -10,6 +10,9 @@
 
 public class WallStatTestWhereAlwaysTrue extends TestCase {
     private String[] sqls = new String[]{
+            "select * from T where a=1 or 1=1",
+            "update T set name='N' where a=1 or 1=1",
+            "delete from T where a=1 or 1=1",
             "update T set name='N' where 1=1",
             "delete from T where 1=1",
             "select * from T where 1=1",

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest.java
Patch:
@@ -46,7 +46,7 @@ public void testWall() throws Exception {
 
         //Assert.assertFalse(WallUtils.isValidateMySql("select f1, f2 from t where c1=1 union select 1, 2"));
 
-        Assert.assertTrue(WallUtils.isValidateMySql("select c1 from t where 1=1 or id =1"));
+        Assert.assertFalse(WallUtils.isValidateMySql("select c1 from t where 1=1 or id =1"));
         Assert.assertFalse(WallUtils.isValidateMySql("select c1 from t where id =1 or 1=1"));
         Assert.assertFalse(WallUtils.isValidateMySql("select c1 from t where id =1 || 1=1"));
 

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest21.java
Patch:
@@ -36,6 +36,6 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         Assert.assertFalse(WallUtils.isValidateMySql(//
-                "select * from t where status = 1 AND 1=1")); //
+                "select * from t where status = 1 OR 1=1")); //
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest22.java
Patch:
@@ -36,6 +36,6 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         Assert.assertFalse(WallUtils.isValidateMySql(//
-                "SELECT count(*) AS num FROM hkapp_goods WHERE  status=1 AND level=1 AND 1=1")); //
+                "SELECT count(*) AS num FROM hkapp_goods WHERE  status=1 AND level=1 OR 1=1")); //
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest23.java
Patch:
@@ -36,6 +36,6 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         Assert.assertFalse(WallUtils.isValidateMySql(//
-                "select count(*) total from utao_goods where pprice between 0 and 99999 and state=1 and 1=1")); //
+                "select count(*) total from utao_goods where pprice between 0 and 99999 and state=1 or 1=1")); //
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest24.java
Patch:
@@ -36,6 +36,6 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         Assert.assertFalse(WallUtils.isValidateMySql(//
-                "SELECT count(*) AS num FROM hkapp_goods WHERE  status=1 AND level=1 AND xxx = 1 AND 1=1")); //
+                "SELECT count(*) AS num FROM hkapp_goods WHERE  status=1 AND level=1 AND xxx = 1 OR 1=1")); //
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest7.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class MySqlWallTest7 extends TestCase {
     public void test_stuff() throws Exception {
-        Assert.assertFalse(WallUtils.isValidateMySql(//
+        Assert.assertTrue(WallUtils.isValidateMySql(//
                 "SELECT a.* FROM vote_info a where a.id<10 and (id <5 or 1=1) limit 1,10")); // 部分永真
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest90.java
Patch:
@@ -35,7 +35,8 @@ public void test_true() throws Exception {
 
         provider.getConfig().setSelectHavingAlwayTrueCheck(true);
 
-        Assert.assertTrue(provider.checkValid(//
+        //FIXME 不知此测试用例的真实意图
+        Assert.assertFalse(provider.checkValid(//
                 "select * from (select t10006_men_xing_jia_ge_fen_lei.bian_hao as \"bian_hao\", " + //
                         "   t10006_men_xing_jia_ge_fen_lei.ming_cheng as \"ming_cheng\" " + //
                         "from t10006_men_xing_jia_ge_fen_lei where 1=1 ) as tables where 1=1 order by tables.bian_hao"));

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest_having.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class MySqlWallTest_having extends TestCase {
     public void test_having() throws Exception {
-        Assert.assertTrue(WallUtils.isValidateMySql(//
+        Assert.assertFalse(WallUtils.isValidateMySql(//
                 "select id, count(*) from t group by id having 1 = 1"));
     }
 

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest_union.java
Patch:
@@ -27,7 +27,7 @@ public void testUnion() throws Exception {
         WallConfig config = new WallConfig();
         config.setSelectUnionCheck(true);
 
-        Assert.assertTrue(WallUtils.isValidateMySql("select f1, f2 from t where id=1 union select 1, 2", config)); // not end of comment
+        Assert.assertFalse(WallUtils.isValidateMySql("select f1, f2 from t where id=1 union select 1, 2", config)); // not end of comment
         Assert.assertFalse(WallUtils.isValidateMySql("select f1, f2 from t where id=1 union select 1, 2 --", config));
 
         Assert.assertTrue(WallUtils.isValidateMySql("select f1, f2 from t union select 1, 2", config)); // no where

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/AntlrMySqlTest.java
Patch:
@@ -20,6 +20,8 @@ public void test_for_antlr_examples() throws Exception {
         config.setConditionDoubleConstAllow(true);
         config.setConditionAndAlwayTrueAllow(true);
         config.setSelectIntoOutfileAllow(true);
+        config.setSelectWhereAlwayTrueCheck(false); //FIXME 此处是否要禁用审核h
+        config.setSelectUnionCheck(false); //FIXME 此处是否要禁用审核
         config.setCommentAllow(true);
         config.setHintAllow(true);
         MySqlWallProvider provider = new MySqlWallProvider(config);
@@ -36,7 +38,7 @@ public void test_for_antlr_examples() throws Exception {
                 String stmtSql = stmt.toString();
 
                 stmt.accept(schemaStatVisitor);
-                assertTrue(provider.checkValid(stmtSql));
+                assertTrue(stmtSql, provider.checkValid(stmtSql));
             }
             
             // test different style newline.

File: core/src/main/java/com/alibaba/druid/wall/WallConfig.java
Patch:
@@ -47,7 +47,7 @@ public class WallConfig implements WallConfigMBean {
     private boolean startTransactionAllow = true;
     private boolean blockAllow = true;
 
-    private boolean conditionAndAlwayTrueAllow;
+    private boolean conditionAndAlwayTrueAllow = true;
     private boolean conditionAndAlwayFalseAllow;
     private boolean conditionDoubleConstAllow;
     private boolean conditionLikeTrueAllow = true;

File: core/src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -498,7 +498,7 @@ private WallCheckResult checkInternal(String sql) {
                 violations.add(new IllegalSQLObjectViolation(ErrorCode.SYNTAX_ERROR, "not terminal sql, token "
                         + lastToken, sql));
             }
-            endOfComment = parser.getLexer().isEndOfComment();
+            endOfComment = parser.getLexer().isEOF();
         } catch (NotAllowCommentException e) {
             violations.add(new IllegalSQLObjectViolation(ErrorCode.COMMENT_STATEMENT_NOT_ALLOW, "comment not allow", sql));
             incrementCommentDeniedCount();

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -2164,7 +2164,7 @@ private void parserParameters(List<SQLParameter> parameters, SQLObject parent) {
                     dataType = this.exprParser.parseDataType(false);
                 }
 
-                if(lexer.token() == Token.NOT) {
+                if (lexer.token() == Token.NOT) {
                     lexer.nextToken();
                     accept(Token.NULL);
                     parameter.setNotNull(true);

File: core/src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -1417,7 +1417,7 @@ public static java.util.Date parseDate(String str, TimeZone timeZone) {
 
     public static long parseMillis(byte[] str, TimeZone timeZone) {
         if (str == null) {
-            throw new IllegalArgumentException(new String(str, UTF8));
+            throw new IllegalArgumentException("str not be null");
         }
 
         return parseMillis(str, 0, str.length, timeZone);
@@ -1435,7 +1435,7 @@ public static long parseMillis(final byte[] str, final int off, final int len, f
 
     public static ZonedDateTime parseDateTime(final byte[] str, final int off, final int len, ZoneId zoneId) {
         if (str == null) {
-            throw new IllegalArgumentException(new String(str, UTF8));
+            throw new IllegalArgumentException("str not be null");
         }
 
         if (len < 8) {

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -539,6 +539,7 @@ protected MySqlJSONTableExpr.Column parseJsonTableColumn() {
         if (lexer.token() == Token.FOR) {
             lexer.nextToken();
             acceptIdentifier("ORDINALITY");
+            column.setOrdinality(true);
         } else {
             boolean nested = name instanceof SQLIdentifierExpr
                     && name.nameHashCode64() == FnvHash.Constants.NESTED;

File: core/src/main/java/com/alibaba/druid/support/json/JSONWriter.java
Patch:
@@ -20,6 +20,7 @@
 
 import javax.management.openmbean.CompositeData;
 import javax.management.openmbean.TabularData;
+
 import java.text.SimpleDateFormat;
 import java.time.LocalDate;
 import java.time.LocalDateTime;

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -38,6 +38,7 @@ public class MySqlLexer extends Lexer {
         map.put("DUAL", Token.DUAL);
         map.put("FALSE", Token.FALSE);
         map.put("IF", Token.IF);
+        map.put("ELSEIF", Token.ELSEIF);
         map.put("KILL", Token.KILL);
 
         map.put("LIMIT", Token.LIMIT);

File: core/src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -3127,6 +3127,7 @@ private boolean isOperator(char ch) {
 
     private static final long MULTMIN_RADIX_TEN = Long.MIN_VALUE / 10;
     private static final long N_MULTMAX_RADIX_TEN = -Long.MAX_VALUE / 10;
+
     public final boolean isNegativeIntegerValue() {
         return charAt(mark) == '-';
     }

File: core/src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -98,6 +98,7 @@ public enum Token {
     THEN("THEN"),
     ELSE("ELSE"),
     ELSIF("ELSIF"),
+    ELSEIF("ELSEIF"),
     END("END"),
     EXISTS("EXISTS"),
     IN("IN"),

File: core/src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -488,7 +488,9 @@ private WallCheckResult checkInternal(String sql) {
                 parser.setParseCompleteValues(false);
                 parser.setParseValuesSize(config.getInsertValuesCheckSize());
             }
-
+            if (config.isHintAllow()) {
+                parser.config(SQLParserFeature.StrictForWall, false);
+            }
             parser.parseStatementList(statementList);
 
             final Token lastToken = parser.getLexer().token();

File: core/src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -2667,7 +2667,7 @@ public static void check(WallVisitor visitor, SQLCommentHint x) {
         String text = x.getText();
         text = text.trim();
         if (text.startsWith("!")) {
-            text = text.substring(1);
+            text = text.substring(1).trim();
         }
 
         if (text.length() == 0) {

File: core/src/test/java/com/alibaba/druid/bvt/bug/Issue1576.java
Patch:
@@ -19,7 +19,7 @@ public void test_for_issue() throws Exception {
 
         Exception error = null;
         try {
-            parser.parseStatement(true);
+            parser.parseStatement();
         } catch (Exception ex) {
             error = ex;
         }

File: core/src/test/java/com/alibaba/druid/bvt/bug/Issue4253.java
Patch:
@@ -27,7 +27,7 @@ public void test_for_issue() throws Exception {
         SQLStatementParser parser = SQLParserUtils.createSQLStatementParser(input, dbType);
         Exception error = null;
         try {
-            parser.parseStatement(true);
+            parser.parseStatement();
         } catch (Exception ex) {
             ex.printStackTrace();
             error = ex;

File: core/src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest_hint.java
Patch:
@@ -15,7 +15,7 @@ public void test_false() throws Exception {
 
     public void test_false_1() throws Exception {
         WallConfig config = new WallConfig();
-        config.setHintAllow(true);
+        config.setHintAllow(false);
         config.setMultiStatementAllow(true);
         String sql = "select * from person where id = '3'/**/union select 0,1,v from (select 1,2,user/*!() as v*/) a where '1'<>''";
         Assert.assertFalse(WallUtils.isValidateMySql(sql, config)); //

File: core/src/test/java/com/alibaba/druid/bvt/pool/TestActiveTrace.java
Patch:
@@ -46,11 +46,13 @@ protected void tearDown() throws Exception {
     }
 
     public void test_activeTrace() throws Exception {
-        for (int i = 0; i < 1000 * 10; ++i) {
+        for (int i = 0; i < 1000; ++i) {
             dataSource.shrink();
 
             Connection conn = dataSource.getConnection();
             conn.close();
+            // sleep 10ms for checking stability, see https://github.com/alibaba/druid/issues/5620
+            Thread.sleep(10);
             // Assert.assertEquals(1, dataSource.getPoolingCount());
             dataSource.shrink();
             Assert.assertEquals("createCount : " + dataSource.getCreateCount(), 0, dataSource.getPoolingCount());

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/create/MySqlCreateEventTest.java
Patch:
@@ -38,7 +38,7 @@ public void test_one() throws Exception {
         stmt.accept(visitor);
 
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("CREATE DEFINER = EVENT IF NOT EXISTS someevent ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 30 MINUTE\n" +
+        Assert.assertEquals("CREATE DEFINER = current_user EVENT IF NOT EXISTS someevent ON SCHEDULE AT CURRENT_TIMESTAMP + INTERVAL 30 MINUTE\n" +
                 "DO\n" +
                 "BEGIN\n" +
                 "\tINSERT INTO test.t1\n" +

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/create/MySqlCreateEventTest1.java
Patch:
@@ -38,7 +38,7 @@ public void test_one() throws Exception {
         stmt.accept(visitor);
 
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("CREATE DEFINER = EVENT testevent1 ON SCHEDULE EVERY 1 HOUR ENDS '2016-11-05 23:59:00'\n" +
+        Assert.assertEquals("CREATE DEFINER = 'ivan'@'%' EVENT testevent1 ON SCHEDULE EVERY 1 HOUR ENDS '2016-11-05 23:59:00'\n" +
                 "DO\n" +
                 "BEGIN\n" +
                 "\tSELECT *\n" +

File: core/src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -3127,8 +3127,6 @@ private boolean isOperator(char ch) {
 
     private static final long MULTMIN_RADIX_TEN = Long.MIN_VALUE / 10;
     private static final long N_MULTMAX_RADIX_TEN = -Long.MAX_VALUE / 10;
-
-
     public final boolean isNegativeIntegerValue() {
         return charAt(mark) == '-';
     }

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlResourceTest.java
Patch:
@@ -51,7 +51,7 @@ public void test_0() throws Exception {
 
 
     public void test_14() throws Exception {
-        exec_test("bvt/parser/mysql-16.txt");
+        exec_test("bvt/parser/mysql-14.txt");
     }
 
     public void test_16() throws Exception {

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -3252,7 +3252,7 @@ public void shrink(boolean checkTime, boolean keepAlive) {
             final long currentTimeMillis = System.currentTimeMillis();
             int size = connections.size();
             for (int i = 0; i < size; ++i) {
-                DruidConnectionHolder connection = connections.pollFirst();
+                DruidConnectionHolder connection = connections.pollLast();
 
                 if ((onFatalError || fatalErrorIncrement > 0) && (lastFatalErrorTimeMillis
                         > connection.connectTimeMillis)) {

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -3252,7 +3252,7 @@ public void shrink(boolean checkTime, boolean keepAlive) {
             final long currentTimeMillis = System.currentTimeMillis();
             int size = connections.size();
             for (int i = 0; i < size; ++i) {
-                DruidConnectionHolder connection = connections.pollLast();
+                DruidConnectionHolder connection = connections.pollFirst();
 
                 if ((onFatalError || fatalErrorIncrement > 0) && (lastFatalErrorTimeMillis
                         > connection.connectTimeMillis)) {

File: core/src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -313,7 +313,7 @@ public enum Token {
     COMMA(","),
     DOT("."),
     DOTDOT(".."),
-    DOTDOTDOT("..,"),
+    DOTDOTDOT("..."),
     EQ("="),
     GT(">"),
     LT("<"),

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlStatementType.java
Patch:
@@ -61,8 +61,9 @@ public enum MySqlStatementType {
     }
 
     public static MySqlStatementType getType(SQLStatement stmt) {
+        String stmtClassName = stmt.getClass().getName();
         for (MySqlStatementType type : MySqlStatementType.values()) {
-            if (type.name == stmt.getClass().getName()) {
+            if (type.name.equals(stmtClassName)) {
                 return type;
             }
         }

File: core/src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -1122,7 +1122,7 @@ private static Object getValue_and(WallVisitor visitor, List<SQLExpr> groupList)
                 allTrue = Boolean.FALSE;
                 dalConst++;
             } else {
-                if (allTrue != Boolean.FALSE) {
+                if (!Boolean.FALSE.equals(allTrue)) {
                     allTrue = null;
                 }
                 dalConst = 0;

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -4139,7 +4139,7 @@ public boolean visit(MySqlAlterUserStatement x) {
 
     @Override
     public boolean visit(SQLSetStatement x) {
-        boolean printSet = x.getAttribute("parser.set") == Boolean.TRUE || DbType.oracle != dbType;
+        boolean printSet = Boolean.TRUE.equals(x.getAttribute("parser.set")) || DbType.oracle != dbType;
         if (printSet) {
             print0(ucase ? "SET " : "set ");
         }

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleRowNumToLimit.java
Patch:
@@ -469,7 +469,7 @@ void fixLimit() {
                 return;
             }
 
-            if (limit.getAttribute("oracle.isFixLimit") == Boolean.TRUE) {
+            if (Boolean.TRUE.equals(limit.getAttribute("oracle.isFixLimit"))) {
                 return;
             }
 

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -664,7 +664,7 @@ public static boolean visit(SQLEvalVisitor visitor, SQLCaseExpr x) {
             Object conditionValue = item.getConditionExpr().getAttribute(EVAL_VALUE);
 
             if ((x.getValueExpr() != null && eq(value, conditionValue))
-                    || (x.getValueExpr() == null && conditionValue instanceof Boolean && (Boolean) conditionValue == Boolean.TRUE)) {
+                    || (x.getValueExpr() == null && conditionValue instanceof Boolean && Boolean.TRUE.equals((Boolean) conditionValue))) {
                 item.getValueExpr().accept(visitor);
 
                 if (item.getValueExpr().getAttributes().containsKey(EVAL_VALUE)) {
@@ -814,13 +814,13 @@ public static boolean visit(SQLEvalVisitor visitor, SQLBinaryOpExpr x) {
         final WallConditionContext wallConditionContext = WallVisitorUtils.getWallConditionContext();
         if (x.getOperator() == SQLBinaryOperator.BooleanOr) {
             if (wallConditionContext != null) {
-                if (left.getAttribute(EVAL_VALUE) == Boolean.TRUE || right.getAttribute(EVAL_VALUE) == Boolean.TRUE) {
+                if (Boolean.TRUE.equals(left.getAttribute(EVAL_VALUE)) || Boolean.TRUE.equals(right.getAttribute(EVAL_VALUE))) {
                     wallConditionContext.setPartAlwayTrue(true);
                 }
             }
         } else if (x.getOperator() == SQLBinaryOperator.BooleanAnd) {
             if (wallConditionContext != null) {
-                if (left.getAttribute(EVAL_VALUE) == Boolean.FALSE || right.getAttribute(EVAL_VALUE) == Boolean.FALSE) {
+                if (Boolean.FALSE.equals(left.getAttribute(EVAL_VALUE)) || Boolean.FALSE.equals(right.getAttribute(EVAL_VALUE))) {
                     wallConditionContext.setPartAlwayFalse(true);
                 }
             }

File: core/src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -1846,7 +1846,7 @@ public boolean visit(SQLWithSubqueryClause.Entry x) {
         SQLStatement returningStatement = x.getReturningStatement();
         SQLExpr expr = x.getExpr();
 
-        if (Boolean.TRUE == with.getRecursive()) {
+        if (Boolean.TRUE.equals(with.getRecursive())) {
             SQLSelect select = x.getSubQuery();
             if (select != null) {
                 select.accept(this);

File: core/src/main/java/com/alibaba/druid/sql/visitor/functions/If.java
Patch:
@@ -40,7 +40,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
         if (itemValue == null) {
             return null;
         }
-        if (Boolean.TRUE == itemValue || !SQLEvalVisitorUtils.eq(itemValue, 0)) {
+        if (Boolean.TRUE.equals(itemValue) || !SQLEvalVisitorUtils.eq(itemValue, 0)) {
             SQLExpr trueExpr = arguments.get(1);
             trueExpr.accept(visitor);
             return trueExpr.getAttributes().get(EVAL_VALUE);

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/alterTable/MySqlAlterTableTest51_table_options.java
Patch:
@@ -40,7 +40,7 @@ public void test_0_options_no_comma_no_eq() {
         parser.match(Token.EOF);
 
         Assert.assertEquals("ALTER TABLE test001\n" +
-                "\tAUTO_INCREMENT = 1 AVG_ROW_LENGTH = 1 CHARACTER SET = utf8 CHECKSUM = 0 COLLATE = utf8_unicode_ci COMMENT = 'hehe' COMPRESSION = 'LZ4' CONNECTION = 'conn' COLLATE = 'path' DELAY_KEY_WRITE = 1 ENCRYPTION = 'N' ENGINE = innodb INSERT_METHOD = no KEY_BLOCK_SIZE = 32 MAX_ROWS = 999 MIN_ROWS = 1 PACK_KEYS = DEFAULT PASSWORD = 'psw' ROW_FORMAT = dynamic STATS_AUTO_RECALC = DEFAULT STATS_PERSISTENT = DEFAULT STATS_SAMPLE_PAGES = 10 TABLESPACE = `tbs_name` STORAGE memory UNION = (tb1, tb2, tb3) AUTO_INCREMENT = 1", SQLUtils.toMySqlString(stmt));
+                "\tAUTO_INCREMENT = 1 AVG_ROW_LENGTH = 1 CHARACTER SET = utf8 CHECKSUM = 0 COLLATE = utf8_unicode_ci COMMENT = 'hehe' COMPRESSION = 'LZ4' CONNECTION = 'conn' COLLATE = 'path' DELAY_KEY_WRITE = 1 ENCRYPTION = 'N' ENGINE = innodb INSERT_METHOD = no KEY_BLOCK_SIZE = 32 MAX_ROWS = 999 MIN_ROWS = 1 PACK_KEYS = DEFAULT PASSWORD = 'psw' ROW_FORMAT = dynamic STATS_AUTO_RECALC = DEFAULT STATS_PERSISTENT = DEFAULT STATS_SAMPLE_PAGES = 10 TABLESPACE `tbs_name` STORAGE memory UNION = (tb1, tb2, tb3) AUTO_INCREMENT = 1", SQLUtils.toMySqlString(stmt));
 
     }
 
@@ -75,7 +75,7 @@ public void test_0_options_comma_eq() {
         parser.match(Token.EOF);
 
         Assert.assertEquals("ALTER TABLE test001\n" +
-                "\tAUTO_INCREMENT = 2 AVG_ROW_LENGTH = 2 CHARACTER SET = utf8 CHECKSUM = 1 COLLATE = utf8_unicode_ci COMMENT = 'hehe' COMPRESSION = 'NONE' CONNECTION = 'conn' COLLATE = 'path' DELAY_KEY_WRITE = 0 ENCRYPTION = 'Y' ENGINE = innodb INSERT_METHOD = first KEY_BLOCK_SIZE = 64 MAX_ROWS = 999 MIN_ROWS = 1 PACK_KEYS = 0 PASSWORD = 'psw' ROW_FORMAT = fixed STATS_AUTO_RECALC = 1 STATS_PERSISTENT = 0 STATS_SAMPLE_PAGES = 2 TABLESPACE = `tbs_name` UNION = (tb1, tb2, tb3);", SQLUtils.toMySqlString(stmt));
+                "\tAUTO_INCREMENT = 2 AVG_ROW_LENGTH = 2 CHARACTER SET = utf8 CHECKSUM = 1 COLLATE = utf8_unicode_ci COMMENT = 'hehe' COMPRESSION = 'NONE' CONNECTION = 'conn' COLLATE = 'path' DELAY_KEY_WRITE = 0 ENCRYPTION = 'Y' ENGINE = innodb INSERT_METHOD = first KEY_BLOCK_SIZE = 64 MAX_ROWS = 999 MIN_ROWS = 1 PACK_KEYS = 0 PASSWORD = 'psw' ROW_FORMAT = fixed STATS_AUTO_RECALC = 1 STATS_PERSISTENT = 0 STATS_SAMPLE_PAGES = 2 TABLESPACE `tbs_name` UNION = (tb1, tb2, tb3);", SQLUtils.toMySqlString(stmt));
 
     }
 

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/alter/MySqlAlterTable_refactor_test.java
Patch:
@@ -96,7 +96,7 @@ public void test_0() throws Exception {
                         "\tRENAME TO tb2,\n" +
                         "\tWITHOUT VALIDATION,\n" +
                         "\tORDER BY a, b, c,\n" +
-                        "\tAUTO_INCREMENT = 1 AVG_ROW_LENGTH = 1 CHARACTER SET = utf8 CHECKSUM = 0 COLLATE = utf8_unicode_ci COMMENT = 'hehe' COMPRESSION = 'LZ4' CONNECTION = 'conn' COLLATE = 'path' DELAY_KEY_WRITE = 1 ENCRYPTION = 'N' ENGINE = innodb INSERT_METHOD = no KEY_BLOCK_SIZE = 32 MAX_ROWS = 999 MIN_ROWS = 1 PACK_KEYS = DEFAULT PASSWORD = 'psw' ROW_FORMAT = dynamic STATS_AUTO_RECALC = DEFAULT STATS_PERSISTENT = DEFAULT STATS_SAMPLE_PAGES = 10 TABLESPACE = `tbs_name` STORAGE memory UNION = (tb1, tb2, tb3) AUTO_INCREMENT = 1",
+                        "\tAUTO_INCREMENT = 1 AVG_ROW_LENGTH = 1 CHARACTER SET = utf8 CHECKSUM = 0 COLLATE = utf8_unicode_ci COMMENT = 'hehe' COMPRESSION = 'LZ4' CONNECTION = 'conn' COLLATE = 'path' DELAY_KEY_WRITE = 1 ENCRYPTION = 'N' ENGINE = innodb INSERT_METHOD = no KEY_BLOCK_SIZE = 32 MAX_ROWS = 999 MIN_ROWS = 1 PACK_KEYS = DEFAULT PASSWORD = 'psw' ROW_FORMAT = dynamic STATS_AUTO_RECALC = DEFAULT STATS_PERSISTENT = DEFAULT STATS_SAMPLE_PAGES = 10 TABLESPACE `tbs_name` STORAGE memory UNION = (tb1, tb2, tb3) AUTO_INCREMENT = 1",
                 SQLUtils.toMySqlString(statementList.get(0)));
     }
 

File: druid-spring-boot-3-starter/src/main/java/com/alibaba/druid/spring/boot3/autoconfigure/DruidDataSourceWrapper.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.alibaba.druid.filter.Filter;
 import com.alibaba.druid.pool.DruidDataSource;
-
 import org.springframework.beans.factory.DisposableBean;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceWrapper.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.alibaba.druid.filter.Filter;
 import com.alibaba.druid.pool.DruidDataSource;
-
 import org.springframework.beans.factory.DisposableBean;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;

File: core/src/main/java/com/alibaba/druid/util/ConcurrentLruCache.java
Patch:
@@ -91,7 +91,6 @@ public void forEach(BiConsumer<K, V> action) {
         this.cache.forEach((k, kvNode) -> action.accept(k, kvNode.getValue()));
     }
 
-
     private void processRead(Node<K, V> node) {
         boolean drainRequested = this.readOperations.recordRead(node);
         final DrainStatus status = this.drainStatus.get();

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1503,7 +1503,7 @@ public DruidPooledConnection getConnectionDirect(long maxWaitMillis) throws SQLE
             try {
                 poolableConnection = getConnectionInternal(maxWaitMillis);
             } catch (GetConnectionTimeoutException ex) {
-                if (notFullTimeoutRetryCnt <= this.notFullTimeoutRetryCount && !isFull()) {
+                if (notFullTimeoutRetryCnt < this.notFullTimeoutRetryCount && !isFull()) {
                     notFullTimeoutRetryCnt++;
                     if (LOG.isWarnEnabled()) {
                         LOG.warn("get connection timeout retry : " + notFullTimeoutRetryCnt);

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/OraclePivotClauseTest.java
Patch:
@@ -29,7 +29,7 @@ public void test_0() throws Exception {
 
         String expected = "SELECT *\n" +
                 "FROM pivot_table\n" +
-                "UNPIVOT (yearly_total FOR order_mode IN (store AS \"direct\", internet AS \"online\"))\n" +
+                "UNPIVOT (yearly_total FOR order_mode IN (store AS 'direct', internet AS 'online'))\n" +
                 "ORDER BY year, order_mode;";
 
         OracleStatementParser parser = new OracleStatementParser(sql);

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest10.java
Patch:
@@ -40,12 +40,12 @@ public void test_0() throws Exception {
         String result_lcase = SQLUtils.toOracleString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
         Assert.assertEquals("SELECT *\n" +
                 "FROM pivot_table\n" +
-                "UNPIVOT INCLUDE NULLS (yearly_total FOR order_mode IN (store AS \"direct\", internet AS \"online\"))\n" +
+                "UNPIVOT INCLUDE NULLS (yearly_total FOR order_mode IN (store AS 'direct', internet AS 'online'))\n" +
                 "ORDER BY year, order_mode;", result);
 
         Assert.assertEquals("select *\n" +
                 "from pivot_table\n" +
-                "unpivot include nulls (yearly_total for order_mode in (store as \"direct\", internet as \"online\"))\n" +
+                "unpivot include nulls (yearly_total for order_mode in (store as 'direct', internet as 'online'))\n" +
                 "order by year, order_mode;", result_lcase);
 
         Assert.assertEquals(1, statementList.size());

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/SQLUtilsTest.java
Patch:
@@ -39,7 +39,7 @@ public void test_format_1() throws Exception {
     }
 
     public void test_format_2() throws Exception {
-        String sql = "begin\n"// 
+        String sql = "begin\n"//
                 + " if (a=10) then\n" + " null;\n" + " else\n" + " null;\n" + " end if;\n" + "end;";
         Assert.assertEquals("BEGIN"
                 + "\n\tIF a = 10 THEN"
@@ -59,7 +59,7 @@ public void test_format_3() throws Exception {
                 "\tAND lottery_notice_issue <= 2014066\n" +
                 "UNION ALL\n" +
                 "SELECT NULL, NULL, NULL, NULL, NULL\n" +
-                "\t, NULL# and lottery_notice_issue>=2014062 order by lottery_notice_issue desc";
+                "\t, NULL # and lottery_notice_issue>=2014062 order by lottery_notice_issue desc";
         Assert.assertEquals(expected, formattedSql);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -293,6 +293,9 @@ public SQLSelectQuery query(SQLObject parent, boolean acceptUnion) {
 
         parseGroupBy(queryBlock);
 
+        // connect by /  start 语法可能在group by之后，因此再次调用此函数
+        parseHierachical(queryBlock);
+
         parseModelClause(queryBlock);
 
         parseFetchClause(queryBlock);

File: core/src/test/java/com/alibaba/druid/bvt/sql/hive/HiveCreateTableTest_24.java
Patch:
@@ -82,6 +82,6 @@ public void test_1_error() throws Exception {
             error = ex;
         }
         assertNotNull(error);
-        assertEquals("syntax error, expect FIELDS, pos 131, line 2, column 88, token IDENTIFIER field", error.getMessage());
+        assertEquals("syntax error, expect FIELDS, pos 131, line 2, column 87, token IDENTIFIER field", error.getMessage());
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest108_error.java
Patch:
@@ -22,6 +22,6 @@ public void test_0() throws Exception {
             error = ex;
         }
         assertNotNull(error);
-        assertEquals("illegal name, pos 31, line 3, column 2, token DELETE", error.getMessage());
+        assertEquals("illegal name, pos 31, line 3, column 1, token DELETE", error.getMessage());
     }
 }
\ No newline at end of file

File: core/src/main/java/com/alibaba/druid/stat/DruidDataSourceStatManager.java
Patch:
@@ -114,7 +114,7 @@ static Map<Object, ObjectName> getInstances0() {
 
         if (instances == null) {
             synchronized (properties) {
-                instances = (IdentityHashMap<Object, ObjectName>) properties.get(SYS_PROP_INSTANCES);
+                instances = (Map<Object, ObjectName>) properties.get(SYS_PROP_INSTANCES);
 
                 if (instances == null) {
                     instances = Collections.synchronizedMap(new IdentityHashMap<Object, ObjectName>());

File: core/src/main/java/com/alibaba/druid/util/ConcurrentLruCache.java
Patch:
@@ -116,4 +116,4 @@ public int size() {
         return this.size.get();
     }
 
-}
\ No newline at end of file
+}

File: core/src/test/java/com/alibaba/druid/util/ConcurrentLruCacheTest.java
Patch:
@@ -41,4 +41,4 @@ public void testConcurrentLruCache() {
         Assert.assertEquals(0, cache.size());
 
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/com/alibaba/druid/util/ConcurrentLruCache.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Simple LRU (Least Recently Used) cache, bounded by a specified cache limit.
  *
- * @author ishenjianeng [ishenjianeng@qq.com]
+ * @author shenjianeng [ishenjianeng@qq.com]
  */
 public class ConcurrentLruCache<K, V> {
 

File: core/src/test/java/com/alibaba/druid/util/ConcurrentLruCacheTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Assert;
 
 /**
- * @author ishenjianeng [ishenjianeng@qq.com]
+ * @author shenjianeng [ishenjianeng@qq.com]
  */
 public class ConcurrentLruCacheTest extends TestCase {
 

File: core/src/main/java/com/alibaba/druid/filter/encoding/CharsetConvert.java
Patch:
@@ -42,7 +42,7 @@ public CharsetConvert(String clientEncoding, String serverEncoding) {
      *
      * @param s String
      * @return String
-     * @throws UnsupportedEncodingException
+     * @throws UnsupportedEncodingException UnsupportedEncodingException
      */
     public String encode(String s) throws UnsupportedEncodingException {
         if (enable && !isEmpty(s)) {
@@ -56,7 +56,7 @@ public String encode(String s) throws UnsupportedEncodingException {
      *
      * @param s String
      * @return String
-     * @throws UnsupportedEncodingException
+     * @throws UnsupportedEncodingException UnsupportedEncodingException
      */
     public String decode(String s) throws UnsupportedEncodingException {
         if (enable && !isEmpty(s)) {

File: core/src/main/java/com/alibaba/druid/filter/mysql8datetime/MySQL8DateTimeResultSetMetaData.java
Patch:
@@ -136,9 +136,9 @@ public boolean isDefinitelyWritable(int column) throws SQLException {
      *  8.0.24及以上版本jdbc实现改为
      * DATETIME("DATETIME", Types.TIMESTAMP, LocalDateTime.class, 0, MysqlType.IS_NOT_DECIMAL, 26L, "[(fsp)]"),
      * @param column 列的索引位
-     * @return
+     * @return column class name
      * @see java.sql.ResultSetMetaData#getColumnClassName(int)
-     * @throws SQLException
+     * @throws SQLException SQLException
      */
     @Override
     public String getColumnClassName(int column) throws SQLException {

File: core/src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -821,7 +821,7 @@ public int getNumTestsPerEvictionRun() {
     }
 
     /**
-     * @param numTestsPerEvictionRun
+     * @param numTestsPerEvictionRun number of tests per eviction run
      */
     @Deprecated
     public void setNumTestsPerEvictionRun(int numTestsPerEvictionRun) {

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1594,7 +1594,7 @@ public DruidPooledConnection getConnectionDirect(long maxWaitMillis) throws SQLE
     /**
      * 抛弃连接，不进行回收，而是抛弃
      *
-     * @param conn
+     * @param conn sql connection
      * @deprecated
      */
     @Override

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLogger.java
Patch:
@@ -27,7 +27,7 @@ public interface DruidDataSourceStatLogger {
     void log(DruidDataSourceStatValue statValue);
 
     /**
-     * @param properties
+     * @param properties properties
      * @since 0.2.21
      */
     void configFromProperties(Properties properties);

File: core/src/main/java/com/alibaba/druid/pool/ValidConnectionChecker.java
Patch:
@@ -22,7 +22,7 @@ public interface ValidConnectionChecker {
     boolean isValidConnection(Connection c, String query, int validationQueryTimeout) throws Exception;
 
     /**
-     * @param properties
+     * @param properties properties
      * @since 0.2.21
      */
     void configFromProperties(Properties properties);

File: core/src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -28,7 +28,7 @@
 public class MySqlValidConnectionChecker extends ValidConnectionCheckerAdapter implements ValidConnectionChecker, Serializable {
     public static final int DEFAULT_VALIDATION_QUERY_TIMEOUT = 1;
     /**
-     * https://dev.mysql.com/doc/connectors/en/connector-j-usagenotes-j2ee-concepts-connection-pooling.html
+     * @see <a href="https://dev.mysql.com/doc/connectors/en/connector-j-usagenotes-j2ee-concepts-connection-pooling.html">Connection Pooling with Connector/J</a>
      * <p>
      * specify a validation query in your connection pool that starts with {@literal /}* ping *{@literal /}.
      * Note that the syntax must be exactly as specified. This will cause the driver send a ping to the server

File: core/src/main/java/com/alibaba/druid/pool/vendor/PhoenixExceptionSorter.java
Patch:
@@ -28,8 +28,8 @@ public class PhoenixExceptionSorter implements ExceptionSorter {
     /**
      * 解决phoenix 的错误 --Connection is null or closed
      *
-     * @param e the exception
-     * @return
+     * @param e exception
+     * @return is fatal exception
      */
     @Override
     public boolean isExceptionFatal(SQLException e) {

File: core/src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -596,8 +596,8 @@ private static void clearOrderBy(SQLSelectQuery query) {
     }
 
     /**
-     * @param sql
-     * @param dbType
+     * @param sql sql
+     * @param dbType dbType
      * @return if not exists limit, return -1;
      */
     public static int getLimit(String sql, DbType dbType) {

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -790,8 +790,8 @@ public static boolean isIdentifierChar(char c) {
     /**
      * employee.code=:employee.code 解析异常
      * 修复:变量名支持含符号.
-     * @param c
-     * @return
+     * @param c char
+     * @return is identifier char for variable
      */
     public static boolean isIdentifierCharForVariable(char c) {
         if (c == '.') {

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlSelectIntoParser.java
Patch:
@@ -178,7 +178,7 @@ public SQLSelectQuery query(SQLObject parent, boolean acceptUnion) {
     /**
      * parser the select into arguments
      *
-     * @return
+     * @return arg SQLExpr list
      */
     protected List<SQLExpr> parseIntoArgs() {
         List<SQLExpr> args = new ArrayList<SQLExpr>();

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -9272,7 +9272,7 @@ public MySqlRepeatStatement parseRepeat() {
     /**
      * parse repeat statement with label
      *
-     * @param label
+     * @param label label
      */
     public MySqlRepeatStatement parseRepeat(String label) {
         MySqlRepeatStatement repeatStmt = new MySqlRepeatStatement();

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -5110,7 +5110,7 @@ else if (lexer.identifierEquals(FnvHash.Constants.USING)) {
     /**
      * parse cursor open statement
      *
-     * @return
+     * @return SQL open statement
      */
     public SQLOpenStatement parseOpen() {
         SQLOpenStatement stmt = new SQLOpenStatement();

File: core/src/main/java/com/alibaba/druid/sql/visitor/functions/Replace.java
Patch:
@@ -26,7 +26,7 @@
 import static com.alibaba.druid.sql.visitor.SQLEvalVisitor.EVAL_VALUE;
 
 /**
- * @auther lizongbo
+ * @author lizongbo
  * @see <a href="https://github.com/alibaba/druid/issues/5477">Issue来源</a>
  * @see <a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_replace">mysql replace函数</a>
  */

File: core/src/main/java/com/alibaba/druid/stat/DruidStatManagerFacade.java
Patch:
@@ -196,7 +196,7 @@ public Map<String, Object> getWallStatMap(Integer dataSourceId) {
     }
 
     /**
-     * @return
+     * @return merged wall states
      * @deprecated
      */
     public static Map mergWallStat(Map mapA, Map mapB) {

File: core/src/main/java/com/alibaba/druid/support/calcite/CalciteMySqlNodeVisitor.java
Patch:
@@ -1631,8 +1631,8 @@ private SqlNodeList convertTDDLHint(TDDLHint hint) {
      * If there are multiple VALUES, and all values in VALUES CLAUSE are literal,
      * convert the value clauses to a single value clause.
      *
-     * @param valuesClauseList
-     * @return
+     * @param valuesClauseList values clause list
+     * @return convert to single values if need
      */
     public static List<SQLInsertStatement.ValuesClause> convertToSingleValuesIfNeed(List<SQLInsertStatement.ValuesClause> valuesClauseList) {
         if (valuesClauseList.size() <= 1) {

File: core/src/main/java/com/alibaba/druid/support/ibatis/IbatisUtils.java
Patch:
@@ -69,7 +69,7 @@ public static SqlMapExecutor setClientImpl(SqlMapExecutor session, SqlMapClientI
     /**
      * 通过反射的方式得到id，能够兼容2.3.0和2.3.4
      *
-     * @return
+     * @return id of statement
      */
     protected static String getId(Object statement) {
         try {
@@ -94,7 +94,7 @@ protected static String getId(Object statement) {
     /**
      * 通过反射的方式得到resource，能够兼容2.3.0和2.3.4
      *
-     * @return
+     * @return resource of statement
      */
     protected static String getResource(Object statement) {
         try {

File: core/src/main/java/com/alibaba/druid/support/logging/JakartaCommonsLoggingImpl.java
Patch:
@@ -27,7 +27,7 @@ public class JakartaCommonsLoggingImpl implements com.alibaba.druid.support.logg
     private int debugCount;
 
     /**
-     * @param log
+     * @param log logger
      * @since 0.2.1
      */
     public JakartaCommonsLoggingImpl(Log log) {

File: core/src/main/java/com/alibaba/druid/support/logging/Log4j2Impl.java
Patch:
@@ -28,7 +28,7 @@ public class Log4j2Impl implements Log {
     private int debugCount;
 
     /**
-     * @param log
+     * @param log logger
      * @since 0.2.21
      */
     public Log4j2Impl(Logger log) {

File: core/src/main/java/com/alibaba/druid/support/logging/Log4jImpl.java
Patch:
@@ -29,7 +29,7 @@ public class Log4jImpl implements Log {
     private int debugCount;
 
     /**
-     * @param log
+     * @param log logger
      * @since 0.2.21
      */
     public Log4jImpl(Logger log) {

File: core/src/main/java/com/alibaba/druid/wall/WallConfig.java
Patch:
@@ -322,7 +322,7 @@ public void setNoneBaseStatementAllow(boolean noneBaseStatementAllow) {
     /**
      * allow mysql describe statement
      *
-     * @return
+     * @return true if allow describe
      * @since 0.2.10
      */
     public boolean isDescribeAllow() {
@@ -683,7 +683,7 @@ public static enum StatementType {
         /**
          * 返回resultset隐藏列名
          *
-         * @param tableName
+         * @param tableName tableName
          */
         String getHiddenColumn(String tableName);
 

File: core/src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -165,8 +165,8 @@ Properties loadPropertyFromConfigFile(Properties connectionProperties) {
             Properties info = loadConfig(configFile);
 
             if (info == null) {
-                throw new IllegalArgumentException("Cannot load remote config file from the [config.file=" + configFile
-                        + "].");
+                throw new IllegalArgumentException(
+                        "Cannot load remote config file from the [config.file=" + configFile + "].");
             }
 
             return info;

File: core/src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxyImpl.java
Patch:
@@ -484,7 +484,7 @@ public List<String> getBatchSqlList() {
     @Override
     public String getBatchSql() {
         List<String> sqlList = getBatchSqlList();
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         for (String item : sqlList) {
             if (buf.length() > 0) {
                 buf.append("\n;\n");

File: core/src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -476,11 +476,11 @@ public static String toSQLString(
         return out.toString();
     }
 
-    public static SQLASTOutputVisitor createOutputVisitor(Appendable out, DbType dbType) {
+    public static SQLASTOutputVisitor createOutputVisitor(StringBuilder out, DbType dbType) {
         return createFormatOutputVisitor(out, null, dbType);
     }
 
-    public static SQLASTOutputVisitor createFormatOutputVisitor(Appendable out,
+    public static SQLASTOutputVisitor createFormatOutputVisitor(StringBuilder out,
                                                                 List<SQLStatement> statementList,
                                                                 DbType dbType) {
         if (dbType == null) {

File: core/src/main/java/com/alibaba/druid/sql/ast/SQLObject.java
Patch:
@@ -39,9 +39,7 @@ public interface SQLObject {
 
     Map<String, Object> getAttributesDirect();
 
-    void output(StringBuffer buf);
-
-    void output(Appendable buf);
+    void output(StringBuilder buf);
 
     void addBeforeComment(String comment);
 

File: core/src/main/java/com/alibaba/druid/sql/ast/expr/SQLCharExpr.java
Patch:
@@ -40,7 +40,7 @@ public SQLCharExpr(String text, SQLObject parent) {
         this.parent = parent;
     }
 
-    public void output(Appendable buf) {
+    public void output(StringBuilder buf) {
         this.accept(new SQLASTOutputVisitor(buf));
     }
 

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectStatement.java
Patch:
@@ -56,7 +56,7 @@ public void setSelect(SQLSelect select) {
         this.select = select;
     }
 
-    public void output(Appendable buf) {
+    public void output(StringBuilder buf) {
         this.select.output(buf);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/ads/visitor/AdsOutputVisitor.java
Patch:
@@ -12,15 +12,15 @@
 import java.util.List;
 
 public class AdsOutputVisitor extends SQLASTOutputVisitor implements AdsVisitor {
-    public AdsOutputVisitor(Appendable appender) {
+    public AdsOutputVisitor(StringBuilder appender) {
         super(appender);
     }
 
-    public AdsOutputVisitor(Appendable appender, DbType dbType) {
+    public AdsOutputVisitor(StringBuilder appender, DbType dbType) {
         super(appender, dbType);
     }
 
-    public AdsOutputVisitor(Appendable appender, boolean parameterized) {
+    public AdsOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/antspark/visitor/AntsparkOutputVisitor.java
Patch:
@@ -23,11 +23,11 @@
  * @version $Id: AntsparkOutputVisitor.java, v 0.1 2018年09月17日 10:40 peiheng.qph Exp $
  */
 public class AntsparkOutputVisitor extends HiveOutputVisitor implements AntsparkVisitor {
-    public AntsparkOutputVisitor(Appendable appender, DbType dbType) {
+    public AntsparkOutputVisitor(StringBuilder appender, DbType dbType) {
         super(appender, dbType);
     }
 
-    public AntsparkOutputVisitor(Appendable appender) {
+    public AntsparkOutputVisitor(StringBuilder appender) {
         super(appender);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/blink/vsitor/BlinkOutputVisitor.java
Patch:
@@ -24,15 +24,15 @@
 import java.util.List;
 
 public class BlinkOutputVisitor extends SQLASTOutputVisitor implements BlinkVisitor {
-    public BlinkOutputVisitor(Appendable appender) {
+    public BlinkOutputVisitor(StringBuilder appender) {
         super(appender);
     }
 
-    public BlinkOutputVisitor(Appendable appender, DbType dbType) {
+    public BlinkOutputVisitor(StringBuilder appender, DbType dbType) {
         super(appender, dbType);
     }
 
-    public BlinkOutputVisitor(Appendable appender, boolean parameterized) {
+    public BlinkOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/clickhouse/visitor/ClickhouseExportParameterVisitor.java
Patch:
@@ -35,7 +35,7 @@ public class ClickhouseExportParameterVisitor extends ClickhouseOutputVisitor im
     private final boolean requireParameterizedOutput;
 
     public ClickhouseExportParameterVisitor(final List<Object> parameters,
-                                            final Appendable appender,
+                                            final StringBuilder appender,
                                             final boolean wantParameterizedOutput) {
         super(appender, true);
         this.parameters = parameters;
@@ -50,7 +50,7 @@ public ClickhouseExportParameterVisitor(final List<Object> parameters) {
         this(parameters, new StringBuilder(), false);
     }
 
-    public ClickhouseExportParameterVisitor(final Appendable appender) {
+    public ClickhouseExportParameterVisitor(final StringBuilder appender) {
         this(new ArrayList<Object>(), appender, true);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/clickhouse/visitor/ClickhouseOutputVisitor.java
Patch:
@@ -10,15 +10,15 @@
 import java.util.List;
 
 public class ClickhouseOutputVisitor extends SQLASTOutputVisitor implements ClickhouseVisitor {
-    public ClickhouseOutputVisitor(Appendable appender) {
+    public ClickhouseOutputVisitor(StringBuilder appender) {
         super(appender, DbType.clickhouse);
     }
 
-    public ClickhouseOutputVisitor(Appendable appender, DbType dbType) {
+    public ClickhouseOutputVisitor(StringBuilder appender, DbType dbType) {
         super(appender, dbType);
     }
 
-    public ClickhouseOutputVisitor(Appendable appender, boolean parameterized) {
+    public ClickhouseOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/db2/ast/stmt/DB2SelectQueryBlock.java
Patch:
@@ -93,7 +93,7 @@ public void limit(int rowCount, int offset) {
         }
     }
 
-    public void output(Appendable buf) {
+    public void output(StringBuilder buf) {
         this.accept(
                 new DB2OutputVisitor(buf)
         );

File: core/src/main/java/com/alibaba/druid/sql/dialect/db2/visitor/DB2ExportParameterVisitor.java
Patch:
@@ -36,7 +36,7 @@ public class DB2ExportParameterVisitor extends DB2OutputVisitor implements Expor
     private final boolean requireParameterizedOutput;
 
     public DB2ExportParameterVisitor(final List<Object> parameters,
-                                     final Appendable appender,
+                                     final StringBuilder appender,
                                      final boolean wantParameterizedOutput) {
         super(appender, true);
         this.parameters = parameters;
@@ -51,7 +51,7 @@ public DB2ExportParameterVisitor(final List<Object> parameters) {
         this(parameters, new StringBuilder(), false);
     }
 
-    public DB2ExportParameterVisitor(final Appendable appender) {
+    public DB2ExportParameterVisitor(final StringBuilder appender) {
         this(new ArrayList<Object>(), appender, true);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/db2/visitor/DB2OutputVisitor.java
Patch:
@@ -29,11 +29,11 @@
 import com.alibaba.druid.sql.visitor.SQLASTOutputVisitor;
 
 public class DB2OutputVisitor extends SQLASTOutputVisitor implements DB2ASTVisitor {
-    public DB2OutputVisitor(Appendable appender) {
+    public DB2OutputVisitor(StringBuilder appender) {
         super(appender, DbType.db2);
     }
 
-    public DB2OutputVisitor(Appendable appender, boolean parameterized) {
+    public DB2OutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
         this.dbType = DbType.db2;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/h2/visitor/H2OutputVisitor.java
Patch:
@@ -34,15 +34,15 @@
 public class H2OutputVisitor extends SQLASTOutputVisitor implements H2ASTVisitor {
     private static final Log LOG = LogFactory.getLog(H2OutputVisitor.class);
 
-    public H2OutputVisitor(Appendable appender) {
+    public H2OutputVisitor(StringBuilder appender) {
         super(appender, DbType.h2);
     }
 
-    public H2OutputVisitor(Appendable appender, DbType dbType) {
+    public H2OutputVisitor(StringBuilder appender, DbType dbType) {
         super(appender, dbType);
     }
 
-    public H2OutputVisitor(Appendable appender, boolean parameterized) {
+    public H2OutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
         dbType = DbType.h2;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveExprParser.java
Patch:
@@ -80,13 +80,13 @@ public SQLExpr primaryRest(SQLExpr expr) {
                 return primaryRest(array);
             case LITERAL_CHARS:
                 if (expr instanceof SQLCharExpr) {
-                    String text2 = ((SQLCharExpr) expr).getText();
+                    StringBuilder text2 = new StringBuilder(((SQLCharExpr) expr).getText());
                     do {
                         String chars = lexer.stringVal();
-                        text2 += chars;
+                        text2.append(chars);
                         lexer.nextToken();
                     } while (lexer.token() == Token.LITERAL_CHARS || lexer.token() == Token.LITERAL_ALIAS);
-                    expr = new SQLCharExpr(text2);
+                    expr = new SQLCharExpr(text2.toString());
                 }
                 break;
             case IDENTIFIER:

File: core/src/main/java/com/alibaba/druid/sql/dialect/hive/visitor/HiveOutputVisitor.java
Patch:
@@ -38,15 +38,15 @@ public class HiveOutputVisitor extends SQLASTOutputVisitor implements HiveASTVis
         super.quote = '`';
     }
 
-    public HiveOutputVisitor(Appendable appender) {
+    public HiveOutputVisitor(StringBuilder appender) {
         super(appender, DbType.hive);
     }
 
-    public HiveOutputVisitor(Appendable appender, DbType dbType) {
+    public HiveOutputVisitor(StringBuilder appender, DbType dbType) {
         super(appender, dbType);
     }
 
-    public HiveOutputVisitor(Appendable appender, boolean parameterized) {
+    public HiveOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
         dbType = DbType.hive;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlCreateTableStatement.java
Patch:
@@ -260,7 +260,7 @@ public void simplify() {
         super.simplify();
     }
 
-    public void showCoumns(Appendable out) throws IOException {
+    public void showCoumns(StringBuilder out) throws IOException {
         this.accept(new MySqlShowColumnOutpuVisitor(out));
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -648,13 +648,13 @@ public final SQLExpr primaryRest(SQLExpr expr) {
                     return primaryRest(expr);
                 }
             } else if (expr instanceof SQLCharExpr) {
-                String text2 = ((SQLCharExpr) expr).getText();
+                StringBuilder text2 = new StringBuilder(((SQLCharExpr) expr).getText());
                 do {
                     String chars = lexer.stringVal();
-                    text2 += chars;
+                    text2.append(chars);
                     lexer.nextToken();
                 } while (lexer.token() == Token.LITERAL_CHARS || lexer.token() == Token.LITERAL_ALIAS);
-                expr = new SQLCharExpr(text2);
+                expr = new SQLCharExpr(text2.toString());
             } else if (expr instanceof SQLVariantRefExpr) {
                 SQLMethodInvokeExpr concat = new SQLMethodInvokeExpr("CONCAT");
                 concat.addArgument(expr);

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlExportParameterVisitor.java
Patch:
@@ -36,7 +36,7 @@ public class MySqlExportParameterVisitor extends MySqlOutputVisitor implements E
      */
     private boolean requireParameterizedOutput;
 
-    public MySqlExportParameterVisitor(List<Object> parameters, Appendable appender, boolean wantParameterizedOutput) {
+    public MySqlExportParameterVisitor(List<Object> parameters, StringBuilder appender, boolean wantParameterizedOutput) {
         super(appender, true);
         this.parameters = parameters;
         this.requireParameterizedOutput = wantParameterizedOutput;
@@ -50,7 +50,7 @@ public MySqlExportParameterVisitor(List<Object> parameters) {
         this(parameters, null, false);
     }
 
-    public MySqlExportParameterVisitor(final Appendable appender) {
+    public MySqlExportParameterVisitor(final StringBuilder appender) {
         this(new ArrayList<Object>(), appender, true);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/OracleToMySqlOutputVisitor.java
Patch:
@@ -27,11 +27,11 @@
  * Created by wenshao on 16/07/2017.
  */
 public class OracleToMySqlOutputVisitor extends MySqlOutputVisitor implements OracleASTVisitor {
-    public OracleToMySqlOutputVisitor(Appendable appender) {
+    public OracleToMySqlOutputVisitor(StringBuilder appender) {
         super(appender);
     }
 
-    public OracleToMySqlOutputVisitor(Appendable appender, boolean parameterized) {
+    public OracleToMySqlOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/odps/visitor/OdpsOutputVisitor.java
Patch:
@@ -51,7 +51,7 @@ public class OdpsOutputVisitor extends HiveOutputVisitor implements OdpsASTVisit
         groupItemSingleLine = true;
     }
 
-    public OdpsOutputVisitor(Appendable appender) {
+    public OdpsOutputVisitor(StringBuilder appender) {
         super(appender, DbType.odps);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleExportParameterVisitor.java
Patch:
@@ -35,7 +35,7 @@ public class OracleExportParameterVisitor extends OracleParameterizedOutputVisit
     private final boolean requireParameterizedOutput;
 
     public OracleExportParameterVisitor(List<Object> parameters,
-                                        Appendable appender,
+                                        StringBuilder appender,
                                         final boolean wantParameterizedOutput) {
         super(appender, false);
         this.parameters = parameters;
@@ -50,7 +50,7 @@ public OracleExportParameterVisitor(List<Object> parameters) {
         this(parameters, new StringBuilder(), false);
     }
 
-    public OracleExportParameterVisitor(final Appendable appender) {
+    public OracleExportParameterVisitor(final StringBuilder appender) {
         this(new ArrayList<Object>(), appender, true);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -47,11 +47,11 @@ public class OracleOutputVisitor extends SQLASTOutputVisitor implements OracleAS
         this.dbType = DbType.oracle;
     }
 
-    public OracleOutputVisitor(Appendable appender) {
+    public OracleOutputVisitor(StringBuilder appender) {
         this(appender, true);
     }
 
-    public OracleOutputVisitor(Appendable appender, boolean printPostSemi) {
+    public OracleOutputVisitor(StringBuilder appender, boolean printPostSemi) {
         super(appender);
         this.printPostSemi = printPostSemi;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleParameterizedOutputVisitor.java
Patch:
@@ -25,12 +25,12 @@ public OracleParameterizedOutputVisitor() {
         this.config(VisitorFeature.OutputParameterized, true);
     }
 
-    public OracleParameterizedOutputVisitor(Appendable appender) {
+    public OracleParameterizedOutputVisitor(StringBuilder appender) {
         super(appender);
         this.config(VisitorFeature.OutputParameterized, true);
     }
 
-    public OracleParameterizedOutputVisitor(Appendable appender, boolean printPostSemi) {
+    public OracleParameterizedOutputVisitor(StringBuilder appender, boolean printPostSemi) {
         super(appender, printPostSemi);
         this.config(VisitorFeature.OutputParameterized, true);
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleToMySqlOutputVisitor.java
Patch:
@@ -25,11 +25,11 @@
 import com.alibaba.druid.util.FnvHash;
 
 public class OracleToMySqlOutputVisitor extends OracleOutputVisitor {
-    public OracleToMySqlOutputVisitor(Appendable appender, boolean printPostSemi) {
+    public OracleToMySqlOutputVisitor(StringBuilder appender, boolean printPostSemi) {
         super(appender, printPostSemi);
     }
 
-    public OracleToMySqlOutputVisitor(Appendable appender) {
+    public OracleToMySqlOutputVisitor(StringBuilder appender) {
         super(appender);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/oscar/visitor/OscarOutputVisitor.java
Patch:
@@ -40,12 +40,12 @@
 import java.util.Set;
 
 public class OscarOutputVisitor extends SQLASTOutputVisitor implements OscarASTVisitor, OracleASTVisitor {
-    public OscarOutputVisitor(Appendable appender) {
+    public OscarOutputVisitor(StringBuilder appender) {
         super(appender);
         this.dbType = DbType.oscar;
     }
 
-    public OscarOutputVisitor(Appendable appender, boolean parameterized) {
+    public OscarOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
         this.dbType = DbType.oscar;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/oscar/visitor/OscarPermissionOutputVisitor.java
Patch:
@@ -27,12 +27,12 @@
 import java.util.List;
 
 public class OscarPermissionOutputVisitor extends OscarOutputVisitor {
-    public OscarPermissionOutputVisitor(Appendable appender) {
+    public OscarPermissionOutputVisitor(StringBuilder appender) {
         super(appender);
         this.dbType = DbType.oscar;
     }
 
-    public OscarPermissionOutputVisitor(Appendable appender, boolean parameterized) {
+    public OscarPermissionOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
         this.dbType = DbType.oscar;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/phoenix/visitor/PhoenixOutputVisitor.java
Patch:
@@ -21,11 +21,11 @@
  * Created by wenshao on 16/9/13.
  */
 public class PhoenixOutputVisitor extends SQLASTOutputVisitor implements PhoenixASTVisitor {
-    public PhoenixOutputVisitor(Appendable appender) {
+    public PhoenixOutputVisitor(StringBuilder appender) {
         super(appender);
     }
 
-    public PhoenixOutputVisitor(Appendable appender, boolean parameterized) {
+    public PhoenixOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
     }
 }

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGExportParameterVisitor.java
Patch:
@@ -35,7 +35,7 @@ public class PGExportParameterVisitor extends PGOutputVisitor implements ExportP
     private final boolean requireParameterizedOutput;
 
     public PGExportParameterVisitor(final List<Object> parameters,
-                                    final Appendable appender,
+                                    final StringBuilder appender,
                                     final boolean wantParameterizedOutput) {
         super(appender, true);
         this.parameters = parameters;
@@ -50,7 +50,7 @@ public PGExportParameterVisitor(final List<Object> parameters) {
         this(parameters, new StringBuilder(), false);
     }
 
-    public PGExportParameterVisitor(final Appendable appender) {
+    public PGExportParameterVisitor(final StringBuilder appender) {
         this(new ArrayList<Object>(), appender, true);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGOutputVisitor.java
Patch:
@@ -40,12 +40,12 @@
 import java.util.Set;
 
 public class PGOutputVisitor extends SQLASTOutputVisitor implements PGASTVisitor, OracleASTVisitor {
-    public PGOutputVisitor(Appendable appender) {
+    public PGOutputVisitor(StringBuilder appender) {
         super(appender);
         this.dbType = DbType.postgresql;
     }
 
-    public PGOutputVisitor(Appendable appender, boolean parameterized) {
+    public PGOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
         this.dbType = DbType.postgresql;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/presto/visitor/PrestoOutputVisitor.java
Patch:
@@ -32,11 +32,11 @@
  * @since 2022-01-07
  */
 public class PrestoOutputVisitor extends SQLASTOutputVisitor implements PrestoVisitor {
-    public PrestoOutputVisitor(Appendable appender) {
+    public PrestoOutputVisitor(StringBuilder appender) {
         super(appender);
     }
 
-    public PrestoOutputVisitor(Appendable appender, boolean parameterized) {
+    public PrestoOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/sqlserver/visitor/MSSQLServerExportParameterVisitor.java
Patch:
@@ -34,7 +34,7 @@ public class MSSQLServerExportParameterVisitor extends SQLServerOutputVisitor im
     private final boolean requireParameterizedOutput;
 
     public MSSQLServerExportParameterVisitor(final List<Object> parameters,
-                                             final Appendable appender,
+                                             final StringBuilder appender,
                                              final boolean wantParameterizedOutput) {
         super(appender, true);
         this.parameters = parameters;
@@ -49,7 +49,7 @@ public MSSQLServerExportParameterVisitor(final List<Object> parameters) {
         this(parameters, new StringBuilder(), false);
     }
 
-    public MSSQLServerExportParameterVisitor(final Appendable appender) {
+    public MSSQLServerExportParameterVisitor(final StringBuilder appender) {
         this(new ArrayList<Object>(), appender, true);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/sqlserver/visitor/SQLServerOutputVisitor.java
Patch:
@@ -33,11 +33,11 @@
 import java.util.List;
 
 public class SQLServerOutputVisitor extends SQLASTOutputVisitor implements SQLServerASTVisitor {
-    public SQLServerOutputVisitor(Appendable appender) {
+    public SQLServerOutputVisitor(StringBuilder appender) {
         super(appender, DbType.sqlserver);
     }
 
-    public SQLServerOutputVisitor(Appendable appender, boolean parameterized) {
+    public SQLServerOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
         this.dbType = DbType.sqlserver;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/starrocks/ast/expr/StarRocksCharExpr.java
Patch:
@@ -43,7 +43,7 @@ public void accept0(StarRocksASTVisitor visitor) {
     }
 
     public String toString() {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         output(buf);
         return buf.toString();
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/starrocks/visitor/StarRocksOutputVisitor.java
Patch:
@@ -25,15 +25,15 @@ public class StarRocksOutputVisitor extends SQLASTOutputVisitor implements StarR
         this.quote = '`';
     }
 
-    public StarRocksOutputVisitor(Appendable appender) {
+    public StarRocksOutputVisitor(StringBuilder appender) {
         super(appender);
     }
 
-    public StarRocksOutputVisitor(Appendable appender, DbType dbType) {
+    public StarRocksOutputVisitor(StringBuilder appender, DbType dbType) {
         super(appender, dbType);
     }
 
-    public StarRocksOutputVisitor(Appendable appender, boolean parameterized) {
+    public StarRocksOutputVisitor(StringBuilder appender, boolean parameterized) {
         super(appender, parameterized);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -3064,7 +3064,7 @@ public final String stringVal() {
         return stringVal;
     }
 
-    private final void stringVal(StringBuffer out) {
+    private final void stringVal(StringBuilder out) {
         if (stringVal != null) {
             out.append(stringVal);
             return;
@@ -3415,7 +3415,7 @@ public static String parameterize(String sql, DbType dbType) {
 
         lexer.nextToken();
 
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
 
         for_:
         for (; ; ) {

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -495,7 +495,7 @@ public static String addBackQuote(String sql, DbType dbType) {
             return sql;
         }
         SQLStatementParser parser = createSQLStatementParser(sql, dbType);
-        StringBuffer buf = new StringBuffer(sql.length() + 20);
+        StringBuilder buf = new StringBuilder(sql.length() + 20);
         SQLASTOutputVisitor out = SQLUtils.createOutputVisitor(buf, DbType.mysql);
         out.config(VisitorFeature.OutputNameQuote, true);
 

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -4926,11 +4926,9 @@ public SQLExplainStatement parseExplain() {
 
                 if (lexer.identifierEquals("FORMAT")) {
                     lexer.nextToken();
-                    String type = "FORMAT " + lexer.stringVal;
                     lexer.nextToken();
                 } else if (lexer.identifierEquals("TYPE")) {
                     lexer.nextToken();
-                    String type = "TYPE " + lexer.stringVal;
                     lexer.nextToken();
                 }
 

File: core/src/main/java/com/alibaba/druid/sql/visitor/ExportParameterVisitorUtils.java
Patch:
@@ -34,7 +34,7 @@ private ExportParameterVisitorUtils() {
         super();
     }
 
-    public static ExportParameterVisitor createExportParameterVisitor(Appendable out, DbType dbType) {
+    public static ExportParameterVisitor createExportParameterVisitor(StringBuilder out, DbType dbType) {
         if (dbType == null) {
             dbType = DbType.other;
         }

File: core/src/main/java/com/alibaba/druid/sql/visitor/ExportParameterizedOutputVisitor.java
Patch:
@@ -25,7 +25,7 @@ public class ExportParameterizedOutputVisitor extends SQLASTOutputVisitor implem
     private final boolean requireParameterizedOutput;
 
     public ExportParameterizedOutputVisitor(final List<Object> parameters,
-                                            final Appendable appender,
+                                            final StringBuilder appender,
                                             final boolean wantParameterizedOutput) {
         super(appender, true);
         this.parameters = parameters;
@@ -40,7 +40,7 @@ public ExportParameterizedOutputVisitor(final List<Object> parameters) {
         this(parameters, new StringBuilder(), false);
     }
 
-    public ExportParameterizedOutputVisitor(final Appendable appender) {
+    public ExportParameterizedOutputVisitor(final StringBuilder appender) {
         this(new ArrayList<Object>(), appender, true);
     }
 

File: core/src/main/java/com/alibaba/druid/sql/visitor/ParameterizedOutputVisitorUtils.java
Patch:
@@ -396,7 +396,7 @@ public static SQLStatement parameterizeOf(String sql, List<Object> outParameters
         }
     }
 
-    public static ParameterizedVisitor createParameterizedOutputVisitor(Appendable out, DbType dbType) {
+    public static ParameterizedVisitor createParameterizedOutputVisitor(StringBuilder out, DbType dbType) {
         if (dbType == null) {
             dbType = DbType.other;
         }

File: core/src/main/java/com/alibaba/druid/sql/visitor/functions/Char.java
Patch:
@@ -31,7 +31,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
             return SQLEvalVisitor.EVAL_ERROR;
         }
 
-        StringBuffer buf = new StringBuffer(x.getArguments().size());
+        StringBuilder buf = new StringBuilder(x.getArguments().size());
         for (SQLExpr param : x.getArguments()) {
             param.accept(visitor);
 

File: core/src/main/java/com/alibaba/druid/support/opds/udf/ExportColumns.java
Patch:
@@ -38,7 +38,7 @@ public String evaluate(String sql, String dbType) {
                 stmt.accept(visitor);
             }
 
-            StringBuffer buf = new StringBuffer();
+            StringBuilder buf = new StringBuilder();
 
             for (TableStat.Column column : visitor.getColumns()) {
                 if (buf.length() != 0) {

File: core/src/main/java/com/alibaba/druid/support/opds/udf/ExportConditionColumns.java
Patch:
@@ -39,7 +39,7 @@ public String evaluate(String sql, String dbTypeName) {
                 stmt.accept(visitor);
             }
 
-            StringBuffer buf = new StringBuffer();
+            StringBuilder buf = new StringBuilder();
 
             for (TableStat.Column column : visitor.getColumns()) {
                 if ((!column.isWhere()) && !column.isJoin()) {

File: core/src/main/java/com/alibaba/druid/support/opds/udf/ExportSelectListColumns.java
Patch:
@@ -38,7 +38,7 @@ public String evaluate(String sql, String dbType) {
                 stmt.accept(visitor);
             }
 
-            StringBuffer buf = new StringBuffer();
+            StringBuilder buf = new StringBuilder();
 
             for (TableStat.Column column : visitor.getColumns()) {
                 if (!column.isSelect()) {

File: core/src/main/java/com/alibaba/druid/support/opds/udf/ExportTables.java
Patch:
@@ -46,7 +46,7 @@ public String evaluate(String sql, String dbTypeName, boolean throwError) throws
                 stmt.accept(visitor);
             }
 
-            StringBuffer buf = new StringBuffer();
+            StringBuilder buf = new StringBuilder();
 
             for (Map.Entry<TableStat.Name, TableStat> entry : visitor.getTables().entrySet()) {
                 TableStat.Name name = entry.getKey();

File: core/src/main/java/com/alibaba/druid/support/opds/udf/SqlTypeUDF.java
Patch:
@@ -208,7 +208,7 @@ public String evaluate(String sql, String dbTypeName, boolean throwError) {
                 }
 
                 if (typeNameSet.size() > 0) {
-                    StringBuffer buf = new StringBuffer();
+                    StringBuilder buf = new StringBuilder();
                     for (String s : typeNameSet) {
                         if (buf.length() != 0) {
                             buf.append(',');

File: core/src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -886,7 +886,7 @@ public static DateFormat toJavaFormat(String fmt) {
             return null;
         }
 
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
 
         for (int i = 0, len = fmt.length(); i < len; ++i) {
             char ch = fmt.charAt(i);

File: core/src/test/java/com/alibaba/druid/benckmark/pool/model/TableOperator.java
Patch:
@@ -20,7 +20,7 @@ public TableOperator() {
     }
 
     public void insert() throws Exception {
-        StringBuffer ddl = new StringBuffer();
+        StringBuilder ddl = new StringBuilder();
         ddl.append("INSERT INTO t_big (");
         for (int i = 0; i < COUNT; ++i) {
             if (i != 0) {
@@ -66,7 +66,7 @@ public void dropTable() throws SQLException {
     }
 
     public void createTable() throws SQLException {
-        StringBuffer ddl = new StringBuffer();
+        StringBuilder ddl = new StringBuilder();
         ddl.append("CREATE TABLE t_big (FID INT AUTO_INCREMENT PRIMARY KEY ");
         for (int i = 0; i < COUNT; ++i) {
             ddl.append(", ");

File: core/src/test/java/com/alibaba/druid/benckmark/sql/Templates.java
Patch:
@@ -16,7 +16,7 @@ public class Templates {
 
     public static String parameterize(SQLStatement ast, Set<String> physicalNames, List<Object> params) {
         List<Object> parameters = null;
-        Appendable out = new StringBuilder();
+        StringBuilder out = new StringBuilder();
         SQLASTOutputVisitor visitor = new MySqlOutputVisitor(out);
         visitor.setParameterized(true);
         visitor.setParameterizedMergeInList(true);

File: core/src/test/java/com/alibaba/druid/bvt/bug/Issue1769.java
Patch:
@@ -5,8 +5,6 @@
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlExportParameterVisitor;
 import junit.framework.TestCase;
 
-import java.io.StringWriter;
-
 /**
  * Created by wenshao on 25/06/2017.
  */
@@ -16,7 +14,7 @@ public void test_for_issue() throws Exception {
         MySqlStatementParser parser = new MySqlStatementParser(sql);
         SQLStatement stmt = parser.parseStatement();
 
-        StringWriter out = new StringWriter();
+        StringBuilder out = new StringBuilder();
         MySqlExportParameterVisitor v = new MySqlExportParameterVisitor(out);
         v.setParameterized(true);
         v.setShardingSupport(false);

File: core/src/test/java/com/alibaba/druid/bvt/bug/Issue2015.java
Patch:
@@ -12,7 +12,7 @@ public void test_for_issue() throws Exception {
         String sql = "update t set a=1,b=2 where a > 1";
         List<SQLStatement> stmtList = SQLUtils.parseStatements(sql, JdbcConstants.MYSQL);
 
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         stmtList.get(0).output(buf);
         assertEquals("UPDATE t\n" +
                 "SET a = 1, b = 2\n" +

File: core/src/test/java/com/alibaba/druid/bvt/sql/ShardingUnwrapTest.java
Patch:
@@ -7,7 +7,7 @@
  * Created by wenshao on 13/08/2017.
  */
 public class ShardingUnwrapTest extends TestCase {
-    SQLASTOutputVisitor visitor = new SQLASTOutputVisitor(new StringBuffer());
+    SQLASTOutputVisitor visitor = new SQLASTOutputVisitor(new StringBuilder());
 
     public void test_sharding_unwrap() throws Exception {
         assertEquals("t_like_count", visitor.unwrapShardingTable("t_like_count0057"));

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlRepCheckTest.java
Patch:
@@ -29,7 +29,7 @@ public void test_check() {
     public Map<String, String> snapshot() {
         Map<String, String> schemaDdls = new HashMap<String, String>();
         for (Schema schema : repository.getSchemas()) {
-            StringBuffer data = new StringBuffer(4 * 1024);
+            StringBuilder data = new StringBuilder(4 * 1024);
             for (String table : schema.showTables()) {
                 SchemaObject schemaObject = schema.findTable(table);
                 schemaObject.getStatement().output(data);

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/create/MySqlCreateTableUnitTest.java
Patch:
@@ -47,11 +47,13 @@ public void test_0_table_options() throws Exception {
         List<SQLAssignItem> list = new ArrayList<SQLAssignItem>();
         assertTrue(parser.parseTableOptions(list, null));
 
-        MySqlOutputVisitor visitor = new MySqlOutputVisitor(System.out);
+        StringBuilder strBuilder = new StringBuilder();
+        MySqlOutputVisitor visitor = new MySqlOutputVisitor(strBuilder);
         for (SQLAssignItem item : list) {
             visitor.visit(item);
             visitor.println();
         }
+        System.out.println(strBuilder.toString());
     }
 
 }

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_exportTables.java
Patch:
@@ -40,7 +40,7 @@ public void test_0() throws Exception {
 
         assertEquals(1, statementList.size());
 
-        StringBuffer out = new StringBuffer();
+        StringBuilder out = new StringBuilder();
         SQLASTOutputVisitor visitor = SQLUtils.createOutputVisitor(out, JdbcConstants.MYSQL);
         visitor.setExportTables(true);
 
@@ -70,7 +70,7 @@ public void test_1() throws Exception {
 
         assertEquals(1, statementList.size());
 
-        StringBuffer out = new StringBuffer();
+        StringBuilder out = new StringBuilder();
         SQLASTOutputVisitor visitor = SQLUtils.createOutputVisitor(out, JdbcConstants.MYSQL);
         visitor.setExportTables(true);
 

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/LargeOrTest.java
Patch:
@@ -28,7 +28,7 @@
 
 public class LargeOrTest extends TestCase {
     public void test_largeOr() throws Exception {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         buf.append("SELECT 1 FROM T WHERE ID = ?");
         for (int i = 0; i < 10000; ++i) {
             buf.append(" OR ID = ?");
@@ -43,7 +43,7 @@ public void test_largeOr() throws Exception {
     }
 
     public void test_largeAnd() throws Exception {
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         buf.append("SELECT 1 FROM T WHERE ID = ?");
         for (int i = 0; i < 10000; ++i) {
             buf.append(" AND ID = ?");

File: core/src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSysdateTest.java
Patch:
@@ -31,7 +31,7 @@ public class OracleSysdateTest extends OracleTest {
     public void test_0() throws Exception {
         OracleSysdateExpr sysdate = new OracleSysdateExpr();
 
-        StringBuffer buf = new StringBuffer();
+        StringBuilder buf = new StringBuilder();
         SQLASTOutputVisitor v = new SQLASTOutputVisitor(buf);
         sysdate.accept(v);
         assertEquals("SYSDATE", buf.toString());

File: core/src/test/java/com/alibaba/druid/bvt/sql/postgresql/select/PGSelectTest21.java
Patch:
@@ -58,7 +58,7 @@ public void test_1() throws Exception {
 
         assertTrue(statemen instanceof PGSelectStatement);
         assertEquals(1, ((PGSelectStatement) statemen).getSelect().getWithSubQuery().getEntries().size());
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
         String alias = ((PGSelectStatement) statemen).getSelect().getWithSubQuery().getEntries().get(0).getAlias();
         assertEquals("a", alias);
         assertEquals(2, ((PGSelectStatement) statemen).getSelect().getWithSubQuery().getEntries().get(0).getColumns().size());

File: core/src/test/java/com/alibaba/druid/mysql/MySqlBigTableTest.java
Patch:
@@ -63,7 +63,7 @@ protected void tearDown() throws Exception {
     }
 
     public void test_0() throws Exception {
-        StringBuffer ddl = new StringBuffer();
+        StringBuilder ddl = new StringBuilder();
         ddl.append("INSERT INTO t_big (");
         for (int i = 0; i < COUNT; ++i) {
             if (i != 0) {
@@ -106,7 +106,7 @@ private void dropTable() throws SQLException {
     }
 
     private void createTable() throws SQLException {
-        StringBuffer ddl = new StringBuffer();
+        StringBuilder ddl = new StringBuilder();
         ddl.append("CREATE TABLE t_big (FID INT AUTO_INCREMENT PRIMARY KEY ");
         for (int i = 0; i < COUNT; ++i) {
             ddl.append(", ");

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/issues/Issue5421.java
Patch:
@@ -51,7 +51,7 @@ public void test_create_table_with() throws Exception {
         }
     }
 
-    static String normalizeSql(String sql) {
+    public static String normalizeSql(String sql) {
         sql = StringUtils.replace(sql, " ( ", "(");
         sql = StringUtils.replace(sql, "( ", "(");
         sql = StringUtils.replace(sql, " )", ")");

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -4205,7 +4205,7 @@ public boolean visit(SQLJoinTableSource x) {
             }
 
             if (x.isNatural()) {
-                print0(ucase ? "NATURAL " : "natural ");
+                //print0(ucase ? "NATURAL " : "natural ");
             }
 
             if (x.isGlobal()) {

File: core/src/main/java/com/alibaba/druid/sql/visitor/functions/Replace.java
Patch:
@@ -25,14 +25,12 @@
 
 import static com.alibaba.druid.sql.visitor.SQLEvalVisitor.EVAL_VALUE;
 
-
 /**
  * @auther lizongbo
  * @see <a href="https://github.com/alibaba/druid/issues/5477">Issue来源</a>
  * @see <a href="https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_replace">mysql replace函数</a>
  */
 public class Replace implements Function {
-
     public static final Replace instance = new Replace();
 
     public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {

File: core/src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -388,7 +388,7 @@ public static Long getId(Object conn) {
      * does not be updated by method <b>pingInternal</b> running for connection validation if option <b>usePingMethod</b>
      * is true.<br>
      * More troublesome is that <b>lastQueryFinishedTime</b> will not be set if option <b>maintainTimeStats</b>
-     * is false, so does mysql5 <b>lastPacketReceivedTimeMs<b>.
+     * is false, so does mysql5 <b>lastPacketReceivedTimeMs</b>.
      */
     @Deprecated
     public static long getLastPacketReceivedTimeMs(Connection conn) throws SQLException {

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1387,7 +1387,7 @@ private void initValidConnectionChecker() {
 
         String realDriverClassName = driver.getClass().getName();
         if (JdbcUtils.isMySqlDriver(realDriverClassName)) {
-            this.validConnectionChecker = new MySqlValidConnectionChecker(usePingMethod);
+            this.validConnectionChecker = new MySqlValidConnectionChecker();
 
         } else if (realDriverClassName.equals(JdbcConstants.ORACLE_DRIVER)
                 || realDriverClassName.equals(JdbcConstants.ORACLE_DRIVER2)) {

File: core/src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -56,7 +56,9 @@ public void configFromProperties(Properties properties) {
         }
 
         String property = properties.getProperty("druid.mysql.usePingMethod");
-        if ("false".equals(property)) {
+        if ("true".equals(property)) {
+            setUsePingMethod(true);
+        } else if ("false".equals(property)) {
             setUsePingMethod(false);
         }
     }

File: core/src/test/java/com/alibaba/druid/bvt/pool/basic/DataSourceTest3.java
Patch:
@@ -238,7 +238,7 @@ public void test_setConnectionInitSqls_2() throws Exception {
 
     public void test_ValidConnectionChecker() throws Exception {
         dataSource.getValidConnectionCheckerClassName();
-        dataSource.setValidConnectionChecker(new MySqlValidConnectionChecker(false));
+        dataSource.setValidConnectionChecker(new MySqlValidConnectionChecker());
         Assert.assertEquals(MySqlValidConnectionChecker.class.getName(),
                 dataSource.getValidConnectionCheckerClassName());
     }
@@ -324,7 +324,7 @@ public void test_error_validateConnection_2() throws Exception {
 
     public void test_error_validateConnection_3() throws Exception {
         dataSource.setValidationQuery(null);
-        dataSource.setValidConnectionChecker(new MySqlValidConnectionChecker(false));
+        dataSource.setValidConnectionChecker(new MySqlValidConnectionChecker());
 
         DruidPooledConnection conn = dataSource.getConnection().unwrap(DruidPooledConnection.class);
         dataSource.validateConnection(conn);

File: core/src/test/java/com/alibaba/druid/bvt/pool/vendor/MySQLValidConnectionCheckerTest.java
Patch:
@@ -20,7 +20,7 @@ protected void setUp() throws Exception {
         dataSource.setUrl("jdbc:mock:xxx");
         dataSource.setDbType("mysql");
         dataSource.setValidationQuery("select 1");
-        dataSource.setValidConnectionChecker(new MySqlValidConnectionChecker(false));
+        dataSource.setValidConnectionChecker(new MySqlValidConnectionChecker());
         dataSource.setInitialSize(1);
         dataSource.setTestOnBorrow(true);
     }

File: core/src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1109,7 +1109,7 @@ public void setMinIdle(int value) {
         }
 
         if (inited && value > this.maxActive) {
-            throw new IllegalArgumentException("minIdle greater than maxActive, " + maxActive + " <= " + this.minIdle);
+            throw new IllegalArgumentException("minIdle greater than maxActive, " + maxActive + " must >= " + this.minIdle);
         }
 
         if (minIdle < 0) {

File: core/src/main/java/com/alibaba/druid/pool/xa/DruidXADataSource.java
Patch:
@@ -22,6 +22,7 @@
 import com.alibaba.druid.support.logging.LogFactory;
 import com.alibaba.druid.util.*;
 import dm.jdbc.driver.DmdbXAConnection;
+
 import javax.sql.XAConnection;
 import javax.sql.XADataSource;
 import javax.transaction.xa.XAException;

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -2816,7 +2816,8 @@ private void runInternal() {
                             return;
                         }
 
-                        this.errorCount = 0; // reset errorCount
+                        // reset errorCount
+                        this.errorCount = 0;
                         createSchedulerFutures.put(this,
                                 createScheduler.schedule(this, timeBetweenConnectErrorMillis, TimeUnit.MILLISECONDS));
                         return;

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -2020,8 +2020,7 @@ protected final void handleFatalError(
         // holder.
         LOG.error("{conn-" + holder.getConnectionId() + "} discard", error);
 
-        if (!emptySignalCalled &&
-                onFatalError && hasHolderDataSource) {
+        if (!emptySignalCalled && onFatalError && hasHolderDataSource) {
             fatalErrorCountLock.lock();
             try {
                 emptySignal();

File: core/src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -2185,7 +2185,7 @@ protected void cloneTo(DruidAbstractDataSource to) {
     public abstract boolean discardConnection(Connection realConnection);
 
     public boolean discardConnection(DruidConnectionHolder holder) {
-        discardConnection(holder.getConnection());
+        return discardConnection(holder.getConnection());
     }
 
     public boolean isAsyncCloseConnectionEnable() {

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1978,6 +1978,8 @@ protected final void handleFatalError(
             lastFatalErrorTimeMillis = lastErrorTimeMillis;
             fatalErrorCount++;
             if (fatalErrorCount - fatalErrorCountLastShrink > onFatalErrorMaxActive) {
+                // increase fatalErrorCountLastShrink to avoid that emptySignal would be called again by shrink.
+                fatalErrorCountLastShrink++;
                 onFatalError = true;
             } else {
                 onFatalError = false;
@@ -2000,7 +2002,7 @@ protected final void handleFatalError(
                 }
             }
 
-            // decrease activeCount by discardConnection to make sure following emptySignal calling successfully.
+            // decrease activeCount first to make sure the following emptySignal should be called successfully.
             this.discardConnection(holder);
         }
 
@@ -2011,8 +2013,6 @@ protected final void handleFatalError(
             ReentrantLock dataSourceLock = holder.getDataSource().lock;
             dataSourceLock.lock();
             try {
-                // increase fatalErrorCountLastShrink otherwise emptySignal will be called again at shrink method.
-                fatalErrorCountLastShrink++;
                 emptySignal();
             } finally {
                 dataSourceLock.unlock();

File: core/src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_concurrent.java
Patch:
@@ -31,7 +31,7 @@ protected void setUp() throws Exception {
         dataSource.setUrl("jdbc:mock:xxx");
         dataSource.setPoolPreparedStatements(true);
         dataSource.setMaxOpenPreparedStatements(100);
-        dataSource.setMaxActive(1);
+        dataSource.setMaxActive(2);
         dataSource.setMaxWait(1000 * 100);
     }
 

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1979,6 +1979,8 @@ protected final void handleFatalError(
             fatalErrorCount++;
             if (fatalErrorCount - fatalErrorCountLastShrink > onFatalErrorMaxActive) {
                 onFatalError = true;
+            } else {
+                onFatalError = false;
             }
             lastFatalError = error;
             lastFatalErrorSql = sql;

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1990,6 +1990,8 @@ protected final void handleFatalError(
             ReentrantLock dataSourceLock = holder.getDataSource().lock;
             dataSourceLock.lock();
             try {
+                // increase fatalErrorCountLastShrink otherwise emptySignal will be called again at shrink method.
+                fatalErrorCountLastShrink++;
                 emptySignal();
             } finally {
                 dataSourceLock.unlock();
@@ -3417,7 +3419,7 @@ public void shrink(boolean checkTime, boolean keepAlive) {
             } finally {
                 lock.unlock();
             }
-        } else if (onFatalError || fatalErrorIncrement > 0) {
+        } else if (fatalErrorIncrement > 0) {
             lock.lock();
             try {
                 emptySignal();

File: core/src/main/java/com/alibaba/druid/sql/repository/Schema.java
Patch:
@@ -142,8 +142,8 @@ public SchemaObject findTableOrView(long hashCode64) {
 
     public SchemaObject findFunction(String functionName) {
         functionName = SQLUtils.normalize(functionName);
-        String lowerName = functionName.toLowerCase();
-        return functions.get(lowerName);
+        // FnvHash.hashCode64 is case insensitivity
+        return functions.get(FnvHash.hashCode64(functionName));
     }
 
     public boolean isSequence(String name) {

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1707,6 +1707,7 @@ private DruidPooledConnection getConnectionInternal(long maxWait) throws SQLExce
                     final Lock lock = this.lock;
                     lock.lock();
                     try {
+                        createDirectCount.decrementAndGet();
                         if (activeCount + poolingCount < maxActive) {
                             activeCount++;
                             holder.active = true;
@@ -1725,8 +1726,9 @@ private DruidPooledConnection getConnectionInternal(long maxWait) throws SQLExce
                     if (discard) {
                         JdbcUtils.close(pyConnInfo.getPhysicalConnection());
                     }
+                } else {
+                    createDirectCount.decrementAndGet();
                 }
-                createDirectCount.decrementAndGet();
             }
 
             final ReentrantLock lock = this.lock;

File: core/src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -241,7 +241,7 @@ else if (StringUtils.equalsIgnoreCase(key, JMX_PREFIX))
             restUrl = restUrl.substring(colonPos + 1);
         }
         config.setRawUrl(restUrl);
-        if (config.getRawDriverClassName() == null) {
+        if (config.getRawDriverClassName() == null || config.getRawDriverClassName().isEmpty()) {
             String rawDriverClassname = JdbcUtils.getDriverClassName(restUrl);
             config.setRawDriverClassName(rawDriverClassname);
         }

File: core/src/main/java/com/alibaba/druid/pool/ha/node/PoolUpdater.java
Patch:
@@ -79,7 +79,9 @@ public void init() {
             executor.scheduleAtFixedRate(new Runnable() {
                 @Override
                 public void run() {
-                    LOG.debug("Purging the DataSource Pool every " + intervalSeconds + "s.");
+                    if (LOG.isDebugEnabled()) {
+                        LOG.debug("Purging the DataSource Pool every " + intervalSeconds + "s.");
+                    }
                     try {
                         removeDataSources();
                     } catch (Exception e) {

File: core/src/main/java/com/alibaba/druid/pool/ha/selector/RandomDataSourceRecoverThread.java
Patch:
@@ -82,7 +82,9 @@ private void tryOneDataSource(DruidDataSource dataSource) {
     private void sleepBeforeValidation() {
         if (validationSleepSeconds > 0) {
             try {
-                LOG.debug("Sleep " + validationSleepSeconds + " second(s) before validation.");
+                if (LOG.isDebugEnabled()) {
+                    LOG.debug("Sleep " + validationSleepSeconds + " second(s) before validation.");
+                }
                 Thread.sleep(validationSleepSeconds * 1000L);
             } catch (InterruptedException e) {
                 // ignore

File: core/src/main/java/com/alibaba/druid/pool/ha/selector/StickyRandomDataSourceSelector.java
Patch:
@@ -49,7 +49,9 @@ public String getName() {
     public DataSource get() {
         StickyDataSourceHolder holder = holders.get();
         if (holder != null && isAvailable(holder)) {
-            LOG.debug("Return the sticky DataSource " + holder.getDataSource().toString() + " directly.");
+            if (LOG.isDebugEnabled()) {
+                LOG.debug("Return the sticky DataSource " + holder.getDataSource().toString() + " directly.");
+            }
             return holder.getDataSource();
         }
         LOG.debug("Return a random DataSource.");

File: core/src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -119,7 +119,7 @@ public static boolean limit(SQLSelect select, DbType dbType, int offset, int cou
     private static boolean limitUnion(SQLUnionQuery queryBlock, DbType dbType, int offset, int count, boolean check) {
         SQLLimit limit = queryBlock.getLimit();
         if (limit != null) {
-            if (offset > 0) {
+            if (offset >= 0) {
                 limit.setOffset(new SQLIntegerExpr(offset));
             }
 
@@ -184,7 +184,7 @@ private static boolean limitSQLQueryBlock(SQLSelectQueryBlock queryBlock,
                                               boolean check) {
         SQLLimit limit = queryBlock.getLimit();
         if (limit != null) {
-            if (offset > 0) {
+            if (offset >= 0) {
                 limit.setOffset(new SQLIntegerExpr(offset));
             }
 
@@ -447,7 +447,7 @@ private static boolean limitMySqlQueryBlock(SQLSelectQueryBlock queryBlock,
                                                 boolean check) {
         SQLLimit limit = queryBlock.getLimit();
         if (limit != null) {
-            if (offset > 0) {
+            if (offset >= 0) {
                 limit.setOffset(new SQLIntegerExpr(offset));
             }
 

File: core/src/test/java/com/alibaba/druid/bvt/sql/PagerUtilsTest_Limit_mysql_0.java
Patch:
@@ -76,6 +76,6 @@ public void test_mysql_7() throws Exception {
         String result = PagerUtils.limit(sql, JdbcConstants.MYSQL, 0, 100, true);
         assertEquals("SELECT *\n" +
                 "FROM t\n" +
-                "LIMIT 1000, 100", result);
+                "LIMIT 0, 100", result);
     }
 }

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1740,7 +1740,7 @@ private DruidPooledConnection getConnectionInternal(long maxWait) throws SQLExce
 
             try {
                 if (maxWaitThreadCount > 0
-                        && notEmptyWaitThreadCount >= maxWaitThreadCount) {
+                        && notEmptyWaitThreadCount > maxWaitThreadCount) {
                     connectErrorCountUpdater.incrementAndGet(this);
                     throw new SQLException("maxWaitThreadCount " + maxWaitThreadCount + ", current wait Thread count "
                             + lock.getQueueLength());

File: core/src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait.java
Patch:
@@ -75,15 +75,15 @@ public void run() {
             Thread.sleep(10);
         }
 
-        Assert.assertEquals(0, dataSource.getNotEmptyWaitThreadCount());
-        Assert.assertEquals(1, dataSource.getNotEmptyWaitThreadPeak());
+        Assert.assertEquals(10, dataSource.getNotEmptyWaitThreadCount());
+        Assert.assertEquals(10, dataSource.getNotEmptyWaitThreadPeak());
 
         conn.close();
 
         endLatch.await(100, TimeUnit.MILLISECONDS);
 
         Thread.sleep(10);
 //        Assert.assertEquals(0, dataSource.getNotEmptyWaitThreadCount());
-        Assert.assertEquals(1, dataSource.getNotEmptyWaitThreadPeak());
+        Assert.assertEquals(10, dataSource.getNotEmptyWaitThreadPeak());
     }
 }

File: core/src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait2.java
Patch:
@@ -52,7 +52,7 @@ public void run() {
                         System.out.println(Thread.currentThread() +" "+ LocalDateTime.now() + " getConnection== " + conn);
                         conn.close();
                     } catch (Exception e) {
-                        // e.printStackTrace();
+                         e.printStackTrace();
                         errorCount.incrementAndGet();
                     } finally {
                         endLatch.countDown();

File: core/src/main/java/com/alibaba/druid/pool/ha/node/ZookeeperNodeRegister.java
Patch:
@@ -43,7 +43,6 @@ public class ZookeeperNodeRegister {
     private GroupMember member;
     private boolean privateZkClient; // Should I close the client?
 
-
     /**
      * Init a CuratorFramework if there's no CuratorFramework provided.
      */

File: core/src/main/java/com/alibaba/druid/sql/ast/SQLPartitionOf.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.ast;
 
-
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
@@ -25,7 +24,6 @@
  * @author lizongbo
  */
 public class SQLPartitionOf extends SQLObjectImpl {
-
     protected SQLExprTableSource parentTable;
     private boolean useDefault;
     private SQLName columnName;

File: core/src/main/java/com/alibaba/druid/sql/dialect/hive/ast/HiveAddJarStatement.java
Patch:
@@ -6,7 +6,6 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class HiveAddJarStatement extends SQLStatementImpl {
-
     public HiveAddJarStatement() {
         this.dbType = DbType.hive;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGCreateTableParser.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.druid.sql.dialect.postgresql.parser;
 
-
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLPartitionBy;
@@ -17,7 +16,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-
 public class PGCreateTableParser extends SQLCreateTableParser {
     public PGCreateTableParser(Lexer lexer) {
         super(new PGExprParser(lexer));

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlFormatTest4.java
Patch:
@@ -23,7 +23,6 @@
 import com.alibaba.druid.util.JdbcUtils;
 
 import junit.framework.TestCase;
-import org.eclipse.jetty.jndi.java.javaNameParser;
 import org.junit.Assert;
 
 /**

File: core/src/test/java/com/alibaba/druid/stat/StatAnnotationTest.java
Patch:
@@ -3,13 +3,12 @@
 import java.util.List;
 import java.util.Map;
 
-import javax.annotation.Resource;
-
 import junit.framework.TestCase;
 
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.test.context.ContextConfiguration;
 import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
 
@@ -19,7 +18,7 @@
 @RunWith(SpringJUnit4ClassRunner.class)
 @ContextConfiguration(locations = {"classpath:/com/alibaba/druid/stat/spring-config-stat-annotation.xml"})
 public class StatAnnotationTest extends TestCase {
-    @Resource
+    @Autowired
     private UserService userService;
 
     @Test

File: druid-spring-boot-3-starter/src/test/java/com/alibaba/druid/spring/boot3/demo/service/UserServiceImpl.java
Patch:
@@ -1,6 +1,5 @@
 package com.alibaba.druid.spring.boot3.demo.service;
 
-
 import com.alibaba.druid.spring.boot3.demo.dao.UserDao;
 import com.alibaba.druid.spring.boot3.demo.model.User;
 import org.springframework.beans.factory.annotation.Autowired;

File: core/src/main/java/com/alibaba/druid/pool/ha/node/NodeListener.java
Patch:
@@ -20,8 +20,6 @@
 import com.alibaba.druid.support.logging.LogFactory;
 
 import java.util.*;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.ReentrantLock;
 
 /**
  * This abstract class defines a listener to monitor the change of DataSource nodes.
@@ -36,7 +34,6 @@ public abstract class NodeListener extends Observable {
     private Properties properties = new Properties();
     private Date lastUpdateTime;
     private Observer observer;
-    private Lock lock = new ReentrantLock();
 
     /**
      * The method implements the detail update logic.

File: core/src/main/java/com/alibaba/druid/pool/ha/node/ZookeeperNodeListener.java
Patch:
@@ -64,9 +64,9 @@
  */
 public class ZookeeperNodeListener extends NodeListener {
     private static final Log LOG = LogFactory.getLog(ZookeeperNodeListener.class);
+    private final Lock lock = new ReentrantLock();
     private String zkConnectString;
     private String path = "/ha-druid-datasources";
-    private Lock lock = new ReentrantLock();
     private boolean privateZkClient; // Should I close the client?
     private PathChildrenCache cache;
     private CuratorFramework client;
@@ -161,8 +161,8 @@ public void destroy() {
      */
     @Override
     public List<NodeEvent> refresh() {
+        lock.lock();
         try {
-            lock.lock();
             Properties properties = getPropertiesFromCache();
             List<NodeEvent> events = NodeEvent.getEventsByDiffProperties(getProperties(), properties);
             if (events != null && !events.isEmpty()) {

File: core/src/main/java/com/alibaba/druid/pool/ha/node/ZookeeperNodeRegister.java
Patch:
@@ -36,12 +36,13 @@
  */
 public class ZookeeperNodeRegister {
     private static final Log LOG = LogFactory.getLog(ZookeeperNodeRegister.class);
+    private final Lock lock = new ReentrantLock();
     private String zkConnectString;
     private String path = "/ha-druid-datasources";
     private CuratorFramework client;
     private GroupMember member;
     private boolean privateZkClient; // Should I close the client?
-    private Lock lock = new ReentrantLock();
+
 
     /**
      * Init a CuratorFramework if there's no CuratorFramework provided.
@@ -74,8 +75,8 @@ public boolean register(String nodeId, List<ZookeeperNodeInfo> payload) {
         if (payload == null || payload.isEmpty()) {
             return false;
         }
+        lock.lock();
         try {
-            lock.lock();
             createPathIfNotExisted();
             if (member != null) {
                 LOG.warn("GroupMember has already registered. Please deregister first.");

File: core/src/test/java/com/alibaba/druid/bvt/pool/TestGraceShutdown.java
Patch:
@@ -42,6 +42,7 @@ protected void setUp() throws Exception {
         dataSource.setInitialSize(1);
         dataSource.setMaxActive(2);
         dataSource.setMaxIdle(2);
+        dataSource.setMaxWait(5);
         dataSource.setMinIdle(1);
         dataSource.setMinEvictableIdleTimeMillis(300 * 1000); // 300 / 10
         dataSource.setTimeBetweenEvictionRunsMillis(180 * 1000); // 180 / 10
@@ -81,10 +82,11 @@ public void run() {
         for (int i = 0; i < threadCount; ++i) {
             threads[i].start();
         }
-        Thread.sleep(1000);
+        Thread.sleep(5000);
 
         new Thread("close thread") {
             public void run() {
+                System.out.println("执行close start");
                 dataSource.close();
             }
         }.start();

File: core/src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -282,6 +282,7 @@ public void connection_commit(FilterChain chain, ConnectionProxy connection) thr
 
         JdbcDataSourceStat dataSourceStat = chain.getDataSource().getDataSourceStat();
         dataSourceStat.getConnectionStat().incrementConnectionCommitCount();
+        StatFilterContext.getInstance().commit();
     }
 
     @Override
@@ -290,6 +291,7 @@ public void connection_rollback(FilterChain chain, ConnectionProxy connection) t
 
         JdbcDataSourceStat dataSourceStat = chain.getDataSource().getDataSourceStat();
         dataSourceStat.getConnectionStat().incrementConnectionRollbackCount();
+        StatFilterContext.getInstance().rollback();
     }
 
     @Override

File: core/src/test/java/com/alibaba/druid/sql/dialect/hive/parser/HiveStatementParserTest.java
Patch:
@@ -12,12 +12,12 @@ public class HiveStatementParserTest extends TestCase {
      * 例子： add jar hdfs:///hadoop/parser.h.file
      */
     @Test
-    public void testAddJarStatement(){
+    public void testAddJarStatement() {
         String s = "add jar hdfs:///hadoop/parser.h.file";
         HiveStatementParser hiveStatementParser = new HiveStatementParser(s);
         SQLStatement sqlStatement = hiveStatementParser.parseAdd();
         assertTrue(sqlStatement instanceof HiveAddJarStatement);
-        assertEquals(s, sqlStatement.toString());
+        assertEquals("ADD JAR hdfs:///hadoop/parser.h.file", sqlStatement.toString());
     }
 
 }
\ No newline at end of file

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -5677,7 +5677,7 @@ public boolean visit(SQLAlterTableStatement x) {
             SQLAlterTableItem item = x.getItems().get(i);
             if (i != 0) {
                 SQLAlterTableItem former = x.getItems().get(i - 1);
-                if (this.dbType == DbType.hive
+                if ((this.dbType == DbType.hive || this.dbType == DbType.odps)
                         && former instanceof SQLAlterTableAddPartition
                         && item instanceof SQLAlterTableAddPartition) {
                     // ignore comma

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -5491,7 +5491,6 @@ public boolean visit(TidbSplitTableStatement x) {
         return false;
     }
 
-
     public boolean visit(MySqlJSONTableExpr.Column x) {
         x.getName().accept(this);
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGAnalyzeStatement.java
Patch:
@@ -29,7 +29,6 @@
  * @see <a href="https://www.postgresql.org/docs/current/sql-analyze.html">ANALYZE — collect statistics about a database</a>
  */
 public class PGAnalyzeStatement extends SQLStatementImpl implements PGSQLStatement {
-
     private boolean verbose;
     private boolean skipLocked;
     private List<SQLExprTableSource> tableSources = new ArrayList<>();

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGVacuumStatement.java
Patch:
@@ -24,13 +24,11 @@
 import java.util.ArrayList;
 import java.util.List;
 
-
 /**
  * @author lizongbo
  * @see <a href="https://www.postgresql.org/docs/current/sql-vacuum.html">VACUUM — garbage-collect and optionally analyze a database</a>
  */
 public class PGVacuumStatement extends SQLStatementImpl implements PGSQLStatement {
-
     private boolean full;
     private boolean freeze;
     private boolean verbose;

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSQLStatementParser.java
Patch:
@@ -704,7 +704,6 @@ public SQLCreateTableParser getSQLCreateTableParser() {
         return new PGCreateTableParser(this.exprParser);
     }
 
-
     public PGAnalyzeStatement parseAnalyzeTable() {
         PGAnalyzeStatement stmt = new PGAnalyzeStatement(this.dbType);
         acceptIdentifier("ANALYZE");

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -6691,7 +6691,6 @@ public SQLExternalRecordFormat parseRowFormat() {
             lexer.nextToken();
         }
 
-
         SQLExternalRecordFormat format = new SQLExternalRecordFormat();
 
         Lexer.SavePoint mark = lexer.mark();

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTableStatement.java
Patch:
@@ -191,7 +191,7 @@ public void setType(Type type) {
     }
 
     public static enum Type {
-        GLOBAL_TEMPORARY, LOCAL_TEMPORARY, TEMPORARY, SHADOW
+        GLOBAL_TEMPORARY, LOCAL_TEMPORARY, TEMPORARY, SHADOW, TRANSACTIONAL
     }
 
     public List<SQLTableElement> getTableElementList() {

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGCharExpr.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class PGCharExpr extends SQLCharExpr implements PGExpr {
-    private boolean cSytle = false;
+    private boolean cSytle;
     @Override
     public void accept0(PGASTVisitor visitor) {
         visitor.visit(this);

File: core/src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -1274,6 +1274,9 @@ public boolean visit(SQLSelectQueryBlock x) {
             for (SQLExpr expr : groupBy.getItems()) {
                 statExpr(expr);
             }
+            if (groupBy.getHaving() != null) {
+                statExpr(groupBy.getHaving());
+            }
         }
 
         List<SQLWindow> windows = x.getWindows();

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -5117,7 +5117,7 @@ public boolean visit(SQLCreateViewStatement x) {
 
         String sqlSecurity = x.getSqlSecurity();
         if (sqlSecurity != null && sqlSecurity.length() > 0) {
-            print0(ucase ? "SQL SECURITY = " : "sql security = ");
+            print0(ucase ? "SQL SECURITY " : "sql security ");
             print0(sqlSecurity);
             println();
         }

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -1791,7 +1791,8 @@ public SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
                 SQLExpr joinOn = expr();
                 join.setCondition(joinOn);
 
-                while (lexer.token == Token.ON) {
+                while (lexer.token == Token.ON
+                        && dbType == DbType.mysql) {
                     lexer.nextToken();
 
                     SQLExpr joinOn2 = expr();

File: core/src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGMergeIntoTest0.java
Patch:
@@ -40,8 +40,8 @@ public void test_0() throws Exception {
 
         assertEquals("MERGE INTO CustomerAccount CA\n" +
                 "USING (\n" +
-                "\t(SELECT CustomerId, TransactionValue\n" +
-                "\tFROM RecentTransactions)\n" +
+                "\tSELECT CustomerId, TransactionValue\n" +
+                "\tFROM RecentTransactions\n" +
                 ") T ON (CA.CustomerId = T.CustomerId) \n" +
                 "WHEN MATCHED THEN UPDATE SET Balance = Balance + TransactionValue\n" +
                 "WHEN NOT MATCHED THEN INSERT (CustomerId, Balance) VALUES (T.CustomerId, T.TransactionValue);", stmt.toString());

File: core/src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1761,7 +1761,7 @@ public PhysicalConnectionInfo createPhysicalConnection() throws SQLException {
                 if (socketTimeout > 0) {
                     physicalConnectProperties.put("socketTimeout", Long.toString(TimeUnit.MILLISECONDS.toSeconds(socketTimeout)));
                 }
-            } else if (dbTypeName.equals(DbType.sqlserver.name())) {
+            } else if (DbType.sqlserver.name().equals(dbTypeName)) {
                 // see https://learn.microsoft.com/en-us/sql/connect/jdbc/setting-the-connection-properties?view=sql-server-ver16
                 physicalConnectProperties.put("loginTimeout", Long.toString(TimeUnit.MILLISECONDS.toSeconds(connectTimeout)));
                 if (socketTimeout > 0) {

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_155.java
Patch:
@@ -25,7 +25,7 @@ public void test_0() throws Exception {
                 "\tLEFT JOIN corona_select_one_db_one_tb layer_0_right_tb ON layer_0_right_tb.decimal_test = layer_0_left_tb.varchar_test\n" +
                 "WHERE '18015376320243458' = 18015376320243458 NOT BETWEEN layer_0_right_tb.tinyint_1bit_test AND 'x-3'", stmt.toString());
 
-        assertEquals("SELECT SQL_NO_CACHE layer_0_right_tb.integer_test IS true\n" +
+        assertEquals("SELECT SQL_NO_CACHE layer_0_right_tb.integer_test IS ?\n" +
                         "FROM corona_select_multi_db_multi_tb layer_0_left_tb\n" +
                         "\tLEFT JOIN corona_select_one_db_one_tb layer_0_right_tb ON layer_0_right_tb.decimal_test = layer_0_left_tb.varchar_test\n" +
                         "WHERE ? = ? NOT BETWEEN layer_0_right_tb.tinyint_1bit_test AND ?"

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_156.java
Patch:
@@ -29,7 +29,7 @@ public void test_0() throws Exception {
                 "\tRIGHT JOIN corona_select_one_db_multi_tb layer_0_right_tb ON layer_0_right_tb.smallint_test = layer_0_right_tb.date_test\n" +
                 "WHERE layer_0_right_tb.time_test = 'x6' NOT BETWEEN 96 AND layer_0_right_tb.bigint_test;", stmt.toString());
 
-        assertEquals("SELECT SQL_SMALL_RESULT NULL IS NOT false\n" +
+        assertEquals("SELECT SQL_SMALL_RESULT NULL IS NOT ?\n" +
                         "FROM corona_select_multi_db_one_tb layer_0_left_tb\n" +
                         "\tRIGHT JOIN corona_select_one_db_multi_tb layer_0_right_tb ON layer_0_right_tb.smallint_test = layer_0_right_tb.date_test\n" +
                         "WHERE layer_0_right_tb.time_test = ? NOT BETWEEN ? AND layer_0_right_tb.bigint_test;"

File: core/src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -1140,7 +1140,6 @@ public static interface Constants {
         long INSTALL = fnv1a_64_lower("INSTALL");
         long UNLOAD = fnv1a_64_lower("UNLOAD");
 
-        long DUPLICATE = fnv1a_64_lower("DUPLICATE");
         long AGGREGATE = fnv1a_64_lower("AGGREGATE");
         long UNIQUE = fnv1a_64_lower("UNIQUE");
         long PRIMARY = fnv1a_64_lower("PRIMARY");

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlOrderingExpr.java
Patch:
@@ -16,12 +16,9 @@
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLOrderingSpecification;
 import com.alibaba.druid.sql.ast.SQLReplaceable;
-import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObject;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 import java.util.Collections;
 import java.util.List;

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -4596,11 +4596,12 @@ public boolean visit(SQLCommentStatement x) {
     @Override
     public boolean visit(SQLBeginStatement x) {
         print0(ucase ? "BEGIN " : "begin ");
-        if(x.getTidbTxnMode()!=null){
+        if (x.getTidbTxnMode() != null) {
             x.getTidbTxnMode().accept(this);
         }
         return false;
     }
+
     @Override
     public boolean visit(SQLUseStatement x) {
         print0(ucase ? "USE " : "use ");

File: core/src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSelectParser.java
Patch:
@@ -180,7 +180,7 @@ public SQLSelectQuery query(SQLObject parent, boolean acceptUnion) {
             } else {
                 throw new ParserException("expect 'FIRST' or 'NEXT'. " + lexer.info());
             }
-
+            lexer.nextToken();
             SQLExpr count = expr();
             fetch.setCount(count);
 

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -111,6 +111,7 @@ public static SQLStatementParser createSQLStatementParser(String sql, DbType dbT
             case oceanbase_oracle:
                 return new OracleStatementParser(sql, features);
             case mysql:
+            case tidb:
             case mariadb:
             case drds: {
                 return new MySqlStatementParser(sql, features);

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -7280,7 +7280,7 @@ public boolean isUppCase() {
     }
 
     public void setUppCase(boolean val) {
-        this.config(VisitorFeature.OutputUCase, true);
+        this.config(VisitorFeature.OutputUCase, val);
     }
 
     @Override

File: core/src/main/java/com/alibaba/druid/sql/parser/Keywords.java
Patch:
@@ -160,7 +160,6 @@ public class Keywords {
         map.put("INOUT", Token.INOUT);
 
         map.put("LIMIT", Token.LIMIT);
-        map.put("CASCADE", Token.CASCADE);
 
         DEFAULT_KEYWORDS = new Keywords(map);
 

File: core/src/main/java/com/alibaba/druid/pool/JDBC4ValidConnectionChecker.java
Patch:
@@ -21,9 +21,9 @@
 /**
  * Common ValidConnectionChecker for JDBC4 to use Connection.isValid.
  *
- * @Author : kimmking(kimmking@apache.org)
- * @create 2023/3/4 16:48
- * @Since 1.2.17
+ * Author : kimmking(kimmking@apache.org)
+ * create 2023/3/4 16:48
+ * Since 1.2.17
  */
 public class JDBC4ValidConnectionChecker implements ValidConnectionChecker {
     @Override

File: core/src/test/java/com/alibaba/druid/bvt/utils/JdbcUtils_driver.java
Patch:
@@ -23,8 +23,8 @@ public void test_driver() throws Exception {
         Driver driver = (Driver) clazz.newInstance();
         Assert.assertNotNull(driver);
 
-        Assert.assertEquals(0, driver.getMajorVersion());
-        Assert.assertEquals(1, driver.getMinorVersion());
+        Assert.assertEquals(3, driver.getMajorVersion());
+        Assert.assertEquals(4, driver.getMinorVersion());
 
         Assert.assertEquals(JdbcConstants.ODPS, JdbcUtils.getDbTypeRaw(url, className));
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsStatementParser.java
Patch:
@@ -286,6 +286,7 @@ public boolean parseStatementListDialect(List<SQLStatement> statementList) {
         if (lexer.identifierEquals("WHOAMI")) {
             lexer.nextToken();
             SQLWhoamiStatement stmt = new SQLWhoamiStatement();
+            stmt.setDbType(DbType.odps);
             statementList.add(stmt);
             return true;
         }

File: core/src/main/java/com/alibaba/druid/DbType.java
Patch:
@@ -64,6 +64,8 @@ public enum DbType {
 
     tydb(1L << 42),
 
+    starrocks(1L << 43),
+
     ingres(0),
     cloudscape(0),
     timesten(0),

File: core/src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -61,6 +61,7 @@
 import com.alibaba.druid.sql.dialect.presto.visitor.PrestoOutputVisitor;
 import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerOutputVisitor;
 import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerSchemaStatVisitor;
+import com.alibaba.druid.sql.dialect.starrocks.visitor.StarRocksOutputVisitor;
 import com.alibaba.druid.sql.parser.*;
 import com.alibaba.druid.sql.repository.SchemaRepository;
 import com.alibaba.druid.sql.visitor.*;
@@ -529,6 +530,8 @@ public static SQLASTOutputVisitor createFormatOutputVisitor(Appendable out,
                 return new ClickhouseOutputVisitor(out);
             case oscar:
                 return new OscarOutputVisitor(out);
+            case starrocks:
+                return new StarRocksOutputVisitor(out);
             default:
                 return new SQLASTOutputVisitor(out, dbType);
         }

File: core/src/main/java/com/alibaba/druid/pool/JDBC4ValidConnectionChecker.java
Patch:
@@ -10,18 +10,16 @@
  * @create 2023/3/4 16:48
  */
 public class JDBC4ValidConnectionChecker implements ValidConnectionChecker {
-
     @Override
     public boolean isValidConnection(Connection c, String query, int validationQueryTimeout) throws Exception {
         Connection conn = c;
-        if(conn instanceof DruidPooledConnection) {
+        if (conn instanceof DruidPooledConnection) {
             conn = ((DruidPooledConnection) conn).getConnection();
         }
         return conn.isValid(validationQueryTimeout);
     }
 
     @Override
     public void configFromProperties(Properties properties) {
-
     }
 }

File: core/src/main/java/com/alibaba/druid/pool/ha/selector/RandomDataSourceRecoverThread.java
Patch:
@@ -83,7 +83,7 @@ private void sleepBeforeValidation() {
         if (validationSleepSeconds > 0) {
             try {
                 LOG.debug("Sleep " + validationSleepSeconds + " second(s) before validation.");
-                Thread.sleep(validationSleepSeconds * 1000);
+                Thread.sleep(validationSleepSeconds * 1000L);
             } catch (InterruptedException e) {
                 // ignore
             }
@@ -92,7 +92,7 @@ private void sleepBeforeValidation() {
 
     private void sleep() {
         try {
-            Thread.sleep(recoverIntervalSeconds * 1000);
+            Thread.sleep(recoverIntervalSeconds * 1000L);
         } catch (InterruptedException e) {
             // ignore
         }

File: core/src/main/java/com/alibaba/druid/pool/ha/selector/RandomDataSourceValidateThread.java
Patch:
@@ -100,7 +100,7 @@ private void sleepForNextValidation() {
         try {
             LOG.debug("[RandomDataSourceValidateThread@" + hashCode() + "] Sleep " + newSleepSeconds
                     + " second(s) until next checking.");
-            Thread.sleep(newSleepSeconds * 1000);
+            Thread.sleep(newSleepSeconds * 1000L);
         } catch (InterruptedException e) {
             // ignore
         }
@@ -213,8 +213,8 @@ private boolean isSkipChecking(DruidDataSource dataSource) {
         LOG.debug("DataSource=" + name + ", lastSuccessTime=" + lastSuccessTime
                 + ", lastCheckTime=" + lastCheckTime + ", currentTime=" + currentTime);
         return lastSuccessTime != null && lastCheckTime != null
-                && (currentTime - lastSuccessTime) <= checkingIntervalSeconds * 1000
-                && (currentTime - lastCheckTime) <= 5 * checkingIntervalSeconds * 1000
+                && (currentTime - lastSuccessTime) <= checkingIntervalSeconds * 1000L
+                && (currentTime - lastCheckTime) <= checkingIntervalSeconds * 1000L * 5
                 && (!errorCounts.containsKey(name) || errorCounts.get(name) < 1);
     }
 

File: core/src/main/java/com/alibaba/druid/pool/ha/selector/StickyRandomDataSourceSelector.java
Patch:
@@ -78,7 +78,7 @@ private boolean isValid(StickyDataSourceHolder holder) {
     }
 
     private boolean isExpired(StickyDataSourceHolder holder) {
-        return System.currentTimeMillis() - holder.getRetrievingTime() > expireSeconds * 1000;
+        return System.currentTimeMillis() - holder.getRetrievingTime() > expireSeconds * 1000L;
     }
 
     public int getExpireSeconds() {

File: core/src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -29,6 +29,7 @@
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlEvalVisitorImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleEvalVisitor;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGEvalVisitor;
+import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerEvalVisitor;
 import com.alibaba.druid.sql.visitor.functions.*;
 import com.alibaba.druid.util.HexBin;
 import com.alibaba.druid.util.Utils;
@@ -123,7 +124,7 @@ public static SQLEvalVisitor createEvalVisitor(DbType dbType) {
                 return new PGEvalVisitor();
             case sqlserver:
             case jtds:
-                return new PGEvalVisitor();
+                return new SQLServerEvalVisitor();
             case db2:
                 return new DB2EvalVisitor();
             default:

File: core/src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn.java
Patch:
@@ -71,8 +71,8 @@ public void test_connect() throws Exception {
             conn2.close();
         }
         Assert.assertEquals(0, dataSource.getActiveCount());
-        Assert.assertEquals(1, dataSource.getPoolingCount());
-        Assert.assertEquals(2, dataSource.getCreateCount());
+        Assert.assertEquals(2, dataSource.getPoolingCount());
+        Assert.assertEquals(3, dataSource.getCreateCount());
     }
 
 }

File: core/src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn.java
Patch:
@@ -71,8 +71,8 @@ public void test_connect() throws Exception {
             conn2.close();
         }
         Assert.assertEquals(0, dataSource.getActiveCount());
-        Assert.assertEquals(1, dataSource.getPoolingCount());
-        Assert.assertEquals(2, dataSource.getCreateCount());
+        Assert.assertEquals(2, dataSource.getPoolingCount());
+        Assert.assertEquals(3, dataSource.getCreateCount());
     }
 
 }

File: core/src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -456,7 +456,7 @@ public void connection_commit(FilterChain chain, ConnectionProxy connection) thr
         super.connection_commit(chain, connection);
 
         if (connectionCommitAfterLogEnable && isConnectionLogEnabled()) {
-            connectionLog("{conn-" + connection.getId() + "} commited");
+            connectionLog("{conn-" + connection.getId() + "} committed");
         }
     }
 

File: core/src/main/java/com/alibaba/druid/pool/ha/HighAvailableDataSource.java
Patch:
@@ -294,7 +294,7 @@ public void setConnectProperties(Properties connectProperties) {
 
     private void createNodeMap() {
         if (nodeListener == null) {
-            // Compatiable with the old version.
+            // Compatible with the old version.
             // Create a FileNodeListener to watch the dataSourceFile.
             FileNodeListener listener = new FileNodeListener();
             listener.setFile(dataSourceFile);

File: core/src/test/java/com/alibaba/druid/bvt/pool/vendor/MySqlExceptionSorterTest_1.java
Patch:
@@ -26,7 +26,7 @@ public void test_0() throws Exception {
             }
 
             SQLException rootException = new SQLException(
-                    new SQLException("Could not retrieve transation read-only status server",
+                    new SQLException("Could not retrieve transition read-only status server",
                             (Exception) constructor.newInstance(null, 0, 0, null)
                     )
             );
@@ -42,7 +42,7 @@ public void test_0() throws Exception {
             }
 
             SQLException rootException = new SQLException(
-                    new SQLException("Could not retrieve transation read-only status server",
+                    new SQLException("Could not retrieve transition read-only status server",
                             (Exception) constructor.newInstance(null, null)
                     )
             );

File: core/src/test/java/com/alibaba/druid/bvt/pool/vendor/MySqlExceptionSorterTest_2.java
Patch:
@@ -17,7 +17,7 @@ public void test_0() throws Exception {
         MySqlExceptionSorter sorter = new MySqlExceptionSorter();
 
         SQLException rootException = new SQLException(
-                new SQLException("Could not retrieve transation read-only status server",
+                new SQLException("Could not retrieve transition read-only status server",
                         new SocketTimeoutException()
                 )
         );

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -826,7 +826,7 @@ public void init() throws SQLException {
             }
 
             if (connectTimeout == 0) {
-                socketTimeout = DEFAULT_TIME_CONNECT_TIMEOUT_MILLIS;
+                connectTimeout = DEFAULT_TIME_CONNECT_TIMEOUT_MILLIS;
             }
 
             if (socketTimeout == 0) {

File: core/src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -389,6 +389,9 @@ public static long getLastPacketReceivedTimeMs(Connection conn) throws SQLExcept
                 class_connectionImpl = Utils.loadClass("com.mysql.jdbc.MySQLConnection");
                 if (class_connectionImpl == null) {
                     class_connectionImpl = Utils.loadClass("com.mysql.cj.MysqlConnection");
+                    if (class_connectionImpl == null) {
+                        class_connectionImpl = Utils.loadClass("com.mysql.cj.api.MysqlConnection");
+                    }
                     if (class_connectionImpl != null) {
                         mysqlJdbcVersion6 = true;
                     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/SQLServerStatementImpl.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.alibaba.druid.sql.dialect.sqlserver.ast;
 
+import com.alibaba.druid.DbType;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -826,7 +826,7 @@ public void init() throws SQLException {
             }
 
             if (connectTimeout == 0) {
-                socketTimeout = DEFAULT_TIME_CONNECT_TIMEOUT_MILLIS;
+                connectTimeout = DEFAULT_TIME_CONNECT_TIMEOUT_MILLIS;
             }
 
             if (socketTimeout == 0) {

File: core/src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/SQLServerStatementImpl.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.alibaba.druid.sql.dialect.sqlserver.ast;
 
+import com.alibaba.druid.DbType;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: core/src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/SQLServerStatementImpl.java
Patch:
@@ -21,6 +21,7 @@
 
 public abstract class SQLServerStatementImpl extends SQLStatementImpl implements SQLServerStatement {
     public SQLServerStatementImpl() {
+        super(DbType.sqlserver);
     }
 
     @Override

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -109,6 +109,7 @@ public class OracleLexer extends Lexer {
         map.put("PARTITION", Token.PARTITION);
         map.put("TRUE", Token.TRUE);
         map.put("FALSE", Token.FALSE);
+        map.put("CASCADE", Token.CASCADE);
 
         map.put("，", Token.COMMA);
         map.put("（", Token.LPAREN);

File: core/src/main/java/com/alibaba/druid/sql/parser/Keywords.java
Patch:
@@ -160,7 +160,6 @@ public class Keywords {
         map.put("INOUT", Token.INOUT);
 
         map.put("LIMIT", Token.LIMIT);
-        map.put("CASCADE", Token.CASCADE);
 
         DEFAULT_KEYWORDS = new Keywords(map);
 

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -2786,7 +2786,7 @@ protected SQLDropTableStatement parseDropTable(boolean acceptDrop) {
                 continue;
             }
 
-            if (lexer.identifierEquals(FnvHash.Constants.CASCADE)) {
+            if (lexer.identifierEquals(FnvHash.Constants.CASCADE) || lexer.token == CASCADE) {
                 lexer.nextToken();
                 stmt.setCascade(true);
 
@@ -2880,7 +2880,7 @@ protected SQLDropViewStatement parseDropView(boolean acceptDrop) {
         if (lexer.identifierEquals("RESTRICT")) {
             lexer.nextToken();
             stmt.setRestrict(true);
-        } else if (lexer.identifierEquals("CASCADE")) {
+        } else if (lexer.identifierEquals(FnvHash.Constants.CASCADE) || lexer.token == CASCADE) {
             lexer.nextToken();
 
             if (lexer.identifierEquals("CONSTRAINTS")) { // for oracle

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenameConstraint.java
Patch:
@@ -34,7 +34,6 @@ protected void accept0(SQLASTVisitor visitor) {
         }
         visitor.endVisit(this);
     }
-    
     public SQLName getConstraint() {
         return constraint;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterTableRowMovement.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
-import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
 public class OracleAlterTableRowMovement extends OracleAlterTableItem {

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterTableShrinkSpace.java
Patch:
@@ -18,7 +18,6 @@
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
 public class OracleAlterTableShrinkSpace extends OracleAlterTableItem {
-
     private boolean compact;
 
     private boolean cascade;

File: core/src/main/java/com/alibaba/druid/sql/parser/Keywords.java
Patch:
@@ -160,6 +160,7 @@ public class Keywords {
         map.put("INOUT", Token.INOUT);
 
         map.put("LIMIT", Token.LIMIT);
+        map.put("CASCADE", Token.CASCADE);
 
         DEFAULT_KEYWORDS = new Keywords(map);
 

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenameConstraint.java
Patch:
@@ -34,7 +34,6 @@ protected void accept0(SQLASTVisitor visitor) {
         }
         visitor.endVisit(this);
     }
-    
     public SQLName getConstraint() {
         return constraint;
     }

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterTableRowMovement.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
-import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
 public class OracleAlterTableRowMovement extends OracleAlterTableItem {

File: core/src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterTableShrinkSpace.java
Patch:
@@ -18,7 +18,6 @@
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
 public class OracleAlterTableShrinkSpace extends OracleAlterTableItem {
-
     private boolean compact;
 
     private boolean cascade;

File: core/src/main/java/com/alibaba/druid/sql/parser/Keywords.java
Patch:
@@ -160,6 +160,7 @@ public class Keywords {
         map.put("INOUT", Token.INOUT);
 
         map.put("LIMIT", Token.LIMIT);
+        map.put("CASCADE", Token.CASCADE);
 
         DEFAULT_KEYWORDS = new Keywords(map);
 

File: core/src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -389,6 +389,9 @@ public static long getLastPacketReceivedTimeMs(Connection conn) throws SQLExcept
                 class_connectionImpl = Utils.loadClass("com.mysql.jdbc.MySQLConnection");
                 if (class_connectionImpl == null) {
                     class_connectionImpl = Utils.loadClass("com.mysql.cj.MysqlConnection");
+                    if (class_connectionImpl == null) {
+                        class_connectionImpl = Utils.loadClass("com.mysql.cj.api.MysqlConnection");
+                    }
                     if (class_connectionImpl != null) {
                         mysqlJdbcVersion6 = true;
                     }

File: core/src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -1877,7 +1877,7 @@ private static String _normalize(String name, DbType dbType, boolean isForced, b
         if (name.length() > 2) {
             char c0 = name.charAt(0);
             char x0 = name.charAt(name.length() - 1);
-            if ((c0 == '"' && x0 == '"') || (c0 == '`' && x0 == '`') || (c0 == '\'' && x0 == '\'')) {
+            if ((c0 == '[' && x0 == ']') || (c0 == '"' && x0 == '"') || (c0 == '`' && x0 == '`') || (c0 == '\'' && x0 == '\'')) {
                 String normalizeName = name.substring(1, name.length() - 1);
 
                 if (isTrimmed) {

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -2494,6 +2494,9 @@ private void alterTableAdd(SQLAlterTableStatement stmt) {
             SQLConstraint constraint = this.exprParser.parseConstaint();
             SQLAlterTableAddConstraint item = new SQLAlterTableAddConstraint(constraint);
             stmt.addItem(item);
+        } else if (lexer.token == LITERAL_ALIAS && dbType == DbType.sqlserver) {
+            SQLAlterTableAddColumn item = parseAlterTableAddColumn();
+            stmt.addItem(item);
         } else {
             throw new ParserException("TODO " + lexer.info());
         }

File: core/src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -2494,6 +2494,9 @@ private void alterTableAdd(SQLAlterTableStatement stmt) {
             SQLConstraint constraint = this.exprParser.parseConstaint();
             SQLAlterTableAddConstraint item = new SQLAlterTableAddConstraint(constraint);
             stmt.addItem(item);
+        } else if (lexer.token == LITERAL_ALIAS && dbType == DbType.sqlserver) {
+            SQLAlterTableAddColumn item = parseAlterTableAddColumn();
+            stmt.addItem(item);
         } else {
             throw new ParserException("TODO " + lexer.info());
         }

File: core/src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -1290,6 +1290,6 @@ public Map<String, Object> getVariables() {
      * @since 1.0.28
      */
     public Map<String, Object> getGloablVariables() {
-        return this.holder.globleVariables;
+        return this.holder.globalVariables;
     }
 }

File: core/src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -274,6 +274,7 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
     protected volatile long lastFatalErrorTimeMillis;
     protected volatile String lastFatalErrorSql;
     protected volatile Throwable lastFatalError;
+    protected volatile Throwable keepAliveError;
 
     public DruidAbstractDataSource(boolean lockFair) {
         lock = new ReentrantLock(lockFair);

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLCheck.java
Patch:
@@ -60,7 +60,7 @@ public void cloneTo(SQLCheck x) {
         super.cloneTo(x);
 
         if (expr != null) {
-            expr = expr.clone();
+            x.expr = expr.clone();
         }
 
         x.enforced = enforced;

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLCommentStatement.java
Patch:
@@ -26,7 +26,7 @@
 
 public class SQLCommentStatement extends SQLStatementImpl {
     public static enum Type {
-        TABLE, COLUMN
+        TABLE, COLUMN, INDEX, VIEW
     }
 
     private SQLExprTableSource on;

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -815,7 +815,7 @@ public void init() throws SQLException {
             }
 
             if (connectTimeout == 0) {
-                socketTimeout = DEFAULT_TIME_CONNECT_TIMEOUT_MILLIS;
+                connectTimeout = DEFAULT_TIME_CONNECT_TIMEOUT_MILLIS;
             }
 
             if (socketTimeout == 0) {

File: core/src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTableStatement.java
Patch:
@@ -851,7 +851,7 @@ public boolean apply(SQLDropIndexStatement x) {
             SQLTableElement e = tableElementList.get(i);
             if (e instanceof SQLUniqueConstraint) {
                 SQLUniqueConstraint unique = (SQLUniqueConstraint) e;
-                if (unique.getName().nameHashCode64() == indexNameHashCode64) {
+                if (unique.getName() != null && unique.getName().nameHashCode64() == indexNameHashCode64) {
                     tableElementList.remove(i);
                     return true;
                 }

File: core/src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsCreateTableParser.java
Patch:
@@ -210,7 +210,7 @@ public SQLCreateTableStatement parseCreateTable(boolean acceptCreate) {
                         throw new ParserException("expect identifier. " + lexer.info());
                 }
 
-                stmt.getTableElementList().add(column);
+                stmt.addColumn(column);
 
                 if (lexer.isKeepComments() && lexer.hasComment()) {
                     column.addAfterComment(lexer.readAndResetComments());

File: core/src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -456,7 +456,7 @@ public void connection_commit(FilterChain chain, ConnectionProxy connection) thr
         super.connection_commit(chain, connection);
 
         if (connectionCommitAfterLogEnable && isConnectionLogEnabled()) {
-            connectionLog("{conn-" + connection.getId() + "} commited");
+            connectionLog("{conn-" + connection.getId() + "} committed");
         }
     }
 

File: core/src/main/java/com/alibaba/druid/pool/ha/HighAvailableDataSource.java
Patch:
@@ -294,7 +294,7 @@ public void setConnectProperties(Properties connectProperties) {
 
     private void createNodeMap() {
         if (nodeListener == null) {
-            // Compatiable with the old version.
+            // Compatible with the old version.
             // Create a FileNodeListener to watch the dataSourceFile.
             FileNodeListener listener = new FileNodeListener();
             listener.setFile(dataSourceFile);

File: core/src/test/java/com/alibaba/druid/bvt/pool/vendor/MySqlExceptionSorterTest_1.java
Patch:
@@ -26,7 +26,7 @@ public void test_0() throws Exception {
             }
 
             SQLException rootException = new SQLException(
-                    new SQLException("Could not retrieve transation read-only status server",
+                    new SQLException("Could not retrieve transition read-only status server",
                             (Exception) constructor.newInstance(null, 0, 0, null)
                     )
             );
@@ -42,7 +42,7 @@ public void test_0() throws Exception {
             }
 
             SQLException rootException = new SQLException(
-                    new SQLException("Could not retrieve transation read-only status server",
+                    new SQLException("Could not retrieve transition read-only status server",
                             (Exception) constructor.newInstance(null, null)
                     )
             );

File: core/src/test/java/com/alibaba/druid/bvt/pool/vendor/MySqlExceptionSorterTest_2.java
Patch:
@@ -17,7 +17,7 @@ public void test_0() throws Exception {
         MySqlExceptionSorter sorter = new MySqlExceptionSorter();
 
         SQLException rootException = new SQLException(
-                new SQLException("Could not retrieve transation read-only status server",
+                new SQLException("Could not retrieve transition read-only status server",
                         new SocketTimeoutException()
                 )
         );

File: core/src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -3496,7 +3496,7 @@ public JdbcDataSourceStat getDataSourceStat() {
         return dataSourceStat;
     }
 
-    public Object clone() throws CloneNotSupportedException {
+    public Object clone() {
         return cloneDruidDataSource();
     }
 

File: core/src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -8960,6 +8960,9 @@ public MySqlCaseStatement parseCase() {
         {
             while (lexer.token() == Token.WHEN) {
                 MySqlWhenStatement when = new MySqlWhenStatement();
+
+                accept(Token.WHEN);
+
                 // when expr
                 when.setCondition(exprParser.expr());
 

File: druid-demo-petclinic/src/main/java/org/springframework/samples/petclinic/owner/Owner.java
Patch:
@@ -109,7 +109,7 @@ public Pet getPet(String name) {
 
 	/**
 	 * Return the Pet with the given id, or null if none found for this Owner.
-	 * @param name to test
+	 * @param id to test
 	 * @return a pet if pet id is already in use
 	 */
 	public Pet getPet(Integer id) {

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_194_dla.java
Patch:
@@ -81,7 +81,7 @@ public void test_0() throws Exception {
                 "\tstring_col STRING comment 'default',\n" +
                 "\ttimestamp_col TIMESTAMP comment 'default'\n" +
                 ")\n" +
-                "row rowFormat\n" +
+                "row format\n" +
                 "\tserde 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'\n" +
                 "with serdeproperties (\n" +
                 "\t'field.delim' = '|',\n" +

File: core/src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_204_dla.java
Patch:
@@ -136,7 +136,7 @@ public void test_0() throws Exception {
                 "\t\tstring_col STRING comment 'default',\n" +
                 "\t\ttimestamp_col TIMESTAMP comment 'default'\n" +
                 "\t)\n" +
-                "\trow rowFormat\n" +
+                "\trow format\n" +
                 "\t\tserde 'org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe'\n" +
                 "\twith serdeproperties (\n" +
                 "\t\t'field.delim' = '|',\n" +

File: core/src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_exceptionSorter.java
Patch:
@@ -69,9 +69,9 @@ public void test_event_error() throws Exception {
 
         long createCount = dataSource.getCreateCount();
         assertTrue(createCount == 2 || createCount == 3);
-        long discardCount = dataSource.getDiscardCount();
+//        long discardCount = dataSource.getDiscardCount();
 //        assertTrue("createCount : " + createCount + ", discardCount" + discardCount
 //                , createCount == discardCount || createCount - 1 == discardCount);
-        assertEquals(1, dataSource.getPoolingCount());
+//        assertEquals(1, dataSource.getPoolingCount());
     }
 }

File: core/src/main/java/com/alibaba/druid/sql/dialect/hive/ast/HiveInsertStatement.java
Patch:
@@ -39,6 +39,7 @@ protected void accept0(SQLASTVisitor visitor) {
 
     protected void accept0(HiveASTVisitor visitor) {
         if (visitor.visit(this)) {
+            acceptChild(visitor, with);
             acceptChild(visitor, tableSource);
             acceptChild(visitor, partitions);
             acceptChild(visitor, valuesList);
@@ -49,6 +50,7 @@ protected void accept0(HiveASTVisitor visitor) {
 
     protected void accept0(OdpsASTVisitor visitor) {
         if (visitor.visit(this)) {
+            acceptChild(visitor, with);
             acceptChild(visitor, tableSource);
             acceptChild(visitor, partitions);
             acceptChild(visitor, valuesList);

File: core/src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_exceptionSorter.java
Patch:
@@ -70,8 +70,8 @@ public void test_event_error() throws Exception {
         long createCount = dataSource.getCreateCount();
         assertTrue(createCount == 2 || createCount == 3);
         long discardCount = dataSource.getDiscardCount();
-        assertTrue("createCount : " + createCount + ", discardCount" + discardCount
-                , createCount == discardCount || createCount - 1 == discardCount);
+//        assertTrue("createCount : " + createCount + ", discardCount" + discardCount
+//                , createCount == discardCount || createCount - 1 == discardCount);
         assertEquals(1, dataSource.getPoolingCount());
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -5419,14 +5419,14 @@ public boolean visit(SQLExternalRecordFormat x) {
     public boolean visit(MySqlJSONTableExpr x) {
         print0(ucase ? "JSON_TABLE(" : "json_table(");
         x.getExpr().accept(this);
-        print(' ');
+        print(',');
         x.getPath().accept(this);
         incrementIndent();
         println();
         print0(ucase ? "COLUMNS (" : "columns (");
         incrementIndent();
         println();
-        printlnAndAccept(x.getColumns(), ", ");
+        printlnAndAccept(x.getColumns(), ",");
         decrementIndent();
         println();
         print(')');

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2316,7 +2316,7 @@ public boolean visit(SQLQueryExpr x) {
             visit(subQuery);
             this.indentCount--;
             println();
-        } else if (parent instanceof SQLMethodInvokeExpr) {
+        } else if (parent instanceof SQLMethodInvokeExpr && ((SQLMethodInvokeExpr) parent).getArguments().size() == 1) {
             this.indentCount++;
             println();
             visit(subQuery);

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -639,7 +639,7 @@ public static DbType getDbTypeRaw(String rawUrl, String driverClassName) {
             return DbType.highgo;
         } else if (rawUrl.startsWith("jdbc:pivotal:greenplum:") || rawUrl.startsWith("jdbc:datadirect:greenplum:")) {
             return DbType.greenplum;
-        } else if (rawUrl.startsWith("jdbc:opengauss:" || rawUrl.startsWith("jdbc:gaussdb:") || rawUrl.startsWith("jdbc:dws:iam:")) {
+        } else if (rawUrl.startsWith("jdbc:opengauss:") || rawUrl.startsWith("jdbc:gaussdb:") || rawUrl.startsWith("jdbc:dws:iam:")) {
             return DbType.gaussdb;
         } else {
             return null;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlCreateTableStatement.java
Patch:
@@ -486,6 +486,9 @@ public void cloneTo(MySqlCreateTableStatement x) {
         if (partitioning != null) {
             x.setPartitioning(partitioning.clone());
         }
+        if (localPartitioning != null) {
+            x.setLocalPartitioning(localPartitioning.clone());
+        }
         for (SQLCommentHint hint : hints) {
             SQLCommentHint h2 = hint.clone();
             h2.setParent(x);

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByRange.java
Patch:
@@ -20,12 +20,12 @@
 
 public class SQLPartitionByRange extends SQLPartitionBy {
     protected SQLExpr interval;
-    protected boolean isColumns = false;
+    protected boolean isColumns;
     protected SQLExpr startWith;
     protected SQLIntegerExpr expireAfter;
     protected SQLIntegerExpr preAllocate;
     protected SQLExpr pivotDateExpr;
-    protected boolean disableSchedule = false;
+    protected boolean disableSchedule;
 
     public SQLPartitionByRange() {
     }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -368,7 +368,7 @@ public MySqlCreateTableStatement parseCreateTable(boolean acceptCreate) {
                             if (global) {
                                 unique.setGlobal(true);
                             }
-                            if(local){
+                            if (local) {
                                 unique.setLocal(true);
                             }
                         }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlCreateTableStatement.java
Patch:
@@ -486,6 +486,9 @@ public void cloneTo(MySqlCreateTableStatement x) {
         if (partitioning != null) {
             x.setPartitioning(partitioning.clone());
         }
+        if (localPartitioning != null) {
+            x.setLocalPartitioning(localPartitioning.clone());
+        }
         for (SQLCommentHint hint : hints) {
             SQLCommentHint h2 = hint.clone();
             h2.setParent(x);

File: src/main/java/com/alibaba/druid/sql/dialect/antspark/ast/AntsparkCreateTableStatement.java
Patch:
@@ -76,7 +76,7 @@ public void setDatasource(SQLExpr datasource) {
     }
 
     /**
-     * Getter method for property <tt>datasource</tt>.
+     * Getter method for property datasource.
      *
      * @return property value of datasource
      */

File: src/main/java/com/alibaba/druid/support/simplejndi/DruidDataSourceConverter.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * 支持simple-jndi
- * <h1>配置示例：</h1>
+ * <p>配置示例：</p>
  * <pre>
  * pgDruidTest/converter=com.alibaba.druid.support.simplejndi.DruidDataSourceConverter
  * pgDruidTest/type=javax.sql.DataSource

File: src/main/java/com/alibaba/druid/support/spring/MBeanServerFactoryBean.java
Patch:
@@ -21,8 +21,8 @@
 
 import java.lang.management.ManagementFactory;
 
-public class MBeanServerFactoryBean implements FactoryBean<MBeanServer> {
-    public MBeanServer getObject() throws Exception {
+public class MBeanServerFactoryBean implements FactoryBean {
+    public Object getObject() throws Exception {
         return ManagementFactory.getPlatformMBeanServer();
     }
 
@@ -33,5 +33,4 @@ public Class<?> getObjectType() {
     public boolean isSingleton() {
         return true;
     }
-
 }

File: src/main/java/com/alibaba/druid/stat/JdbcStatManagerFactoryBean.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.springframework.beans.factory.FactoryBean;
 
-public class JdbcStatManagerFactoryBean implements FactoryBean<JdbcStatManager> {
+public class JdbcStatManagerFactoryBean implements FactoryBean {
     @Override
-    public JdbcStatManager getObject() throws Exception {
+    public Object getObject() throws Exception {
         return JdbcStatManager.getInstance();
     }
 

File: src/main/java/com/alibaba/druid/sql/visitor/ParameterizedOutputVisitorUtils.java
Patch:
@@ -480,7 +480,7 @@ public boolean visit(SQLVariantRefExpr x) {
 
                 if (c0 == '#' && c1 == '{' && c1x == '}') {
                     String key = name.substring(2, name.length() - 1);
-                    Object value = parameters.get(x);
+                    Object value = parameters.get(key);
                     SQLExpr expr = SQLExprUtils.fromJavaObject(value, timeZone);
                     SQLUtils.replaceInParent(x, expr);
                 }

File: src/main/java/com/alibaba/druid/support/clickhouse/BalancedClickhouseDriverNative.java
Patch:
@@ -1,7 +1,5 @@
 package com.alibaba.druid.support.clickhouse;
 
-
-
 import com.github.housepower.jdbc.BalancedClickhouseDataSource;
 
 import java.sql.Connection;

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1826,7 +1826,7 @@ protected final void handleFatalError(DruidPooledConnection conn,
         final ReentrantLock lock = conn.lock;
         lock.lock();
         try {
-            if ((!conn.isClosed()) || !conn.isDisable()) {
+            if ((!conn.isClosed()) && !conn.isDisable()) {
                 conn.disable(error);
                 requireDiscard = true;
             }

File: src/test/java/com/alibaba/druid/bvt/sql/hive/HiveSelectTest_45_issue_3987.java
Patch:
@@ -34,7 +34,7 @@ public void test_0() throws Exception {
                 "\t, name\n" +
                 "FROM (\n" +
                 "\tSELECT id, number_id, parent_id, layer_id, alias\n" +
-                "\t\t, name, row_number() OVER (DISTRIBUTE BY number_idSORT BY number_id) AS rownum\n" +
+                "\t\t, name, row_number() OVER (DISTRIBUTE BY number_id SORT BY create_time DESC, id DESC) AS rownum\n" +
                 "\tFROM hdw_ods.ods_my_coredata__dts_device_category\n" +
                 "\tWHERE pdate = ''\n" +
                 ") m\n" +

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -2164,7 +2164,7 @@ public boolean isMbeanRegistered() {
     }
 
     boolean putLast(DruidConnectionHolder e, long lastActiveTimeMillis) {
-        if (poolingCount >= maxActive || e.discard || this.closed) {
+        if (poolingCount >= maxActive || e.discard || this.closed || this.closing) {
             return false;
         }
 

File: src/test/java/com/alibaba/druid/bvt/proxy/Log4j2FilterTest.java
Patch:
@@ -43,7 +43,7 @@ public void test_logger() throws Exception {
         Log4j2Filter filter = null;
         try {
             filter = new Log4j2Filter();
-        } catch (NoSuchFieldError ignored) {
+        } catch (Throwable ignored) {
             return;
         }
 

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -6111,7 +6111,7 @@ public boolean visit(SQLIndexOptions x) {
         */
         if (x.isGlobal()) {
             print0(ucase ? " GLOBAL" : " global");
-        } else if (x.isVisible()) {
+        } else if (x.isLocal()) {
             print0(ucase ? " LOCAL" : " local");
         }
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -5434,14 +5434,14 @@ public boolean visit(SQLExternalRecordFormat x) {
     public boolean visit(MySqlJSONTableExpr x) {
         print0(ucase ? "JSON_TABLE(" : "json_table(");
         x.getExpr().accept(this);
-        print(' ');
+        print(',');
         x.getPath().accept(this);
         incrementIndent();
         println();
         print0(ucase ? "COLUMNS (" : "columns (");
         incrementIndent();
         println();
-        printlnAndAccept(x.getColumns(), ", ");
+        printlnAndAccept(x.getColumns(), ",");
         decrementIndent();
         println();
         print(')');

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -4053,7 +4053,7 @@ public boolean visit(SQLJoinTableSource x) {
         print(' ');
 
         SQLTableSource right = x.getRight();
-        if (right instanceof SQLJoinTableSource) {
+        if (right instanceof SQLJoinTableSource && ((SQLJoinTableSource) right).getJoinType() == JoinType.COMMA) {
             print('(');
             printTableSource(right);
             print(')');

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectListCache.java
Patch:
@@ -87,6 +87,7 @@ public boolean match(Lexer lexer, SQLSelectQueryBlock queryBlock) {
                 queryBlock.setCachedSelectList(entry.printSql, entry.printSqlHash);
 
                 int len = pos + block.length();
+                //todo fix reset
                 lexer.reset(len, text.charAt(len), Token.FROM);
                 return true;
             }

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -570,8 +570,7 @@ public void parseStatementList(List<SQLStatement> statementList, int max, SQLObj
             }
 
             if (lexer.token == Token.LPAREN) {
-                char markChar = lexer.current();
-                int markBp = lexer.bp();
+                Lexer.SavePoint savePoint = lexer.markOut();
 
                 int parenCount = 0;
                 do {
@@ -585,7 +584,7 @@ public void parseStatementList(List<SQLStatement> statementList, int max, SQLObj
                 }
 
                 if (lexer.token == Token.SELECT) {
-                    lexer.reset(markBp, markChar, Token.LPAREN);
+                    lexer.reset(savePoint);
                     SQLStatement stmt = parseSelect();
                     statementList.add(stmt);
                     continue;

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectListCache.java
Patch:
@@ -87,6 +87,7 @@ public boolean match(Lexer lexer, SQLSelectQueryBlock queryBlock) {
                 queryBlock.setCachedSelectList(entry.printSql, entry.printSqlHash);
 
                 int len = pos + block.length();
+                //todo fix reset
                 lexer.reset(len, text.charAt(len), Token.FROM);
                 return true;
             }

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -570,8 +570,7 @@ public void parseStatementList(List<SQLStatement> statementList, int max, SQLObj
             }
 
             if (lexer.token == Token.LPAREN) {
-                char markChar = lexer.current();
-                int markBp = lexer.bp();
+                Lexer.SavePoint savePoint = lexer.markOut();
 
                 int parenCount = 0;
                 do {
@@ -585,7 +584,7 @@ public void parseStatementList(List<SQLStatement> statementList, int max, SQLObj
                 }
 
                 if (lexer.token == Token.SELECT) {
-                    lexer.reset(markBp, markChar, Token.LPAREN);
+                    lexer.reset(savePoint);
                     SQLStatement stmt = parseSelect();
                     statementList.add(stmt);
                     continue;

File: src/main/java/com/alibaba/druid/support/logging/SLF4JImpl.java
Patch:
@@ -81,7 +81,7 @@ public void debug(String msg) {
     @Override
     public void debug(String msg, Throwable e) {
         debugCount++;
-        log.log(null, callerFQCN, LocationAwareLogger.ERROR_INT, msg, null, e);
+        log.log(null, callerFQCN, LocationAwareLogger.DEBUG_INT, msg, null, e);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -4053,7 +4053,7 @@ public boolean visit(SQLJoinTableSource x) {
         print(' ');
 
         SQLTableSource right = x.getRight();
-        if (right instanceof SQLJoinTableSource) {
+        if (right instanceof SQLJoinTableSource && ((SQLJoinTableSource) right).getJoinType() == JoinType.COMMA) {
             print('(');
             printTableSource(right);
             print(')');

File: src/main/java/com/alibaba/druid/support/logging/SLF4JImpl.java
Patch:
@@ -81,7 +81,7 @@ public void debug(String msg) {
     @Override
     public void debug(String msg, Throwable e) {
         debugCount++;
-        log.log(null, callerFQCN, LocationAwareLogger.ERROR_INT, msg, null, e);
+        log.log(null, callerFQCN, LocationAwareLogger.DEBUG_INT, msg, null, e);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/wall/spi/ClickhouseWallProvider.java
Patch:
@@ -35,7 +35,7 @@ public ClickhouseWallProvider(){
     }
 
     public ClickhouseWallProvider(WallConfig config){
-        super(config, DbType.postgresql);
+        super(config, DbType.clickhouse);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/DbType.java
Patch:
@@ -61,7 +61,9 @@ public enum DbType {
     oscar          (1 << 40),
 
     tidb           ( 1 << 41),
-
+    
+    tydb           ( 1 << 42),
+    
     ingres          (0),
     cloudscape          (0),
     timesten          (0),

File: src/main/java/com/alibaba/druid/wall/spi/ClickhouseWallProvider.java
Patch:
@@ -35,7 +35,7 @@ public ClickhouseWallProvider(){
     }
 
     public ClickhouseWallProvider(WallConfig config){
-        super(config, DbType.postgresql);
+        super(config, DbType.clickhouse);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/sql/dialect/presto/ast/stmt/PrestoSelectStatement.java
Patch:
@@ -25,8 +25,8 @@
 /**
  * presto 的 select语句
  *
- * @author zhangcanlong
- * @date 2022/01/11
+ * author zhangcanlong
+ * date 2022/01/11
  */
 public class PrestoSelectStatement extends SQLSelectStatement implements SQLStatement {
 

File: src/main/java/com/alibaba/druid/sql/dialect/presto/parser/PrestoSelectParser.java
Patch:
@@ -31,8 +31,8 @@
 /**
  * presto的 选择解析器
  *
- * @author zhangcanlong
- * @date 2022/01/11
+ * author zhangcanlong
+ * date 2022/01/11
  */
 public class PrestoSelectParser extends SQLSelectParser {
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlCreateTableSpaceStatement.java
Patch:
@@ -70,7 +70,7 @@ public void setAddDataFile(SQLExpr x) {
         if (x != null) {
             x.setParent(this);
         }
-        this.addDataFile = addDataFile;
+        this.addDataFile = x;
     }
 
     public SQLExpr getInitialSize() {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlCreateTableSpaceStatement.java
Patch:
@@ -70,7 +70,7 @@ public void setAddDataFile(SQLExpr x) {
         if (x != null) {
             x.setParent(this);
         }
-        this.addDataFile = addDataFile;
+        this.addDataFile = x;
     }
 
     public SQLExpr getInitialSize() {

File: src/test/java/com/alibaba/druid/bvt/utils/JdbcUtilsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.SQLException;
 import java.sql.SQLRecoverableException;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -54,7 +54,7 @@ public void test_curd() throws Exception {
             Assert.assertEquals(0, list.size());
         }
         {
-            Map<String, Object> data = new HashMap<String, Object>();
+            Map<String, Object> data = new LinkedHashMap<String, Object>();
             data.put("id", 123);
             data.put("name", "高傲的羊");
             JdbcUtils.insertToTable(dataSource, "user", data);

File: src/main/java/com/alibaba/druid/sql/visitor/ExportParameterVisitorUtils.java
Patch:
@@ -125,7 +125,7 @@ public static SQLExpr exportParameter(final List<Object> parameters, final SQLEx
                 } else if (listItem instanceof SQLNumericLiteralExpr) {
                     Object listValue = ((SQLNumericLiteralExpr) listItem).getNumber();
                     listValues.add(listValue);
-                } else if (param instanceof SQLHexExpr) {
+                } else if (listItem instanceof SQLHexExpr) {
                     Object listValue = ((SQLHexExpr) listItem).toBytes();
                     listValues.add(listValue);
                 }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2718,7 +2718,7 @@ public boolean visit(SQLOrderBy x) {
         List<SQLSelectOrderByItem> items = x.getItems();
 
         if (items.size() > 0) {
-            if (x.isSibings()) {
+            if (x.isSiblings()) {
                 print0(ucase ? "ORDER SIBLINGS BY " : "order siblings by ");
             } else {
                 print0(ucase ? "ORDER BY " : "order by ");

File: src/test/java/com/alibaba/druid/bvt/utils/JdbcUtilsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.SQLException;
 import java.sql.SQLRecoverableException;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -54,7 +54,7 @@ public void test_curd() throws Exception {
             Assert.assertEquals(0, list.size());
         }
         {
-            Map<String, Object> data = new HashMap<String, Object>();
+            Map<String, Object> data = new LinkedHashMap<String, Object>();
             data.put("id", 123);
             data.put("name", "高傲的羊");
             JdbcUtils.insertToTable(dataSource, "user", data);

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -161,6 +161,7 @@ private static boolean limitQueryBlock(SQLSelect select, DbType dbType, int offs
             case tidb:
             case h2:
             case ads:
+            case clickhouse:
                 return limitMySqlQueryBlock(queryBlock, dbType, offset, count, check);
             case postgresql:
             case hive:

File: src/main/java/com/alibaba/druid/filter/FilterManager.java
Patch:
@@ -71,7 +71,6 @@ public static Properties loadFilterConfig() throws IOException {
         loadFilterConfig(filterProperties, ClassLoader.getSystemClassLoader());
         loadFilterConfig(filterProperties, FilterManager.class.getClassLoader());
         loadFilterConfig(filterProperties, Thread.currentThread().getContextClassLoader());
-        loadFilterConfig(filterProperties, FilterManager.class.getClassLoader());
 
         return filterProperties;
     }

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -85,6 +85,7 @@ public interface JdbcConstants {
     DbType OCEANBASE                  = DbType.oceanbase;
     DbType OCEANBASE_ORACLE           = DbType.oceanbase_oracle;
     String OCEANBASE_DRIVER           = "com.alipay.oceanbase.jdbc.Driver";
+    String OCEANBASE_DRIVER2          = "com.oceanbase.jdbc.Driver";
 
     DbType INFORMIX                   = DbType.informix;
     
@@ -150,4 +151,5 @@ public interface JdbcConstants {
      */
     DbType OSCAR                      = DbType.oscar;
     String OSCAR_DRIVER               = "com.oscar.Driver";
+
 }

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -928,13 +928,13 @@ public static boolean isMySqlDriver(String driverClassName) {
 
     public static boolean isOracleDbType(String dbType) {
         return DbType.oracle.name().equals(dbType) || //
-                DbType.oceanbase.name().equals(dbType) || //
+                DbType.oceanbase_oracle.name().equals(dbType) || //
                 DbType.ali_oracle.name().equalsIgnoreCase(dbType);
     }
 
     public static boolean isOracleDbType(DbType dbType) {
         return DbType.oracle == dbType || //
-                DbType.oceanbase == dbType || //
+                DbType.oceanbase_oracle == dbType || //
                 DbType.ali_oracle == dbType;
     }
 

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -85,6 +85,7 @@ public interface JdbcConstants {
     DbType OCEANBASE                  = DbType.oceanbase;
     DbType OCEANBASE_ORACLE           = DbType.oceanbase_oracle;
     String OCEANBASE_DRIVER           = "com.alipay.oceanbase.jdbc.Driver";
+    String OCEANBASE_DRIVER2          = "com.oceanbase.jdbc.Driver";
 
     DbType INFORMIX                   = DbType.informix;
     
@@ -150,4 +151,5 @@ public interface JdbcConstants {
      */
     DbType OSCAR                      = DbType.oscar;
     String OSCAR_DRIVER               = "com.oscar.Driver";
+
 }

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -928,13 +928,13 @@ public static boolean isMySqlDriver(String driverClassName) {
 
     public static boolean isOracleDbType(String dbType) {
         return DbType.oracle.name().equals(dbType) || //
-                DbType.oceanbase.name().equals(dbType) || //
+                DbType.oceanbase_oracle.name().equals(dbType) || //
                 DbType.ali_oracle.name().equalsIgnoreCase(dbType);
     }
 
     public static boolean isOracleDbType(DbType dbType) {
         return DbType.oracle == dbType || //
-                DbType.oceanbase == dbType || //
+                DbType.oceanbase_oracle == dbType || //
                 DbType.ali_oracle == dbType;
     }
 

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -161,6 +161,7 @@ private static boolean limitQueryBlock(SQLSelect select, DbType dbType, int offs
             case tidb:
             case h2:
             case ads:
+            case clickhouse:
                 return limitMySqlQueryBlock(queryBlock, dbType, offset, count, check);
             case postgresql:
             case hive:

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2718,7 +2718,7 @@ public boolean visit(SQLOrderBy x) {
         List<SQLSelectOrderByItem> items = x.getItems();
 
         if (items.size() > 0) {
-            if (x.isSibings()) {
+            if (x.isSiblings()) {
                 print0(ucase ? "ORDER SIBLINGS BY " : "order siblings by ");
             } else {
                 print0(ucase ? "ORDER BY " : "order by ");

File: src/main/java/com/alibaba/druid/sql/visitor/ExportParameterVisitorUtils.java
Patch:
@@ -124,7 +124,7 @@ public static SQLExpr exportParameter(final List<Object> parameters, final SQLEx
                 } else if (listItem instanceof SQLNumericLiteralExpr) {
                     Object listValue = ((SQLNumericLiteralExpr) listItem).getNumber();
                     listValues.add(listValue);
-                } else if (param instanceof SQLHexExpr) {
+                } else if (listItem instanceof SQLHexExpr) {
                     Object listValue = ((SQLHexExpr) listItem).toBytes();
                     listValues.add(listValue);
                 }

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceWrapper.java
Patch:
@@ -56,7 +56,7 @@ public void autoAddFilters(List<Filter> filters){
     }
 
     /**
-     * Ignore the 'maxEvictableIdleTimeMillis < minEvictableIdleTimeMillis' validate,
+     * Ignore the 'maxEvictableIdleTimeMillis &lt; minEvictableIdleTimeMillis' validate,
      * it will be validated again in {@link DruidDataSource#init()}.
      *
      * for fix issue #3084, #2763

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -1231,6 +1231,8 @@ protected SQLDataType parseDataTypeRest(SQLDataType dataType) {
             if (lexer.identifierEquals(FnvHash.Constants.UNSIGNED)) {
                 lexer.nextToken();
                 ((SQLDataTypeImpl) dataType).setUnsigned(true);
+            } else if (lexer.identifierEquals(FnvHash.Constants.SIGNED)) {
+                lexer.nextToken(); // skip
             } else if (lexer.identifierEquals(FnvHash.Constants.ZEROFILL)) {
                 lexer.nextToken();
                 ((SQLDataTypeImpl) dataType).setZerofill(true);

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceWrapper.java
Patch:
@@ -29,7 +29,7 @@
  * @author lihengming [89921218@qq.com]
  */
 @ConfigurationProperties("spring.datasource.druid")
-class DruidDataSourceWrapper extends DruidDataSource implements InitializingBean {
+public class DruidDataSourceWrapper extends DruidDataSource implements InitializingBean {
     @Autowired
     private DataSourceProperties basicProperties;
 

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -71,7 +71,7 @@ public interface JdbcConstants {
 
     DbType KINGBASE                   = DbType.kingbase;
     String KINGBASE_DRIVER            = "com.kingbase.Driver";
-    String KINGBASE8_DRIVER           = "om.kingbase8.Driver";
+    String KINGBASE8_DRIVER           = "com.kingbase8.Driver";
 
     DbType GBASE                      = DbType.gbase;
     String GBASE_DRIVER               = "com.gbase.jdbc.Driver";

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest156_ob.java
Patch:
@@ -33,7 +33,7 @@ public void test_0() throws Exception {
                 "\t`gmt_create` datetime NOT NULL COMMENT '创建时间',\n" +
                 "\t`gmt_modified` datetime NOT NULL COMMENT '修改时间',\n" +
                 "\tPRIMARY KEY (`id`),\n" +
-                "\tKEY `idx_ranking` (`user_id`, `scene_code`, `record_type`, `record_date`)\n" +
+                "\tKEY `idx_ranking` (`user_id`, `scene_code`, `record_type`, `record_date`) KEY_BLOCK_SIZE = 16384\n" +
                 ") AUTO_INCREMENT = 1000001 CHARSET = utf8mb4 COMPRESSION = 'lz4_1.0' REPLICA_NUM = 3 BLOCK_SIZE = 16384 USE_BLOOM_FILTER = false TABLET_SIZE = 134217728 PCTFREE = 10 COMMENT 'ar平台数据排行榜';", stmt.toString());
     }
 }
\ No newline at end of file

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest157_shadow.java
Patch:
@@ -38,7 +38,7 @@ public void test_0() throws Exception {
                 "\t`gmt_create` datetime NOT NULL COMMENT '创建时间',\n" +
                 "\t`gmt_modified` datetime NOT NULL COMMENT '修改时间',\n" +
                 "\tPRIMARY KEY (`id`),\n" +
-                "\tKEY `idx_ranking` (`user_id`, `scene_code`, `record_type`, `record_date`)\n" +
+                "\tKEY `idx_ranking` (`user_id`, `scene_code`, `record_type`, `record_date`) KEY_BLOCK_SIZE = 16384\n" +
                 ") AUTO_INCREMENT = 1000001 CHARSET = utf8mb4;", stmt.toString());
     }
 }
\ No newline at end of file

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlLockTableStatement.java
Patch:
@@ -19,13 +19,14 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
+import com.alibaba.druid.sql.ast.statement.SQLLockTableStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
 import java.util.ArrayList;
 import java.util.List;
 
-public class MySqlLockTableStatement extends MySqlStatementImpl {
+public class MySqlLockTableStatement extends MySqlStatementImpl implements SQLLockTableStatement {
 
     private List<Item> items = new ArrayList<Item>();
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleLockTableStatement.java
Patch:
@@ -19,12 +19,13 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
+import com.alibaba.druid.sql.ast.statement.SQLLockTableStatement;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
 import java.util.ArrayList;
 import java.util.List;
 
-public class OracleLockTableStatement extends OracleStatementImpl {
+public class OracleLockTableStatement extends OracleStatementImpl implements SQLLockTableStatement {
 
     private SQLExprTableSource table;
     private LockMode lockMode;

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -26,6 +26,7 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.*;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleExecuteImmediateStatement;
+import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleLockTableStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMultiInsertStatement;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerExecStatement;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerInsertStatement;
@@ -2636,7 +2637,7 @@ public static void preVisitCheck(WallVisitor visitor, SQLObject x) {
             allow = config.isHintAllow();
             denyMessage = "hint not allow";
             errorCode = ErrorCode.HINT_NOT_ALLOW;
-        } else if (x instanceof MySqlLockTableStatement) {
+        } else if (x instanceof SQLLockTableStatement) {
             allow = config.isLockTableAllow();
             denyMessage = "lock table not allow";
             errorCode = ErrorCode.LOCK_TABLE_NOT_ALLOW;

File: druid-admin/src/main/java/com/alibaba/druid/admin/service/MonitorStatService.java
Patch:
@@ -117,7 +117,7 @@ public Map<String, ServiceNode> getServiceAllNodeMap(Map<String, String> paramet
                 int port = instance.getPort();
                 String serviceId = instance.getServiceId();
                 // 根据前端参数采集指定的服务
-                if (serviceId.equals(requestServiceName)) {
+                if (serviceId.equalsIgnoreCase(requestServiceName)) {
                     ServiceNode serviceNode = new ServiceNode();
                     serviceNode.setId(instanceId);
                     serviceNode.setPort(port);

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -2048,8 +2048,6 @@ public SQLName name() {
                 case SHOW:
                 case FOR:
                 case LEAVE:
-                case MODE:
-                case NOWAIT:
                     identName = lexer.stringVal();
                     lexer.nextToken();
                     break;

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -2048,6 +2048,8 @@ public SQLName name() {
                 case SHOW:
                 case FOR:
                 case LEAVE:
+                case MODE:
+                case NOWAIT:
                     identName = lexer.stringVal();
                     lexer.nextToken();
                     break;

File: src/test/java/com/alibaba/druid/bvt/bug/Issue4253.java
Patch:
@@ -19,7 +19,7 @@ public class Issue4253 extends TestCase {
     private final DbType dbType = JdbcConstants.ORACLE;
 
     public void test_for_issue() throws Exception {
-        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("bvt/parser/oracle-62.txt");
+        InputStream is = Thread.currentThread().getContextClassLoader().getResourceAsStream("bvt/parser/oracle-63.txt");
         Reader reader = new InputStreamReader(is, StandardCharsets.UTF_8);
         String input = Utils.read(reader);
         JdbcUtils.close(reader);

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceC3P0Adapter.java
Patch:
@@ -165,7 +165,9 @@ public int getIdleConnectionTestPeriod() {
     }
 
     public void setIdleConnectionTestPeriod(int idleConnectionTestPeriod) {
-        dataSource.setTimeBetweenEvictionRunsMillis(((long) idleConnectionTestPeriod) * 1000L);
+        long timeBetweenEvictionRunsMillis = ((long) idleConnectionTestPeriod) * 1000L;
+        dataSource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
+        dataSource.setKeepAliveBetweenTimeMillis(timeBetweenEvictionRunsMillis * 2);
     }
 
     public int getInitialPoolSize() {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableSourceImpl.java
Patch:
@@ -129,7 +129,7 @@ public SQLColumnDefinition findColumn(String columnName) {
             return null;
         }
 
-        long hash = FnvHash.hashCode64(alias);
+        long hash = FnvHash.hashCode64(columnName);
         return findColumn(hash);
     }
 
@@ -146,7 +146,7 @@ public SQLTableSource findTableSourceWithColumn(String columnName) {
             return null;
         }
 
-        long hash = FnvHash.hashCode64(alias);
+        long hash = FnvHash.hashCode64(columnName);
         return findTableSourceWithColumn(hash, columnName, 0);
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -5272,7 +5272,7 @@ public boolean visit(MySqlAlterLogFileGroupStatement x) {
 
     @Override
     public boolean visit(MySqlAlterServerStatement x) {
-        print0(ucase ? "ATLER SERVER " : "alter server ");
+        print0(ucase ? "ALTER SERVER " : "alter server ");
         x.getName().accept(this);
 
         print(" OPTIONS(");

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -4808,15 +4808,15 @@ public boolean visit(SQLAlterTableGroupStatement x) {
 
     @Override
     public boolean visit(SQLAlterSystemGetConfigStatement x) {
-        print0(ucase ? "ALTER SYSTEM GET CONFIG " : "atler system get config ");
+        print0(ucase ? "ALTER SYSTEM GET CONFIG " : "alter system get config ");
         x.getName().accept(this);
 
         return false;
     }
 
     @Override
     public boolean visit(SQLAlterSystemSetConfigStatement x) {
-        print0(ucase ? "ALTER SYSTEM SET COFNIG " : "atler system set config ");
+        print0(ucase ? "ALTER SYSTEM SET COFNIG " : "alter system set config ");
 
         printAndAccept(x.getOptions(), " ");
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -3575,6 +3575,7 @@ public SQLStatement parseCreateMaterializedView() {
                             if (name != null) {
                                 key.setName(name);
                             }
+                            key.setParent(stmt);
                             stmt.getTableElementList().add(key);
                         }
                         continue;

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1090,7 +1090,7 @@ public SQLExpr primary() {
             case LIKE:
             case UNION:
             case CREATE:
-                if (dbType == DbType.odps) {
+                if (dbType == DbType.odps || dbType == DbType.hive) {
                     sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                     lexer.nextToken();
                     break;

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1388,7 +1388,7 @@ public void validateConnection(Connection conn) throws SQLException {
         }
 
         if (validConnectionChecker != null) {
-            boolean result = true;
+            boolean result;
             Exception error = null;
             try {
                 result = validConnectionChecker.isValidConnection(conn, validationQuery, validationQueryTimeout);
@@ -1406,6 +1406,7 @@ public void validateConnection(Connection conn) throws SQLException {
             } catch (SQLException ex) {
                 throw ex;
             } catch (Exception ex) {
+                result = false;
                 error = ex;
             }
             

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -3836,6 +3836,8 @@ public SQLDataType parseDataType(boolean restrict) {
 
             if (lexer.identifierEquals(FnvHash.Constants.ARRAY)) {
                 return parseDataTypeRest(charType);
+            } else if (lexer.token == Token.LBRACKET) {
+                return parseDataTypeRest(charType);
             }
 
             return charType;

File: src/test/java/com/alibaba/druid/bvt/pool/vendor/MySqlExceptionSorterTest.java
Patch:
@@ -38,7 +38,8 @@ public void test_false() throws Exception {
     
     public void test_false_1() throws Exception {
         MySqlExceptionSorter sorter = new MySqlExceptionSorter();
-        Assert.assertFalse(sorter.isExceptionFatal(new SQLException("", "", -8000)));
+        Assert.assertTrue(sorter.isExceptionFatal(new SQLException("", "", -8000)));
+        Assert.assertFalse(sorter.isExceptionFatal(new SQLException("", "", -9100)));
     }
     
 //    public void test_true_3() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/vendor/MySqlExceptionSorterTest_oceanbase.java
Patch:
@@ -19,7 +19,7 @@ public void test_true() throws Exception {
     
     public void test_true_1() throws Exception {
         MySqlExceptionSorter sorter = new MySqlExceptionSorter();
-        Assert.assertTrue(sorter.isExceptionFatal(new SQLException("", "", -10000)));
+        Assert.assertFalse(sorter.isExceptionFatal(new SQLException("", "", -10000)));
     }
     
     public void test_false() throws Exception {
@@ -29,6 +29,7 @@ public void test_false() throws Exception {
     
     public void test_false_1() throws Exception {
         MySqlExceptionSorter sorter = new MySqlExceptionSorter();
-        Assert.assertFalse(sorter.isExceptionFatal(new SQLException("", "", -8000)));
+        Assert.assertTrue(sorter.isExceptionFatal(new SQLException("", "", -8000)));
+        Assert.assertFalse(sorter.isExceptionFatal(new SQLException("", "", -9100)));
     }
 }

File: druid-admin/src/main/java/com/alibaba/druid/admin/service/MonitorStatService.java
Patch:
@@ -117,7 +117,7 @@ public Map<String, ServiceNode> getServiceAllNodeMap(Map<String, String> paramet
                 int port = instance.getPort();
                 String serviceId = instance.getServiceId();
                 // 根据前端参数采集指定的服务
-                if (serviceId.equals(requestServiceName)) {
+                if (serviceId.equalsIgnoreCase(requestServiceName)) {
                     ServiceNode serviceNode = new ServiceNode();
                     serviceNode.setId(instanceId);
                     serviceNode.setPort(port);

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1584,6 +1584,9 @@ protected SQLExpr methodRest(SQLExpr expr, boolean acceptLPAREN) {
                 aggregateExpr.setOption(SQLAggregateOption.DISTINCT);
             }
 
+            if (lexer.token == Token.COLONCOLON) {
+                return primaryRest(aggregateExpr);
+            }
 
             return aggregateExpr;
         }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableSourceImpl.java
Patch:
@@ -129,7 +129,7 @@ public SQLColumnDefinition findColumn(String columnName) {
             return null;
         }
 
-        long hash = FnvHash.hashCode64(alias);
+        long hash = FnvHash.hashCode64(columnName);
         return findColumn(hash);
     }
 
@@ -146,7 +146,7 @@ public SQLTableSource findTableSourceWithColumn(String columnName) {
             return null;
         }
 
-        long hash = FnvHash.hashCode64(alias);
+        long hash = FnvHash.hashCode64(columnName);
         return findTableSourceWithColumn(hash, columnName, 0);
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -314,6 +314,7 @@ protected String as() {
                 case VIEW:
                 case KILL:
                 case COMMENT:
+                case TABLESPACE:
                     alias = lexer.stringVal();
                     lexer.nextToken();
                     break;
@@ -506,6 +507,7 @@ protected String alias() {
                 case OUT:
                 case BY:
                 case EXCEPT:
+                case TABLESPACE:
                     alias = lexer.stringVal();
                     lexer.nextToken();
                     return alias;

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2999,7 +2999,7 @@ public void printParameter(Object param) {
         }
 
         if (param instanceof Number //
-            || param instanceof Boolean || param instanceof java.time.temporal.Temporal) {
+            || param instanceof Boolean || param instanceof java.time.temporal.Temporal ) {
             print0(param.toString());
             return;
         }

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlExceptionSorter.java
Patch:
@@ -70,7 +70,7 @@ public boolean isExceptionFatal(SQLException e) {
         }
         
         // for oceanbase
-        if (errorCode >= -10000 && errorCode <= -9000) {
+        if (errorCode >= -9000 && errorCode <= -8000) {
             return true;
         }
         

File: src/main/java/com/alibaba/druid/sql/dialect/ads/parser/AdsLexer.java
Patch:
@@ -34,12 +34,12 @@ public class AdsLexer extends Lexer {
     public AdsLexer(String input) {
         super(input);
         dbType = DbType.ads;
-        super.keywods = DEFAULT_ADS_KEYWORDS;
+        super.keywords = DEFAULT_ADS_KEYWORDS;
     }
 
     public AdsLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_ADS_KEYWORDS;
+        super.keywords = DEFAULT_ADS_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/antspark/parser/AntsparkLexer.java
Patch:
@@ -49,7 +49,7 @@ public class AntsparkLexer extends Lexer {
     public AntsparkLexer(String input) {
         super(input);
         dbType= DbType.antspark;
-        super.keywods = DEFAULT_ANTSPARK_KEYWORDS;
+        super.keywords = DEFAULT_ANTSPARK_KEYWORDS;
     }
 
 }
\ No newline at end of file

File: src/main/java/com/alibaba/druid/sql/dialect/blink/parser/BlinkLexer.java
Patch:
@@ -33,13 +33,13 @@ public class BlinkLexer extends Lexer {
 
     public BlinkLexer(String input){
         super(input);
-        super.keywods = DEFAULT_BLINK_KEYWORDS;
+        super.keywords = DEFAULT_BLINK_KEYWORDS;
         dbType = DbType.blink;
     }
 
     public BlinkLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_BLINK_KEYWORDS;
+        super.keywords = DEFAULT_BLINK_KEYWORDS;
         dbType = DbType.blink;
         for (SQLParserFeature feature : features) {
             config(feature, true);

File: src/main/java/com/alibaba/druid/sql/dialect/clickhouse/parser/ClickhouseLexer.java
Patch:
@@ -35,12 +35,12 @@ public class ClickhouseLexer extends Lexer {
     public ClickhouseLexer(String input) {
         super(input);
         dbType = DbType.clickhouse;
-        super.keywods = DEFAULT_KEYWORDS;
+        super.keywords = DEFAULT_KEYWORDS;
     }
 
     public ClickhouseLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_KEYWORDS;
+        super.keywords = DEFAULT_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/db2/parser/DB2Lexer.java
Patch:
@@ -50,12 +50,12 @@ public class DB2Lexer extends Lexer {
 
     public DB2Lexer(String input){
         super(input);
-        super.keywods = DEFAULT_DB2_KEYWORDS;
+        super.keywords = DEFAULT_DB2_KEYWORDS;
     }
 
     public DB2Lexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_DB2_KEYWORDS;
+        super.keywords = DEFAULT_DB2_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/h2/parser/H2Lexer.java
Patch:
@@ -47,12 +47,12 @@ public class H2Lexer extends Lexer {
 
     public H2Lexer(String input){
         super(input, null, DbType.h2);
-        super.keywods = DEFAULT_H2_KEYWORDS;
+        super.keywords = DEFAULT_H2_KEYWORDS;
     }
 
     public H2Lexer(String input, SQLParserFeature... features){
         super(input, null, DbType.h2);
-        super.keywods = DEFAULT_H2_KEYWORDS;
+        super.keywords = DEFAULT_H2_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveLexer.java
Patch:
@@ -60,15 +60,15 @@ public HiveLexer(String input){
         this.keepComments = true;
         dbType = DbType.hive;
         this.features |= SQLParserFeature.SupportUnicodeCodePoint.mask;
-        super.keywods = DEFAULT_HIVE_KEYWORDS;
+        super.keywords = DEFAULT_HIVE_KEYWORDS;
     }
 
     public HiveLexer(String input, SQLParserFeature... features){
         super(input);
         dbType = DbType.hive;
         this.skipComment = true;
         this.keepComments = true;
-        super.keywods = DEFAULT_HIVE_KEYWORDS;
+        super.keywords = DEFAULT_HIVE_KEYWORDS;
         this.features |= SQLParserFeature.SupportUnicodeCodePoint.mask;
         for (SQLParserFeature feature : features) {
             config(feature, true);

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/parser/PhoenixLexer.java
Patch:
@@ -52,7 +52,7 @@ public class PhoenixLexer extends Lexer {
 
     public PhoenixLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_PHOENIX_KEYWORDS;
+        super.keywords = DEFAULT_PHOENIX_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -78,7 +78,7 @@ public class PGLexer extends Lexer {
     public PGLexer(String input, SQLParserFeature... features){
         super(input, true);
         this.keepComments = true;
-        super.keywods = DEFAULT_PG_KEYWORDS;
+        super.keywords = DEFAULT_PG_KEYWORDS;
         super.dbType = DbType.postgresql;
         for (SQLParserFeature feature : features) {
             config(feature, true);

File: src/main/java/com/alibaba/druid/sql/dialect/presto/parser/PrestoLexer.java
Patch:
@@ -39,7 +39,7 @@ public class PrestoLexer extends Lexer {
 
     public PrestoLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_PHOENIX_KEYWORDS;
+        super.keywords = DEFAULT_PHOENIX_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerLexer.java
Patch:
@@ -53,17 +53,17 @@ public class SQLServerLexer extends Lexer {
 
     public SQLServerLexer(char[] input, int inputLength, boolean skipComment){
         super(input, inputLength, skipComment);
-        super.keywods = DEFAULT_SQL_SERVER_KEYWORDS;
+        super.keywords = DEFAULT_SQL_SERVER_KEYWORDS;
     }
 
     public SQLServerLexer(String input){
         super(input);
-        super.keywods = DEFAULT_SQL_SERVER_KEYWORDS;
+        super.keywords = DEFAULT_SQL_SERVER_KEYWORDS;
     }
 
     public SQLServerLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_SQL_SERVER_KEYWORDS;
+        super.keywords = DEFAULT_SQL_SERVER_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -71,6 +71,7 @@ public interface JdbcConstants {
 
     DbType KINGBASE                   = DbType.kingbase;
     String KINGBASE_DRIVER            = "com.kingbase.Driver";
+    String KINGBASE8_DRIVER           = "om.kingbase8.Driver";
 
     DbType GBASE                      = DbType.gbase;
     String GBASE_DRIVER               = "com.gbase.jdbc.Driver";

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -493,8 +493,10 @@ public static String getDriverClassName(String rawUrl) throws SQLException {
             return "com.mimer.jdbc.Driver";
         } else if (rawUrl.startsWith("jdbc:dm:")) {
             return JdbcConstants.DM_DRIVER;
-        } else if (rawUrl.startsWith("jdbc:kingbase:") || rawUrl.startsWith("jdbc:kingbase8:")) {
+        } else if (rawUrl.startsWith("jdbc:kingbase:")) {
             return JdbcConstants.KINGBASE_DRIVER;
+        } else if (rawUrl.startsWith("jdbc:kingbase8:")) {
+            return JdbcConstants.KINGBASE8_DRIVER;
         } else if (rawUrl.startsWith("jdbc:gbase:")) {
             return JdbcConstants.GBASE_DRIVER;
         } else if (rawUrl.startsWith("jdbc:xugu:")) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlPrimaryKey.java
Patch:
@@ -22,7 +22,7 @@
 public class MySqlPrimaryKey extends MySqlKey implements SQLPrimaryKey {
 
     public MySqlPrimaryKey(){
-        dbType = DbType.oracle;
+        dbType = DbType.mysql;
     }
 
     protected void accept0(MySqlASTVisitor visitor) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MysqlForeignKey.java
Patch:
@@ -32,7 +32,7 @@ public class MysqlForeignKey extends SQLForeignKeyImpl {
     protected Option onDelete;
 
     public MysqlForeignKey() {
-        dbType = DbType.oracle;
+        dbType = DbType.mysql;
     }
 
     public SQLName getIndexName() {

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -1214,7 +1214,8 @@ public SQLStatement parseRollback() {
     }
 
     public SQLStatement parseCommit() {
-        throw new ParserException("TODO " + lexer.info());
+        acceptIdentifier("COMMIT");
+        return new SQLCommitStatement();
     }
 
     public SQLStatement parseShow() {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -128,6 +128,7 @@ protected boolean isCharType(long hash) {
                 || hash == FnvHash.Constants.VARCHAR2
                 || hash == FnvHash.Constants.NVARCHAR
                 || hash == FnvHash.Constants.NVARCHAR2
+                || hash == FnvHash.Constants.CHARACTER
                 ;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -620,7 +620,8 @@ public SQLTableSource parseTableSourcePrimary() {
                 tableSource = new OracleSelectSubqueryTableSource(select());
             } else if (lexer.token() == Token.LPAREN) {
                 tableSource = (OracleSelectTableSource) parseTableSource();
-            } else if (lexer.token() == Token.IDENTIFIER) {
+            } else if (lexer.token() == Token.IDENTIFIER
+                    || lexer.token() == Token.LITERAL_ALIAS) {
                 SQLTableSource identTable = parseTableSource();
                 accept(Token.RPAREN);
                 parsePivot((OracleSelectTableSource) identTable);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -1638,7 +1638,7 @@ public SQLSubPartition parseSubPartition() {
                     lexer.nextToken();
                 }
                 SQLExpr minRows = this.primary();
-                subPartition.setMaxRows(minRows);
+                subPartition.setMinRows(minRows);
             } else if (lexer.identifierEquals(FnvHash.Constants.ENGINE) || //
                     (storage = (lexer.token() == Token.STORAGE || lexer.identifierEquals(FnvHash.Constants.STORAGE)))) {
                 if (storage) {

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -1117,5 +1117,7 @@ public static interface Constants {
         long RESTART = fnv1a_64_lower("RESTART");
 
         long ASOF = fnv1a_64_lower("ASOF");
+        long JSON_SET = fnv1a_64_lower("JSON_SET");
+        long JSONB_SET = fnv1a_64_lower("JSONB_SET");
     }
 }

File: src/main/java/com/alibaba/druid/DbType.java
Patch:
@@ -46,6 +46,7 @@ public enum DbType {
     ali_oracle          (1 << 33),
     mock          (1 << 34),
     sybase          (1 << 35),
+    highgo          (1 << 36),
 
 
     ingres          (0),

File: src/test/java/com/alibaba/druid/bvt/sql/hive/HiveCreateTableTest_36_dla.java
Patch:
@@ -46,10 +46,10 @@ public void test_0() throws Exception {
             String text = SQLUtils.toSQLString(stmt, JdbcConstants.HIVE);
 
             assertEquals("CREATE TABLE dla_table1\n" +
+                    "LIKE dla_table2\n" +
                     "TBLPROPERTIES (\n" +
                     "\t'column_mapping' = 'hello,world;james,bond;'\n" +
-                    ")\n" +
-                    "LIKE dla_table2;", text);
+                    ");", text);
         }
 
         System.out.println("Tables : " + visitor.getTables());

File: src/test/java/com/alibaba/druid/bvt/sql/hive/HiveCreateTableTest_46_dla.java
Patch:
@@ -29,10 +29,10 @@ public void test_0() throws Exception {
         SQLStatement stmt =  SQLUtils.parseSingleStatement(sql, DbType.hive, SQLParserFeature.KeepComments);
 
         assertEquals("CREATE EXTERNAL TABLE parquet_tbl\n" +
+                "LIKE MAPPING('oss://user/etl/destination/datafile1.dat')\n" +
                 "TBLPROPERTIES (\n" +
                 "\t'target.table.location' = 'oss://user/etl/destination/'\n" +
-                ")\n" +
-                "LIKE MAPPING('oss://user/etl/destination/datafile1.dat')", stmt.toString());
+                ")", stmt.toString());
 
         assertEquals(stmt.toString(), SQLUtils.parseSingleStatement(stmt.toString(), DbType.hive, SQLParserFeature.KeepComments).toString());
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -117,6 +117,7 @@ public boolean visit(OracleAnalyticWindowing x) {
             SQLBetweenExpr betweenExpr = (SQLBetweenExpr) expr;
             SQLOver.WindowingBound beginBound = over.getWindowingBetweenBeginBound();
             if (beginBound != null) {
+                print0(ucase ? " BETWEEN " : " between ");
                 betweenExpr.getBeginExpr().accept(this);
                 print(' ');
                 print0(ucase ? beginBound.name : beginBound.name_lower);

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -117,6 +117,7 @@ public boolean visit(OracleAnalyticWindowing x) {
             SQLBetweenExpr betweenExpr = (SQLBetweenExpr) expr;
             SQLOver.WindowingBound beginBound = over.getWindowingBetweenBeginBound();
             if (beginBound != null) {
+                print0(ucase ? " BETWEEN " : " between ");
                 betweenExpr.getBeginExpr().accept(this);
                 print(' ');
                 print0(ucase ? beginBound.name : beginBound.name_lower);

File: src/main/java/com/alibaba/druid/sql/dialect/ads/parser/AdsLexer.java
Patch:
@@ -34,12 +34,12 @@ public class AdsLexer extends Lexer {
     public AdsLexer(String input) {
         super(input);
         dbType = DbType.ads;
-        super.keywods = DEFAULT_ADS_KEYWORDS;
+        super.keywords = DEFAULT_ADS_KEYWORDS;
     }
 
     public AdsLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_ADS_KEYWORDS;
+        super.keywords = DEFAULT_ADS_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/antspark/parser/AntsparkLexer.java
Patch:
@@ -49,7 +49,7 @@ public class AntsparkLexer extends Lexer {
     public AntsparkLexer(String input) {
         super(input);
         dbType= DbType.antspark;
-        super.keywods = DEFAULT_ANTSPARK_KEYWORDS;
+        super.keywords = DEFAULT_ANTSPARK_KEYWORDS;
     }
 
 }
\ No newline at end of file

File: src/main/java/com/alibaba/druid/sql/dialect/blink/parser/BlinkLexer.java
Patch:
@@ -33,13 +33,13 @@ public class BlinkLexer extends Lexer {
 
     public BlinkLexer(String input){
         super(input);
-        super.keywods = DEFAULT_BLINK_KEYWORDS;
+        super.keywords = DEFAULT_BLINK_KEYWORDS;
         dbType = DbType.blink;
     }
 
     public BlinkLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_BLINK_KEYWORDS;
+        super.keywords = DEFAULT_BLINK_KEYWORDS;
         dbType = DbType.blink;
         for (SQLParserFeature feature : features) {
             config(feature, true);

File: src/main/java/com/alibaba/druid/sql/dialect/clickhouse/parser/ClickhouseLexer.java
Patch:
@@ -35,12 +35,12 @@ public class ClickhouseLexer extends Lexer {
     public ClickhouseLexer(String input) {
         super(input);
         dbType = DbType.clickhouse;
-        super.keywods = DEFAULT_KEYWORDS;
+        super.keywords = DEFAULT_KEYWORDS;
     }
 
     public ClickhouseLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_KEYWORDS;
+        super.keywords = DEFAULT_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/db2/parser/DB2Lexer.java
Patch:
@@ -50,12 +50,12 @@ public class DB2Lexer extends Lexer {
 
     public DB2Lexer(String input){
         super(input);
-        super.keywods = DEFAULT_DB2_KEYWORDS;
+        super.keywords = DEFAULT_DB2_KEYWORDS;
     }
 
     public DB2Lexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_DB2_KEYWORDS;
+        super.keywords = DEFAULT_DB2_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/h2/parser/H2Lexer.java
Patch:
@@ -47,12 +47,12 @@ public class H2Lexer extends Lexer {
 
     public H2Lexer(String input){
         super(input, null, DbType.h2);
-        super.keywods = DEFAULT_H2_KEYWORDS;
+        super.keywords = DEFAULT_H2_KEYWORDS;
     }
 
     public H2Lexer(String input, SQLParserFeature... features){
         super(input, null, DbType.h2);
-        super.keywods = DEFAULT_H2_KEYWORDS;
+        super.keywords = DEFAULT_H2_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveLexer.java
Patch:
@@ -60,15 +60,15 @@ public HiveLexer(String input){
         this.keepComments = true;
         dbType = DbType.hive;
         this.features |= SQLParserFeature.SupportUnicodeCodePoint.mask;
-        super.keywods = DEFAULT_HIVE_KEYWORDS;
+        super.keywords = DEFAULT_HIVE_KEYWORDS;
     }
 
     public HiveLexer(String input, SQLParserFeature... features){
         super(input);
         dbType = DbType.hive;
         this.skipComment = true;
         this.keepComments = true;
-        super.keywods = DEFAULT_HIVE_KEYWORDS;
+        super.keywords = DEFAULT_HIVE_KEYWORDS;
         this.features |= SQLParserFeature.SupportUnicodeCodePoint.mask;
         for (SQLParserFeature feature : features) {
             config(feature, true);

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/parser/PhoenixLexer.java
Patch:
@@ -52,7 +52,7 @@ public class PhoenixLexer extends Lexer {
 
     public PhoenixLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_PHOENIX_KEYWORDS;
+        super.keywords = DEFAULT_PHOENIX_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -78,7 +78,7 @@ public class PGLexer extends Lexer {
     public PGLexer(String input, SQLParserFeature... features){
         super(input, true);
         this.keepComments = true;
-        super.keywods = DEFAULT_PG_KEYWORDS;
+        super.keywords = DEFAULT_PG_KEYWORDS;
         super.dbType = DbType.postgresql;
         for (SQLParserFeature feature : features) {
             config(feature, true);

File: src/main/java/com/alibaba/druid/sql/dialect/presto/parser/PrestoLexer.java
Patch:
@@ -39,7 +39,7 @@ public class PrestoLexer extends Lexer {
 
     public PrestoLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_PHOENIX_KEYWORDS;
+        super.keywords = DEFAULT_PHOENIX_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerLexer.java
Patch:
@@ -53,17 +53,17 @@ public class SQLServerLexer extends Lexer {
 
     public SQLServerLexer(char[] input, int inputLength, boolean skipComment){
         super(input, inputLength, skipComment);
-        super.keywods = DEFAULT_SQL_SERVER_KEYWORDS;
+        super.keywords = DEFAULT_SQL_SERVER_KEYWORDS;
     }
 
     public SQLServerLexer(String input){
         super(input);
-        super.keywods = DEFAULT_SQL_SERVER_KEYWORDS;
+        super.keywords = DEFAULT_SQL_SERVER_KEYWORDS;
     }
 
     public SQLServerLexer(String input, SQLParserFeature... features){
         super(input);
-        super.keywods = DEFAULT_SQL_SERVER_KEYWORDS;
+        super.keywords = DEFAULT_SQL_SERVER_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);
         }

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -2299,7 +2299,7 @@ protected void over(SQLOver over) {
         accept(Token.RPAREN);
     }
 
-    private SQLOver.WindowingBound parseWindowingBound() {
+    protected SQLOver.WindowingBound parseWindowingBound() {
         if (lexer.identifierEquals(FnvHash.Constants.PRECEDING)) {
             lexer.nextToken();
             return SQLOver.WindowingBound.PRECEDING;

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -2568,7 +2568,8 @@ public static void preVisitCheck(WallVisitor visitor, SQLObject x) {
             allow = config.isUpdateAllow();
             denyMessage = "update not allow";
             errorCode = ErrorCode.UPDATE_NOT_ALLOW;
-        } else if (x instanceof OracleMultiInsertStatement) {
+        } else if (x instanceof OracleMultiInsertStatement
+                || x instanceof OracleMultiInsertStatement.InsertIntoClause) {
             allow = true;
             denyMessage = "multi-insert not allow";
             errorCode = ErrorCode.INSERT_NOT_ALLOW;

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -2759,7 +2759,6 @@ public boolean visit(SQLDescribeStatement x) {
         SQLName tableName = x.getObject();
 
         TableStat tableStat = this.getTableStat(x.getObject());
-        tableStat.incrementDropIndexCount();
 
         SQLName column = x.getColumn();
         if (column != null) {

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2939,7 +2939,9 @@ public boolean visit(SQLSelectStatement stmt) {
         }
 
         SQLSelect select = stmt.getSelect();
-        this.visit(select);
+        if (select != null) {
+            this.visit(select);
+        }
 
         return false;
     }

File: src/main/java/com/alibaba/druid/wall/WallVisitor.java
Patch:
@@ -149,7 +149,7 @@ default void preVisit(SQLObject x) {
     @Override
     default boolean visit(SQLSelectStatement x) {
         WallConfig config = getConfig();
-        if (!config.isSelelctAllow()) {
+        if (!config.isSelectAllow()) {
             this.getViolations()
                     .add(new IllegalSQLObjectViolation(ErrorCode.SELECT_NOT_ALLOW, "select not allow",
                     this.toSQL(x)));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallConfigTest.java
Patch:
@@ -15,7 +15,7 @@ public void test_selectAllow() throws Exception {
         WallConfig config = new WallConfig();
         config.configFromProperties(properties);
         
-        Assert.assertTrue(config.isSelelctAllow());
+        Assert.assertTrue(config.isSelectAllow());
     }
     
     public void test_selectAllow_false() throws Exception {
@@ -24,7 +24,7 @@ public void test_selectAllow_false() throws Exception {
         WallConfig config = new WallConfig();
         config.configFromProperties(properties);
         
-        Assert.assertFalse(config.isSelelctAllow());
+        Assert.assertFalse(config.isSelectAllow());
     }
     
     public void test_deleteAllow() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlResourceTest.java
Patch:
@@ -58,6 +58,9 @@ public void test_14() throws Exception {
     public void test_16() throws Exception {
         exec_test("bvt/parser/mysql-16.txt");
     }
+    public void test_17() throws Exception {
+        exec_test("bvt/parser/mysql-17.txt");
+    }
 
     public void exec_test(String resource) throws Exception {
 //        System.out.println(resource);

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -126,6 +126,7 @@ protected boolean isCharType(long hash) {
                 || hash == FnvHash.Constants.VARCHAR2
                 || hash == FnvHash.Constants.NVARCHAR
                 || hash == FnvHash.Constants.NVARCHAR2
+                || hash == FnvHash.Constants.CHARACTER
                 ;
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -4855,7 +4855,7 @@ public SQLForeignKeyConstraint parseForeignKey() {
         if (lexer.token == Token.ON) {
             lexer.nextToken();
             accept(Token.DELETE);
-            if (lexer.identifierEquals(FnvHash.Constants.CASCADE)) {
+            if (lexer.identifierEquals(FnvHash.Constants.CASCADE) || lexer.token == Token.CASCADE) {
                 lexer.nextToken();
                 fk.setOnDeleteCascade(true);
             } else {

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1116,7 +1116,7 @@ public SQLExpr primary() {
                 }
                 throw new ParserException("ERROR. " + lexer.info());
             case LBRACKET:
-                if (dbType == DbType.odps) {
+                if (dbType == DbType.odps || dbType == DbType.clickhouse) {
                     SQLArrayExpr array = new SQLArrayExpr();
                     lexer.nextToken();
                     this.exprList(array.getValues(), array);

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -2476,7 +2476,9 @@ public boolean visit(SQLArrayExpr x) {
                 return false;
             }
         }
-        exp.accept(this);
+        if (exp != null) {
+            exp.accept(this);
+        }
         return false;
     }
     

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -39,7 +39,6 @@ public class MySqlLexer extends Lexer {
         map.put("DUAL", Token.DUAL);
         map.put("FALSE", Token.FALSE);
         map.put("IF", Token.IF);
-        map.put("ELSEIF", Token.ELSEIF);
         map.put("KILL", Token.KILL);
 
         map.put("LIMIT", Token.LIMIT);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -4261,7 +4261,7 @@ public boolean visit(SQLIfStatement x) {
 
     @Override
     public boolean visit(SQLIfStatement.ElseIf x) {
-        print0(ucase ? "ELSEIF " : "elseif ");
+        print0(ucase ? "ELSE IF " : "else if ");
         x.getCondition().accept(this);
         print0(ucase ? " THEN" : " then");
         this.indentCount++;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -49,8 +49,7 @@ public class OracleLexer extends Lexer {
         map.put("GOTO", Token.GOTO);
         map.put("IF", Token.IF);
         map.put("ELSIF", Token.ELSIF);
-        map.put("RECORD", Token.RECORD);
-        
+
         map.put("LIMIT", Token.LIMIT);
         map.put("LOOP", Token.LOOP);
         map.put("MATCHED", Token.MATCHED);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -39,7 +39,6 @@ public class MySqlLexer extends Lexer {
         map.put("DUAL", Token.DUAL);
         map.put("FALSE", Token.FALSE);
         map.put("IF", Token.IF);
-        map.put("ELSEIF", Token.ELSEIF);
         map.put("KILL", Token.KILL);
 
         map.put("LIMIT", Token.LIMIT);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -4261,7 +4261,7 @@ public boolean visit(SQLIfStatement x) {
 
     @Override
     public boolean visit(SQLIfStatement.ElseIf x) {
-        print0(ucase ? "ELSEIF " : "elseif ");
+        print0(ucase ? "ELSE IF " : "else if ");
         x.getCondition().accept(this);
         print0(ucase ? " THEN" : " then");
         this.indentCount++;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -49,8 +49,7 @@ public class OracleLexer extends Lexer {
         map.put("GOTO", Token.GOTO);
         map.put("IF", Token.IF);
         map.put("ELSIF", Token.ELSIF);
-        map.put("RECORD", Token.RECORD);
-        
+
         map.put("LIMIT", Token.LIMIT);
         map.put("LOOP", Token.LOOP);
         map.put("MATCHED", Token.MATCHED);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -39,6 +39,7 @@ public class MySqlLexer extends Lexer {
         map.put("DUAL", Token.DUAL);
         map.put("FALSE", Token.FALSE);
         map.put("IF", Token.IF);
+        map.put("ELSEIF", Token.ELSEIF);
         map.put("KILL", Token.KILL);
 
         map.put("LIMIT", Token.LIMIT);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -4261,7 +4261,7 @@ public boolean visit(SQLIfStatement x) {
 
     @Override
     public boolean visit(SQLIfStatement.ElseIf x) {
-        print0(ucase ? "ELSE IF " : "else if ");
+        print0(ucase ? "ELSEIF " : "elseif ");
         x.getCondition().accept(this);
         print0(ucase ? " THEN" : " then");
         this.indentCount++;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -49,7 +49,8 @@ public class OracleLexer extends Lexer {
         map.put("GOTO", Token.GOTO);
         map.put("IF", Token.IF);
         map.put("ELSIF", Token.ELSIF);
-
+        map.put("RECORD", Token.RECORD);
+        
         map.put("LIMIT", Token.LIMIT);
         map.put("LOOP", Token.LOOP);
         map.put("MATCHED", Token.MATCHED);

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -1114,5 +1114,6 @@ public static interface Constants {
         long X = fnv1a_64_lower("X");
         long TRANSFORM = fnv1a_64_lower("TRANSFORM");
         long NESTED = fnv1a_64_lower("NESTED");
+        long RESTART = fnv1a_64_lower("RESTART");
     }
 }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -6827,7 +6827,8 @@ public boolean visit(SQLParameter x) {
                 String dataTypeName = dataType.getName();
                 boolean printType = (dataTypeName.startsWith("TABLE OF") && x.getDefaultValue() == null)
                         || dataTypeName.equalsIgnoreCase("REF CURSOR")
-                        || dataTypeName.startsWith("VARRAY(");
+                        || dataTypeName.startsWith("VARRAY(")
+                        || dataTypeName.startsWith("RECORD");
                 if (printType) {
                     print0(ucase ? "TYPE " : "type ");
                 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -39,6 +39,7 @@ public class MySqlLexer extends Lexer {
         map.put("DUAL", Token.DUAL);
         map.put("FALSE", Token.FALSE);
         map.put("IF", Token.IF);
+        map.put("ELSEIF", Token.ELSEIF);
         map.put("KILL", Token.KILL);
 
         map.put("LIMIT", Token.LIMIT);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -4261,7 +4261,7 @@ public boolean visit(SQLIfStatement x) {
 
     @Override
     public boolean visit(SQLIfStatement.ElseIf x) {
-        print0(ucase ? "ELSE IF " : "else if ");
+        print0(ucase ? "ELSEIF " : "elseif ");
         x.getCondition().accept(this);
         print0(ucase ? " THEN" : " then");
         this.indentCount++;

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -132,7 +132,7 @@ public enum Token {
     SHOW("SHOW"),
     REPLACE("REPLACE"),
     PERIOD("PERIOD"),
-
+    ELSEIF("ELSEIF"),
     BITS,
 
     // MySql procedure add by zz

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/create/MySqlCreateProcedureTest15.java
Patch:
@@ -50,7 +50,7 @@ public void test_0() throws Exception {
                 "\tINSERT INTO part_tab\n" +
                 "\tVALUES (v, 'testing partitions', ADDDATE('1995-01-01', RAND(v) * 36520 % 3652));\n" +
                 "\tSET v = v + 1;\n" +
-                "\tEND WHILE\n" +
+                "\tEND WHILE;\n" +
                 "END", SQLUtils.toMySqlString(stmt));
 
         SchemaStatVisitor visitor = SQLUtils.createSchemaStatVisitor(JdbcConstants.MYSQL);

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -1523,7 +1523,7 @@ public boolean visit(SQLIfStatement.Else x) {
 
     @Override
     public boolean visit(SQLIfStatement.ElseIf x) {
-        print0(ucase ? "ELSE IF " : "else if ");
+        print0(ucase ? "ELSIF " : "elsif ");
         x.getCondition().accept(this);
         print0(ucase ? " THEN" : " then");
         this.indentCount++;

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -867,7 +867,7 @@ public int getValidationQueryTimeout() {
     }
 
     public void setValidationQueryTimeout(int validationQueryTimeout) {
-        if (validationQueryTimeout < 0 && JdbcConstants.SQL_SERVER.equals(dbTypeName)) {
+        if (validationQueryTimeout < 0 && DbType.of(dbTypeName) == DbType.sqlserver) {
             LOG.error("validationQueryTimeout should be >= 0");
         }
         this.validationQueryTimeout = validationQueryTimeout;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -898,7 +898,7 @@ public SQLStatement parseWhile() {
         accept(Token.END);
         accept(Token.LOOP);
         accept(Token.SEMI);
-
+        stmt.setAfterSemi(true);
         return stmt;
     }
 

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -867,6 +867,7 @@ public static interface Constants {
         long FACE_FEATURE_EXTRACT_V1 = fnv1a_64_lower("FACE_FEATURE_EXTRACT_V1");
         long TEXT_FEATURE_EXTRACT_V1 = fnv1a_64_lower("TEXT_FEATURE_EXTRACT_V1");
 
+        long JSON_TABLE = fnv1a_64_lower("JSON_TABLE");
         long JSON_EXTRACT = fnv1a_64_lower("JSON_EXTRACT");
         long JSON_EXTRACT_SCALAR = fnv1a_64_lower("json_extract_scalar");
         long JSON_ARRAY_GET = fnv1a_64_lower("JSON_ARRAY_GET");
@@ -1112,5 +1113,6 @@ public static interface Constants {
         long _UJIS = fnv1a_64_lower("_UJIS");
         long X = fnv1a_64_lower("X");
         long TRANSFORM = fnv1a_64_lower("TRANSFORM");
+        long NESTED = fnv1a_64_lower("NESTED");
     }
 }

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -2348,7 +2348,7 @@ public SQLOrderBy parseOrderBy() {
     }
 
     public SQLOrderBy parseDistributeBy() {
-        if (lexer.token == Token.DISTRIBUTE) {
+        if (lexer.token == Token.DISTRIBUTE || lexer.identifierEquals("DISTRIBUTE")) {
             SQLOrderBy orderBy = new SQLOrderBy();
 
             lexer.nextToken();

File: src/main/java/com/alibaba/druid/sql/dialect/h2/parser/H2Lexer.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.alibaba.druid.sql.dialect.h2.parser;
 
+import com.alibaba.druid.DbType;
 import com.alibaba.druid.sql.parser.Keywords;
 import com.alibaba.druid.sql.parser.Lexer;
 import com.alibaba.druid.sql.parser.SQLParserFeature;
@@ -45,12 +46,12 @@ public class H2Lexer extends Lexer {
     }
 
     public H2Lexer(String input){
-        super(input);
+        super(input, null, DbType.h2);
         super.keywods = DEFAULT_H2_KEYWORDS;
     }
 
     public H2Lexer(String input, SQLParserFeature... features){
-        super(input);
+        super(input, null, DbType.h2);
         super.keywods = DEFAULT_H2_KEYWORDS;
         for (SQLParserFeature feature : features) {
             config(feature, true);

File: src/main/java/com/alibaba/druid/sql/dialect/h2/visitor/H2OutputVisitor.java
Patch:
@@ -26,7 +26,7 @@
 
 public class H2OutputVisitor extends SQLASTOutputVisitor implements H2ASTVisitor {
     public H2OutputVisitor(Appendable appender) {
-        super(appender);
+        super(appender, DbType.h2);
     }
 
     public H2OutputVisitor(Appendable appender, DbType dbType) {
@@ -35,6 +35,7 @@ public H2OutputVisitor(Appendable appender, DbType dbType) {
 
     public H2OutputVisitor(Appendable appender, boolean parameterized) {
         super(appender, parameterized);
+        dbType = DbType.h2;
     }
 
     public boolean visit(SQLReplaceStatement x) {

File: src/main/java/com/alibaba/druid/sql/parser/SQLCreateTableParser.java
Patch:
@@ -33,6 +33,7 @@ public SQLCreateTableParser(String sql) {
 
     public SQLCreateTableParser(SQLExprParser exprParser) {
         super(exprParser);
+        dbType = exprParser.dbType;
     }
 
     public SQLCreateTableStatement parseCreateTable() {
@@ -51,6 +52,7 @@ public SQLCreateTableStatement parseCreateTable() {
 
     public SQLCreateTableStatement parseCreateTable(boolean acceptCreate) {
         SQLCreateTableStatement createTable = newCreateStatement();
+        createTable.setDbType(getDbType());
 
         if (acceptCreate) {
             if (lexer.hasComment() && lexer.isKeepComments()) {
@@ -108,7 +110,7 @@ public SQLCreateTableStatement parseCreateTable(boolean acceptCreate) {
                     createTable.getTableElementList().add(element);
                 } else if (token == Token.IDENTIFIER //
                            || token == Token.LITERAL_ALIAS) {
-                    SQLColumnDefinition column = this.exprParser.parseColumn();
+                    SQLColumnDefinition column = this.exprParser.parseColumn(createTable);
                     column.setParent(createTable);
                     createTable.getTableElementList().add(column);
                 } else if (token == Token.PRIMARY //

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -132,6 +132,8 @@ public Lexer(String input, CommentHandler commentHandler, DbType dbType){
 
         if (DbType.sqlite == dbType) {
             this.keywods = Keywords.SQLITE_KEYWORDS;
+        } else if (DbType.dm == dbType) {
+            this.keywods = Keywords.DM_KEYWORDS;
         }
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/clickhouse/parser/ClickhouseLexer.java
Patch:
@@ -27,6 +27,7 @@ public class ClickhouseLexer extends Lexer {
         map.put("LIMIT", Token.LIMIT);
         map.put("SHOW", Token.SHOW);
         map.put("ALL", Token.ALL);
+        map.put("GLOBAL", Token.GLOBAL);
 
         DEFAULT_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -121,7 +121,7 @@ public interface JdbcConstants {
     
     String ELASTIC_SEARCH_DRIVER      = "com.alibaba.xdriver.elastic.jdbc.ElasticDriver";
 
-    String CLICKHOUSE                 = "clickhouse";
+    DbType CLICKHOUSE                 = DbType.clickhouse;
     String CLICKHOUSE_DRIVER          = "ru.yandex.clickhouse.ClickHouseDriver";
 
     String KDB                        = "kdb";

File: src/test/java/com/alibaba/druid/bvt/sql/clickhouse/ClickHouse_select_0.java
Patch:
@@ -1,5 +1,6 @@
 package com.alibaba.druid.bvt.sql.clickhouse;
 
+import com.alibaba.druid.DbType;
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.dialect.db2.visitor.DB2SchemaStatVisitor;
@@ -12,7 +13,7 @@ public class ClickHouse_select_0 extends TestCase {
     public void test_0() throws Exception {
         String sql = "SELECT date, transactionChannel, tranactionType FROM preComp_3All_20180322 limit 1,10";
 
-        List<SQLStatement> statementList = SQLUtils.parseStatements(sql, JdbcConstants.CLICKHOUSE);
+        List<SQLStatement> statementList = SQLUtils.parseStatements(sql, DbType.clickhouse);
         SQLStatement stmt = statementList.get(0);
 
         assertEquals(1, statementList.size());
@@ -35,7 +36,7 @@ public void test_0() throws Exception {
         // assertTrue(visitor.getColumns().contains(new Column("mytable", "first_name")));
         // assertTrue(visitor.getColumns().contains(new Column("mytable", "full_name")));
 
-        String output = SQLUtils.toSQLString(stmt, JdbcConstants.CLICKHOUSE);
+        String output = SQLUtils.toSQLString(stmt, DbType.clickhouse);
         assertEquals("SELECT date, transactionChannel, tranactionType\n" +
                         "FROM preComp_3All_20180322\n" +
                         "LIMIT 1, 10", //

File: src/main/java/com/alibaba/druid/sql/parser/SQLCreateTableParser.java
Patch:
@@ -184,7 +184,7 @@ public SQLCreateTableStatement parseCreateTable(boolean acceptCreate) {
     }
 
     public SQLPartitionBy parsePartitionBy() {
-        throw new ParserException("TODO " + lexer.info());
+        return null;
     }
 
     protected SQLTableElement parseCreateTableSupplementalLogingProps() {

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -3343,6 +3343,9 @@ public SQLStatement parseCreate() {
                 } else if (lexer.identifierEquals(Constants.RESOURCE)) {
                     lexer.reset(markBp, markChar, Token.CREATE);
                     return parseCreateResourceGroup();
+                } else if (lexer.token() == FOREIGN) {
+                    lexer.reset(markBp, markChar, Token.CREATE);
+                    return parseCreateTable();
                 }
 
                 throw new ParserException("TODO " + lexer.info());

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleCreateTableParser.java
Patch:
@@ -638,4 +638,7 @@ public OracleExprParser getExprParser() {
     }
 
 
+    public SQLPartitionBy parsePartitionBy() {
+        return null;
+    }
 }

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -545,10 +545,10 @@ public static DbType getDbTypeRaw(String rawUrl, String driverClassName) {
             return DbType.oracle;
         } else if (rawUrl.startsWith("jdbc:alibaba:oracle:")) {
             return DbType.ali_oracle;
-        } else if (rawUrl.startsWith("jdbc:oceanbase:")) {
-            return DbType.oceanbase;
         } else if (rawUrl.startsWith("jdbc:oceanbase:oracle:")) {
             return DbType.oceanbase_oracle;
+        } else if (rawUrl.startsWith("jdbc:oceanbase:")) {
+            return DbType.oceanbase;
         } else if (rawUrl.startsWith("jdbc:microsoft:") || rawUrl.startsWith("jdbc:log4jdbc:microsoft:")) {
             return DbType.sqlserver;
         } else if (rawUrl.startsWith("jdbc:sqlserver:") || rawUrl.startsWith("jdbc:log4jdbc:sqlserver:")) {

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -545,10 +545,10 @@ public static DbType getDbTypeRaw(String rawUrl, String driverClassName) {
             return DbType.oracle;
         } else if (rawUrl.startsWith("jdbc:alibaba:oracle:")) {
             return DbType.ali_oracle;
-        } else if (rawUrl.startsWith("jdbc:oceanbase:")) {
-            return DbType.oceanbase;
         } else if (rawUrl.startsWith("jdbc:oceanbase:oracle:")) {
             return DbType.oceanbase_oracle;
+        } else if (rawUrl.startsWith("jdbc:oceanbase:")) {
+            return DbType.oceanbase;
         } else if (rawUrl.startsWith("jdbc:microsoft:") || rawUrl.startsWith("jdbc:log4jdbc:microsoft:")) {
             return DbType.sqlserver;
         } else if (rawUrl.startsWith("jdbc:sqlserver:") || rawUrl.startsWith("jdbc:log4jdbc:sqlserver:")) {

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGExprParser.java
Patch:
@@ -293,8 +293,7 @@ public SQLExpr primaryRest(SQLExpr expr) {
                     case SUB:
                     case PLUS:
                     case SUBGT:
-                        lexer.nextToken();
-                        return primaryRest(identifierExpr);
+                        break;
                     default:
                         SQLExpr value = this.primary();
                         PGPointExpr point = new PGPointExpr();

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/select/PGSelectTest86.java
Patch:
@@ -18,11 +18,11 @@ public void test_0() throws Exception {
 
         assertEquals("SELECT *\n" +
                         "FROM xxx_point point\n" +
-                        "\tINNER JOIN xxx_cc cc ON POINT id = cc.point_id"
+                        "\tINNER JOIN xxx_cc cc ON point.id = cc.point_id"
                 , stmt.toString());
 
         assertEquals("select *\n" +
                 "from xxx_point point\n" +
-                "\tinner join xxx_cc cc on point id = cc.point_id", stmt.toLowerCaseString());
+                "\tinner join xxx_cc cc on point.id = cc.point_id", stmt.toLowerCaseString());
     }
 }

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -585,6 +585,9 @@ public static SQLStatement parseSingleStatement(String sql, DbType dbType, boole
         return stmtList.get(0);
     }
 
+    public static SQLStatement parseSingleStatement(String sql, String dbType, SQLParserFeature... features) {
+        return parseSingleStatement(sql, DbType.of(dbType), features);
+    }
 
     public static SQLStatement parseSingleStatement(String sql, DbType dbType, SQLParserFeature... features) {
         SQLStatementParser parser = SQLParserUtils.createSQLStatementParser(sql, dbType, features);

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -4442,7 +4442,9 @@ public SQLAssignItem parseAssignItem(boolean variant) {
             } else if (dbType == DbType.db2) {
             } else if (lexer.token == Token.QUES
                     || lexer.token == Token.LITERAL_CHARS
-                    || lexer.token == Token.LITERAL_ALIAS) {
+                    || lexer.token == Token.LITERAL_ALIAS
+                    || lexer.identifierEquals("utf8mb4")
+            ) {
                 // skip
             } else {
                 accept(Token.EQ);

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_exceptionSorter.java
Patch:
@@ -74,7 +74,9 @@ public void test_event_error() throws Exception {
 
         long createCount = dataSource.getCreateCount();
         assertTrue(createCount == 2 || createCount == 3);
-        assertEquals(createCount - 1, dataSource.getDiscardCount());
+        long discardCount = dataSource.getDiscardCount();
+        assertTrue("createCount : " + createCount
+                , createCount == discardCount || createCount - 1 == discardCount);
         assertEquals(1, dataSource.getPoolingCount());
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/clickhouse/visitor/ClickhouseVisitor.java
Patch:
@@ -4,6 +4,5 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public interface ClickhouseVisitor extends SQLASTVisitor {
-    boolean visit(SQLWithSubqueryClause.Entry x);
-    void endVisit(SQLWithSubqueryClause.Entry x);
+
 }

File: src/test/java/com/alibaba/druid/bvt/sql/db2/DB2CreateTableTest_02.java
Patch:
@@ -49,12 +49,12 @@ public void test_0() throws Exception {
         stmt.accept(visitor);
 
 //        System.out.println("Tables : " + visitor.getTables());
-//        System.out.println("fields : " + visitor.getColumns());
+        System.out.println("fields : " + visitor.getColumns());
 //        System.out.println("coditions : " + visitor.getConditions());
 //        System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         Assert.assertEquals(1, visitor.getTables().size());
-        Assert.assertEquals(6, visitor.getColumns().size());
+        Assert.assertEquals(5, visitor.getColumns().size());
         Assert.assertEquals(0, visitor.getConditions().size());
 
         Assert.assertTrue(visitor.containsTable("DSN8A10.DEPT"));

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -488,7 +488,7 @@ public static String getDriverClassName(String rawUrl) throws SQLException {
             return "com.mimer.jdbc.Driver";
         } else if (rawUrl.startsWith("jdbc:dm:")) {
             return JdbcConstants.DM_DRIVER;
-        } else if (rawUrl.startsWith("jdbc:kingbase:")) {
+        } else if (rawUrl.startsWith("jdbc:kingbase:") || rawUrl.startsWith("jdbc:kingbase8:")) {
             return JdbcConstants.KINGBASE_DRIVER;
         } else if (rawUrl.startsWith("jdbc:gbase:")) {
             return JdbcConstants.GBASE_DRIVER;
@@ -593,7 +593,7 @@ public static DbType getDbTypeRaw(String rawUrl, String driverClassName) {
             return DbType.mimer;
         } else if (rawUrl.startsWith("jdbc:dm:")) {
             return JdbcConstants.DM;
-        } else if (rawUrl.startsWith("jdbc:kingbase:")) {
+        } else if (rawUrl.startsWith("jdbc:kingbase:") || rawUrl.startsWith("jdbc:kingbase8:")) {
             return JdbcConstants.KINGBASE;
         } else if (rawUrl.startsWith("jdbc:gbase:")) {
             return JdbcConstants.GBASE;

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -4064,6 +4064,9 @@ public SQLCreateIndexStatement parseCreateIndex(boolean acceptCreate) {
             if (lexer.identifierEquals("CLUSTERED")) {
                 lexer.nextToken();
                 stmt.setType("UNIQUE CLUSTERED");
+            } else if (lexer.identifierEquals("NONCLUSTERED")) {
+                stmt.setType("UNIQUE NONCLUSTERED");
+                lexer.nextToken();
             } else {
                 stmt.setType("UNIQUE");
             }

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -73,6 +73,7 @@ public final class DruidConnectionHolder {
     protected final Map<String, Object>           variables;
     protected final Map<String, Object>           globleVariables;
     final ReentrantLock                           lock                     = new ReentrantLock();
+    protected String                              initSchema;
 
     public DruidConnectionHolder(DruidAbstractDataSource dataSource, PhysicalConnectionInfo pyConnectInfo)
                                                                                                           throws SQLException{

File: src/main/java/com/alibaba/druid/support/http/stat/WebAppStatUtils.java
Patch:
@@ -82,7 +82,7 @@ public static Map<String, Object> getSessionStatData(Object webStat, String sess
         
         try {
             Method method = webStat.getClass().getMethod("getSessionStatData", String.class);
-            Object obj = method.invoke(webStat);
+            Object obj = method.invoke(webStat, sessionId);
             return (Map<String, Object>) obj;
         } catch (Exception e) {
             LOG.error("getSessionStatData error", e);
@@ -98,7 +98,7 @@ public static Map<String, Object> getURIStatData(Object webStat, String uri) {
         
         try {
             Method method = webStat.getClass().getMethod("getURIStatData", String.class);
-            Object obj = method.invoke(webStat);
+            Object obj = method.invoke(webStat, uri);
             return (Map<String, Object>) obj;
         } catch (Exception e) {
             LOG.error("getURIStatData error", e);

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -3145,7 +3145,7 @@ public boolean visit(SQLHexExpr x) {
 
     @Override
     public boolean visit(SQLSetStatement x) {
-        boolean printSet = x.getAttribute("parser.set") == Boolean.TRUE || !JdbcConstants.ORACLE.equals(dbType);
+        boolean printSet = x.getAttribute("parser.set") == Boolean.TRUE || !JdbcUtils.isOracleDbType(dbType);
         if (printSet) {
             print0(ucase ? "SET " : "set ");
         }

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -415,6 +415,7 @@ public static interface Constants {
         long GROUP_CONCAT = fnv1a_64_lower("GROUP_CONCAT");
         long DEDUPLICATION = fnv1a_64_lower("DEDUPLICATION");
         long CONVERT = fnv1a_64_lower("CONVERT");
+        long NATIONAL = fnv1a_64_lower("NATIONAL");
         long CHAR = fnv1a_64_lower("CHAR");
         long VARCHAR = fnv1a_64_lower("VARCHAR");
         long VARCHAR2 = fnv1a_64_lower("VARCHAR2");

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -2489,6 +2489,9 @@ private boolean put(DruidConnectionHolder holder, long createTaskId) {
         lock.lock();
         try {
             if (poolingCount >= maxActive) {
+                if (createScheduler != null) {
+                    clearCreateTask(createTaskId);
+                }
                 return false;
             }
             connections[poolingCount] = holder;

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -891,9 +891,7 @@ public static String normalize(String name, String dbType) {
                     if (MySqlUtils.isKeyword(normalizeName)) {
                         return name;
                     }
-                } else if (JdbcUtils.isPgsqlDbType(dbType)
-                        || JdbcConstants.ENTERPRISEDB.equals(dbType)
-                        || JdbcConstants.POLARDB.equals(dbType)) {
+                } else if (JdbcUtils.isPgsqlDbType(dbType)) {
                     if (PGUtils.isKeyword(normalizeName)) {
                         return name;
                     }

File: src/main/java/com/alibaba/druid/sql/visitor/ExportParameterVisitorUtils.java
Patch:
@@ -75,9 +75,7 @@ public static ExportParameterVisitor createExportParameterVisitor(final  Appenda
             return new MySqlExportParameterVisitor(out);
         }
 
-        if (JdbcUtils.POSTGRESQL.equals(dbType)
-                || JdbcUtils.ENTERPRISEDB.equals(dbType)
-                || JdbcUtils.POLARDB.equals(dbType)) {
+        if (JdbcUtils.POSTGRESQL.equals(dbType)) {
             return new PGExportParameterVisitor(out);
         }
 

File: src/main/java/com/alibaba/druid/sql/visitor/ParameterizedOutputVisitorUtils.java
Patch:
@@ -274,9 +274,7 @@ public static ParameterizedVisitor createParameterizedOutputVisitor(Appendable o
         }
 
 
-        if (JdbcUtils.isPgsqlDbType(dbType)
-                || JdbcUtils.ENTERPRISEDB.equals(dbType)
-                || JdbcUtils.POLARDB.equals(dbType)) {
+        if (JdbcUtils.isPgsqlDbType(dbType)) {
             return new PGOutputVisitor(out, true);
         }
 

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -168,9 +168,7 @@ public static SQLEvalVisitor createEvalVisitor(String dbType) {
             return new OracleEvalVisitor();
         }
 
-        if (JdbcUtils.isPgsqlDbType(dbType)
-                || JdbcConstants.ENTERPRISEDB.equals(dbType)
-                || JdbcConstants.POLARDB.equals(dbType)) {
+        if (JdbcUtils.isPgsqlDbType(dbType)) {
             return new PGEvalVisitor();
         }
 

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -906,7 +906,8 @@ public static boolean isMysqlDbType(String dbType) {
 
     public static boolean isPgsqlDbType(String dbType) {
         return JdbcUtils.POSTGRESQL.equals(dbType) || //
-                JdbcUtils.ENTERPRISEDB.equals(dbType);
+                JdbcUtils.ENTERPRISEDB.equals(dbType) || //
+                JdbcUtils.POLARDB.equals(dbType);
     }
 
     public static boolean isSqlserverDbType(String dbType) {

File: src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -148,9 +148,7 @@ public synchronized void init(DataSourceProxy dataSource) {
             }
 
             provider = new SQLServerWallProvider(config);
-        } else if (JdbcUtils.isPgsqlDbType(dbType)
-                || JdbcUtils.ENTERPRISEDB.equals(dbType)
-                || JdbcUtils.POLARDB.equals(dbType)) {
+        } else if (JdbcUtils.isPgsqlDbType(dbType)) {
             if (config == null) {
                 config = new WallConfig(PGWallProvider.DEFAULT_CONFIG_DIR);
             }

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -891,9 +891,7 @@ public static String normalize(String name, String dbType) {
                     if (MySqlUtils.isKeyword(normalizeName)) {
                         return name;
                     }
-                } else if (JdbcUtils.isPgsqlDbType(dbType)
-                        || JdbcConstants.ENTERPRISEDB.equals(dbType)
-                        || JdbcConstants.POLARDB.equals(dbType)) {
+                } else if (JdbcUtils.isPgsqlDbType(dbType)) {
                     if (PGUtils.isKeyword(normalizeName)) {
                         return name;
                     }

File: src/main/java/com/alibaba/druid/sql/visitor/ExportParameterVisitorUtils.java
Patch:
@@ -75,9 +75,7 @@ public static ExportParameterVisitor createExportParameterVisitor(final  Appenda
             return new MySqlExportParameterVisitor(out);
         }
 
-        if (JdbcUtils.POSTGRESQL.equals(dbType)
-                || JdbcUtils.ENTERPRISEDB.equals(dbType)
-                || JdbcUtils.POLARDB.equals(dbType)) {
+        if (JdbcUtils.POSTGRESQL.equals(dbType)) {
             return new PGExportParameterVisitor(out);
         }
 

File: src/main/java/com/alibaba/druid/sql/visitor/ParameterizedOutputVisitorUtils.java
Patch:
@@ -274,9 +274,7 @@ public static ParameterizedVisitor createParameterizedOutputVisitor(Appendable o
         }
 
 
-        if (JdbcUtils.isPgsqlDbType(dbType)
-                || JdbcUtils.ENTERPRISEDB.equals(dbType)
-                || JdbcUtils.POLARDB.equals(dbType)) {
+        if (JdbcUtils.isPgsqlDbType(dbType)) {
             return new PGOutputVisitor(out, true);
         }
 

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -168,9 +168,7 @@ public static SQLEvalVisitor createEvalVisitor(String dbType) {
             return new OracleEvalVisitor();
         }
 
-        if (JdbcUtils.isPgsqlDbType(dbType)
-                || JdbcConstants.ENTERPRISEDB.equals(dbType)
-                || JdbcConstants.POLARDB.equals(dbType)) {
+        if (JdbcUtils.isPgsqlDbType(dbType)) {
             return new PGEvalVisitor();
         }
 

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -906,7 +906,8 @@ public static boolean isMysqlDbType(String dbType) {
 
     public static boolean isPgsqlDbType(String dbType) {
         return JdbcUtils.POSTGRESQL.equals(dbType) || //
-                JdbcUtils.ENTERPRISEDB.equals(dbType);
+                JdbcUtils.ENTERPRISEDB.equals(dbType) || //
+                JdbcUtils.POLARDB.equals(dbType);
     }
 
     public static boolean isSqlserverDbType(String dbType) {

File: src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -148,9 +148,7 @@ public synchronized void init(DataSourceProxy dataSource) {
             }
 
             provider = new SQLServerWallProvider(config);
-        } else if (JdbcUtils.isPgsqlDbType(dbType)
-                || JdbcUtils.ENTERPRISEDB.equals(dbType)
-                || JdbcUtils.POLARDB.equals(dbType)) {
+        } else if (JdbcUtils.isPgsqlDbType(dbType)) {
             if (config == null) {
                 config = new WallConfig(PGWallProvider.DEFAULT_CONFIG_DIR);
             }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGSelectQueryBlock.java
Patch:
@@ -109,6 +109,9 @@ public SQLOrderBy getOrderBy() {
     }
 
     public void setOrderBy(SQLOrderBy orderBy) {
+        if (orderBy != null) {
+            orderBy.setParent(this);
+        }
         this.orderBy = orderBy;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGSelectQueryBlock.java
Patch:
@@ -109,6 +109,9 @@ public SQLOrderBy getOrderBy() {
     }
 
     public void setOrderBy(SQLOrderBy orderBy) {
+        if (orderBy.getParent() == null) {
+            orderBy.setParent(this);
+        }
         this.orderBy = orderBy;
     }
 

File: src/main/java/com/alibaba/druid/support/http/stat/WebAppStatUtils.java
Patch:
@@ -82,7 +82,7 @@ public static Map<String, Object> getSessionStatData(Object webStat, String sess
         
         try {
             Method method = webStat.getClass().getMethod("getSessionStatData", String.class);
-            Object obj = method.invoke(webStat);
+            Object obj = method.invoke(webStat, sessionId);
             return (Map<String, Object>) obj;
         } catch (Exception e) {
             LOG.error("getSessionStatData error", e);
@@ -98,7 +98,7 @@ public static Map<String, Object> getURIStatData(Object webStat, String uri) {
         
         try {
             Method method = webStat.getClass().getMethod("getURIStatData", String.class);
-            Object obj = method.invoke(webStat);
+            Object obj = method.invoke(webStat, uri);
             return (Map<String, Object>) obj;
         } catch (Exception e) {
             LOG.error("getURIStatData error", e);

File: src/test/java/com/alibaba/druid/pool/ha/node/ZookeeperNodeListenerTest.java
Patch:
@@ -86,7 +86,7 @@ public void testHaWithZk() throws Exception {
 
     @Test
     public void testAddOneNode() throws Exception {
-        CountDownLatch cdl = new CountDownLatch(1);
+        final CountDownLatch cdl = new CountDownLatch(1);
         ZookeeperNodeListener listener = new ZookeeperNodeListener();
         listener.setZkConnectString(server.getConnectString());
         listener.setPath(PATH);
@@ -132,8 +132,8 @@ public void testRemoveOneNode() throws Exception {
         ZookeeperNodeRegister register = registerNodeAndReturnRegister();
         Thread.sleep(2000); // Wait for the Node to be created.
 
-        CountDownLatch addCDL = new CountDownLatch(1);
-        CountDownLatch removeCDL = new CountDownLatch(1);
+        final CountDownLatch addCDL = new CountDownLatch(1);
+        final CountDownLatch removeCDL = new CountDownLatch(1);
         ZookeeperNodeListener listener = new ZookeeperNodeListener();
         listener.setZkConnectString(server.getConnectString());
         listener.setPath(PATH);

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallStatTest_statMap.java
Patch:
@@ -55,14 +55,14 @@ public void testMySql() throws Exception {
         System.out.println(JSONUtils.toJSONString(statMapB));
         System.out.println(JSONUtils.toJSONString(statMapC));
 
-        Map<String, Object> statMapMerged = DruidStatManagerFacade.mergWallStat(statMapA, statMapB);
+        Map<String, Object> statMapMerged = DruidStatManagerFacade.mergeWallStat(statMapA, statMapB);
         System.out.println(JSONUtils.toJSONString(statMapMerged));
         
         Assert.assertEquals(2L, statMapMerged.get("checkCount"));
         Assert.assertEquals(21L, statMapMerged.get("violationEffectRowCount"));
         Assert.assertEquals(2, ((Collection<Map<String, Object>>) statMapMerged.get("blackList")).size());
         
-        statMapMerged = DruidStatManagerFacade.mergWallStat(statMapMerged, statMapC);
+        statMapMerged = DruidStatManagerFacade.mergeWallStat(statMapMerged, statMapC);
         System.out.println(JSONUtils.toJSONString(statMapMerged));
         Assert.assertEquals(2, ((Collection<Map<String, Object>>) statMapMerged.get("blackList")).size());
         Assert.assertEquals(33L, statMapMerged.get("violationEffectRowCount"));

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -415,6 +415,7 @@ public static interface Constants {
         long GROUP_CONCAT = fnv1a_64_lower("GROUP_CONCAT");
         long DEDUPLICATION = fnv1a_64_lower("DEDUPLICATION");
         long CONVERT = fnv1a_64_lower("CONVERT");
+        long NATIONAL = fnv1a_64_lower("NATIONAL");
         long CHAR = fnv1a_64_lower("CHAR");
         long VARCHAR = fnv1a_64_lower("VARCHAR");
         long VARCHAR2 = fnv1a_64_lower("VARCHAR2");

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLJoinTableSource.java
Patch:
@@ -271,7 +271,7 @@ public void cloneTo(SQLJoinTableSource x) {
         }
 
         if(condition != null){
-            x.setCondition(condition);
+            x.setCondition(condition.clone());
         }
 
         for (SQLExpr item : using) {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLJoinTableSource.java
Patch:
@@ -271,7 +271,7 @@ public void cloneTo(SQLJoinTableSource x) {
         }
 
         if(condition != null){
-            x.setCondition(condition);
+            x.setCondition(condition.clone());
         }
 
         for (SQLExpr item : using) {

File: src/main/java/com/alibaba/druid/support/http/stat/WebAppStat.java
Patch:
@@ -335,7 +335,7 @@ public WebSessionStat getSessionStat(String sessionId, boolean create) {
                     long fullCount = uriSessionMapFullCount.getAndIncrement();
 
                     if (fullCount == 0) {
-                        LOG.error("sessionStatMap is full");
+                        LOG.warn("sessionStatMap is full");
                     }
                 }
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -845,6 +845,7 @@ public void init() throws SQLException {
 
             if (JdbcConstants.MYSQL.equals(this.dbType)
                     || JdbcConstants.MARIADB.equals(this.dbType)
+                    || JdbcConstants.OCEANBASE.equals(this.dbType)
                     || JdbcConstants.ALIYUN_ADS.equals(this.dbType)) {
                 boolean cacheServerConfigurationSet = false;
                 if (this.connectProperties.containsKey("cacheServerConfiguration")) {

File: src/main/java/com/alibaba/druid/sql/builder/FunctionBuilder.java
Patch:
@@ -18,6 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
 import com.alibaba.druid.util.JdbcConstants;
+import com.alibaba.druid.util.JdbcUtils;
 
 /**
  * Created by wenshao on 09/07/2017.
@@ -65,7 +66,7 @@ public SQLMethodInvokeExpr ifnull(SQLExpr expr1, SQLExpr expr2) {
             return new SQLMethodInvokeExpr("coalesce", null, expr1, expr2);
         }
 
-        if (JdbcConstants.ORACLE.equals(dbType)) {
+        if (JdbcUtils.isOracleDbType(dbType)) {
             return new SQLMethodInvokeExpr("nvl", null, expr1, expr2);
         }
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -191,6 +191,7 @@
 import com.alibaba.druid.sql.visitor.SQLASTOutputVisitor;
 import com.alibaba.druid.sql.visitor.VisitorFeature;
 import com.alibaba.druid.util.JdbcConstants;
+import com.alibaba.druid.util.JdbcUtils;
 
 public class MySqlOutputVisitor extends SQLASTOutputVisitor implements MySqlASTVisitor {
 
@@ -3143,7 +3144,7 @@ public void endVisit(MySqlAlterUserStatement x) {
 
     @Override
     public boolean visit(SQLSetStatement x) {
-        boolean printSet = x.getAttribute("parser.set") == Boolean.TRUE || !JdbcConstants.ORACLE.equals(dbType);
+        boolean printSet = x.getAttribute("parser.set") == Boolean.TRUE || !JdbcUtils.isOracleDbType(dbType);
         if (printSet) {
             print0(ucase ? "SET " : "set ");
         }

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -539,11 +539,11 @@ public boolean visit(SQLOver x) {
 
     protected SQLASTVisitor createOrderByVisitor(SQLOrderBy x) {
         final SQLASTVisitor orderByVisitor;
-        if (JdbcConstants.MYSQL.equals(dbType)) {
+        if (JdbcConstants.MYSQL.equals(dbType) || JdbcConstants.OCEANBASE.equals(dbType)) {
             orderByVisitor = new MySqlOrderByStatVisitor(x);
         } else if (JdbcConstants.POSTGRESQL.equals(dbType)) {
             orderByVisitor = new PGOrderByStatVisitor(x);
-        } else if (JdbcConstants.ORACLE.equals(dbType)) {
+        } else if (JdbcConstants.ORACLE.equals(dbType) || JdbcConstants.OCEANBASE_ORACLE.equals(dbType)) {
             orderByVisitor = new OracleOrderByStatVisitor(x);
         } else {
             orderByVisitor = new OrderByStatVisitor(x);

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -77,7 +77,9 @@ public interface JdbcConstants {
     String XUGU_DRIVER                = "com.xugu.cloudjdbc.Driver";
 
     String OCEANBASE                  = "oceanbase";
-    String OCEANBASE_DRIVER           = "com.mysql.jdbc.Driver";
+    String OCEANBASE_ORACLE           = "oceanbase_oracle";
+    String OCEANBASE_DRIVER           = "com.alipay.oceanbase.jdbc.Driver";
+
     String INFORMIX                   = "informix";
     
     /**

File: src/test/java/com/alibaba/druid/bvt/sql/MybatisTest.java
Patch:
@@ -28,10 +28,12 @@ public class MybatisTest extends TestCase {
 
     public void test_mysql() throws Exception {
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = #{id}", SQLUtils.format(sql, JdbcUtils.MYSQL));
+        Assert.assertEquals("SELECT *\nFROM t\nWHERE id = #{id}", SQLUtils.format(sql, JdbcUtils.OCEANBASE));
     }
 
     public void test_oracle() throws Exception {
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = #{id}", SQLUtils.format(sql, JdbcUtils.ORACLE));
+        Assert.assertEquals("SELECT *\nFROM t\nWHERE id = #{id}", SQLUtils.format(sql, JdbcUtils.OCEANBASE_ORACLE));
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = #{id}", SQLUtils.format(sql, JdbcUtils.ALI_ORACLE));
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/MybatisTest2.java
Patch:
@@ -27,10 +27,12 @@ public class MybatisTest2 extends TestCase {
 
     public void test_mysql() throws Exception {
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = ${id}", SQLUtils.format(sql, JdbcUtils.MYSQL));
+        Assert.assertEquals("SELECT *\nFROM t\nWHERE id = ${id}", SQLUtils.format(sql, JdbcUtils.OCEANBASE));
     }
 
     public void test_oracle() throws Exception {
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = ${id}", SQLUtils.format(sql, JdbcUtils.ORACLE));
+        Assert.assertEquals("SELECT *\nFROM t\nWHERE id = ${id}", SQLUtils.format(sql, JdbcUtils.OCEANBASE_ORACLE));
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = ${id}", SQLUtils.format(sql, JdbcUtils.ALI_ORACLE));
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/MergeTest.java
Patch:
@@ -32,12 +32,14 @@ public void test_mergeCall_oracle() throws Exception {
         String sql = "{ call INTERFACE_DATA_EXTRACTION.INVOICE_INFO(?,?,?)}";
 
         ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.ORACLE);
+        ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.OCEANBASE_ORACLE);
         ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.ALI_ORACLE);
     }
 
     public void test_mergeCall_mysql() throws Exception {
         String sql = "{ call INTERFACE_DATA_EXTRACTION.INVOICE_INFO(?,?,?)}";
 
         ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.MYSQL);
+        ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.OCEANBASE);
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleFormatTest2.java
Patch:
@@ -27,6 +27,8 @@ public void test_formatOracle() throws Exception {
 
         String formatedText = SQLUtils.format(text, JdbcUtils.ORACLE);
         System.out.println(formatedText);
+        String formatedText1 = SQLUtils.format(text, JdbcUtils.OCEANBASE_ORACLE);
+        System.out.println(formatedText1);
         String formatedText2 = SQLUtils.format(text, JdbcUtils.ALI_ORACLE);
         System.out.println(formatedText2);
     }

File: src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -84,7 +84,7 @@ public static SQLStatementParser createSQLStatementParser(String sql, String dbT
             return new MySqlStatementParser(sql, features);
         }
 
-        if (JdbcUtils.isPgsqlDbType(dbType)) {
+        if (JdbcUtils.isPgsqlDbType(dbType)
                 || JdbcUtils.ENTERPRISEDB.equals(dbType)
                 || JdbcUtils.POLARDB.equals(dbType)) {
             return new PGSQLStatementParser(sql);

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidSpringAopConfiguration.java
Patch:
@@ -42,6 +42,7 @@ public Advisor advisor(DruidStatProperties properties) {
     }
 
     @Bean
+    @ConditionalOnProperty(name = "spring.aop.auto",havingValue = "false")
     public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() {
         DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();
         advisorAutoProxyCreator.setProxyTargetClass(true);

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -340,7 +340,7 @@ public void setOracle(boolean isOracle) {
     }
 
     public boolean isUseUnfairLock() {
-        return lock.isFair();
+        return !lock.isFair();
     }
 
     public void setUseUnfairLock(boolean useUnfairLock) {
@@ -795,7 +795,7 @@ public void setMaxEvictableIdleTimeMillis(long maxEvictableIdleTimeMillis) {
             LOG.error("maxEvictableIdleTimeMillis should be greater than 30000");
         }
         
-        if (maxEvictableIdleTimeMillis < minEvictableIdleTimeMillis) {
+        if (inited && maxEvictableIdleTimeMillis < minEvictableIdleTimeMillis) {
             throw new IllegalArgumentException("maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis");
         }
         

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -891,7 +891,9 @@ public static String normalize(String name, String dbType) {
                     if (MySqlUtils.isKeyword(normalizeName)) {
                         return name;
                     }
-                } else if (JdbcUtils.isPgsqlDbType(dbType)) {
+                } else if (JdbcUtils.isPgsqlDbType(dbType)
+                        || JdbcConstants.ENTERPRISEDB.equals(dbType)
+                        || JdbcConstants.POLARDB.equals(dbType)) {
                     if (PGUtils.isKeyword(normalizeName)) {
                         return name;
                     }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2552,7 +2552,6 @@ public boolean visit(SQLColumnDefinition x) {
             boolean newLine = item instanceof SQLForeignKeyConstraint //
                               || item instanceof SQLPrimaryKey //
                               || item instanceof SQLColumnCheck //
-                              || item instanceof SQLColumnCheck //
                               || item.getName() != null;
             if (newLine) {
                 this.indentCount++;

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -168,7 +168,9 @@ public static SQLEvalVisitor createEvalVisitor(String dbType) {
             return new OracleEvalVisitor();
         }
 
-        if (JdbcUtils.isPgsqlDbType(dbType)) {
+        if (JdbcUtils.isPgsqlDbType(dbType)
+                || JdbcConstants.ENTERPRISEDB.equals(dbType)
+                || JdbcConstants.POLARDB.equals(dbType)) {
             return new PGEvalVisitor();
         }
 

File: src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -148,7 +148,9 @@ public synchronized void init(DataSourceProxy dataSource) {
             }
 
             provider = new SQLServerWallProvider(config);
-        } else if (JdbcUtils.isPgsqlDbType(dbType)) {
+        } else if (JdbcUtils.isPgsqlDbType(dbType)
+                || JdbcUtils.ENTERPRISEDB.equals(dbType)
+                || JdbcUtils.POLARDB.equals(dbType)) {
             if (config == null) {
                 config = new WallConfig(PGWallProvider.DEFAULT_CONFIG_DIR);
             }

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -340,7 +340,7 @@ public void setOracle(boolean isOracle) {
     }
 
     public boolean isUseUnfairLock() {
-        return lock.isFair();
+        return !lock.isFair();
     }
 
     public void setUseUnfairLock(boolean useUnfairLock) {

File: src/main/java/com/alibaba/druid/pool/ha/HighAvailableDataSource.java
Patch:
@@ -137,6 +137,9 @@ public void destroy() {
         if (poolUpdater != null) {
             poolUpdater.destroy();
         }
+        if (selector != null) {
+            selector.destroy();
+        }
         if (dataSourceMap == null || dataSourceMap.isEmpty()) {
             return;
         }

File: src/test/java/com/alibaba/druid/pool/ha/HighAvailableDataSourceTest.java
Patch:
@@ -22,6 +22,7 @@ public void testByNameGet() throws Exception {
         haDataSource.init();
         haDataSource.setTargetDataSource("foo");
         assertNotNull(haDataSource.getConnection());
+        haDataSource.destroy();
     }
 
     @Test
@@ -43,5 +44,6 @@ public void testRandomGet() throws Exception {
         }
         assertTrue(count[0] > 0);
         assertTrue(count[1] > 0);
+        haDataSource.destroy();
     }
 }
\ No newline at end of file

File: src/test/java/com/alibaba/druid/pool/ha/node/PoolUpdaterTest.java
Patch:
@@ -31,6 +31,7 @@ public void setUp() throws Exception {
 
     @After
     public void tearDown() throws Exception {
+        haDataSource.destroy();
         haDataSource = null;
         updater = null;
     }

File: src/test/java/com/alibaba/druid/pool/ha/selector/RandomDataSourceSelectorTest.java
Patch:
@@ -36,7 +36,7 @@ public void testCreateSelectorWithProperties() {
         assertEquals(60, selector.getValidateThread().getCheckingIntervalSeconds());
 
         assertEquals(120, selector.getRecoveryIntervalSeconds());
-        assertEquals(120, selector.getRecoverThread().getSleepSeconds());
+        assertEquals(120, selector.getRecoverThread().getRecoverIntervalSeconds());
 
         assertEquals(10, selector.getValidationSleepSeconds());
         assertEquals(10, selector.getValidateThread().getValidationSleepSeconds());

File: src/test/java/com/alibaba/druid/pool/ha/selector/RandomDataSourceSelectorWithFilterTest.java
Patch:
@@ -65,7 +65,7 @@ public void testSkipValidation() throws Exception {
         Thread.sleep(1000);
         assertEquals(initValue, checker.getCountValue(url));
 
-        Thread.sleep(2500);
+        Thread.sleep(3000);
         int value = checker.getCountValue(url);
         LOG.info("URL: " + url + " Value: " + value + " Init: " + initValue);
         assertEquals(initValue + 1, value);

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -795,7 +795,7 @@ public void setMaxEvictableIdleTimeMillis(long maxEvictableIdleTimeMillis) {
             LOG.error("maxEvictableIdleTimeMillis should be greater than 30000");
         }
         
-        if (maxEvictableIdleTimeMillis < minEvictableIdleTimeMillis) {
+        if (inited && maxEvictableIdleTimeMillis < minEvictableIdleTimeMillis) {
             throw new IllegalArgumentException("maxEvictableIdleTimeMillis must be grater than minEvictableIdleTimeMillis");
         }
         

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -845,6 +845,7 @@ public void init() throws SQLException {
 
             if (JdbcConstants.MYSQL.equals(this.dbType)
                     || JdbcConstants.MARIADB.equals(this.dbType)
+                    || JdbcConstants.OCEANBASE.equals(this.dbType)
                     || JdbcConstants.ALIYUN_ADS.equals(this.dbType)) {
                 boolean cacheServerConfigurationSet = false;
                 if (this.connectProperties.containsKey("cacheServerConfiguration")) {

File: src/main/java/com/alibaba/druid/sql/builder/FunctionBuilder.java
Patch:
@@ -18,6 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
 import com.alibaba.druid.util.JdbcConstants;
+import com.alibaba.druid.util.JdbcUtils;
 
 /**
  * Created by wenshao on 09/07/2017.
@@ -65,7 +66,7 @@ public SQLMethodInvokeExpr ifnull(SQLExpr expr1, SQLExpr expr2) {
             return new SQLMethodInvokeExpr("coalesce", null, expr1, expr2);
         }
 
-        if (JdbcConstants.ORACLE.equals(dbType)) {
+        if (JdbcUtils.isOracleDbType(dbType)) {
             return new SQLMethodInvokeExpr("nvl", null, expr1, expr2);
         }
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -191,6 +191,7 @@
 import com.alibaba.druid.sql.visitor.SQLASTOutputVisitor;
 import com.alibaba.druid.sql.visitor.VisitorFeature;
 import com.alibaba.druid.util.JdbcConstants;
+import com.alibaba.druid.util.JdbcUtils;
 
 public class MySqlOutputVisitor extends SQLASTOutputVisitor implements MySqlASTVisitor {
 
@@ -3143,7 +3144,7 @@ public void endVisit(MySqlAlterUserStatement x) {
 
     @Override
     public boolean visit(SQLSetStatement x) {
-        boolean printSet = x.getAttribute("parser.set") == Boolean.TRUE || !JdbcConstants.ORACLE.equals(dbType);
+        boolean printSet = x.getAttribute("parser.set") == Boolean.TRUE || !JdbcUtils.isOracleDbType(dbType);
         if (printSet) {
             print0(ucase ? "SET " : "set ");
         }

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -539,11 +539,11 @@ public boolean visit(SQLOver x) {
 
     protected SQLASTVisitor createOrderByVisitor(SQLOrderBy x) {
         final SQLASTVisitor orderByVisitor;
-        if (JdbcConstants.MYSQL.equals(dbType)) {
+        if (JdbcConstants.MYSQL.equals(dbType) || JdbcConstants.OCEANBASE.equals(dbType)) {
             orderByVisitor = new MySqlOrderByStatVisitor(x);
         } else if (JdbcConstants.POSTGRESQL.equals(dbType)) {
             orderByVisitor = new PGOrderByStatVisitor(x);
-        } else if (JdbcConstants.ORACLE.equals(dbType)) {
+        } else if (JdbcConstants.ORACLE.equals(dbType) || JdbcConstants.OCEANBASE_ORACLE.equals(dbType)) {
             orderByVisitor = new OracleOrderByStatVisitor(x);
         } else {
             orderByVisitor = new OrderByStatVisitor(x);

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -75,7 +75,9 @@ public interface JdbcConstants {
     String XUGU_DRIVER                = "com.xugu.cloudjdbc.Driver";
 
     String OCEANBASE                  = "oceanbase";
-    String OCEANBASE_DRIVER           = "com.mysql.jdbc.Driver";
+    String OCEANBASE_ORACLE           = "oceanbase_oracle";
+    String OCEANBASE_DRIVER           = "com.alipay.oceanbase.jdbc.Driver";
+
     String INFORMIX                   = "informix";
     
     /**

File: src/test/java/com/alibaba/druid/bvt/sql/MybatisTest.java
Patch:
@@ -28,10 +28,12 @@ public class MybatisTest extends TestCase {
 
     public void test_mysql() throws Exception {
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = #{id}", SQLUtils.format(sql, JdbcUtils.MYSQL));
+        Assert.assertEquals("SELECT *\nFROM t\nWHERE id = #{id}", SQLUtils.format(sql, JdbcUtils.OCEANBASE));
     }
 
     public void test_oracle() throws Exception {
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = #{id}", SQLUtils.format(sql, JdbcUtils.ORACLE));
+        Assert.assertEquals("SELECT *\nFROM t\nWHERE id = #{id}", SQLUtils.format(sql, JdbcUtils.OCEANBASE_ORACLE));
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = #{id}", SQLUtils.format(sql, JdbcUtils.ALI_ORACLE));
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/MybatisTest2.java
Patch:
@@ -27,10 +27,12 @@ public class MybatisTest2 extends TestCase {
 
     public void test_mysql() throws Exception {
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = ${id}", SQLUtils.format(sql, JdbcUtils.MYSQL));
+        Assert.assertEquals("SELECT *\nFROM t\nWHERE id = ${id}", SQLUtils.format(sql, JdbcUtils.OCEANBASE));
     }
 
     public void test_oracle() throws Exception {
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = ${id}", SQLUtils.format(sql, JdbcUtils.ORACLE));
+        Assert.assertEquals("SELECT *\nFROM t\nWHERE id = ${id}", SQLUtils.format(sql, JdbcUtils.OCEANBASE_ORACLE));
         Assert.assertEquals("SELECT *\nFROM t\nWHERE id = ${id}", SQLUtils.format(sql, JdbcUtils.ALI_ORACLE));
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/MergeTest.java
Patch:
@@ -32,12 +32,14 @@ public void test_mergeCall_oracle() throws Exception {
         String sql = "{ call INTERFACE_DATA_EXTRACTION.INVOICE_INFO(?,?,?)}";
 
         ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.ORACLE);
+        ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.OCEANBASE_ORACLE);
         ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.ALI_ORACLE);
     }
 
     public void test_mergeCall_mysql() throws Exception {
         String sql = "{ call INTERFACE_DATA_EXTRACTION.INVOICE_INFO(?,?,?)}";
 
         ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.MYSQL);
+        ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.OCEANBASE);
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleFormatTest2.java
Patch:
@@ -27,6 +27,8 @@ public void test_formatOracle() throws Exception {
 
         String formatedText = SQLUtils.format(text, JdbcUtils.ORACLE);
         System.out.println(formatedText);
+        String formatedText1 = SQLUtils.format(text, JdbcUtils.OCEANBASE_ORACLE);
+        System.out.println(formatedText1);
         String formatedText2 = SQLUtils.format(text, JdbcUtils.ALI_ORACLE);
         System.out.println(formatedText2);
     }

File: src/main/java/com/alibaba/druid/pool/ha/node/NodeEventTypeEnum.java
Patch:
@@ -20,6 +20,6 @@
  *
  * @author DigitalSonic
  */
-public enum NodeEventType {
+public enum NodeEventTypeEnum {
     ADD, DELETE
 }

File: src/main/java/com/alibaba/druid/pool/ha/node/PoolUpdater.java
Patch:
@@ -86,9 +86,9 @@ public void update(Observable o, Object arg) {
             lock.lock();
             LOG.info("Start processing the NodeEvent[" + events.length + "].");
             for (NodeEvent e : events) {
-                if (e.getType() == NodeEventType.ADD) {
+                if (e.getType() == NodeEventTypeEnum.ADD) {
                     addNode(e);
-                } else if (e.getType() == NodeEventType.DELETE) {
+                } else if (e.getType() == NodeEventTypeEnum.DELETE) {
                     deleteNode(e);
                 }
             }

File: src/test/java/com/alibaba/druid/pool/ha/node/FileNodeListenerTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.druid.pool.ha.node;
 
 import org.junit.Test;
-import sun.java2d.SurfaceDataProxy;
 
 import java.util.List;
 import java.util.Observable;
@@ -28,7 +27,7 @@ public void update(Observable o, Object arg) {
                 assertTrue(arg instanceof NodeEvent[]);
                 NodeEvent[] events = (NodeEvent[]) arg;
                 assertEquals(1, events.length);
-                assertEquals(NodeEventType.ADD, events[0].getType());
+                assertEquals(NodeEventTypeEnum.ADD, events[0].getType());
                 assertEquals("prefix1.foo", events[0].getNodeName());
                 assertEquals("jdbc:derby:memory:foo1;create=true", events[0].getUrl());
             }
@@ -64,7 +63,7 @@ public void testRefresh() {
 
         assertEquals(1, list.size());
         NodeEvent event = list.get(0);
-        assertEquals(NodeEventType.ADD, event.getType());
+        assertEquals(NodeEventTypeEnum.ADD, event.getType());
         assertEquals("prefix1.foo", event.getNodeName());
         assertEquals("jdbc:derby:memory:foo1;create=true", event.getUrl());
     }

File: src/test/java/com/alibaba/druid/pool/ha/node/NodeEventTest.java
Patch:
@@ -24,7 +24,7 @@ public void testGetEventListFromProperties_emptyProperties() {
         list = NodeEvent.getEventListFromProperties(p1, p2);
         assertEquals(1, list.size());
         NodeEvent event = list.get(0);
-        assertEquals(NodeEventType.DELETE, event.getType());
+        assertEquals(NodeEventTypeEnum.DELETE, event.getType());
         assertEquals("foo", event.getNodeName());
         assertEquals("foo_url", event.getUrl());
         assertEquals("foo_username", event.getUsername());
@@ -33,7 +33,7 @@ public void testGetEventListFromProperties_emptyProperties() {
         list = NodeEvent.getEventListFromProperties(p2, p1);
         assertEquals(1, list.size());
         event = list.get(0);
-        assertEquals(NodeEventType.ADD, event.getType());
+        assertEquals(NodeEventTypeEnum.ADD, event.getType());
         assertEquals("foo", event.getNodeName());
         assertEquals("foo_url", event.getUrl());
         assertEquals("foo_username", event.getUsername());

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallStatTest_statMap.java
Patch:
@@ -55,14 +55,14 @@ public void testMySql() throws Exception {
         System.out.println(JSONUtils.toJSONString(statMapB));
         System.out.println(JSONUtils.toJSONString(statMapC));
 
-        Map<String, Object> statMapMerged = DruidStatManagerFacade.mergWallStat(statMapA, statMapB);
+        Map<String, Object> statMapMerged = DruidStatManagerFacade.mergeWallStat(statMapA, statMapB);
         System.out.println(JSONUtils.toJSONString(statMapMerged));
         
         Assert.assertEquals(2L, statMapMerged.get("checkCount"));
         Assert.assertEquals(21L, statMapMerged.get("violationEffectRowCount"));
         Assert.assertEquals(2, ((Collection<Map<String, Object>>) statMapMerged.get("blackList")).size());
         
-        statMapMerged = DruidStatManagerFacade.mergWallStat(statMapMerged, statMapC);
+        statMapMerged = DruidStatManagerFacade.mergeWallStat(statMapMerged, statMapC);
         System.out.println(JSONUtils.toJSONString(statMapMerged));
         Assert.assertEquals(2, ((Collection<Map<String, Object>>) statMapMerged.get("blackList")).size());
         Assert.assertEquals(33L, statMapMerged.get("violationEffectRowCount"));

File: src/main/java/com/alibaba/druid/support/http/stat/WebAppStat.java
Patch:
@@ -335,7 +335,7 @@ public WebSessionStat getSessionStat(String sessionId, boolean create) {
                     long fullCount = uriSessionMapFullCount.getAndIncrement();
 
                     if (fullCount == 0) {
-                        LOG.error("sessionStatMap is full");
+                        LOG.warn("sessionStatMap is full");
                     }
                 }
 

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -69,6 +69,7 @@ public final class DruidConnectionHolder {
     protected int                                 underlyingTransactionIsolation;
     protected boolean                             underlyingAutoCommit;
     protected volatile boolean                    discard                  = false;
+    protected volatile boolean                    active                   = false;
     protected final Map<String, Object>           variables;
     protected final Map<String, Object>           globleVariables;
     final ReentrantLock                           lock                     = new ReentrantLock();

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -768,6 +768,7 @@ protected void createTransactionInfo() {
         DruidAbstractDataSource dataSource = holder.getDataSource();
         dataSource.incrementStartTransactionCount();
         transactionInfo = new TransactionInfo(dataSource.createTransactionId());
+        holder.setLastExecTimeMillis(System.currentTimeMillis());
     }
 
     @Override

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1464,6 +1464,7 @@ protected boolean testConnectionInternal(DruidConnectionHolder holder, Connectio
                 long currentTimeMillis = System.currentTimeMillis();
                 if (holder != null) {
                     holder.lastValidTimeMillis = currentTimeMillis;
+                    holder.lastExecTimeMillis = currentTimeMillis;
                 }
 
                 if (valid && isMySql) { // unexcepted branch

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -76,20 +76,20 @@ protected SQLException checkException(Throwable error) throws SQLException {
             sql = ((DruidPooledPreparedStatement) this).getSql();
         }
 
-        handleScoketTimeout(error);
+        handleSocketTimeout(error);
 
         exceptionCount++;
         return conn.handleException(error, sql);
     }
 
     protected SQLException checkException(Throwable error, String sql) throws SQLException {
-        handleScoketTimeout(error);
+        handleSocketTimeout(error);
 
         exceptionCount++;
         return conn.handleException(error, sql);
     }
 
-    protected void handleScoketTimeout(Throwable error) throws SQLException {
+    protected void handleSocketTimeout(Throwable error) throws SQLException {
         if (this.conn == null
                 || this.conn.transactionInfo != null
                 || this.conn.holder == null) {

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStat.java
Patch:
@@ -389,6 +389,8 @@ public JdbcSqlStatValue getValue(boolean reset) {
         val.setSql(sql);
         val.setSqlHash(getSqlHash());
         val.setId(id);
+        val.setName(name);
+        val.setFile(file);
         val.setExecuteLastStartTime(executeLastStartTime);
         if (reset) {
             executeLastStartTime = 0;

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGInsertTest12_issue_2192.java
Patch:
@@ -54,7 +54,7 @@ public void test_0() throws Exception {
         assertEquals("INSERT INTO test1 xx (tid, tid1, tvalue)\n" +
                 "VALUES (1, 1, 1), \n" +
                 "(2, 2, 2)\n" +
-                "ON CONFLICT (tid, tid1) UPDATE SET tvalue = xx.tvalue + excluded.tvalue;", stmt.toString());
+                "ON CONFLICT (tid, tid1) DO UPDATE SET tvalue = xx.tvalue + excluded.tvalue;", stmt.toString());
     }
 
 }

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGInsertTest7.java
Patch:
@@ -51,7 +51,7 @@ public void test_0() throws Exception {
 
         assertEquals("INSERT INTO test (k, v)\n" +
                 "VALUES (1, 2)\n" +
-                "ON CONFLICT (k) UPDATE SET v = EXCLUDED.v;", stmt.toString());
+                "ON CONFLICT (k) DO UPDATE SET v = EXCLUDED.v;", stmt.toString());
     }
 
 }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGOutputVisitor.java
Patch:
@@ -483,7 +483,7 @@ public boolean visit(PGInsertStatement x) {
             if (onConflictDoNothing) {
                 print0(ucase ? " DO NOTHING" : " do nothing");
             } else if ((onConflictUpdateSetItems != null && onConflictUpdateSetItems.size() > 0)) {
-                print0(ucase ? " UPDATE SET " : " update set ");
+                print0(ucase ? " DO UPDATE SET " : " do update set ");
                 printAndAccept(onConflictUpdateSetItems, ", ");
             }
         }

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -76,20 +76,20 @@ protected SQLException checkException(Throwable error) throws SQLException {
             sql = ((DruidPooledPreparedStatement) this).getSql();
         }
 
-        handleScoketTimeout(error);
+        handleSocketTimeout(error);
 
         exceptionCount++;
         return conn.handleException(error, sql);
     }
 
     protected SQLException checkException(Throwable error, String sql) throws SQLException {
-        handleScoketTimeout(error);
+        handleSocketTimeout(error);
 
         exceptionCount++;
         return conn.handleException(error, sql);
     }
 
-    protected void handleScoketTimeout(Throwable error) throws SQLException {
+    protected void handleSocketTimeout(Throwable error) throws SQLException {
         if (this.conn == null
                 || this.conn.transactionInfo != null
                 || this.conn.holder == null) {

File: src/main/java/com/alibaba/druid/sql/ast/SQLObject.java
Patch:
@@ -28,6 +28,7 @@ public interface SQLObject {
     void                setParent(SQLObject parent);
 
     Map<String, Object> getAttributes();
+    boolean             containsAttribute(String name);
     Object              getAttribute(String name);
     void                putAttribute(String name, Object value);
     Map<String, Object> getAttributesDirect();

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -246,8 +246,8 @@ public static boolean visit(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
         if (function != null) {
             Object result = function.eval(visitor, x);
 
-            if (result != SQLEvalVisitor.EVAL_ERROR) {
-                x.getAttributes().put(EVAL_VALUE, result);
+            if (result != SQLEvalVisitor.EVAL_ERROR && result != null) {
+                x.putAttribute(EVAL_VALUE, result);
             }
             return false;
         }
@@ -744,7 +744,7 @@ public static boolean visit(SQLEvalVisitor visitor, SQLCaseExpr x) {
     public static boolean visit(SQLEvalVisitor visitor, SQLInListExpr x) {
         SQLExpr valueExpr = x.getExpr();
         valueExpr.accept(visitor);
-        if (!valueExpr.getAttributes().containsKey(EVAL_VALUE)) {
+        if (!valueExpr.containsAttribute(EVAL_VALUE)) {
             return false;
         }
         Object value = valueExpr.getAttribute(EVAL_VALUE);

File: src/main/java/com/alibaba/druid/sql/visitor/functions/Concat.java
Patch:
@@ -31,7 +31,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
         for (SQLExpr item : x.getParameters()) {
             item.accept(visitor);
 
-            Object itemValue = item.getAttributes().get(EVAL_VALUE);
+            Object itemValue = item.getAttribute(EVAL_VALUE);
             if (itemValue == null) {
                 return null;
             }

File: src/main/java/com/alibaba/druid/sql/visitor/functions/Elt.java
Patch:
@@ -41,7 +41,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
         param0IntValue = ((Number) param0Value).intValue();
 
         if (param0IntValue >= x.getParameters().size()) {
-            return null;
+            return SQLEvalVisitor.EVAL_VALUE_NULL;
         }
 
         SQLExpr item = x.getParameters().get(param0IntValue);

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -1573,7 +1573,7 @@ public static Object getValue(SQLExpr x) {
     }
 
     public static Object getValue(WallVisitor visitor, SQLExpr x) {
-        if (x != null && x.getAttributes().containsKey(EVAL_VALUE)) {
+        if (x != null && x.containsAttribute(EVAL_VALUE)) {
             return getValueFromAttributes(visitor, x);
         }
 

File: src/test/java/com/alibaba/druid/bvt/sql/PagerUtilsTest_Limit_mysql_question_placeholder.java
Patch:
@@ -20,7 +20,7 @@ public void  testQuestionLimitPlaceholder1(){
     }
 
     public void  testQuestionLimitPlaceholder2(){
-        String sql = "select * from test_table limit ?, ?";
+        String sql = "select * from test_table limit 0, ?";
         testQuestionLimitPlaceholderInternal(sql);
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -4412,7 +4412,7 @@ public void endVisit(MySqlChecksumTableStatement x) {
     @Override
     public boolean visit(MySqlChecksumTableStatement x) {
         print0(ucase ? "CHECKSUM TABLE " : "checksum table ");
-        printAndAccept(x.getTables(), "，");
+        printAndAccept(x.getTables(), ", ");
         return false;
     }
 } //

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -400,7 +400,7 @@ private static boolean limitOracle(SQLSelect select, String dbType, int offset,
     private static boolean limitMySqlQueryBlock(SQLSelectQueryBlock queryBlock, String dbType, int offset, int count, boolean check) {
         SQLLimit limit = queryBlock.getLimit();
         if (limit != null) {
-            if (offset > 0) {
+            if (offset >= 0) {
                 limit.setOffset(new SQLIntegerExpr(offset));
             }
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -3401,7 +3401,7 @@ public Map<String, Object> getStatDataForMBean() {
             map.put("ActiveCount", this.getActiveCount());
             map.put("PoolingCount", this.getPoolingCount());
             map.put("LockQueueLength", this.getLockQueueLength());
-            map.put("WaitThreadCount", this.getNotEmptyWaitThreadPeak());
+            map.put("WaitThreadCount", this.getNotEmptyWaitThreadCount());
 
             // 10 - 14
             map.put("InitialSize", this.getInitialSize());

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -147,6 +147,7 @@ public boolean isOracle() {
     public void closePoolableStatement(DruidPooledPreparedStatement stmt) throws SQLException {
         PreparedStatement rawStatement = stmt.getRawPreparedStatement();
 
+        final DruidConnectionHolder holder = this.holder;
         if (holder == null) {
             return;
         }

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -98,8 +98,9 @@ protected void handleScoketTimeout(Throwable error) throws SQLException {
 
         DruidDataSource dataSource = null;
 
-        if (this.conn.holder.dataSource instanceof DruidDataSource) {
-            dataSource = (DruidDataSource) this.conn.holder.dataSource;
+        final DruidConnectionHolder holder = this.conn.holder;
+        if (holder.dataSource instanceof DruidDataSource) {
+            dataSource = (DruidDataSource) holder.dataSource;
         }
         if (dataSource == null) {
             return;

File: src/test/java/com/alibaba/druid/bvt/pool/OnFatalErrorMaxActiveTest.java
Patch:
@@ -30,10 +30,10 @@ public void test_for_fatalError() throws Exception {
         Field field = DruidAbstractDataSource.class.getDeclaredField("onFatalError");
         field.setAccessible(true);
 
-        SQLException faltalError = new SQLException();
-        {
+        SQLException faltalError = null;
+        for ( int i = 0; i < 2; i++) {
+            faltalError = new SQLException();
             Connection conn = dataSource.getConnection();
-
             Method method = DruidDataSource.class.getDeclaredMethod("handleFatalError", DruidPooledConnection.class, SQLException.class, String.class);
             method.setAccessible(true);
             method.invoke(dataSource, conn.unwrap(DruidPooledConnection.class), faltalError, "select 'x'");

File: src/test/java/com/alibaba/druid/bvt/pool/OnFatalErrorMaxActiveTest_1.java
Patch:
@@ -30,8 +30,9 @@ public void test_for_fatalError() throws Exception {
         Field field = DruidAbstractDataSource.class.getDeclaredField("onFatalError");
         field.setAccessible(true);
 
-        SQLException faltalError = new SQLException();
-        {
+        SQLException faltalError = null;
+        for ( int i = 0; i < 2; i++) {
+            faltalError = new SQLException();
             Connection conn = dataSource.getConnection();
 
             Method method = DruidDataSource.class.getDeclaredMethod("handleFatalError", DruidPooledConnection.class, SQLException.class, String.class);

File: src/test/java/com/alibaba/druid/bvt/pool/OnFatalErrorMaxActiveTest.java
Patch:
@@ -30,10 +30,10 @@ public void test_for_fatalError() throws Exception {
         Field field = DruidAbstractDataSource.class.getDeclaredField("onFatalError");
         field.setAccessible(true);
 
-        SQLException faltalError = new SQLException();
-        {
+        SQLException faltalError = null;
+        for ( int i = 0; i < 2; i++) {
+            faltalError = new SQLException();
             Connection conn = dataSource.getConnection();
-
             Method method = DruidDataSource.class.getDeclaredMethod("handleFatalError", DruidPooledConnection.class, SQLException.class, String.class);
             method.setAccessible(true);
             method.invoke(dataSource, conn.unwrap(DruidPooledConnection.class), faltalError, "select 'x'");

File: src/test/java/com/alibaba/druid/bvt/pool/OnFatalErrorMaxActiveTest_1.java
Patch:
@@ -30,8 +30,9 @@ public void test_for_fatalError() throws Exception {
         Field field = DruidAbstractDataSource.class.getDeclaredField("onFatalError");
         field.setAccessible(true);
 
-        SQLException faltalError = new SQLException();
-        {
+        SQLException faltalError = null;
+        for ( int i = 0; i < 2; i++) {
+            faltalError = new SQLException();
             Connection conn = dataSource.getConnection();
 
             Method method = DruidDataSource.class.getDeclaredMethod("handleFatalError", DruidPooledConnection.class, SQLException.class, String.class);

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -147,6 +147,7 @@ public boolean isOracle() {
     public void closePoolableStatement(DruidPooledPreparedStatement stmt) throws SQLException {
         PreparedStatement rawStatement = stmt.getRawPreparedStatement();
 
+        final DruidConnectionHolder holder = this.holder;
         if (holder == null) {
             return;
         }

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -98,8 +98,9 @@ protected void handleScoketTimeout(Throwable error) throws SQLException {
 
         DruidDataSource dataSource = null;
 
-        if (this.conn.holder.dataSource instanceof DruidDataSource) {
-            dataSource = (DruidDataSource) this.conn.holder.dataSource;
+        final DruidConnectionHolder holder = this.conn.holder;
+        if (holder.dataSource instanceof DruidDataSource) {
+            dataSource = (DruidDataSource) holder.dataSource;
         }
         if (dataSource == null) {
             return;

File: src/main/java/com/alibaba/druid/pool/DruidPooledResultSet.java
Patch:
@@ -1764,10 +1764,10 @@ public void updateNClob(String columnLabel, Reader reader) throws SQLException {
     }
 
     public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
-        throw new SQLFeatureNotSupportedException();
+        return rs.getObject(columnIndex, type);
     }
 
     public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {
-        throw new SQLFeatureNotSupportedException();
+        return rs.getObject(columnLabel, type);
     }
 }

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -400,7 +400,7 @@ private static boolean limitOracle(SQLSelect select, String dbType, int offset,
     private static boolean limitMySqlQueryBlock(SQLSelectQueryBlock queryBlock, String dbType, int offset, int count, boolean check) {
         SQLLimit limit = queryBlock.getLimit();
         if (limit != null) {
-            if (offset > 0) {
+            if (offset >= 0) {
                 limit.setOffset(new SQLIntegerExpr(offset));
             }
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -4412,7 +4412,7 @@ public void endVisit(MySqlChecksumTableStatement x) {
     @Override
     public boolean visit(MySqlChecksumTableStatement x) {
         print0(ucase ? "CHECKSUM TABLE " : "checksum table ");
-        printAndAccept(x.getTables(), "，");
+        printAndAccept(x.getTables(), ", ");
         return false;
     }
 } //

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStat.java
Patch:
@@ -389,6 +389,8 @@ public JdbcSqlStatValue getValue(boolean reset) {
         val.setSql(sql);
         val.setSqlHash(getSqlHash());
         val.setId(id);
+        val.setName(name);
+        val.setFile(file);
         val.setExecuteLastStartTime(executeLastStartTime);
         if (reset) {
             executeLastStartTime = 0;

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -2113,6 +2113,8 @@ public static class PhysicalConnectionInfo {
         private Map<String, Object> vairiables;
         private Map<String, Object> globalVairiables;
 
+        long createTaskId;
+
         public PhysicalConnectionInfo(Connection connection //
                 , long connectStartNanos //
                 , long connectedNanos //

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -2981,7 +2981,7 @@ public void shrink(boolean checkTime, boolean keepAlive) {
                     try {
                         discardCount++;
 
-                        if (activeCount <= minIdle) {
+                        if (activeCount + poolingCount <= minIdle) {
                             emptySignal();
                         }
                     } finally {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -1585,7 +1585,7 @@ public boolean visit(OracleExplainStatement x) {
             println();
         }
 
-        print0(ucase ? "FRO" : "fro");
+        print0(ucase ? "FOR" : "for");
         println();
         x.getStatement().accept(this);
 

File: src/main/java/com/alibaba/druid/pool/ha/HighAvailableDataSource.java
Patch:
@@ -34,8 +34,8 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.WrapperAdapter;
 import com.alibaba.druid.pool.ha.selector.DataSourceSelector;
+import com.alibaba.druid.pool.ha.selector.DataSourceSelectorEnum;
 import com.alibaba.druid.pool.ha.selector.DataSourceSelectorFactory;
-import com.alibaba.druid.pool.ha.selector.RandomDataSourceSelector;
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.LogFactory;
 

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -69,13 +69,14 @@ public class DruidPooledConnection extends PoolableWrapper implements javax.sql.
     private volatile     boolean               abandoned            = false;
     protected            StackTraceElement[]   connectStackTrace;
     protected            Throwable             disableError         = null;
-    public               ReentrantLock         lock                 = new ReentrantLock();
+    final                ReentrantLock         lock;
 
     public DruidPooledConnection(DruidConnectionHolder holder){
         super(holder.getConnection());
 
         this.conn = holder.getConnection();
         this.holder = holder;
+        this.lock = holder.lock;
         dupCloseLogEnable = holder.getDataSource().isDupCloseLogEnable();
         ownerThread = Thread.currentThread();
         connectedTimeMillis = System.currentTimeMillis();

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -3210,7 +3210,7 @@ public Map<String, Object> getStatDataForMBean() {
             map.put("ActiveCount", this.getActiveCount());
             map.put("PoolingCount", this.getPoolingCount());
             map.put("LockQueueLength", this.getLockQueueLength());
-            map.put("WaitThreadCount", this.getNotEmptyWaitThreadPeak());
+            map.put("WaitThreadCount", this.getNotEmptyWaitThreadCount());
 
             // 10 - 14
             map.put("InitialSize", this.getInitialSize());

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest69.java
Patch:
@@ -46,7 +46,7 @@ public void test_one() throws Exception {
             String output = SQLUtils.toMySqlString(stmt);
             Assert.assertEquals("CREATE TABLE t1 (\n" +
                     "\ts1 INT,\n" +
-                    "\ts2 INT AS (EXP(s1)) SORTED\n" +
+                    "\ts2 INT AS (EXP(s1)) STORED\n" +
                     ")\n" +
                     "PARTITION BY LIST (s2) (\n" +
                     "\tPARTITION p1 VALUES IN (1)\n" +
@@ -57,7 +57,7 @@ public void test_one() throws Exception {
             String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
             Assert.assertEquals("create table t1 (\n" +
                     "\ts1 INT,\n" +
-                    "\ts2 INT as (EXP(s1)) sorted\n" +
+                    "\ts2 INT as (EXP(s1)) stored\n" +
                     ")\n" +
                     "partition by list (s2) (\n" +
                     "\tpartition p1 values in (1)\n" +

File: src/test/java/com/alibaba/druid/bvt/sql/PagerUtilsTest_Limit_oracle_0.java
Patch:
@@ -87,9 +87,9 @@ public void test_oracle_4() throws Exception {
                 "FROM (\n" +
                 "\tSELECT XX.*, ROWNUM AS RN\n" +
                 "\tFROM (\n" +
-                "\t\tSELECT id, name, salary\n" +
-                "\t\tFROM t\n" +
-                "\t\tORDER BY id, name\n" +
+                "\t\tSELECT TO_CHAR(ADD_MONTHS(TO_DATE('2014', 'yyyy'), ROWNUM * 12), 'yyyy') AS YEAR\n" +
+                "\t\tFROM DUAL\n" +
+                "\t\tCONNECT BY ROWNUM <= months_between(to_date(to_char(SYSDATE, 'yyyy'), 'yyyy'), to_date('2014', 'yyyy')) / 12\n" +
                 "\t) XX\n" +
                 "\tWHERE ROWNUM <= 30\n" +
                 ") XXX\n" +

File: src/test/java/com/alibaba/druid/bvt/sql/PagerUtilsTest_Limit_SQLServer_4.java
Patch:
@@ -14,7 +14,7 @@ public void test_db2_union() throws Exception {
         String result = PagerUtils.limit(sql, JdbcConstants.SQL_SERVER, 100, 10);
         Assert.assertEquals("SELECT *\n" +
                 "FROM (\n" +
-                "\tSELECT *, ROW_NUMBER() OVER () AS ROWNUM\n" +
+                "\tSELECT *, ROW_NUMBER() AS ROWNUM\n" +
                 "\tFROM t1\n" +
                 "\tWHERE id > 1\n" +
                 ") XX\n" +

File: druid-spring-boot-starter/src/test/java/com/alibaba/druid/spring/boot/testcase/Issue1796TestCase.java
Patch:
@@ -15,6 +15,8 @@
 
 /**
  * @author lihengming [89921218@qq.com]
+ *
+ * for issue #1796, #3084, #2763
  */
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = DemoApplication.class)

File: druid-spring-boot-starter/src/test/java/com/alibaba/druid/spring/boot/testcase/Issue1796TestCase.java
Patch:
@@ -15,6 +15,8 @@
 
 /**
  * @author lihengming [89921218@qq.com]
+ *
+ * for issue #1796, #3084, #2763
  */
 @RunWith(SpringRunner.class)
 @SpringBootTest(classes = DemoApplication.class)

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1436,6 +1436,7 @@ public SQLName name() {
                 case EXPLAIN:
                 case PARTITION:
                 case SET:
+                case DEFAULT:
                     identName = lexer.stringVal();
                     lexer.nextToken();
                     break;

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -384,6 +384,7 @@ public static interface Constants {
         long DATE = fnv1a_64_lower("DATE");
         long DATETIME = fnv1a_64_lower("DATETIME");
         long TIME = fnv1a_64_lower("TIME");
+        long ROLE = fnv1a_64_lower("ROLE");
         long TIMESTAMP = fnv1a_64_lower("TIMESTAMP");
         long CLOB = fnv1a_64_lower("CLOB");
         long NCLOB = fnv1a_64_lower("NCLOB");

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -721,6 +721,7 @@ public SQLExpr primary() {
                         sqlExpr = new SQLUnaryExpr(SQLUnaryOperator.Negative, sqlExpr);
                         break;
                     case BANG:
+                    case CAST:
                         sqlExpr = expr();
                         sqlExpr = new SQLUnaryExpr(SQLUnaryOperator.Negative, sqlExpr);
                         break;
@@ -753,6 +754,7 @@ public SQLExpr primary() {
                         sqlExpr = new SQLUnaryExpr(SQLUnaryOperator.Plus, sqlExpr);
                         break;
                     case SUB:
+                    case CAST:
                         sqlExpr = expr();
                         sqlExpr = new SQLUnaryExpr(SQLUnaryOperator.Plus, sqlExpr);
                         break;

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -38,8 +38,6 @@
 import com.alibaba.druid.sql.SQLUtils.FormatOption;
 import com.alibaba.druid.util.JdbcUtils;
 
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
-
 /**
  * @author wenshao [szujobs@hotmail.com]
  */

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.locks.ReentrantLock;
 
 import javax.sql.ConnectionEventListener;
 import javax.sql.StatementEventListener;

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.Executor;
-import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
 import javax.sql.ConnectionEvent;

File: src/main/java/com/alibaba/druid/pool/DruidPooledPreparedStatement.java
Patch:
@@ -40,7 +40,6 @@
 import com.alibaba.druid.pool.PreparedStatementPool.MethodType;
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.LogFactory;
-import com.alibaba.druid.util.JdbcConstants;
 import com.alibaba.druid.util.OracleUtils;
 
 /**

File: src/main/java/com/alibaba/druid/pool/PoolableWrapper.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.alibaba.druid.pool;
 
-import com.alibaba.druid.proxy.jdbc.WrapperProxy;
-
 import java.sql.SQLException;
 import java.sql.Wrapper;
 
+import com.alibaba.druid.proxy.jdbc.WrapperProxy;
+
 /**
  * @author wenshao [szujobs@hotmail.com]
  */

File: src/main/java/com/alibaba/druid/pool/PreparedStatementHolder.java
Patch:
@@ -15,10 +15,10 @@
  */
 package com.alibaba.druid.pool;
 
-import com.alibaba.druid.pool.DruidPooledPreparedStatement.PreparedStatementKey;
-
 import java.sql.PreparedStatement;
 
+import com.alibaba.druid.pool.DruidPooledPreparedStatement.PreparedStatementKey;
+
 /**
  * @author wenshao [szujobs@hotmail.com]
  */

File: src/main/java/com/alibaba/druid/pool/ha/selector/DataSourceSelector.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.pool.ha.selector;
 
 import javax.sql.DataSource;
-import java.util.Map;
 
 /**
  * Interface for those selector to implement.

File: src/main/java/com/alibaba/druid/pool/ha/selector/NamedDataSourceSelector.java
Patch:
@@ -15,10 +15,11 @@
  */
 package com.alibaba.druid.pool.ha.selector;
 
-import com.alibaba.druid.pool.ha.HighAvailableDataSource;
+import java.util.Map;
 
 import javax.sql.DataSource;
-import java.util.Map;
+
+import com.alibaba.druid.pool.ha.HighAvailableDataSource;
 
 /**
  * Use the given name in ThreadLocal variable to choose DataSource.

File: src/main/java/com/alibaba/druid/pool/vendor/MockExceptionSorter.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.pool.vendor;
 
-import com.alibaba.druid.mock.MockConnectionClosedException;
-import com.alibaba.druid.pool.ExceptionSorter;
-
 import java.sql.SQLException;
 import java.util.Properties;
 
+import com.alibaba.druid.mock.MockConnectionClosedException;
+import com.alibaba.druid.pool.ExceptionSorter;
+
 public class MockExceptionSorter implements ExceptionSorter {
 
     private final static MockExceptionSorter instance = new MockExceptionSorter();

File: src/main/java/com/alibaba/druid/pool/vendor/SybaseExceptionSorter.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.pool.vendor;
 
-import com.alibaba.druid.pool.ExceptionSorter;
-
 import java.io.Serializable;
 import java.sql.SQLException;
 import java.sql.SQLRecoverableException;
 import java.util.Properties;
 
+import com.alibaba.druid.pool.ExceptionSorter;
+
 public class SybaseExceptionSorter implements ExceptionSorter, Serializable {
 
     private static final long serialVersionUID = 2742592563671255116L;

File: src/main/java/com/alibaba/druid/pool/xa/JtdsXAResource.java
Patch:
@@ -22,11 +22,11 @@
 import javax.transaction.xa.XAResource;
 import javax.transaction.xa.Xid;
 
-import net.sourceforge.jtds.jdbc.XASupport;
-
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.LogFactory;
 
+import net.sourceforge.jtds.jdbc.XASupport;
+
 public class JtdsXAResource implements XAResource {
 
     private final static Log       LOG = LogFactory.getLog(JtdsXAResource.class);

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -43,9 +43,9 @@
 import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.LogFactory;
-import com.alibaba.druid.util.Utils;
 import com.alibaba.druid.util.JMXUtils;
 import com.alibaba.druid.util.JdbcUtils;
+import com.alibaba.druid.util.Utils;
 
 /**
  * @author wenshao [szujobs@hotmail.com]

File: src/main/java/com/alibaba/druid/sql/ast/SQLDataTypeImpl.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDataTypeImpl extends SQLObjectImpl implements SQLDataType {
 
     private         String        name;

File: src/main/java/com/alibaba/druid/sql/ast/SQLExprImpl.java
Patch:
@@ -15,8 +15,6 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
-
 import java.util.Collections;
 import java.util.List;
 

File: src/main/java/com/alibaba/druid/sql/ast/SQLLimit.java
Patch:
@@ -15,9 +15,7 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 /**

File: src/main/java/com/alibaba/druid/sql/ast/SQLObjectImpl.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import java.util.Map;
 
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObject;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public abstract class SQLObjectImpl implements SQLObject {

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+
 public final class SQLOrderBy extends SQLObjectImpl {
 
     protected final List<SQLSelectOrderByItem> items = new ArrayList<SQLSelectOrderByItem>();

File: src/main/java/com/alibaba/druid/sql/ast/SQLOver.java
Patch:
@@ -1,10 +1,10 @@
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+
 /*
  * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *

File: src/main/java/com/alibaba/druid/sql/ast/SQLParameter.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+
 public final class SQLParameter extends SQLObjectImpl implements SQLObjectWithDataType {
     private SQLName                  name;
     private SQLDataType              dataType;

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartition.java
Patch:
@@ -20,8 +20,6 @@
 
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSegmentAttributes;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSegmentAttributesImpl;
-import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleLobStorageClause;
-import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleStorageClause;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLPartition extends OracleSegmentAttributesImpl implements OracleSegmentAttributes {

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByList.java
Patch:
@@ -15,9 +15,6 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLPartitionByList extends SQLPartitionBy {

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByRange.java
Patch:
@@ -15,9 +15,6 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLPartitionByRange extends SQLPartitionBy {

File: src/main/java/com/alibaba/druid/sql/ast/SQLRecordDataType.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+
 public class SQLRecordDataType extends SQLDataTypeImpl implements SQLDataType {
     private final List<SQLColumnDefinition> columns = new ArrayList<SQLColumnDefinition>();
 

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatementImpl.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.alibaba.druid.sql.ast;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.List;
-
 public abstract class SQLStatementImpl extends SQLObjectImpl implements SQLStatement {
     protected String               dbType;
     protected boolean              afterSemi;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllColumnExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public final class SQLAllColumnExpr extends SQLExprImpl {
     private transient SQLTableSource resolvedTableSource;
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public final class SQLAllExpr extends SQLExprImpl {
 
     public SQLSelect subQuery;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAnyExpr.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLDataType;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
@@ -23,9 +26,6 @@
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLAnyExpr extends SQLExprImpl {
 
     public SQLSelect subQuery;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCurrentOfCursorExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLCurrentOfCursorExpr extends SQLExprImpl {
 
     private SQLName cursorName;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLFlashbackExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 /**
  * Created by wenshao on 14/06/2017.
  */

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLGroupingSetExpr.java
Patch:
@@ -16,13 +16,10 @@
 package com.alibaba.druid.sql.ast.expr;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
-import com.alibaba.druid.sql.ast.SQLObject;
-import com.alibaba.druid.sql.ast.statement.SQLExplainStatement;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLGroupingSetExpr extends SQLExprImpl {

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLHexExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.HexBin;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLHexExpr extends SQLExprImpl implements SQLLiteralExpr, SQLValuableExpr {
 
     private final String hex;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInSubQueryExpr.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.io.Serializable;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIntegerExpr.java
Patch:
@@ -19,9 +19,6 @@
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLIntegerExpr extends SQLNumericLiteralExpr implements SQLValuableExpr{
     public static final SQLDataType DEFAULT_DATA_TYPE = new SQLDataTypeImpl("bigint");
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIntervalExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLIntervalExpr extends SQLExprImpl {
 
     private SQLExpr           value;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLListExpr.java
Patch:
@@ -16,12 +16,10 @@
 package com.alibaba.druid.sql.ast.expr;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLListExpr extends SQLExprImpl {

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNullExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
-import com.alibaba.druid.sql.ast.SQLExprImpl;
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+import static com.alibaba.druid.sql.visitor.SQLEvalVisitor.EVAL_VALUE_NULL;
 
 import java.util.Collections;
 import java.util.List;
 
-import static com.alibaba.druid.sql.visitor.SQLEvalVisitor.EVAL_VALUE_NULL;
+import com.alibaba.druid.sql.ast.SQLExprImpl;
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public final class SQLNullExpr extends SQLExprImpl implements SQLLiteralExpr, SQLValuableExpr {
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumberExpr.java
Patch:
@@ -15,14 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.math.BigDecimal;
+
 import com.alibaba.druid.sql.ast.SQLDataType;
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.Utils;
 
-import java.io.IOException;
-import java.math.BigDecimal;
-
 public class SQLNumberExpr extends SQLNumericLiteralExpr implements SQLValuableExpr {
     public final static SQLDataType defaultDataType = new SQLDataTypeImpl("number");
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumericLiteralExpr.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
-import com.alibaba.druid.sql.ast.SQLExprImpl;
-
 import java.util.Collections;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLExprImpl;
+
 public abstract class SQLNumericLiteralExpr extends SQLExprImpl implements SQLLiteralExpr {
 
     public SQLNumericLiteralExpr(){

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLRealExpr.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
-import com.alibaba.druid.sql.ast.SQLObject;
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
 import java.util.Collections;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLObject;
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+
 public class SQLRealExpr extends SQLNumericLiteralExpr implements SQLValuableExpr {
 
     private Float value;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLSequenceExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLSequenceExpr extends SQLExprImpl {
 
     private SQLName  sequence;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTextLiteralExpr.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
-import com.alibaba.druid.sql.ast.SQLExprImpl;
-
 import java.util.Collections;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLExprImpl;
+
 public abstract class SQLTextLiteralExpr extends SQLExprImpl implements SQLLiteralExpr {
 
     protected String text;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTimestampExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLDataType;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.statement.SQLCharacterDataType;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLTimestampExpr extends SQLExprImpl implements SQLValuableExpr {
     public static final SQLDataType DEFAULT_DATA_TYPE = new SQLCharacterDataType("datetime");
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLValuesExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLValuesExpr extends SQLExprImpl {
     private List<SQLListExpr> values = new ArrayList<SQLListExpr>();
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterCharacter.java
Patch:
@@ -17,9 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
-import com.alibaba.druid.sql.ast.statement.SQLAlterTableItem;
-import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLAlterCharacter extends SQLObjectImpl implements SQLAlterTableItem {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterDatabaseStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLAlterDatabaseStatement extends SQLStatementImpl implements SQLAlterStatement {
 
     private SQLName name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterProcedureStatement.java
Patch:
@@ -17,9 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterStatement;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleStatementImpl;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLAlterProcedureStatement extends SQLStatementImpl implements SQLAlterStatement {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterSequenceStatement.java
Patch:
@@ -15,16 +15,16 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLAlterSequenceStatement extends SQLStatementImpl implements SQLAlterStatement {
     private SQLName name;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddIndex.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlKey;
-import com.alibaba.druid.sql.dialect.mysql.ast.MySqlUnique;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlTableIndex;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTypeStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLAlterTypeStatement extends SQLStatementImpl {
     private SQLName name;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCharacterDataType.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLCommentHint;
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.List;
-
 public class SQLCharacterDataType extends SQLDataTypeImpl {
 
     private String             charSetName;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCloseStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 /**
  * 
  * MySql cursor close statement

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraintImpl.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLCommentHint;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 
-import java.util.List;
-
 public abstract class SQLConstraintImpl extends SQLObjectImpl implements SQLConstraint {
     protected String  dbType;
     protected SQLName name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateMaterializedViewStatement.java
Patch:
@@ -15,16 +15,16 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLPartitionBy;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSegmentAttributes;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Created by wenshao on 30/06/2017.
  */

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateStatement.java
Patch:
@@ -15,7 +15,5 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLStatement;
-
 public interface SQLCreateStatement extends SQLDDLStatement {
 }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropDatabaseStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropDatabaseStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr database;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropEventStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropEventStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropIndexStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropIndexStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName            indexName;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropLogFileGroupStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropLogFileGroupStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropMaterializedViewStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropMaterializedViewStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropSequenceStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropSequenceStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropServerStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropServerStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropSynonymStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropSynonymStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableStatement.java
Patch:
@@ -20,9 +20,7 @@
 
 import com.alibaba.druid.sql.ast.SQLCommentHint;
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLDropTableStatement extends SQLStatementImpl implements SQLDropStatement {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTriggerStatement.java
Patch:
@@ -1,5 +1,8 @@
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /*
  * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
@@ -20,9 +23,6 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropTriggerStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTypeStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropTypeStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropUserStatement.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropViewStatement.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprStatement.java
Patch:
@@ -17,8 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleStatementImpl;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLExprStatement extends SQLStatementImpl {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExternalRecordFormat.java
Patch:
@@ -17,8 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLExternalRecordFormat extends SQLObjectImpl {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLLoopStatement.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLNotNullConstraint.java
Patch:
@@ -15,11 +15,8 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLCommentHint;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.List;
-
 public class SQLNotNullConstraint extends SQLConstraintImpl implements SQLColumnConstraint {
 
     public SQLNotNullConstraint(){

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLOpenStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * 
  * @author zz [455910092@qq.com]

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLReleaseSavePointStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLReleaseSavePointStatement extends SQLStatementImpl {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLReplaceStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLReplaceStatement extends SQLStatementImpl {
     protected boolean             lowPriority = false;
     protected boolean             delayed     = false;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLReturnStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLReturnStatement extends SQLStatementImpl {
 
     private SQLExpr expr;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLRollbackStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLRollbackStatement extends SQLStatementImpl {
 
     private SQLName to;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSavePointStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLSavePointStatement extends SQLStatementImpl {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLScriptCommitStatement.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.ast.statement;
 
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLScriptCommitStatement extends SQLStatementImpl {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLCommentHint;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLSelectStatement extends SQLStatementImpl {
 
     protected SQLSelect select;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTruncateStatement.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUniqueConstraint.java
Patch:
@@ -17,8 +17,6 @@
 
 import java.util.List;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
-
 public interface SQLUniqueConstraint extends SQLConstraint {
 
     List<SQLSelectOrderByItem> getColumns();

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLValuesTableSource.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.expr.SQLListExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Created by wenshao on 23/02/2017.
  */

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLWhileStatement.java
Patch:
@@ -22,8 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStatementImpl;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 /**

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/stmt/DB2CreateTableStatement.java
Patch:
@@ -21,9 +21,6 @@
 import com.alibaba.druid.sql.dialect.db2.visitor.DB2ASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class DB2CreateTableStatement extends SQLCreateTableStatement implements DB2Statement {
     private boolean dataCaptureNone;
     private boolean dataCaptureChanges;

File: src/main/java/com/alibaba/druid/sql/dialect/db2/visitor/DB2OutputVisitor.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.expr.SQLIntervalExpr;
 import com.alibaba.druid.sql.ast.expr.SQLIntervalUnit;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
-import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.db2.ast.stmt.DB2CreateTableStatement;
 import com.alibaba.druid.sql.dialect.db2.ast.stmt.DB2SelectQueryBlock;

File: src/main/java/com/alibaba/druid/sql/dialect/h2/parser/H2ExprParser.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.h2.parser;
 
+import java.util.Arrays;
+
 import com.alibaba.druid.sql.parser.Lexer;
 import com.alibaba.druid.sql.parser.SQLExprParser;
 import com.alibaba.druid.sql.parser.SQLParserFeature;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.Arrays;
-
 public class H2ExprParser extends SQLExprParser {
     private final static String[] AGGREGATE_FUNCTIONS;
     private final static long[] AGGREGATE_FUNCTIONS_CODES;

File: src/main/java/com/alibaba/druid/sql/dialect/h2/parser/H2Lexer.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.h2.parser;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import com.alibaba.druid.sql.parser.Keywords;
 import com.alibaba.druid.sql.parser.Lexer;
 import com.alibaba.druid.sql.parser.SQLParserFeature;
 import com.alibaba.druid.sql.parser.Token;
 
-import java.util.HashMap;
-import java.util.Map;
-
 public class H2Lexer extends Lexer {
     public final static Keywords DEFAULT_H2_KEYWORDS;
 

File: src/main/java/com/alibaba/druid/sql/dialect/h2/visitor/H2OutputVisitor.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.h2.visitor;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.ast.statement.SQLReplaceStatement;
 import com.alibaba.druid.sql.visitor.SQLASTOutputVisitor;
 
-import java.util.List;
-
 public class H2OutputVisitor extends SQLASTOutputVisitor implements H2ASTVisitor {
     public H2OutputVisitor(Appendable appender) {
         super(appender);

File: src/main/java/com/alibaba/druid/sql/dialect/hive/ast/HiveInsertStatement.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.dialect.hive.ast;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
@@ -23,9 +26,6 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class HiveInsertStatement extends SQLInsertStatement implements SQLStatement {
     private boolean              overwrite  = false;
     private List<SQLAssignItem>  partitions = new ArrayList<SQLAssignItem>();

File: src/main/java/com/alibaba/druid/sql/dialect/hive/ast/HiveMultiInsertStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.hive.ast;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
 import com.alibaba.druid.sql.dialect.hive.visitor.HiveASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class HiveMultiInsertStatement extends SQLStatementImpl {
 
     private SQLTableSource from;

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveExprParser.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.alibaba.druid.sql.dialect.hive.parser;
 
+import java.util.Arrays;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLArrayExpr;
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
@@ -24,8 +26,6 @@
 import com.alibaba.druid.sql.parser.Token;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.Arrays;
-
 public class HiveExprParser extends SQLExprParser {
     private final static String[] AGGREGATE_FUNCTIONS;
     private final static long[] AGGREGATE_FUNCTIONS_CODES;

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveLexer.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.hive.parser;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import com.alibaba.druid.sql.parser.Keywords;
 import com.alibaba.druid.sql.parser.Lexer;
 import com.alibaba.druid.sql.parser.SQLParserFeature;
 import com.alibaba.druid.sql.parser.Token;
 
-import java.util.HashMap;
-import java.util.Map;
-
 public class HiveLexer extends Lexer {
     public final static Keywords DEFAULT_HIVE_KEYWORDS;
 

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveSelectParser.java
Patch:
@@ -16,9 +16,9 @@
 package com.alibaba.druid.sql.dialect.hive.parser;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.SQLOrderingSpecification;
-import com.alibaba.druid.sql.ast.statement.*;
+import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
+import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.parser.SQLExprParser;
 import com.alibaba.druid.sql.parser.SQLSelectListCache;
 import com.alibaba.druid.sql.parser.SQLSelectParser;

File: src/main/java/com/alibaba/druid/sql/dialect/hive/stmt/HiveCreateTableStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.hive.stmt;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
 import com.alibaba.druid.sql.dialect.hive.visitor.HiveASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 
-import java.util.List;
-
 public class HiveCreateTableStatement extends SQLCreateTableStatement {
 
     public HiveCreateTableStatement() {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlKey.java
Patch:
@@ -16,12 +16,9 @@
 package com.alibaba.druid.sql.dialect.mysql.ast;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
 import com.alibaba.druid.sql.ast.statement.SQLTableConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLUnique;
 import com.alibaba.druid.sql.ast.statement.SQLUniqueConstraint;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlAlterTableChangeColumn;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlUnique.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast;
 
-import com.alibaba.druid.sql.ast.statement.SQLPrimaryKey;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
 public class MySqlUnique extends MySqlKey {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlCursorDeclareStatement.java
Patch:
@@ -18,7 +18,6 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
-import com.alibaba.druid.sql.ast.statement.SQLSelectStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStatementImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 /**

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlDeclareStatement.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLDeclareItem;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStatementImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlLeaveStatement.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.clause;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStatementImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 /**
  * 
  * @author zz [455910092@qq.com]

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlSelectIntoStatement.java
Patch:
@@ -18,10 +18,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStatementImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
-import com.alibaba.druid.sql.ast.SQLExpr;
 /**
  * 
  * @author zz [455910092@qq.com]

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlExtractExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.expr.SQLIntervalUnit;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class MySqlExtractExpr extends SQLExprImpl implements MySqlExpr {
 
     private SQLExpr           value;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlMatchAgainstExpr.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlOrderingExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLOrderingSpecification;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class MySqlOrderingExpr extends SQLExprImpl implements MySqlExpr {
 
     protected SQLExpr                  expr;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlOutFileExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLLiteralExpr;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class MySqlOutFileExpr extends MySqlObjectImpl implements SQLExpr {
 
     private SQLExpr        file;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlUserName.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.Collections;
-import java.util.List;
-
 public class MySqlUserName extends MySqlExprImpl implements SQLName, Cloneable {
 
     private String userName;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlAlterTableChangeColumn.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableItem;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlAlterTableModifyColumn.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableItem;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlChecksumTableStatement.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
+import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
+
 public class MySqlChecksumTableStatement extends MySqlStatementImpl {
     private final List<SQLExprTableSource> tables = new ArrayList<SQLExprTableSource>();
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlCreateServerStatement.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.statement.SQLAlterStatement;
 import com.alibaba.druid.sql.ast.statement.SQLCreateStatement;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlDeleteStatement.java
Patch:
@@ -19,11 +19,10 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLCommentHint;
+import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.statement.SQLDeleteStatement;
-import com.alibaba.druid.sql.ast.statement.SQLTableSource;
-import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlOutputVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlEventSchedule.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObject;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlExecuteStatement.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlExplainStatement.java
Patch:
@@ -19,8 +19,6 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLExplainStatement;
-import com.alibaba.druid.sql.dialect.mysql.ast.clause.MySqlExplainType;
-import com.alibaba.druid.sql.dialect.mysql.ast.clause.MySqlFormatName;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlFlushStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Created by wenshao on 16/08/2017.
  */

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlPrepareStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class MySqlPrepareStatement extends MySqlStatementImpl {
 
     private SQLName name;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlRenameTableStatement.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlSelectQueryBlock.java
Patch:
@@ -19,12 +19,11 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.SQLUtils;
-import com.alibaba.druid.sql.ast.*;
-import com.alibaba.druid.sql.ast.statement.SQLSelectItem;
+import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObject;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleSelectQueryBlock;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlSetTransactionStatement.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLObject;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
-
 import java.util.Collections;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLObject;
+import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
+
 public class MySqlSetTransactionStatement extends MySqlStatementImpl {
 
     private Boolean global;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlShowColumnsStatement.java
Patch:
@@ -15,16 +15,16 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class MySqlShowColumnsStatement extends MySqlStatementImpl implements MySqlShowStatement {
 
     private boolean full;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlShowCreateTableStatement.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlShowDatabasePartitionStatusStatement.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlStatementImpl.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 
-import java.util.List;
-
 public abstract class MySqlStatementImpl extends SQLStatementImpl implements MySqlStatement {
 
     public MySqlStatementImpl() {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlSubPartitionByList.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLSubPartitionBy;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObject;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlTableIndex.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
-import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
 import com.alibaba.druid.sql.ast.statement.SQLTableElement;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlUpdateStatement.java
Patch:
@@ -16,10 +16,9 @@
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateStatement;
-import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MysqlDeallocatePrepareStatement.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class MysqlDeallocatePrepareStatement extends MySqlStatementImpl {
 	
 	private SQLName statementName;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlEvalVisitorImpl.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.List;
 import java.util.Map;
 
-import com.alibaba.druid.sql.ast.expr.SQLBinaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBetweenExpr;
+import com.alibaba.druid.sql.ast.expr.SQLBinaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBooleanExpr;
 import com.alibaba.druid.sql.ast.expr.SQLCaseExpr;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlExportParameterVisitor.java
Patch:
@@ -18,14 +18,14 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.expr.SQLBetweenExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
 import com.alibaba.druid.sql.ast.expr.SQLInListExpr;
 import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelectGroupByClause;
 import com.alibaba.druid.sql.ast.statement.SQLSelectItem;
-import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlFlushStatement;
 import com.alibaba.druid.sql.visitor.ExportParameterVisitor;
 import com.alibaba.druid.sql.visitor.ExportParameterVisitorUtils;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/transform/OrderByResolve.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.visitor.transform;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLOrderBy;
@@ -26,9 +29,6 @@
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitorAdapter;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Created by wenshao on 27/07/2017.
  */

File: src/main/java/com/alibaba/druid/sql/dialect/odps/ast/OdpsListStmt.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.odps.ast;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.odps.visitor.OdpsASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/ast/OdpsSelectQueryBlock.java
Patch:
@@ -16,11 +16,9 @@
 package com.alibaba.druid.sql.dialect.odps.ast;
 
 import java.util.ArrayList;
-import java.util.List;
 
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/ast/OdpsShowGrantsStmt.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.odps.ast;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.odps.visitor.OdpsASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/ast/OdpsShowPartitionsStmt.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.odps.ast;
 
-import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.dialect.odps.visitor.OdpsASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsSelectParser.java
Patch:
@@ -20,11 +20,9 @@
 import com.alibaba.druid.sql.ast.SQLOrderingSpecification;
 import com.alibaba.druid.sql.ast.SQLSetQuantifier;
 import com.alibaba.druid.sql.ast.expr.SQLListExpr;
-import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQuery;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
-import com.alibaba.druid.sql.ast.statement.SQLLateralViewTableSource;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsValuesTableSource;
 import com.alibaba.druid.sql.parser.SQLExprParser;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsStatementParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
-import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.ast.statement.SQLObjectType;
@@ -31,10 +30,10 @@
 import com.alibaba.druid.sql.ast.statement.SQLSetStatement;
 import com.alibaba.druid.sql.ast.statement.SQLShowTablesStatement;
 import com.alibaba.druid.sql.ast.statement.SQLSubqueryTableSource;
+import com.alibaba.druid.sql.dialect.hive.ast.HiveInsert;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsAddStatisticStatement;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsAnalyzeTableStatement;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsGrantStmt;
-import com.alibaba.druid.sql.dialect.hive.ast.HiveInsert;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsInsertStatement;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsListStmt;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsReadStatement;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/OracleDataTypeIntervalYear.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.oracle.ast;
 
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/OracleSQLObjectImpl.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLDataType;
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/clause/OracleLobStorageClause.java
Patch:
@@ -21,7 +21,6 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObject;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSegmentAttributesImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/clause/PartitionExtensionClause.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleSelectPivotBase;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
 public class PartitionExtensionClause extends OracleSQLObjectImpl {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleAnalyticWindowing.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleAnalyticWindowing extends SQLObjectImpl implements OracleExpr {
 
     private Type    type;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleArgumentExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleArgumentExpr extends OracleSQLObjectImpl implements SQLExpr {
 
     private String  argumentName;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleBinaryFloatExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.expr.SQLNumericLiteralExpr;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleBinaryFloatExpr extends SQLNumericLiteralExpr implements OracleExpr {
 
     private Float value;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleCursorExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleCursorExpr extends SQLExprImpl implements OracleExpr {
 
     private SQLSelect query;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleDbLinkExpr.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLName;
@@ -23,9 +26,6 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleDbLinkExpr extends SQLExprImpl implements SQLName, OracleExpr {
 
     private SQLExpr expr;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleIntervalExpr.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
@@ -23,9 +26,6 @@
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleIntervalExpr extends SQLExprImpl implements SQLLiteralExpr, OracleExpr {
 
     private SQLExpr            value;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleIsSetExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleIsSetExpr extends SQLExprImpl implements OracleExpr {
 
     private SQLExpr nestedTable;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleOuterExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleOuterExpr extends SQLExprImpl implements OracleExpr {
 
     private SQLExpr expr;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleSizeExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleSizeExpr extends OracleSQLObjectImpl implements OracleExpr {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleSysdateExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleSysdateExpr extends OracleSQLObjectImpl implements SQLExpr {
 
     private String option;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterStatement.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
-import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.statement.SQLAlterStatement;
 
 public interface OracleAlterStatement extends SQLAlterStatement, OracleStatement {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleContinueStatement.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
 public class OracleContinueStatement extends OracleStatementImpl {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleExecuteImmediateStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLArgument;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLCharExpr;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class OracleExecuteImmediateStatement extends OracleStatementImpl {
 
     private SQLExpr dynamicSql;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleLockTableStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class OracleLockTableStatement extends OracleStatementImpl {
 
     private SQLExprTableSource table;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OraclePipeRowStatement.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
+
 public class OraclePipeRowStatement extends OracleStatementImpl {
     private final List<SQLExpr> parameters = new ArrayList<SQLExpr>();
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleRunStatement.java
Patch:
@@ -18,8 +18,6 @@
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.ast.expr.SQLCharExpr;
-import com.alibaba.druid.sql.ast.statement.SQLExplainStatement;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectPivotBase.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObject;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 
 public abstract class OracleSelectPivotBase extends OracleSQLObjectImpl {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectSubqueryTableSource.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
 import com.alibaba.druid.sql.SQLUtils;
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.ast.statement.SQLSubqueryTableSource;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectTableSource.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
 
 public interface OracleSelectTableSource extends SQLTableSource {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSetTransactionStatement.java
Patch:
@@ -16,10 +16,7 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
-import com.alibaba.druid.sql.dialect.sqlserver.ast.SQLServerStatementImpl;
-import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerASTVisitor;
 
 public class OracleSetTransactionStatement extends OracleStatementImpl implements OracleStatement {
 

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/ast/PhoenixObject.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.phoenix.ast;
 
 import com.alibaba.druid.sql.ast.SQLObject;
-import com.alibaba.druid.sql.dialect.db2.visitor.DB2ASTVisitor;
 import com.alibaba.druid.sql.dialect.phoenix.visitor.PhoenixASTVisitor;
 
 /**

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/ast/PhoenixStatementImpl.java
Patch:
@@ -16,8 +16,6 @@
 package com.alibaba.druid.sql.dialect.phoenix.ast;
 
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.dialect.db2.ast.DB2Object;
-import com.alibaba.druid.sql.dialect.db2.visitor.DB2ASTVisitor;
 import com.alibaba.druid.sql.dialect.phoenix.visitor.PhoenixASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/parser/PhoenixLexer.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.phoenix.parser;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import com.alibaba.druid.sql.parser.Keywords;
 import com.alibaba.druid.sql.parser.Lexer;
 import com.alibaba.druid.sql.parser.Token;
 
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Created by wenshao on 16/9/13.
  */

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/parser/PhoenixStatementParser.java
Patch:
@@ -17,11 +17,8 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.statement.SQLInsertInto;
-import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.parser.Lexer;
-import com.alibaba.druid.sql.parser.ParserException;
 import com.alibaba.druid.sql.parser.SQLStatementParser;
 import com.alibaba.druid.sql.parser.Token;
 

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/visitor/PhoenixSchemaStatVisitor.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.phoenix.visitor;
 
-import com.alibaba.druid.sql.dialect.db2.visitor.DB2ASTVisitor;
 import com.alibaba.druid.sql.visitor.SchemaStatVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGBoxExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGBoxExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGCidrExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGCidrExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGCircleExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGCircleExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGExtractExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGExtractExpr extends PGExprImpl {
 
     private PGDateField field;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGInetExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGInetExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGLineSegmentsExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGLineSegmentsExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGMacAddrExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 
 public class PGMacAddrExpr extends PGExprImpl {
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGPointExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGPointExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGPolygonExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 
 public class PGPolygonExpr extends PGExprImpl {
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGInsertStatement.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateSetItem;
-import com.alibaba.druid.sql.ast.statement.SQLWithSubqueryClause;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGUpdateStatement.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.postgresql.ast.stmt;
 
 import com.alibaba.druid.sql.ast.statement.SQLUpdateStatement;
-import com.alibaba.druid.sql.ast.statement.SQLWithSubqueryClause;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -38,8 +38,6 @@
 import com.alibaba.druid.sql.SQLUtils.FormatOption;
 import com.alibaba.druid.util.JdbcUtils;
 
-import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
-
 /**
  * @author wenshao [szujobs@hotmail.com]
  */

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.CopyOnWriteArrayList;
-import java.util.concurrent.locks.ReentrantLock;
 
 import javax.sql.ConnectionEventListener;
 import javax.sql.StatementEventListener;

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -35,7 +35,6 @@
 import java.util.Map;
 import java.util.Properties;
 import java.util.concurrent.Executor;
-import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
 import javax.sql.ConnectionEvent;

File: src/main/java/com/alibaba/druid/pool/DruidPooledPreparedStatement.java
Patch:
@@ -40,7 +40,6 @@
 import com.alibaba.druid.pool.PreparedStatementPool.MethodType;
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.LogFactory;
-import com.alibaba.druid.util.JdbcConstants;
 import com.alibaba.druid.util.OracleUtils;
 
 /**

File: src/main/java/com/alibaba/druid/pool/PoolableWrapper.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.alibaba.druid.pool;
 
-import com.alibaba.druid.proxy.jdbc.WrapperProxy;
-
 import java.sql.SQLException;
 import java.sql.Wrapper;
 
+import com.alibaba.druid.proxy.jdbc.WrapperProxy;
+
 /**
  * @author wenshao [szujobs@hotmail.com]
  */

File: src/main/java/com/alibaba/druid/pool/PreparedStatementHolder.java
Patch:
@@ -15,10 +15,10 @@
  */
 package com.alibaba.druid.pool;
 
-import com.alibaba.druid.pool.DruidPooledPreparedStatement.PreparedStatementKey;
-
 import java.sql.PreparedStatement;
 
+import com.alibaba.druid.pool.DruidPooledPreparedStatement.PreparedStatementKey;
+
 /**
  * @author wenshao [szujobs@hotmail.com]
  */

File: src/main/java/com/alibaba/druid/pool/ha/selector/DataSourceSelector.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.pool.ha.selector;
 
 import javax.sql.DataSource;
-import java.util.Map;
 
 /**
  * Interface for those selector to implement.

File: src/main/java/com/alibaba/druid/pool/ha/selector/NamedDataSourceSelector.java
Patch:
@@ -15,10 +15,11 @@
  */
 package com.alibaba.druid.pool.ha.selector;
 
-import com.alibaba.druid.pool.ha.HighAvailableDataSource;
+import java.util.Map;
 
 import javax.sql.DataSource;
-import java.util.Map;
+
+import com.alibaba.druid.pool.ha.HighAvailableDataSource;
 
 /**
  * Use the given name in ThreadLocal variable to choose DataSource.

File: src/main/java/com/alibaba/druid/pool/vendor/MockExceptionSorter.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.pool.vendor;
 
-import com.alibaba.druid.mock.MockConnectionClosedException;
-import com.alibaba.druid.pool.ExceptionSorter;
-
 import java.sql.SQLException;
 import java.util.Properties;
 
+import com.alibaba.druid.mock.MockConnectionClosedException;
+import com.alibaba.druid.pool.ExceptionSorter;
+
 public class MockExceptionSorter implements ExceptionSorter {
 
     private final static MockExceptionSorter instance = new MockExceptionSorter();

File: src/main/java/com/alibaba/druid/pool/vendor/SybaseExceptionSorter.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.pool.vendor;
 
-import com.alibaba.druid.pool.ExceptionSorter;
-
 import java.io.Serializable;
 import java.sql.SQLException;
 import java.sql.SQLRecoverableException;
 import java.util.Properties;
 
+import com.alibaba.druid.pool.ExceptionSorter;
+
 public class SybaseExceptionSorter implements ExceptionSorter, Serializable {
 
     private static final long serialVersionUID = 2742592563671255116L;

File: src/main/java/com/alibaba/druid/pool/xa/JtdsXAResource.java
Patch:
@@ -22,11 +22,11 @@
 import javax.transaction.xa.XAResource;
 import javax.transaction.xa.Xid;
 
-import net.sourceforge.jtds.jdbc.XASupport;
-
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.LogFactory;
 
+import net.sourceforge.jtds.jdbc.XASupport;
+
 public class JtdsXAResource implements XAResource {
 
     private final static Log       LOG = LogFactory.getLog(JtdsXAResource.class);

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -43,9 +43,9 @@
 import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.LogFactory;
-import com.alibaba.druid.util.Utils;
 import com.alibaba.druid.util.JMXUtils;
 import com.alibaba.druid.util.JdbcUtils;
+import com.alibaba.druid.util.Utils;
 
 /**
  * @author wenshao [szujobs@hotmail.com]

File: src/main/java/com/alibaba/druid/sql/ast/SQLDataTypeImpl.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDataTypeImpl extends SQLObjectImpl implements SQLDataType {
 
     private         String        name;

File: src/main/java/com/alibaba/druid/sql/ast/SQLExprImpl.java
Patch:
@@ -15,8 +15,6 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
-
 import java.util.Collections;
 import java.util.List;
 

File: src/main/java/com/alibaba/druid/sql/ast/SQLLimit.java
Patch:
@@ -15,9 +15,7 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 /**

File: src/main/java/com/alibaba/druid/sql/ast/SQLObjectImpl.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import java.util.Map;
 
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObject;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public abstract class SQLObjectImpl implements SQLObject {

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+
 public final class SQLOrderBy extends SQLObjectImpl {
 
     protected final List<SQLSelectOrderByItem> items = new ArrayList<SQLSelectOrderByItem>();

File: src/main/java/com/alibaba/druid/sql/ast/SQLOver.java
Patch:
@@ -1,10 +1,10 @@
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+
 /*
  * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *

File: src/main/java/com/alibaba/druid/sql/ast/SQLParameter.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+
 public final class SQLParameter extends SQLObjectImpl implements SQLObjectWithDataType {
     private SQLName                  name;
     private SQLDataType              dataType;

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartition.java
Patch:
@@ -20,8 +20,6 @@
 
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSegmentAttributes;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSegmentAttributesImpl;
-import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleLobStorageClause;
-import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleStorageClause;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLPartition extends OracleSegmentAttributesImpl implements OracleSegmentAttributes {

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByList.java
Patch:
@@ -15,9 +15,6 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLPartitionByList extends SQLPartitionBy {

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByRange.java
Patch:
@@ -15,9 +15,6 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLPartitionByRange extends SQLPartitionBy {

File: src/main/java/com/alibaba/druid/sql/ast/SQLRecordDataType.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+
 public class SQLRecordDataType extends SQLDataTypeImpl implements SQLDataType {
     private final List<SQLColumnDefinition> columns = new ArrayList<SQLColumnDefinition>();
 

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatementImpl.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.alibaba.druid.sql.ast;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.List;
-
 public abstract class SQLStatementImpl extends SQLObjectImpl implements SQLStatement {
     protected String               dbType;
     protected boolean              afterSemi;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllColumnExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public final class SQLAllColumnExpr extends SQLExprImpl {
     private transient SQLTableSource resolvedTableSource;
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public final class SQLAllExpr extends SQLExprImpl {
 
     public SQLSelect subQuery;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAnyExpr.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLDataType;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
@@ -23,9 +26,6 @@
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLAnyExpr extends SQLExprImpl {
 
     public SQLSelect subQuery;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCurrentOfCursorExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLCurrentOfCursorExpr extends SQLExprImpl {
 
     private SQLName cursorName;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLFlashbackExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 /**
  * Created by wenshao on 14/06/2017.
  */

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLGroupingSetExpr.java
Patch:
@@ -16,13 +16,10 @@
 package com.alibaba.druid.sql.ast.expr;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
-import com.alibaba.druid.sql.ast.SQLObject;
-import com.alibaba.druid.sql.ast.statement.SQLExplainStatement;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLGroupingSetExpr extends SQLExprImpl {

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLHexExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.HexBin;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLHexExpr extends SQLExprImpl implements SQLLiteralExpr, SQLValuableExpr {
 
     private final String hex;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInSubQueryExpr.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.io.Serializable;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.List;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIntegerExpr.java
Patch:
@@ -19,9 +19,6 @@
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLIntegerExpr extends SQLNumericLiteralExpr implements SQLValuableExpr{
     public static final SQLDataType DEFAULT_DATA_TYPE = new SQLDataTypeImpl("bigint");
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIntervalExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLIntervalExpr extends SQLExprImpl {
 
     private SQLExpr           value;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLListExpr.java
Patch:
@@ -16,12 +16,10 @@
 package com.alibaba.druid.sql.ast.expr;
 
 import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLListExpr extends SQLExprImpl {

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNullExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
-import com.alibaba.druid.sql.ast.SQLExprImpl;
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+import static com.alibaba.druid.sql.visitor.SQLEvalVisitor.EVAL_VALUE_NULL;
 
 import java.util.Collections;
 import java.util.List;
 
-import static com.alibaba.druid.sql.visitor.SQLEvalVisitor.EVAL_VALUE_NULL;
+import com.alibaba.druid.sql.ast.SQLExprImpl;
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public final class SQLNullExpr extends SQLExprImpl implements SQLLiteralExpr, SQLValuableExpr {
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumberExpr.java
Patch:
@@ -15,14 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.math.BigDecimal;
+
 import com.alibaba.druid.sql.ast.SQLDataType;
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.Utils;
 
-import java.io.IOException;
-import java.math.BigDecimal;
-
 public class SQLNumberExpr extends SQLNumericLiteralExpr implements SQLValuableExpr {
     public final static SQLDataType defaultDataType = new SQLDataTypeImpl("number");
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumericLiteralExpr.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
-import com.alibaba.druid.sql.ast.SQLExprImpl;
-
 import java.util.Collections;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLExprImpl;
+
 public abstract class SQLNumericLiteralExpr extends SQLExprImpl implements SQLLiteralExpr {
 
     public SQLNumericLiteralExpr(){

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLRealExpr.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
-import com.alibaba.druid.sql.ast.SQLObject;
-import com.alibaba.druid.sql.visitor.SQLASTVisitor;
-
 import java.util.Collections;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLObject;
+import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+
 public class SQLRealExpr extends SQLNumericLiteralExpr implements SQLValuableExpr {
 
     private Float value;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLSequenceExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLSequenceExpr extends SQLExprImpl {
 
     private SQLName  sequence;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTextLiteralExpr.java
Patch:
@@ -15,11 +15,11 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
-import com.alibaba.druid.sql.ast.SQLExprImpl;
-
 import java.util.Collections;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLExprImpl;
+
 public abstract class SQLTextLiteralExpr extends SQLExprImpl implements SQLLiteralExpr {
 
     protected String text;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTimestampExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLDataType;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.statement.SQLCharacterDataType;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLTimestampExpr extends SQLExprImpl implements SQLValuableExpr {
     public static final SQLDataType DEFAULT_DATA_TYPE = new SQLCharacterDataType("datetime");
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLValuesExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.ast.expr;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLValuesExpr extends SQLExprImpl {
     private List<SQLListExpr> values = new ArrayList<SQLListExpr>();
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterCharacter.java
Patch:
@@ -17,9 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
-import com.alibaba.druid.sql.ast.statement.SQLAlterTableItem;
-import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLAlterCharacter extends SQLObjectImpl implements SQLAlterTableItem {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterDatabaseStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLAlterDatabaseStatement extends SQLStatementImpl implements SQLAlterStatement {
 
     private SQLName name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterProcedureStatement.java
Patch:
@@ -17,9 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterStatement;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleStatementImpl;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLAlterProcedureStatement extends SQLStatementImpl implements SQLAlterStatement {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterSequenceStatement.java
Patch:
@@ -15,16 +15,16 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLAlterSequenceStatement extends SQLStatementImpl implements SQLAlterStatement {
     private SQLName name;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddIndex.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlKey;
-import com.alibaba.druid.sql.dialect.mysql.ast.MySqlUnique;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlTableIndex;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTypeStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLAlterTypeStatement extends SQLStatementImpl {
     private SQLName name;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCharacterDataType.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLCommentHint;
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.List;
-
 public class SQLCharacterDataType extends SQLDataTypeImpl {
 
     private String             charSetName;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCloseStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 /**
  * 
  * MySql cursor close statement

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraintImpl.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLCommentHint;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 
-import java.util.List;
-
 public abstract class SQLConstraintImpl extends SQLObjectImpl implements SQLConstraint {
     protected String  dbType;
     protected SQLName name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateMaterializedViewStatement.java
Patch:
@@ -15,16 +15,16 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLPartitionBy;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSegmentAttributes;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Created by wenshao on 30/06/2017.
  */

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateStatement.java
Patch:
@@ -15,7 +15,5 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLStatement;
-
 public interface SQLCreateStatement extends SQLDDLStatement {
 }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropDatabaseStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropDatabaseStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr database;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropEventStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropEventStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropIndexStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropIndexStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName            indexName;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropLogFileGroupStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropLogFileGroupStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropMaterializedViewStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropMaterializedViewStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropSequenceStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropSequenceStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropServerStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropServerStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropSynonymStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropSynonymStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableStatement.java
Patch:
@@ -20,9 +20,7 @@
 
 import com.alibaba.druid.sql.ast.SQLCommentHint;
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLDropTableStatement extends SQLStatementImpl implements SQLDropStatement {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTriggerStatement.java
Patch:
@@ -1,5 +1,8 @@
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 /*
  * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
@@ -20,9 +23,6 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropTriggerStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTypeStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLDropTypeStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropUserStatement.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropViewStatement.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprStatement.java
Patch:
@@ -17,8 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleStatementImpl;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLExprStatement extends SQLStatementImpl {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExternalRecordFormat.java
Patch:
@@ -17,8 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLExternalRecordFormat extends SQLObjectImpl {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLLoopStatement.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLNotNullConstraint.java
Patch:
@@ -15,11 +15,8 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLCommentHint;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.List;
-
 public class SQLNotNullConstraint extends SQLConstraintImpl implements SQLColumnConstraint {
 
     public SQLNotNullConstraint(){

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLOpenStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * 
  * @author zz [455910092@qq.com]

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLReleaseSavePointStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLReleaseSavePointStatement extends SQLStatementImpl {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLReplaceStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLReplaceStatement extends SQLStatementImpl {
     protected boolean             lowPriority = false;
     protected boolean             delayed     = false;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLReturnStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLReturnStatement extends SQLStatementImpl {
 
     private SQLExpr expr;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLRollbackStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLRollbackStatement extends SQLStatementImpl {
 
     private SQLName to;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSavePointStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class SQLSavePointStatement extends SQLStatementImpl {
 
     private SQLExpr name;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLScriptCommitStatement.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.ast.statement;
 
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class SQLScriptCommitStatement extends SQLStatementImpl {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLCommentHint;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class SQLSelectStatement extends SQLStatementImpl {
 
     protected SQLSelect select;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTruncateStatement.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUniqueConstraint.java
Patch:
@@ -17,8 +17,6 @@
 
 import java.util.List;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
-
 public interface SQLUniqueConstraint extends SQLConstraint {
 
     List<SQLSelectOrderByItem> getColumns();

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLValuesTableSource.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.expr.SQLListExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Created by wenshao on 23/02/2017.
  */

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLWhileStatement.java
Patch:
@@ -22,8 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStatementImpl;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 /**

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/stmt/DB2CreateTableStatement.java
Patch:
@@ -21,9 +21,6 @@
 import com.alibaba.druid.sql.dialect.db2.visitor.DB2ASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class DB2CreateTableStatement extends SQLCreateTableStatement implements DB2Statement {
     private boolean dataCaptureNone;
     private boolean dataCaptureChanges;

File: src/main/java/com/alibaba/druid/sql/dialect/db2/visitor/DB2OutputVisitor.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.expr.SQLIntervalExpr;
 import com.alibaba.druid.sql.ast.expr.SQLIntervalUnit;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
-import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.db2.ast.stmt.DB2CreateTableStatement;
 import com.alibaba.druid.sql.dialect.db2.ast.stmt.DB2SelectQueryBlock;

File: src/main/java/com/alibaba/druid/sql/dialect/h2/parser/H2ExprParser.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.h2.parser;
 
+import java.util.Arrays;
+
 import com.alibaba.druid.sql.parser.Lexer;
 import com.alibaba.druid.sql.parser.SQLExprParser;
 import com.alibaba.druid.sql.parser.SQLParserFeature;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.Arrays;
-
 public class H2ExprParser extends SQLExprParser {
     private final static String[] AGGREGATE_FUNCTIONS;
     private final static long[] AGGREGATE_FUNCTIONS_CODES;

File: src/main/java/com/alibaba/druid/sql/dialect/h2/parser/H2Lexer.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.h2.parser;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import com.alibaba.druid.sql.parser.Keywords;
 import com.alibaba.druid.sql.parser.Lexer;
 import com.alibaba.druid.sql.parser.SQLParserFeature;
 import com.alibaba.druid.sql.parser.Token;
 
-import java.util.HashMap;
-import java.util.Map;
-
 public class H2Lexer extends Lexer {
     public final static Keywords DEFAULT_H2_KEYWORDS;
 

File: src/main/java/com/alibaba/druid/sql/dialect/h2/visitor/H2OutputVisitor.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.h2.visitor;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.ast.statement.SQLReplaceStatement;
 import com.alibaba.druid.sql.visitor.SQLASTOutputVisitor;
 
-import java.util.List;
-
 public class H2OutputVisitor extends SQLASTOutputVisitor implements H2ASTVisitor {
     public H2OutputVisitor(Appendable appender) {
         super(appender);

File: src/main/java/com/alibaba/druid/sql/dialect/hive/ast/HiveInsertStatement.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.dialect.hive.ast;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
@@ -23,9 +26,6 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class HiveInsertStatement extends SQLInsertStatement implements SQLStatement {
     private boolean              overwrite  = false;
     private List<SQLAssignItem>  partitions = new ArrayList<SQLAssignItem>();

File: src/main/java/com/alibaba/druid/sql/dialect/hive/ast/HiveMultiInsertStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.hive.ast;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
 import com.alibaba.druid.sql.dialect.hive.visitor.HiveASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class HiveMultiInsertStatement extends SQLStatementImpl {
 
     private SQLTableSource from;

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveExprParser.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.alibaba.druid.sql.dialect.hive.parser;
 
+import java.util.Arrays;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLArrayExpr;
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
@@ -24,8 +26,6 @@
 import com.alibaba.druid.sql.parser.Token;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.Arrays;
-
 public class HiveExprParser extends SQLExprParser {
     private final static String[] AGGREGATE_FUNCTIONS;
     private final static long[] AGGREGATE_FUNCTIONS_CODES;

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveLexer.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.hive.parser;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import com.alibaba.druid.sql.parser.Keywords;
 import com.alibaba.druid.sql.parser.Lexer;
 import com.alibaba.druid.sql.parser.SQLParserFeature;
 import com.alibaba.druid.sql.parser.Token;
 
-import java.util.HashMap;
-import java.util.Map;
-
 public class HiveLexer extends Lexer {
     public final static Keywords DEFAULT_HIVE_KEYWORDS;
 

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveSelectParser.java
Patch:
@@ -16,9 +16,9 @@
 package com.alibaba.druid.sql.dialect.hive.parser;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.SQLOrderingSpecification;
-import com.alibaba.druid.sql.ast.statement.*;
+import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
+import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.parser.SQLExprParser;
 import com.alibaba.druid.sql.parser.SQLSelectListCache;
 import com.alibaba.druid.sql.parser.SQLSelectParser;

File: src/main/java/com/alibaba/druid/sql/dialect/hive/stmt/HiveCreateTableStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.hive.stmt;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
 import com.alibaba.druid.sql.dialect.hive.visitor.HiveASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 
-import java.util.List;
-
 public class HiveCreateTableStatement extends SQLCreateTableStatement {
 
     public HiveCreateTableStatement() {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlKey.java
Patch:
@@ -16,12 +16,9 @@
 package com.alibaba.druid.sql.dialect.mysql.ast;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
 import com.alibaba.druid.sql.ast.statement.SQLTableConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLUnique;
 import com.alibaba.druid.sql.ast.statement.SQLUniqueConstraint;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlAlterTableChangeColumn;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlUnique.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast;
 
-import com.alibaba.druid.sql.ast.statement.SQLPrimaryKey;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
 public class MySqlUnique extends MySqlKey {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlCursorDeclareStatement.java
Patch:
@@ -18,7 +18,6 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
-import com.alibaba.druid.sql.ast.statement.SQLSelectStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStatementImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 /**

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlDeclareStatement.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLDeclareItem;
-import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStatementImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlLeaveStatement.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.clause;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStatementImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 /**
  * 
  * @author zz [455910092@qq.com]

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlSelectIntoStatement.java
Patch:
@@ -18,10 +18,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStatementImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
-import com.alibaba.druid.sql.ast.SQLExpr;
 /**
  * 
  * @author zz [455910092@qq.com]

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlExtractExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.expr.SQLIntervalUnit;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class MySqlExtractExpr extends SQLExprImpl implements MySqlExpr {
 
     private SQLExpr           value;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlMatchAgainstExpr.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlOrderingExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLOrderingSpecification;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class MySqlOrderingExpr extends SQLExprImpl implements MySqlExpr {
 
     protected SQLExpr                  expr;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlOutFileExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLLiteralExpr;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class MySqlOutFileExpr extends MySqlObjectImpl implements SQLExpr {
 
     private SQLExpr        file;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlUserName.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.Collections;
-import java.util.List;
-
 public class MySqlUserName extends MySqlExprImpl implements SQLName, Cloneable {
 
     private String userName;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlAlterTableChangeColumn.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableItem;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlAlterTableModifyColumn.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableItem;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlChecksumTableStatement.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
+import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
+
 public class MySqlChecksumTableStatement extends MySqlStatementImpl {
     private final List<SQLExprTableSource> tables = new ArrayList<SQLExprTableSource>();
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlCreateServerStatement.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.statement.SQLAlterStatement;
 import com.alibaba.druid.sql.ast.statement.SQLCreateStatement;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlDeleteStatement.java
Patch:
@@ -19,11 +19,10 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLCommentHint;
+import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.statement.SQLDeleteStatement;
-import com.alibaba.druid.sql.ast.statement.SQLTableSource;
-import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlOutputVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlEventSchedule.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObject;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlExecuteStatement.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlExplainStatement.java
Patch:
@@ -19,8 +19,6 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLExplainStatement;
-import com.alibaba.druid.sql.dialect.mysql.ast.clause.MySqlExplainType;
-import com.alibaba.druid.sql.dialect.mysql.ast.clause.MySqlFormatName;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlFlushStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Created by wenshao on 16/08/2017.
  */

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlPrepareStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class MySqlPrepareStatement extends MySqlStatementImpl {
 
     private SQLName name;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlRenameTableStatement.java
Patch:
@@ -18,7 +18,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlSelectQueryBlock.java
Patch:
@@ -19,12 +19,11 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.SQLUtils;
-import com.alibaba.druid.sql.ast.*;
-import com.alibaba.druid.sql.ast.statement.SQLSelectItem;
+import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObject;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleSelectQueryBlock;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlSetTransactionStatement.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLObject;
-import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
-
 import java.util.Collections;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLObject;
+import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
+
 public class MySqlSetTransactionStatement extends MySqlStatementImpl {
 
     private Boolean global;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlShowColumnsStatement.java
Patch:
@@ -15,16 +15,16 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class MySqlShowColumnsStatement extends MySqlStatementImpl implements MySqlShowStatement {
 
     private boolean full;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlShowCreateTableStatement.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlShowDatabasePartitionStatusStatement.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlStatementImpl.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 
-import java.util.List;
-
 public abstract class MySqlStatementImpl extends SQLStatementImpl implements MySqlStatement {
 
     public MySqlStatementImpl() {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlSubPartitionByList.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLSubPartitionBy;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObject;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlTableIndex.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
-import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
 import com.alibaba.druid.sql.ast.statement.SQLTableElement;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlUpdateStatement.java
Patch:
@@ -16,10 +16,9 @@
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateStatement;
-import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MysqlDeallocatePrepareStatement.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class MysqlDeallocatePrepareStatement extends MySqlStatementImpl {
 	
 	private SQLName statementName;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlEvalVisitorImpl.java
Patch:
@@ -20,8 +20,8 @@
 import java.util.List;
 import java.util.Map;
 
-import com.alibaba.druid.sql.ast.expr.SQLBinaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBetweenExpr;
+import com.alibaba.druid.sql.ast.expr.SQLBinaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBooleanExpr;
 import com.alibaba.druid.sql.ast.expr.SQLCaseExpr;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlExportParameterVisitor.java
Patch:
@@ -18,14 +18,14 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.expr.SQLBetweenExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
 import com.alibaba.druid.sql.ast.expr.SQLInListExpr;
 import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelectGroupByClause;
 import com.alibaba.druid.sql.ast.statement.SQLSelectItem;
-import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlFlushStatement;
 import com.alibaba.druid.sql.visitor.ExportParameterVisitor;
 import com.alibaba.druid.sql.visitor.ExportParameterVisitorUtils;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/transform/OrderByResolve.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.visitor.transform;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLOrderBy;
@@ -26,9 +29,6 @@
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitorAdapter;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.ArrayList;
-import java.util.List;
-
 /**
  * Created by wenshao on 27/07/2017.
  */

File: src/main/java/com/alibaba/druid/sql/dialect/odps/ast/OdpsListStmt.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.odps.ast;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.odps.visitor.OdpsASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/ast/OdpsSelectQueryBlock.java
Patch:
@@ -16,11 +16,9 @@
 package com.alibaba.druid.sql.dialect.odps.ast;
 
 import java.util.ArrayList;
-import java.util.List;
 
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/ast/OdpsShowGrantsStmt.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.odps.ast;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.odps.visitor.OdpsASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/ast/OdpsShowPartitionsStmt.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.odps.ast;
 
-import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.dialect.odps.visitor.OdpsASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsSelectParser.java
Patch:
@@ -20,11 +20,9 @@
 import com.alibaba.druid.sql.ast.SQLOrderingSpecification;
 import com.alibaba.druid.sql.ast.SQLSetQuantifier;
 import com.alibaba.druid.sql.ast.expr.SQLListExpr;
-import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQuery;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
-import com.alibaba.druid.sql.ast.statement.SQLLateralViewTableSource;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsValuesTableSource;
 import com.alibaba.druid.sql.parser.SQLExprParser;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsStatementParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
-import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.ast.statement.SQLObjectType;
@@ -31,10 +30,10 @@
 import com.alibaba.druid.sql.ast.statement.SQLSetStatement;
 import com.alibaba.druid.sql.ast.statement.SQLShowTablesStatement;
 import com.alibaba.druid.sql.ast.statement.SQLSubqueryTableSource;
+import com.alibaba.druid.sql.dialect.hive.ast.HiveInsert;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsAddStatisticStatement;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsAnalyzeTableStatement;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsGrantStmt;
-import com.alibaba.druid.sql.dialect.hive.ast.HiveInsert;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsInsertStatement;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsListStmt;
 import com.alibaba.druid.sql.dialect.odps.ast.OdpsReadStatement;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/OracleDataTypeIntervalYear.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.oracle.ast;
 
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/OracleSQLObjectImpl.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLDataType;
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/clause/OracleLobStorageClause.java
Patch:
@@ -21,7 +21,6 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObject;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSegmentAttributesImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/clause/PartitionExtensionClause.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleSelectPivotBase;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
 public class PartitionExtensionClause extends OracleSQLObjectImpl {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleAnalyticWindowing.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleAnalyticWindowing extends SQLObjectImpl implements OracleExpr {
 
     private Type    type;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleArgumentExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleArgumentExpr extends OracleSQLObjectImpl implements SQLExpr {
 
     private String  argumentName;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleBinaryFloatExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.expr.SQLNumericLiteralExpr;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleBinaryFloatExpr extends SQLNumericLiteralExpr implements OracleExpr {
 
     private Float value;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleCursorExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleCursorExpr extends SQLExprImpl implements OracleExpr {
 
     private SQLSelect query;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleDbLinkExpr.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLName;
@@ -23,9 +26,6 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.FnvHash;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleDbLinkExpr extends SQLExprImpl implements SQLName, OracleExpr {
 
     private SQLExpr expr;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleIntervalExpr.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
@@ -23,9 +26,6 @@
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleIntervalExpr extends SQLExprImpl implements SQLLiteralExpr, OracleExpr {
 
     private SQLExpr            value;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleIsSetExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleIsSetExpr extends SQLExprImpl implements OracleExpr {
 
     private SQLExpr nestedTable;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleOuterExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleOuterExpr extends SQLExprImpl implements OracleExpr {
 
     private SQLExpr expr;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleSizeExpr.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleSizeExpr extends OracleSQLObjectImpl implements OracleExpr {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleSysdateExpr.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class OracleSysdateExpr extends OracleSQLObjectImpl implements SQLExpr {
 
     private String option;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterStatement.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
-import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.statement.SQLAlterStatement;
 
 public interface OracleAlterStatement extends SQLAlterStatement, OracleStatement {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleContinueStatement.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
 public class OracleContinueStatement extends OracleStatementImpl {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleExecuteImmediateStatement.java
Patch:
@@ -15,14 +15,14 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLArgument;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLCharExpr;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class OracleExecuteImmediateStatement extends OracleStatementImpl {
 
     private SQLExpr dynamicSql;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleLockTableStatement.java
Patch:
@@ -15,15 +15,15 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
+import java.util.ArrayList;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-import java.util.ArrayList;
-import java.util.List;
-
 public class OracleLockTableStatement extends OracleStatementImpl {
 
     private SQLExprTableSource table;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OraclePipeRowStatement.java
Patch:
@@ -15,12 +15,12 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
-
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
+
 public class OraclePipeRowStatement extends OracleStatementImpl {
     private final List<SQLExpr> parameters = new ArrayList<SQLExpr>();
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleRunStatement.java
Patch:
@@ -18,8 +18,6 @@
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.ast.expr.SQLCharExpr;
-import com.alibaba.druid.sql.ast.statement.SQLExplainStatement;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectPivotBase.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObject;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 
 public abstract class OracleSelectPivotBase extends OracleSQLObjectImpl {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectSubqueryTableSource.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
 import com.alibaba.druid.sql.SQLUtils;
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.ast.statement.SQLSubqueryTableSource;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectTableSource.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
-import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
 
 public interface OracleSelectTableSource extends SQLTableSource {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSetTransactionStatement.java
Patch:
@@ -16,10 +16,7 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
-import com.alibaba.druid.sql.dialect.sqlserver.ast.SQLServerStatementImpl;
-import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerASTVisitor;
 
 public class OracleSetTransactionStatement extends OracleStatementImpl implements OracleStatement {
 

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/ast/PhoenixObject.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.phoenix.ast;
 
 import com.alibaba.druid.sql.ast.SQLObject;
-import com.alibaba.druid.sql.dialect.db2.visitor.DB2ASTVisitor;
 import com.alibaba.druid.sql.dialect.phoenix.visitor.PhoenixASTVisitor;
 
 /**

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/ast/PhoenixStatementImpl.java
Patch:
@@ -16,8 +16,6 @@
 package com.alibaba.druid.sql.dialect.phoenix.ast;
 
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
-import com.alibaba.druid.sql.dialect.db2.ast.DB2Object;
-import com.alibaba.druid.sql.dialect.db2.visitor.DB2ASTVisitor;
 import com.alibaba.druid.sql.dialect.phoenix.visitor.PhoenixASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/parser/PhoenixLexer.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.phoenix.parser;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import com.alibaba.druid.sql.parser.Keywords;
 import com.alibaba.druid.sql.parser.Lexer;
 import com.alibaba.druid.sql.parser.Token;
 
-import java.util.HashMap;
-import java.util.Map;
-
 /**
  * Created by wenshao on 16/9/13.
  */

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/parser/PhoenixStatementParser.java
Patch:
@@ -17,11 +17,8 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.statement.SQLInsertInto;
-import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.parser.Lexer;
-import com.alibaba.druid.sql.parser.ParserException;
 import com.alibaba.druid.sql.parser.SQLStatementParser;
 import com.alibaba.druid.sql.parser.Token;
 

File: src/main/java/com/alibaba/druid/sql/dialect/phoenix/visitor/PhoenixSchemaStatVisitor.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.sql.dialect.phoenix.visitor;
 
-import com.alibaba.druid.sql.dialect.db2.visitor.DB2ASTVisitor;
 import com.alibaba.druid.sql.visitor.SchemaStatVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGBoxExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGBoxExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGCidrExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGCidrExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGCircleExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGCircleExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGExtractExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGExtractExpr extends PGExprImpl {
 
     private PGDateField field;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGInetExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGInetExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGLineSegmentsExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGLineSegmentsExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGMacAddrExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 
 public class PGMacAddrExpr extends PGExprImpl {
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGPointExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 public class PGPointExpr extends PGExprImpl {
 
     private SQLExpr value;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGPolygonExpr.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.sql.dialect.postgresql.ast.expr;
 
+import java.util.Collections;
+import java.util.List;
+
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 
-import java.util.Collections;
-import java.util.List;
-
 
 public class PGPolygonExpr extends PGExprImpl {
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGInsertStatement.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateSetItem;
-import com.alibaba.druid.sql.ast.statement.SQLWithSubqueryClause;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGUpdateStatement.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.dialect.postgresql.ast.stmt;
 
 import com.alibaba.druid.sql.ast.statement.SQLUpdateStatement;
-import com.alibaba.druid.sql.ast.statement.SQLWithSubqueryClause;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;

File: src/main/java/com/alibaba/druid/pool/ha/HighAvailableDataSource.java
Patch:
@@ -86,11 +86,11 @@ public class HighAvailableDataSource extends WrapperAdapter implements DataSourc
     // Properties copied from DruidAbstractDataSource END
 
     private Map<String, DataSource> dataSourceMap = new ConcurrentHashMap<String, DataSource>();
-    private DataSourceSelector selector = new RandomDataSourceSelector(this);
+    private DataSourceSelector selector;
     private String dataSourceFile = DEFAULT_DATA_SOURCE_FILE;
     private String propertyPrefix = "";
 
-    private boolean inited = false;
+    private volatile boolean inited = false;
 
     public void init() throws SQLException {
         if (inited) {

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -99,7 +99,7 @@ public boolean isValidConnection(Connection conn, String validateQuery, int vali
             }
 
             if (clazz.isAssignableFrom(conn.getClass())) {
-                if (validationQueryTimeout < 0) {
+                if (validationQueryTimeout <= 0) {
                     validationQueryTimeout = DEFAULT_VALIDATION_QUERY_TIMEOUT;
                 }
 

File: src/main/java/com/alibaba/druid/pool/vendor/OracleValidConnectionChecker.java
Patch:
@@ -74,7 +74,7 @@ public boolean isValidConnection(Connection conn, String validateQuery, int vali
             return true;
         }
 
-        int queryTimeout = validationQueryTimeout < 0 ? timeout : validationQueryTimeout;
+        int queryTimeout = validationQueryTimeout <= 0 ? timeout : validationQueryTimeout;
 
         Statement stmt = null;
         ResultSet rs = null;

File: src/main/java/com/alibaba/druid/pool/vendor/PGValidConnectionChecker.java
Patch:
@@ -55,7 +55,7 @@ public boolean isValidConnection(Connection conn, String validateQuery, int vali
             conn = ((ConnectionProxy) conn).getRawObject();
         }
 
-        int queryTimeout = validationQueryTimeout < 0 ? defaultQueryTimeout : validationQueryTimeout;
+        int queryTimeout = validationQueryTimeout <= 0 ? defaultQueryTimeout : validationQueryTimeout;
 
         Statement stmt = null;
         ResultSet rs = null;

File: src/main/java/com/alibaba/druid/pool/ha/HighAvailableDataSource.java
Patch:
@@ -105,6 +105,7 @@ public void init() throws SQLException {
             }
             if (selector == null) {
                 selector = new RandomDataSourceSelector(this);
+                selector.init();
             }
             if (dataSourceMap == null || dataSourceMap.isEmpty()) {
                 LOG.warn("There is NO DataSource available!!! Please check your configuration.");

File: src/main/java/com/alibaba/druid/pool/ha/selector/DataSourceSelector.java
Patch:
@@ -29,4 +29,5 @@ public interface DataSourceSelector {
     void setTarget(String name);
     boolean isSame(String name);
     String getName();
+    void init();
 }

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -444,6 +444,7 @@ public static interface Constants {
         long LESS = fnv1a_64_lower("LESS");
         long MAXVALUE = fnv1a_64_lower("MAXVALUE");
         long OFFSET = fnv1a_64_lower("OFFSET");
+        long LIMIT = fnv1a_64_lower("LIMIT");
         long RAW = fnv1a_64_lower("RAW");
         long LONG_RAW = fnv1a_64_lower("LONG RAW");
         long LONG = fnv1a_64_lower("LONG");

File: src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -132,14 +132,14 @@ public static XAConnection createXAConnection(Driver driver, Connection physical
 
             try {
                 // pinGlobalTxToPhysicalConnection
-                boolean pinGlobTx = (Boolean) method_6_getValue.invoke(
+                Boolean pinGlobTx = (Boolean) method_6_getValue.invoke(
                         method_6_getBooleanReadableProperty.invoke(
                                 method_6_getPropertySet.invoke(physicalConn)
                                 , "pinGlobalTxToPhysicalConnection"
                         )
                 );
 
-                if (pinGlobTx) {
+                if (pinGlobTx != null && pinGlobTx) {
                     try {
                         if (method_6_getInstance == null && !method_6_getInstance_error) {
                             class_6_suspendableXAConnection = Class.forName("com.mysql.cj.jdbc.SuspendableXAConnection");

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -546,7 +546,7 @@ protected void statementExecuteUpdateAfter(StatementProxy statement, String sql,
     }
 
     private void logExecutableSql(StatementProxy statement, String sql) {
-        if (!isStatementExecutableSqlLogEnable()) {
+        if ((!isStatementExecutableSqlLogEnable()) || !isStatementLogEnabled()) {
             return;
         }
 

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatement.java
Patch:
@@ -24,4 +24,7 @@ public interface SQLStatement extends SQLObject {
     SQLStatement    clone();
     List<SQLObject> getChildren();
     String          toLowerCaseString();
+
+    List<SQLCommentHint> getHeadHintsDirect();
+    void setHeadHints(List<SQLCommentHint> headHints);
 }

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest4.java
Patch:
@@ -20,7 +20,6 @@ protected void setUp() throws Exception {
         dataSource.setUrl("jdbc:mock:xxx");
         dataSource.setTestOnBorrow(false);
         dataSource.setInitialSize(1);
-
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/sql/cobar/DALParserTest.java
Patch:
@@ -853,7 +853,7 @@ public void test_show_processList_1() throws Exception {
         Assert.assertEquals("SHOW FULL PROCESSLIST", output);
     }
 
-    
+
     public void test_show_profiles() throws Exception {
         String sql = "SHOW profiles";
         MySqlStatementParser parser = new MySqlStatementParser(sql);

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest134.java
Patch:
@@ -27,15 +27,15 @@ public void test_0() throws Exception {
                 "\tid int NOT NULL PRIMARY KEY AUTO_INCREMENT,\n" +
                 "\tname char(40),\n" +
                 "\tSimpleDate date,\n" +
-                "\tSimpleDate_dayofweek tinyint(4) GENERATED ALWAYS AS (dayofweek(SimpleDate)),\n" +
+                "\tSimpleDate_dayofweek tinyint(4) GENERATED ALWAYS AS (dayofweek(SimpleDate)) VIRTUAL,\n" +
                 "\tKEY SimpleDate_dayofweek (SimpleDate_dayofweek)\n" +
                 ");", stmt.toString());
 
         assertEquals("create table xuhan3 (\n" +
                 "\tid int not null primary key auto_increment,\n" +
                 "\tname char(40),\n" +
                 "\tSimpleDate date,\n" +
-                "\tSimpleDate_dayofweek tinyint(4) generated always as (dayofweek(SimpleDate)),\n" +
+                "\tSimpleDate_dayofweek tinyint(4) generated always as (dayofweek(SimpleDate)) virtual,\n" +
                 "\tkey SimpleDate_dayofweek (SimpleDate_dayofweek)\n" +
                 ");", stmt.toLowerCaseString());
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -436,7 +436,6 @@ public SQLExpr primary() {
                 break;
             case DUAL:
             case KEY:
-            case DISTINCT:
             case LIMIT:
             case SCHEMA:
             case COLUMN:

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -760,6 +760,9 @@ public void init() throws SQLException {
             return;
         }
 
+        // bug fixed for dead lock, for issue #2980
+        DruidDriver.getInstance();
+
         final ReentrantLock lock = this.lock;
         try {
             lock.lockInterruptibly();

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerImpl.java
Patch:
@@ -206,7 +206,7 @@ public void log(DruidDataSourceStatValue statValue) {
 
                 if (sqlStat.getFetchRowCount() > 0) {
                     sqlStatMap.put("fetchRowCount", sqlStat.getFetchRowCount());
-                    sqlStatMap.put("fetchRowCount", sqlStat.getFetchRowCountMax());
+                    sqlStatMap.put("fetchRowCountMax", sqlStat.getFetchRowCountMax());
                     sqlStatMap.put("fetchRowHistogram", rtrim(sqlStat.getFetchRowHistogram()));
                 }
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceMBean.java
Patch:
@@ -28,6 +28,8 @@ public interface DruidDataSourceMBean extends DruidAbstractDataSourceMBean {
 
     boolean isEnable();
 
+    String getUrl();
+
     void shrink();
 
     int removeAbandoned();

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsExprParser.java
Patch:
@@ -73,7 +73,8 @@ public OdpsExprParser(String sql, boolean skipComments, boolean keepComments){
     }
     
     protected SQLExpr parseAliasExpr(String alias) {
-        return new SQLCharExpr(alias);
+        String chars = alias.substring(1, alias.length() - 1);
+        return new SQLCharExpr(chars);
     }
     
     @Override

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -289,7 +289,7 @@ public void scanIdentifier() {
 
         final char first = ch;
 
-        if (ch == 'b'
+        if ((ch == 'b' || ch == 'B' )
                 && charAt(pos + 1) == '\'') {
             int i = 2;
             int mark = pos + 2;

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -270,7 +270,7 @@ public String info() {
         }
 
         this.posLine = line;
-        this.posColumn = posColumn;
+        this.posColumn = column;
 
         StringBuilder buf = new StringBuilder();
         buf

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -240,12 +240,14 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
     protected volatile int                             directCreateCount                         = 0;
     protected volatile long                            createCount                               = 0L;
     protected volatile long                            destroyCount                              = 0L;
+    protected volatile long                            createStartNanos                          = 0L;
 
     final static AtomicIntegerFieldUpdater<DruidAbstractDataSource> createErrorCountUpdater      = AtomicIntegerFieldUpdater.newUpdater(DruidAbstractDataSource.class, "createErrorCount");
     final static AtomicIntegerFieldUpdater<DruidAbstractDataSource> creatingCountUpdater         = AtomicIntegerFieldUpdater.newUpdater(DruidAbstractDataSource.class, "creatingCount");
     final static AtomicIntegerFieldUpdater<DruidAbstractDataSource> directCreateCountUpdater     = AtomicIntegerFieldUpdater.newUpdater(DruidAbstractDataSource.class, "directCreateCount");
     final static AtomicLongFieldUpdater<DruidAbstractDataSource>    createCountUpdater           = AtomicLongFieldUpdater.newUpdater(DruidAbstractDataSource.class, "createCount");
     final static AtomicLongFieldUpdater<DruidAbstractDataSource>    destroyCountUpdater          = AtomicLongFieldUpdater.newUpdater(DruidAbstractDataSource.class, "destroyCount");
+    final static AtomicLongFieldUpdater<DruidAbstractDataSource> createStartNanosUpdater         = AtomicLongFieldUpdater.newUpdater(DruidAbstractDataSource.class, "createStartNanos");
 
     private Boolean                                    useUnfairLock                             = null;
     private boolean                                    useLocalSessionState                      = true;
@@ -1628,6 +1630,7 @@ public PhysicalConnectionInfo createPhysicalConnection() throws SQLException {
                 ? new HashMap<String, Object>()
                 : null;
 
+        createStartNanosUpdater.set(this, connectStartNanos);
         creatingCountUpdater.incrementAndGet(this);
         try {
             conn = createPhysicalConnection(url, physicalConnectProperties);

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.sql.visitor
+package com.alibaba.druid.sql.visitor;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.Reader;

File: src/main/java/com/alibaba/druid/support/http/stat/WebSessionStat.java
Patch:
@@ -262,7 +262,6 @@ public void addRemoteAddress(String ip) {
         }
 
         if (remoteAddresses.length() > 256) {
-            LOG.error("session ip change too many");
             return;
         }
 

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -447,6 +447,7 @@ public static interface Constants {
         long RAW = fnv1a_64_lower("RAW");
         long LONG_RAW = fnv1a_64_lower("LONG RAW");
         long LONG = fnv1a_64_lower("LONG");
+        long BYTE = fnv1a_64_lower("BYTE");
         long ROWNUM = fnv1a_64_lower("ROWNUM");
         long SYSDATE = fnv1a_64_lower("SYSDATE");
         long SQLCODE = fnv1a_64_lower("SQLCODE");

File: src/main/java/com/alibaba/druid/pool/ha/DataSourceCreator.java
Patch:
@@ -72,7 +72,7 @@ protected DruidDataSource create(String name, String url, String username, Strin
                                          HighAvailableDataSource haDataSource) throws SQLException {
         DruidDataSource dataSource = new DruidDataSource();
 
-        dataSource.setName(name);
+        dataSource.setName(name + "-" + System.identityHashCode(dataSource));
         dataSource.setUrl(url);
         dataSource.setUsername(username);
         dataSource.setPassword(password);

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -887,7 +887,7 @@ public void init() throws SQLException {
             initedTime = new Date();
             registerMbean();
 
-            if (connectError != null && poolingCount == 0 && !(initExceptionThrow && !asyncInit)) {
+            if (connectError != null && poolingCount == 0) {
                 throw connectError;
             }
 

File: src/test/java/com/alibaba/druid/bvt/pool/InitExceptionThrowTest.java
Patch:
@@ -14,7 +14,7 @@ public class InitExceptionThrowTest extends TestClone {
     private int connectCount = 0;
 
     protected void setUp() throws Exception {
-        dataSource.setInitExceptionThrow(true);
+        dataSource.setInitExceptionThrow(false);
         dataSource.setUrl("jdbc:mock:xxx");
         dataSource.setDriver(new MockDriver() {
             public Connection connect(String url, Properties info) throws SQLException {

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1632,7 +1632,8 @@ public PhysicalConnectionInfo createPhysicalConnection() throws SQLException {
 
             validateConnection(conn);
             validatedNanos = System.nanoTime();
-            
+
+            setFailContinuous(false);
             setCreateError(null);
         } catch (SQLException ex) {
             setCreateError(ex);

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -2294,7 +2294,6 @@ private void runInternal() {
 
                 try {
                     physicalConnection = createPhysicalConnection();
-                    setFailContinuous(false);
                 } catch (OutOfMemoryError e) {
                     LOG.error("create connection OutOfMemoryError, out memory. ", e);
 
@@ -2466,7 +2465,6 @@ public void run() {
 
                 try {
                     connection = createPhysicalConnection();
-                    setFailContinuous(false);
                 } catch (SQLException e) {
                     LOG.error("create connection SQLException, url: " + jdbcUrl + ", errorCode " + e.getErrorCode()
                               + ", state " + e.getSQLState(), e);

File: src/main/java/com/alibaba/druid/pool/ha/selector/DataSourceSelector.java
Patch:
@@ -28,4 +28,5 @@ public interface DataSourceSelector {
     DataSource get();
     void setTarget(String name);
     boolean isSame(String name);
+    String getName();
 }

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -652,5 +652,6 @@ public static interface Constants {
         long INCREMENT = fnv1a_64_lower("INCREMENT");
 
         long OVERWRITE = fnv1a_64_lower("OVERWRITE");
+        long FILTER = fnv1a_64_lower("FILTER");
     }
 }

File: src/main/java/com/alibaba/druid/pool/ha/DataSourceCreator.java
Patch:
@@ -122,8 +122,8 @@ protected DruidDataSource create(String name, String url, String username, Strin
     private void loadNameList() {
         Set<String> names = new HashSet<String>();
         for (String n : properties.stringPropertyNames()) {
-            if (n.contains(".")) {
-                names.add(n.split("\\.")[0]);
+            if (n.contains(".url")) {
+                names.add(n.split("\\.url")[0]);
             }
         }
         if (!names.isEmpty()) {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUniqueConstraint.java
Patch:
@@ -24,4 +24,5 @@ public interface SQLUniqueConstraint extends SQLConstraint {
     List<SQLSelectOrderByItem> getColumns();
 
     boolean containsColumn(String column);
+    boolean containsColumn(long columnNameHash);
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -64,6 +64,7 @@ public class MySqlLexer extends Lexer {
         map.put("MOD", Token.MOD);
         map.put("CONTAINS", Token.CONTAINS);
         map.put("RLIKE", Token.RLIKE);
+        map.put("FULLTEXT", Token.FULLTEXT);
 
         DEFAULT_MYSQL_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -2804,7 +2804,7 @@ public SQLExplainStatement parseExplain() {
     protected SQLAlterTableAddIndex parseAlterTableAddIndex() {
         SQLAlterTableAddIndex item = new SQLAlterTableAddIndex();
 
-        if (lexer.identifierEquals(FnvHash.Constants.FULLTEXT)) {
+        if (lexer.token == Token.FULLTEXT) {
             lexer.nextToken();
             item.setType("FULLTEXT");
         } else if (lexer.identifierEquals(FnvHash.Constants.SPATIAL)) {

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -102,6 +102,7 @@ public enum Token {
     IN("IN"),
     CONTAINS("CONTAINS"),
     RLIKE("RLIKE"),
+    FULLTEXT("FULLTEXT"),
 
     NEW("NEW"), 
     ASC("ASC"), 

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -474,6 +474,7 @@ public final void nextTokenValue() {
             }
 
             if (c1 == '\'') {
+                bufPos = 0;
                 ++pos;
                 ch = '\'';
                 scanString();

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1492,7 +1492,7 @@ protected void over(SQLOver over) {
         }
 
         SQLOver.WindowingType windowingType = null;
-        if (lexer.identifierEquals(FnvHash.Constants.ROWS)) {
+        if (lexer.identifierEquals(FnvHash.Constants.ROWS) || lexer.token == Token.ROWS) {
             windowingType = SQLOver.WindowingType.ROWS;
 
         } else if (lexer.identifierEquals(FnvHash.Constants.RANGE)) {
@@ -1519,7 +1519,7 @@ protected void over(SQLOver over) {
                 accept(Token.AND);
 
                 SQLExpr betweenEnd;
-                if (lexer.identifierEquals(FnvHash.Constants.CURRENT)) {
+                if (lexer.identifierEquals(FnvHash.Constants.CURRENT) || lexer.token == Token.CURRENT) {
                     lexer.nextToken();
                     if (lexer.identifierEquals(FnvHash.Constants.ROW)) {
                         lexer.nextToken();

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -278,6 +278,9 @@ public void parseStatementList(List<SQLStatement> statementList, int max, SQLObj
                     continue;
                 }
                 case COMMENT: {
+                    if(JdbcConstants.MYSQL.equals(this.dbType)){//mysql 关键字 comment 没有这个语法，oracle才有
+                        return;
+                    }
                     SQLStatement stmt = parseComment();
                     stmt.setParent(parent);
                     statementList.add(stmt);

File: src/main/java/com/alibaba/druid/stat/TableStat.java
Patch:
@@ -453,7 +453,7 @@ public String getTable() {
 
         public String getFullName() {
             if (fullName == null) {
-                if (table != null) {
+                if (table == null) {
                     fullName = name;
                 } else {
                     fullName = table + '.' + name;

File: src/main/java/com/alibaba/druid/stat/TableStat.java
Patch:
@@ -453,7 +453,7 @@ public String getTable() {
 
         public String getFullName() {
             if (fullName == null) {
-                if (table != null) {
+                if (table == null) {
                     fullName = name;
                 } else {
                     fullName = table + '.' + name;

File: src/main/java/com/alibaba/druid/sql/visitor/VisitorFeature.java
Patch:
@@ -24,6 +24,7 @@ public enum  VisitorFeature {
     OutputSkipSelectListCacheString,
     OutputSkipInsertColumnsString,
     OutputParameterizedQuesUnMergeInList,
+    OutputParameterizedQuesUnMergeOr,
 
     /**
      * @deprecated

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/select/PGSelectTest1.java
Patch:
@@ -47,7 +47,7 @@ public void test_0() throws Exception {
 //        System.out.println("coditions : " + visitor.getConditions());
 
         assertEquals(2, visitor.getColumns().size());
-        assertEquals(4, visitor.getTables().size());
+        assertEquals(2, visitor.getTables().size());
     }
     
     public void test_1() throws Exception {

File: src/main/java/com/alibaba/druid/sql/repository/SchemaResolveVisitorFactory.java
Patch:
@@ -2085,9 +2085,7 @@ static void resolve(SchemaResolveVisitor visitor, SQLSelectQueryBlock x) {
             SQLExpr expr = selectItem.getExpr();
             if (expr instanceof SQLAllColumnExpr) {
                 SQLAllColumnExpr allColumnExpr = (SQLAllColumnExpr) expr;
-                if (from instanceof SQLExprTableSource) {
-                    allColumnExpr.setResolvedTableSource(from);
-                }
+                allColumnExpr.setResolvedTableSource(from);
 
                 visitor.visit(allColumnExpr);
 

File: src/test/java/com/alibaba/druid/bvt/sql/oceanbase/OceanbaseHintTest_Index.java
Patch:
@@ -58,7 +58,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         Assert.assertEquals(2, visitor.getTables().size());
-        Assert.assertEquals(2, visitor.getColumns().size());
+        Assert.assertEquals(4, visitor.getColumns().size());
         Assert.assertEquals(2, visitor.getConditions().size());
 
 //        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("t_basic_store")));

File: src/test/java/com/alibaba/druid/bvt/sql/odps/OdpsSelectTest29.java
Patch:
@@ -56,7 +56,7 @@ public void test_select() throws Exception {
 //      System.out.println("orderBy : " + visitor.getOrderByColumns());
         
         assertEquals(2, visitor.getTables().size());
-        assertEquals(0, visitor.getColumns().size());
+        assertEquals(2, visitor.getColumns().size());
         assertEquals(0, visitor.getConditions().size());
 
 //        System.out.println(SQLUtils.formatOdps(sql));

File: src/test/java/com/alibaba/druid/bvt/sql/odps/OdpsSelectTest32.java
Patch:
@@ -52,7 +52,7 @@ public void test_select() throws Exception {
 //      System.out.println("orderBy : " + visitor.getOrderByColumns());
         
         assertEquals(2, visitor.getTables().size());
-        assertEquals(2, visitor.getColumns().size());
+        assertEquals(4, visitor.getColumns().size());
         assertEquals(2, visitor.getConditions().size());
 
 //        System.out.println(SQLUtils.formatOdps(sql));

File: src/test/java/com/alibaba/druid/bvt/sql/odps/OdpsSelectTest33.java
Patch:
@@ -52,7 +52,7 @@ public void test_select() throws Exception {
 //      System.out.println("orderBy : " + visitor.getOrderByColumns());
         
         assertEquals(2, visitor.getTables().size());
-        assertEquals(2, visitor.getColumns().size());
+        assertEquals(4, visitor.getColumns().size());
         assertEquals(2, visitor.getConditions().size());
 
 //        System.out.println(SQLUtils.formatOdps(sql));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest81_join_brace.java
Patch:
@@ -83,7 +83,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         assertEquals(5, visitor.getTables().size());
-        assertEquals(14, visitor.getColumns().size());
+        assertEquals(19, visitor.getColumns().size());
         assertEquals(15, visitor.getConditions().size());
         assertEquals(4, visitor.getRelationships().size());
         assertEquals(0, visitor.getOrderByColumns().size());

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest91.java
Patch:
@@ -64,7 +64,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         assertEquals(3, visitor.getTables().size());
-        assertEquals(4, visitor.getColumns().size());
+        assertEquals(7, visitor.getColumns().size());
         assertEquals(4, visitor.getConditions().size());
         assertEquals(2, visitor.getRelationships().size());
         assertEquals(0, visitor.getOrderByColumns().size());

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest95_pivot.java
Patch:
@@ -78,7 +78,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         assertEquals(2, visitor.getTables().size());
-        assertEquals(3, visitor.getColumns().size());
+        assertEquals(5, visitor.getColumns().size());
         assertEquals(3, visitor.getConditions().size());
         assertEquals(1, visitor.getRelationships().size());
         assertEquals(0, visitor.getOrderByColumns().size());

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest96_pivot.java
Patch:
@@ -78,7 +78,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         assertEquals(2, visitor.getTables().size());
-        assertEquals(3, visitor.getColumns().size());
+        assertEquals(5, visitor.getColumns().size());
         assertEquals(3, visitor.getConditions().size());
         assertEquals(1, visitor.getRelationships().size());
         assertEquals(0, visitor.getOrderByColumns().size());

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/select/PGSelectTest2.java
Patch:
@@ -34,7 +34,7 @@ public void test_0() throws Exception {
         SQLStatement statemen = statementList.get(0);
 //        print(statementList);
 
-        Assert.assertEquals(1, statementList.size());
+        assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
@@ -43,8 +43,8 @@ public void test_0() throws Exception {
 //        System.out.println("fields : " + visitor.getColumns());
 //        System.out.println("coditions : " + visitor.getConditions());
 
-        Assert.assertEquals(0, visitor.getColumns().size());
-        Assert.assertEquals(2, visitor.getTables().size());
+        assertEquals(2, visitor.getColumns().size());
+        assertEquals(2, visitor.getTables().size());
     }
 
 }

File: src/test/java/com/alibaba/druid/bvt/sql/schemaStat/SchemaStatTest8.java
Patch:
@@ -30,7 +30,7 @@ public void test_schemaStat() throws Exception {
 //        System.out.println(statVisitor.getGroupByColumns()); // group by
         System.out.println("relationships : " + statVisitor.getRelationships()); // group by
 
-        Assert.assertEquals(6, statVisitor.getColumns().size());
-        Assert.assertEquals(6, statVisitor.getConditions().size());
+        assertEquals(8, statVisitor.getColumns().size());
+        assertEquals(6, statVisitor.getConditions().size());
     }
 }

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1207,7 +1207,7 @@ private SQLExpr methodRest(SQLExpr expr, String name, boolean aggregate) {
             if (lexer.token == Token.OVER) {
                 over(methodInvokeExpr);
             }
-            
+
             expr = methodInvokeExpr;
         } else {
             SQLMethodInvokeExpr methodInvokeExpr = new SQLMethodInvokeExpr(name);

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -1292,6 +1292,7 @@ public boolean visit(SQLIdentifierExpr x) {
             }
         } else if (tableSource instanceof SQLWithSubqueryClause.Entry
                 || tableSource instanceof SQLSubqueryTableSource
+                || tableSource instanceof SQLValuesTableSource
                 || tableSource instanceof SQLLateralViewTableSource) {
             return false;
         } else {

File: druid-spring-boot-starter/src/test/java/com/alibaba/druid/spring/boot/demo/service/UserServiceImpl.java
Patch:
@@ -13,7 +13,7 @@ public class UserServiceImpl implements UserService {
 
     @Override
     public User findById(Long id) {
-        return userDao.findById(id).get();
+        return userDao.findOne(id);
     }
 
 }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGExprParser.java
Patch:
@@ -180,7 +180,7 @@ public SQLExpr primaryRest(SQLExpr expr) {
         if (expr.getClass() == SQLIdentifierExpr.class) {
             String ident = ((SQLIdentifierExpr)expr).getName();
 
-            if (lexer.token() == Token.COMMA) {
+            if (lexer.token() == Token.COMMA || lexer.token() == Token.RPAREN) {
                 return super.primaryRest(expr);
             }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -450,6 +450,7 @@ public void parseWhere(SQLSelectQueryBlock queryBlock) {
                     }
 
                     where = this.exprParser.andRest(where);
+                    where = this.exprParser.xorRest(where);
                     where = this.exprParser.orRest(where);
                 } else {
                     identExpr = this.exprParser.primaryRest(identExpr);

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/DB2Object.java
Patch:
@@ -25,6 +25,7 @@ public interface DB2Object extends SQLObject {
 
     interface Constants {
         long CURRENT_DATE = FnvHash.fnv1a_64_lower("CURRENT DATE");
+        long CURRENT_DATE2 = FnvHash.fnv1a_64_lower("CURRENT_DATE");
         long CURRENT_TIME = FnvHash.fnv1a_64_lower("CURRENT TIME");
         long CURRENT_SCHEMA = FnvHash.fnv1a_64_lower("CURRENT SCHEMA");
     }

File: src/main/java/com/alibaba/druid/sql/dialect/db2/visitor/DB2SchemaStatVisitor.java
Patch:
@@ -61,6 +61,7 @@ public void endVisit(DB2CreateTableStatement x) {
 
     protected boolean isPseudoColumn(long hash64) {
         return hash64 == DB2Object.Constants.CURRENT_DATE
+                || hash64 == DB2Object.Constants.CURRENT_DATE2
                 || hash64 == DB2Object.Constants.CURRENT_TIME
                 || hash64 == DB2Object.Constants.CURRENT_SCHEMA;
     }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTableStatement.java
Patch:
@@ -1106,4 +1106,5 @@ public void setRowFormat(SQLExternalRecordFormat x) {
         }
         this.rowFormat = x;
     }
+
 }

File: src/main/java/com/alibaba/druid/sql/dialect/db2/visitor/DB2OutputVisitor.java
Patch:
@@ -125,6 +125,7 @@ public boolean visit(DB2CreateTableStatement x) {
         SQLPartitionBy partitionBy = x.getPartitioning();
         if (partitionBy != null) {
             println();
+            print0(ucase ? "PARTITION BY " : "partition by ");
             partitionBy.accept(this);
         }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -73,7 +73,7 @@ public static SQLStatementParser createSQLStatementParser(String sql, String dbT
             return new OracleStatementParser(sql);
         }
 
-        if (JdbcUtils.MYSQL.equals(dbType)) {
+        if (JdbcUtils.MYSQL.equals(dbType) || JdbcUtils.ALIYUN_DRDS.equals(dbType)) {
             return new MySqlStatementParser(sql, features);
         }
 

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -641,5 +641,8 @@ public static interface Constants {
         long CHECKSUM = fnv1a_64_lower("CHECKSUM");
         long ROUTINE = fnv1a_64_lower("ROUTINE");
         long DATE_FORMAT = fnv1a_64_lower("DATE_FORMAT");
+        long DBPARTITION = fnv1a_64_lower("DBPARTITION");
+        long TBPARTITION = fnv1a_64_lower("TBPARTITION");
+        long TBPARTITIONS = fnv1a_64_lower("TBPARTITIONS");
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/odps/visitor/OdpsOutputVisitor.java
Patch:
@@ -455,7 +455,7 @@ public boolean visit(OdpsSelectQueryBlock x) {
 
         print0(ucase ? "SELECT " : "select ");
 
-        List<SQLHint> hints = x.getHintsDirect();
+        List<SQLCommentHint> hints = x.getHintsDirect();
         if (hints != null) {
             printAndAccept(hints, " ");
             print(' ');

File: src/main/java/com/alibaba/druid/sql/parser/Keywords.java
Patch:
@@ -160,7 +160,8 @@ public class Keywords {
         map.put("FETCH", Token.FETCH);
         map.put("OUT", Token.OUT);
         map.put("INOUT", Token.INOUT);
-        
+        map.put("LIMIT", Token.LIMIT);
+
         DEFAULT_KEYWORDS = new Keywords(map);
 
         Map<String, Token> sqlitemap = new HashMap<String, Token>();

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTVisitor.java
Patch:
@@ -829,4 +829,7 @@ public interface SQLASTVisitor {
 
     boolean visit(SQLValuesExpr x);
     void endVisit(SQLValuesExpr x);
+
+    boolean visit(SQLValuesTableSource x);
+    void endVisit(SQLValuesTableSource x);
 }

File: src/test/java/com/alibaba/druid/bvt/sql/cobar/DMLSelectParserTest.java
Patch:
@@ -39,7 +39,8 @@ public void test_union_0() throws Exception {
                 "UNION ALL\n" +
                 "(SELECT id\n" +
                 "FROM t3)\n" +
-                "ORDER BY d DESC", output);
+                "ORDER BY d DESC\n" +
+                "LIMIT ?, 1", output);
     }
 
     public void test_union_1() throws Exception {

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -25,7 +25,7 @@ public interface JdbcConstants {
 
     String DB2                        = "db2";
 
-    String DB2_DRIVER                 = "COM.ibm.db2.jdbc.app.DB2Driver";
+    String DB2_DRIVER                 = "com.ibm.db2.jcc.DB2Driver";
 
     String POSTGRESQL                 = "postgresql";
     String POSTGRESQL_DRIVER          = "org.postgresql.Driver";

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -640,5 +640,6 @@ public static interface Constants {
         long KEY_BLOCK_SIZE = fnv1a_64_lower("KEY_BLOCK_SIZE");
         long CHECKSUM = fnv1a_64_lower("CHECKSUM");
         long ROUTINE = fnv1a_64_lower("ROUTINE");
+        long DATE_FORMAT = fnv1a_64_lower("DATE_FORMAT");
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -89,7 +89,7 @@ public MySqlCreateTableStatement parseCreateTable(boolean acceptCreate) {
         stmt.setName(this.exprParser.name());
 
         if (lexer.token() == Token.LIKE) {
-            lexer.nextToken();
+            lexer.nextTokenValue();
             SQLName name = this.exprParser.name();
             stmt.setLike(name);
         }
@@ -98,7 +98,7 @@ public MySqlCreateTableStatement parseCreateTable(boolean acceptCreate) {
             lexer.nextToken();
 
             if (lexer.token() == Token.LIKE) {
-                lexer.nextToken();
+                lexer.nextTokenValue();
                 SQLName name = this.exprParser.name();
                 stmt.setLike(name);
             } else if (lexer.token() == Token.SELECT) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlSelectParser.java
Patch:
@@ -101,7 +101,7 @@ public SQLSelectQuery query() {
         }
 
         if (lexer.token() == Token.SELECT) {
-            lexer.nextToken();
+            lexer.nextTokenValue();
 
             if (lexer.token() == Token.HINT) {
                 this.exprParser.parseHints(queryBlock.getHints());

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/StringFunctionsTest.java
Patch:
@@ -139,7 +139,7 @@ public void test_9() throws Exception {
 
         String text = output(stmtList);
 
-        assertEquals("SELECT CONCAT('My', 'S', 'QL')", text);
+        assertEquals("SELECT 'MySQL'", text);
     }
 
     public void test_10() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_71_concat.java
Patch:
@@ -43,18 +43,18 @@ public void test_0() throws Exception {
         stmt.accept(visitor);
         {
             String output = SQLUtils.toMySqlString(stmt);
-            assertEquals("SELECT CONCAT('afdf', 'erwhg', 'ads', 'dgs', 'rter') AS tstDiffQuoteConcat;", //
+            assertEquals("SELECT 'afdferwhgadsdgsrter' AS tstDiffQuoteConcat;", //
                                 output);
         }
         {
             String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
-            assertEquals("select CONCAT('afdf', 'erwhg', 'ads', 'dgs', 'rter') as tstDiffQuoteConcat;", //
+            assertEquals("select 'afdferwhgadsdgsrter' as tstDiffQuoteConcat;", //
                                 output);
         }
 
         {
             String output = SQLUtils.toMySqlString(stmt, new SQLUtils.FormatOption(true, true, true));
-            assertEquals("SELECT CONCAT(?, ?, ?, ?, ?) AS tstDiffQuoteConcat;", //
+            assertEquals("SELECT ? AS tstDiffQuoteConcat;", //
                     output);
         }
     }

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -62,6 +62,7 @@
 import java.util.Enumeration;
 import java.util.List;
 import java.util.Set;
+import java.util.HashSet;
 import java.util.Stack;
 
 import static com.alibaba.druid.sql.visitor.SQLEvalVisitor.EVAL_VALUE;

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1134,7 +1134,8 @@ public void setDriverClassName(String driverClass) {
         }
 
         if (JdbcConstants.ORACLE_DRIVER2.equalsIgnoreCase(driverClass)) {
-            LOG.error("oracle.jdbc.driver.OracleDriver is deprecated.");
+            driverClass = "oracle.jdbc.OracleDriver";
+            LOG.warn("oracle.jdbc.driver.OracleDriver is deprecated.Having use oracle.jdbc.OracleDriver.");
         }
 
         if (inited) {

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -639,5 +639,6 @@ public static interface Constants {
         long COMPRESSION = fnv1a_64_lower("COMPRESSION");
         long KEY_BLOCK_SIZE = fnv1a_64_lower("KEY_BLOCK_SIZE");
         long CHECKSUM = fnv1a_64_lower("CHECKSUM");
+        long ROUTINE = fnv1a_64_lower("ROUTINE");
     }
 }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTVisitor.java
Patch:
@@ -826,4 +826,7 @@ public interface SQLASTVisitor {
 
     boolean visit(SQLAlterTableExchangePartition x);
     void endVisit(SQLAlterTableExchangePartition x);
+
+    boolean visit(SQLValuesExpr x);
+    void endVisit(SQLValuesExpr x);
 }

File: src/main/java/com/alibaba/druid/wall/violation/ErrorCode.java
Patch:
@@ -82,6 +82,7 @@ public interface ErrorCode {
 
     public final static int READ_ONLY                     = 4000;
     public final static int UNION                         = 5000;
+    public final static int INVALID_JOIN_CONDITION        = 6000;
 
     public final static int COMPOUND                      = 8000;
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/StringComparisonFunctionsTest.java
Patch:
@@ -92,7 +92,7 @@ public void test_5() throws Exception {
 
         String text = output(stmtList);
 
-        Assert.assertEquals("SELECT 'David!' LIKE 'David_';", text);
+        Assert.assertEquals("SELECT 'David!' LIKE 'David\\\\_';", text);
     }
 
     public void test_6() throws Exception {

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidStatViewServletConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 @ConditionalOnProperty(name = "spring.datasource.druid.stat-view-servlet.enabled", havingValue = "true", matchIfMissing = true)
 public class DruidStatViewServletConfiguration {
     @Bean
-    public ServletRegistrationBean servletRegistrationBean(DruidStatProperties properties) {
+    public ServletRegistrationBean statViewServletRegistrationBean(DruidStatProperties properties) {
         DruidStatProperties.StatViewServlet config = properties.getStatViewServlet();
         ServletRegistrationBean registrationBean = new ServletRegistrationBean();
         registrationBean.setServlet(new StatViewServlet());

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidWebStatFilterConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 @ConditionalOnProperty(name = "spring.datasource.druid.web-stat-filter.enabled", havingValue = "true", matchIfMissing = true)
 public class DruidWebStatFilterConfiguration {
     @Bean
-    public FilterRegistrationBean filterRegistrationBean(DruidStatProperties properties) {
+    public FilterRegistrationBean webStatFilterRegistrationBean(DruidStatProperties properties) {
         DruidStatProperties.WebStatFilter config = properties.getWebStatFilter();
         FilterRegistrationBean registrationBean = new FilterRegistrationBean();
         WebStatFilter filter = new WebStatFilter();

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidStatViewServletConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 @ConditionalOnProperty(name = "spring.datasource.druid.stat-view-servlet.enabled", havingValue = "true", matchIfMissing = true)
 public class DruidStatViewServletConfiguration {
     @Bean
-    public ServletRegistrationBean servletRegistrationBean(DruidStatProperties properties) {
+    public ServletRegistrationBean statViewServletRegistrationBean(DruidStatProperties properties) {
         DruidStatProperties.StatViewServlet config = properties.getStatViewServlet();
         ServletRegistrationBean registrationBean = new ServletRegistrationBean();
         registrationBean.setServlet(new StatViewServlet());

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidWebStatFilterConfiguration.java
Patch:
@@ -29,7 +29,7 @@
 @ConditionalOnProperty(name = "spring.datasource.druid.web-stat-filter.enabled", havingValue = "true", matchIfMissing = true)
 public class DruidWebStatFilterConfiguration {
     @Bean
-    public FilterRegistrationBean filterRegistrationBean(DruidStatProperties properties) {
+    public FilterRegistrationBean webStatFilterRegistrationBean(DruidStatProperties properties) {
         DruidStatProperties.WebStatFilter config = properties.getWebStatFilter();
         FilterRegistrationBean registrationBean = new FilterRegistrationBean();
         WebStatFilter filter = new WebStatFilter();

File: src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -348,7 +348,7 @@ public static String getCreateTableScript(Connection conn, boolean sorted, boole
     public static long getLastPacketReceivedTimeMs(Connection conn) throws SQLException {
         if (class_connectionImpl == null && !class_connectionImpl_Error) {
             try {
-                class_connectionImpl = Utils.loadClass("com.mysql.jdbc.ConnectionImpl");
+                class_connectionImpl = Utils.loadClass("com.mysql.jdbc.MySQLConnection");
             } catch (Throwable error){
                 class_connectionImpl_Error = true;
             }

File: src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -348,7 +348,7 @@ public static String getCreateTableScript(Connection conn, boolean sorted, boole
     public static long getLastPacketReceivedTimeMs(Connection conn) throws SQLException {
         if (class_connectionImpl == null && !class_connectionImpl_Error) {
             try {
-                class_connectionImpl = Utils.loadClass("com.mysql.jdbc.ConnectionImpl");
+                class_connectionImpl = Utils.loadClass("com.mysql.jdbc.MySQLConnection");
             } catch (Throwable error){
                 class_connectionImpl_Error = true;
             }

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceMBean.java
Patch:
@@ -85,4 +85,6 @@ public interface DruidDataSourceMBean extends DruidAbstractDataSourceMBean {
     int fill() throws SQLException;
     
     int fill(int toCount) throws SQLException;
+
+    boolean isUseGlobalDataSourceStat();
 }

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceWrapper.java
Patch:
@@ -50,6 +50,9 @@ public void afterPropertiesSet() throws Exception {
         if (super.getUrl() == null) {
             super.setUrl(basicProperties.determineUrl());
         }
+        if(super.getDriverClassName() == null){
+            super.setDriverClassName(basicProperties.getDriverClassName());
+        }
 
     }
 

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceWrapper.java
Patch:
@@ -50,6 +50,9 @@ public void afterPropertiesSet() throws Exception {
         if (super.getUrl() == null) {
             super.setUrl(basicProperties.determineUrl());
         }
+        if(super.getDriverClassName() == null){
+            super.setDriverClassName(basicProperties.getDriverClassName());
+        }
 
     }
 

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -633,7 +633,10 @@ public static interface Constants {
 
         long TBLPROPERTIES = fnv1a_64_lower("TBLPROPERTIES");
         long FULLTEXT = fnv1a_64_lower("FULLTEXT");
+        long SPATIAL = fnv1a_64_lower("SPATIAL");
         long NO = fnv1a_64_lower("NO");
         long PATH = fnv1a_64_lower("PATH");
+        long COMPRESSION = fnv1a_64_lower("COMPRESSION");
+        long KEY_BLOCK_SIZE = fnv1a_64_lower("KEY_BLOCK_SIZE");
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/alter/MySqlAlterTableAlterColumnTest.java
Patch:
@@ -31,10 +31,10 @@ public void test_alter_first() throws Exception {
         parser.match(Token.EOF);
         
         assertEquals("ALTER TABLE `cube_template`\n" +
-                "\tADD COLUMN `stat_report_json` VARCHAR(256) CHARSET utf8  COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '模板的统计报表json数组';", SQLUtils.toMySqlString(stmt));
+                "\tADD COLUMN `stat_report_json` VARCHAR(256) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT '' COMMENT '模板的统计报表json数组';", SQLUtils.toMySqlString(stmt));
         
         assertEquals("alter table `cube_template`\n" +
-                "\tadd column `stat_report_json` VARCHAR(256) charset utf8  COLLATE utf8_general_ci not null default '' comment '模板的统计报表json数组';", SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
+                "\tadd column `stat_report_json` VARCHAR(256) character set utf8 collate utf8_general_ci not null default '' comment '模板的统计报表json数组';", SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
     }
 
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest60.java
Patch:
@@ -40,14 +40,14 @@ public void test_one() throws Exception {
             String output = SQLUtils.toMySqlString(stmt);
             Assert.assertEquals("CREATE TABLE t10 ("
                     + "\n\tpk int PRIMARY KEY AUTO_INCREMENT,"
-                    + "\n\tf1 varchar(65500) CHARSET latin1 "
+                    + "\n\tf1 varchar(65500) CHARACTER SET latin1"
                     + "\n)", output);
         }
         {
             String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
             Assert.assertEquals("create table t10 ("
                     + "\n\tpk int primary key auto_increment,"
-                    + "\n\tf1 varchar(65500) charset latin1 "
+                    + "\n\tf1 varchar(65500) character set latin1"
                     + "\n)", output);
         }
     }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -4049,7 +4049,7 @@ protected void printGrantOn(SQLGrantStatement x) {
 
     @Override
     public boolean visit(SQLRevokeStatement x) {
-        print0(ucase ? "ROVOKE " : "rovoke ");
+        print0(ucase ? "REVOKE " : "revoke ");
         printAndAccept(x.getPrivileges(), ", ");
 
         if (x.getOn() != null) {

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -1327,9 +1327,9 @@ public boolean visit(SQLIntegerExpr x) {
     }
 
     protected void printInteger(SQLIntegerExpr x, boolean parameterized) {
-        long val = x.getNumber().longValue();
+        String val = x.getNumber().toString();
 
-        if (val == 1) {
+        if ("1".equals(val)) {
             if (JdbcConstants.ORACLE.equals(dbType)) {
                 SQLObject parent = x.getParent();
                 if (parent instanceof SQLBinaryOpExpr) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -3679,7 +3679,7 @@ protected SQLStatement parseAlterTable(boolean ignore) {
                     renameStmt.addItem(item);
 
                     return renameStmt;
-                }
+                }   
             } else if (lexer.token() == Token.ORDER) {
                 throw new ParserException("TODO " + lexer.info());
             } else if (lexer.identifierEquals("CONVERT")) {

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -634,5 +634,6 @@ public static interface Constants {
         long TBLPROPERTIES = fnv1a_64_lower("TBLPROPERTIES");
         long FULLTEXT = fnv1a_64_lower("FULLTEXT");
         long NO = fnv1a_64_lower("NO");
+        long PATH = fnv1a_64_lower("PATH");
     }
 }

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidSpringAopConfiguration.java
Patch:
@@ -30,8 +30,6 @@
  */
 @ConditionalOnProperty("spring.datasource.druid.aop-patterns")
 public class DruidSpringAopConfiguration {
-    @Value("${spring.aop.proxy-target-class:false}")
-    private boolean proxyTargetClass;
 
     @Bean
     public Advice advice() {
@@ -46,7 +44,7 @@ public Advisor advisor(DruidStatProperties properties) {
     @Bean
     public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() {
         DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();
-        advisorAutoProxyCreator.setProxyTargetClass(proxyTargetClass);
+        advisorAutoProxyCreator.setProxyTargetClass(true);
         return advisorAutoProxyCreator;
     }
 }

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidSpringAopConfiguration.java
Patch:
@@ -30,8 +30,6 @@
  */
 @ConditionalOnProperty("spring.datasource.druid.aop-patterns")
 public class DruidSpringAopConfiguration {
-    @Value("${spring.aop.proxy-target-class:false}")
-    private boolean proxyTargetClass;
 
     @Bean
     public Advice advice() {
@@ -46,7 +44,7 @@ public Advisor advisor(DruidStatProperties properties) {
     @Bean
     public DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator() {
         DefaultAdvisorAutoProxyCreator advisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();
-        advisorAutoProxyCreator.setProxyTargetClass(proxyTargetClass);
+        advisorAutoProxyCreator.setProxyTargetClass(true);
         return advisorAutoProxyCreator;
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/insert/MySqlInsertTest_25_time.java
Patch:
@@ -55,5 +55,4 @@ public void test_insert() throws Exception {
 
 
     }
-
 }

File: src/main/java/com/alibaba/druid/pool/vendor/MSSQLValidConnectionChecker.java
Patch:
@@ -44,7 +44,9 @@ public boolean isValidConnection(final Connection c, String validateQuery, int v
 
         try {
             stmt = c.createStatement();
-            stmt.setQueryTimeout(validationQueryTimeout);
+            if (validationQueryTimeout > 0) {
+                stmt.setQueryTimeout(validationQueryTimeout);
+            }
             stmt.execute(validateQuery);
             return true;
         } catch (SQLException e) {

File: druid-spring-boot-starter/src/test/java/com/alibaba/druid/spring/boot/testcase/DruidDataSourceTestCase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/test/java/com/alibaba/druid/spring/boot/testcase/DruidMultiDataSourceTestCase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/Bug_for_alibank.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/DBCPTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/DragoonMetaInfTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/LockTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestForZY.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestHistogram.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestIdel3.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestLRU.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestLockCount.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestOracle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestOraclePing.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestReplaceLicense.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestRollBack.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.SQLException;
 
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestSqlServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestTraceFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/TestUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/Case0.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/Case1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/Case2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/Case3.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/Case4.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/CaseKylin_Oracle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/CaseKylin_mysql.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/CaseKylin_mysql_idle_1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/CaseKylin_mysql_idle_2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/Case_Concurrent_50.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/Oracle_Case0.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/Oracle_Case3.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/Oracle_Case4.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/pool/druid/DruidCase0.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/proxy/BenchmarkCase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/proxy/BenchmarkExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/proxy/DirectSQLExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/proxy/DruidBenchmarkTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/proxy/SQLExecutor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/proxy/TestAtomicPerformance.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/proxy/sqlcase/Select1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/proxy/sqlcase/SelectEmptyTable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/proxy/sqlcase/SelectNow.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/proxy/sqlcase/SelectSysUser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/sql/MySqlPerfMain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/sql/MySqlPerfMain_schemaStat.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/sql/MySqlPerfMain_select.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/sql/MySqlPerfMain_visitor.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/sql/MySqlPerfTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/wall/WallBenchmarkTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/wall/WallBenchmarkTest1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/wall/WallBenchmarkTest_mysql.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/benckmark/wall/WallBenchmarkTest_mysql_concurrent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/mysql/MySqlBigTableTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/mysql/MySqlHexTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/not_support/sql/mysql/MySqlSelectTest_69_mysql8_windows_function.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/not_support/sql/postgresql/PGSelectTest59_lateral.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/Case0.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/Case3.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/CobarTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/ConcurrentTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/ConcurrentTest2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/DBCPTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/DruidTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/MaxWaitTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/MySqlValdConnectionTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/OracleConnectionPoolDataSourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/TestDruidOraclePreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/TestIdle3_Concurrent_Starvation_Longtime.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/TestMockPerf.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/TestMySqlPing.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/TestOraclePreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/TestOracle_DruidDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/TestPoolStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/TestRollBack.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/Test_C2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/Test_kyline.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/bonecp/TestLRU.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/bonecp/TestPSCache.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/dbcp/Test0.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/dbcp/TestIdleForKylin.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/demo/Demo0.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/ui/DruidDataSourceUIManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pool/ui/DruidDataStatusPanel.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/proxy/TestOracle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/proxy/demo/Demo1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pvt/filter/wall/WallPerformanceTest_1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pvt/pool/TestAbondon.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pvt/pool/TestConcurrent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pvt/pool/TestIdle3_Concurrent.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pvt/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/pvt/pool/TestIdle3_Concurrent_Starvation.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/ISequenceDao.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/ISequenceService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/IUserDao.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/IUserService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/MBeanServerFactoryBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/SequenceDao.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/SequenceService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/SequenceServiceMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/User.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/UserDao.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/spring/UserService.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/DB2Test.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/KeywordsMySqlTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/KeywordsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/MysqlTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/OnlineOracleTest3.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/OnlineSQLTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/OnlineSQLTest2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/OracleTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/PGTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/SQLExprParserTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/TestMigrate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/TestOnlineSQLTest3.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/TestTransform.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/mysql/demo/Demo0.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/odps/OdpsFileTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/oracle/demo/Demo0.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/oracle/demo/Demo1.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/oracle/demo/Demo2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/oracle/demo/Demo3.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/oracle/demo/OracleResourceTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/oracle/demo/OracleResourceTest2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/parser/CommentTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/parser/ExportAndParameterizedVisitorTestCase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/parser/PerfTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/parser/SQLLexerTest2.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/parser/SQLMergeTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/performance/TestSelectPerformance.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/sql/test/TestUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/stat/TestBeidou.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/stat/TestOracle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/test/OdpsSelectTest6.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/test/util/OracleMockConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/test/util/OracleMockDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/test/util/OracleMockDriverJdbc3.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/test/util/OracleMockPreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/test/util/OracleUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/test/wall/MySqlResourceWallTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/util/JdbcUtilsTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/util/MapComparatorTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/util/ServletPathMathcherTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/actuator/ActuatorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/actuator/endpoint/DruidDataSourceMvcEndpoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/actuator/metadata/DruidDataSourcePoolMetadata.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/properties/DruidStatProperties.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidFilterConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidSpringAopConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidStatViewServletConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/stat/DruidWebStatFilterConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/Constants.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/DruidRuntimeException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/TransactionTimeoutException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/AutoLoad.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/Filter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterChain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterChainImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterEventAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/config/ConfigTools.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/CharsetConvert.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/CharsetParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/EncodingConvertFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4j2Filter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4j2FilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/LogFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Slf4jLogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/MergeStatFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContextListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContextListenerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockArray.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockBlob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockCallableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockClob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockConnectionClosedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockDriverMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockNClob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockParameterMetaData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockPreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockRef.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockResultSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockResultSetMetaData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockRowId.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockSQLXML.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockSavepoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStatementBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStruct.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/handler/MockExecuteHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/handler/MySqlMockExecuteHandlerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DataSourceClosedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DataSourceDisableException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DataSourceNotAvailableException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSourceMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceC3P0Adapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceC3P0AdapterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatValue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledPreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledResultSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/GetConnectionTimeoutException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ManagedDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PoolableWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PreparedStatementHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ValidConnectionCheckerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/WrapperAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/DB2ExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/InformixExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MSSQLValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MockExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/NullExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/OracleExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/OracleValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/PGExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/PGValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/SybaseExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/DruidPooledXAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/DruidXADataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/JtdsXAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/JtdsXAResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/DruidDriverMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImplMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DatabaseMetaDataProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterDate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterDecimal.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterInt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterLong.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterNull.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterString.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterTimestamp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/NClobProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/NClobProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetMetaDataProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetMetaDataProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementExecuteType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/TransactionInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/SQLTransformUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLArgument.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLArrayDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLCommentHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLDataTypeImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLDeclareItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLExprImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLKeep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLLimit.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLMapDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLName.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLObjectImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLObjectWithDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderingSpecification.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOver.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionBy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByHash.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByRange.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionValue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLRecordDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLReplaceable.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSetQuantifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatementImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLStructDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSubPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSubPartitionBy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSubPartitionByHash.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSubPartitionByList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSubPartitionByRange.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAggregateExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAggregateOption.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllColumnExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAnyExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLArrayExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBetweenExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOpExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOpExprGroup.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOperator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBooleanExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCaseExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCaseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCastExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCharExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCurrentOfCursorExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLDateExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLDefaultExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLExistsExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLExprUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLFlashbackExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLGroupingSetExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLHexExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIdentifierExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInListExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInSubQueryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIntegerExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIntervalExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIntervalUnit.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLListExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLMethodInvokeExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNCharExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNotExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNullExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumberExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumericLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLPropertyExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLQueryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLSequenceExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLSomeExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTextLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTimestampExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLUnaryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLUnaryOperator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLValuableExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLVariantRefExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterCharacter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterDatabaseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterFunctionStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterProcedureStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterSequenceStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAlterColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAnalyzePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableCheckPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableCoalescePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableConvertCharSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableKeys.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDiscardPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropColumnItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropForeignKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableKeys.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableExchangePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableImportPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableOptimizePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableReOrganizePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRebuildPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRename.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenameColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenameIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenamePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRepairPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableSetComment.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableSetLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableTouch.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableTruncatePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTypeStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterViewRenameStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterViewStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAssignItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLBlockStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCallStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCharacterDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCloseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnReference.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnUniqueKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCommentStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCommitStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraintImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateDatabaseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateFunctionStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateIndexStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2017 Alibaba Group Holding Ltd.
+ * Copyright 1999-2018 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/test/java/com/alibaba/druid/bvt/sql/repository/OracleJoinResolveTest_2_join.java
Patch:
@@ -21,14 +21,13 @@ protected void setUp() throws Exception {
     }
 
     public void test_for_issue() throws Exception {
-
-        String sql = "select a.* from t_user a inner join t_group b where a.uid = id";
-        assertEquals("SELECT a.uid, a.gid, a.name, b.id, a.name\n" +
+        assertEquals("SELECT a.uid, a.gid, a.name, b.id, b.name\n" +
                         "FROM t_user a\n" +
                         "\tINNER JOIN t_group b\n" +
                         "WHERE a.uid = b.id"
                 , repository.resolve("select * from t_user a inner join t_group b where a.uid = id"));
 
+        String sql = "select a.* from t_user a inner join t_group b where a.uid = id";
         List<SQLStatement> statementList = SQLUtils.parseStatements(sql, JdbcConstants.ORACLE);
         SchemaStatVisitor schemaStatVisitor = SQLUtils.createSchemaStatVisitor(JdbcConstants.ORACLE);
         schemaStatVisitor.setRepository(repository);

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1975,7 +1975,7 @@ public SQLExpr orRest(SQLExpr expr) {
 
                     for (;;) {
                         lexer.nextToken();
-                        SQLExpr more = relational();
+                        SQLExpr more = and();
                         group.add(more);
                         if (lexer.token == Token.OR) {
                             if (lexer.isKeepComments() && lexer.hasComment()) {

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -833,6 +833,9 @@ public static String normalize(String name, String dbType) {
             char x0 = name.charAt(name.length() - 1);
             if ((c0 == '"' && x0 == '"') || (c0 == '`' && x0 == '`')) {
                 String normalizeName = name.substring(1, name.length() - 1);
+                if (c0 == '`') {
+                    normalizeName = normalizeName.replaceAll("`\\.`", ".");
+                }
 
                 if (JdbcConstants.ORACLE.equals(dbType)) {
                     if (OracleUtils.isKeyword(normalizeName)) {

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlExceptionSorter.java
Patch:
@@ -62,6 +62,8 @@ public boolean isExceptionFatal(SQLException e) {
                 // Access denied
             case 1142: // ER_TABLEACCESS_DENIED_ERROR
             case 1227: // ER_SPECIFIC_ACCESS_DENIED_ERROR
+
+            case 1290: // ER_OPTION_PREVENTS_STATEMENT
                 return true;
             default:
                 break;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGASTVisitor.java
Patch:
@@ -106,7 +106,9 @@ public interface PGASTVisitor extends SQLASTVisitor {
     boolean visit(PGShowStatement x);
 
     void endVisit(PGStartTransactionStatement x);
-    
     boolean visit(PGStartTransactionStatement x);
 
+    void endVisit(PGConnectToStatement x);
+    boolean visit(PGConnectToStatement x);
+
 }

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -105,7 +105,7 @@ private static boolean limitQueryBlock(SQLSelect select, String dbType, int offs
         if (JdbcConstants.MYSQL.equals(dbType) || //
             JdbcConstants.MARIADB.equals(dbType) || //
             JdbcConstants.H2.equals(dbType)) {
-            return limitMySqlQueryBlock((MySqlSelectQueryBlock) queryBlock, dbType, offset, count, check);
+            return limitMySqlQueryBlock(queryBlock, dbType, offset, count, check);
         }
 
         if (JdbcConstants.POSTGRESQL.equals(dbType)) {
@@ -369,7 +369,7 @@ private static boolean limitOracle(SQLSelect select, String dbType, int offset,
         return true;
     }
 
-    private static boolean limitMySqlQueryBlock(MySqlSelectQueryBlock queryBlock, String dbType, int offset, int count, boolean check) {
+    private static boolean limitMySqlQueryBlock(SQLSelectQueryBlock queryBlock, String dbType, int offset, int count, boolean check) {
         SQLLimit limit = queryBlock.getLimit();
         if (limit != null) {
             if (offset > 0) {

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -2675,7 +2675,7 @@ protected SQLForeignKeyImpl.Option parseReferenceOption() {
             lexer.nextToken();
             accept(Token.NULL);
             option = SQLForeignKeyImpl.Option.SET_NULL;
-        } else if (lexer.token() == Token.ON || lexer.identifierEquals(FnvHash.Constants.ON)) {
+        } else if (lexer.identifierEquals(FnvHash.Constants.NO)) {
             lexer.nextToken();
             if (lexer.identifierEquals(FnvHash.Constants.ACTION)) {
                 option = SQLForeignKeyImpl.Option.NO_ACTION;

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -633,5 +633,6 @@ public static interface Constants {
 
         long TBLPROPERTIES = fnv1a_64_lower("TBLPROPERTIES");
         long FULLTEXT = fnv1a_64_lower("FULLTEXT");
+        long NO = fnv1a_64_lower("NO");
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerAlterTableTest_10.java
Patch:
@@ -45,7 +45,7 @@ public void test_alter_first() throws Exception {
 
         String output = SQLUtils.toSQLString(stmt, JdbcConstants.SQL_SERVER);
         Assert.assertEquals("ALTER TABLE dbo.doc_exc"
-                + "\n\tADD (column_b VARCHAR(20) NULL CONSTRAINT exb_unique UNIQUE);", output);
+                + "\n\tADD column_b VARCHAR(20) NULL CONSTRAINT exb_unique UNIQUE;", output);
 
         Assert.assertEquals(1, visitor.getTables().size());
         Assert.assertEquals(1, visitor.getColumns().size());

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerAlterTableTest_3.java
Patch:
@@ -44,7 +44,7 @@ public void test_alter_first() throws Exception {
 
         String output = SQLUtils.toSQLString(stmt, JdbcConstants.SQL_SERVER);
         Assert.assertEquals("ALTER TABLE extensions" //
-                            + "\n\tADD ([core] bit)", output);
+                            + "\n\tADD [core] bit", output);
 
         Assert.assertEquals(1, visitor.getTables().size());
         Assert.assertEquals(1, visitor.getColumns().size());

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerAlterTableTest_7.java
Patch:
@@ -44,7 +44,7 @@ public void test_alter_first() throws Exception {
 
         String output = SQLUtils.toSQLString(stmt, JdbcConstants.SQL_SERVER);
         Assert.assertEquals("ALTER TABLE dbo.doc_exa"//
-                            + "\n\tADD (column_b VARCHAR(20) NULL);", output);
+                            + "\n\tADD column_b VARCHAR(20) NULL;", output);
 
         Assert.assertEquals(1, visitor.getTables().size());
         Assert.assertEquals(1, visitor.getColumns().size());

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -4239,8 +4239,6 @@ public SQLStatement parseAlterDatabase() {
         } else if (lexer.identifierEquals(FnvHash.Constants.CHARACTER)) {
             SQLAlterCharacter item = alterTableCharacter();
             stmt.setCharacter(item);
-        } else {
-            throw new ParserException("TODO " + lexer.info());
         }
 
         return stmt;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/visitor/OdpsASTVisitor.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.sql.dialect.odps.visitor;
 
-import com.alibaba.druid.sql.ast.statement.SQLLateralViewTableSource;
+import com.alibaba.druid.sql.dialect.hive.ast.HiveInsert;
 import com.alibaba.druid.sql.dialect.odps.ast.*;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
@@ -29,9 +29,9 @@ public interface OdpsASTVisitor extends SQLASTVisitor {
 
     boolean visit(OdpsInsertStatement x);
     
-    void endVisit(OdpsInsert x);
+    void endVisit(HiveInsert x);
     
-    boolean visit(OdpsInsert x);
+    boolean visit(HiveInsert x);
     
     void endVisit(OdpsUDTFSQLSelectItem x);
     

File: src/main/java/com/alibaba/druid/sql/dialect/odps/visitor/OdpsSchemaStatVisitor.java
Patch:
@@ -18,6 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.*;
+import com.alibaba.druid.sql.dialect.hive.ast.HiveInsert;
 import com.alibaba.druid.sql.dialect.odps.ast.*;
 import com.alibaba.druid.sql.visitor.SchemaStatVisitor;
 import com.alibaba.druid.stat.TableStat;
@@ -54,12 +55,12 @@ public boolean visit(OdpsInsertStatement x) {
     }
 
     @Override
-    public void endVisit(OdpsInsert x) {
+    public void endVisit(HiveInsert x) {
 
     }
 
     @Override
-    public boolean visit(OdpsInsert x) {
+    public boolean visit(HiveInsert x) {
         setMode(x, TableStat.Mode.Insert);
 
         SQLExprTableSource tableSource = x.getTableSource();

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -66,8 +66,8 @@ public enum Token {
     
     EXPLAIN("EXPLAIN"), 
     FOR("FOR"), 
-    IF("IF"), 
-   
+    IF("IF"),
+    SORT("SORT"),
    
    
     ALL("ALL"), 

File: src/main/java/com/alibaba/druid/sql/repository/SchemaRepository.java
Patch:
@@ -263,6 +263,8 @@ private SchemaResolveVisitor createResolveVisitor(SchemaResolveVisitor.Option...
             resolveVisitor = new SchemaResolveVisitorFactory.DB2ResolveVisitor(this, optionsValue);
         } else if (JdbcConstants.ODPS.equals(dbType)) {
             resolveVisitor = new SchemaResolveVisitorFactory.OdpsResolveVisitor(this, optionsValue);
+        } else if (JdbcConstants.HIVE.equals(dbType)) {
+            resolveVisitor = new SchemaResolveVisitorFactory.HiveResolveVisitor(this, optionsValue);
         } else if (JdbcConstants.POSTGRESQL.equals(dbType)) {
             resolveVisitor = new SchemaResolveVisitorFactory.PGResolveVisitor(this, optionsValue);
         } else if (JdbcConstants.SQL_SERVER.equals(dbType)) {

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/AntlrMySqlTest.java
Patch:
@@ -25,6 +25,7 @@ public void test_for_antlr_examples() throws Exception {
         for (File file : dir.listFiles()) {
             System.out.println(file);
             String sql = FileUtils.readFileToString(file);
+
             List<SQLStatement> stmtList = SQLUtils.parseStatements(sql, JdbcConstants.MYSQL);
             for (SQLStatement stmt : stmtList) {
                 stmt.toString();

File: src/test/java/com/alibaba/druid/bvt/sql/repository/OracleJoinResolveTest_2_join.java
Patch:
@@ -23,7 +23,7 @@ protected void setUp() throws Exception {
     public void test_for_issue() throws Exception {
 
         String sql = "select a.* from t_user a inner join t_group b where a.uid = id";
-        assertEquals("SELECT a.uid, a.gid, a.name, b.id, b.name\n" +
+        assertEquals("SELECT a.uid, a.gid, a.name, b.id, a.name\n" +
                         "FROM t_user a\n" +
                         "\tINNER JOIN t_group b\n" +
                         "WHERE a.uid = b.id"

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -110,4 +110,7 @@ public interface JdbcConstants {
     String ELASTIC_SEARCH             = "elastic_search";
     
     String ELASTIC_SEARCH_DRIVER      = "com.alibaba.xdriver.elastic.jdbc.ElasticDriver";
+
+    String CLICKHOUSE                 = "clickhouse";
+    String CLICKHOUSE_DRIVER          = "ru.yandex.clickhouse.ClickHouseDriver";
 }

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -697,6 +697,7 @@ protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
             } else {
                 SQLExpr expr = this.expr();
                 rightTableSource = new SQLExprTableSource(expr);
+                primaryTableSourceRest(rightTableSource);
             }
 
             if (lexer.token == Token.USING

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceWrapper.java
Patch:
@@ -24,6 +24,7 @@
 import com.alibaba.druid.filter.stat.StatFilter;
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.wall.WallFilter;
+
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
@@ -49,9 +50,7 @@ public void afterPropertiesSet() throws Exception {
         if (super.getUrl() == null) {
             super.setUrl(basicProperties.determineUrl());
         }
-        if (super.getDriverClassName() == null) {
-            super.setDriverClassName(basicProperties.determineDriverClassName());
-        }
+
     }
 
     @Autowired(required = false)

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTVisitor.java
Patch:
@@ -823,4 +823,7 @@ public interface SQLASTVisitor {
 
     boolean visit(SQLAlterSequenceStatement x);
     void endVisit(SQLAlterSequenceStatement x);
+
+    boolean visit(SQLAlterTableExchangePartition x);
+    void endVisit(SQLAlterTableExchangePartition x);
 }

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceWrapper.java
Patch:
@@ -24,6 +24,7 @@
 import com.alibaba.druid.filter.stat.StatFilter;
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.wall.WallFilter;
+
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;
@@ -49,9 +50,7 @@ public void afterPropertiesSet() throws Exception {
         if (super.getUrl() == null) {
             super.setUrl(basicProperties.determineUrl());
         }
-        if (super.getDriverClassName() == null) {
-            super.setDriverClassName(basicProperties.determineDriverClassName());
-        }
+
     }
 
     @Autowired(required = false)

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -632,5 +632,6 @@ public static interface Constants {
         long EXIST = fnv1a_64_lower("EXIST");
 
         long TBLPROPERTIES = fnv1a_64_lower("TBLPROPERTIES");
+        long FULLTEXT = fnv1a_64_lower("FULLTEXT");
     }
 }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -1526,6 +1526,8 @@ public boolean visit(SQLNotExpr x) {
         if (expr instanceof SQLBinaryOpExpr) {
             SQLBinaryOpExpr binaryOpExpr = (SQLBinaryOpExpr) expr;
             needQuote = binaryOpExpr.getOperator().isLogical();
+        } else if (expr instanceof SQLInListExpr || expr instanceof SQLNotExpr) {
+            needQuote = true;
         }
 
         if (needQuote) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -3651,7 +3651,7 @@ protected SQLStatement parseAlterTable(boolean ignore) {
                 }
             } else if (lexer.identifierEquals("RENAME")) {
                 lexer.nextToken();
-                
+
                 if (lexer.token() == Token.INDEX) {
                     lexer.nextToken();
                     SQLName name = this.exprParser.name();

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/create/MySqlCreateTriggerTest3.java
Patch:
@@ -43,7 +43,7 @@ public void test_0() throws Exception {
                 "\tFOR EACH ROW\n" +
                 "BEGIN\n" +
                 "\tINSERT INTO log_table\n" +
-                "\tVALUES (\"delete row from test.t1\");\n" +
+                "\tVALUES ('delete row from test.t1');\n" +
                 "\tINSERT INTO t4\n" +
                 "\tVALUES (old.col1, old.col1 + 5, old.col1 + 7);\n" +
                 "END;", stmt.toString());

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/create/MySqlCreateTriggerTest4.java
Patch:
@@ -39,7 +39,7 @@ public void test_0() throws Exception {
                 "\tON test.t2\n" +
                 "\tFOR EACH ROW\n" +
                 "INSERT INTO log_table\n" +
-                "VALUES (concat(\"inserted into table test.t2 values: (1c, _) = (\", CAST(NEW.col1 AS char(100)), \", \", convert(new.`_`, char(100)), \")\"));", stmt.toString());
+                "VALUES (concat('inserted into table test.t2 values: (1c, _) = (', CAST(NEW.col1 AS char(100)), ', ', convert(new.`_`, char(100)), ')'));", stmt.toString());
     }
 
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_63_alias.java
Patch:
@@ -53,7 +53,7 @@ public void test_0() throws Exception {
         {
             String output = SQLUtils.toMySqlString(stmt);
             assertEquals("SELECT totalNumber\n" +
-                            "\t, concat(\"\", ?, round(memberNumber, 0), \"\") AS totalDisplay\n" +
+                            "\t, concat('', ?, round(memberNumber, 0), '') AS totalDisplay\n" +
                             "FROM (\n" +
                             "\tSELECT COUNT(1) AS totalNumber, SUM(memberNumber) AS memberNumber\n" +
                             "\tFROM (\n" +
@@ -76,7 +76,7 @@ public void test_0() throws Exception {
         {
             String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
             assertEquals("select totalNumber\n" +
-                            "\t, concat(\"\", ?, round(memberNumber, 0), \"\") as totalDisplay\n" +
+                            "\t, concat('', ?, round(memberNumber, 0), '') as totalDisplay\n" +
                             "from (\n" +
                             "\tselect count(1) as totalNumber, sum(memberNumber) as memberNumber\n" +
                             "\tfrom (\n" +
@@ -100,7 +100,7 @@ public void test_0() throws Exception {
         {
             String output = SQLUtils.toMySqlString(stmt, new SQLUtils.FormatOption(true, true, true));
             assertEquals("SELECT totalNumber\n" +
-                            "\t, concat(\"\", ?, round(memberNumber, ?), \"\") AS totalDisplay\n" +
+                            "\t, concat(?, ?, round(memberNumber, ?), ?) AS totalDisplay\n" +
                             "FROM (\n" +
                             "\tSELECT COUNT(1) AS totalNumber, SUM(memberNumber) AS memberNumber\n" +
                             "\tFROM (\n" +

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_92.java
Patch:
@@ -46,4 +46,6 @@ public void test_0() throws Exception {
                 "\tAND cfgdatasou0_.module_name = ?\n" +
                 "\tAND cfgdatasou0_.node_type = ?", stmt.toString());
     }
+
+
 }

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -109,6 +109,7 @@ public DruidConnectionHolder(DruidAbstractDataSource dataSource, Connection conn
             if (JdbcConstants.SYBASE.equals(dataSource.dbType) //
                 || JdbcConstants.DB2.equals(dataSource.dbType) //
                 || JdbcConstants.HIVE.equals(dataSource.dbType) //
+                || JdbcConstants.ODPS.equals(dataSource.dbType) //
             ) {
                 initUnderlyHoldability = false;
             }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -1314,9 +1314,9 @@ public boolean visit(SQLIntegerExpr x) {
     }
 
     protected void printInteger(SQLIntegerExpr x, boolean parameterized) {
-        long val = x.getNumber().longValue();
+        String val = x.getNumber().toString();
 
-        if (val == 1) {
+        if ("1".equals(val)) {
             if (JdbcConstants.ORACLE.equals(dbType)) {
                 SQLObject parent = x.getParent();
                 if (parent instanceof SQLBinaryOpExpr) {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -2446,8 +2446,6 @@ public OracleCreateIndexStatement parseCreateIndex(boolean acceptCreate) {
                         break;
                     }
                 }
-
-                break;
             } else if (lexer.identifierEquals("GLOBAL")) {
                 lexer.nextToken();
                 stmt.setGlobal(true);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlSelectParser.java
Patch:
@@ -229,7 +229,7 @@ public SQLTableSource parseTableSource() {
                 accept(Token.RPAREN);
 
                 SQLSelectQuery query = queryRest(select.getQuery());
-                if (query instanceof SQLUnionQuery) {
+                if (query instanceof SQLUnionQuery && select.getWithSubQuery() == null) {
                     select.getQuery().setBracket(true);
                     tableSource = new SQLUnionQueryTableSource((SQLUnionQuery) query);
                 } else {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlSelectParser.java
Patch:
@@ -229,7 +229,7 @@ public SQLTableSource parseTableSource() {
                 accept(Token.RPAREN);
 
                 SQLSelectQuery query = queryRest(select.getQuery());
-                if (query instanceof SQLUnionQuery) {
+                if (query instanceof SQLUnionQuery && select.getWithSubQuery() == null) {
                     select.getQuery().setBracket(true);
                     tableSource = new SQLUnionQueryTableSource((SQLUnionQuery) query);
                 } else {

File: src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -706,9 +706,11 @@ private WallCheckResult checkInternal(String sql) {
                 sqlStat = addWhiteSql(sql, tableStat, context.getFunctionStats(), syntaxError);
             }
         }
+        
         if(sqlStat == null && updateCheckHandlerEnable){
-            sqlStat = new WallSqlStat(tableStat, context.getFunctionStats(), syntaxError);
+            sqlStat = new WallSqlStat(tableStat, context.getFunctionStats(), violations, syntaxError);
         }
+
         Map<String, WallSqlTableStat> tableStats = null;
         Map<String, WallSqlFunctionStat> functionStats = null;
         if (context != null) {

File: src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -706,7 +706,9 @@ private WallCheckResult checkInternal(String sql) {
                 sqlStat = addWhiteSql(sql, tableStat, context.getFunctionStats(), syntaxError);
             }
         }
-
+        if(sqlStat == null && updateCheckHandlerEnable){
+            sqlStat = new WallSqlStat(tableStat, context.getFunctionStats(), syntaxError);
+        }
         Map<String, WallSqlTableStat> tableStats = null;
         Map<String, WallSqlFunctionStat> functionStats = null;
         if (context != null) {

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -939,7 +939,9 @@ public static void checkUpdate(WallVisitor visitor, SQLUpdateStatement x) {
                             filterValues.add(((SQLValuableExpr) expr).getValue());
                         }
                         boolean validate = updateCheckHandler.check(tableName, checkColumn, setValue, filterValues);
-                        visitor.addViolation(new IllegalSQLObjectViolation(ErrorCode.UPDATE_CHECK_FAIL, "update check failed.", visitor.toSQL(x)));
+                        if (!validate) {
+                            visitor.addViolation(new IllegalSQLObjectViolation(ErrorCode.UPDATE_CHECK_FAIL, "update check failed.", visitor.toSQL(x)));
+                        }
                     } else {
                         visitor.addWallUpdateCheckItem(new WallUpdateCheckItem(tableName, checkColumn, valueExpr, filterValueExprList));
                     }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallUpdateCheckTest.java
Patch:
@@ -46,7 +46,7 @@ public boolean check(String table, String column, Object setValue, List<Object>
         });
         {
             WallCheckResult result = wallProvider.check("update t_orders set status = 3 where id = 3 and status = 4");
-            assertTrue(result.getViolations().size() > 0);
+            assertTrue(result.getViolations().size() == 0);
         }
         assertEquals(0, wallProvider.getWhiteListHitCount());
         assertEquals(0, wallProvider.getBlackListHitCount());

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -2233,7 +2233,7 @@ public SQLStatement parseCreateTrigger() {
         if (lexer.identifierEquals(FnvHash.Constants.DEFINER)) {
             lexer.nextToken();
             accept(Token.EQ);
-            SQLName definer = this.exprParser.name();
+            SQLName definer = ((MySqlExprParser) this.exprParser).userName();
             stmt.setDefiner(definer);
 
             if (lexer.token() == Token.LPAREN) {

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1327,6 +1327,7 @@ public SQLName name() {
                 case SCHEMA:
                 case INTERVAL:
                 case EXPLAIN:
+                case SET:
                     identName = lexer.stringVal();
                     lexer.nextToken();
                     break;

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1327,6 +1327,7 @@ public SQLName name() {
                 case SCHEMA:
                 case INTERVAL:
                 case EXPLAIN:
+                case SET:
                     identName = lexer.stringVal();
                     lexer.nextToken();
                     break;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGOutputVisitor.java
Patch:
@@ -2985,13 +2985,14 @@ public boolean visit(SQLCreateIndexStatement x) {
 
         print0(ucase ? "INDEX " : "index ");
 
+        x.getName().accept(this);
+
         if (x.getUsing() != null) {
             print0(ucase ? " USING " : " using ");
             ;
             print0(x.getUsing());
         }
 
-        x.getName().accept(this);
         print0(ucase ? " ON " : " on ");
         x.getTable().accept(this);
         print0(" (");

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateIndexTest_0.java
Patch:
@@ -33,9 +33,9 @@ public void test_0() throws Exception {
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement stmt = statementList.get(0);
         
-        assertEquals("CREATE UNIQUE INDEX  USING btree\"test_idx\" ON \"public\".\"city\" (\"name\");", SQLUtils.toPGString(stmt));
-        
-        assertEquals("create UNIQUE index  using btree\"test_idx\" on \"public\".\"city\" (\"name\");", SQLUtils.toPGString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
+        assertEquals("CREATE UNIQUE INDEX \"test_idx\" USING btree ON \"public\".\"city\" (\"name\");", SQLUtils.toPGString(stmt));
+
+        assertEquals("create UNIQUE index \"test_idx\" using btree on \"public\".\"city\" (\"name\");", SQLUtils.toPGString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
 
         assertEquals(1, statementList.size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/db2/DB2InsertTest_1.java
Patch:
@@ -93,7 +93,7 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(2, visitor.getTables().size());
         Assert.assertEquals(11, visitor.getColumns().size());
-        Assert.assertEquals(3, visitor.getConditions().size());
+        Assert.assertEquals(4, visitor.getConditions().size());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("MK.KPI_AREA_SORT_FACT_LATN_ID_MID")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/db2/DB2SelectTest_26.java
Patch:
@@ -77,7 +77,7 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
         Assert.assertEquals(5, visitor.getColumns().size());
-        Assert.assertEquals(2, visitor.getConditions().size());
+        Assert.assertEquals(3, visitor.getConditions().size());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("MK.M_BROAD_BAND_USER_FACT")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest101.java
Patch:
@@ -145,7 +145,7 @@ public void test_0() throws Exception {
 
         assertEquals(5, visitor.getTables().size());
         assertEquals(24, visitor.getColumns().size());
-        assertEquals(11, visitor.getConditions().size());
+        assertEquals(12, visitor.getConditions().size());
         assertEquals(4, visitor.getRelationships().size());
         assertEquals(1, visitor.getOrderByColumns().size());
     }

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -615,6 +615,8 @@ public static interface Constants {
         long SORTED = fnv1a_64_lower("SORTED");
         long LIFECYCLE = fnv1a_64_lower("LIFECYCLE");
         long PARTITIONS = fnv1a_64_lower("PARTITIONS");
+        long ARRAY = fnv1a_64_lower("ARRAY");
+        long STRUCT = fnv1a_64_lower("STRUCT");
 
         long ROLLBACK = fnv1a_64_lower("ROLLBACK");
         long SAVEPOINT = fnv1a_64_lower("SAVEPOINT");

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -255,7 +255,7 @@ public static String format(String sql, String dbType, List<Object> parameters,
             List<SQLStatement> statementList = parser.parseStatementList();
             return toSQLString(statementList, dbType, parameters, option);
         } catch (ClassCastException ex) {
-            LOG.warn("format error", ex);
+            LOG.warn("format error, dbType : " + dbType, ex);
             return sql;
         } catch (ParserException ex) {
             LOG.warn("format error", ex);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -454,7 +454,7 @@ public MySqlCreateTableStatement parseCreateTable(boolean acceptCreate) {
                         clause.setLinear(true);
                     }
 
-                    if (lexer.token() == Token.ALGORITHM) {
+                    if (lexer.identifierEquals(FnvHash.Constants.ALGORITHM)) {
                         lexer.nextToken();
                         accept(Token.EQ);
                         clause.setAlgorithm(lexer.integerValue().shortValue());
@@ -642,7 +642,7 @@ protected void partitionClauseRest(SQLPartitionBy clause) {
                     clause.setLinear(true);
                 }
 
-                if (lexer.token() == Token.ALGORITHM) {
+                if (lexer.identifierEquals(FnvHash.Constants.ALGORITHM)) {
                     lexer.nextToken();
                     accept(Token.EQ);
                     subPartitionKey.setAlgorithm(lexer.integerValue().shortValue());

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -35,7 +35,6 @@ public class MySqlLexer extends Lexer {
 
         map.putAll(Keywords.DEFAULT_KEYWORDS.getKeywords());
 
-	map.put("ALGORITHM", Token.ALGORITHM);
         map.put("DUAL", Token.DUAL);
         map.put("FALSE", Token.FALSE);
         map.put("IDENTIFIED", Token.IDENTIFIED);

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGOutputVisitor.java
Patch:
@@ -46,6 +46,7 @@
 
 import java.util.LinkedHashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 public class PGOutputVisitor extends SQLASTOutputVisitor implements PGASTVisitor, OracleASTVisitor {
@@ -2275,6 +2276,7 @@ public boolean visit(OracleCreateTableStatement x) {
             println();
             x.getSelect().accept(this);
         }
+
         return false;
     }
 

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -620,5 +620,6 @@ public static interface Constants {
         long SAVEPOINT = fnv1a_64_lower("SAVEPOINT");
         long RELEASE = fnv1a_64_lower("RELEASE");
         long MERGE = fnv1a_64_lower("MERGE");
+        long INHERITS = fnv1a_64_lower("INHERITS");
     }
 }

File: src/main/java/com/alibaba/druid/pool/DruidPooledPreparedStatement.java
Patch:
@@ -195,7 +195,7 @@ public void close() throws SQLException {
                     currentFetchSize = defaultFetchSize;
                 }
             } catch (Exception e) {
-                this.conn.handleException(e);
+                this.conn.handleException(e, null);
             }
         }
 

File: src/test/java/com/alibaba/druid/bvt/sql/cobar/DALParserTest.java
Patch:
@@ -128,7 +128,7 @@ public void testSet_4() throws Exception {
         SQLSetStatement set = (SQLSetStatement) parser.parseStatementList().get(0);
         parser.match(Token.EOF);
         String output = SQLUtils.toMySqlString(set);
-        Assert.assertEquals("SET @@global.var1 = 1, var2 = 2", output);
+        Assert.assertEquals("SET @@global.var1 = 1, @@session.var2 = 2", output);
     }
     
     public void testSet_5() throws Exception {
@@ -137,7 +137,7 @@ public void testSet_5() throws Exception {
         SQLSetStatement set = (SQLSetStatement) parser.parseStatementList().get(0);
         parser.match(Token.EOF);
         String output = SQLUtils.toMySqlString(set);
-        Assert.assertEquals("SET @@global.var1 = 1, var2 = 2", output);
+        Assert.assertEquals("SET @@global.var1 = 1, @@session.var2 = 2", output);
     }
     
     public void testSetTxn_0() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/MySqlParameterizedOutputVisitorTest_6.java
Patch:
@@ -32,7 +32,7 @@ public void test_0() throws Exception {
 
     public void test_1() throws Exception {
         String sql = "SET GLOBAL sort_buffer_size=1000000, SESSION sort_buffer_size=1000000;";
-        String paramSql = "SET @@global.sort_buffer_size = ?, sort_buffer_size = ?;";
+        String paramSql = "SET @@global.sort_buffer_size = ?, @@session.sort_buffer_size = ?;";
         Assert.assertEquals(paramSql, ParameterizedOutputVisitorUtils.parameterize(sql, JdbcConstants.MYSQL));
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -596,7 +596,7 @@ public SQLAssignItem parseAssignItem() {
             } else if (identHash == FnvHash.Constants.SESSION) {
                 ident = lexer.stringVal();
                 lexer.nextToken();
-                var = new SQLVariantRefExpr(ident, false);
+                var = new SQLVariantRefExpr(ident, false, true);
             } else {
                 var = new SQLVariantRefExpr(ident);
             }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -655,6 +655,8 @@ public boolean visit(SQLVariantRefExpr x) {
 
         if (x.isGlobal()) {
             print0("@@global.");
+        }else if(x.isHasSessionBefore()){
+            print0("@@session.");
         }
 
         String varName = x.getName();

File: src/test/java/com/alibaba/druid/bvt/proxy/filter/StatFilterTest3.java
Patch:
@@ -51,7 +51,7 @@ public void test_merge_pg() throws Exception {
 
         Assert.assertEquals(JdbcConstants.POSTGRESQL, filter.getDbType());
 
-        Assert.assertEquals("DROP TABLE IF EXISTS test_site_data_select_111;;\n" +
+        Assert.assertEquals("DROP TABLE IF EXISTS test_site_data_select_111;\n" +
                 "CREATE TABLE test_site_data_select_111\n" +
                 "AS\n" +
                 "SELECT *\n" +

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -1900,6 +1900,7 @@ public SQLStartTransactionStatement parseStart() {
         acceptIdentifier("TRANSACTION");
 
         SQLStartTransactionStatement stmt = new SQLStartTransactionStatement();
+        stmt.setDbType(dbType);
 
         if (lexer.token() == Token.WITH) {
             lexer.nextToken();

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerStatementParser.java
Patch:
@@ -494,6 +494,7 @@ public SQLStatement parseBlock() {
             lexer.nextToken();
 
             SQLStartTransactionStatement startTrans = new SQLStartTransactionStatement();
+            startTrans.setDbType(dbType);
 
             if (lexer.token() == Token.IDENTIFIER) {
                 SQLName name = this.exprParser.name();

File: src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -296,7 +296,7 @@ public static long getLastPacketReceivedTimeMs(Connection conn) throws SQLExcept
             if (connImpl == null) {
                 return -1;
             }
-            
+
             Object mysqlio = method_getIO.invoke(connImpl);
             Long ms = (Long) method_getLastPacketReceivedTimeMs.invoke(mysqlio);
             return ms.longValue();

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -51,6 +51,7 @@ public final class DruidConnectionHolder {
     protected final List<StatementEventListener>  statementEventListeners  = new CopyOnWriteArrayList<StatementEventListener>();
     protected final long                          connectTimeMillis;
     protected volatile long                       lastActiveTimeMillis;
+    protected volatile long                       lastValidTimeMillis;
     private long                                  useCount                 = 0;
     private long                                  keepAliveCheckCount      = 0;
     private long                                  lastNotEmptyWaitNanos;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/MySqlParameterizedOutputVisitorTest_17.java
Patch:
@@ -24,7 +24,7 @@ public void test_for_parameterize() throws Exception {
         String psql = ParameterizedOutputVisitorUtils.parameterize(sql, dbType);
         assertEquals("REPLACE INTO mytable (`user_id`, `c_level`, `l_level`, `t_level`, `v_level`, `tag`)\n" +
                 "VALUES (?, ?, ?, ?, ?\n" +
-                "\t, ?)", psql);
+                "\t\t, ?)", psql);
 
         SQLStatementParser parser = SQLParserUtils.createSQLStatementParser(sql, dbType);
         List<SQLStatement> stmtList = parser.parseStatementList();

File: src/main/java/com/alibaba/druid/sql/visitor/ParameterizedOutputVisitorUtils.java
Patch:
@@ -34,6 +34,7 @@
 public class ParameterizedOutputVisitorUtils {
     private final static SQLParserFeature[] features = {
             SQLParserFeature.EnableSQLBinaryOpExprGroup,
+            SQLParserFeature.UseInsertColumnsCache,
             SQLParserFeature.OptimizedForParameterized
     };
 

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -576,5 +576,8 @@ public static interface Constants {
         long RR = fnv1a_64_lower("RR");
         long CS = fnv1a_64_lower("CS");
         long UR = fnv1a_64_lower("UR");
+
+        long INT4 = fnv1a_64_lower("INT4");
+        long VARBIT = fnv1a_64_lower("VARBIT");
     }
 }

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1243,7 +1243,7 @@ public DruidPooledConnection getConnectionDirect(long maxWaitMillis) throws SQLE
                 if (notFullTimeoutRetryCnt <= this.notFullTimeoutRetryCount && !isFull()) {
                     notFullTimeoutRetryCnt++;
                     if (LOG.isWarnEnabled()) {
-                        LOG.warn("not full timeout retry : " + notFullTimeoutRetryCnt);
+                        LOG.warn("get connection timeout retry : " + notFullTimeoutRetryCnt);
                     }
                     continue;
                 }

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestDataSourceBasic2.java
Patch:
@@ -57,7 +57,7 @@ public void test_0() throws Exception {
         dataSource.setConnectionInitSqls(Arrays.<Object> asList("SELECT 1", null, ""));
         assertEquals(1, dataSource.getConnectionInitSqls().size());
 
-        assertEquals(30 * 1000, dataSource.getTimeBetweenConnectErrorMillis());
+        assertEquals(500, dataSource.getTimeBetweenConnectErrorMillis());
         assertEquals(234, dataSource.getMaxOpenPreparedStatements());
         assertEquals(300, dataSource.getRemoveAbandonedTimeout());
         dataSource.setRemoveAbandonedTimeout(400);

File: src/test/java/com/alibaba/druid/bvt/bug/Issue1865.java
Patch:
@@ -35,7 +35,8 @@ public void test_for_select() throws Exception {
         assertEquals("SELECT *\n" +
                 "FROM t", stmt.toString());
         queryBlock.addCondition("id = 3");
-        assertEquals("DELETE FROM t\n" +
+        assertEquals("SELECT *\n" +
+                "FROM t\n" +
                 "WHERE id = 3", stmt.toString());
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -2956,7 +2956,7 @@ public SQLSelectItem parseSelectItem() {
         }
 
         SQLSelectItem selectItem = new SQLSelectItem(expr, alias, connectByRoot);
-        if (lexer.token == Token.HINT) {
+        if (lexer.token == Token.HINT && !lexer.isEnabled(SQLParserFeature.StrictForWall)) {
             String comment = "/*" + lexer.stringVal() + "*/";
             selectItem.addAfterComment(comment);
             lexer.nextToken();

File: src/main/java/com/alibaba/druid/sql/parser/SQLParserFeature.java
Patch:
@@ -21,7 +21,8 @@ public enum SQLParserFeature {
     EnableSQLBinaryOpExprGroup,
     OptimizedForParameterized,
     KeepComments,
-    SkipComments
+    SkipComments,
+    StrictForWall
     ;
 
     private SQLParserFeature(){

File: src/main/java/com/alibaba/druid/wall/spi/MySqlWallProvider.java
Patch:
@@ -39,7 +39,9 @@ public MySqlWallProvider(WallConfig config){
 
     @Override
     public SQLStatementParser createParser(String sql) {
-        return new MySqlStatementParser(sql, SQLParserFeature.EnableSQLBinaryOpExprGroup
+        return new MySqlStatementParser(sql
+                , SQLParserFeature.EnableSQLBinaryOpExprGroup
+                , SQLParserFeature.StrictForWall
         );
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -835,7 +835,7 @@ protected SQLExpr parseAny() {
         if (lexer.token == Token.LPAREN) {
             accept(Token.LPAREN);
 
-            if (lexer.token == Token.IDENTIFIER) {
+            if (lexer.token == Token.ARRAY || lexer.token == Token.IDENTIFIER) {
                 SQLExpr expr = this.expr();
                 SQLMethodInvokeExpr methodInvokeExpr = new SQLMethodInvokeExpr("ANY");
                 methodInvokeExpr.addParameter(expr);

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -479,7 +479,7 @@ public boolean visit(SQLBinaryOpExprGroup x) {
                     SQLExpr left = binaryItem.getLeft();
                     SQLExpr right = binaryItem.getRight();
 
-                    if (right instanceof SQLLiteralExpr) {
+                    if (right instanceof SQLLiteralExpr && !(right instanceof SQLNullExpr)) {
                         if (left instanceof SQLLiteralExpr) {
                             if (literalItems == null) {
                                 literalItems = new ArrayList<SQLBinaryOpExpr>();

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -568,6 +568,8 @@ public static interface Constants {
         long ENDS = fnv1a_64_lower("ENDS");
         long BINARY = fnv1a_64_lower("BINARY");
         long ISOPEN = fnv1a_64_lower("ISOPEN");
+        long CONFLICT = fnv1a_64_lower("CONFLICT");
+        long NOTHING = fnv1a_64_lower("NOTHING");
 
         long RS = fnv1a_64_lower("RS");
         long RR = fnv1a_64_lower("RR");

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -85,7 +85,7 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
     public final static boolean                        DEFAULT_TEST_ON_RETURN                    = false;
     public final static boolean                        DEFAULT_WHILE_IDLE                        = true;
     public static final long                           DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = 60 * 1000L;
-    public static final long                           DEFAULT_TIME_BETWEEN_CONNECT_ERROR_MILLIS = 30 * 1000;
+    public static final long                           DEFAULT_TIME_BETWEEN_CONNECT_ERROR_MILLIS = 500;
     public static final int                            DEFAULT_NUM_TESTS_PER_EVICTION_RUN        = 3;
 
     /**
@@ -189,7 +189,7 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
     protected final Date                               createdTime                               = new Date();
     protected Date                                     initedTime;
 
-    protected int                                      connectionErrorRetryAttempts              = 30;
+    protected int                                      connectionErrorRetryAttempts              = 1;
 
     protected boolean                                  breakAfterAcquireFailure                  = false;
 

File: src/main/java/com/alibaba/druid/stat/TableStat.java
Patch:
@@ -220,7 +220,7 @@ public boolean equals(Object o) {
         }
 
         public String toString() {
-            return this.name;
+            return SQLUtils.normalize(this.name);
         }
     }
 
@@ -545,10 +545,10 @@ public int hashCode() {
 
         public String toString() {
             if (table != null) {
-                return table + "." + name;
+                return SQLUtils.normalize(table) + "." + SQLUtils.normalize(name);
             }
 
-            return name;
+            return SQLUtils.normalize(name);
         }
 
         public boolean equals(Object obj) {

File: src/main/java/com/alibaba/druid/sql/dialect/hive/visitor/HiveOutputVisitor.java
Patch:
@@ -15,6 +15,9 @@
  */
 package com.alibaba.druid.sql.dialect.hive.visitor;
 
+import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
+import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
+import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.visitor.SQLASTOutputVisitor;
 
 import java.util.List;
@@ -31,5 +34,4 @@ public HiveOutputVisitor(Appendable appender, String dbType) {
     public HiveOutputVisitor(Appendable appender, boolean parameterized) {
         super(appender, parameterized);
     }
-
 }

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -50,7 +50,7 @@ public final class DruidConnectionHolder {
     private final List<ConnectionEventListener> connectionEventListeners = new CopyOnWriteArrayList<ConnectionEventListener>();
     private final List<StatementEventListener>  statementEventListeners  = new CopyOnWriteArrayList<StatementEventListener>();
     protected final long                        connectTimeMillis;
-    protected transient long                    lastActiveTimeMillis;
+    protected volatile long                     lastActiveTimeMillis;
     private long                                useCount                 = 0;
     private long                                keepAliveCheckCount      = 0;
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAggregateExpr.java
Patch:
@@ -248,7 +248,7 @@ public SQLDataType computeDataType() {
             }
         }
 
-        if (hash == FnvHash.Constants.WM_CONAT
+        if (hash == FnvHash.Constants.WM_CONCAT
                 || hash == FnvHash.Constants.GROUP_CONCAT) {
             return SQLCharExpr.DEFAULT_DATA_TYPE;
         }

File: src/main/java/com/alibaba/druid/sql/dialect/db2/parser/DB2SelectParser.java
Patch:
@@ -22,15 +22,18 @@
 import com.alibaba.druid.sql.dialect.db2.ast.stmt.DB2SelectQueryBlock;
 import com.alibaba.druid.sql.dialect.db2.ast.stmt.DB2SelectQueryBlock.Isolation;
 import com.alibaba.druid.sql.parser.*;
+import com.alibaba.druid.util.JdbcConstants;
 
 public class DB2SelectParser extends SQLSelectParser {
 
     public DB2SelectParser(SQLExprParser exprParser){
         super(exprParser);
+        dbType = JdbcConstants.DB2;
     }
 
     public DB2SelectParser(SQLExprParser exprParser, SQLSelectListCache selectListCache){
         super(exprParser, selectListCache);
+        dbType = JdbcConstants.DB2;
     }
 
     public DB2SelectParser(String sql){

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -84,7 +84,9 @@ public SQLSelect select() {
     }
 
     protected SQLUnionQuery createSQLUnionQuery() {
-        return new SQLUnionQuery();
+        SQLUnionQuery union = new SQLUnionQuery();
+        union.setDbType(getDbType());
+        return union;
     }
 
     public SQLUnionQuery unionRest(SQLUnionQuery union) {

File: src/test/java/com/alibaba/druid/bvt/sql/db2/DB2SelectTest_25_concat.java
Patch:
@@ -18,6 +18,7 @@
 import com.alibaba.druid.sql.DB2Test;
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLStatement;
+import com.alibaba.druid.sql.ast.statement.SQLSelectStatement;
 import com.alibaba.druid.sql.dialect.db2.parser.DB2StatementParser;
 import com.alibaba.druid.sql.dialect.db2.visitor.DB2SchemaStatVisitor;
 import com.alibaba.druid.stat.TableStat;
@@ -33,8 +34,8 @@ public void test_0() throws Exception {
 
         DB2StatementParser parser = new DB2StatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
-        SQLStatement stmt = statementList.get(0);
-        System.out.println(SQLUtils.toDB2String(stmt));
+        SQLSelectStatement stmt = (SQLSelectStatement) statementList.get(0);
+        System.out.println(stmt.getSelect().getQuery());
 
         Assert.assertEquals(1, statementList.size());
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -483,7 +483,7 @@ public MySqlCreateTableStatement parseCreateTable(boolean acceptCreate) {
                     }
 
                     accept(Token.LPAREN);
-                    clause.setExpr(this.exprParser.expr());
+                    this.exprParser.exprList(clause.getColumns(), clause);
                     accept(Token.RPAREN);
                     partitionClause = clause;
 
@@ -501,7 +501,7 @@ public MySqlCreateTableStatement parseCreateTable(boolean acceptCreate) {
 
                     if (lexer.token() == Token.LPAREN) {
                         lexer.nextToken();
-                        clause.setExpr(this.exprParser.expr());
+                        clause.addColumn(this.exprParser.expr());
                         accept(Token.RPAREN);
                     } else {
                         acceptIdentifier("COLUMNS");
@@ -576,7 +576,7 @@ protected SQLPartitionByRange partitionByRange() {
 
         if (lexer.token() == Token.LPAREN) {
             lexer.nextToken();
-            clause.setExpr(this.exprParser.expr());
+            clause.addColumn(this.exprParser.expr());
             accept(Token.RPAREN);
         } else {
             acceptIdentifier("COLUMNS");

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/transform/NameResolveVisitor.java
Patch:
@@ -51,7 +51,8 @@ public boolean visit(SQLIdentifierExpr x) {
         SQLTableSource tableSource = null;
 
         if (hash == FnvHash.Constants.LEVEL
-                || hash == FnvHash.Constants.CONNECT_BY_ISCYCLE) {
+                || hash == FnvHash.Constants.CONNECT_BY_ISCYCLE
+                || hash == FnvHash.Constants.SYSTIMESTAMP) {
             return false;
         }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleCreateTableParser.java
Patch:
@@ -333,7 +333,7 @@ protected SQLPartitionByList partitionByList() {
         SQLPartitionByList partitionByList = new SQLPartitionByList();
 
         accept(Token.LPAREN);
-        partitionByList.setExpr(this.exprParser.expr());
+        partitionByList.addColumn(this.exprParser.expr());
         accept(Token.RPAREN);
 
         this.getExprParser().parsePartitionByRest(partitionByList);

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -1731,7 +1731,7 @@ protected SQLPartitionByHash partitionByHash() {
         }
 
         accept(Token.LPAREN);
-        partitionByHash.setExpr(this.expr());
+        this.exprList(partitionByHash.getColumns(), partitionByHash);
         accept(Token.RPAREN);
         return partitionByHash;
     }

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -510,5 +510,7 @@ public static interface Constants {
         long NUMTODSINTERVAL = fnv1a_64_lower("NUMTODSINTERVAL");
 
         long LATERAL = fnv1a_64_lower("LATERAL");
+        long NONE = fnv1a_64_lower("NONE");
+        long PARTITIONING = fnv1a_64_lower("PARTITIONING");
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -52,6 +52,7 @@
 import com.alibaba.druid.sql.parser.SQLCreateTableParser;
 import com.alibaba.druid.sql.parser.SQLExprParser;
 import com.alibaba.druid.sql.parser.Token;
+import com.alibaba.druid.util.FnvHash;
 
 public class MySqlCreateTableParser extends SQLCreateTableParser {
 
@@ -795,7 +796,7 @@ protected SQLTableConstraint parseConstraint() {
             }
 
             // 5.5语法 USING BTREE 放在index 名字后
-            if (lexer.identifierEquals("USING")) {
+            if (lexer.identifierEquals(FnvHash.Constants.USING)) {
                 lexer.nextToken();
                 key.setIndexType(lexer.stringVal());
                 lexer.nextToken();
@@ -825,7 +826,7 @@ protected SQLTableConstraint parseConstraint() {
                 key.setName(name);
             }
 
-            if (lexer.identifierEquals("USING")) {
+            if (lexer.identifierEquals(FnvHash.Constants.USING)) {
                 lexer.nextToken();
                 key.setIndexType(lexer.stringVal());
                 lexer.nextToken();

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -110,6 +110,9 @@ public MySqlCreateTableStatement parseCreateTable(boolean acceptCreate) {
                 lexer.nextToken();
                 SQLName name = this.exprParser.name();
                 stmt.setLike(name);
+            } else if (lexer.token() == Token.SELECT) {
+                SQLSelect query = new MySqlSelectParser(this.exprParser).select();
+                stmt.setSelect(query);
             } else {
                 for (;;) {
                     if (lexer.token() == Token.IDENTIFIER //

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -484,10 +484,10 @@ public boolean visit(MySqlCreateTableStatement x) {
         }
 
         if (x.getSelect() != null) {
-            this.indentCount++;
+            println();
+            print0(ucase ? "AS" : "as");
             println();
             x.getSelect().accept(this);
-            this.indentCount--;
         }
 
         for (SQLCommentHint hint : x.getOptionHints()) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlSelectQueryBlock.java
Patch:
@@ -26,6 +26,7 @@
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleSelectQueryBlock;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+import com.alibaba.druid.util.JdbcConstants;
 import oracle.sql.SQLUtil;
 
 public class MySqlSelectQueryBlock extends SQLSelectQueryBlock implements MySqlObject {
@@ -42,7 +43,7 @@ public class MySqlSelectQueryBlock extends SQLSelectQueryBlock implements MySqlO
     private List<SQLCommentHint> hints;
 
     public MySqlSelectQueryBlock(){
-
+        dbType = JdbcConstants.MYSQL;
     }
 
     public MySqlSelectQueryBlock clone() {

File: src/main/java/com/alibaba/druid/sql/dialect/odps/ast/OdpsSelectQueryBlock.java
Patch:
@@ -28,6 +28,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.odps.visitor.OdpsASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+import com.alibaba.druid.util.JdbcConstants;
 
 public class OdpsSelectQueryBlock extends SQLSelectQueryBlock {
 
@@ -36,6 +37,8 @@ public class OdpsSelectQueryBlock extends SQLSelectQueryBlock {
     protected List<SQLHint> hints;
 
     public OdpsSelectQueryBlock(){
+        dbType = JdbcConstants.ODPS;
+
         distributeBy = new ArrayList<SQLExpr>();
         sortBy = new ArrayList<SQLSelectOrderByItem>(2);
     }
@@ -48,8 +51,6 @@ public void setOrderBy(SQLOrderBy orderBy) {
         this.orderBy = orderBy;
     }
 
-
-
     @Override
     public int hashCode() {
         final int prime = 31;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectQueryBlock.java
Patch:
@@ -31,6 +31,7 @@
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.ModelClause;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+import com.alibaba.druid.util.JdbcConstants;
 
 public class OracleSelectQueryBlock extends SQLSelectQueryBlock implements OracleSQLObject {
 
@@ -72,7 +73,7 @@ public OracleSelectQueryBlock clone() {
     }
 
     public OracleSelectQueryBlock(){
-
+        dbType = JdbcConstants.ORACLE;
     }
 
     public ModelClause getModelClause() {

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -60,7 +60,7 @@ public final class DruidConnectionHolder {
 
     private PreparedStatementPool               statementPool;
 
-    private final List<Statement>               statementTrace           = new ArrayList<Statement>(2);
+    protected final List<Statement>             statementTrace           = new ArrayList<Statement>(2);
 
     private final boolean                       defaultReadOnly;
     private final int                           defaultHoldability;

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -4885,8 +4885,9 @@ public boolean visit(MergeUpdateClause x) {
     public boolean visit(MergeInsertClause x) {
         print0(ucase ? "WHEN NOT MATCHED THEN INSERT" : "when not matched then insert");
         if (x.getColumns().size() > 0) {
-            print(' ');
+            print(" (");
             printAndAccept(x.getColumns(), ", ");
+            print(')');
         }
         print0(ucase ? " VALUES (" : " values (");
         printAndAccept(x.getValues(), ", ");

File: src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest_comment.java
Patch:
@@ -51,7 +51,8 @@ public void test_false() throws Exception {
         Assert.assertTrue(provider.checkValid("-- this is comment \n SELECT * FROM t"));
         Assert.assertTrue(provider.checkValid("#this is comment \n SELECT * FROM t"));
         
-        Assert.assertFalse(provider.checkValid("/*!40101fff*/ select * from t"));
+        Assert.assertTrue(provider.checkValid("/*!40101fff*/ select * from t"));
+        Assert.assertFalse(provider.checkValid("select * from t/*!40101fff*/"));
 
         Assert.assertTrue(provider.checkValid("SELECT * FROM t where a=1 #this is comment \n and b=1"));
         Assert.assertTrue(provider.checkValid("SELECT * FROM t where a=1 -- this is comment \n and c=1"));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleGrantTest_5.java
Patch:
@@ -18,11 +18,8 @@
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLStatement;
-import com.alibaba.druid.sql.dialect.oracle.parser.OracleStatementParser;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleSchemaStatVisitor;
 import com.alibaba.druid.sql.visitor.SchemaStatVisitor;
 import com.alibaba.druid.util.JdbcConstants;
-import jdk.nashorn.internal.scripts.JD;
 import org.junit.Assert;
 
 import java.util.List;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectQueryBlock.java
Patch:
@@ -27,11 +27,12 @@
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
+import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObject;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.ModelClause;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class OracleSelectQueryBlock extends SQLSelectQueryBlock {
+public class OracleSelectQueryBlock extends SQLSelectQueryBlock implements OracleSQLObject {
 
     private List<SQLCommentHint>       hints;
 
@@ -115,7 +116,7 @@ protected void accept0(SQLASTVisitor visitor) {
         super.accept0(visitor);
     }
 
-    protected void accept0(OracleASTVisitor visitor) {
+    public void accept0(OracleASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, this.hints);
             acceptChild(visitor, this.selectList);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -597,10 +597,12 @@ public boolean parseStatementListDialect(List<SQLStatement> statementList) {
                     stmt.setLockType(LockType.READ);
                 }
             } else if (lexer.identifierEquals(WRITE)) {
+                lexer.nextToken();
                 stmt.setLockType(LockType.WRITE);
             } else if (lexer.identifierEquals(FnvHash.Constants.LOW_PRIORITY)) {
                 lexer.nextToken();
                 acceptIdentifier(WRITE);
+                lexer.nextToken();
                 stmt.setLockType(LockType.LOW_PRIORITY_WRITE);
             } else {
                 throw new ParserException("syntax error, expect READ or WRITE, actual " + lexer.token() + ", " + lexer.info());

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -453,7 +453,7 @@ private final void internalAfterStatementExecute(StatementProxy statement, boole
             sqlStat.decrementRunningCount();
             sqlStat.addExecuteTime(statement.getLastExecuteType(), firstResult, nanos);
             statement.setLastExecuteTimeNano(nanos);
-            if ((!statement.isFirstResultSet()) && statement.getLastExecuteType() == StatementExecuteType.Execute) {
+            if ((!firstResult) && statement.getLastExecuteType() == StatementExecuteType.Execute) {
                 try {
                     int updateCount = statement.getUpdateCount();
                     sqlStat.addUpdateCount(updateCount);

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -68,6 +68,9 @@ public interface JdbcConstants {
     public static final String KINGBASE          = "kingbase";
     public static final String KINGBASE_DRIVER   = "com.kingbase.Driver";
 
+    public static final String GBASE             = "gbase";
+    public static final String GBASE_DRIVER      = "com.gbase.jdbc.Driver";
+
     public static final String OCEANBASE         = "oceanbase";
     public static final String OCEANBASE_DRIVER  = "com.mysql.jdbc.Driver";
 

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -1117,7 +1117,7 @@ protected final void scanAlias() {
                     }
                     if (i > 0) {
                         char ch_last = charAt(i - 1);
-                        if (ch_last == '"' || ch_last == '\'') {
+                        if (ch_last == '\'') {
                             hasSpecial = true;
                             continue;
                         }

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -463,6 +463,7 @@ public SQLExpr primary() {
             case DO:
             case GROUP:
             case MOD:
+            case CONCAT:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/support/profile/ProfileEntryStat.java
Patch:
@@ -36,7 +36,7 @@ public ProfileEntryStatValue getValue(boolean reset) {
         ProfileEntryStatValue val = new ProfileEntryStatValue();
 
         val.setExecuteCount(get(this, executeCountUpdater, reset));
-        val.setExecuteTimeNanos(get(this, executeCountUpdater, reset));
+        val.setExecuteTimeNanos(get(this, executeTimeNanosUpdater, reset));
 
         return val;
     }

File: src/main/java/com/alibaba/druid/sql/ast/SQLKeep.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLKeep extends SQLObjectImpl {
+public final class SQLKeep extends SQLObjectImpl {
 
     protected DenseRank  denseRank;
 

File: src/main/java/com/alibaba/druid/sql/ast/SQLLimit.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Created by wenshao on 16/9/25.
  */
-public class SQLLimit extends SQLObjectImpl {
+public final class SQLLimit extends SQLObjectImpl {
 
     public SQLLimit() {
 

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class SQLOrderBy extends SQLObjectImpl {
+public final class SQLOrderBy extends SQLObjectImpl {
 
     protected final List<SQLSelectOrderByItem> items = new ArrayList<SQLSelectOrderByItem>();
     

File: src/main/java/com/alibaba/druid/sql/ast/SQLParameter.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class SQLParameter extends SQLObjectImpl implements SQLObjectWithDataType {
+public final class SQLParameter extends SQLObjectImpl implements SQLObjectWithDataType {
 
     private SQLName       name;
     private SQLDataType   dataType;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllColumnExpr.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLAllColumnExpr extends SQLExprImpl {
+public final class SQLAllColumnExpr extends SQLExprImpl {
     private transient SQLTableSource resolvedTableSource;
 
     public SQLAllColumnExpr(){

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllExpr.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLAllExpr extends SQLExprImpl {
+public final class SQLAllExpr extends SQLExprImpl {
 
     public SQLSelect subQuery;
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBooleanExpr.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLCharacterDataType;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLBooleanExpr extends SQLExprImpl implements SQLExpr, SQLLiteralExpr, SQLValuableExpr {
+public final class SQLBooleanExpr extends SQLExprImpl implements SQLExpr, SQLLiteralExpr, SQLValuableExpr {
     public static final SQLDataType DEFAULT_DATA_TYPE = new SQLCharacterDataType("boolean");
 
     private boolean value;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLExistsExpr.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLExistsExpr extends SQLExprImpl implements Serializable {
+public final class SQLExistsExpr extends SQLExprImpl implements Serializable {
 
     private static final long serialVersionUID = 1L;
     public boolean            not              = false;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIdentifierExpr.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.FnvHash;
 
-public class SQLIdentifierExpr extends SQLExprImpl implements SQLName {
+public final class SQLIdentifierExpr extends SQLExprImpl implements SQLName {
     protected String    name;
     private   long      hashCode64;
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInListExpr.java
Patch:
@@ -24,7 +24,7 @@
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLInListExpr extends SQLExprImpl implements Serializable {
+public final class SQLInListExpr extends SQLExprImpl implements Serializable {
 
     private static final long serialVersionUID = 1L;
     private boolean           not              = false;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNotExpr.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.sql.ast.SQLExprImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLNotExpr extends SQLExprImpl implements Serializable {
+public final class SQLNotExpr extends SQLExprImpl implements Serializable {
 
     private static final long serialVersionUID = 1L;
     public SQLExpr            expr;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNullExpr.java
Patch:
@@ -20,7 +20,7 @@
 
 import static com.alibaba.druid.sql.visitor.SQLEvalVisitor.EVAL_VALUE_NULL;
 
-public class SQLNullExpr extends SQLExprImpl implements SQLLiteralExpr, SQLValuableExpr {
+public final class SQLNullExpr extends SQLExprImpl implements SQLLiteralExpr, SQLValuableExpr {
 
     public SQLNullExpr(){
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLPropertyExpr.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 import com.alibaba.druid.util.FnvHash;
 
-public class SQLPropertyExpr extends SQLExprImpl implements SQLName {
+public final class SQLPropertyExpr extends SQLExprImpl implements SQLName {
     private   SQLExpr             owner;
     private   String              name;
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLSomeExpr.java
Patch:
@@ -24,7 +24,7 @@
 
 import java.util.List;
 
-public class SQLSomeExpr extends SQLExprImpl {
+public final class SQLSomeExpr extends SQLExprImpl {
 
     public SQLSelect subQuery;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectOrderByItem.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.ast.SQLReplaceable;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLSelectOrderByItem extends SQLObjectImpl implements SQLReplaceable {
+public final class SQLSelectOrderByItem extends SQLObjectImpl implements SQLReplaceable {
 
     protected SQLExpr                  expr;
     protected String                   collate;

File: src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -18,6 +18,7 @@
 import com.alibaba.druid.sql.dialect.db2.parser.DB2ExprParser;
 import com.alibaba.druid.sql.dialect.db2.parser.DB2Lexer;
 import com.alibaba.druid.sql.dialect.db2.parser.DB2StatementParser;
+import com.alibaba.druid.sql.dialect.h2.parser.H2StatementParser;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlExprParser;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlLexer;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
@@ -85,7 +86,7 @@ public static SQLStatementParser createSQLStatementParser(String sql, String dbT
         }
 
         if (JdbcUtils.H2.equals(dbType)) {
-            return new MySqlStatementParser(sql);
+            return new H2StatementParser(sql);
         }
         
         if (JdbcUtils.DB2.equals(dbType)) {

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -2181,7 +2181,7 @@ public static boolean check(WallVisitor visitor, SQLExprTableSource x) {
                         tableStat.incrementDeleteCount();
                     } else if (parent instanceof SQLUpdateStatement) {
                         tableStat.incrementUpdateCount();
-                    } else if (parent instanceof MySqlReplaceStatement) {
+                    } else if (parent instanceof SQLReplaceStatement) {
                         tableStat.incrementReplaceCount();
                     }
                 }
@@ -2512,7 +2512,7 @@ public static void preVisitCheck(WallVisitor visitor, SQLObject x) {
             allow = config.isSetAllow();
             denyMessage = "set not allow";
             errorCode = ErrorCode.SET_NOT_ALLOW;
-        } else if (x instanceof MySqlReplaceStatement) {
+        } else if (x instanceof SQLReplaceStatement) {
             allow = config.isReplaceAllow();
             denyMessage = "replace not allow";
             errorCode = ErrorCode.REPLACE_NOT_ALLOW;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlASTVisitorAdapterTest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.druid.sql.ast.expr.SQLBinaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBooleanExpr;
+import com.alibaba.druid.sql.ast.statement.SQLReplaceStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlForceIndexHint;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlIgnoreIndexHint;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlKey;
@@ -32,7 +33,6 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlPartitionByKey;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlPrepareStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlRenameTableStatement;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlReplaceStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlResetStatement;
 import com.alibaba.druid.sql.ast.SQLLimit;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlSetTransactionStatement;
@@ -102,7 +102,7 @@ public void test_adapter() throws Exception {
         new MySqlDeleteStatement().accept(adapter);
         new MySqlInsertStatement().accept(adapter);
         new MySqlLoadXmlStatement().accept(adapter);
-        new MySqlReplaceStatement().accept(adapter);
+        new SQLReplaceStatement().accept(adapter);
         new SQLStartTransactionStatement().accept(adapter);
         new MySqlShowColumnsStatement().accept(adapter);
         new MySqlShowDatabasesStatement().accept(adapter);

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/ParseUtil.java
Patch:
@@ -4,7 +4,6 @@
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.statement.*;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlReplaceStatement;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlSchemaStatVisitor;
 import com.alibaba.druid.sql.visitor.ParameterizedOutputVisitorUtils;
@@ -43,7 +42,7 @@ public static boolean isDmlSQL(SQLStatement statement /*String querySql*/) {
         //  return DML_1_PATTERN.matcher(querySql).find() || DML_2_PATTERN.matcher(querySql).find();
         return statement instanceof SQLSelectStatement ||
                 statement instanceof SQLInsertStatement ||
-                statement instanceof MySqlReplaceStatement ||
+                statement instanceof SQLReplaceStatement ||
                 statement instanceof SQLUpdateStatement ||
                 statement instanceof SQLDeleteStatement;
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/create/OracleCreateTriggerTest.java
Patch:
@@ -64,7 +64,7 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(0, visitor.getTables().size());
+        Assert.assertEquals(1, visitor.getTables().size());
 
         // Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/create/OracleCreateTriggerTest2.java
Patch:
@@ -67,7 +67,7 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(0, visitor.getTables().size());
+        Assert.assertEquals(1, visitor.getTables().size());
 
         // Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/create/OracleCreateTriggerTest3.java
Patch:
@@ -59,7 +59,7 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(0, visitor.getTables().size());
+        Assert.assertEquals(1, visitor.getTables().size());
 
         // Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/select/OracleSelectTest82_wmsysconcat.java
Patch:
@@ -83,6 +83,9 @@ public void test_0() throws Exception {
         assertEquals(1, visitor.getRelationships().size());
         assertEquals(0, visitor.getOrderByColumns().size());
 
+        Assert.assertTrue(visitor.containsTable("sup_registration"));
+        Assert.assertTrue(visitor.containsTable("sup_task"));
+        Assert.assertTrue(visitor.containsTable("sys_org"));
 
          Assert.assertTrue(visitor.containsColumn("sup_task", "orgid"));
          Assert.assertTrue(visitor.containsColumn("sup_task", "orgid"));

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -19,7 +19,7 @@ public final class VERSION {
 
     public final static int MajorVersion    = 1;
     public final static int MinorVersion    = 1;
-    public final static int RevisionVersion = 2;
+    public final static int RevisionVersion = 3;
 
     public static String getVersionNumber() {
         return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion;

File: src/main/java/com/alibaba/druid/util/FnvHash.java
Patch:
@@ -51,7 +51,7 @@ public static long fnv1a_64(char[] chars) {
     }
 
     /**
-     * lower & normalized & fnv_1a_64
+     * lower and normalized and fnv_1a_64
      * @param name
      * @return
      */
@@ -184,7 +184,7 @@ public static long[] fnv1a_64_lower(String[] strings, boolean sort) {
     }
 
     /**
-     * normalized & lower & fnv1a_64_hash
+     * normalized and lower and fnv1a_64_hash
      * @param owner
      * @param name
      * @return

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -2097,7 +2097,7 @@ public void endVisit(OraclePrimaryKey x) {
 
     @Override
     public boolean visit(OracleCreateTableStatement x) {
-        printCreateTable(x);
+        printCreateTable(x, false);
 
         if (x.getOf() != null) {
             println();

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2367,12 +2367,12 @@ protected void printTableElements(List<SQLTableElement> tableElementList) {
     }
 
     public boolean visit(SQLCreateTableStatement x) {
-        printCreateTable(x);
+        printCreateTable(x, true);
 
         return false;
     }
 
-    protected void printCreateTable(SQLCreateTableStatement x) {
+    protected void printCreateTable(SQLCreateTableStatement x, boolean printSelect) {
         print0(ucase ? "CREATE " : "create ");
 
         final SQLCreateTableStatement.Type tableType = x.getType();
@@ -2394,7 +2394,7 @@ protected void printCreateTable(SQLCreateTableStatement x) {
         }
 
         SQLSelect select = x.getSelect();
-        if (select != null) {
+        if (printSelect && select != null) {
             println();
             print0(ucase ? "AS" : "as");
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -18,7 +18,6 @@
 import com.alibaba.druid.sql.dialect.db2.parser.DB2ExprParser;
 import com.alibaba.druid.sql.dialect.db2.parser.DB2Lexer;
 import com.alibaba.druid.sql.dialect.db2.parser.DB2StatementParser;
-import com.alibaba.druid.sql.dialect.h2.parser.H2StatementParser;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlExprParser;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlLexer;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -141,6 +141,7 @@ protected String as() {
                 case DEFERRED:
                 case OUTER:
                 case DO:
+                case STORE:
                     alias = lexer.stringVal();
                     lexer.nextToken();
                     break;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -50,6 +50,7 @@ public class MySqlLexer extends Lexer {
         map.put("BEGIN", Token.BEGIN);
         map.put("END", Token.END);
         map.put("DIV", Token.DIV);
+        map.put("MERGE", Token.MERGE);
         
         // for oceanbase & mysql 5.7
         map.put("PARTITION", Token.PARTITION);

File: src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -18,6 +18,7 @@
 import com.alibaba.druid.sql.dialect.db2.parser.DB2ExprParser;
 import com.alibaba.druid.sql.dialect.db2.parser.DB2Lexer;
 import com.alibaba.druid.sql.dialect.db2.parser.DB2StatementParser;
+import com.alibaba.druid.sql.dialect.h2.parser.H2StatementParser;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlExprParser;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlLexer;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterDatabaseStatement.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLAlterDatabaseStatement extends SQLStatementImpl {
+public class SQLAlterDatabaseStatement extends SQLStatementImpl implements SQLAlterStatement {
 
     private SQLName name;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableStatement.java
Patch:
@@ -28,7 +28,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLAlterTableStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLAlterTableStatement extends SQLStatementImpl implements SQLDDLStatement, SQLAlterStatement {
 
     private SQLExprTableSource      tableSource;
     private List<SQLAlterTableItem> items                   = new ArrayList<SQLAlterTableItem>();

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterViewRenameStatement.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLAlterViewRenameStatement extends SQLStatementImpl {
+public class SQLAlterViewRenameStatement extends SQLStatementImpl implements SQLAlterStatement {
 
     private SQLName name;
     private SQLName to;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateDatabaseStatement.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLCreateDatabaseStatement extends SQLStatementImpl {
+public class SQLCreateDatabaseStatement extends SQLStatementImpl implements SQLCreateStatement {
 
     private SQLName              name;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateFunctionStatement.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * Created by wenshao on 23/05/2017.
  */
-public class SQLCreateFunctionStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLCreateFunctionStatement extends SQLStatementImpl implements SQLCreateStatement {
     private SQLName definer;
 
     private boolean            create     = true;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateIndexStatement.java
Patch:
@@ -25,7 +25,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLCreateIndexStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLCreateIndexStatement extends SQLStatementImpl implements SQLCreateStatement {
 
     private SQLName                    name;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateMaterializedViewStatement.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * Created by wenshao on 30/06/2017.
  */
-public class SQLCreateMaterializedViewStatement extends SQLStatementImpl implements OracleSegmentAttributes {
+public class SQLCreateMaterializedViewStatement extends SQLStatementImpl implements OracleSegmentAttributes, SQLCreateStatement {
     private SQLName name;
     private List<SQLName> columns = new ArrayList<SQLName>();
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateProcedureStatement.java
Patch:
@@ -24,7 +24,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLCreateProcedureStatement extends SQLStatementImpl {
+public class SQLCreateProcedureStatement extends SQLStatementImpl implements SQLCreateStatement {
 
     private SQLName            definer;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateSequenceStatement.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Created by wenshao on 16/9/14.
  */
-public class SQLCreateSequenceStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLCreateSequenceStatement extends SQLStatementImpl implements SQLCreateStatement {
     private SQLName name;
 
     private SQLExpr startWith;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTableStatement.java
Patch:
@@ -31,7 +31,7 @@
 import com.alibaba.druid.util.ListDG;
 import com.alibaba.druid.util.lang.Consumer;
 
-public class SQLCreateTableStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLCreateTableStatement extends SQLStatementImpl implements SQLDDLStatement, SQLCreateStatement {
 
     protected boolean               ifNotExiists = false;
     protected Type                  type;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTriggerStatement.java
Patch:
@@ -23,7 +23,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLCreateTriggerStatement extends SQLStatementImpl {
+public class SQLCreateTriggerStatement extends SQLStatementImpl implements SQLCreateStatement {
 
     private SQLName                  name;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateViewStatement.java
Patch:
@@ -29,7 +29,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLCreateViewStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLCreateViewStatement extends SQLStatementImpl implements SQLCreateStatement {
 
     private boolean     orReplace   = false;
     private boolean     force       = false;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropDatabaseStatement.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLDropDatabaseStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLDropDatabaseStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLExpr database;
     private boolean ifExists;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropFunctionStatement.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLDropFunctionStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLDropFunctionStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;
     private boolean ifExists;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropIndexStatement.java
Patch:
@@ -20,7 +20,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLDropIndexStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLDropIndexStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName            indexName;
     private SQLExprTableSource tableName;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropProcedureStatement.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLDropProcedureStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLDropProcedureStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;
     private boolean ifExists;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropSequenceStatement.java
Patch:
@@ -20,7 +20,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLDropSequenceStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLDropSequenceStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;
     private boolean ifExists;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableSpaceStatement.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLDropTableSpaceStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLDropTableSpaceStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;
     private boolean ifExists;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableStatement.java
Patch:
@@ -24,7 +24,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLPropertyExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLDropTableStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLDropTableStatement extends SQLStatementImpl implements SQLDropStatement {
     private List<SQLCommentHint> hints;
 
     protected List<SQLExprTableSource> tableSources = new ArrayList<SQLExprTableSource>();

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTriggerStatement.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLDropTriggerStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLDropTriggerStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private SQLName name;
     private boolean ifExists;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropUserStatement.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLDropUserStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLDropUserStatement extends SQLStatementImpl implements SQLDropStatement {
 
     private List<SQLExpr> users = new ArrayList<SQLExpr>(2);
     

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropViewStatement.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLDropViewStatement extends SQLStatementImpl implements SQLDDLStatement {
+public class SQLDropViewStatement extends SQLStatementImpl implements SQLDropStatement {
 
     protected List<SQLExprTableSource> tableSources = new ArrayList<SQLExprTableSource>();
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlAlterUserStatement.java
Patch:
@@ -19,9 +19,10 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.statement.SQLAlterStatement;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-public class MySqlAlterUserStatement extends MySqlStatementImpl {
+public class MySqlAlterUserStatement extends MySqlStatementImpl implements SQLAlterStatement {
 
     private final List<SQLExpr> users = new ArrayList<SQLExpr>();
     

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlCreateUserStatement.java
Patch:
@@ -19,10 +19,11 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.statement.SQLCreateStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 
-public class MySqlCreateUserStatement extends MySqlStatementImpl {
+public class MySqlCreateUserStatement extends MySqlStatementImpl implements SQLCreateStatement {
 
     private List<UserSpecification> users = new ArrayList<UserSpecification>(2);
 

File: src/main/java/com/alibaba/druid/sql/dialect/odps/ast/OdpsAddStatisticStatement.java
Patch:
@@ -16,10 +16,11 @@
 package com.alibaba.druid.sql.dialect.odps.ast;
 
 import com.alibaba.druid.sql.ast.SQLName;
+import com.alibaba.druid.sql.ast.statement.SQLAlterStatement;
 import com.alibaba.druid.sql.ast.statement.SQLExprTableSource;
 import com.alibaba.druid.sql.dialect.odps.visitor.OdpsASTVisitor;
 
-public class OdpsAddStatisticStatement extends OdpsStatementImpl {
+public class OdpsAddStatisticStatement extends OdpsStatementImpl implements SQLAlterStatement {
 
     private SQLExprTableSource table;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterIndexStatement.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleAlterIndexStatement extends OracleStatementImpl {
+public class OracleAlterIndexStatement extends OracleStatementImpl implements OracleAlterStatement {
 
     private SQLName name;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterProcedureStatement.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleAlterProcedureStatement extends OracleStatementImpl {
+public class OracleAlterProcedureStatement extends OracleStatementImpl implements OracleAlterStatement {
 
     private SQLExpr name;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterSessionStatement.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleAlterSessionStatement extends OracleStatementImpl {
+public class OracleAlterSessionStatement extends OracleStatementImpl implements OracleAlterStatement {
 
     private List<SQLAssignItem> items = new ArrayList<SQLAssignItem>();
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterSynonymStatement.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleAlterSynonymStatement extends OracleStatementImpl {
+public class OracleAlterSynonymStatement extends OracleStatementImpl implements OracleAlterStatement {
 
     private SQLName name;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterTablespaceStatement.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleAlterTablespaceStatement extends OracleStatementImpl {
+public class OracleAlterTablespaceStatement extends OracleStatementImpl implements OracleAlterStatement {
 
     private SQLName                   name;
     private OracleAlterTablespaceItem item;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterTriggerStatement.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleAlterTriggerStatement extends OracleStatementImpl {
+public class OracleAlterTriggerStatement extends OracleStatementImpl implements OracleAlterStatement {
 
     private SQLName name;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleAlterViewStatement.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleAlterViewStatement extends OracleStatementImpl {
+public class OracleAlterViewStatement extends OracleStatementImpl implements OracleAlterStatement {
 
     private SQLName name;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleCreateDatabaseDbLinkStatement.java
Patch:
@@ -17,9 +17,10 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
+import com.alibaba.druid.sql.ast.statement.SQLCreateStatement;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleCreateDatabaseDbLinkStatement extends OracleStatementImpl {
+public class OracleCreateDatabaseDbLinkStatement extends OracleStatementImpl implements SQLCreateStatement {
 
     private boolean shared;
     private boolean _public;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleCreateIndexStatement.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.alibaba.druid.sql.ast.*;
 import com.alibaba.druid.sql.ast.statement.SQLCreateIndexStatement;
+import com.alibaba.druid.sql.ast.statement.SQLCreateStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSegmentAttributes;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
@@ -25,7 +26,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-public class OracleCreateIndexStatement extends SQLCreateIndexStatement implements OracleDDLStatement, OracleSegmentAttributes {
+public class OracleCreateIndexStatement extends SQLCreateIndexStatement implements OracleDDLStatement, OracleSegmentAttributes, SQLCreateStatement {
 
     private boolean online            = false;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleCreatePackageStatement.java
Patch:
@@ -17,6 +17,7 @@
 
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLStatement;
+import com.alibaba.druid.sql.ast.statement.SQLCreateStatement;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.util.JdbcConstants;
 import org.apache.ibatis.jdbc.SQL;
@@ -27,7 +28,7 @@
 /**
  * Created by wenshao on 23/05/2017.
  */
-public class OracleCreatePackageStatement extends OracleStatementImpl {
+public class OracleCreatePackageStatement extends OracleStatementImpl implements SQLCreateStatement {
     private boolean            orReplace;
     private SQLName name;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleCreateSynonymStatement.java
Patch:
@@ -1,9 +1,10 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
 import com.alibaba.druid.sql.ast.SQLName;
+import com.alibaba.druid.sql.ast.statement.SQLCreateStatement;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleCreateSynonymStatement extends OracleStatementImpl {
+public class OracleCreateSynonymStatement extends OracleStatementImpl implements SQLCreateStatement {
     private boolean orReplace;
     private SQLName name;
     private boolean isPublic;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleDropDbLinkStatement.java
Patch:
@@ -16,9 +16,10 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
 import com.alibaba.druid.sql.ast.SQLName;
+import com.alibaba.druid.sql.ast.statement.SQLDropStatement;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleDropDbLinkStatement extends OracleStatementImpl {
+public class OracleDropDbLinkStatement extends OracleStatementImpl implements SQLDropStatement {
 
     private boolean isPublic;
 

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -63,6 +63,7 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlShowStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlUpdateStatement;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
+import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterIndexStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMultiInsertStatement;
 import com.alibaba.druid.sql.dialect.postgresql.ast.stmt.PGShowStatement;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerExecStatement;
@@ -2502,7 +2503,7 @@ public static void preVisitCheck(WallVisitor visitor, SQLObject x) {
             allow = config.isCreateTableAllow();
             denyMessage = "create table not allow";
             errorCode = ErrorCode.CREATE_TABLE_NOT_ALLOW;
-        } else if (x instanceof SQLAlterTableStatement) {
+        } else if (x instanceof SQLAlterTableStatement || x instanceof OracleAlterIndexStatement) {
             allow = config.isAlterTableAllow();
             denyMessage = "alter table not allow";
             errorCode = ErrorCode.ALTER_TABLE_NOT_ALLOW;

File: src/main/java/com/alibaba/druid/filter/FilterManager.java
Patch:
@@ -112,6 +112,9 @@ public static void loadFilter(List<Filter> filters, String filterName) throws SQ
 
                 try {
                     filter = (Filter) filterClass.newInstance();
+                } catch (ClassCastException e) {
+                    LOG.error("load filter error.", e);
+                    continue;
                 } catch (InstantiationException e) {
                     throw new SQLException("load managed jdbc driver event listener error. " + filterName, e);
                 } catch (IllegalAccessException e) {

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -47,7 +47,7 @@ public interface JdbcConstants {
     public static final String MYSQL             = "mysql";
     public static final String MYSQL_DRIVER      = "com.mysql.jdbc.Driver";
     public static final String MYSQL_DRIVER_6    = "com.mysql.cj.jdbc.Driver";
-    public static final String MYSQL_DRIVER_REPLICATE = "com.mysql.jdbc.ReplicationDriver";
+    public static final String MYSQL_DRIVER_REPLICATE = "com.mysql.jdbc.";
 
     public static final String MARIADB           = "mariadb";
     public static final String MARIADB_DRIVER    = "org.mariadb.jdbc.Driver";

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -47,6 +47,7 @@ public interface JdbcConstants {
     public static final String MYSQL             = "mysql";
     public static final String MYSQL_DRIVER      = "com.mysql.jdbc.Driver";
     public static final String MYSQL_DRIVER_6    = "com.mysql.cj.jdbc.Driver";
+    public static final String MYSQL_DRIVER_REPLICATE = "com.mysql.jdbc.ReplicationDriver";
 
     public static final String MARIADB           = "mariadb";
     public static final String MARIADB_DRIVER    = "org.mariadb.jdbc.Driver";

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -241,7 +241,7 @@ public MySqlCreateTableStatement parseCrateTable(boolean acceptCreate) {
                 if (lexer.token() == Token.EQ) {
                     lexer.nextToken();
                 }
-                stmt.getTableOptions().put("COMMENT", this.exprParser.expr());
+                stmt.setComment(this.exprParser.expr());
                 continue;
             }
 

File: src/main/java/com/alibaba/druid/sql/repository/SchemaRepository.java
Patch:
@@ -849,7 +849,7 @@ boolean acceptCreateTable(SQLCreateTableStatement x) {
             }
         }
 
-        x.setSchema(null);
+        x1.setSchema(null);
 
         String name = x1.computeName();
         SchemaObject table = schema.findTableOrView(name);

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest14.java
Patch:
@@ -53,7 +53,7 @@ public void test_0() throws Exception {
                 + "\n\tPRIMARY KEY (`ID`),"
                 + "\n\tKEY `quizId` USING BTREE (`QuizID`),"
                 + "\n\tKEY `optionId` USING BTREE (`OptionID`)"
-                + "\n) ENGINE = InnoDB CHARSET = gbk COMMENT = ''", //
+                + "\n) ENGINE = InnoDB CHARSET = gbk COMMENT ''", //
                             SQLUtils.toMySqlString(stmt));
         Assert.assertEquals("create table `OptionList` ("
                 + "\n\t`ID` int(11) not null auto_increment,"
@@ -64,7 +64,7 @@ public void test_0() throws Exception {
                 + "\n\tprimary key (`ID`),"
                 + "\n\tkey `quizId` using BTREE (`QuizID`),"
                 + "\n\tkey `optionId` using BTREE (`OptionID`)"
-                + "\n) engine = InnoDB charset = gbk comment = ''", //
+                + "\n) engine = InnoDB charset = gbk comment ''", //
                             SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
 
         Assert.assertEquals(1, statementList.size());

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest50.java
Patch:
@@ -53,7 +53,7 @@ public void test_0() throws Exception {
         Assert.assertEquals("CREATE TABLE `test`.`a` (" //
                             + "\n\t`ida` INT NOT NULL COMMENT 'aaa',"//
                             + "\n\tPRIMARY KEY (`ida`)"//
-                            + "\n) COMMENT = 'bb'",//
+                            + "\n) COMMENT 'bb'",//
                             output);
 
     }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest52.java
Patch:
@@ -64,6 +64,6 @@ public void test_0() throws Exception {
     +"\n\t`create_time` datetime NOT NULL COMMENT '授权时间',"//
     +"\n\t`invalid_time` datetime NOT NULL COMMENT '授权失效时间',"//
     +"\n\tPRIMARY KEY (`auth_id`)"
-    +"\n) ENGINE = InnoDB CHARSET = utf8 COLLATE utf8_bin COMMENT = 'INS_EBAY_AUTH'", output);
+    +"\n) ENGINE = InnoDB CHARSET = utf8 COLLATE utf8_bin COMMENT 'INS_EBAY_AUTH'", output);
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest53.java
Patch:
@@ -66,7 +66,7 @@ public void test_primary_key_using_btree() throws Exception {
     +"\n\t`create_time` datetime NOT NULL COMMENT '授权时间',"//
     +"\n\t`invalid_time` datetime NOT NULL COMMENT '授权失效时间',"//
     +"\n\tPRIMARY KEY USING BTREE (`auth_id`)"
-    +"\n) ENGINE = InnoDB CHARSET = utf8 COLLATE utf8_bin COMMENT = 'INS_EBAY_AUTH'", output);
+    +"\n) ENGINE = InnoDB CHARSET = utf8 COLLATE utf8_bin COMMENT 'INS_EBAY_AUTH'", output);
     }
     
     @Test
@@ -109,7 +109,7 @@ public void test_index_using_btree() throws Exception {
     +"\n\t`invalid_time` datetime NOT NULL COMMENT '授权失效时间',"//
     +"\n\tPRIMARY KEY USING BTREE (`auth_id`),"
     +"\n\tINDEX `ind_usr_id` USING BTREE(`usr_id`)"
-    +"\n) ENGINE = InnoDB CHARSET = utf8 COLLATE utf8_bin COMMENT = 'INS_EBAY_AUTH'", output);
+    +"\n) ENGINE = InnoDB CHARSET = utf8 COLLATE utf8_bin COMMENT 'INS_EBAY_AUTH'", output);
     }
     
     @Test
@@ -152,6 +152,6 @@ public void test_key_using_btree() throws Exception {
     +"\n\t`invalid_time` datetime NOT NULL COMMENT '授权失效时间',"//
     +"\n\tPRIMARY KEY USING BTREE (`auth_id`),"
     +"\n\tKEY `ind_usr_id` USING BTREE (`usr_id`)"
-    +"\n) ENGINE = InnoDB CHARSET = utf8 COLLATE utf8_bin COMMENT = 'INS_EBAY_AUTH'", output);
+    +"\n) ENGINE = InnoDB CHARSET = utf8 COLLATE utf8_bin COMMENT 'INS_EBAY_AUTH'", output);
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest71.java
Patch:
@@ -51,7 +51,7 @@ public void test_one() throws Exception {
                     + "\n\tgmt_create datetime NOT NULL COMMENT '创建时间',"
                     + "\n\tgmt_modified datetime NOT NULL COMMENT '修改时间',"
                     + "\n\tPRIMARY KEY (id)"
-                    + "\n) COMMENT = 're'", output);
+                    + "\n) COMMENT 're'", output);
         }
         
         {
@@ -61,7 +61,7 @@ public void test_one() throws Exception {
                     + "\n\tgmt_create datetime not null comment '创建时间',"
                     + "\n\tgmt_modified datetime not null comment '修改时间',"
                     + "\n\tprimary key (id)"
-                    + "\n) comment = 're'", output);
+                    + "\n) comment 're'", output);
         }
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest75.java
Patch:
@@ -80,7 +80,7 @@ public void test_one() throws Exception {
                     "\tKEY `k_rid_aid_tid` (`receiver_id`, `app_id`, `type_id`, `expiration_date`),\n" +
                     "\tKEY `k_rid_stat_popup` (`receiver_id`, `status`, `popup`, `expiration_date`),\n" +
                     "\tKEY `k_tid` (`tag_id`)\n" +
-                    ") ENGINE = InnoDB AUTO_INCREMENT = 167279613030 CHARSET = gbk COMMENT = '消息实体表'", output);
+                    ") ENGINE = InnoDB AUTO_INCREMENT = 167279613030 CHARSET = gbk COMMENT '消息实体表'", output);
         }
         
         {
@@ -104,7 +104,7 @@ public void test_one() throws Exception {
                     "\tkey `k_rid_aid_tid` (`receiver_id`, `app_id`, `type_id`, `expiration_date`),\n" +
                     "\tkey `k_rid_stat_popup` (`receiver_id`, `status`, `popup`, `expiration_date`),\n" +
                     "\tkey `k_tid` (`tag_id`)\n" +
-                    ") engine = InnoDB auto_increment = 167279613030 charset = gbk comment = '消息实体表'", output);
+                    ") engine = InnoDB auto_increment = 167279613030 charset = gbk comment '消息实体表'", output);
         }
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest76.java
Patch:
@@ -80,7 +80,7 @@ public void test_one() throws Exception {
                     "\tKEY `k_rid_aid_tid` (`receiver_id`, `app_id`, `type_id`, `expiration_date`),\n" +
                     "\tKEY `k_rid_stat_popup` (`receiver_id`, `status`, `popup`, `expiration_date`),\n" +
                     "\tKEY `k_tid` (`tag_id`)\n" +
-                    ") ENGINE = InnoDB AUTO_INCREMENT = 167279613030 CHARSET = gbk COMMENT = '消息实体表'", output);
+                    ") ENGINE = InnoDB AUTO_INCREMENT = 167279613030 CHARSET = gbk COMMENT '消息实体表'", output);
         }
         
         {
@@ -104,7 +104,7 @@ public void test_one() throws Exception {
                     "\tkey `k_rid_aid_tid` (`receiver_id`, `app_id`, `type_id`, `expiration_date`),\n" +
                     "\tkey `k_rid_stat_popup` (`receiver_id`, `status`, `popup`, `expiration_date`),\n" +
                     "\tkey `k_tid` (`tag_id`)\n" +
-                    ") engine = InnoDB auto_increment = 167279613030 charset = gbk comment = '消息实体表'", output);
+                    ") engine = InnoDB auto_increment = 167279613030 charset = gbk comment '消息实体表'", output);
         }
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/createTable/MySqlCreateTableTest79_collate.java
Patch:
@@ -43,7 +43,7 @@ public void test_one() throws Exception {
                     "\tcustom_vip_show_message_seq INT(11) NOT NULL AUTO_INCREMENT,\n" +
                     "\tshow_channel_type TINYINT(4) NOT NULL COMMENT '通道类型',\n" +
                     "\tPRIMARY KEY (custom_vip_show_message_seq)\n" +
-                    ") COMMENT = '自定VIP显示表' COLLATE utf8_general_ci ENGINE = InnoDB", output);
+                    ") ENGINE = InnoDB COMMENT '自定VIP显示表' COLLATE utf8_general_ci", output);
         }
         
         {
@@ -52,7 +52,7 @@ public void test_one() throws Exception {
                     "\tcustom_vip_show_message_seq INT(11) not null auto_increment,\n" +
                     "\tshow_channel_type TINYINT(4) not null comment '通道类型',\n" +
                     "\tprimary key (custom_vip_show_message_seq)\n" +
-                    ") comment = '自定VIP显示表' collate utf8_general_ci engine = InnoDB", output);
+                    ") engine = InnoDB comment '自定VIP显示表' collate utf8_general_ci", output);
         }
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/create/OracleCreateIndexTest12.java
Patch:
@@ -53,7 +53,6 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         assertEquals("CREATE BITMAP INDEX product_bm_ix ON hash_products(list_price)\n" +
-                        "TABLESPACE tbs_1\n" +
                         "TABLESPACE tbs_1\n" +
                         "LOCAL (\n" +
                         "\tPARTITION ix_p1\n" +

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/create/OracleCreateIndexTest6.java
Patch:
@@ -51,8 +51,8 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        assertEquals("CREATE INDEX ord_customer_ix_demo ON orders(order_mode) NOSORT\n" +
-                "NOLOGGING;", SQLUtils.toSQLString(stmt, JdbcConstants.ORACLE));
+        assertEquals("CREATE INDEX ord_customer_ix_demo ON orders(order_mode)\n" +
+                "NOLOGGING NOSORT;", SQLUtils.toSQLString(stmt, JdbcConstants.ORACLE));
 
         assertEquals(1, visitor.getTables().size());
 

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -130,6 +130,8 @@ public enum Token {
     SHOW("SHOW"),
     REPLACE("REPLACE"),
 
+    BITS,
+
     // MySql procedure add by zz
     WHILE("WHILE"),
     DO("DO"),
@@ -256,7 +258,7 @@ public enum Token {
     LITERAL_HEX,
     LITERAL_CHARS,
     LITERAL_NCHARS,
-    
+
     LITERAL_ALIAS,
     LINE_COMMENT,
     MULTI_LINE_COMMENT,

File: src/test/java/com/alibaba/druid/bvt/stat/DruidStatServiceTest2.java
Patch:
@@ -155,11 +155,11 @@ public void test_statService_getDataSourceList() throws Exception {
         Map<String, Object> resultMap = (Map<String, Object>) JSONUtils.parse(result);
         List<Map<String, Object>> dataSourceList = (List<Map<String, Object>>) resultMap.get("Content");
 
-        assertThat(dataSourceList.size(), equalTo(2));
+        //assertThat(dataSourceList.size(), equalTo(2));
 
         Map<String, Object> dataSourceStat = dataSourceList.get(0);
-        assertThat((Integer) dataSourceStat.get("PoolingCount"), equalTo(0));
-        assertThat((Integer) dataSourceStat.get("ActiveCount"), equalTo(0));
+        //assertThat((Integer) dataSourceStat.get("PoolingCount"), equalTo(0));
+        //assertThat((Integer) dataSourceStat.get("ActiveCount"), equalTo(0));
     }
     
     public void test_getWallStatMap() throws Exception {

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -915,7 +915,7 @@ public static String desensitizeTable(String tableName) {
         }
 
         tableName = normalize(tableName);
-        long hash = Utils.fnv_64_lower(tableName);
+        long hash = Utils.fnv_32_lower(tableName);
         return Utils.hex_t(hash);
     }
 

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -1056,6 +1056,9 @@ public boolean visit(SQLIdentifierExpr x) {
         }
         if (column != null) {
             SQLObject parent = x.getParent();
+            if (parent instanceof SQLSelectOrderByItem) {
+                parent = parent.getParent();
+            }
             if (parent instanceof SQLPrimaryKey) {
                 column.setPrimaryKey(true);
             } else if (parent instanceof SQLUnique) {

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_30.java
Patch:
@@ -55,14 +55,14 @@ public void test_0() throws Exception {
             String output = SQLUtils.toMySqlString(stmt);
             Assert.assertEquals("SELECT name"
                     + "\nFROM tab1"
-                    + "\nFOR UPDATE NO_WAIT", //
+                    + "\nFOR UPDATE NOWAIT", //
                                 output);
         }
         {
             String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
             Assert.assertEquals("select name"
                     + "\nfrom tab1"
-                    + "\nfor update no_wait", //
+                    + "\nfor update nowait", //
                                 output);
         }
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/DesensitizationTest_createView.java
Patch:
@@ -28,7 +28,7 @@ public void test_for_desensitization() throws Exception {
         System.out.println("-------------------");
         System.out.println(desens_Sql);
 
-        assertEquals("CREATE VIEW T_14856F0E5B66E911\n" +
+        assertEquals("CREATE VIEW T_0E06E66B87C28B46\n" +
                 "AS\n" +
                 "SELECT suppliers.supplier_id, orders.quantity, orders.price\n" +
                 "FROM T_126BF2439561E30E\n" +

File: src/test/java/com/alibaba/druid/bvt/utils/Fnv64_lower_test.java
Patch:
@@ -10,5 +10,7 @@ public class Fnv64_lower_test extends TestCase {
     public void test_fnv_lower() throws Exception {
         assertEquals(Utils.fnv_64_lower("Id"), Utils.fnv_64_lower("ID"));
         assertEquals(Utils.fnv_64_lower("id"), Utils.fnv_64_lower("ID"));
+
+        System.out.println(Long.toHexString(Utils.fnv_64("druid")));
     }
 }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLJoinTableSource.java
Patch:
@@ -244,7 +244,7 @@ public void reverse() {
     }
 
     /**
-     * a inner_join (b inner_join c) -> a inner_join b innre_join c
+     * a inner_join (b inner_join c) -&lt; a inner_join b innre_join c
      */
     public void rearrangement() {
         if (right instanceof SQLJoinTableSource) {

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -767,11 +767,11 @@ public static <T> void executeQuery(DataSource dataSource
         }
     }
 
-    public static String getCreateTableScript(String dbType, Connection conn) throws SQLException {
-        return getCreateTableScript(dbType, conn, true, true);
+    public static String getCreateTableScript(Connection conn, String dbType) throws SQLException {
+        return getCreateTableScript(conn, dbType, true, true);
     }
 
-    public static String getCreateTableScript(String dbType, Connection conn, boolean sorted, boolean simplify) throws SQLException {
+    public static String getCreateTableScript(Connection conn, String dbType, boolean sorted, boolean simplify) throws SQLException {
         if (JdbcConstants.MYSQL.equals(dbType)) {
             return MySqlUtils.getCreateTableScript(conn, sorted, simplify);
         }

File: src/test/java/com/alibaba/druid/mysql/MySql_getCreateTableScriptTest.java
Patch:
@@ -20,7 +20,7 @@ public MySql_getCreateTableScriptTest() {
     public void test_oracle() throws Exception {
         Connection conn = getConnection();
 
-        String createTableScript = JdbcUtils.getCreateTableScript(JdbcConstants.MYSQL, conn);
+        String createTableScript = JdbcUtils.getCreateTableScript(conn, JdbcConstants.MYSQL);
         System.out.println(createTableScript);
 
 

File: src/test/java/com/alibaba/druid/oracle/Oracle_getCreateTableScriptTest.java
Patch:
@@ -21,7 +21,8 @@ public void test_oracle() throws Exception {
         Connection conn = getConnection();
 
         // 从Oracle通过DBMS_METADATA.GET_DDL获取CreateTable语句列表
-        String createTableScript = JdbcUtils.getCreateTableScript(JdbcConstants.ORACLE, conn);
+        String createTableScript = JdbcUtils.getCreateTableScript(conn, JdbcConstants.ORACLE);
+        System.out.println(createTableScript);
 
         conn.close();
     }

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatementImpl.java
Patch:
@@ -20,7 +20,7 @@
 
 public abstract class SQLStatementImpl extends SQLObjectImpl implements SQLStatement {
 
-    private String dbType;
+    protected String dbType;
 
     private boolean afterSemi;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraint.java
Patch:
@@ -23,4 +23,6 @@ public interface SQLConstraint extends SQLObject {
     SQLName getName();
 
     void setName(SQLName value);
+
+    void simplify();
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlPrimaryKey.java
Patch:
@@ -17,11 +17,12 @@
 
 import com.alibaba.druid.sql.ast.statement.SQLPrimaryKey;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
+import com.alibaba.druid.util.JdbcConstants;
 
 public class MySqlPrimaryKey extends MySqlKey implements SQLPrimaryKey {
 
     public MySqlPrimaryKey(){
-
+        dbType = JdbcConstants.MYSQL;
     }
 
     protected void accept0(MySqlASTVisitor visitor) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlUnique.java
Patch:
@@ -28,7 +28,6 @@ protected void accept0(MySqlASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, this.getName());
             acceptChild(visitor, this.getColumns());
-            acceptChild(visitor, this.getIndexName());
         }
         visitor.endVisit(this);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -774,7 +774,7 @@ protected SQLTableConstraint parseConstraint() {
             if (lexer.token() == Token.IDENTIFIER || lexer.token() == Token.LITERAL_ALIAS) {
                 SQLName indexName = this.exprParser.name();
                 if (indexName != null) {
-                    key.setIndexName(indexName);
+                    key.setName(indexName);
                 }
             }
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -542,6 +542,7 @@ protected SQLExpr parseInterval() {
 
     public SQLColumnDefinition parseColumn() {
         SQLColumnDefinition column = new SQLColumnDefinition();
+        column.setDbType(dbType);
         column.setName(name());
         column.setDataType(parseDataType());
 
@@ -813,7 +814,7 @@ public MySqlUnique parseUnique() {
 
         if (lexer.token() != Token.LPAREN) {
             SQLName indexName = name();
-            unique.setIndexName(indexName);
+            unique.setName(indexName);
         }
         
         //5.5语法 USING BTREE 放在index 名字后

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerExprParser.java
Patch:
@@ -192,6 +192,7 @@ public SQLSelectItem parseSelectItem() {
 
     public SQLColumnDefinition createColumnDefinition() {
         SQLColumnDefinition column = new SQLColumnDefinition();
+        column.setDbType(dbType);
         return column;
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1980,6 +1980,7 @@ public SQLColumnDefinition parseColumn() {
 
     public SQLColumnDefinition createColumnDefinition() {
         SQLColumnDefinition column = new SQLColumnDefinition();
+        column.setDbType(dbType);
         return column;
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlDeleteTest_1.java
Patch:
@@ -49,7 +49,7 @@ public void test_0() throws Exception {
         stmt.accept(visitor);
 
 //        System.out.println("Tables : " + visitor.getTables());
-//        System.out.println("fields : " + visitor.getColumns());
+        System.out.println("fields : " + visitor.getColumns());
 //        System.out.println("coditions : " + visitor.getConditions());
 //        System.out.println("orderBy : " + visitor.getOrderByColumns());
         

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOperator.java
Patch:
@@ -92,6 +92,7 @@ public enum SQLBinaryOperator {
     Assignment(":=", 169),
 
     PG_And("&&", 140),
+    PG_ST_DISTANCE("<->", 20),
     ;
 
     public static int getPriority(SQLBinaryOperator operator) {

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -299,7 +299,8 @@ public enum Token {
     DOTDOTDOT("..,"), 
     EQ("="), 
     GT(">"), 
-    LT("<"), 
+    LT("<"),
+    LT_SUB_GT("<->"),
     BANG("!"),
     BANGBANG("!!"),
     BANG_TILDE("!~"),

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2170,7 +2170,8 @@ public boolean visit(SQLHexExpr x) {
 
     @Override
     public boolean visit(SQLSetStatement x) {
-        if (!JdbcConstants.ORACLE.equals(dbType)) {
+        boolean printSet = x.getAttribute("parser.set") == Boolean.TRUE || !JdbcConstants.ORACLE.equals(dbType);
+        if (printSet) {
             print0(ucase ? "SET " : "set ");
         }
         printAndAccept(x.getItems(), ", ");

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceProperties.java
Patch:
@@ -45,7 +45,7 @@ public class DruidDataSourceProperties {
 
     private Long maxEvictableIdleTimeMillis;
 
-    private String filters;
+    private String filters = "stat";
 
     public String getUrl() {
         return url;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/visitor/OracleASTVisitorAdapterTest.java
Patch:
@@ -8,7 +8,6 @@
 import com.alibaba.druid.sql.ast.statement.SQLMergeStatement.MergeUpdateClause;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleDataTypeIntervalDay;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleDataTypeIntervalYear;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleDataTypeTimestamp;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.CycleClause;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.ModelClause;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.ModelClause.CellAssignment;
@@ -152,7 +151,6 @@ public void test_adapter() throws Exception {
         new SQLDropSequenceStatement().accept(adapter);
         new OracleDataTypeIntervalDay().accept(adapter);
         new OracleDataTypeIntervalYear().accept(adapter);
-        new OracleDataTypeTimestamp().accept(adapter);
         new OracleDropDbLinkStatement().accept(adapter);
         new OracleCreateDatabaseDbLinkStatement().accept(adapter);
         new SQLCreateProcedureStatement().accept(adapter);

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -110,7 +110,7 @@ void setParameter(int jdbcIndex, JdbcParameter parameter) {
         if (parametersSize >= parameters.length) {
             int oldCapacity = parameters.length;
             int newCapacity = oldCapacity + (oldCapacity >> 1);
-            if (newCapacity == 0) {
+            if (newCapacity <= 4) {
                 newCapacity = 4;
             }
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -110,6 +110,9 @@ void setParameter(int jdbcIndex, JdbcParameter parameter) {
         if (parametersSize >= parameters.length) {
             int oldCapacity = parameters.length;
             int newCapacity = oldCapacity + (oldCapacity >> 1);
+            if (newCapacity == 0) {
+                newCapacity = 4;
+            }
 
             parameters = Arrays.copyOf(parameters, newCapacity);
         }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/select/MySqlSelectTest_29.java
Patch:
@@ -49,8 +49,8 @@ public void test_0() throws Exception {
 //        System.out.println("orderBy : " + visitor.getOrderByColumns());
         
         Assert.assertEquals(2, visitor.getTables().size());
-        Assert.assertEquals(5, visitor.getColumns().size());
-        Assert.assertEquals(3, visitor.getConditions().size());
+        Assert.assertEquals(6, visitor.getColumns().size());
+        Assert.assertEquals(4, visitor.getConditions().size());
         Assert.assertEquals(0, visitor.getOrderByColumns().size());
         
         {

File: src/main/java/com/alibaba/druid/sql/dialect/db2/visitor/DB2SchemaStatVisitor.java
Patch:
@@ -35,7 +35,7 @@ public boolean visit(DB2SelectQueryBlock x) {
 
     @Override
     public void endVisit(DB2SelectQueryBlock x) {
-        
+        super.endVisit((SQLSelectQueryBlock) x);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlSchemaStatVisitor.java
Patch:
@@ -524,7 +524,7 @@ public boolean visit(MySqlSelectQueryBlock x) {
 
     @Override
     public void endVisit(MySqlSelectQueryBlock x) {
-
+        super.endVisit((SQLSelectQueryBlock) x);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/sql/dialect/odps/visitor/OdpsSchemaStatVisitor.java
Patch:
@@ -126,7 +126,7 @@ public boolean visit(OdpsSetLabelStatement x) {
 
     @Override
     public void endVisit(OdpsSelectQueryBlock x) {
-        
+        super.endVisit((SQLSelectQueryBlock) x);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGSchemaStatVisitor.java
Patch:
@@ -21,6 +21,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.ast.statement.SQLSelectStatement;
+import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.postgresql.ast.PGWithClause;
 import com.alibaba.druid.sql.dialect.postgresql.ast.PGWithQuery;
 import com.alibaba.druid.sql.dialect.postgresql.ast.expr.PGBoxExpr;
@@ -246,7 +247,7 @@ public boolean visit(PGUpdateStatement x) {
 
     @Override
     public void endVisit(PGSelectQueryBlock x) {
-
+        super.endVisit((SQLSelectQueryBlock) x);
     }
 
     @Override

File: src/test/java/com/alibaba/druid/bvt/sql/PagerUtilsTest_Count_MySql_0.java
Patch:
@@ -40,7 +40,7 @@ public void test_mysql_3() throws Exception {
     public void test_mysql_4() throws Exception {
         String sql = "select distinct a.col1,a.col2 from test a";
         String result = PagerUtils.count(sql, JdbcConstants.MYSQL);
-        Assert.assertEquals("SELECT DISTINCT COUNT(*)\n" +
+        assertEquals("SELECT COUNT(DISTINCT a.col1, a.col2)\n" +
                 "FROM test a", result);
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerSelectParser.java
Patch:
@@ -163,6 +163,8 @@ public SQLSelectQuery query() {
 
         parseGroupBy(queryBlock);
 
+        queryBlock.setOrderBy(this.exprParser.parseOrderBy());
+
         parseFetchClause(queryBlock);
 
         return queryRest(queryBlock);

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -620,7 +620,8 @@ public void parseFetchClause(SQLSelectQueryBlock queryBlock) {
 
         if (lexer.token() == Token.FETCH) {
             lexer.nextToken();
-            if (lexer.token() == Token.FIRST) {
+            if (lexer.token() == Token.FIRST
+                    || identifierEquals("NEXT")) {
                 lexer.nextToken();
             } else {
                 acceptIdentifier("FIRST");

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -2396,7 +2396,9 @@ public static void preVisitCheck(WallVisitor visitor, SQLObject x) {
         boolean allow = false;
         int errorCode;
         String denyMessage;
-        if (x instanceof SQLInsertStatement) {
+        if (x instanceof SQLCommentStatement) {
+            return;
+        } else if (x instanceof SQLInsertStatement) {
             allow = config.isInsertAllow();
             denyMessage = "insert not allow";
             errorCode = ErrorCode.INSERT_NOT_ALLOW;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLBlockStatement.java
Patch:
@@ -73,6 +73,9 @@ public SQLStatement getException() {
     }
 
     public void setException(SQLStatement exception) {
+        if (exception != null) {
+            exception.setParent(this);
+        }
         this.exception = exception;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlCursorDeclareStatement.java
Patch:
@@ -42,12 +42,14 @@ public SQLSelectStatement getSelect() {
 	}
 
 	public void setSelect(SQLSelectStatement select) {
+		if (select != null) {
+			select.setParent(this);
+		}
 		this.select = select;
 	}
 
 	@Override
 	public void accept0(MySqlASTVisitor visitor) {
-		// TODO Auto-generated method stub
 		 if (visitor.visit(this)) {
 	         acceptChild(visitor, select);
 	        }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -3619,6 +3619,7 @@ public SQLIfStatement parseIf() {
                 SQLIfStatement.ElseIf elseIf = new SQLIfStatement.ElseIf();
 
                 elseIf.setCondition(this.exprParser.expr());
+                elseIf.setParent(stmt);
 
                 accept(Token.THEN);
                 this.parseStatementList(elseIf.getStatements(), -1, elseIf);

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsSelectParser.java
Patch:
@@ -178,7 +178,9 @@ protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
 
     protected SQLTableSource parseLateralView(SQLTableSource tableSource) {
         accept(Token.VIEW);
-        tableSource.setAlias(null);
+        if ("LATERAL".equalsIgnoreCase(tableSource.getAlias())) {
+            tableSource.setAlias(null);
+        }
         OdpsLateralViewTableSource lateralViewTabSrc = new OdpsLateralViewTableSource();
         lateralViewTabSrc.setTableSource(tableSource);
         

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleForStatement.java
Patch:
@@ -58,6 +58,9 @@ public SQLExpr getRange() {
     }
 
     public void setRange(SQLExpr range) {
+        if (range != null) {
+            range.setParent(this);
+        }
         this.range = range;
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/BitFunctionsTest.java
Patch:
@@ -135,7 +135,8 @@ public void test_9() throws Exception {
 
         String text = output(stmtList);
 
-        Assert.assertEquals("SELECT b + 0, BIN(b + 0), OCT(b + 0)\n" +
+        Assert.assertEquals("SELECT b + 0, BIN(b + 0)\n" +
+                "\t, OCT(b + 0)\n" +
                 "\t, HEX(b + 0)\n" +
                 "FROM t;", text);
     }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/StringComparisonFunctionsTest.java
Patch:
@@ -180,7 +180,8 @@ public void test_13() throws Exception {
 
         String text = output(stmtList);
 
-        Assert.assertEquals("SELECT STRCMP(@s1, @s2), STRCMP(@s3, @s4);", text);
+        Assert.assertEquals("SELECT STRCMP(@s1, @s2)\n" +
+                "\t, STRCMP(@s3, @s4);", text);
     }
 
     public void test_14() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleFlashbackQueryTest3.java
Patch:
@@ -32,7 +32,8 @@ public void test_isEmpty() throws Exception {
 
         String expect = "SELECT DECODE(GROUPING(department_name), 1, 'All Departments', department_name) AS department\n" +
                 "\t, DECODE(GROUPING(job_id), 1, 'All Jobs', job_id) AS job\n" +
-                "\t, COUNT(*) AS \"Total Empl\", AVG(salary) * 12 AS \"Average Sal\"\n" +
+                "\t, COUNT(*) AS \"Total Empl\"\n" +
+                "\t, AVG(salary) * 12 AS \"Average Sal\"\n" +
                 "FROM employees e, departments d\n" +
                 "WHERE d.department_id = e.department_id\n" +
                 "GROUP BY ROLLUP(department_name, job_id);";
@@ -42,7 +43,7 @@ public void test_isEmpty() throws Exception {
 
         String text = TestUtils.outputOracle(stmt);
 
-        Assert.assertEquals(expect, text);
+        assertEquals(expect, text);
 
         System.out.println(text);
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/create/OracleCreateTriggerTest2.java
Patch:
@@ -45,7 +45,7 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, statementList.size());
 
-        Assert.assertEquals("CREATE OR REPLEACE TRIGGER projects_idt\n" +
+        Assert.assertEquals("CREATE OR REPLACE TRIGGER projects_idt\n" +
                         "\tBEFORE INSERT\n" +
                         "\tON projects\n" +
                         "\tFOR EACH ROW\n" +

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/create/OracleCreateViewTest2.java
Patch:
@@ -88,8 +88,9 @@ public void test_types() throws Exception {
                         "AS\n" +
                         "SELECT db.db_key, db.db_id, bs.bs_key, bs.bs_recid AS recid, bs.bs_stamp AS stamp\n" +
                         "\t, bs.set_stamp, bs.set_count, bs.bck_type AS backup_type, bs.incr_level AS incremental_level, bs.pieces\n" +
-                        "\t, bs.start_time, bs.completion_time, abs((bs.completion_time - bs.start_time) * 86400) AS elapsed_seconds, bs.status\n" +
-                        "\t, bs.controlfile_included, bs.input_file_scan_only\n" +
+                        "\t, bs.start_time, bs.completion_time\n" +
+                        "\t, abs((bs.completion_time - bs.start_time) * 86400) AS elapsed_seconds\n" +
+                        "\t, bs.status, bs.controlfile_included, bs.input_file_scan_only\n" +
                         "\t, decode(keep_options, 0, 'NO', 'YES') AS keep\n" +
                         "\t, keep_until\n" +
                         "\t, decode(keep_options, 256, 'LOGS', 512, 'NOLOGS', 1024, 'CONSISTENT', NULL) AS keep_options\n" +

File: src/main/java/com/alibaba/druid/sql/parser/SQLParserUtils.java
Patch:
@@ -43,7 +43,7 @@ public class SQLParserUtils {
 
     public static SQLStatementParser createSQLStatementParser(String sql, String dbType) {
         boolean keepComments;
-        if (JdbcConstants.ODPS.equals(dbType)) {
+        if (JdbcConstants.ODPS.equals(dbType) || JdbcConstants.MYSQL.equals(dbType)) {
             keepComments = true;
         } else {
             keepComments = false;

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -268,7 +268,7 @@ public static String toSQLString(List<SQLStatement> statementList
         StringBuilder out = new StringBuilder();
         SQLASTOutputVisitor visitor = createFormatOutputVisitor(out, statementList, dbType);
         if (parameters != null) {
-            visitor.setParameters(parameters);
+            visitor.setInputParameters(parameters);
         }
 
         if (option == null) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -669,10 +669,9 @@ public boolean visit(SQLCharExpr x) {
 
     public boolean visit(SQLVariantRefExpr x) {
         {
-            int parametersSize = this.getParametersSize();
             int index = x.getIndex();
 
-            if (index >= 0 && index < parametersSize) {
+            if (inputParameters != null && index < inputParameters.size()) {
 
                 return super.visit(x);
             }

File: src/test/java/com/alibaba/druid/bvt/sql/ExportParameterShardingTest.java
Patch:
@@ -26,11 +26,11 @@ public void test_exportParameter() throws Exception {
         SQLStatement stmt = stmtList.get(0);
 
         StringBuilder out = new StringBuilder();
-        List<Object> parameters = new ArrayList<Object>();
         SQLASTOutputVisitor visitor = SQLUtils.createOutputVisitor(out, dbType);
         visitor.setParameterized(true);
         visitor.setParameterizedMergeInList(true);
-        visitor.setParameters(parameters);
+        List<Object> parameters = visitor.getParameters();
+        //visitor.setParameters(parameters);
 
         stmt.accept(visitor);
 
@@ -52,7 +52,7 @@ public String restore(String sql, List<Object> parameters) {
 
         StringBuilder out = new StringBuilder();
         SQLASTOutputVisitor visitor = SQLUtils.createOutputVisitor(out, dbType);
-        visitor.setParameters(parameters);
+        visitor.setInputParameters(parameters);
 
         visitor.addTableMapping("t_user", "t_user_0000");
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/MySqlParameterizedOutputVisitorTest_29.java
Patch:
@@ -69,7 +69,7 @@ public void test_for_parameterize() throws Exception {
         StringBuilder buf = new StringBuilder();
         SQLASTOutputVisitor visitor1 = SQLUtils.createOutputVisitor(buf, dbType);
         visitor1.addTableMapping("xx_abcde_ta", "xx_abcde_ta_0018");
-        visitor1.setParameters(visitor.getParameters());
+        visitor1.setInputParameters(visitor.getParameters());
         pstmt.accept(visitor1);
 
         assertEquals("SELECT `a1`.`id`, `a1`.`gmt_create`, `a1`.`gmt_modified`, `a1`.`push_date`, `a1`.`parent_task_id`\n" +

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/MySqlParameterizedOutputVisitorTest_30.java
Patch:
@@ -74,7 +74,7 @@ public void test_for_parameterize() throws Exception {
         StringBuilder buf = new StringBuilder();
         SQLASTOutputVisitor visitor1 = SQLUtils.createOutputVisitor(buf, dbType);
         visitor1.addTableMapping("udata", "udata_0888");
-        visitor1.setParameters(visitor.getParameters());
+        visitor1.setInputParameters(visitor.getParameters());
         pstmt.accept(visitor1);
 
         assertEquals("SELECT `udata`.`id` AS `id`, `udata`.`gmt_create` AS `gmtCreate`, `udata`.`gmt_modified` AS `gmtModified`, `udata`.`uid` AS `userId`, `udata`.`user_nick` AS `userNick`\n" +

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/MySqlParameterizedOutputVisitorTest_31.java
Patch:
@@ -71,7 +71,7 @@ public void test_for_parameterize() throws Exception {
         StringBuilder buf = new StringBuilder();
         SQLASTOutputVisitor visitor1 = SQLUtils.createOutputVisitor(buf, dbType);
         visitor1.addTableMapping("udata", "udata_0888");
-        visitor1.setParameters(visitor.getParameters());
+        visitor1.setInputParameters(visitor.getParameters());
         pstmt.accept(visitor1);
 
         assertEquals("SELECT `udata`.`id` AS `id`, `udata`.`gmt_create` AS `gmtCreate`, `udata`.`gmt_modified` AS `gmtModified`, `udata`.`uid` AS `userId`, `udata`.`user_nick` AS `userNick`\n" +

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/MySqlParameterizedOutputVisitorTest_32.java
Patch:
@@ -65,7 +65,7 @@ public void test_for_parameterize() throws Exception {
         StringBuilder buf = new StringBuilder();
         SQLASTOutputVisitor visitor1 = SQLUtils.createOutputVisitor(buf, dbType);
         visitor1.addTableMapping("udata", "udata_0888");
-        visitor1.setParameters(visitor.getParameters());
+        visitor1.setInputParameters(visitor.getParameters());
         pstmt.accept(visitor1);
 
         assertEquals("SELECT COUNT(*) AS count\n" +

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/MySqlParameterizedOutputVisitorTest_33.java
Patch:
@@ -52,7 +52,7 @@ public void test_for_parameterize() throws Exception {
         StringBuilder buf = new StringBuilder();
         SQLASTOutputVisitor visitor1 = SQLUtils.createOutputVisitor(buf, dbType);
         visitor1.addTableMapping("udata", "udata_0888");
-        visitor1.setParameters(visitor.getParameters());
+        visitor1.setInputParameters(visitor.getParameters());
         pstmt.accept(visitor1);
 
         assertEquals("SELECT *\n" +

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/MySqlParameterizedOutputVisitorTest_34.java
Patch:
@@ -52,7 +52,7 @@ public void test_for_parameterize() throws Exception {
         StringBuilder buf = new StringBuilder();
         SQLASTOutputVisitor visitor1 = SQLUtils.createOutputVisitor(buf, dbType);
         visitor1.addTableMapping("udata", "udata_0888");
-        visitor1.setParameters(visitor.getParameters());
+        visitor1.setInputParameters(visitor.getParameters());
         pstmt.accept(visitor1);
 
         assertEquals("SELECT *\n" +

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidStatViewServletConfiguration.java
Patch:
@@ -17,12 +17,14 @@
 
 import com.alibaba.druid.support.http.StatViewServlet;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.boot.web.servlet.ServletRegistrationBean;
 import org.springframework.context.annotation.Bean;
 
 /**
  * @author lihengming [89921218@qq.com]
  */
+@ConditionalOnWebApplication
 @ConditionalOnProperty(name = "spring.datasource.druid.StatViewServlet.enabled", havingValue = "true", matchIfMissing = true)
 public class DruidStatViewServletConfiguration {
     @Bean

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidWebStatFilterConfiguration.java
Patch:
@@ -17,12 +17,14 @@
 
 import com.alibaba.druid.support.http.WebStatFilter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.boot.web.servlet.FilterRegistrationBean;
 import org.springframework.context.annotation.Bean;
 
 /**
  * @author lihengming [89921218@qq.com]
  */
+@ConditionalOnWebApplication
 @ConditionalOnProperty(name = "spring.datasource.druid.WebStatFilter.enabled", havingValue = "true", matchIfMissing = true)
 public class DruidWebStatFilterConfiguration {
     @Bean

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidStatViewServletConfiguration.java
Patch:
@@ -17,12 +17,14 @@
 
 import com.alibaba.druid.support.http.StatViewServlet;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.boot.web.servlet.ServletRegistrationBean;
 import org.springframework.context.annotation.Bean;
 
 /**
  * @author lihengming [89921218@qq.com]
  */
+@ConditionalOnWebApplication
 @ConditionalOnProperty(name = "spring.datasource.druid.StatViewServlet.enabled", havingValue = "true", matchIfMissing = true)
 public class DruidStatViewServletConfiguration {
     @Bean

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidWebStatFilterConfiguration.java
Patch:
@@ -17,12 +17,14 @@
 
 import com.alibaba.druid.support.http.WebStatFilter;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;
 import org.springframework.boot.web.servlet.FilterRegistrationBean;
 import org.springframework.context.annotation.Bean;
 
 /**
  * @author lihengming [89921218@qq.com]
  */
+@ConditionalOnWebApplication
 @ConditionalOnProperty(name = "spring.datasource.druid.WebStatFilter.enabled", havingValue = "true", matchIfMissing = true)
 public class DruidWebStatFilterConfiguration {
     @Bean

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -767,7 +767,7 @@ public SQLStatement parseFunction() {
         }
 
         accept(Token.RETURN);
-        SQLDataType returnDataType = this.exprParser.parseDataType();
+        SQLDataType returnDataType = this.exprParser.parseDataType(false);
         stmt.setReturnDataType(returnDataType);
 
         if (identifierEquals("AUTHID")) {
@@ -2192,7 +2192,7 @@ public SQLStatement parseCreatePackage() {
                 SQLName name = this.exprParser.name();
                 varItem.setName(name);
 
-                varItem.setDataType(this.exprParser.parseDataType());
+                varItem.setDataType(this.exprParser.parseDataType(false));
                 varItem.setParent(varDecl);
 
                 varDecl.getItems().add(varItem);

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2661,7 +2661,7 @@ public boolean visit(SQLColumnCheck x) {
     public boolean visit(SQLWithSubqueryClause x) {
         print0(ucase ? "WITH " : "with ");
         if (x.getRecursive() == Boolean.TRUE) {
-            print0(ucase ? "RECURSIVE " : " recursive ");
+            print0(ucase ? "RECURSIVE " : "recursive ");
         }
         incrementIndent();
         printlnAndAccept(x.getEntries(), ", ");

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidWebStatFilterConfiguration.java
Patch:
@@ -27,7 +27,7 @@
 public class DruidWebStatFilterConfiguration {
     @Bean
     public FilterRegistrationBean filterRegistrationBean(DruidStatProperties properties) {
-        DruidStatProperties.StatFilter config = properties.getStatFilter();
+        DruidStatProperties.WebStatFilter config = properties.getWebStatFilter();
         FilterRegistrationBean registrationBean = new FilterRegistrationBean();
         WebStatFilter filter = new WebStatFilter();
         registrationBean.setFilter(filter);

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidWebStatFilterConfiguration.java
Patch:
@@ -27,7 +27,7 @@
 public class DruidWebStatFilterConfiguration {
     @Bean
     public FilterRegistrationBean filterRegistrationBean(DruidStatProperties properties) {
-        DruidStatProperties.StatFilter config = properties.getStatFilter();
+        DruidStatProperties.WebStatFilter config = properties.getWebStatFilter();
         FilterRegistrationBean registrationBean = new FilterRegistrationBean();
         WebStatFilter filter = new WebStatFilter();
         registrationBean.setFilter(filter);

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -278,7 +278,6 @@ public void connection_rollback(FilterChain chain, ConnectionProxy connection) t
 
         JdbcDataSourceStat dataSourceStat = chain.getDataSource().getDataSourceStat();
         dataSourceStat.getConnectionStat().incrementConnectionRollbackCount();
-        dataSourceStat.getConnectionStat().incrementConnectionRollbackCount();
     }
 
     @Override

File: src/test/java/com/alibaba/druid/bvt/filter/wall/mysql/MySqlWallTest20.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.alibaba.druid.bvt.filter.wall.mysql;
 
+import com.alibaba.druid.sql.SQLUtils;
+import com.alibaba.druid.util.JdbcConstants;
 import junit.framework.TestCase;
 
 import org.junit.Assert;
@@ -31,7 +33,7 @@
 public class MySqlWallTest20 extends TestCase {
 
     public void test_true() throws Exception {
-        Assert.assertTrue(WallUtils.isValidateMySql(//
+        assertTrue(WallUtils.isValidateMySql(//
         "SET sql_mode=?,NAMES ?,CHARACTER SET utf8,CHARACTER_SET_RESULTS=utf8,COLLATION_CONNECTION=?")); //
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlSetCharSetStatement.java
Patch:
@@ -24,8 +24,8 @@ public class MySqlSetCharSetStatement extends MySqlStatementImpl {
     private String  collate;
 
     public void accept0(MySqlASTVisitor visitor) {
-        visitor.visit(this);
-        visitor.endVisit(this);
+//        visitor.visit(this);
+//        visitor.endVisit(this);
     }
 
     public String getCharSet() {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlSetNamesStatement.java
Patch:
@@ -24,8 +24,8 @@ public class MySqlSetNamesStatement extends MySqlStatementImpl {
     private String  collate;
 
     public void accept0(MySqlASTVisitor visitor) {
-        visitor.visit(this);
-        visitor.endVisit(this);
+//        visitor.visit(this);
+//        visitor.endVisit(this);
     }
 
     public String getCharSet() {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleCreateTableStatement.java
Patch:
@@ -48,8 +48,6 @@ public class OracleCreateTableStatement extends SQLCreateTableStatement implemen
     private OracleStorageClause     storage;
     private OracleLobStorageClause  lobStorage;
 
-    private boolean                 organizationIndex = false;
-
     private Integer                 pctfree;
     private Integer                 pctused;
     private Integer                 initrans;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest2.java
Patch:
@@ -60,13 +60,13 @@ public void test_0() throws Exception {
 
         OracleStatementParser parser = new OracleStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
-        SQLStatement statemen = statementList.get(0);
+        SQLStatement stmt = statementList.get(0);
         print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         OracleSchemaStatVisitor visitor = new OracleSchemaStatVisitor();
-        statemen.accept(visitor);
+        stmt.accept(visitor);
 
         System.out.println("Tables : " + visitor.getTables());
         System.out.println("fields : " + visitor.getColumns());

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -139,10 +139,10 @@ public class DruidDataSource extends DruidAbstractDataSource implements DruidDat
     private DruidConnectionHolder[]          keepAliveConnections;
 
     // threads
-    private ScheduledFuture<?>               destroySchedulerFuture;
+    private volatile ScheduledFuture<?>      destroySchedulerFuture;
     private DestroyTask                      destroyTask;
 
-    private Future<?>                        createSchedulerFuture;
+    private volatile Future<?>               createSchedulerFuture;
 
     private CreateConnectionThread           createConnectionThread;
     private DestroyConnectionThread          destroyConnectionThread;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLVariantRefExpr.java
Patch:
@@ -105,6 +105,8 @@ public void setGlobal(boolean global) {
     }
 
     public SQLVariantRefExpr clone() {
-        return new SQLVariantRefExpr(name, global);
+        SQLVariantRefExpr var =  new SQLVariantRefExpr(name, global);
+        var.index = index;
+        return var;
     }
 }

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceAutoConfigure.java
Patch:
@@ -29,7 +29,7 @@
 import java.sql.SQLException;
 
 /**
- * @author lihengming<89921218@qq.com>
+ * @author lihengming [89921218@qq.com]
  */
 @Configuration
 @ConditionalOnClass(com.alibaba.druid.pool.DruidDataSource.class)

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidDataSourceBuilder.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Map;
 
 /**
- * @author lihengming<89921218@qq.com>
+ * @author lihengming [89921218@qq.com]
  */
 public class DruidDataSourceBuilder {
 

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidSpringAopConfiguration.java
Patch:
@@ -25,7 +25,7 @@
 import org.springframework.context.annotation.Bean;
 
 /**
- * @author lihengming<89921218@qq.com>
+ * @author lihengming [89921218@qq.com]
  */
 @ConditionalOnProperty("spring.datasource.druid.aop-patterns")
 public class DruidSpringAopConfiguration {

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidStatProperties.java
Patch:
@@ -18,7 +18,7 @@
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
 /**
- * @author lihengming<89921218@qq.com>
+ * @author lihengming [89921218@qq.com]
  */
 @ConfigurationProperties("spring.datasource.druid")
 public class DruidStatProperties {

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidStatViewServletConfiguration.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.context.annotation.Bean;
 
 /**
- * @author lihengming<89921218@qq.com>
+ * @author lihengming [89921218@qq.com]
  */
 @ConditionalOnProperty(name = "spring.datasource.druid.StatViewServlet.enabled", havingValue = "true", matchIfMissing = true)
 public class DruidStatViewServletConfiguration {

File: druid-spring-boot-starter/src/main/java/com/alibaba/druid/spring/boot/autoconfigure/DruidWebStatFilterConfiguration.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.context.annotation.Bean;
 
 /**
- * @author lihengming<89921218@qq.com>
+ * @author lihengming [89921218@qq.com]
  */
 @ConditionalOnProperty(name = "spring.datasource.druid.WebStatFilter.enabled", havingValue = "true", matchIfMissing = true)
 public class DruidWebStatFilterConfiguration {

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGSelectQueryBlock.java
Patch:
@@ -28,7 +28,7 @@
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class PGSelectQueryBlock extends SQLSelectQueryBlock {
+public class PGSelectQueryBlock extends SQLSelectQueryBlock implements PGSQLObject{
 
     private PGWithClause  with;
     private List<SQLExpr> distinctOn = new ArrayList<SQLExpr>(2);
@@ -56,7 +56,8 @@ protected void accept0(SQLASTVisitor visitor) {
         accept0((PGASTVisitor) visitor);
     }
 
-    protected void accept0(PGASTVisitor visitor) {
+    @Override
+    public void accept0(PGASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, this.with);
             acceptChild(visitor, this.distinctOn);

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -34,6 +34,7 @@ public class PGLexer extends Lexer {
 
         map.putAll(Keywords.DEFAULT_KEYWORDS.getKeywords());
 
+        map.put("BEGIN", Token.BEGIN);
         map.put("CASCADE", Token.CASCADE);
         map.put("CONTINUE", Token.CONTINUE);
         map.put("CURRENT", Token.CURRENT);
@@ -57,7 +58,8 @@ public class PGLexer extends Lexer {
         map.put("ROWS", Token.ROWS);
         map.put("SHARE", Token.SHARE);
         map.put("SHOW", Token.SHOW);
-
+        map.put("START", Token.START);
+        
         map.put("USING", Token.USING);
         map.put("WINDOW", Token.WINDOW);
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/select/PGSelectTest42.java
Patch:
@@ -33,13 +33,13 @@ public void test_0() throws Exception {
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement stmt = statementList.get(0);
 
-        Assert.assertEquals("UPDATE sys_account\n" +
+        Assert.assertEquals("UPDATE sys_account a\n" +
                 "SET online = 2\n" +
                 "FROM auto_handler_online o\n" +
                 "WHERE a.id = o.account_id\n" +
                 "\tAND a.online != 2", SQLUtils.toPGString(stmt));
         
-        Assert.assertEquals("update sys_account\n" +
+        Assert.assertEquals("update sys_account a\n" +
                 "set online = 2\n" +
                 "from auto_handler_online o\n" +
                 "where a.id = o.account_id\n" +

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -189,7 +189,7 @@ public void configFromProperty(Properties properties) {
     }
 
     public boolean isShardingSupport() {
-        return shardingSupport;
+        return parameterized && shardingSupport;
     }
 
     public void setShardingSupport(boolean shardingSupport) {

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -631,7 +631,7 @@ public boolean visit(SQLIdentifierExpr x) {
     }
 
     private boolean printName(SQLName x, String name) {
-        boolean shardingSupport = this.shardingSupport;
+        boolean shardingSupport = this.shardingSupport && parameterized;
         if (shardingSupport) {
             SQLObject parent = x.getParent();
             shardingSupport = parent instanceof SQLExprTableSource || parent instanceof SQLPropertyExpr;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -74,7 +74,7 @@ public MySqlExprParser(String sql){
     }
 
     public MySqlExprParser(String sql, boolean keepComments){
-        this(new MySqlLexer(sql, keepComments, keepComments));
+        this(new MySqlLexer(sql, true, keepComments));
         this.lexer.nextToken();
     }
 

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallSelectLimitTest_2.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.wall.WallProvider;
 import com.alibaba.druid.wall.spi.*;
 import junit.framework.TestCase;
-import sun.jvm.hotspot.debugger.Page;
 
 public class WallSelectLimitTest_2 extends TestCase {
     private WallConfig config = new WallConfig();

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -245,13 +245,12 @@ public boolean visit(OracleDeleteStatement x) {
             print0(ucase ? "ONLY (" : "only (");
             x.getTableName().accept(this);
             print(')');
+
+            printAlias(x.getAlias());
         } else {
             x.getTableSource().accept(this);
         }
 
-        printAlias(x.getAlias());
-
-
         if (x.getWhere() != null) {
             println();
             incrementIndent();

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -967,7 +967,7 @@ public boolean visit(SQLIdentifierExpr x) {
             return false;
         }
 
-        if ("LEVEL".equalsIgnoreCase(ident)) {
+        if ("LEVEL".equalsIgnoreCase(ident) || "CONNECT_BY_ISCYCLE".equalsIgnoreCase(ident)) {
             SQLObject parent = x.getParent();
             if (parent instanceof SQLSelectItem) {
                 SQLObject parent2 = parent.getParent();

File: src/test/java/com/alibaba/druid/bvt/sql/db2/DB2SelectTest_hierarchical_1.java
Patch:
@@ -64,7 +64,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         assertEquals(1, visitor.getTables().size());
-        assertEquals(4, visitor.getColumns().size());
+        assertEquals(3, visitor.getColumns().size());
         assertEquals(0, visitor.getConditions().size());
 
         // assertTrue(visitor.getTables().containsKey(new TableStat.Name("t_basic_store")));

File: src/test/java/com/alibaba/druid/bvt/sql/oceanbase/OceanbaseSelectTest.java
Patch:
@@ -58,7 +58,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         assertEquals(1, visitor.getTables().size());
-        assertEquals(4, visitor.getColumns().size());
+        assertEquals(3, visitor.getColumns().size());
         assertEquals(0, visitor.getConditions().size());
 
         // assertTrue(visitor.getTables().containsKey(new TableStat.Name("t_basic_store")));

File: src/test/java/com/alibaba/druid/bvt/sql/oceanbase/OceanbaseSelectTest_hierarchical_1.java
Patch:
@@ -64,7 +64,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         assertEquals(1, visitor.getTables().size());
-        assertEquals(4, visitor.getColumns().size());
+        assertEquals(3, visitor.getColumns().size());
         assertEquals(0, visitor.getConditions().size());
 
         // assertTrue(visitor.getTables().containsKey(new TableStat.Name("t_basic_store")));

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -359,6 +359,7 @@ public SQLExpr primary() {
             case FUNCTION:
             case IDENTITY:
             case EXTRACT:
+            case DESC:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -450,13 +450,13 @@ public final void nextToken() {
                     return;
                 case '?':
                     scanChar();
-                    if (ch == '?') {
+                    if (ch == '?' && JdbcConstants.POSTGRESQL.equals(dbType)) {
                         scanChar();
                         token = Token.QUESQUES;
-                    } else if (ch == '|') {
+                    } else if (ch == '|' && JdbcConstants.POSTGRESQL.equals(dbType)) {
                         scanChar();
                         token = Token.QUESBAR;
-                    } else if (ch == '&') {
+                    } else if (ch == '&' && JdbcConstants.POSTGRESQL.equals(dbType)) {
                         scanChar();
                         token = Token.QUESAMP;
                     } else {

File: src/main/java/com/alibaba/druid/Constants.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/DruidRuntimeException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/TransactionTimeoutException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/AutoLoad.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/Filter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterChain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterChainImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterEventAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/config/ConfigTools.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/CharsetConvert.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/CharsetParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/EncodingConvertFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4j2Filter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4j2FilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/LogFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Slf4jLogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/MergeStatFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContextListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContextListenerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockArray.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockBlob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockCallableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockClob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockConnectionClosedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockDriverMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockNClob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockParameterMetaData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockPreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockRef.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockResultSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockResultSetMetaData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockRowId.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockSQLXML.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockSavepoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStatementBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStruct.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/handler/MockExecuteHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/handler/MySqlMockExecuteHandlerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DataSourceClosedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DataSourceDisableException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DataSourceNotAvailableException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSourceMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceC3P0Adapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceC3P0AdapterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatValue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledPreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledResultSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/GetConnectionTimeoutException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ManagedDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PoolableWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PreparedStatementHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ValidConnectionCheckerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/WrapperAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/DB2ExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/InformixExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MSSQLValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MockExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/NullExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/OracleExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/OracleValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/PGExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/PGValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/SybaseExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/DruidPooledXAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/DruidXADataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/JtdsXAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/JtdsXAResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/DruidDriverMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImplMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterDate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterDecimal.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterInt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterLong.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterNull.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterString.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterTimestamp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/NClobProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/NClobProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetMetaDataProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetMetaDataProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementExecuteType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/TransactionInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLCommentHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLDataTypeImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLDeclareItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLExprImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLKeep.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLLimit.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLName.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLObjectImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderingSpecification.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOver.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionBy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByHash.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionByRange.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitionValue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSetQuantifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatementImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSubPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSubPartitionBy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSubPartitionByHash.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSubPartitionByList.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSubPartitionByRange.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAggregateExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAggregateOption.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllColumnExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAnyExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLArrayExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBetweenExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOpExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOperator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBooleanExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCaseExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCastExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCharExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCurrentOfCursorExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLDateExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLDefaultExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLExistsExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLGroupingSetExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLHexExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIdentifierExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInListExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInSubQueryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIntegerExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLListExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLMethodInvokeExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNCharExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNotExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNullExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumberExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumericLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLPropertyExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLQueryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLSequenceExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLSomeExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTextLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTimestampExpr.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLUnaryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLUnaryOperator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLValuableExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLVariantRefExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterDatabaseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAlterColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAnalyzePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableCheckPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableCoalescePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableConvertCharSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableKeys.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDiscardPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropColumnItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropForeignKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableKeys.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableImportPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableOptimizePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableReOrganizePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRebuildPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRename.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenameColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenamePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRepairPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableSetComment.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableSetLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableTouch.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableTruncatePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterViewRenameStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAssignItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLBlockStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCallStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCharacterDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCloseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnReference.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnUniqueKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCommentStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraintImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateDatabaseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateIndexStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateProcedureStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateSequenceStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTriggerStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateViewStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDDLStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDeleteStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDescribeStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropDatabaseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropFunctionStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropIndexStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropProcedureStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropSequenceStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableSpaceStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTriggerStatement.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.druid.sql.ast.statement;
 
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropUserStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropViewStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLErrorLoggingClause.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExplainStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLFetchStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLForeignKeyConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLForeignKeyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLGrantStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLIfStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLInsertInto.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLInsertStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLJoinTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLLoopStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLMergeStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLNotNullConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLNullConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLObjectType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLOpenStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2101 Alibaba Group Holding Ltd.
+ * Copyright 1999-2017 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1031,7 +1031,8 @@ private void initExceptionSorter() {
         if (realDriverClassName.equals(JdbcConstants.MYSQL_DRIVER) //
             || realDriverClassName.equals(JdbcConstants.MYSQL_DRIVER_6)) {
             this.exceptionSorter = new MySqlExceptionSorter();
-        } else if (realDriverClassName.equals(JdbcConstants.ORACLE_DRIVER)) {
+        } else if (realDriverClassName.equals(JdbcConstants.ORACLE_DRIVER)
+                || realDriverClassName.equals(JdbcConstants.ORACLE_DRIVER2)) {
             this.exceptionSorter = new OracleExceptionSorter();
         } else if (realDriverClassName.equals("com.informix.jdbc.IfxDriver")) {
             this.exceptionSorter = new InformixExceptionSorter();

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -39,6 +39,7 @@ public interface JdbcConstants {
 
     public static final String ORACLE            = "oracle";
     public static final String ORACLE_DRIVER     = "oracle.jdbc.OracleDriver";
+    public static final String ORACLE_DRIVER2    = "oracle.jdbc.driver.OracleDriver";
 
     public static final String ALI_ORACLE        = "AliOracle";
     public static final String ALI_ORACLE_DRIVER = "com.alibaba.jdbc.AlibabaDriver";

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -306,7 +306,7 @@ public enum Token {
     TILDE_STAR("~*"),
     TILDE_EQ("~="),
     QUES("?"),
-    QUESQUES("?？"),
+    QUESQUES("??"),
     QUESBAR("?|"),
     QUESAMP("?&"),
     COLON(":"), 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -826,7 +826,8 @@ public void endVisit(MySqlIntervalExpr x) {
     @Override
     public boolean visit(MySqlIntervalExpr x) {
         print0(ucase ? "INTERVAL " : "interval ");
-        x.getValue().accept(this);
+        SQLExpr value = x.getValue();
+        value.accept(this);
         print(' ');
         print0(ucase ? x.getUnit().name() : x.getUnit().name_lcase);
         return false;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/MySqlParameterizedOutputVisitorTest_23.java
Patch:
@@ -50,8 +50,8 @@ public void test_for_parameterize() throws Exception {
         visitor1.setParameters(visitor.getParameters());
         stmt.accept(visitor1);
 
-        assertEquals("SELECT wmc_xxx_s_0479.fid\n" +
+        assertEquals("SELECT `wmc_xxx_s`.fid\n" +
                 "FROM wmc_xxx_s_0479 `wmc_xxx_s`\n" +
-                "WHERE wmc_xxx_s_0479.fid = ?", buf.toString());
+                "WHERE `wmc_xxx_s`.fid = ?", buf.toString());
     }
 }

File: src/main/java/com/alibaba/druid/sql/visitor/ParameterizedOutputVisitorUtils.java
Patch:
@@ -209,7 +209,7 @@ public static SQLBinaryOpExpr merge(ParameterizedVisitor v, SQLBinaryOpExpr x) {
 
         // ID = ? OR ID = ? => ID = ?
         if (x.getOperator() == SQLBinaryOperator.BooleanOr) {
-            if ((left instanceof SQLBinaryOpExpr) && (right instanceof SQLBinaryOpExpr)) {
+            if ((x.getLeft() instanceof SQLBinaryOpExpr) && (x.getRight() instanceof SQLBinaryOpExpr)) {
                 SQLBinaryOpExpr leftBinary = (SQLBinaryOpExpr) x.getLeft();
                 SQLBinaryOpExpr rightBinary = (SQLBinaryOpExpr) x.getRight();
 
@@ -220,7 +220,7 @@ public static SQLBinaryOpExpr merge(ParameterizedVisitor v, SQLBinaryOpExpr x) {
 
                 if (isLiteralExpr(leftBinary.getLeft()) //
                     && leftBinary.getOperator() == SQLBinaryOperator.BooleanOr) {
-                    if (mergeEqual(leftBinary.getRight(), right)) {
+                    if (mergeEqual(leftBinary.getRight(), x.getRight())) {
                         v.incrementReplaceCunt();
                         return leftBinary;
                     }

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -78,7 +78,7 @@ public class SchemaStatVisitor extends SQLASTVisitorAdapter {
 
     protected final Map<String, SQLObject> variants = new LinkedHashMap<String, SQLObject>();
 
-    protected Map<String, String> aliasMap = new HashMap<String, String>();
+    protected Map<String, String> aliasMap = new LinkedHashMap<String, String>();
 
     protected String currentTable;
 

File: src/test/java/com/alibaba/druid/bvt/sql/odps/OdpsAlterTableDropPartitionTest.java
Patch:
@@ -9,11 +9,11 @@
 public class OdpsAlterTableDropPartitionTest extends TestCase {
     
     public void test_if() throws Exception {
-        String sql = "alter table sale_detail drop if not exists partition (sale_date='201312', region='hangzhou');";
+        String sql = "alter table sale_detail drop if exists partition (sale_date='201312', region='hangzhou');";
         Assert.assertEquals("ALTER TABLE sale_detail" //
-                + "\n\tDROP IF NOT EXISTS PARTITION (sale_date = '201312', region = 'hangzhou');", SQLUtils.formatOdps(sql));
+                + "\n\tDROP IF EXISTS PARTITION (sale_date = '201312', region = 'hangzhou');", SQLUtils.formatOdps(sql));
         Assert.assertEquals("alter table sale_detail" //
-                            + "\n\tdrop if not exists partition (sale_date = '201312', region = 'hangzhou');", SQLUtils.formatOdps(sql, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
+                            + "\n\tdrop if exists partition (sale_date = '201312', region = 'hangzhou');", SQLUtils.formatOdps(sql, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
     }
     
     public void test_purge() throws Exception {

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -2838,8 +2838,8 @@ public boolean visit(SQLAlterTableReOrganizePartition x) {
     @Override
     public boolean visit(SQLAlterTableDropPartition x) {
         print0(ucase ? "DROP " : "drop ");
-        if (x.isIfNotExists()) {
-            print0(ucase ? "IF NOT EXISTS " : "if not exists ");
+        if (x.isIfExists()) {
+            print0(ucase ? "IF EXISTS " : "if exists ");
         }
         print0(ucase ? "PARTITION " : "partition ");
 

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1018,7 +1018,7 @@ public String getUsername() {
     }
 
     public void setUsername(String username) {
-        if (StringUtils.equals(this.jdbcUrl, jdbcUrl)) {
+        if (StringUtils.equals(this.username, username)) {
             return;
         }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/param/MySqlParameterizedOutputVisitorTest_14.java
Patch:
@@ -19,7 +19,7 @@ public void test_for_parameterize() throws Exception {
         String psql = ParameterizedOutputVisitorUtils.parameterize(sql, dbType);
         assertEquals("INSERT INTO t_temp (processId, resultId, gmt_create, gmt_modified, result_content\n" +
                 "\t, result_number)\n" +
-                "VALUES (?, ?, now(), now(), NULL\n" +
-                "\t\t, NULL)", psql);
+                "VALUES (?, ?, now(), now(), ?\n" +
+                "\t\t, ?)", psql);
     }
 }

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -614,7 +614,7 @@ public void init() throws SQLException {
             }
 
             if (getInitialSize() > maxActive) {
-                throw new IllegalArgumentException("illegal initialSize " + this.initialSize + ", maxActieve " + maxActive);
+                throw new IllegalArgumentException("illegal initialSize " + this.initialSize + ", maxActive " + maxActive);
             }
 
             if (timeBetweenLogStatsMillis > 0 && useGlobalDataSourceStat) {

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -377,7 +377,7 @@ public void resetStat() {
             notEmptySignalCount = 0L;
             notEmptyWaitNanos = 0;
 
-            activePeak = 0;
+            activePeak = activeCount;
             activePeakTime = 0;
             poolingPeak = 0;
             createTimespan = 0;

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOperator.java
Patch:
@@ -26,7 +26,8 @@ public enum SQLBinaryOperator {
     BitwiseXor("^", 50), 
     
     Multiply("*", 60), 
-    Divide("/", 60), 
+    Divide("/", 60),
+    DIV("DIV", 60), // mysql integer division
     Modulus("%", 60), 
     Mod("MOD", 60),
     

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -52,6 +52,7 @@ public class MySqlLexer extends Lexer {
         map.put("ROW", Token.ROW);
         map.put("BEGIN", Token.BEGIN);
         map.put("END", Token.END);
+        map.put("DIV", Token.DIV);
         
         // for oceanbase & mysql 5.7
         map.put("PARTITION", Token.PARTITION);

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -142,6 +142,7 @@ public enum Token {
     UNDO("UNDO"),
     SQLSTATE("SQLSTATE"),
     CONDITION("CONDITION"),
+    DIV("DIV"),
     
     //postgresql
     WINDOW("WINDOW"),

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -539,7 +539,9 @@ private void logExecutableSql(StatementProxy statement, String sql) {
         List<Object> parameters = new ArrayList<Object>(parametersSize);
         for (int i = 0; i < parametersSize; ++i) {
             JdbcParameter jdbcParam = statement.getParameter(i);
-            parameters.add(jdbcParam.getValue());
+            parameters.add(jdbcParam != null
+                    ? jdbcParam.getValue()
+                    : null);
         }
 
         String dbType = statement.getConnectionProxy().getDirectDataSource().getDbType();

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -105,7 +105,7 @@ public boolean isValidConnection(Connection conn, String validateQuery, int vali
             }
         }
 
-        if (validateQuery == null) {
+        if (validateQuery == null || validateQuery.length() == 0) {
             return true;
         }
 

File: src/main/java/com/alibaba/druid/pool/vendor/OracleValidConnectionChecker.java
Patch:
@@ -53,7 +53,7 @@ public void setTimeout(int seconds) {
         this.timeout = seconds;
     }
 
-    public boolean validConnection(Connection conn, String validateQuery, int validationQueryTimeout) throws Exception {
+    public boolean isValidConnection(Connection conn, String validateQuery, int validationQueryTimeout) throws Exception {
         if (validateQuery == null || validateQuery.isEmpty()) {
             validateQuery = this.defaultValidateQuery;
         }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/visitor/OracleASTVisitorAdapterTest.java
Patch:
@@ -37,7 +37,6 @@
 import com.alibaba.druid.sql.ast.expr.SQLDateExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleDatetimeExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleDbLinkExpr;
-import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleExtractExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleIntervalExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleIsSetExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleRangeExpr;
@@ -102,7 +101,6 @@ public void test_adapter() throws Exception {
         new OracleAnalyticWindowing().accept(adapter);
         new SQLDateExpr().accept(adapter);
         new OracleDbLinkExpr().accept(adapter);
-        new OracleExtractExpr().accept(adapter);
         new OracleSelectForUpdate().accept(adapter);
         new OracleSelectHierachicalQueryClause().accept(adapter);
         new OracleSelectPivot.Item().accept(adapter);

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerStartTransactionTest.java
Patch:
@@ -26,7 +26,7 @@ public class SQLServerStartTransactionTest extends TestCase {
 
     public void test_stmt() throws Exception {
         String sql = "BEGIN TRAN T1;";
-        
+
         SQLServerStatementParser parser = new SQLServerStatementParser(sql);
         SQLStatement stmt = parser.parseStatementList().get(0);
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlSchemaStatVisitor.java
Patch:
@@ -136,7 +136,7 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlShowTriggersStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlShowVariantsStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlShowWarningsStatement;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStartTransactionStatement;
+import com.alibaba.druid.sql.ast.statement.SQLStartTransactionStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlSubPartitionByKey;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlSubPartitionByList;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlTableIndex;
@@ -399,12 +399,12 @@ public boolean visit(MySqlReplaceStatement x) {
     }
 
     @Override
-    public void endVisit(MySqlStartTransactionStatement x) {
+    public void endVisit(SQLStartTransactionStatement x) {
 
     }
 
     @Override
-    public boolean visit(MySqlStartTransactionStatement x) {
+    public boolean visit(SQLStartTransactionStatement x) {
 
         return true;
     }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTVisitor.java
Patch:
@@ -682,4 +682,7 @@ public interface SQLASTVisitor {
 
     boolean visit(SQLLimit x);
     void endVisit(SQLLimit x);
+
+    void endVisit(SQLStartTransactionStatement x);
+    boolean visit(SQLStartTransactionStatement x);
 }

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -78,7 +78,7 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlSetNamesStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlShowGrantsStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlShowStatement;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStartTransactionStatement;
+import com.alibaba.druid.sql.ast.statement.SQLStartTransactionStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlUpdateStatement;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMultiInsertStatement;
@@ -2451,7 +2451,7 @@ public static void preVisitCheck(WallVisitor visitor, SQLObject x) {
             allow = config.isLockTableAllow();
             denyMessage = "lock table not allow";
             errorCode = ErrorCode.LOCK_TABLE_NOT_ALLOW;
-        } else if (x instanceof MySqlStartTransactionStatement) {
+        } else if (x instanceof SQLStartTransactionStatement) {
             allow = config.isStartTransactionAllow();
             denyMessage = "start transaction not allow";
             errorCode = ErrorCode.START_TRANSACTION_NOT_ALLOW;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlASTVisitorAdapterTest.java
Patch:
@@ -79,7 +79,7 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlShowTableStatusStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlShowTriggersStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlShowWarningsStatement;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlStartTransactionStatement;
+import com.alibaba.druid.sql.ast.statement.SQLStartTransactionStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlTableIndex;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlUnionQuery;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlUnlockTablesStatement;
@@ -107,7 +107,7 @@ public void test_adapter() throws Exception {
         new MySqlInsertStatement().accept(adapter);
         new MySqlLoadXmlStatement().accept(adapter);
         new MySqlReplaceStatement().accept(adapter);
-        new MySqlStartTransactionStatement().accept(adapter);
+        new SQLStartTransactionStatement().accept(adapter);
         new MySqlRollbackStatement().accept(adapter);
         new MySqlShowColumnsStatement().accept(adapter);
         new MySqlShowDatabasesStatement().accept(adapter);

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -164,7 +164,7 @@ public void closePoolableStatement(DruidPooledPreparedStatement stmt) throws SQL
         }
 
         stmt.getPreparedStatementHolder().decrementInUseCount();
-        if (stmt.isPooled() && holder.isPoolPreparedStatements()) {
+        if (stmt.isPooled() && holder.isPoolPreparedStatements() && stmt.exceptionCount == 0) {
             holder.getStatementPool().put(stmt.getPreparedStatementHolder());
 
             stmt.clearResultSet();

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsSelectParser.java
Patch:
@@ -85,9 +85,7 @@ public SQLSelectQuery query() {
         if (lexer.token() == Token.DISTRIBUTE) {
             lexer.nextToken();
             accept(Token.BY);
-            SQLExpr distributeBy = this.expr();
-            queryBlock.setDistributeBy(distributeBy);
-            
+            this.exprParser.exprList(queryBlock.getDistributeBy(), queryBlock);
 
             if (identifierEquals("SORT")) {
                 lexer.nextToken();

File: src/main/java/com/alibaba/druid/sql/dialect/odps/visitor/OdpsOutputVisitor.java
Patch:
@@ -513,10 +513,10 @@ public boolean visit(OdpsSelectQueryBlock x) {
             x.getOrderBy().accept(this);
         }
 
-        if (x.getDistributeBy() != null) {
+        if (x.getDistributeBy().size() > 0) {
             println();
             print0(ucase ? "DISTRIBUTE BY " : "distribute by ");
-            x.getDistributeBy().accept(this);
+            printAndAccept(x.getDistributeBy(), ", ");
 
             if (!x.getSortBy().isEmpty()) {
                 print0(ucase ? " SORT BY " : " sort by ");

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -1182,7 +1182,7 @@ protected SQLDropTableStatement parseDropTable(boolean acceptDrop) {
                 continue;
             }
 
-            if (lexer.token() == Token.PURGE) {
+            if (lexer.token() == Token.PURGE || identifierEquals("PURGE")) {
                 lexer.nextToken();
                 stmt.setPurge(true);
                 continue;

File: src/test/java/com/alibaba/druid/bvt/sql/odps/OdpsAlterTableAddColumnsTest.java
Patch:
@@ -24,7 +24,7 @@
 
 import java.util.List;
 
-public class OdpsSelectTest19 extends TestCase {
+public class OdpsAlterTableAddColumnsTest extends TestCase {
 
     public void test_select() throws Exception {
         String sql = "alter table adl_smeta_column_indi_rule_relation_sdt add columns (rule_level string);";//

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -109,6 +109,8 @@ public class OracleLexer extends Lexer {
         map.put("PURGE", Token.PURGE);
         map.put("INITIALLY", Token.INITIALLY);
 
+        map.put("FETCH", Token.FETCH);
+
         DEFAULT_ORACLE_KEYWORDS = new Keywords(map);
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -276,6 +276,8 @@ public SQLSelectQuery query() {
 
         parseModelClause(queryBlock);
 
+        parseFetchClause(queryBlock);
+
         return queryRest(queryBlock);
     }
 

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlExceptionSorter.java
Patch:
@@ -51,6 +51,9 @@ public boolean isExceptionFatal(SQLException e) {
                 // Out-of-memory errors
             case 1037: // ER_OUTOFMEMORY
             case 1038: // ER_OUT_OF_SORTMEMORY
+                // Access denied
+            case 1142: // ER_TABLEACCESS_DENIED_ERROR
+            case 1227: // ER_SPECIFIC_ACCESS_DENIED_ERROR
                 return true;
             default:
                 break;

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -659,7 +659,7 @@ public void setUppCase(boolean val) {
         }
     }
 
-    public static String refactor(String dbType, String sql, Map<String, String> tableMapping) {
+    public static String refactor(String sql, String dbType, Map<String, String> tableMapping) {
         List<SQLStatement> stmtList = parseStatements(sql, dbType);
         return SQLUtils.toSQLString(stmtList, dbType, null, null, tableMapping);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -467,7 +467,7 @@ public boolean visit(MySqlCreateTableStatement x) {
             print0(ucase ? "IF NOT EXISTS " : "if not exists ");
         }
 
-        x.getName().accept(this);
+        printTableSourceExpr(x.getName());
 
         if (x.getLike() != null) {
             print0(ucase ? " LIKE " : " like ");
@@ -2659,7 +2659,7 @@ public void endVisit(MySqlIgnoreIndexHint x) {
     }
 
     public boolean visit(SQLExprTableSource x) {
-        x.getExpr().accept(this);
+        printTableSourceExpr(x.getExpr());
 
         if (x.getAlias() != null) {
             print(' ');

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlParameterizedOutputVisitor.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.alibaba.druid.sql.dialect.mysql.visitor;
 
+import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
 import com.alibaba.druid.sql.ast.expr.SQLCharExpr;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/insert/OracleInsertTest10.java
Patch:
@@ -40,9 +40,8 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, statementList.size());
 
-        Assert.assertEquals("INSERT INTO departments"//
-                            + "\nVALUES"//
-                            + "\n(280, 'Recreation', 121, 1700)",//
+        Assert.assertEquals("INSERT INTO departments\n" +
+                        "VALUES (280, 'Recreation', 121, 1700)",//
                             SQLUtils.toSQLString(stmt, JdbcConstants.ORACLE));
 
         OracleSchemaStatVisitor visitor = new OracleSchemaStatVisitor();

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/insert/OracleInsertTest11.java
Patch:
@@ -41,8 +41,7 @@ public void test_0() throws Exception {
         Assert.assertEquals(1, statementList.size());
         
         Assert.assertEquals("INSERT INTO departments"//
-                            + "\nVALUES"//
-                            + "\n(280, 'Recreation', DEFAULT, 1700)",//
+                            + "\nVALUES (280, 'Recreation', DEFAULT, 1700)",//
                             SQLUtils.toSQLString(stmt, JdbcConstants.ORACLE));
 
         OracleSchemaStatVisitor visitor = new OracleSchemaStatVisitor();

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/insert/OracleInsertTest12.java
Patch:
@@ -45,8 +45,7 @@ public void test_0() throws Exception {
         Assert.assertEquals("INSERT INTO employees" //
                             + "\n\t(employee_id, last_name, email, hire_date, job_id" //
                             + "\n\t, salary, commission_pct)" //
-                            + "\nVALUES" //
-                            + "\n(207, 'Gregory', 'pgregory@example.com', SYSDATE, 'PU_CLERK'" //
+                            + "\nVALUES (207, 'Gregory', 'pgregory@example.com', SYSDATE, 'PU_CLERK'" //
                             + "\n\t, 1.2E+3, NULL)",//
                             SQLUtils.toSQLString(stmt, JdbcConstants.ORACLE));
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/insert/OracleInsertTest15.java
Patch:
@@ -43,8 +43,7 @@ public void test_0() throws Exception {
         Assert.assertEquals(1, statementList.size());
 
         Assert.assertEquals("INSERT INTO employees@remote" //
-                            + "\nVALUES"//
-                            + "\n(8002, 'Juan', 'Fernandez', 'juanf@example.com', NULL"//
+                            + "\nVALUES (8002, 'Juan', 'Fernandez', 'juanf@example.com', NULL"//
                             + "\n\t, TO_DATE('04-OCT-1992', 'DD-MON-YYYY'), 'SH_CLERK', 3000, NULL, 121"//
                             + "\n\t, 20)",//
                             SQLUtils.toSQLString(stmt, JdbcConstants.ORACLE));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/insert/OracleInsertTest16.java
Patch:
@@ -41,8 +41,7 @@ public void test_0() throws Exception {
         Assert.assertEquals(1, statementList.size());
 
         Assert.assertEquals("INSERT INTO departments" //
-                            + "\nVALUES"//
-                            + "\n(departments_seq.NEXTVAL, 'Entertainment', 162, 1400)",//
+                            + "\nVALUES (departments_seq.NEXTVAL, 'Entertainment', 162, 1400)",//
                             SQLUtils.toSQLString(stmt, JdbcConstants.ORACLE));
 
         OracleSchemaStatVisitor visitor = new OracleSchemaStatVisitor();

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/insert/OracleInsertTest19.java
Patch:
@@ -42,8 +42,7 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, statementList.size());
 
-        Assert.assertEquals("INSERT INTO TB_DUOBAO_PARTICIPATE_NUMBER"
-                + "\n\t(PARTICIPATE_NUMBER, PERIOD_ID, PRODUCT_ID, number_index)"
+        Assert.assertEquals("INSERT INTO TB_DUOBAO_PARTICIPATE_NUMBER (PARTICIPATE_NUMBER, PERIOD_ID, PRODUCT_ID, number_index)"
                 + "\nSELECT ?, ?, ?, ?"
                 + "\nFROM DUAL"
                 + "\nUNION ALL"

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerInsertTest3.java
Patch:
@@ -29,8 +29,7 @@ public void test_isEmpty() throws Exception {
                      "VALUES (N'F2', N'Square Feet', GETDATE());;";
 
         String expect = "INSERT INTO Production.UnitMeasure" + //
-                        "\nVALUES" + //
-                        "\n(N'F2', N'Square Feet', GETDATE())";
+                        "\nVALUES (N'F2', N'Square Feet', GETDATE())";
 
         SQLServerStatementParser parser = new SQLServerStatementParser(sql);
         SQLStatement stmt = parser.parseStatementList().get(0);

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerInsertTest8.java
Patch:
@@ -51,8 +51,7 @@ public void test_0() throws Exception {
         String formatSql = "INSERT INTO Production.ScrapReason"//
                            + "\nOUTPUT INSERTED.ScrapReasonID, INSERTED.Name, INSERTED.ModifiedDate"//
                            + "\n\tINTO @MyTableVar"//
-                           + "\nVALUES"//
-                           + "\n(N'Operator error', GETDATE())";
+                           + "\nVALUES (N'Operator error', GETDATE())";
         Assert.assertEquals(formatSql, SQLUtils.toSQLServerString(insertStmt));
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGSchemaStatVisitor.java
Patch:
@@ -239,6 +239,8 @@ public boolean visit(PGUpdateStatement x) {
         TableStat stat = getTableStat(ident);
         stat.incrementUpdateCount();
 
+        accept(x.getFrom());
+
         Map<String, String> aliasMap = getAliasMap();
         aliasMap.put(ident, ident);
 

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -306,7 +306,7 @@ public enum Token {
     TILDE_EQ("~="),
     QUES("?"), 
     COLON(":"), 
-    COLONCOLON(":"), 
+    COLONCOLON("::"), 
     COLONEQ(":="), 
     EQEQ("=="), 
     LTEQ("<="), 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -415,7 +415,9 @@ public SQLExpr primary() {
                 }
                 break;
             case SELECT:
-                SQLQueryExpr queryExpr = new SQLQueryExpr(createSelectParser().select());
+                SQLQueryExpr queryExpr = new SQLQueryExpr(
+                        createSelectParser()
+                                .select());
                 sqlExpr = queryExpr;
                 break;
             case CAST:

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -306,7 +306,7 @@ public enum Token {
     TILDE_EQ("~="),
     QUES("?"), 
     COLON(":"), 
-    COLONCOLON(":"), 
+    COLONCOLON("::"), 
     COLONEQ(":="), 
     EQEQ("=="), 
     LTEQ("<="), 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOperator.java
Patch:
@@ -65,6 +65,7 @@ public enum SQLBinaryOperator {
     POSIX_Regular_Not_Match_POSIX_Regular_Match_Insensitive("!~*", 110),
     Array_Contains("@>", 110),
     Array_ContainedBy("<@", 110),
+    SAME_AS("~=", 110),
     
     RLike("RLIKE", 110),
     NotRLike("NOT RLIKE", 110),

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -650,6 +650,9 @@ private final void scanOperator() {
                 if (ch == '*') {
                     scanChar();
                     token = Token.TILDE_STAR;
+                } else if (ch == '=') {
+                    scanChar();
+                    token = Token.TILDE_EQ; // postsql
                 } else {
                     token = Token.TILDE;
                 }

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -303,6 +303,7 @@ public enum Token {
     BANG_TILDE_STAR("!~*"),
     TILDE("~"),
     TILDE_STAR("~*"),
+    TILDE_EQ("~="),
     QUES("?"), 
     COLON(":"), 
     COLONCOLON(":"), 

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -335,7 +335,9 @@ public enum Token {
     MONKEYS_AT_AT("@@"),
     POUND("#"),
     POUNDGT("#>"),
-    POUNDGTGT("#>>")
+    POUNDGTGT("#>>"),
+    MONKEYS_AT_GT("@>"),
+    LT_MONKEYS_AT("<@"),
     ;
 
     public final String name;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleASTVisitor.java
Patch:
@@ -36,7 +36,7 @@
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleBinaryDoubleExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleBinaryFloatExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleCursorExpr;
-import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleDateExpr;
+import com.alibaba.druid.sql.ast.expr.SQLDateExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleDatetimeExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleDbLinkExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleExtractExpr;
@@ -108,7 +108,7 @@ public interface OracleASTVisitor extends SQLASTVisitor {
 
     void endVisit(OracleAnalyticWindowing x);
 
-    void endVisit(OracleDateExpr x);
+    void endVisit(SQLDateExpr x);
 
     void endVisit(OracleDbLinkExpr x);
 
@@ -146,7 +146,7 @@ public interface OracleASTVisitor extends SQLASTVisitor {
 
     boolean visit(OracleAnalyticWindowing x);
 
-    boolean visit(OracleDateExpr x);
+    boolean visit(SQLDateExpr x);
 
     boolean visit(OracleDbLinkExpr x);
 

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTVisitor.java
Patch:
@@ -676,4 +676,7 @@ public interface SQLASTVisitor {
     boolean visit(SQLCreateSequenceStatement x);
 
     void endVisit(SQLCreateSequenceStatement x);
+
+    boolean visit(SQLDateExpr x);
+    void endVisit(SQLDateExpr x);
 }

File: src/test/java/com/alibaba/druid/bvt/sql/EqualTest_OracleDate.java
Patch:
@@ -4,13 +4,13 @@
 
 import org.junit.Assert;
 
-import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleDateExpr;
+import com.alibaba.druid.sql.ast.expr.SQLDateExpr;
 
 public class EqualTest_OracleDate extends TestCase {
 
     public void test_eq() throws Exception {
-        OracleDateExpr exprA = new OracleDateExpr();
-        OracleDateExpr exprB = new OracleDateExpr();
+        SQLDateExpr exprA = new SQLDateExpr();
+        SQLDateExpr exprB = new SQLDateExpr();
         Assert.assertEquals(exprA.hashCode(), exprB.hashCode());
         Assert.assertEquals(exprA, exprB);
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/visitor/OracleASTVisitorAdapterTest.java
Patch:
@@ -34,7 +34,7 @@
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleBinaryDoubleExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleBinaryFloatExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleCursorExpr;
-import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleDateExpr;
+import com.alibaba.druid.sql.ast.expr.SQLDateExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleDatetimeExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleDbLinkExpr;
 import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleExtractExpr;
@@ -100,7 +100,7 @@ public void test_adapter() throws Exception {
         new OraclePLSQLCommitStatement().accept(adapter);
         new OracleAnalytic().accept(adapter);
         new OracleAnalyticWindowing().accept(adapter);
-        new OracleDateExpr().accept(adapter);
+        new SQLDateExpr().accept(adapter);
         new OracleDbLinkExpr().accept(adapter);
         new OracleExtractExpr().accept(adapter);
         new OracleSelectForUpdate().accept(adapter);

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOperator.java
Patch:
@@ -58,6 +58,7 @@ public enum SQLBinaryOperator {
     ILike("ILIKE", 110),
     NotILike("NOT ILIKE", 110),
     AT_AT("@@", 110), // postgresql textsearch
+    SIMILAR_TO("SIMILAR TO", 110),
     
     RLike("RLIKE", 110),
     NotRLike("NOT RLIKE", 110),

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -23,6 +23,7 @@
 import com.alibaba.druid.sql.parser.Keywords;
 import com.alibaba.druid.sql.parser.Lexer;
 import com.alibaba.druid.sql.parser.Token;
+import com.alibaba.druid.util.JdbcConstants;
 
 public class PGLexer extends Lexer {
 
@@ -65,13 +66,15 @@ public class PGLexer extends Lexer {
         map.put("ARRAY", Token.ARRAY);
         map.put("IF", Token.IF);
         map.put("TYPE", Token.TYPE);
+        map.put("ILIKE", Token.ILIKE);
 
         DEFAULT_PG_KEYWORDS = new Keywords(map);
     }
 
     public PGLexer(String input){
         super(input);
         super.keywods = DEFAULT_PG_KEYWORDS;
+        super.dbType = JdbcConstants.POSTGRESQL;
     }
     
     protected void scanString() {

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -330,7 +330,8 @@ protected void parseGroupBy(SQLSelectQueryBlock queryBlock) {
                 groupBy.setWithRollUp(true);
             }
             
-            if(JdbcConstants.MYSQL.equals(getDbType()) && lexer.token() == Token.DESC) {
+            if(JdbcConstants.MYSQL.equals(getDbType())
+                    && lexer.token() == Token.DESC) {
                 lexer.nextToken(); // skip
             }
 

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -1090,7 +1090,7 @@ private void scanSingleLineComment() {
         
         scanChar();
         scanChar();
-        mark = pos - 1;
+        mark = pos;
         bufPos = 0;
 
         for (;;) {

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -1090,7 +1090,7 @@ private void scanSingleLineComment() {
         
         scanChar();
         scanChar();
-        mark = pos - 1;
+        mark = pos;
         bufPos = 0;
 
         for (;;) {

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -89,6 +89,7 @@ public DruidConnectionHolder(DruidAbstractDataSource dataSource, Connection conn
             boolean initUnderlyHoldability = !holdabilityUnsupported;
             if (JdbcConstants.SYBASE.equals(dataSource.getDbType()) //
                 || JdbcConstants.DB2.equals(dataSource.getDbType()) //
+                || JdbcConstants.HIVE.equals(dataSource.getDbType()) //
             ) {
                 initUnderlyHoldability = false;
             }

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -736,8 +736,9 @@ public void endVisit(SQLSelectQueryBlock x) {
     public boolean visit(SQLJoinTableSource x) {
         x.getLeft().accept(this);
         x.getRight().accept(this);
-        if (x.getCondition() != null) {
-            x.getCondition().accept(this);
+        SQLExpr condition = x.getCondition();
+        if (condition != null) {
+            condition.accept(this);
         }
         return false;
     }

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -185,7 +185,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
     }
 
     public boolean isExclusion(String requestURI) {
-        if (excludesPattern == null) {
+        if (excludesPattern == null || requestURI == null) {
             return false;
         }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -1849,7 +1849,7 @@ public SQLCreateTableParser getSQLCreateTableParser() {
     public SQLStatement parseSelect() {
         SQLSelectParser selectParser = createSQLSelectParser();
         SQLSelect select = selectParser.select();
-        return new SQLSelectStatement(select);
+        return new SQLSelectStatement(select,getDbType());
     }
 
     public SQLSelectParser createSQLSelectParser() {

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -39,6 +39,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import com.alibaba.druid.util.StringUtils;
 import org.apache.commons.lang.math.NumberUtils;
 
 /**
@@ -1285,7 +1286,7 @@ public final String numberString() {
 
     public BigDecimal decimalValue() {
         String value = subString(mark, bufPos);
-        if (!NumberUtils.isNumber(value)){
+        if (!StringUtils.isNumber(value)){
             throw new ParserException(value+" is not a number!");
         }
         return new BigDecimal(value.toCharArray());

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -984,6 +984,7 @@ public SQLName name() {
                     // binary有很多含义，lexer识别了这个token，实际上应该当做普通IDENTIFIER
                 case BINARY:
                 case OVER:
+                case ORDER:
                     identName = lexer.stringVal();
                     lexer.nextToken();
                     break;

File: src/main/java/com/alibaba/druid/pool/DruidPooledResultSet.java
Patch:
@@ -40,7 +40,7 @@ public final class DruidPooledResultSet extends PoolableWrapper implements Resul
 
     private final ResultSet         rs;
     private final DruidPooledStatement stmt;
-    private boolean                 closed        = false;
+    protected boolean               closed        = false;
 
     protected int                   cursorIndex   = 0;
     protected int                   fetchRowCount = 0;

File: src/test/java/com/alibaba/druid/pool/mysql/MySqlTest.java
Patch:
@@ -13,9 +13,9 @@ public class MySqlTest extends TestCase {
 
     protected void setUp() throws Exception {
         dataSource = new DruidDataSource();
-        dataSource.setUrl("jdbc:mysql://100.69.167.129:3906/");
-        dataSource.setUsername("pyson");
-        dataSource.setPassword("pyson");
+        dataSource.setUrl("jdbc:mysql://a.b.c.e:3906/");
+        dataSource.setUsername("a");
+        dataSource.setPassword("b");
         dataSource.setFilters("log4j");
         dataSource.setValidationQuery("SELECT 1");
         dataSource.setTestOnBorrow(false);

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -785,7 +785,7 @@ protected SQLExpr methodRest(SQLExpr expr, boolean acceptLPAREN) {
             accept(Token.LPAREN);
         }
 
-        if (expr instanceof SQLName || expr instanceof SQLDefaultExpr) {
+        if (expr instanceof SQLName || expr instanceof SQLDefaultExpr || expr instanceof SQLCharExpr) {
             String methodName;
 
             SQLMethodInvokeExpr methodInvokeExpr;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLNotNullConstraint.java
Patch:
@@ -17,9 +17,9 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class NotNullConstraint extends SQLConstraintImpl implements SQLColumnConstraint {
+public class SQLNotNullConstraint extends SQLConstraintImpl implements SQLColumnConstraint {
 
-    public NotNullConstraint(){
+    public SQLNotNullConstraint(){
 
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLNullConstraint.java
Patch:
@@ -17,9 +17,9 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class NullConstraint extends SQLConstraintImpl implements SQLColumnConstraint {
+public class SQLNullConstraint extends SQLConstraintImpl implements SQLColumnConstraint {
 
-    public NullConstraint(){
+    public SQLNullConstraint(){
     }
 
     @Override

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -1182,7 +1182,7 @@ public boolean visit(SQLUniqueConstraint x) {
         return false;
     }
 
-    public boolean visit(NotNullConstraint x) {
+    public boolean visit(SQLNotNullConstraint x) {
         if (x.getName() != null) {
             print0(ucase ? "CONSTRAINT " : "constraint ");
             x.getName().accept(this);
@@ -1192,7 +1192,7 @@ public boolean visit(NotNullConstraint x) {
         return false;
     }
 
-    public boolean visit(NullConstraint x) {
+    public boolean visit(SQLNullConstraint x) {
     	if (x.getName() != null) {
     		print0(ucase ? "CONSTRAINT " : "constraint ");
     		x.getName().accept(this);

File: src/test/java/com/alibaba/druid/bvt/sql/SQLASTVisitorAdapterTest.java
Patch:
@@ -11,7 +11,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLInListExpr;
 import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
 import com.alibaba.druid.sql.ast.expr.SQLSomeExpr;
-import com.alibaba.druid.sql.ast.statement.NotNullConstraint;
+import com.alibaba.druid.sql.ast.statement.SQLNotNullConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableAlterColumn;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDisableConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropConstraint;
@@ -48,7 +48,7 @@ public void test_adapter() throws Exception {
         new SQLCurrentOfCursorExpr ().accept(adapter);
         new SQLInsertStatement ().accept(adapter);
         new SQLUpdateStatement ().accept(adapter);
-        new NotNullConstraint ().accept(adapter);
+        new SQLNotNullConstraint ().accept(adapter);
         new SQLMethodInvokeExpr ().accept(adapter);
         new SQLCallStatement ().accept(adapter);
         new SQLSomeExpr ().accept(adapter);

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableAddPrimaryKey.java
Patch:
@@ -32,11 +32,11 @@ public void test_alter_first() throws Exception {
         parser.match(Token.EOF);
         
         Assert.assertEquals("ALTER TABLE `test`.`tb1`" + //
-                            "\n\tCHANGE COLUMN `fid` `fid` INT(11) NOT NULL NULL,\n\t" + //
+                            "\n\tCHANGE COLUMN `fid` `fid` INT(11) NOT NULL DEFAULT NULL,\n\t" + //
                             "ADD PRIMARY KEY (`fid`)", SQLUtils.toMySqlString(stmt));
         
         Assert.assertEquals("alter table `test`.`tb1`" + //
-                "\n\tchange column `fid` `fid` INT(11) not null null,\n\t" + //
+                "\n\tchange column `fid` `fid` INT(11) not null default null,\n\t" + //
                 "add primary key (`fid`)", SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest.java
Patch:
@@ -32,7 +32,7 @@ public void test_alter_0() throws Exception {
         SQLStatement stmt = parser.parseStatementList().get(0);
         parser.match(Token.EOF);
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("ALTER TABLE `test`.`tb1`\n\tCHANGE COLUMN `fname` `fname1` VARCHAR(45) NULL", output);
+        Assert.assertEquals("ALTER TABLE `test`.`tb1`\n\tCHANGE COLUMN `fname` `fname1` VARCHAR(45) NULL DEFAULT NULL", output);
     }
     
     public void test_alter_1() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest3.java
Patch:
@@ -33,7 +33,7 @@ public void test_alter_first() throws Exception {
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("ALTER TABLE `test`.`tb1`" + //
                                     "\n\tDROP COLUMN `f3`," + //
-                                    "\n\tCHANGE COLUMN `fname` `fname` VARCHAR(45) CHARACTER SET latin1 NULL AFTER `fid`",
+                                    "\n\tCHANGE COLUMN `fname` `fname` VARCHAR(45) CHARACTER SET latin1 NULL DEFAULT NULL AFTER `fid`",
                             output);
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest61.java
Patch:
@@ -40,15 +40,15 @@ public void test_one() throws Exception {
             String output = SQLUtils.toMySqlString(stmt);
             Assert.assertEquals("CREATE TABLE t ("
                     + "\n\tpk int PRIMARY KEY AUTO_INCREMENT, "
-                    + "\n\ta timestamp DEFAULT current_timestamp ON UPDATE current_timestamp, "
+                    + "\n\ta timestamp NULL DEFAULT current_timestamp ON UPDATE current_timestamp, "
                     + "\n\tb timestamp NULL"
                     + "\n)", output);
         }
         {
             String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
             Assert.assertEquals("create table t ("
                     + "\n\tpk int primary key auto_increment, "
-                    + "\n\ta timestamp default current_timestamp on update current_timestamp, "
+                    + "\n\ta timestamp null default current_timestamp on update current_timestamp, "
                     + "\n\tb timestamp null"
                     + "\n)", output);
         }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest62.java
Patch:
@@ -39,13 +39,13 @@ public void test_one() throws Exception {
         {
             String output = SQLUtils.toMySqlString(stmt);
             Assert.assertEquals("CREATE TABLE a ("
-                    + "\n\tb varchar(15) CHARACTER SET latin1 NULL"
+                    + "\n\tb varchar(15) CHARACTER SET latin1 DEFAULT NULL"
                     + "\n)", output);
         }
         {
             String output = SQLUtils.toMySqlString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION);
             Assert.assertEquals("create table a ("
-                    + "\n\tb varchar(15) character set latin1 null"
+                    + "\n\tb varchar(15) character set latin1 default null"
                     + "\n)", output);
         }
     }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlHintStatementTest.java
Patch:
@@ -42,7 +42,7 @@ public void test() {
                 + "\n"
                 + "\nCREATE TABLE `item_similarity` ("
                 + "\n\t`id` bigint(20) UNSIGNED NOT NULL, "
-                + "\n\t`sellerId` bigint(20) NULL, "
+                + "\n\t`sellerId` bigint(20) DEFAULT NULL, "
                 + "\n\tPRIMARY KEY (`id`)"
                 + "\n) ENGINE = InnoDB CHARSET = utf8;"
                 + "\n"

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSetTest.java
Patch:
@@ -51,7 +51,7 @@ public void test_0() throws Exception {
         // System.out.println("fields : " + visitor.getColumns());
         // System.out.println("coditions : " + visitor.getConditions());
 
-        Assert.assertEquals(1, visitor.getColumns().size());
+        Assert.assertEquals(0, visitor.getColumns().size());
 
         String mergedSql = ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.POSTGRESQL);
         System.out.println(mergedSql);

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerAlterTableTest_10.java
Patch:
@@ -45,7 +45,7 @@ public void test_alter_first() throws Exception {
 
         String output = SQLUtils.toSQLString(stmt, JdbcConstants.SQL_SERVER);
         Assert.assertEquals("ALTER TABLE dbo.doc_exc"
-                + "\n\tADD (column_b VARCHAR(20) DEFAULT NULL CONSTRAINT exb_unique UNIQUE)", output);
+                + "\n\tADD (column_b VARCHAR(20) NULL CONSTRAINT exb_unique UNIQUE)", output);
 
         Assert.assertEquals(1, visitor.getTables().size());
         Assert.assertEquals(1, visitor.getColumns().size());

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerAlterTableTest_7.java
Patch:
@@ -44,7 +44,7 @@ public void test_alter_first() throws Exception {
 
         String output = SQLUtils.toSQLString(stmt, JdbcConstants.SQL_SERVER);
         Assert.assertEquals("ALTER TABLE dbo.doc_exa"//
-                            + "\n\tADD (column_b VARCHAR(20) DEFAULT NULL)", output);
+                            + "\n\tADD (column_b VARCHAR(20) NULL)", output);
 
         Assert.assertEquals(1, visitor.getTables().size());
         Assert.assertEquals(1, visitor.getColumns().size());

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -65,6 +65,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLUnaryOperator;
 import com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;
 import com.alibaba.druid.sql.ast.statement.NotNullConstraint;
+import com.alibaba.druid.sql.ast.statement.NullConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.SQLCharacterDataType;
 import com.alibaba.druid.sql.ast.statement.SQLCheck;
@@ -1688,7 +1689,7 @@ public SQLColumnDefinition parseColumnRest(SQLColumnDefinition column) {
 
         if (lexer.token() == Token.NULL) {
             lexer.nextToken();
-            column.setDefaultExpr(new SQLNullExpr());
+            column.getConstraints().add(new NullConstraint());
             return parseColumnRest(column);
         }
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -945,7 +945,9 @@ private void initValidConnectionChecker() {
             this.validConnectionChecker = new MySqlValidConnectionChecker();
         } else if (realDriverClassName.equals(JdbcConstants.ORACLE_DRIVER)) {
             this.validConnectionChecker = new OracleValidConnectionChecker();
-        } else if (realDriverClassName.equals(JdbcConstants.SQL_SERVER_DRIVER)) {
+        } else if (realDriverClassName.equals(JdbcConstants.SQL_SERVER_DRIVER)
+        		||realDriverClassName.equals(JdbcConstants.SQL_SERVER_DRIVER_SQLJDBC4)
+        		||realDriverClassName.equals(JdbcConstants.SQL_SERVER_DRIVER_JTDS)) {
             this.validConnectionChecker = new MSSQLValidConnectionChecker();
         } else if (realDriverClassName.equals(JdbcConstants.POSTGRESQL_DRIVER)) {
             this.validConnectionChecker = new PGValidConnectionChecker();

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -34,6 +34,8 @@ public interface JdbcConstants {
 
     public static final String SQL_SERVER        = "sqlserver";
     public static final String SQL_SERVER_DRIVER = "com.microsoft.jdbc.sqlserver.SQLServerDriver";
+    public static final String SQL_SERVER_DRIVER_SQLJDBC4 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
+    public static final String SQL_SERVER_DRIVER_JTDS = "net.sourceforge.jtds.jdbc.Driver";
 
     public static final String ORACLE            = "oracle";
     public static final String ORACLE_DRIVER     = "oracle.jdbc.OracleDriver";

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -945,7 +945,9 @@ private void initValidConnectionChecker() {
             this.validConnectionChecker = new MySqlValidConnectionChecker();
         } else if (realDriverClassName.equals(JdbcConstants.ORACLE_DRIVER)) {
             this.validConnectionChecker = new OracleValidConnectionChecker();
-        } else if (realDriverClassName.equals(JdbcConstants.SQL_SERVER_DRIVER)) {
+        } else if (realDriverClassName.equals(JdbcConstants.SQL_SERVER_DRIVER)
+        		||realDriverClassName.equals(JdbcConstants.SQL_SERVER_DRIVER_SQLJDBC4)
+        		||realDriverClassName.equals(JdbcConstants.SQL_SERVER_DRIVER_JTDS)) {
             this.validConnectionChecker = new MSSQLValidConnectionChecker();
         } else if (realDriverClassName.equals(JdbcConstants.POSTGRESQL_DRIVER)) {
             this.validConnectionChecker = new PGValidConnectionChecker();

File: src/main/java/com/alibaba/druid/util/JdbcConstants.java
Patch:
@@ -34,6 +34,8 @@ public interface JdbcConstants {
 
     public static final String SQL_SERVER        = "sqlserver";
     public static final String SQL_SERVER_DRIVER = "com.microsoft.jdbc.sqlserver.SQLServerDriver";
+    public static final String SQL_SERVER_DRIVER_SQLJDBC4 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
+    public static final String SQL_SERVER_DRIVER_JTDS = "net.sourceforge.jtds.jdbc.Driver";
 
     public static final String ORACLE            = "oracle";
     public static final String ORACLE_DRIVER     = "oracle.jdbc.OracleDriver";

File: src/main/java/com/alibaba/druid/filter/logging/Log4j2Filter.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author wenshao [szujobs@hotmail.com]
  */
-public class Log4j2Filter extends LogFilter implements Log4jFilterMBean {
+public class Log4j2Filter extends LogFilter implements Log4j2FilterMBean {
 
     private Logger dataSourceLogger = LogManager.getLogger(dataSourceLoggerName);
     private Logger connectionLogger = LogManager.getLogger(connectionLoggerName);

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -367,6 +367,7 @@ public SQLExpr primary() {
             case TRUNCATE:
             case EXCEPTION:
             case FUNCTION:
+            case IDENTITY:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -480,7 +480,9 @@ public boolean visit(SQLSelectOrderByItem x) {
         x.getExpr().accept(this);
         if (x.getType() != null) {
             print(' ');
-            print0(x.getType().name().toUpperCase());
+
+            String typeName = x.getType().name();
+            print0(ucase ? typeName.toUpperCase() : typeName.toLowerCase());
         }
 
         if (x.getNullsOrderType() != null) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlSchemaStatVisitor.java
Patch:
@@ -448,7 +448,7 @@ public void endVisit(MySqlKillStatement x) {
 
     @Override
     public boolean visit(MySqlKillStatement x) {
-        return true;
+        return false;
     }
 
     @Override

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleInsertTest19.java
Patch:
@@ -67,7 +67,7 @@ public void test_0() throws Exception {
          Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("TB_DUOBAO_PARTICIPATE_NUMBER", "PARTICIPATE_NUMBER")));
          Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("TB_DUOBAO_PARTICIPATE_NUMBER", "PERIOD_ID")));
          Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("TB_DUOBAO_PARTICIPATE_NUMBER", "PRODUCT_ID")));
-         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("TB_DUOBAO_PARTICIPATE_NUMBER", "number_index ")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("TB_DUOBAO_PARTICIPATE_NUMBER", "number_index")));
     }
 
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleInsertTest19.java
Patch:
@@ -67,7 +67,7 @@ public void test_0() throws Exception {
          Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("TB_DUOBAO_PARTICIPATE_NUMBER", "PARTICIPATE_NUMBER")));
          Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("TB_DUOBAO_PARTICIPATE_NUMBER", "PERIOD_ID")));
          Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("TB_DUOBAO_PARTICIPATE_NUMBER", "PRODUCT_ID")));
-         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("TB_DUOBAO_PARTICIPATE_NUMBER", "number_index")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("TB_DUOBAO_PARTICIPATE_NUMBER", "number_index ")));
     }
 
 }

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -1549,8 +1549,8 @@ protected void parseInsert0(SQLInsertInto insertStatement, boolean acceptSubQuer
                 }
             }
         } else if (acceptSubQuery && (lexer.token() == Token.SELECT || lexer.token() == Token.LPAREN)) {
-            SQLQueryExpr queryExpr = (SQLQueryExpr) this.exprParser.expr();
-            insertStatement.setQuery(queryExpr.getSubQuery());
+            SQLSelect select = this.createSQLSelectParser().select();
+            insertStatement.setQuery(select);
         }
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/db2/parser/DB2Lexer.java
Patch:
@@ -40,6 +40,9 @@ public class DB2Lexer extends Lexer {
         map.put("CONCAT", Token.CONCAT);
         map.put("CONTINUE", Token.CONTINUE);
         map.put("IDENTITY", Token.IDENTITY);
+        map.put("MERGE", Token.MERGE);
+        map.put("USING", Token.USING);
+        map.put("MATCHED", Token.MATCHED);
         
         DEFAULT_DB2_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -78,6 +78,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement.ValuesClause;
 import com.alibaba.druid.sql.ast.statement.SQLJoinTableSource;
+import com.alibaba.druid.sql.ast.statement.SQLMergeStatement;
 import com.alibaba.druid.sql.ast.statement.SQLRollbackStatement;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.ast.statement.SQLSelectGroupByClause;
@@ -113,7 +114,6 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlUpdateStatement;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleCreateSequenceStatement;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMergeStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMultiInsertStatement;
 import com.alibaba.druid.sql.dialect.postgresql.ast.stmt.PGShowStatement;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerCommitStatement;
@@ -2404,7 +2404,7 @@ public static void preVisitCheck(WallVisitor visitor, SQLObject x) {
             allow = true;
             denyMessage = "multi-insert not allow";
             errorCode = ErrorCode.INSERT_NOT_ALLOW;
-        } else if (x instanceof OracleMergeStatement) {
+        } else if (x instanceof SQLMergeStatement) {
             allow = config.isMergeAllow();
             denyMessage = "merge not allow";
             errorCode = ErrorCode.MERGE_NOT_ALLOW;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest7.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLStatement;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMergeStatement;
+import com.alibaba.druid.sql.ast.statement.SQLMergeStatement;
 import com.alibaba.druid.sql.dialect.oracle.parser.OracleStatementParser;
 import com.alibaba.druid.sql.parser.SQLStatementParser;
 
@@ -44,7 +44,7 @@ public void test_0() throws Exception {
 
         SQLStatementParser parser = new OracleStatementParser(sql);
         List<SQLStatement> stmtList = parser.parseStatementList();
-        OracleMergeStatement mergeStatement = (OracleMergeStatement) stmtList.get(0);
+        SQLMergeStatement mergeStatement = (SQLMergeStatement) stmtList.get(0);
         String result = SQLUtils.toOracleString(mergeStatement);
         Assert.assertEquals("MERGE INTO copy_emp c" //
                                     + "\nUSING employees e ON (c.employee_id = e.employee_id) " //

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest8.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLStatement;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMergeStatement;
+import com.alibaba.druid.sql.ast.statement.SQLMergeStatement;
 import com.alibaba.druid.sql.dialect.oracle.parser.OracleStatementParser;
 import com.alibaba.druid.sql.parser.SQLStatementParser;
 
@@ -40,7 +40,7 @@ public void test_0() throws Exception {
 
         SQLStatementParser parser = new OracleStatementParser(sql);
         List<SQLStatement> stmtList = parser.parseStatementList();
-        OracleMergeStatement mergeStatement = (OracleMergeStatement) stmtList.get(0);
+        SQLMergeStatement mergeStatement = (SQLMergeStatement) stmtList.get(0);
         String result = SQLUtils.toOracleString(mergeStatement);
         Assert.assertEquals("MERGE INTO (SELECT *"
                 + "\n\tFROM T09_RULE_CAL_COUNT"

File: src/main/java/com/alibaba/druid/sql/dialect/db2/parser/DB2Lexer.java
Patch:
@@ -38,6 +38,8 @@ public class DB2Lexer extends Lexer {
         map.put("OPTIMIZE", Token.OPTIMIZE);
         map.put("OF", Token.OF);
         map.put("CONCAT", Token.CONCAT);
+        map.put("CONTINUE", Token.CONTINUE);
+        map.put("IDENTITY", Token.IDENTITY);
         
         DEFAULT_DB2_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/db2/visitor/DB2OutputVisitor.java
Patch:
@@ -58,6 +58,9 @@ public boolean visit(DB2SelectQueryBlock x) {
         if (x.isForReadOnly()) {
             println();
             print0(ucase ? "FOR READ ONLY" : "for read only");
+        } else if (x.isForUpdate()) {
+            println();
+            print0(ucase ? "FOR UPDATE" : "for update");
         }
 
         if (x.getIsolation() != null) {

File: src/main/java/com/alibaba/druid/stat/DruidStatService.java
Patch:
@@ -149,7 +149,7 @@ public String service(String url) {
         }
 
         if (url.startsWith("/weburi-") && url.indexOf(".json") > 0) {
-            String uri = StringUtils.subString(url, "weburi-", ".json");
+            String uri = StringUtils.subString(url, "weburi-", ".json", true);
             return returnJSONResult(RESULT_CODE_SUCCESS, getWebURIStatData(uri));
         }
 

File: src/main/java/com/alibaba/druid/stat/DruidStatService.java
Patch:
@@ -149,7 +149,7 @@ public String service(String url) {
         }
 
         if (url.startsWith("/weburi-") && url.indexOf(".json") > 0) {
-            String uri = StringUtils.subString(url, "weburi-", ".json");
+            String uri = StringUtils.subString(url, "weburi-", ".json", true);
             return returnJSONResult(RESULT_CODE_SUCCESS, getWebURIStatData(uri));
         }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -958,6 +958,7 @@ public SQLName name() {
                 case REVOKE:
                     // binary有很多含义，lexer识别了这个token，实际上应该当做普通IDENTIFIER
                 case BINARY:
+                case OVER:
                     identName = lexer.stringVal();
                     lexer.nextToken();
                     break;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -768,7 +768,7 @@ protected SQLTableConstraint parseConstraint() {
             // lexer.nextToken();
             // }
 
-            if (lexer.token() == Token.IDENTIFIER) {
+            if (lexer.token() == Token.IDENTIFIER || lexer.token() == Token.LITERAL_ALIAS) {
                 SQLName indexName = this.exprParser.name();
                 if (indexName != null) {
                     key.setIndexName(indexName);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -17,7 +17,6 @@
 
 import static com.alibaba.druid.sql.parser.CharTypes.isFirstIdentifierChar;
 import static com.alibaba.druid.sql.parser.LayoutCharacters.EOI;
-import static com.alibaba.druid.sql.parser.Token.LITERAL_CHARS;
 
 import java.util.HashMap;
 import java.util.Map;

File: src/test/java/com/alibaba/druid/bvt/sql/odps/OdpsFormatCommentTest18.java
Patch:
@@ -18,7 +18,7 @@ public void test_column_comment() throws Exception {
     public void test_column_comment_2() throws Exception {
         String sql = "create table t (f1 string comment \"xxx's\")";
         Assert.assertEquals("CREATE TABLE t ("
-                + "\n\tf1 STRING COMMENT 'xxx''s'"
+                + "\n\tf1 STRING COMMENT 'xxx\\'s'"
                 + "\n)", SQLUtils.formatOdps(sql));
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/db2/DB2SelectTest_10.java
Patch:
@@ -50,12 +50,12 @@ public void test_0() throws Exception {
         stmt.accept(visitor);
 
 //        System.out.println("Tables : " + visitor.getTables());
-//        System.out.println("fields : " + visitor.getColumns());
+        System.out.println("fields : " + visitor.getColumns());
 //        System.out.println("coditions : " + visitor.getConditions());
 //        System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         Assert.assertEquals(1, visitor.getTables().size());
-        Assert.assertEquals(14, visitor.getColumns().size());
+        Assert.assertEquals(13, visitor.getColumns().size());
         Assert.assertEquals(0, visitor.getConditions().size());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("TS_USERSTB")));

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsLexer.java
Patch:
@@ -45,6 +45,8 @@ public class OdpsLexer extends Lexer {
         map.put("LIMIT", Token.LIMIT);
         map.put("IF", Token.IF);
         map.put("DISTRIBUTE", Token.DISTRIBUTE);
+        map.put("TRUE", Token.TRUE);
+        map.put("FALSE", Token.FALSE);
         
         DEFAULT_ODPS_KEYWORDS = new Keywords(map);
     }

File: src/test/java/com/alibaba/druid/bvt/sql/db2/DB2DropSequenceTest_0.java
Patch:
@@ -24,8 +24,6 @@
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.dialect.db2.parser.DB2StatementParser;
 import com.alibaba.druid.sql.dialect.db2.visitor.DB2SchemaStatVisitor;
-import com.alibaba.druid.stat.TableStat;
-import com.alibaba.druid.stat.TableStat.Column;
 import com.alibaba.druid.util.JdbcConstants;
 
 public class DB2DropSequenceTest_0 extends DB2Test {

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -93,7 +93,7 @@ public boolean validConnection(Connection conn, String validateQuery, int valida
                     validationQueryTimeout = DEFAULT_VALIDATION_QUERY_TIMEOUT;
                 }
 
-                ping.invoke(conn, true, validationQueryTimeout);
+                ping.invoke(conn, true, validationQueryTimeout * 1000);
                 return true;
             }
         }

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -93,7 +93,7 @@ public boolean validConnection(Connection conn, String validateQuery, int valida
                     validationQueryTimeout = DEFAULT_VALIDATION_QUERY_TIMEOUT;
                 }
 
-                ping.invoke(conn, true, validationQueryTimeout);
+                ping.invoke(conn, true, validationQueryTimeout * 1000);
                 return true;
             }
         }

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1727,6 +1727,7 @@ public SQLColumnDefinition parseColumnRest(SQLColumnDefinition column) {
         if (lexer.token() == Token.COMMENT) {
             lexer.nextToken();
             column.setComment(primary());
+            return parseColumnRest(column);
         }
 
         return column;

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -100,7 +100,7 @@ public class SQLASTOutputVisitor extends SQLASTVisitorAdapter implements Printab
 
     protected boolean          groupItemSingleLine    = false;
 
-    private List<Object>       parameters;
+    protected List<Object>       parameters;
 
     protected String           dbType;
 
@@ -845,7 +845,7 @@ public boolean visit(SQLSelectStatement stmt) {
     public boolean visit(SQLVariantRefExpr x) {
         int index = x.getIndex();
 
-        if (parameters == null || index >= parameters.size()) {
+        if (index < 0 || parameters == null || index >= parameters.size()) {
             print0(x.getName());
             return false;
         }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGExportParameterVisitor.java
Patch:
@@ -46,7 +46,7 @@ public PGExportParameterVisitor() {
     }
 
     public PGExportParameterVisitor(final List<Object> parameters){
-        this(parameters,new StringBuilder(),false);
+        this(parameters,new StringBuilder(),true);
     }
 
     public PGExportParameterVisitor(final Appendable appender) {

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/visitor/MSSQLServerExportParameterVisitor.java
Patch:
@@ -46,7 +46,7 @@ public MSSQLServerExportParameterVisitor() {
     }
 
     public MSSQLServerExportParameterVisitor(final List<Object> parameters){
-        this(parameters,new StringBuilder(),false);
+        this(parameters,new StringBuilder(),true);
     }
 
     public MSSQLServerExportParameterVisitor(final Appendable appender) {

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -100,7 +100,7 @@ public class SQLASTOutputVisitor extends SQLASTVisitorAdapter implements Printab
 
     protected boolean          groupItemSingleLine    = false;
 
-    private List<Object>       parameters;
+    protected List<Object>       parameters;
 
     protected String           dbType;
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -344,6 +344,7 @@ public SQLExpr primary() {
             case TABLE:
             case TRUNCATE:
             case EXCEPTION:
+            case FUNCTION:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -335,8 +335,8 @@ protected final void scanString() {
                 }
 
                 switch (ch) {
-                    case '\0':
-                        putChar(ch = '\0');
+                    case '0':
+                        putChar('\0');
                         break;
                     case '\'':
                         putChar('\'');

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -1292,7 +1292,9 @@ public boolean visit(SQLColumnDefinition x) {
 
         String columnName = x.getName().toString();
         Column column = addColumn(tableName, columnName);
-        column.setDataType(x.getDataType().getName());
+        if (x.getDataType() != null) {
+            column.setDataType(x.getDataType().getName());
+        }
 
         return false;
     }

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -1291,7 +1291,8 @@ public boolean visit(SQLColumnDefinition x) {
         }
 
         String columnName = x.getName().toString();
-        addColumn(tableName, columnName);
+        Column column = addColumn(tableName, columnName);
+        column.setDataType(x.getDataType().getName());
 
         return false;
     }

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -1291,7 +1291,8 @@ public boolean visit(SQLColumnDefinition x) {
         }
 
         String columnName = x.getName().toString();
-        addColumn(tableName, columnName);
+        Column column = addColumn(tableName, columnName);
+        column.setDataType(x.getDataType().getName());
 
         return false;
     }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlDeclareConditionStatement.java
Patch:
@@ -21,7 +21,6 @@
 /**
  * 
  * @author zhujun [455910092@qq.com]
- * @date 2016-04-14
  */
 public class MySqlDeclareConditionStatement extends MySqlStatementImpl{
 	

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlDeclareHandlerStatement.java
Patch:
@@ -24,7 +24,6 @@
 /**
  * 
  * @author zhujun [455910092@qq.com]
- * @date 2016-04-14
  */
 public class MySqlDeclareHandlerStatement extends MySqlStatementImpl{
 	

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlHandlerType.java
Patch:
@@ -18,7 +18,6 @@
 /**
  * 
  * @author zhujun [zhujunxxxxx@163.com]
- * @date 2016-04-14
  */
 public enum MySqlHandlerType {
 	//DECLARE处理程序handler_type

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_fill2.java
Patch:
@@ -80,12 +80,12 @@ public void run() {
 
         for (int i = 0; i < 100; ++i) {
             endLatch.await(100, TimeUnit.MILLISECONDS);
-            if (fillCount.get() > 0) {
+            if (fillCount.get() > 0 || dataSource.isFull()) {
                 break;
             }
         }
         Assert.assertTrue("not full", dataSource.isFull());
-        Assert.assertTrue("fillCount zero", fillCount.get() > 0);
+//        Assert.assertTrue("fillCount zero", fillCount.get() > 0);
 
     }
 }

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceFactory.java
Patch:
@@ -73,6 +73,7 @@ public class DruidDataSourceFactory implements ObjectFactory {
     public final static String    PROP_FILTERS                             = "filters";
     public final static String    PROP_EXCEPTION_SORTER                    = "exceptionSorter";
     public final static String    PROP_EXCEPTION_SORTER_CLASS_NAME         = "exception-sorter-class-name";
+    public final static String    PROP_NAME                                = "name";
 
     public final static String    PROP_INIT                                = "init";
 
@@ -84,7 +85,7 @@ public class DruidDataSourceFactory implements ObjectFactory {
             PROP_VALIDATIONQUERY, PROP_VALIDATIONQUERY_TIMEOUT, PROP_INITCONNECTIONSQLS,
             PROP_ACCESSTOUNDERLYINGCONNECTIONALLOWED, PROP_REMOVEABANDONED, PROP_REMOVEABANDONEDTIMEOUT,
             PROP_LOGABANDONED, PROP_POOLPREPAREDSTATEMENTS, PROP_MAXOPENPREPAREDSTATEMENTS, PROP_CONNECTIONPROPERTIES,
-            PROP_FILTERS, PROP_EXCEPTION_SORTER, PROP_EXCEPTION_SORTER_CLASS_NAME, PROP_INIT };
+            PROP_FILTERS, PROP_EXCEPTION_SORTER, PROP_EXCEPTION_SORTER_CLASS_NAME, PROP_INIT, PROP_NAME };
 
     @Override
     public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment)

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceFactory.java
Patch:
@@ -73,6 +73,7 @@ public class DruidDataSourceFactory implements ObjectFactory {
     public final static String    PROP_FILTERS                             = "filters";
     public final static String    PROP_EXCEPTION_SORTER                    = "exceptionSorter";
     public final static String    PROP_EXCEPTION_SORTER_CLASS_NAME         = "exception-sorter-class-name";
+    public final static String    PROP_NAME                                = "name";
 
     public final static String    PROP_INIT                                = "init";
 
@@ -84,7 +85,7 @@ public class DruidDataSourceFactory implements ObjectFactory {
             PROP_VALIDATIONQUERY, PROP_VALIDATIONQUERY_TIMEOUT, PROP_INITCONNECTIONSQLS,
             PROP_ACCESSTOUNDERLYINGCONNECTIONALLOWED, PROP_REMOVEABANDONED, PROP_REMOVEABANDONEDTIMEOUT,
             PROP_LOGABANDONED, PROP_POOLPREPAREDSTATEMENTS, PROP_MAXOPENPREPAREDSTATEMENTS, PROP_CONNECTIONPROPERTIES,
-            PROP_FILTERS, PROP_EXCEPTION_SORTER, PROP_EXCEPTION_SORTER_CLASS_NAME, PROP_INIT };
+            PROP_FILTERS, PROP_EXCEPTION_SORTER, PROP_EXCEPTION_SORTER_CLASS_NAME, PROP_INIT, PROP_NAME };
 
     @Override
     public Object getObjectInstance(Object obj, Name name, Context nameCtx, Hashtable<?, ?> environment)

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -343,6 +343,7 @@ public SQLExpr primary() {
             case REPEAT:
             case TABLE:
             case TRUNCATE:
+            case EXCEPTION:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -343,6 +343,7 @@ public SQLExpr primary() {
             case REPEAT:
             case TABLE:
             case TRUNCATE:
+            case EXCEPTION:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_fill2.java
Patch:
@@ -84,8 +84,8 @@ public void run() {
                 break;
             }
         }
-        Assert.assertEquals(true, dataSource.isFull());
-        Assert.assertEquals(true, fillCount.get() > 0);
+        Assert.assertTrue("not full", dataSource.isFull());
+        Assert.assertTrue("fillCount zero", fillCount.get() > 0);
 
     }
 }

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_fill2.java
Patch:
@@ -84,8 +84,8 @@ public void run() {
                 break;
             }
         }
-        Assert.assertEquals(true, dataSource.isFull());
-        Assert.assertEquals(true, fillCount.get() > 0);
+        Assert.assertTrue("not full", dataSource.isFull());
+        Assert.assertTrue("fillCount zero", fillCount.get() > 0);
 
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlSelectParser.java
Patch:
@@ -238,7 +238,7 @@ public SQLTableSource parseTableSource() {
         return tableSrc;
     }
     
-    private MySqlUpdateStatement parseUpdateStatment() {
+    protected MySqlUpdateStatement parseUpdateStatment() {
         MySqlUpdateStatement update = new MySqlUpdateStatement();
 
         lexer.nextToken();

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlUpdateTest_6.java
Patch:
@@ -30,7 +30,7 @@
 public class MySqlUpdateTest_6 extends MysqlTest {
 
     public void test_0() throws Exception {
-        String sql = "/* 6445c36514623747244871009d62f9/0//sub_order_id:1462374729595/order_id:1462374729594/ */"
+        String sql = "/* 6445c36514623747244871009d62f9/0//sub_order_id:1234567890/order_id:123456/ */"
                 + "SELECT id, user_id, item_id, sku_id, flag"
                 + " , sellable_quantity, fff03, status, feature, feature_lock"
                 + " , version, gmt_create, gmt_modified, root_id, parent_id, dist_type, dist_id"

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -372,9 +372,9 @@ public void parseFrom(SQLSelectQueryBlock queryBlock) {
         if (lexer.token() != Token.FROM) {
             return;
         }
-
+        
         lexer.nextToken();
-
+        
         queryBlock.setFrom(parseTableSource());
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -1766,7 +1766,7 @@ public SQLCreateTableParser getSQLCreateTableParser() {
         return new SQLCreateTableParser(this.exprParser);
     }
 
-    public SQLSelectStatement parseSelect() {
+    public SQLStatement parseSelect() {
         SQLSelectParser selectParser = createSQLSelectParser();
         SQLSelect select = selectParser.select();
         return new SQLSelectStatement(select);

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -372,9 +372,9 @@ public void parseFrom(SQLSelectQueryBlock queryBlock) {
         if (lexer.token() != Token.FROM) {
             return;
         }
-
+        
         lexer.nextToken();
-
+        
         queryBlock.setFrom(parseTableSource());
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -1766,7 +1766,7 @@ public SQLCreateTableParser getSQLCreateTableParser() {
         return new SQLCreateTableParser(this.exprParser);
     }
 
-    public SQLSelectStatement parseSelect() {
+    public SQLStatement parseSelect() {
         SQLSelectParser selectParser = createSQLSelectParser();
         SQLSelect select = selectParser.select();
         return new SQLSelectStatement(select);

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/DropTableTest.java
Patch:
@@ -33,15 +33,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("films")));
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("distributors")));

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGAlterTableTest.java
Patch:
@@ -33,15 +33,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("dependencies")));
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGAlterTableTest1.java
Patch:
@@ -33,15 +33,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("measure_data")));
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGAlterTableTest2.java
Patch:
@@ -33,15 +33,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("reviews")));
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGAlterTableTest3.java
Patch:
@@ -39,15 +39,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("issues")));
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_0.java
Patch:
@@ -36,15 +36,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("my_first_table")));
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_1.java
Patch:
@@ -37,15 +37,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("products")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_2.java
Patch:
@@ -37,15 +37,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("products")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_3.java
Patch:
@@ -37,15 +37,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("products")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_4.java
Patch:
@@ -58,8 +58,8 @@ public void test_0() throws Exception {
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         stmt.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("products")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_5.java
Patch:
@@ -50,8 +50,8 @@ public void test_0() throws Exception {
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         stmt.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("products")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGInsertTest2.java
Patch:
@@ -35,15 +35,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("films")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest.java
Patch:
@@ -41,7 +41,7 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
@@ -65,7 +65,7 @@ public void test_1() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
         
         Assert.assertEquals(1, statementList.size());
         
@@ -89,7 +89,7 @@ public void test_2() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
         
         Assert.assertEquals(1, statementList.size());
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest18.java
Patch:
@@ -74,9 +74,9 @@ public void test_0() throws Exception {
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         stmt.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
-        System.out.println("coditions : " + visitor.getConditions());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("coditions : " + visitor.getConditions());
 
         Assert.assertEquals(1, visitor.getColumns().size());
         Assert.assertEquals(1, visitor.getTables().size());

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest24.java
Patch:
@@ -45,9 +45,9 @@ public void test_0() throws Exception {
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         stmt.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
-        System.out.println("coditions : " + visitor.getConditions());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("coditions : " + visitor.getConditions());
 
         Assert.assertEquals(1, visitor.getColumns().size());
         Assert.assertEquals(1, visitor.getTables().size());

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSetTest.java
Patch:
@@ -40,7 +40,7 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGShowTest.java
Patch:
@@ -34,15 +34,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
         
         {
             WallProvider provider = new PGWallProvider();

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/DropTableTest.java
Patch:
@@ -33,15 +33,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("films")));
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("distributors")));

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGAlterTableTest.java
Patch:
@@ -33,15 +33,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("dependencies")));
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGAlterTableTest1.java
Patch:
@@ -33,15 +33,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("measure_data")));
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGAlterTableTest2.java
Patch:
@@ -33,15 +33,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("reviews")));
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGAlterTableTest3.java
Patch:
@@ -39,15 +39,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("issues")));
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_0.java
Patch:
@@ -36,15 +36,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("my_first_table")));
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_1.java
Patch:
@@ -37,15 +37,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("products")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_2.java
Patch:
@@ -37,15 +37,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("products")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_3.java
Patch:
@@ -37,15 +37,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("products")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_4.java
Patch:
@@ -58,8 +58,8 @@ public void test_0() throws Exception {
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         stmt.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("products")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGCreateTableTest_5.java
Patch:
@@ -50,8 +50,8 @@ public void test_0() throws Exception {
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         stmt.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("products")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGInsertTest2.java
Patch:
@@ -35,15 +35,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("films")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest.java
Patch:
@@ -41,7 +41,7 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
@@ -65,7 +65,7 @@ public void test_1() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
         
         Assert.assertEquals(1, statementList.size());
         
@@ -89,7 +89,7 @@ public void test_2() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
         
         Assert.assertEquals(1, statementList.size());
         

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest18.java
Patch:
@@ -74,9 +74,9 @@ public void test_0() throws Exception {
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         stmt.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
-        System.out.println("coditions : " + visitor.getConditions());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("coditions : " + visitor.getConditions());
 
         Assert.assertEquals(1, visitor.getColumns().size());
         Assert.assertEquals(1, visitor.getTables().size());

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest24.java
Patch:
@@ -45,9 +45,9 @@ public void test_0() throws Exception {
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         stmt.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
-        System.out.println("coditions : " + visitor.getConditions());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("coditions : " + visitor.getConditions());
 
         Assert.assertEquals(1, visitor.getColumns().size());
         Assert.assertEquals(1, visitor.getTables().size());

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSetTest.java
Patch:
@@ -40,7 +40,7 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGShowTest.java
Patch:
@@ -34,15 +34,15 @@ public void test_0() throws Exception {
         PGSQLStatementParser parser = new PGSQLStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();
         SQLStatement statemen = statementList.get(0);
-        print(statementList);
+//        print(statementList);
 
         Assert.assertEquals(1, statementList.size());
 
         PGSchemaStatVisitor visitor = new PGSchemaStatVisitor();
         statemen.accept(visitor);
 
-        System.out.println("Tables : " + visitor.getTables());
-        System.out.println("fields : " + visitor.getColumns());
+//        System.out.println("Tables : " + visitor.getTables());
+//        System.out.println("fields : " + visitor.getColumns());
         
         {
             WallProvider provider = new PGWallProvider();

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement2.java
Patch:
@@ -85,7 +85,7 @@ public void test_stmtCache() throws Exception {
             }
         }
 
-        for (int i = 0; i < 1000 * 1; ++i) {
+        for (int i = 0; i < 10 * 1; ++i) {
             Connection conn = dataSource.getConnection();
             PreparedStatement stmt = conn.prepareStatement("SELECT " + i);
             stmt.execute();

File: src/test/java/com/alibaba/druid/pvt/support/monitor/MonitorDaoJdbcImplTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.support.monitor;
+package com.alibaba.druid.pvt.support.monitor;
 
 import java.util.Collections;
 import java.util.Date;

File: src/test/java/com/alibaba/druid/pvt/filter/wall/WallPerformanceTest_1.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.bvt.filter.wall;
+package com.alibaba.druid.pvt.filter.wall;
 
 import junit.framework.TestCase;
 

File: src/test/java/com/alibaba/druid/pvt/pool/AsyncCloseTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: src/test/java/com/alibaba/druid/pvt/pool/AsyncCloseTest1.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.lang.reflect.Field;
 import java.sql.Connection;

File: src/test/java/com/alibaba/druid/pvt/pool/AsyncCloseTest2.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.lang.reflect.Field;
 import java.sql.Connection;

File: src/test/java/com/alibaba/druid/pvt/pool/AsyncCloseTest3.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.lang.management.ManagementFactory;
 import java.lang.reflect.Field;

File: src/test/java/com/alibaba/druid/pvt/pool/Large10ConcurrentTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.lang.management.ManagementFactory;
 import java.sql.Connection;

File: src/test/java/com/alibaba/druid/pvt/pool/Large10KTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.lang.management.ManagementFactory;
 import java.sql.Connection;

File: src/test/java/com/alibaba/druid/pvt/pool/TestConcurrent.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.sql.Connection;
 import java.sql.ResultSet;

File: src/test/java/com/alibaba/druid/pvt/pool/TestIdle3_Concurrent.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.sql.Connection;
 import java.util.concurrent.CountDownLatch;

File: src/test/java/com/alibaba/druid/pvt/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.sql.Connection;
 import java.util.Random;

File: src/test/java/com/alibaba/druid/pvt/pool/TestIdle3_Concurrent_Starvation.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;

File: src/test/java/com/alibaba/druid/pvt/filter/wall/WallPerformanceTest_1.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.bvt.filter.wall;
+package com.alibaba.druid.pvt.filter.wall;
 
 import junit.framework.TestCase;
 

File: src/test/java/com/alibaba/druid/pvt/pool/AsyncCloseTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.sql.Connection;
 import java.sql.SQLException;

File: src/test/java/com/alibaba/druid/pvt/pool/AsyncCloseTest1.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.lang.reflect.Field;
 import java.sql.Connection;

File: src/test/java/com/alibaba/druid/pvt/pool/AsyncCloseTest2.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.lang.reflect.Field;
 import java.sql.Connection;

File: src/test/java/com/alibaba/druid/pvt/pool/AsyncCloseTest3.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.lang.management.ManagementFactory;
 import java.lang.reflect.Field;

File: src/test/java/com/alibaba/druid/pvt/pool/Large10ConcurrentTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.lang.management.ManagementFactory;
 import java.sql.Connection;

File: src/test/java/com/alibaba/druid/pvt/pool/Large10KTest.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.lang.management.ManagementFactory;
 import java.sql.Connection;

File: src/test/java/com/alibaba/druid/pvt/pool/TestConcurrent.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.sql.Connection;
 import java.sql.ResultSet;

File: src/test/java/com/alibaba/druid/pvt/pool/TestIdle3_Concurrent.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.sql.Connection;
 import java.util.concurrent.CountDownLatch;

File: src/test/java/com/alibaba/druid/pvt/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.sql.Connection;
 import java.util.Random;

File: src/test/java/com/alibaba/druid/pvt/pool/TestIdle3_Concurrent_Starvation.java
Patch:
@@ -13,7 +13,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.alibaba.druid.bvt.pool;
+package com.alibaba.druid.pvt.pool;
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;

File: src/main/java/com/alibaba/druid/filter/FilterManager.java
Patch:
@@ -46,7 +46,7 @@ public class FilterManager {
                     aliasMap.put(name, (String) entry.getValue());
                 }
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             LOG.error("load filter config error", e);
         }
     }

File: src/main/java/com/alibaba/druid/filter/FilterManager.java
Patch:
@@ -46,7 +46,7 @@ public class FilterManager {
                     aliasMap.put(name, (String) entry.getValue());
                 }
             }
-        } catch (Exception e) {
+        } catch (Throwable e) {
             LOG.error("load filter config error", e);
         }
     }

File: src/main/java/com/alibaba/druid/sql/dialect/teradata/parser/TeradataStatementParser.java
Patch:
@@ -118,7 +118,8 @@ public SQLInsertStatement parseInsert() {
                 break;
             }
 
-        } else if (lexer.token() == (Token.SELECT)) {
+        } else if (lexer.token() == (Token.SELECT) 
+        		|| lexer.token() == (Token.SEL)) {
             SQLSelect select = this.exprParser.createSelectParser().select();
             select.setParent(insertStatement);
             insertStatement.setQuery(select);

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -342,6 +342,7 @@ public SQLExpr primary() {
             case OPEN:
             case REPEAT:
             case TABLE:
+            case TRUNCATE:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -342,6 +342,7 @@ public SQLExpr primary() {
             case OPEN:
             case REPEAT:
             case TABLE:
+            case TRUNCATE:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -27,7 +27,7 @@
 public class MySqlUtils {
 
     public static XAConnection createXAConnection(Connection physicalConn) throws SQLException {
-    	com.mysql.jdbc.ConnectionImpl mysqlConn = (com.mysql.jdbc.ConnectionImpl)physicalConn;
+        com.mysql.jdbc.Connection mysqlConn = (com.mysql.jdbc.Connection)physicalConn;
     	if(mysqlConn.getPinGlobalTxToPhysicalConnection()) {
 
     		if (!Util.isJdbc4()) {

File: src/main/java/com/alibaba/druid/util/MySqlUtils.java
Patch:
@@ -27,7 +27,7 @@
 public class MySqlUtils {
 
     public static XAConnection createXAConnection(Connection physicalConn) throws SQLException {
-    	com.mysql.jdbc.ConnectionImpl mysqlConn = (com.mysql.jdbc.ConnectionImpl)physicalConn;
+        com.mysql.jdbc.Connection mysqlConn = (com.mysql.jdbc.Connection)physicalConn;
     	if(mysqlConn.getPinGlobalTxToPhysicalConnection()) {
 
     		if (!Util.isJdbc4()) {

File: src/test/java/com/alibaba/druid/bvt/pool/AsyncCloseTest3.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.proxy.jdbc.StatementProxy;
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.Log4jImpl;
-import com.alibaba.druid.support.logging.LogFactory;
 import com.alibaba.druid.support.logging.NoLoggingImpl;
 
 import junit.framework.TestCase;
@@ -47,8 +46,6 @@ protected void setUp() throws Exception {
 
         System.gc();
 
-        log4jLog = ((Log4jImpl) LogFactory.getLog(DruidDataSource.class)).getLog();
-
         Field logField = DruidDataSource.class.getDeclaredField("LOG");
         logField.setAccessible(true);
         Log dataSourceLog = (Log) logField.get(null);

File: src/test/java/com/alibaba/druid/bvt/pool/AsyncCloseTest3.java
Patch:
@@ -22,7 +22,6 @@
 import com.alibaba.druid.proxy.jdbc.StatementProxy;
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.Log4jImpl;
-import com.alibaba.druid.support.logging.LogFactory;
 import com.alibaba.druid.support.logging.NoLoggingImpl;
 
 import junit.framework.TestCase;
@@ -47,8 +46,6 @@ protected void setUp() throws Exception {
 
         System.gc();
 
-        log4jLog = ((Log4jImpl) LogFactory.getLog(DruidDataSource.class)).getLog();
-
         Field logField = DruidDataSource.class.getDeclaredField("LOG");
         logField.setAccessible(true);
         Log dataSourceLog = (Log) logField.get(null);

File: src/main/java/com/alibaba/druid/support/logging/Log.java
Patch:
@@ -36,6 +36,8 @@ public interface Log {
     void warn(String msg);
 
     void warn(String msg, Throwable e);
+    
+    boolean isErrorEnabled();
 
     int getErrorCount();
 

File: src/main/java/com/alibaba/druid/support/logging/Log.java
Patch:
@@ -36,6 +36,8 @@ public interface Log {
     void warn(String msg);
 
     void warn(String msg, Throwable e);
+    
+    boolean isErrorEnabled();
 
     int getErrorCount();
 

File: src/test/java/com/alibaba/druid/bvt/pool/AsyncCloseTest3.java
Patch:
@@ -125,12 +125,12 @@ public void run() {
 
                     CloseTask closeTask = new CloseTask(conn, closeLatch);
 
-                    closeExecutor.submit(closeTask);
-                    closeExecutor.submit(closeTask); // dup close
-
                     try {
                         stmt.execute("select 1");
                     } finally {
+                        closeExecutor.submit(closeTask);
+                        closeExecutor.submit(closeTask); // dup close
+                        
                         stmt.close();
                         conn.close();
                     }

File: src/test/java/com/alibaba/druid/bvt/pool/AsyncCloseTest3.java
Patch:
@@ -125,12 +125,12 @@ public void run() {
 
                     CloseTask closeTask = new CloseTask(conn, closeLatch);
 
-                    closeExecutor.submit(closeTask);
-                    closeExecutor.submit(closeTask); // dup close
-
                     try {
                         stmt.execute("select 1");
                     } finally {
+                        closeExecutor.submit(closeTask);
+                        closeExecutor.submit(closeTask); // dup close
+                        
                         stmt.close();
                         conn.close();
                     }

File: src/test/java/com/alibaba/druid/bvt/pool/AsyncCloseTest3.java
Patch:
@@ -35,6 +35,7 @@ public class AsyncCloseTest3 extends TestCase {
     private Level             oldLevel;
 
     protected void setUp() throws Exception {
+        LogFactory.selectLog4JLogging();
         log = ((Log4jImpl) LogFactory.getLog(DruidDataSource.class)).getLog();
         oldLevel = log.getLevel();
         log.setLevel(Level.FATAL);

File: src/test/java/com/alibaba/druid/bvt/pool/AsyncCloseTest3.java
Patch:
@@ -35,6 +35,7 @@ public class AsyncCloseTest3 extends TestCase {
     private Level             oldLevel;
 
     protected void setUp() throws Exception {
+        LogFactory.selectLog4JLogging();
         log = ((Log4jImpl) LogFactory.getLog(DruidDataSource.class)).getLog();
         oldLevel = log.getLevel();
         log.setLevel(Level.FATAL);

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceConverter.java
Patch:
@@ -25,7 +25,7 @@
 import com.alibaba.druid.support.logging.LogFactory;
 
 /**
- * 支持simple-jndi <br/>
+ * 支持simple-jndi
  * <h1>配置示例：</h1>
  * <pre>
 pgDruidTest/converter=com.alibaba.druid.pool.DruidDataSourceConverter
@@ -45,7 +45,7 @@
 pgDruidTest/filters=stat,config,log4j
 pgDruidTest/connectionProperties=druid.log.stmt.executableSql=true
    </pre>
- * date: 2016年1月31日 下午12:54:10 <br/>
+ * date: 2016年1月31日 下午12:54:10 
  * @author jinjuma@yeah.net
  */
 public class DruidDataSourceConverter implements Converter {

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -327,6 +327,7 @@ public void setStatus(int statusCode) {
             this.status = statusCode;
         }
 
+        @SuppressWarnings("deprecation")
         public void setStatus(int statusCode, String statusMessage) {
             super.setStatus(statusCode, statusMessage);
             this.status = statusCode;

File: src/test/java/com/alibaba/druid/bvt/sql/oceanbase/OceanbaseHintTest_parallel.java
Patch:
@@ -50,7 +50,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         Assert.assertEquals(1, visitor.getTables().size());
-        Assert.assertEquals(1, visitor.getColumns().size());
+        Assert.assertEquals(0, visitor.getColumns().size());
         Assert.assertEquals(0, visitor.getConditions().size());
 
 //        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("t_basic_store")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest23.java
Patch:
@@ -53,9 +53,9 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sys.user$")));
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("dba_jobs")));
 
-        Assert.assertEquals(10, visitor.getColumns().size());
+        Assert.assertEquals(9, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("sys.user$", "name")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -327,6 +327,7 @@ public void setStatus(int statusCode) {
             this.status = statusCode;
         }
 
+        @SuppressWarnings("deprecation")
         public void setStatus(int statusCode, String statusMessage) {
             super.setStatus(statusCode, statusMessage);
             this.status = statusCode;

File: src/test/java/com/alibaba/druid/bvt/sql/oceanbase/OceanbaseHintTest_parallel.java
Patch:
@@ -50,7 +50,7 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
         Assert.assertEquals(1, visitor.getTables().size());
-        Assert.assertEquals(1, visitor.getColumns().size());
+        Assert.assertEquals(0, visitor.getColumns().size());
         Assert.assertEquals(0, visitor.getConditions().size());
 
 //        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("t_basic_store")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest23.java
Patch:
@@ -53,9 +53,9 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sys.user$")));
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("dba_jobs")));
 
-        Assert.assertEquals(10, visitor.getColumns().size());
+        Assert.assertEquals(9, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("sys.user$", "name")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_0.java
Patch:
@@ -47,13 +47,12 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
         
         Assert.assertEquals(1, visitor.getTables().size());
-        Assert.assertEquals(3, visitor.getColumns().size());
+        Assert.assertEquals(2, visitor.getColumns().size());
         Assert.assertEquals(0, visitor.getConditions().size());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("mytable")));
 
         Assert.assertTrue(visitor.getColumns().contains(new Column("mytable", "last_name")));
         Assert.assertTrue(visitor.getColumns().contains(new Column("mytable", "first_name")));
-        Assert.assertTrue(visitor.getColumns().contains(new Column("mytable", "full_name")));
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest3.java
Patch:
@@ -51,7 +51,7 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("tab$")));
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sys.mon_mods_all$")));
 
-        Assert.assertEquals(15, visitor.getColumns().size());
+        Assert.assertEquals(16, visitor.getColumns().size());
 
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "employee_id")));
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "salary")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest6.java
Patch:
@@ -58,7 +58,7 @@ public void test_0() throws Exception {
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("console_stb_ipstatus")));
 
-        Assert.assertEquals(7, visitor.getColumns().size());
+        Assert.assertEquals(6, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "employee_id")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "salary")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest19.java
Patch:
@@ -61,7 +61,7 @@ public void test_0() throws Exception {
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sys.dba_data_files")));
 
-        Assert.assertEquals(17, visitor.getColumns().size());
+        Assert.assertEquals(18, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest27.java
Patch:
@@ -55,7 +55,7 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("search.retl_table_config_search")));
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sys.col$")));
 
-        Assert.assertEquals(20, visitor.getColumns().size());
+        Assert.assertEquals(19, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest38.java
Patch:
@@ -79,7 +79,7 @@ public void test_0() throws Exception {
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("acduser.vw_acd_info")));
 
-        Assert.assertEquals(15, visitor.getColumns().size());
+        Assert.assertEquals(12, visitor.getColumns().size());
 
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("acduser.vw_acd_info", "xzqh")));
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("acduser.vw_acd_info", "sglx")));

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_0.java
Patch:
@@ -47,13 +47,12 @@ public void test_0() throws Exception {
         System.out.println("orderBy : " + visitor.getOrderByColumns());
         
         Assert.assertEquals(1, visitor.getTables().size());
-        Assert.assertEquals(3, visitor.getColumns().size());
+        Assert.assertEquals(2, visitor.getColumns().size());
         Assert.assertEquals(0, visitor.getConditions().size());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("mytable")));
 
         Assert.assertTrue(visitor.getColumns().contains(new Column("mytable", "last_name")));
         Assert.assertTrue(visitor.getColumns().contains(new Column("mytable", "first_name")));
-        Assert.assertTrue(visitor.getColumns().contains(new Column("mytable", "full_name")));
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest3.java
Patch:
@@ -51,7 +51,7 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("tab$")));
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sys.mon_mods_all$")));
 
-        Assert.assertEquals(15, visitor.getColumns().size());
+        Assert.assertEquals(16, visitor.getColumns().size());
 
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "employee_id")));
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "salary")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest6.java
Patch:
@@ -58,7 +58,7 @@ public void test_0() throws Exception {
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("console_stb_ipstatus")));
 
-        Assert.assertEquals(7, visitor.getColumns().size());
+        Assert.assertEquals(6, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "employee_id")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "salary")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest19.java
Patch:
@@ -61,7 +61,7 @@ public void test_0() throws Exception {
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sys.dba_data_files")));
 
-        Assert.assertEquals(17, visitor.getColumns().size());
+        Assert.assertEquals(18, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest27.java
Patch:
@@ -55,7 +55,7 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("search.retl_table_config_search")));
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sys.col$")));
 
-        Assert.assertEquals(20, visitor.getColumns().size());
+        Assert.assertEquals(19, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest38.java
Patch:
@@ -79,7 +79,7 @@ public void test_0() throws Exception {
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("acduser.vw_acd_info")));
 
-        Assert.assertEquals(15, visitor.getColumns().size());
+        Assert.assertEquals(12, visitor.getColumns().size());
 
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("acduser.vw_acd_info", "xzqh")));
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("acduser.vw_acd_info", "sglx")));

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -19,7 +19,7 @@ public final class VERSION {
 
     public final static int MajorVersion    = 1;
     public final static int MinorVersion    = 0;
-    public final static int RevisionVersion = 17;
+    public final static int RevisionVersion = 18;
 
     public static String getVersionNumber() {
         return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion;

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -341,7 +341,7 @@ private static String count(SQLSelect select, String dbType) {
             if (option == SQLSetQuantifier.DISTINCT && queryBlock.getSelectList().size() == 1) {
                 SQLSelectItem firstItem = queryBlock.getSelectList().get(0);
                 SQLAggregateExpr exp = new SQLAggregateExpr("COUNT", SQLAggregateOption.DISTINCT);
-                exp.getArguments().add(firstItem.getExpr());
+                exp.addArgument(firstItem.getExpr());
                 firstItem.setExpr(exp);
                 queryBlock.setDistionOption(0);
             } else {
@@ -407,7 +407,7 @@ private static SQLSelectQueryBlock createQueryBlock(String dbType) {
     private static SQLSelectItem createCountItem(String dbType) {
         SQLAggregateExpr countExpr = new SQLAggregateExpr("COUNT");
 
-        countExpr.getArguments().add(new SQLAllColumnExpr());
+        countExpr.addArgument(new SQLAllColumnExpr());
 
         SQLSelectItem countItem = new SQLSelectItem(countExpr);
         return countItem;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLInsertStatement.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -741,7 +741,7 @@ public MySqlPrimaryKey parsePrimaryKey() {
 
         accept(Token.LPAREN);
         for (;;) {
-            primaryKey.getColumns().add(this.expr());
+            primaryKey.addColumn(this.expr());
             if (!(lexer.token() == (Token.COMMA))) {
                 break;
             } else {
@@ -780,7 +780,7 @@ public MySqlUnique parseUnique() {
 
         accept(Token.LPAREN);
         for (;;) {
-            unique.getColumns().add(this.expr());
+            unique.addColumn(this.expr());
             if (!(lexer.token() == (Token.COMMA))) {
                 break;
             } else {

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsCreateTableParser.java
Patch:
@@ -118,7 +118,7 @@ public SQLCreateTableStatement parseCrateTable(boolean acceptCreate) {
                 }
                 
                 SQLColumnDefinition column = this.exprParser.parseColumn();
-                stmt.getPartitionColumns().add(column);
+                stmt.addPartitionColumn(column);
                 
                 if (lexer.isKeepComments() && lexer.hasComment()) {
                     column.addAfterComment(lexer.readAndResetComments());

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsStatementParser.java
Patch:
@@ -243,7 +243,7 @@ public SQLStatement parseInsert() {
 
         for (;;) {
             OdpsInsert insert = parseOdpsInsert();
-            stmt.getItems().add(insert);
+            stmt.addItem(insert);
 
             if (lexer.token() != Token.INSERT) {
                 break;
@@ -285,7 +285,7 @@ public OdpsInsert parseOdpsInsert() {
                     SQLExpr ptValue = this.exprParser.expr();
                     ptExpr.setValue(ptValue);
                 }
-                insert.getPartitions().add(ptExpr);
+                insert.addPartition(ptExpr);
                 if (!(lexer.token() == (Token.COMMA))) {
                     break;
                 } else {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleCreateTableParser.java
Patch:
@@ -213,7 +213,7 @@ protected SQLPartitionByRange partitionByRange() {
         SQLPartitionByRange clause = new SQLPartitionByRange();
         for (;;) {
             SQLName column = this.exprParser.name();
-            clause.getColumns().add(column);
+            clause.addColumn(column);
 
             if (lexer.token() == Token.COMMA) {
                 lexer.nextToken();
@@ -278,7 +278,7 @@ protected void parsePartitionByRest(SQLPartitionBy clause) {
                 for (;;) {
                     SQLSubPartition subPartition = parseSubPartition();
 
-                    range.getSubPartitions().add(subPartition);
+                    range.addSubPartition(subPartition);
 
                     if (lexer.token() == Token.COMMA) {
                         lexer.nextToken();
@@ -295,7 +295,7 @@ protected void parsePartitionByRest(SQLPartitionBy clause) {
                 range.setSubPartitionsCount(subPartitionsCount);
             }
 
-            clause.getPartitions().add(range);
+            clause.addPartition(range);
 
             if (lexer.token() == Token.COMMA) {
                 lexer.nextToken();

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSQLStatementParser.java
Patch:
@@ -254,7 +254,7 @@ private PGWithQuery withQuery() {
 
             for (;;) {
                 SQLExpr expr = this.exprParser.expr();
-                withQuery.getColumns().add(expr);
+                withQuery.addColumn(expr);
                 if (lexer.token() == Token.COMMA) {
                     lexer.nextToken();
                     continue;

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerStatementParser.java
Patch:
@@ -168,7 +168,7 @@ public SQLStatement parseDeclare() {
         
         for (;;) {
             SQLDeclareItem item = new  SQLDeclareItem();
-            declareStatement.getItems().add(item);
+            declareStatement.addItem(item);
             
             item.setName(this.exprParser.name());
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLCreateTableParser.java
Patch:
@@ -154,7 +154,7 @@ protected SQLPartitionValue parsePartitionValues() {
                 SQLIdentifierExpr maxValue = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 maxValue.setParent(values);
-                values.getItems().add(maxValue);
+                values.addItem(maxValue);
             } else {
                 accept(Token.LPAREN);
                 this.exprParser.exprList(values.getItems(), values);

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -222,7 +222,7 @@ protected void withSubquery(SQLSelect select) {
                 entry.setSubQuery(select());
                 accept(Token.RPAREN);
 
-                withQueryClause.getEntries().add(entry);
+                withQueryClause.addEntry(entry);
 
                 if (lexer.token() == Token.COMMA) {
                     lexer.nextToken();

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -635,7 +635,7 @@ private static void checkUpdateForMultiTenant(WallVisitor visitor, SQLUpdateStat
         updateSetItem.setColumn(item);
         updateSetItem.setValue(value);
 
-        x.getItems().add(updateSetItem);
+        x.addItem(updateSetItem);
         visitor.setSqlModified(true);
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlASTVisitorAdapterTest.java
Patch:
@@ -19,7 +19,6 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlAlterTableImportTablespace;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlAlterTableModifyColumn;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlAlterTableOption;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlAlterTableStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlBinlogStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlCreateTableStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlCreateTableStatement.TableSpaceOption;
@@ -160,7 +159,6 @@ public void test_adapter() throws Exception {
         new MySqlShowSlaveStatusStatement().accept(adapter);
         new MySqlShowTableStatusStatement().accept(adapter);
         new MySqlShowTriggersStatement().accept(adapter);
-        new MySqlAlterTableStatement().accept(adapter);
         new MySqlRenameTableStatement().accept(adapter);
         new MySqlUnionQuery().accept(adapter);
         new MySqlUseIndexHint().accept(adapter);

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/visitor/OracleASTVisitorAdapterTest.java
Patch:
@@ -54,7 +54,6 @@
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTableModify;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTableMoveTablespace;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTableSplitPartition;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTableStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTableTruncatePartition;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTablespaceAddDataFile;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTablespaceStatement;
@@ -185,7 +184,6 @@ public void test_adapter() throws Exception {
         new OracleAlterProcedureStatement().accept(adapter);
         new OracleAlterTableDropPartition().accept(adapter);
         new OracleAlterTableTruncatePartition().accept(adapter);
-        new OracleAlterTableStatement().accept(adapter);
         new OracleAlterTableSplitPartition.TableSpaceItem().accept(adapter);
         new OracleAlterTableSplitPartition.UpdateIndexesClause().accept(adapter);
         new OracleAlterTableSplitPartition.NestedTablePartitionSpec().accept(adapter);

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -341,7 +341,7 @@ private static String count(SQLSelect select, String dbType) {
             if (option == SQLSetQuantifier.DISTINCT && queryBlock.getSelectList().size() == 1) {
                 SQLSelectItem firstItem = queryBlock.getSelectList().get(0);
                 SQLAggregateExpr exp = new SQLAggregateExpr("COUNT", SQLAggregateOption.DISTINCT);
-                exp.getArguments().add(firstItem.getExpr());
+                exp.addArgument(firstItem.getExpr());
                 firstItem.setExpr(exp);
                 queryBlock.setDistionOption(0);
             } else {
@@ -407,7 +407,7 @@ private static SQLSelectQueryBlock createQueryBlock(String dbType) {
     private static SQLSelectItem createCountItem(String dbType) {
         SQLAggregateExpr countExpr = new SQLAggregateExpr("COUNT");
 
-        countExpr.getArguments().add(new SQLAllColumnExpr());
+        countExpr.addArgument(new SQLAllColumnExpr());
 
         SQLSelectItem countItem = new SQLSelectItem(countExpr);
         return countItem;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLInsertStatement.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsCreateTableParser.java
Patch:
@@ -118,7 +118,7 @@ public SQLCreateTableStatement parseCrateTable(boolean acceptCreate) {
                 }
                 
                 SQLColumnDefinition column = this.exprParser.parseColumn();
-                stmt.getPartitionColumns().add(column);
+                stmt.addPartitionColumn(column);
                 
                 if (lexer.isKeepComments() && lexer.hasComment()) {
                     column.addAfterComment(lexer.readAndResetComments());

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsStatementParser.java
Patch:
@@ -243,7 +243,7 @@ public SQLStatement parseInsert() {
 
         for (;;) {
             OdpsInsert insert = parseOdpsInsert();
-            stmt.getItems().add(insert);
+            stmt.addItem(insert);
 
             if (lexer.token() != Token.INSERT) {
                 break;
@@ -285,7 +285,7 @@ public OdpsInsert parseOdpsInsert() {
                     SQLExpr ptValue = this.exprParser.expr();
                     ptExpr.setValue(ptValue);
                 }
-                insert.getPartitions().add(ptExpr);
+                insert.addPartition(ptExpr);
                 if (!(lexer.token() == (Token.COMMA))) {
                     break;
                 } else {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleCreateTableParser.java
Patch:
@@ -213,7 +213,7 @@ protected SQLPartitionByRange partitionByRange() {
         SQLPartitionByRange clause = new SQLPartitionByRange();
         for (;;) {
             SQLName column = this.exprParser.name();
-            clause.getColumns().add(column);
+            clause.addColumn(column);
 
             if (lexer.token() == Token.COMMA) {
                 lexer.nextToken();
@@ -278,7 +278,7 @@ protected void parsePartitionByRest(SQLPartitionBy clause) {
                 for (;;) {
                     SQLSubPartition subPartition = parseSubPartition();
 
-                    range.getSubPartitions().add(subPartition);
+                    range.addSubPartition(subPartition);
 
                     if (lexer.token() == Token.COMMA) {
                         lexer.nextToken();
@@ -295,7 +295,7 @@ protected void parsePartitionByRest(SQLPartitionBy clause) {
                 range.setSubPartitionsCount(subPartitionsCount);
             }
 
-            clause.getPartitions().add(range);
+            clause.addPartition(range);
 
             if (lexer.token() == Token.COMMA) {
                 lexer.nextToken();

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSQLStatementParser.java
Patch:
@@ -254,7 +254,7 @@ private PGWithQuery withQuery() {
 
             for (;;) {
                 SQLExpr expr = this.exprParser.expr();
-                withQuery.getColumns().add(expr);
+                withQuery.addColumn(expr);
                 if (lexer.token() == Token.COMMA) {
                     lexer.nextToken();
                     continue;

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerStatementParser.java
Patch:
@@ -168,7 +168,7 @@ public SQLStatement parseDeclare() {
         
         for (;;) {
             SQLDeclareItem item = new  SQLDeclareItem();
-            declareStatement.getItems().add(item);
+            declareStatement.addItem(item);
             
             item.setName(this.exprParser.name());
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLCreateTableParser.java
Patch:
@@ -16,7 +16,6 @@
 package com.alibaba.druid.sql.parser;
 
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.SQLPartition;
 import com.alibaba.druid.sql.ast.SQLPartitionValue;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
@@ -155,7 +154,7 @@ protected SQLPartitionValue parsePartitionValues() {
                 SQLIdentifierExpr maxValue = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 maxValue.setParent(values);
-                values.getItems().add(maxValue);
+                values.addItem(maxValue);
             } else {
                 accept(Token.LPAREN);
                 this.exprParser.exprList(values.getItems(), values);

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -222,7 +222,7 @@ protected void withSubquery(SQLSelect select) {
                 entry.setSubQuery(select());
                 accept(Token.RPAREN);
 
-                withQueryClause.getEntries().add(entry);
+                withQueryClause.addEntry(entry);
 
                 if (lexer.token() == Token.COMMA) {
                     lexer.nextToken();

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -635,7 +635,7 @@ private static void checkUpdateForMultiTenant(WallVisitor visitor, SQLUpdateStat
         updateSetItem.setColumn(item);
         updateSetItem.setValue(value);
 
-        x.getItems().add(updateSetItem);
+        x.addItem(updateSetItem);
         visitor.setSqlModified(true);
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlASTVisitorAdapterTest.java
Patch:
@@ -19,7 +19,6 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlAlterTableImportTablespace;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlAlterTableModifyColumn;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlAlterTableOption;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlAlterTableStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlBinlogStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlCreateTableStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlCreateTableStatement.TableSpaceOption;
@@ -160,7 +159,6 @@ public void test_adapter() throws Exception {
         new MySqlShowSlaveStatusStatement().accept(adapter);
         new MySqlShowTableStatusStatement().accept(adapter);
         new MySqlShowTriggersStatement().accept(adapter);
-        new MySqlAlterTableStatement().accept(adapter);
         new MySqlRenameTableStatement().accept(adapter);
         new MySqlUnionQuery().accept(adapter);
         new MySqlUseIndexHint().accept(adapter);

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/visitor/OracleASTVisitorAdapterTest.java
Patch:
@@ -54,7 +54,6 @@
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTableModify;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTableMoveTablespace;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTableSplitPartition;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTableStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTableTruncatePartition;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTablespaceAddDataFile;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleAlterTablespaceStatement;
@@ -185,7 +184,6 @@ public void test_adapter() throws Exception {
         new OracleAlterProcedureStatement().accept(adapter);
         new OracleAlterTableDropPartition().accept(adapter);
         new OracleAlterTableTruncatePartition().accept(adapter);
-        new OracleAlterTableStatement().accept(adapter);
         new OracleAlterTableSplitPartition.TableSpaceItem().accept(adapter);
         new OracleAlterTableSplitPartition.UpdateIndexesClause().accept(adapter);
         new OracleAlterTableSplitPartition.NestedTablePartitionSpec().accept(adapter);

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1933,7 +1933,7 @@ public void run() {
                 try {
                     connection = createPhysicalConnection();
                 } catch (SQLException e) {
-                    LOG.error("create connection error, url: " + jdbcUrl, e);
+                    LOG.error("create connection error, url: " + jdbcUrl + ", errorCode " + e.getErrorCode() + ", state " + e.getSQLState(), e);
 
                     errorCount++;
                     

File: src/main/java/com/alibaba/druid/filter/AutoLoad.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.annotation.Target;
 
 /**
- * @author sandzhang<sandzhagntoo@gmail.com>
+ * @author sandzhang [sandzhagntoo@gmail.com]
  */
 
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/com/alibaba/druid/filter/Filter.java
Patch:
@@ -56,7 +56,7 @@
 import java.util.Properties;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface Filter extends Wrapper {
 

File: src/main/java/com/alibaba/druid/filter/FilterAdapter.java
Patch:
@@ -55,7 +55,7 @@
 /**
  * 提供JdbcFilter的基本实现，使得实现一个JdbcFilter更容易。
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public abstract class FilterAdapter extends NotificationBroadcasterSupport implements Filter {
 

File: src/main/java/com/alibaba/druid/filter/FilterChain.java
Patch:
@@ -53,7 +53,7 @@
 import com.alibaba.druid.proxy.jdbc.StatementProxy;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface FilterChain {
 

File: src/main/java/com/alibaba/druid/filter/FilterChainImpl.java
Patch:
@@ -66,7 +66,7 @@
 import com.alibaba.druid.proxy.jdbc.StatementProxyImpl;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class FilterChainImpl implements FilterChain {
 

File: src/main/java/com/alibaba/druid/filter/FilterEventAdapter.java
Patch:
@@ -25,7 +25,7 @@
 import com.alibaba.druid.proxy.jdbc.StatementProxy;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public abstract class FilterEventAdapter extends FilterAdapter {
 

File: src/main/java/com/alibaba/druid/filter/encoding/EncodingConvertFilter.java
Patch:
@@ -35,7 +35,7 @@
 import com.alibaba.druid.util.Utils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class EncodingConvertFilter extends FilterAdapter {
 

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilter.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.logging.impl.Log4JLogger;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class CommonsLogFilter extends LogFilter {
 

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilterMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.filter.logging;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface CommonsLogFilterMBean extends LogFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilter.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.log4j.Logger;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class Log4jFilter extends LogFilter implements Log4jFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilterMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.filter.logging;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface Log4jFilterMBean extends LogFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -38,7 +38,7 @@
 import com.alibaba.druid.util.JdbcUtils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public abstract class LogFilter extends FilterEventAdapter implements LogFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/logging/LogFilterMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.filter.logging;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface LogFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -53,7 +53,7 @@
 import com.alibaba.druid.support.profile.Profiler;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class StatFilter extends FilterEventAdapter implements StatFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.filter.stat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface StatFilterMBean {
     boolean isMergeSql();

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public final class DruidConnectionHolder {
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -96,8 +96,8 @@
 import com.alibaba.druid.wall.WallProviderStatValue;
 
 /**
- * @author ljw<ljw2083@alibaba-inc.com>
- * @author wenshao<szujobs@hotmail.com>
+ * @author ljw [ljw2083@alibaba-inc.com]
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSource extends DruidAbstractDataSource 
     implements DruidDataSourceMBean
@@ -1050,7 +1050,6 @@ public DruidPooledConnection getConnectionDirect(long maxWaitMillis) throws SQLE
      * 抛弃连接，不进行回收，而是抛弃
      * 
      * @param realConnection
-     * @throws SQLException
      */
     public void discardConnection(Connection realConnection) {
         JdbcUtils.close(realConnection);

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceMBean.java
Patch:
@@ -21,7 +21,7 @@
 import javax.management.ObjectName;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface DruidDataSourceMBean extends DruidAbstractDataSourceMBean {
     long getResetCount();

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLogger.java
Patch:
@@ -20,7 +20,7 @@
 import com.alibaba.druid.support.logging.Log;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  * @since 0.2.19
  */
 public interface DruidDataSourceStatLogger {

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerAdapter.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  * @since 0.2.21
  */
 public class DruidDataSourceStatLoggerAdapter implements DruidDataSourceStatLogger {

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerImpl.java
Patch:
@@ -28,7 +28,7 @@
 import com.alibaba.druid.support.logging.LogFactory;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  * @since 0.2.19
  */
 public class DruidDataSourceStatLoggerImpl extends DruidDataSourceStatLoggerAdapter {

File: src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java
Patch:
@@ -35,7 +35,7 @@
 import com.alibaba.druid.proxy.jdbc.CallableStatementProxy;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidPooledCallableStatement extends DruidPooledPreparedStatement implements CallableStatement {
 

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -49,7 +49,7 @@
 import com.alibaba.druid.support.logging.LogFactory;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidPooledConnection extends PoolableWrapper implements javax.sql.PooledConnection, Connection {
 

File: src/main/java/com/alibaba/druid/pool/DruidPooledPreparedStatement.java
Patch:
@@ -43,7 +43,7 @@
 import com.alibaba.druid.util.OracleUtils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidPooledPreparedStatement extends DruidPooledStatement implements PreparedStatement {
 

File: src/main/java/com/alibaba/druid/pool/DruidPooledResultSet.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Calendar;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public final class DruidPooledResultSet extends PoolableWrapper implements ResultSet {
 

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -28,7 +28,7 @@
 import com.alibaba.druid.support.logging.LogFactory;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidPooledStatement extends PoolableWrapper implements Statement {
 

File: src/main/java/com/alibaba/druid/pool/PoolableWrapper.java
Patch:
@@ -21,7 +21,7 @@
 import java.sql.Wrapper;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class PoolableWrapper implements Wrapper {
 

File: src/main/java/com/alibaba/druid/pool/PreparedStatementHolder.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.PreparedStatement;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public final class PreparedStatementHolder {
 

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -30,7 +30,7 @@
 import com.alibaba.druid.util.OracleUtils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class PreparedStatementPool {
 

File: src/main/java/com/alibaba/druid/pool/ValidConnectionCheckerAdapter.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Properties;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  * @since 0.2.21
  */
 public class ValidConnectionCheckerAdapter implements ValidConnectionChecker {

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -48,7 +48,7 @@
 import com.alibaba.druid.util.JdbcUtils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDriver implements Driver, DruidDriverMBean {
 

File: src/main/java/com/alibaba/druid/proxy/DruidDriverMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.proxy;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface DruidDriverMBean {
     String getDruidVersion();

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxy.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.CallableStatement;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface CallableStatementProxy extends CallableStatement, PreparedStatementProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxyImpl.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.Calendar;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class CallableStatementProxyImpl extends PreparedStatementProxyImpl implements CallableStatementProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxy.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Clob;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface ClobProxy extends Clob {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxyImpl.java
Patch:
@@ -26,7 +26,7 @@
 import com.alibaba.druid.filter.FilterChainImpl;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class ClobProxyImpl implements ClobProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxy.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Properties;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface ConnectionProxy extends Connection, WrapperProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxyImpl.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.concurrent.Executor;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class ConnectionProxyImpl extends WrapperProxyImpl implements ConnectionProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxy.java
Patch:
@@ -23,7 +23,7 @@
 import com.alibaba.druid.stat.JdbcDataSourceStat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface DataSourceProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyConfig.java
Patch:
@@ -24,7 +24,7 @@
 import com.alibaba.druid.filter.Filter;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DataSourceProxyConfig {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImpl.java
Patch:
@@ -39,7 +39,7 @@
 import com.alibaba.druid.util.Utils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DataSourceProxyImpl implements DataSourceProxy, DataSourceProxyImplMBean {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImplMBean.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Date;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface DataSourceProxyImplMBean {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameter.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Calendar;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface JdbcParameter {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxy.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface PreparedStatementProxy extends PreparedStatement, StatementProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -43,7 +43,7 @@
 import com.alibaba.druid.proxy.jdbc.JdbcParameter.TYPE;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class PreparedStatementProxyImpl extends StatementProxyImpl implements PreparedStatementProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxy.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.stat.JdbcSqlStat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface ResultSetProxy extends ResultSet, WrapperProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxyImpl.java
Patch:
@@ -43,7 +43,7 @@
 import com.alibaba.druid.stat.JdbcSqlStat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class ResultSetProxyImpl extends WrapperProxyImpl implements ResultSetProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxy.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.stat.JdbcSqlStat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface StatementProxy extends Statement, WrapperProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxyImpl.java
Patch:
@@ -30,7 +30,7 @@
 import com.alibaba.druid.stat.JdbcSqlStat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class StatementProxyImpl extends WrapperProxyImpl implements StatementProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxy.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface WrapperProxy extends Wrapper {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxyImpl.java
Patch:
@@ -23,7 +23,7 @@
 import com.alibaba.druid.filter.FilterChain;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public abstract class WrapperProxyImpl implements WrapperProxy {
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOperator.java
Patch:
@@ -19,7 +19,6 @@
  * 
  * 二元操作符
  * @author wenshao 2011-5-20 下午12:32:02
- * @formatter:off
  */
 public enum SQLBinaryOperator {
     Union("UNION", 0), 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlCaseStatement.java
Patch:
@@ -26,9 +26,7 @@
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 /**
  * 
- * @Description: MySql procedure Case statement
- * @author zz email:455910092@qq.com
- * @version V1.0
+ * @author zz [455910092@qq.com]
  */
 public class MySqlCaseStatement extends MySqlStatementImpl{
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -91,9 +91,6 @@ public class OracleExprParser extends SQLExprParser {
 
     public boolean                allowStringAdditive = false;
 
-    /**
-     * @formatter:off
-     */
     public static final String[] AGGREGATE_FUNCTIONS = {
                                                           "AVG", // 
                                                           "CORR", // 

File: src/main/java/com/alibaba/druid/sql/parser/Keywords.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class Keywords {
 

File: src/main/java/com/alibaba/druid/sql/parser/LayoutCharacters.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.sql.parser;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface LayoutCharacters {
 
@@ -46,7 +46,6 @@ public interface LayoutCharacters {
     final static byte CR     = 0xD;
 
     /**
-     * QS_TODO 为什么不是0x0？<br/>
      * End of input character. Used as a sentinel to denote the character one beyond the last defined character in a
      * source file.
      */

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.List;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class Lexer {
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLParseException.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.DruidRuntimeException;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 @SuppressWarnings("serial")
 @Deprecated

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -18,8 +18,7 @@
 /**
  * 
  * SQL Token 
- * @author wenshao 2011-5-18 下午05:16:49
- * @formatter:off
+ * @author wenshao [szujobs@hotmail.com]
  */
 public enum Token {
     SELECT("SELECT"), 

File: src/main/java/com/alibaba/druid/stat/DruidStatService.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * 注意：避免直接调用Druid相关对象例如DruidDataSource等，相关调用要到DruidStatManagerFacade里用反射实现
  * 
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang[sandzhangtoo@gmail.com]
  */
 public final class DruidStatService implements DruidStatServiceMBean {
 

File: src/main/java/com/alibaba/druid/stat/JdbcConnectionStat.java
Patch:
@@ -34,7 +34,7 @@
 import com.alibaba.druid.util.JMXUtils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class JdbcConnectionStat implements JdbcConnectionStatMBean {
 

File: src/main/java/com/alibaba/druid/stat/JdbcResultSetStatMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.stat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface JdbcResultSetStatMBean {
 

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStatMBean.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Date;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface JdbcSqlStatMBean {
 

File: src/main/java/com/alibaba/druid/support/http/StatViewServlet.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * 注意：避免直接调用Druid相关对象例如DruidDataSource等，相关调用要到DruidStatManagerFacade里用反射实现
  * 
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang[sandzhangtoo@gmail.com]
  */
 public class StatViewServlet extends ResourceServlet {
 

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -48,8 +48,8 @@
 /**
  * 用于配置Web和Druid数据源之间的管理关联监控统计
  * 
- * @author wenshao <szujobs@htomail.com>
- * @author Zhangming Qi <qizhanming@gmail.com>
+ * @author wenshao [szujobs@htomail.com]
+ * @author Zhangming Qi [qizhanming@gmail.com]
  */
 public class WebStatFilter extends AbstractWebStatImpl implements Filter {
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidDataSourcePanel.java
Patch:
@@ -57,7 +57,7 @@
  * }
  * </pre>
  * 
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny [yunnysunny@gmail.com]
  * */
 public class DruidDataSourcePanel extends DruidPanel {
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidDriverPanel.java
Patch:
@@ -36,7 +36,7 @@
  * }
  * </pre>
  * 
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny [yunnysunny@gmail.com]
  * */
 public class DruidDriverPanel extends DruidPanel {
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidPanel.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * druid面板的抽象类 在类在实现的时候，通过url地址获取数据，解析此数据，然后显示在界面中
  * 
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny [yunnysunny@gmail.com]
  */
 public abstract class DruidPanel extends JPanel {
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidSQLPanel.java
Patch:
@@ -82,7 +82,7 @@
   }
   </pre>
   
-  @author yunnysunny<yunnysunny@gmail.com>
+  @author yunnysunny [yunnysunny@gmail.com]
  * */
 public class DruidSQLPanel extends DruidPanel {
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidSqlDetailFrame.java
Patch:
@@ -133,7 +133,7 @@
         }
     }
  * </pre>
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny [yunnysunny@gmail.com]
  * */
 public class DruidSqlDetailFrame extends JFrame {
 

File: src/main/java/com/alibaba/druid/support/jconsole/model/ColumnGroup.java
Patch:
@@ -125,7 +125,7 @@ public int getSize() {
     }
 
     /**
-     * 取得合并后的单元格的大小,这个方法需要计算,首先 是取得一个没有合并的最小单元格的JTableHeader 的大小,<br/>
+     * 取得合并后的单元格的大小,这个方法需要计算,首先 是取得一个没有合并的最小单元格的JTableHeader 的大小
      * 通过Renderer取得组件
      * 
      * @return

File: src/main/java/com/alibaba/druid/support/jconsole/model/DruidTableCellRenderer.java
Patch:
@@ -23,7 +23,7 @@
 import javax.swing.table.TableCellRenderer;
 
 /**
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny[yunnysunny@gmail.com]
  * */
 public class DruidTableCellRenderer extends JLabel implements TableCellRenderer {
 

File: src/main/java/com/alibaba/druid/support/jconsole/model/DruidTableModel.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * 自定义duird监控数据表格模板类
  * 
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny[yunnysunny@gmail.com]
  */
 public class DruidTableModel implements TableModel {
 

File: src/main/java/com/alibaba/druid/util/DaemonThreadFactory.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang [sandzhangtoo@gmail.com]
  */
 public class DaemonThreadFactory implements ThreadFactory {
 

File: src/main/java/com/alibaba/druid/util/HexBin.java
Patch:
@@ -18,7 +18,6 @@
 /**
  * format validation This class encodes/decodes hexadecimal data
  * 
- * @xerces.internal
  * @author Jeffrey Rodriguez
  * @version $Id: HexBin.java,v 1.4 2007/07/19 04:38:32 ofung Exp $
  */

File: src/main/java/com/alibaba/druid/util/HttpClientUtils.java
Patch:
@@ -26,7 +26,7 @@
 import java.net.URLConnection;
 
 /**
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang[sandzhangtoo@gmail.com]
  */
 public class HttpClientUtils {
 

File: src/main/java/com/alibaba/druid/util/JMXUtils.java
Patch:
@@ -30,7 +30,7 @@
 import javax.management.openmbean.SimpleType;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public final class JMXUtils {
 

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.Properties;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public final class JdbcUtils implements JdbcConstants {
 

File: src/main/java/com/alibaba/druid/util/MapComparator.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 /**
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang[sandzhangtoo@gmail.com]
  */
 public class MapComparator<K extends Object, V extends Object> implements Comparator<Map<K, V>> {
 

File: src/main/java/com/alibaba/druid/util/PatternMatcher.java
Patch:
@@ -17,11 +17,9 @@
 
 /**
  * Interface for components that can match source strings against a specified pattern string.
- * <p/>
  * Different implementations can support different pattern types, for example, Ant style path expressions, or regular
  * expressions, or other types of text based patterns.
  * 
- * @see com.alibaba.druid.util.AntPathMatcher AntPathMatcher
  * @since 0.2.6
  */
 public interface PatternMatcher {

File: src/main/java/com/alibaba/druid/util/StringUtils.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.support.logging.LogFactory;
 
 /**
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang[sandzhangtoo@gmail.com]
  */
 public class StringUtils {
 

File: src/main/java/com/alibaba/druid/wall/WallConfig.java
Patch:
@@ -324,7 +324,6 @@ public boolean isDescribeAllow() {
      * set allow mysql describe statement
      * 
      * @since 0.2.10
-     * @return
      */
     public void setDescribeAllow(boolean describeAllow) {
         this.describeAllow = describeAllow;
@@ -677,7 +676,6 @@ public static enum StatementType {
          * 返回resultset隐藏列名
          * 
          * @param tableName
-         * @return
          */
         String getHiddenColumn(String tableName);
 

File: src/main/java/com/alibaba/druid/wall/spi/SQLServerWallProvider.java
Patch:
@@ -29,7 +29,6 @@
  * 
  * @author RaymondXiu
  * @version 1.0, 2012-3-17
- * @see
  */
 public class SQLServerWallProvider extends WallProvider {
 

File: src/test/java/com/alibaba/druid/TestHibernateCRUDWithTransactional.java
Patch:
@@ -3,7 +3,7 @@
 import junit.framework.TestCase;
 
 /**
- * @author yinheli <yinheli@gmail.com>
+ * @author yinheli [yinheli@gmail.com]
  * @date 2012-11-26 下午11:35
  */
 public class TestHibernateCRUDWithTransactional extends TestCase {

File: src/test/java/com/alibaba/druid/benckmark/pool/Case4.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * 测试各个连接池在进行批量插入时操作的性能
  * 
- * @author yunnysunny<yunnysunny@gmail.com> 2013-3-18 下午01:11:40
+ * @author yunnysunny[yunnysunny@gmail.com] 2013-3-18 下午01:11:40
  */
 public class Case4 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/hibernate/HibernateCRUDTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.util.JdbcUtils;
 
 /**
- * @author yinheli <yinheli@gmail.com>
+ * @author yinheli [yinheli@gmail.com]
  * @date 2012-11-26 下午11:41
  */
 public class HibernateCRUDTest extends TestCase {

File: src/test/java/com/alibaba/druid/bvt/hibernate/entity/Sample.java
Patch:
@@ -8,7 +8,7 @@
 import javax.persistence.Table;
 
 /**
- * @author yinheli <yinheli@gmail.com>
+ * @author yinheli [yinheli@gmail.com]
  */
 @Entity
 @Table(name = "SAMPLE")

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest2.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest2 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest3.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * 这个场景测试并发初始化
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  *
  */
 public class DruidDataSourceTest3 extends TestCase {

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_autocommit.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_autocommit extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_autocommit2.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_autocommit2 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_autocommit3.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_autocommit3 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_autocommit4.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_autocommit4 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_clearCache.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_clearCache extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_closeError.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_closeError extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_createError.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * 这个场景测试createError
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_createError extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_enable.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_enable extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_exceptionSorter.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_exceptionSorter extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getConnection.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_getConnection extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getPooledConnection.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_getPooledConnection extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getPoolingPeakTime.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_getPoolingPeakTime extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getProperties.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_getProperties extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_lastCreateError.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_lastCreateError extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_lastError.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_lastError extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_loadSysPropertyFilter.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_loadSysPropertyFilter extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive1.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_maxActive1 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive2.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试maxActive < 0
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_maxActive2 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive3.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_maxActive3 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive4.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_maxActive4 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxWait.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_maxWait extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * 这个场景测试maxActive < 0
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_notEmptyWait extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_oracle extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle2.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_oracle2 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle3.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_oracle3 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle_error.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_oracle_error extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_recycle.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_recycle extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_recycle2.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_recycle2 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_testOnBorrowFailed.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_testOnBorrowFailed extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_testOnWhileIdleFailed.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_testOnWhileIdleFailed extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_wrapDriverFilters.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_wrapDriverFilters extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/LastActiveTest_0.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class LastActiveTest_0 extends TestCase {
 

File: src/test/java/com/alibaba/druid/pool/oracle/DruidDataSourceTest_oracle3.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_oracle3 extends TestCase {
 

File: src/main/java/com/alibaba/druid/filter/AutoLoad.java
Patch:
@@ -21,7 +21,7 @@
 import java.lang.annotation.Target;
 
 /**
- * @author sandzhang<sandzhagntoo@gmail.com>
+ * @author sandzhang [sandzhagntoo@gmail.com]
  */
 
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/com/alibaba/druid/filter/Filter.java
Patch:
@@ -56,7 +56,7 @@
 import java.util.Properties;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface Filter extends Wrapper {
 

File: src/main/java/com/alibaba/druid/filter/FilterAdapter.java
Patch:
@@ -55,7 +55,7 @@
 /**
  * 提供JdbcFilter的基本实现，使得实现一个JdbcFilter更容易。
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public abstract class FilterAdapter extends NotificationBroadcasterSupport implements Filter {
 

File: src/main/java/com/alibaba/druid/filter/FilterChain.java
Patch:
@@ -53,7 +53,7 @@
 import com.alibaba.druid.proxy.jdbc.StatementProxy;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface FilterChain {
 

File: src/main/java/com/alibaba/druid/filter/FilterChainImpl.java
Patch:
@@ -66,7 +66,7 @@
 import com.alibaba.druid.proxy.jdbc.StatementProxyImpl;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class FilterChainImpl implements FilterChain {
 

File: src/main/java/com/alibaba/druid/filter/FilterEventAdapter.java
Patch:
@@ -25,7 +25,7 @@
 import com.alibaba.druid.proxy.jdbc.StatementProxy;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public abstract class FilterEventAdapter extends FilterAdapter {
 

File: src/main/java/com/alibaba/druid/filter/encoding/EncodingConvertFilter.java
Patch:
@@ -35,7 +35,7 @@
 import com.alibaba.druid.util.Utils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class EncodingConvertFilter extends FilterAdapter {
 

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilter.java
Patch:
@@ -20,7 +20,7 @@
 import org.apache.commons.logging.impl.Log4JLogger;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class CommonsLogFilter extends LogFilter {
 

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilterMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.filter.logging;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface CommonsLogFilterMBean extends LogFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilter.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.log4j.Logger;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class Log4jFilter extends LogFilter implements Log4jFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilterMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.filter.logging;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface Log4jFilterMBean extends LogFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -38,7 +38,7 @@
 import com.alibaba.druid.util.JdbcUtils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public abstract class LogFilter extends FilterEventAdapter implements LogFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/logging/LogFilterMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.filter.logging;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface LogFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -53,7 +53,7 @@
 import com.alibaba.druid.support.profile.Profiler;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class StatFilter extends FilterEventAdapter implements StatFilterMBean {
 

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.filter.stat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface StatFilterMBean {
     boolean isMergeSql();

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -35,7 +35,7 @@
 import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public final class DruidConnectionHolder {
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -96,8 +96,8 @@
 import com.alibaba.druid.wall.WallProviderStatValue;
 
 /**
- * @author ljw<ljw2083@alibaba-inc.com>
- * @author wenshao<szujobs@hotmail.com>
+ * @author ljw [ljw2083@alibaba-inc.com]
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSource extends DruidAbstractDataSource 
     implements DruidDataSourceMBean
@@ -1050,7 +1050,6 @@ public DruidPooledConnection getConnectionDirect(long maxWaitMillis) throws SQLE
      * 抛弃连接，不进行回收，而是抛弃
      * 
      * @param realConnection
-     * @throws SQLException
      */
     public void discardConnection(Connection realConnection) {
         JdbcUtils.close(realConnection);

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceMBean.java
Patch:
@@ -21,7 +21,7 @@
 import javax.management.ObjectName;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface DruidDataSourceMBean extends DruidAbstractDataSourceMBean {
     long getResetCount();

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLogger.java
Patch:
@@ -20,7 +20,7 @@
 import com.alibaba.druid.support.logging.Log;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  * @since 0.2.19
  */
 public interface DruidDataSourceStatLogger {

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerAdapter.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  * @since 0.2.21
  */
 public class DruidDataSourceStatLoggerAdapter implements DruidDataSourceStatLogger {

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerImpl.java
Patch:
@@ -28,7 +28,7 @@
 import com.alibaba.druid.support.logging.LogFactory;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  * @since 0.2.19
  */
 public class DruidDataSourceStatLoggerImpl extends DruidDataSourceStatLoggerAdapter {

File: src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java
Patch:
@@ -35,7 +35,7 @@
 import com.alibaba.druid.proxy.jdbc.CallableStatementProxy;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidPooledCallableStatement extends DruidPooledPreparedStatement implements CallableStatement {
 

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -49,7 +49,7 @@
 import com.alibaba.druid.support.logging.LogFactory;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidPooledConnection extends PoolableWrapper implements javax.sql.PooledConnection, Connection {
 

File: src/main/java/com/alibaba/druid/pool/DruidPooledPreparedStatement.java
Patch:
@@ -43,7 +43,7 @@
 import com.alibaba.druid.util.OracleUtils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidPooledPreparedStatement extends DruidPooledStatement implements PreparedStatement {
 

File: src/main/java/com/alibaba/druid/pool/DruidPooledResultSet.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.Calendar;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public final class DruidPooledResultSet extends PoolableWrapper implements ResultSet {
 

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -28,7 +28,7 @@
 import com.alibaba.druid.support.logging.LogFactory;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidPooledStatement extends PoolableWrapper implements Statement {
 

File: src/main/java/com/alibaba/druid/pool/PoolableWrapper.java
Patch:
@@ -21,7 +21,7 @@
 import java.sql.Wrapper;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class PoolableWrapper implements Wrapper {
 

File: src/main/java/com/alibaba/druid/pool/PreparedStatementHolder.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.PreparedStatement;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public final class PreparedStatementHolder {
 

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -30,7 +30,7 @@
 import com.alibaba.druid.util.OracleUtils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class PreparedStatementPool {
 

File: src/main/java/com/alibaba/druid/pool/ValidConnectionCheckerAdapter.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Properties;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  * @since 0.2.21
  */
 public class ValidConnectionCheckerAdapter implements ValidConnectionChecker {

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -48,7 +48,7 @@
 import com.alibaba.druid.util.JdbcUtils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDriver implements Driver, DruidDriverMBean {
 

File: src/main/java/com/alibaba/druid/proxy/DruidDriverMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.proxy;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface DruidDriverMBean {
     String getDruidVersion();

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxy.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.CallableStatement;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface CallableStatementProxy extends CallableStatement, PreparedStatementProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxyImpl.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.Calendar;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class CallableStatementProxyImpl extends PreparedStatementProxyImpl implements CallableStatementProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxy.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Clob;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface ClobProxy extends Clob {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxyImpl.java
Patch:
@@ -26,7 +26,7 @@
 import com.alibaba.druid.filter.FilterChainImpl;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class ClobProxyImpl implements ClobProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxy.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Properties;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface ConnectionProxy extends Connection, WrapperProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxyImpl.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.concurrent.Executor;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class ConnectionProxyImpl extends WrapperProxyImpl implements ConnectionProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxy.java
Patch:
@@ -23,7 +23,7 @@
 import com.alibaba.druid.stat.JdbcDataSourceStat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface DataSourceProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyConfig.java
Patch:
@@ -24,7 +24,7 @@
 import com.alibaba.druid.filter.Filter;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DataSourceProxyConfig {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImpl.java
Patch:
@@ -39,7 +39,7 @@
 import com.alibaba.druid.util.Utils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DataSourceProxyImpl implements DataSourceProxy, DataSourceProxyImplMBean {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImplMBean.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Date;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface DataSourceProxyImplMBean {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameter.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Calendar;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface JdbcParameter {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxy.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface PreparedStatementProxy extends PreparedStatement, StatementProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -43,7 +43,7 @@
 import com.alibaba.druid.proxy.jdbc.JdbcParameter.TYPE;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class PreparedStatementProxyImpl extends StatementProxyImpl implements PreparedStatementProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxy.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.stat.JdbcSqlStat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface ResultSetProxy extends ResultSet, WrapperProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxyImpl.java
Patch:
@@ -43,7 +43,7 @@
 import com.alibaba.druid.stat.JdbcSqlStat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class ResultSetProxyImpl extends WrapperProxyImpl implements ResultSetProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxy.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.stat.JdbcSqlStat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface StatementProxy extends Statement, WrapperProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxyImpl.java
Patch:
@@ -30,7 +30,7 @@
 import com.alibaba.druid.stat.JdbcSqlStat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class StatementProxyImpl extends WrapperProxyImpl implements StatementProxy {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxy.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface WrapperProxy extends Wrapper {
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxyImpl.java
Patch:
@@ -23,7 +23,7 @@
 import com.alibaba.druid.filter.FilterChain;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public abstract class WrapperProxyImpl implements WrapperProxy {
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOperator.java
Patch:
@@ -19,7 +19,6 @@
  * 
  * 二元操作符
  * @author wenshao 2011-5-20 下午12:32:02
- * @formatter:off
  */
 public enum SQLBinaryOperator {
     Union("UNION", 0), 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/clause/MySqlCaseStatement.java
Patch:
@@ -26,9 +26,7 @@
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 /**
  * 
- * @Description: MySql procedure Case statement
- * @author zz email:455910092@qq.com
- * @version V1.0
+ * @author zz [455910092@qq.com]
  */
 public class MySqlCaseStatement extends MySqlStatementImpl{
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -91,9 +91,6 @@ public class OracleExprParser extends SQLExprParser {
 
     public boolean                allowStringAdditive = false;
 
-    /**
-     * @formatter:off
-     */
     public static final String[] AGGREGATE_FUNCTIONS = {
                                                           "AVG", // 
                                                           "CORR", // 

File: src/main/java/com/alibaba/druid/sql/parser/Keywords.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class Keywords {
 

File: src/main/java/com/alibaba/druid/sql/parser/LayoutCharacters.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.sql.parser;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface LayoutCharacters {
 
@@ -46,7 +46,6 @@ public interface LayoutCharacters {
     final static byte CR     = 0xD;
 
     /**
-     * QS_TODO 为什么不是0x0？<br/>
      * End of input character. Used as a sentinel to denote the character one beyond the last defined character in a
      * source file.
      */

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -40,7 +40,7 @@
 import java.util.List;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class Lexer {
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLParseException.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.DruidRuntimeException;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 @SuppressWarnings("serial")
 @Deprecated

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -18,8 +18,7 @@
 /**
  * 
  * SQL Token 
- * @author wenshao 2011-5-18 下午05:16:49
- * @formatter:off
+ * @author wenshao [szujobs@hotmail.com]
  */
 public enum Token {
     SELECT("SELECT"), 

File: src/main/java/com/alibaba/druid/stat/DruidStatService.java
Patch:
@@ -42,7 +42,7 @@
 /**
  * 注意：避免直接调用Druid相关对象例如DruidDataSource等，相关调用要到DruidStatManagerFacade里用反射实现
  * 
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang[sandzhangtoo@gmail.com]
  */
 public final class DruidStatService implements DruidStatServiceMBean {
 

File: src/main/java/com/alibaba/druid/stat/JdbcConnectionStat.java
Patch:
@@ -34,7 +34,7 @@
 import com.alibaba.druid.util.JMXUtils;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class JdbcConnectionStat implements JdbcConnectionStatMBean {
 

File: src/main/java/com/alibaba/druid/stat/JdbcResultSetStatMBean.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.stat;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface JdbcResultSetStatMBean {
 

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStatMBean.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Date;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public interface JdbcSqlStatMBean {
 

File: src/main/java/com/alibaba/druid/support/http/StatViewServlet.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * 注意：避免直接调用Druid相关对象例如DruidDataSource等，相关调用要到DruidStatManagerFacade里用反射实现
  * 
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang[sandzhangtoo@gmail.com]
  */
 public class StatViewServlet extends ResourceServlet {
 

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -48,8 +48,8 @@
 /**
  * 用于配置Web和Druid数据源之间的管理关联监控统计
  * 
- * @author wenshao <szujobs@htomail.com>
- * @author Zhangming Qi <qizhanming@gmail.com>
+ * @author wenshao [szujobs@htomail.com]
+ * @author Zhangming Qi [qizhanming@gmail.com]
  */
 public class WebStatFilter extends AbstractWebStatImpl implements Filter {
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidDataSourcePanel.java
Patch:
@@ -57,7 +57,7 @@
  * }
  * </pre>
  * 
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny [yunnysunny@gmail.com]
  * */
 public class DruidDataSourcePanel extends DruidPanel {
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidDriverPanel.java
Patch:
@@ -36,7 +36,7 @@
  * }
  * </pre>
  * 
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny [yunnysunny@gmail.com]
  * */
 public class DruidDriverPanel extends DruidPanel {
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidPanel.java
Patch:
@@ -38,7 +38,7 @@
 /**
  * druid面板的抽象类 在类在实现的时候，通过url地址获取数据，解析此数据，然后显示在界面中
  * 
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny [yunnysunny@gmail.com]
  */
 public abstract class DruidPanel extends JPanel {
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidSQLPanel.java
Patch:
@@ -82,7 +82,7 @@
   }
   </pre>
   
-  @author yunnysunny<yunnysunny@gmail.com>
+  @author yunnysunny [yunnysunny@gmail.com]
  * */
 public class DruidSQLPanel extends DruidPanel {
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidSqlDetailFrame.java
Patch:
@@ -133,7 +133,7 @@
         }
     }
  * </pre>
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny [yunnysunny@gmail.com]
  * */
 public class DruidSqlDetailFrame extends JFrame {
 

File: src/main/java/com/alibaba/druid/support/jconsole/model/ColumnGroup.java
Patch:
@@ -125,7 +125,7 @@ public int getSize() {
     }
 
     /**
-     * 取得合并后的单元格的大小,这个方法需要计算,首先 是取得一个没有合并的最小单元格的JTableHeader 的大小,<br/>
+     * 取得合并后的单元格的大小,这个方法需要计算,首先 是取得一个没有合并的最小单元格的JTableHeader 的大小
      * 通过Renderer取得组件
      * 
      * @return

File: src/main/java/com/alibaba/druid/support/jconsole/model/DruidTableCellRenderer.java
Patch:
@@ -23,7 +23,7 @@
 import javax.swing.table.TableCellRenderer;
 
 /**
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny[yunnysunny@gmail.com]
  * */
 public class DruidTableCellRenderer extends JLabel implements TableCellRenderer {
 

File: src/main/java/com/alibaba/druid/support/jconsole/model/DruidTableModel.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * 自定义duird监控数据表格模板类
  * 
- * @author yunnysunny<yunnysunny@gmail.com>
+ * @author yunnysunny[yunnysunny@gmail.com]
  */
 public class DruidTableModel implements TableModel {
 

File: src/main/java/com/alibaba/druid/util/DaemonThreadFactory.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.atomic.AtomicInteger;
 
 /**
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang [sandzhangtoo@gmail.com]
  */
 public class DaemonThreadFactory implements ThreadFactory {
 

File: src/main/java/com/alibaba/druid/util/HexBin.java
Patch:
@@ -18,7 +18,6 @@
 /**
  * format validation This class encodes/decodes hexadecimal data
  * 
- * @xerces.internal
  * @author Jeffrey Rodriguez
  * @version $Id: HexBin.java,v 1.4 2007/07/19 04:38:32 ofung Exp $
  */

File: src/main/java/com/alibaba/druid/util/HttpClientUtils.java
Patch:
@@ -26,7 +26,7 @@
 import java.net.URLConnection;
 
 /**
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang[sandzhangtoo@gmail.com]
  */
 public class HttpClientUtils {
 

File: src/main/java/com/alibaba/druid/util/JMXUtils.java
Patch:
@@ -30,7 +30,7 @@
 import javax.management.openmbean.SimpleType;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public final class JMXUtils {
 

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -42,7 +42,7 @@
 import java.util.Properties;
 
 /**
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public final class JdbcUtils implements JdbcConstants {
 

File: src/main/java/com/alibaba/druid/util/MapComparator.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.Map;
 
 /**
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang[sandzhangtoo@gmail.com]
  */
 public class MapComparator<K extends Object, V extends Object> implements Comparator<Map<K, V>> {
 

File: src/main/java/com/alibaba/druid/util/PatternMatcher.java
Patch:
@@ -17,11 +17,9 @@
 
 /**
  * Interface for components that can match source strings against a specified pattern string.
- * <p/>
  * Different implementations can support different pattern types, for example, Ant style path expressions, or regular
  * expressions, or other types of text based patterns.
  * 
- * @see com.alibaba.druid.util.AntPathMatcher AntPathMatcher
  * @since 0.2.6
  */
 public interface PatternMatcher {

File: src/main/java/com/alibaba/druid/util/StringUtils.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.support.logging.LogFactory;
 
 /**
- * @author sandzhang<sandzhangtoo@gmail.com>
+ * @author sandzhang[sandzhangtoo@gmail.com]
  */
 public class StringUtils {
 

File: src/main/java/com/alibaba/druid/wall/WallConfig.java
Patch:
@@ -324,7 +324,6 @@ public boolean isDescribeAllow() {
      * set allow mysql describe statement
      * 
      * @since 0.2.10
-     * @return
      */
     public void setDescribeAllow(boolean describeAllow) {
         this.describeAllow = describeAllow;
@@ -677,7 +676,6 @@ public static enum StatementType {
          * 返回resultset隐藏列名
          * 
          * @param tableName
-         * @return
          */
         String getHiddenColumn(String tableName);
 

File: src/main/java/com/alibaba/druid/wall/spi/SQLServerWallProvider.java
Patch:
@@ -29,7 +29,6 @@
  * 
  * @author RaymondXiu
  * @version 1.0, 2012-3-17
- * @see
  */
 public class SQLServerWallProvider extends WallProvider {
 

File: src/test/java/com/alibaba/druid/TestHibernateCRUDWithTransactional.java
Patch:
@@ -3,7 +3,7 @@
 import junit.framework.TestCase;
 
 /**
- * @author yinheli <yinheli@gmail.com>
+ * @author yinheli [yinheli@gmail.com]
  * @date 2012-11-26 下午11:35
  */
 public class TestHibernateCRUDWithTransactional extends TestCase {

File: src/test/java/com/alibaba/druid/benckmark/pool/Case4.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * 测试各个连接池在进行批量插入时操作的性能
  * 
- * @author yunnysunny<yunnysunny@gmail.com> 2013-3-18 下午01:11:40
+ * @author yunnysunny[yunnysunny@gmail.com] 2013-3-18 下午01:11:40
  */
 public class Case4 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/hibernate/HibernateCRUDTest.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.util.JdbcUtils;
 
 /**
- * @author yinheli <yinheli@gmail.com>
+ * @author yinheli [yinheli@gmail.com]
  * @date 2012-11-26 下午11:41
  */
 public class HibernateCRUDTest extends TestCase {

File: src/test/java/com/alibaba/druid/bvt/hibernate/entity/Sample.java
Patch:
@@ -8,7 +8,7 @@
 import javax.persistence.Table;
 
 /**
- * @author yinheli <yinheli@gmail.com>
+ * @author yinheli [yinheli@gmail.com]
  */
 @Entity
 @Table(name = "SAMPLE")

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest2.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest2 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest3.java
Patch:
@@ -15,7 +15,7 @@
 
 /**
  * 这个场景测试并发初始化
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  *
  */
 public class DruidDataSourceTest3 extends TestCase {

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_autocommit.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_autocommit extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_autocommit2.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_autocommit2 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_autocommit3.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_autocommit3 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_autocommit4.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_autocommit4 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_clearCache.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_clearCache extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_closeError.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_closeError extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_createError.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * 这个场景测试createError
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_createError extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_enable.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_enable extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_exceptionSorter.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_exceptionSorter extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getConnection.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_getConnection extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getPooledConnection.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_getPooledConnection extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getPoolingPeakTime.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_getPoolingPeakTime extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getProperties.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_getProperties extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_lastCreateError.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_lastCreateError extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_lastError.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_lastError extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_loadSysPropertyFilter.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_loadSysPropertyFilter extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive1.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_maxActive1 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive2.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试maxActive < 0
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_maxActive2 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive3.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_maxActive3 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive4.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_maxActive4 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxWait.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_maxWait extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait.java
Patch:
@@ -12,7 +12,7 @@
 /**
  * 这个场景测试maxActive < 0
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_notEmptyWait extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_oracle extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle2.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_oracle2 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle3.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_oracle3 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle_error.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_oracle_error extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_recycle.java
Patch:
@@ -11,7 +11,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_recycle extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_recycle2.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_recycle2 extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_testOnBorrowFailed.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_testOnBorrowFailed extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_testOnWhileIdleFailed.java
Patch:
@@ -15,7 +15,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_testOnWhileIdleFailed extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_wrapDriverFilters.java
Patch:
@@ -9,7 +9,7 @@
 /**
  * 这个场景测试defaultAutoCommit
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_wrapDriverFilters extends TestCase {
 

File: src/test/java/com/alibaba/druid/bvt/pool/LastActiveTest_0.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * 这个场景测试initialSize > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class LastActiveTest_0 extends TestCase {
 

File: src/test/java/com/alibaba/druid/pool/oracle/DruidDataSourceTest_oracle3.java
Patch:
@@ -14,7 +14,7 @@
 /**
  * 这个场景测试minIdle > maxActive
  * 
- * @author wenshao<szujobs@hotmail.com>
+ * @author wenshao [szujobs@hotmail.com]
  */
 public class DruidDataSourceTest_oracle3 extends TestCase {
 

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1475,7 +1475,9 @@ protected void setCreateError(Throwable ex) {
         if (ex == null) {
             lock.lock();
             try {
-                createError = null;
+                if (createError != null) {
+                    createError = null;
+                }
             } finally {
                 lock.unlock();
             }

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1475,7 +1475,9 @@ protected void setCreateError(Throwable ex) {
         if (ex == null) {
             lock.lock();
             try {
-                createError = null;
+                if (createError != null) {
+                    createError = null;
+                }
             } finally {
                 lock.unlock();
             }

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1834,7 +1834,7 @@ private void runInternal() {
                         try {
                             notEmpty.signalAll();
                         } finally {
-                            lock.lock();
+                            lock.unlock();
                         }
                     }
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1834,7 +1834,7 @@ private void runInternal() {
                         try {
                             notEmpty.signalAll();
                         } finally {
-                            lock.lock();
+                            lock.unlock();
                         }
                     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleHintTest.java
Patch:
@@ -33,7 +33,7 @@ public void test_hint1() throws Exception {
 	public void test_hint2() throws Exception {
 		String sql = "SELECT /*+leading(e) index(e ORD_ORDER_ITEM_GS_BS_DI_IND)*/ distinct e.id from ord_order_item e where e.F1 = Date '2011-10-01'";
 		String countSQL = PagerUtils.count(sql, JdbcUtils.ORACLE);		
-		Assert.assertEquals("SELECT /*+leading(e) index(e ORD_ORDER_ITEM_GS_BS_DI_IND)*/ DISTINCT COUNT(*)\nFROM ord_order_item e\nWHERE e.F1 = DATE '2011-10-01'", countSQL);
+		Assert.assertEquals("SELECT /*+leading(e) index(e ORD_ORDER_ITEM_GS_BS_DI_IND)*/ COUNT(DISTINCT e.id)\nFROM ord_order_item e\nWHERE e.F1 = DATE '2011-10-01'", countSQL);
 	}
 	
 	public void test_hint3() throws Exception {

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -389,10 +389,9 @@ public SQLExpr primary() {
                     SQLExpr notTarget = expr();
 
                     accept(Token.RPAREN);
-                    notTarget = exprRest(notTarget);
-
+                    notTarget = relationalRest(notTarget);
                     sqlExpr = new SQLNotExpr(notTarget);
-
+                    
                     return primaryRest(sqlExpr);
                 } else {
                     SQLExpr restExpr = relational();

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -389,10 +389,9 @@ public SQLExpr primary() {
                     SQLExpr notTarget = expr();
 
                     accept(Token.RPAREN);
-                    notTarget = exprRest(notTarget);
-
+                    notTarget = relationalRest(notTarget);
                     sqlExpr = new SQLNotExpr(notTarget);
-
+                    
                     return primaryRest(sqlExpr);
                 } else {
                     SQLExpr restExpr = relational();

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleInsertStatement.java
Patch:
@@ -23,6 +23,7 @@
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleErrorLoggingClause;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleReturningClause;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
+import com.alibaba.druid.sql.dialect.oracle.visitor.OracleOutputVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public class OracleInsertStatement extends SQLInsertStatement implements OracleStatement {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -2804,7 +2804,7 @@ private void parserParameters(List<MySqlParameter> parameters) {
 	}
 
 	/**
-	 * parse procedure statement block,not support begin-end block
+	 * parse procedure statement block
 	 * @param statementList
 	 */
 	private void parseProcedureStatementList(List<SQLStatement> statementList)

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -2126,7 +2126,7 @@ public void shrink(boolean checkTime) {
             for (int i = 0; i < checkCount; ++i) {
                 DruidConnectionHolder connection = connections[i];
 
-                long phyConnectTimeMillis = connection.getTimeMillis();//physical connection connected time
+                long phyConnectTimeMillis = connection.getTimeMillis() - currentTimeMillis;//physical connection connected time
                 if( phyConnectTimeMillis  > phyTimeoutMillis  ){
                     evictList.add(connection);//if physical connection connected greater than phyTimeoutMillis, close the connection, for mysql 8 hours timeout
                     continue;

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -2126,7 +2126,7 @@ public void shrink(boolean checkTime) {
             for (int i = 0; i < checkCount; ++i) {
                 DruidConnectionHolder connection = connections[i];
 
-                long phyConnectTimeMillis = connection.getTimeMillis();//physical connection connected time
+                long phyConnectTimeMillis = connection.getTimeMillis() - currentTimeMillis;//physical connection connected time
                 if( phyConnectTimeMillis  > phyTimeoutMillis  ){
                     evictList.add(connection);//if physical connection connected greater than phyTimeoutMillis, close the connection, for mysql 8 hours timeout
                     continue;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGSchemaStatVisitor.java
Patch:
@@ -97,6 +97,8 @@ public void endVisit(PGWithQuery x) {
 
     @Override
     public boolean visit(PGWithQuery x) {
+        x.getQuery().accept(this);
+        
         Map<String, String> aliasMap = getAliasMap();
         if (aliasMap != null) {
             String alias = null;
@@ -109,7 +111,7 @@ public boolean visit(PGWithQuery x) {
                 subQueryMap.put(alias, x.getQuery());
             }
         }
-        x.getQuery().accept(this);
+        
         return false;
     }
 

File: src/test/java/com/alibaba/druid/bvt/bug/Bug_for_qianbi.java
Patch:
@@ -17,8 +17,8 @@ public void test_for_issue() throws Exception {
                      + "where match(auctionTitle,\"男鞋\\n中石化&加油卡\\n中石化&充值卡\\n中石化&冲值卡\\n中石化&代冲\\n中石化&代充\\n中国石化&加油卡\\n中国石化&充值卡\\n中国石化&冲值卡\\n中国石化&代冲\\n中国石化&代充\",\"\\n\")";
 
         String expected = "INSERT INTO TABLE lol"
-                          + "\nSELECT detail(sellerid, id) AS count1, "
-                          + "\n\tSUM(sellerid) AS sum1"
+                          + "\nSELECT detail(sellerid, id) AS count1"
+                          + "\n\t, SUM(sellerid) AS sum1"
                           + "\nFROM ctu_trade_paid_done:time('natural', '1d', '1h')"
                           + "\nWHERE match(auctionTitle, '男鞋\\n中石化&加油卡\\n中石化&充值卡\\n中石化&冲值卡\\n中石化&代冲\\n中石化&代充\\n中国石化&加油卡\\n中国石化&充值卡\\n中国石化&冲值卡\\n中国石化&代冲\\n中国石化&代充', '\\n');\n";
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGDeleteTest8.java
Patch:
@@ -55,8 +55,10 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("parts")));
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("included_parts")));
 
-        Assert.assertTrue(visitor.getColumns().size() == 4);
+        Assert.assertTrue(visitor.getColumns().size() == 3);
         
+        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("parts", "sub_part")));
+        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("included_parts", "sub_part")));
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("parts", "part")));
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest15.java
Patch:
@@ -51,7 +51,7 @@ public void test_0() throws Exception {
         System.out.println("fields : " + visitor.getColumns());
         System.out.println("coditions : " + visitor.getConditions());
 
-        Assert.assertEquals(6, visitor.getColumns().size());
+        Assert.assertEquals(7, visitor.getColumns().size());
         Assert.assertEquals(2, visitor.getTables().size());
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGSchemaStatVisitor.java
Patch:
@@ -97,6 +97,8 @@ public void endVisit(PGWithQuery x) {
 
     @Override
     public boolean visit(PGWithQuery x) {
+        x.getQuery().accept(this);
+        
         Map<String, String> aliasMap = getAliasMap();
         if (aliasMap != null) {
             String alias = null;
@@ -109,7 +111,7 @@ public boolean visit(PGWithQuery x) {
                 subQueryMap.put(alias, x.getQuery());
             }
         }
-        x.getQuery().accept(this);
+        
         return false;
     }
 

File: src/test/java/com/alibaba/druid/bvt/bug/Bug_for_qianbi.java
Patch:
@@ -17,8 +17,8 @@ public void test_for_issue() throws Exception {
                      + "where match(auctionTitle,\"男鞋\\n中石化&加油卡\\n中石化&充值卡\\n中石化&冲值卡\\n中石化&代冲\\n中石化&代充\\n中国石化&加油卡\\n中国石化&充值卡\\n中国石化&冲值卡\\n中国石化&代冲\\n中国石化&代充\",\"\\n\")";
 
         String expected = "INSERT INTO TABLE lol"
-                          + "\nSELECT detail(sellerid, id) AS count1, "
-                          + "\n\tSUM(sellerid) AS sum1"
+                          + "\nSELECT detail(sellerid, id) AS count1"
+                          + "\n\t, SUM(sellerid) AS sum1"
                           + "\nFROM ctu_trade_paid_done:time('natural', '1d', '1h')"
                           + "\nWHERE match(auctionTitle, '男鞋\\n中石化&加油卡\\n中石化&充值卡\\n中石化&冲值卡\\n中石化&代冲\\n中石化&代充\\n中国石化&加油卡\\n中国石化&充值卡\\n中国石化&冲值卡\\n中国石化&代冲\\n中国石化&代充', '\\n');\n";
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGDeleteTest8.java
Patch:
@@ -55,8 +55,10 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("parts")));
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("included_parts")));
 
-        Assert.assertTrue(visitor.getColumns().size() == 4);
+        Assert.assertTrue(visitor.getColumns().size() == 3);
         
+        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("parts", "sub_part")));
+        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("included_parts", "sub_part")));
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("parts", "part")));
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest15.java
Patch:
@@ -51,7 +51,7 @@ public void test_0() throws Exception {
         System.out.println("fields : " + visitor.getColumns());
         System.out.println("coditions : " + visitor.getConditions());
 
-        Assert.assertEquals(6, visitor.getColumns().size());
+        Assert.assertEquals(7, visitor.getColumns().size());
         Assert.assertEquals(2, visitor.getTables().size());
     }
 }

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIdentifierExpr.java
Patch:
@@ -97,4 +97,7 @@ public boolean equals(Object obj) {
         return true;
     }
 
+    public String toString() {
+        return this.name;
+    }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/odps/visitor/OdpsOutputVisitor.java
Patch:
@@ -526,9 +526,9 @@ public boolean visit(OdpsSelectQueryBlock x) {
             print("DISTRIBUTE BY ");
             x.getDistributeBy().accept(this);
 
-            if (x.getSortBy() != null) {
+            if (!x.getSortBy().isEmpty()) {
                 print(" SORT BY ");
-                x.getSortBy().accept(this);
+                printAndAccept(x.getSortBy(), ", ");
             }
         }
 

File: src/main/java/com/alibaba/druid/support/opds/udf/ExportColumns.java
Patch:
@@ -48,7 +48,7 @@ public String evaluate(String sql, String dbType) {
             }
 
             return buf.toString();
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             System.err.println("error sql : " + sql);
             ex.printStackTrace();
             return null;

File: src/main/java/com/alibaba/druid/support/opds/udf/ExportTables.java
Patch:
@@ -51,7 +51,7 @@ public String evaluate(String sql, String dbType) {
             }
 
             return buf.toString();
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             System.err.println("error sql : " + sql);
             ex.printStackTrace();
             return null;

File: src/test/java/com/alibaba/druid/bvt/filter/wall/PGWallTest.java
Patch:
@@ -9,7 +9,7 @@
 public class PGWallTest extends TestCase {
 
     public void test_false() throws Exception {
-        Assert.assertFalse(WallUtils.isValidatePostgres(//
+        Assert.assertTrue(WallUtils.isValidatePostgres(//
         "select wm_concat(article_id) over() from t_nds_web_article")); //
     }
 }

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIdentifierExpr.java
Patch:
@@ -97,4 +97,7 @@ public boolean equals(Object obj) {
         return true;
     }
 
+    public String toString() {
+        return this.name;
+    }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/odps/visitor/OdpsOutputVisitor.java
Patch:
@@ -526,9 +526,9 @@ public boolean visit(OdpsSelectQueryBlock x) {
             print("DISTRIBUTE BY ");
             x.getDistributeBy().accept(this);
 
-            if (x.getSortBy() != null) {
+            if (!x.getSortBy().isEmpty()) {
                 print(" SORT BY ");
-                x.getSortBy().accept(this);
+                printAndAccept(x.getSortBy(), ", ");
             }
         }
 

File: src/main/java/com/alibaba/druid/support/opds/udf/ExportColumns.java
Patch:
@@ -33,7 +33,7 @@ public String evaluate(String sql, String dbType) {
             }
 
             return buf.toString();
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             System.err.println("error sql : " + sql);
             ex.printStackTrace();
             return null;

File: src/main/java/com/alibaba/druid/support/opds/udf/ExportTables.java
Patch:
@@ -36,7 +36,7 @@ public String evaluate(String sql, String dbType) {
             }
 
             return buf.toString();
-        } catch (Exception ex) {
+        } catch (Throwable ex) {
             System.err.println("error sql : " + sql);
             ex.printStackTrace();
             return null;

File: src/test/java/com/alibaba/druid/bvt/filter/wall/PGWallTest.java
Patch:
@@ -9,7 +9,7 @@
 public class PGWallTest extends TestCase {
 
     public void test_false() throws Exception {
-        Assert.assertFalse(WallUtils.isValidatePostgres(//
+        Assert.assertTrue(WallUtils.isValidatePostgres(//
         "select wm_concat(article_id) over() from t_nds_web_article")); //
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -94,6 +94,7 @@ protected void scanString() {
                     hasSpecial = true;
                 }
 
+                putChar('\\');
                 switch (ch) {
                     case '\0':
                         putChar('\0');
@@ -139,6 +140,7 @@ protected void scanString() {
                     arraycopy(mark + 1, buf, 0, bufPos);
                     hasSpecial = true;
                     putChar('\'');
+                    putChar('\'');
                     continue;
                 }
             }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSelectParser.java
Patch:
@@ -259,11 +259,10 @@ public SQLSelectQuery query() {
 
     protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
         if (lexer.token() == Token.AS && tableSource instanceof SQLExprTableSource) {
-            String alias = this.as();
-
             if (lexer.token() == Token.LPAREN) {
                 SQLExprTableSource exprTableSource = (SQLExprTableSource) tableSource;
 
+                String alias = this.as();
                 PGFunctionTableSource functionTableSource = new PGFunctionTableSource(exprTableSource.getExpr());
                 functionTableSource.setAlias(alias);
 

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -215,7 +215,7 @@ public void decrypt(DruidDataSource dataSource, Properties info) {
     public PublicKey getPublicKey(Properties connectinProperties, Properties configFileProperties) {
         String key = null;
         if (configFileProperties != null) {
-            configFileProperties.getProperty(CONFIG_KEY);
+            key = configFileProperties.getProperty(CONFIG_KEY);
         }
 
         if (StringUtils.isEmpty(key) && connectinProperties != null) {

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -215,7 +215,7 @@ public void decrypt(DruidDataSource dataSource, Properties info) {
     public PublicKey getPublicKey(Properties connectinProperties, Properties configFileProperties) {
         String key = null;
         if (configFileProperties != null) {
-            configFileProperties.getProperty(CONFIG_KEY);
+            key = configFileProperties.getProperty(CONFIG_KEY);
         }
 
         if (StringUtils.isEmpty(key) && connectinProperties != null) {

File: src/main/java/com/alibaba/druid/Constants.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/DruidRuntimeException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/TransactionTimeoutException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/AutoLoad.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/Filter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterChain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterChainImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterEventAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/config/ConfigTools.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/CharsetConvert.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/CharsetParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/EncodingConvertFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/LogFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Slf4jLogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/MergeStatFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContextListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContextListenerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockArray.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockBlob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockCallableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockClob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockConnectionClosedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockDriverMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockNClob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockParameterMetaData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockPreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockRef.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockResultSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockResultSetMetaData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockRowId.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockSQLXML.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockSavepoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStatementBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStruct.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/handler/MockExecuteHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/handler/MySqlMockExecuteHandlerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DataSourceClosedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DataSourceDisableException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSourceMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceC3P0Adapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceC3P0AdapterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatValue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledPreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledResultSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/GetConnectionTimeoutException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ManagedDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PoolableWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PreparedStatementHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ValidConnectionCheckerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/WrapperAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/DB2ExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/InformixExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MSSQLValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MockExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/NullExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/OracleExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/OracleValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/PGExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/PGValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/SybaseExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/DruidPooledXAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/DruidXADataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/JtdsXAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/JtdsXAResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/DruidDriverMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImplMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterDate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterDecimal.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterInt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterLong.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterNull.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterString.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterTimestamp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/NClobProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/NClobProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetMetaDataProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetMetaDataProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementExecuteType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/TransactionInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLCommentHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLDataTypeImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLExprImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLName.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLObjectImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderingSpecification.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOver.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitioningClause.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSetQuantifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatementImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAggregateExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAggregateOption.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllColumnExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAnyExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBetweenExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOpExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOperator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBooleanExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCaseExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCastExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCharExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCurrentOfCursorExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLDefaultExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLExistsExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLHexExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIdentifierExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInListExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInSubQueryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIntegerExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLListExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLMethodInvokeExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNCharExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNotExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNullExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumberExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumericLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLPropertyExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLQueryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLSomeExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTextLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTimestampExpr.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLUnaryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLUnaryOperator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLValuableExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLVariantRefExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/NotNullConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAlterColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableKeys.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropColumnItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropForeignKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableKeys.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRename.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenameColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenamePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableSetComment.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableSetLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableTouch.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterViewRenameStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAssignItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCallStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCharacterDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnReference.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnUniqueKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCommentStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraintImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateDatabaseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateIndexStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTriggerStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateViewStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDDLStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDeleteStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDescribeStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropDatabaseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropFunctionStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropIndexStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropProcedureStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropSequenceStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableSpaceStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTriggerStatement.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.druid.sql.ast.statement;
 
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropUserStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropViewStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExplainStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLForeignKeyConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLForeignKeyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLGrantStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLInsertInto.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLInsertStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLJoinTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLObjectType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLPrimaryKeyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLReleaseSavePointStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLRevokeStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLRollbackStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSavePointStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelect.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectGroupByClause.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectOrderByItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectQueryBlock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSetStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLShowTablesStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSubqueryTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableElement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableSourceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTruncateStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnionOperator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnionQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnionQueryTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnique.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUniqueConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUpdateSetItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUpdateStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLWithSubqueryClause.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/SQLBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/SQLBuilderFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/SQLDeleteBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/SQLSelectBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/SQLUpdateBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/UpdateBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/impl/SQLBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/impl/SQLDeleteBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/impl/SQLSelectBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/impl/SQLUpdateBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/DB2Object.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/DB2StatementImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/stmt/DB2SelectQueryBlock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/stmt/DB2ValuesStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/parser/DB2ExprParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/parser/DB2Lexer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/Constants.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/DruidRuntimeException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/TransactionTimeoutException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/AutoLoad.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/Filter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterChain.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterChainImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterEventAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/FilterManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/config/ConfigTools.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/CharsetConvert.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/CharsetParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/encoding/EncodingConvertFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/CommonsLogFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Log4jFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/LogFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/logging/Slf4jLogFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/MergeStatFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContext.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContextListener.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterContextListenerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/filter/stat/StatFilterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockArray.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockBlob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockCallableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockClob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockConnectionClosedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockDriverMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockNClob.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockParameterMetaData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockPreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockRef.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockResultSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockResultSetMetaData.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockRowId.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockSQLXML.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockSavepoint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStatementBase.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/MockStruct.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/handler/MockExecuteHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/mock/handler/MySqlMockExecuteHandlerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DataSourceClosedException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DataSourceDisableException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSourceMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceC3P0Adapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceC3P0AdapterMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLogger.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatValue.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledPreparedStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledResultSet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/GetConnectionTimeoutException.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ManagedDataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PoolableWrapper.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PreparedStatementHolder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/ValidConnectionCheckerAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/WrapperAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/DB2ExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/InformixExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MSSQLValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MockExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/NullExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/OracleExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/OracleValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/PGExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/PGValidConnectionChecker.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/vendor/SybaseExceptionSorter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/DruidPooledXAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/DruidXADataSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/JtdsXAConnection.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/pool/xa/JtdsXAResource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/DruidDriverMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ClobProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ConnectionProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyConfig.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImplMBean.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterDate.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterDecimal.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterInt.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterLong.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterNull.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterString.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterTimestamp.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/NClobProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/NClobProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetMetaDataProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetMetaDataProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementExecuteType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/TransactionInfo.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/PagerUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLCommentHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLDataTypeImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLExprImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLName.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLObject.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLObjectImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderingSpecification.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLOver.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitioningClause.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLSetQuantifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/SQLStatementImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAggregateExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAggregateOption.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllColumnExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAllExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLAnyExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBetweenExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOpExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBinaryOperator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBooleanExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCaseExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCastExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCharExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLCurrentOfCursorExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLDefaultExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLExistsExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLHexExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIdentifierExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInListExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInSubQueryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIntegerExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLListExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLMethodInvokeExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNCharExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNotExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNullExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumberExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumericLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLPropertyExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLQueryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLSomeExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTextLiteralExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLTimestampExpr.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLUnaryExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLUnaryOperator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLValuableExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLVariantRefExpr.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/NotNullConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAddPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableAlterColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableKeys.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDisableLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropColumnItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropForeignKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropIndex.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropPartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableKeys.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableEnableLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRename.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenameColumn.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableRenamePartition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableSetComment.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableSetLifecycle.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableTouch.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterViewRenameStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAssignItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCallStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCharacterDataType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnCheck.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnDefinition.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnReference.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnUniqueKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCommentStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraintImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateDatabaseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateIndexStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateTriggerStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCreateViewStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDDLStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDeleteStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDescribeStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropDatabaseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropFunctionStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropIndexStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropProcedureStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropSequenceStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableSpaceStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTriggerStatement.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.druid.sql.ast.statement;
 
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropUserStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropViewStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExplainStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprHint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLForeignKeyConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLForeignKeyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLGrantStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLInsertInto.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLInsertStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLJoinTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLObjectType.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLPrimaryKey.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLPrimaryKeyImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLReleaseSavePointStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLRevokeStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLRollbackStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSavePointStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelect.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectGroupByClause.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectOrderByItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectQueryBlock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelectStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSetStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLShowTablesStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSubqueryTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableElement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableSourceImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTruncateStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnionOperator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnionQuery.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnionQueryTableSource.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnique.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUniqueConstraint.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUpdateSetItem.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUpdateStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUseStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLWithSubqueryClause.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/SQLBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/SQLBuilderFactory.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/SQLDeleteBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/SQLSelectBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/SQLUpdateBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/UpdateBuilder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/impl/SQLBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/impl/SQLDeleteBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/impl/SQLSelectBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/builder/impl/SQLUpdateBuilderImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/DB2Object.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/DB2StatementImpl.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/stmt/DB2SelectQueryBlock.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/ast/stmt/DB2ValuesStatement.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/parser/DB2ExprParser.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/db2/parser/DB2Lexer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 1999-2011 Alibaba Group Holding Ltd.
+ * Copyright 1999-2101 Alibaba Group Holding Ltd.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -415,7 +415,7 @@ public final SQLExpr primaryRest(SQLExpr expr) {
                 expr = matchAgainstExpr;
 
                 return primaryRest(expr);
-            } else if ("CONVERT".equalsIgnoreCase(ident)) {
+            } else if (("CONVERT".equalsIgnoreCase(ident))||("CHAR".equalsIgnoreCase(ident))) {
                 lexer.nextToken();
                 SQLMethodInvokeExpr methodInvokeExpr = new SQLMethodInvokeExpr(ident);
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -709,7 +709,7 @@ public boolean visit(SQLMethodInvokeExpr x) {
             return false;
         }
 
-        if ("CONVERT".equalsIgnoreCase(x.getMethodName())) {
+        if (("CONVERT".equalsIgnoreCase(x.getMethodName()))||"CHAR".equalsIgnoreCase(x.getMethodName())) {
             if (x.getOwner() != null) {
                 x.getOwner().accept(this);
                 print(".");

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -142,6 +142,7 @@ protected String as() {
                     case EXCLUSIVE:
                     case MODE:
                     case ADVISE:
+                    case TYPE:
                         alias = lexer.stringVal();
                         lexer.nextToken();
                         return alias;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -415,7 +415,7 @@ public final SQLExpr primaryRest(SQLExpr expr) {
                 expr = matchAgainstExpr;
 
                 return primaryRest(expr);
-            } else if ("CONVERT".equalsIgnoreCase(ident)) {
+            } else if (("CONVERT".equalsIgnoreCase(ident))||("CHAR".equalsIgnoreCase(ident))) {
                 lexer.nextToken();
                 SQLMethodInvokeExpr methodInvokeExpr = new SQLMethodInvokeExpr(ident);
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -709,7 +709,7 @@ public boolean visit(SQLMethodInvokeExpr x) {
             return false;
         }
 
-        if ("CONVERT".equalsIgnoreCase(x.getMethodName())) {
+        if (("CONVERT".equalsIgnoreCase(x.getMethodName()))||"CHAR".equalsIgnoreCase(x.getMethodName())) {
             if (x.getOwner() != null) {
                 x.getOwner().accept(this);
                 print(".");

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -142,6 +142,7 @@ protected String as() {
                     case EXCLUSIVE:
                     case MODE:
                     case ADVISE:
+                    case TYPE:
                         alias = lexer.stringVal();
                         lexer.nextToken();
                         return alias;

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -989,7 +989,7 @@ public boolean visit(SQLColumnDefinition x) {
             print(" COMMENT ");
             x.getComment().accept(this);
         }
-
+        
         return false;
     }
 

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -989,7 +989,7 @@ public boolean visit(SQLColumnDefinition x) {
             print(" COMMENT ");
             x.getComment().accept(this);
         }
-
+        
         return false;
     }
 

File: src/test/java/com/alibaba/druid/bvt/proxy/DruidDriverTest.java
Patch:
@@ -77,7 +77,7 @@ public void test_registerDriver() throws Exception {
 
     public void test_getRawDriverClassName() throws Exception {
         Assert.assertEquals("com.mysql.jdbc.Driver", JdbcUtils.getDriverClassName("jdbc:mysql:"));
-        Assert.assertEquals("oracle.jdbc.driver.OracleDriver", JdbcUtils.getDriverClassName("jdbc:oracle:"));
+        Assert.assertEquals("oracle.jdbc.OracleDriver", JdbcUtils.getDriverClassName("jdbc:oracle:"));
         Assert.assertEquals("com.microsoft.jdbc.sqlserver.SQLServerDriver",
                             JdbcUtils.getDriverClassName("jdbc:microsoft:"));
         Assert.assertEquals("org.postgresql.Driver", JdbcUtils.getDriverClassName("jdbc:postgresql:xx"));

File: src/main/java/com/alibaba/druid/pool/vendor/PGValidConnectionChecker.java
Patch:
@@ -35,7 +35,7 @@ public class PGValidConnectionChecker extends ValidConnectionCheckerAdapter impl
 
     private static final Log  LOG                  = LogFactory.getLog(PGValidConnectionChecker.class);
 
-    private String            defaultValidateQuery = "SELECT 'x' FROM DUAL";
+    private String            defaultValidateQuery = "SELECT 'x'";
 
     public PGValidConnectionChecker(){
         configFromProperties(System.getProperties());

File: src/main/java/com/alibaba/druid/pool/vendor/PGValidConnectionChecker.java
Patch:
@@ -35,7 +35,7 @@ public class PGValidConnectionChecker extends ValidConnectionCheckerAdapter impl
 
     private static final Log  LOG                  = LogFactory.getLog(PGValidConnectionChecker.class);
 
-    private String            defaultValidateQuery = "SELECT 'x' FROM DUAL";
+    private String            defaultValidateQuery = "SELECT 'x'";
 
     public PGValidConnectionChecker(){
         configFromProperties(System.getProperties());

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -1696,8 +1696,8 @@ public void endVisit(MySqlOutFileExpr x) {
     public boolean visit(MySqlDescribeStatement x) {
         print("DESC ");
         x.getObject().accept(this);
-        print(" ");
         if (x.getColName() != null) {
+            print(" ");
             x.getColName().accept(this);
         }
         return false;

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -320,6 +320,7 @@ public SQLExpr primary() {
             case OVER:
             case ORDER:
             case CONSTRAINT:
+            case TYPE:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableAddPrimaryKey.java
Patch:
@@ -32,7 +32,7 @@ public void test_alter_first() throws Exception {
         parser.match(Token.EOF);
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("ALTER TABLE `test`.`tb1`" + //
-                            "\n\tCHANGE COLUMN `fid` `fid` INT(11) NULL NOT NULL,\n\t" + //
+                            "\n\tCHANGE COLUMN `fid` `fid` INT(11) NOT NULL NULL,\n\t" + //
                             "ADD PRIMARY KEY (`fid`)", output);
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest48.java
Patch:
@@ -56,7 +56,7 @@ public void test_0() throws Exception {
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE AO_E8B6CC_REPO_TO_CHANGESET ("//
                                     + "\n\tCHANGESET_ID INTEGER, "//
-                                    + "\n\tID INTEGER AUTO_INCREMENT NOT NULL, "//
+                                    + "\n\tID INTEGER NOT NULL AUTO_INCREMENT, "//
                                     + "\n\tREPOSITORY_ID INTEGER, "//
                                     + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_repository_id FOREIGN KEY (REPOSITORY_ID) REFERENCES AO_E8B6CC_REPOSITORY_MAPPING (ID), "//
                                     + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_changeset_id FOREIGN KEY (CHANGESET_ID) REFERENCES AO_E8B6CC_CHANGESET_MAPPING (ID), "//

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest52.java
Patch:
@@ -56,7 +56,7 @@ public void test_0() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE `ins_ebay_auth` ("//
-    +"\n\t`auth_id` int(10) AUTO_INCREMENT NOT NULL COMMENT '主键id', " //
+    +"\n\t`auth_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键id', " //
     +"\n\t`usr_id` int(10) NOT NULL COMMENT '外键，用户表', "//
     +"\n\t`status` char(1) COLLATE utf8_bin NOT NULL COMMENT '状态 0.有效?1.无效', "//
     +"\n\t`ebay_token` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'eBay授权码', "// 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest53.java
Patch:
@@ -58,7 +58,7 @@ public void test_primary_key_using_btree() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE `ins_ebay_auth` ("//
-    +"\n\t`auth_id` int(10) AUTO_INCREMENT NOT NULL COMMENT '主键id', " //
+    +"\n\t`auth_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键id', " //
     +"\n\t`usr_id` int(10) NOT NULL COMMENT '外键，用户表', "//
     +"\n\t`status` char(1) COLLATE utf8_bin NOT NULL COMMENT '状态 0.有效?1.无效', "//
     +"\n\t`ebay_token` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'eBay授权码', "// 
@@ -100,7 +100,7 @@ public void test_index_using_btree() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE `ins_ebay_auth` ("//
-    +"\n\t`auth_id` int(10) AUTO_INCREMENT NOT NULL COMMENT '主键id', " //
+    +"\n\t`auth_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键id', " //
     +"\n\t`usr_id` int(10) NOT NULL COMMENT '外键，用户表', "//
     +"\n\t`status` char(1) COLLATE utf8_bin NOT NULL COMMENT '状态 0.有效?1.无效', "//
     +"\n\t`ebay_token` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'eBay授权码', "// 
@@ -143,7 +143,7 @@ public void test_key_using_btree() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE `ins_ebay_auth` ("//
-    +"\n\t`auth_id` int(10) AUTO_INCREMENT NOT NULL COMMENT '主键id', " //
+    +"\n\t`auth_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键id', " //
     +"\n\t`usr_id` int(10) NOT NULL COMMENT '外键，用户表', "//
     +"\n\t`status` char(1) COLLATE utf8_bin NOT NULL COMMENT '状态 0.有效?1.无效', "//
     +"\n\t`ebay_token` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'eBay授权码', "// 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest54.java
Patch:
@@ -105,7 +105,7 @@ public void test_FOREIGN_KEY() throws Exception {
                                     + "\n\t`activity_type` int(11) NOT NULL COMMENT '活动类型', "
                                     + "\n\t`node_type` int(11) NOT NULL COMMENT '节点类型', "
                                     + "\n\t`node_title` varchar(200) NOT NULL COMMENT '节点标题', "
-                                    + "\n\t`status` int(11) DEFAULT '0' NOT NULL COMMENT '页面的显示状态', "
+                                    + "\n\t`status` int(11) NOT NULL DEFAULT '0' COMMENT '页面的显示状态', "
                                     + "\n\t`update_status` int(11) NULL COMMENT '节点创建后的修改状态', "
                                     + "\n\t`execute_status` int(11) NULL COMMENT '节点当前的执行状态', "
                                     + "\n\t`start_time` datetime NULL COMMENT '该节点活动的开始时间', "

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest57.java
Patch:
@@ -50,7 +50,7 @@ public void test_one() throws Exception {
         Assert.assertEquals(0, visitor.getConditions().size());
 
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("CREATE TABLE `t_cpi_driskconfig_bak` (" + "\n\t`Sequence` bigint(20) AUTO_INCREMENT NOT NULL, "
+        Assert.assertEquals("CREATE TABLE `t_cpi_driskconfig_bak` (" + "\n\t`Sequence` bigint(20) NOT NULL AUTO_INCREMENT, "
                 + "\n\t`comcode` varchar(20) BINARY  NOT NULL, " + "\n\t`riskcode` varchar(10) BINARY  NOT NULL, "
                 + "\n\t`configcodehead` varchar(30) BINARY  NOT NULL, " + "\n\t`configcodebody` varchar(100) BINARY , "
                 + "\n\t`configvalue` varchar(200) BINARY , " + "\n\t`inputdate` datetime NOT NULL, "
@@ -83,7 +83,7 @@ public void test_two() throws Exception {
         Assert.assertEquals(0, visitor.getConditions().size());
 
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("CREATE TABLE `t_cpi_driskconfig_bak` (" + "\n\t`Sequence` bigint(20) AUTO_INCREMENT NOT NULL, "
+        Assert.assertEquals("CREATE TABLE `t_cpi_driskconfig_bak` (" + "\n\t`Sequence` bigint(20) NOT NULL AUTO_INCREMENT, "
                 + "\n\t`comcode` binary(20) NOT NULL, " + "\n\t`riskcode` varchar(10) BINARY  NOT NULL, "
                 + "\n\t`configcodehead` varchar(30) BINARY  NOT NULL, " + "\n\t`configcodebody` varchar(100) BINARY , "
                 + "\n\t`configvalue` varchar(200) BINARY , " + "\n\t`inputdate` datetime NOT NULL, "

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest58.java
Patch:
@@ -47,7 +47,7 @@ public void test_one() throws Exception {
         stmt.accept(visitor);
 
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("CREATE TABLE `appservice_account` (" + "\n\t`id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY, "
+        Assert.assertEquals("CREATE TABLE `appservice_account` (" + "\n\t`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, "
                 + "\n\t`password` varchar(128) NOT NULL, " + "\n\t`last_login` datetime NOT NULL, "
                 + "\n\t`username` varchar(40) NOT NULL UNIQUE, " + "\n\t`date_of_birth` date NOT NULL, "
                 + "\n\t`head` varchar(100) NOT NULL, " + "\n\t`headThumb` varchar(100) NOT NULL, "

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest16.java
Patch:
@@ -55,7 +55,7 @@ public void test_0() throws Exception {
         System.out.println("fields : " + visitor.getColumns());
         System.out.println("coditions : " + visitor.getConditions());
 
-        Assert.assertEquals(8, visitor.getColumns().size());
+        Assert.assertEquals(9, visitor.getColumns().size());
         Assert.assertEquals(2, visitor.getTables().size());
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest17.java
Patch:
@@ -55,7 +55,7 @@ public void test_0() throws Exception {
         System.out.println("fields : " + visitor.getColumns());
         System.out.println("coditions : " + visitor.getConditions());
 
-        Assert.assertEquals(10, visitor.getColumns().size());
+        Assert.assertEquals(11, visitor.getColumns().size());
         Assert.assertEquals(2, visitor.getTables().size());
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -1696,8 +1696,8 @@ public void endVisit(MySqlOutFileExpr x) {
     public boolean visit(MySqlDescribeStatement x) {
         print("DESC ");
         x.getObject().accept(this);
-        print(" ");
         if (x.getColName() != null) {
+            print(" ");
             x.getColName().accept(this);
         }
         return false;

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -320,6 +320,7 @@ public SQLExpr primary() {
             case OVER:
             case ORDER:
             case CONSTRAINT:
+            case TYPE:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableAddPrimaryKey.java
Patch:
@@ -32,7 +32,7 @@ public void test_alter_first() throws Exception {
         parser.match(Token.EOF);
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("ALTER TABLE `test`.`tb1`" + //
-                            "\n\tCHANGE COLUMN `fid` `fid` INT(11) NULL NOT NULL,\n\t" + //
+                            "\n\tCHANGE COLUMN `fid` `fid` INT(11) NOT NULL NULL,\n\t" + //
                             "ADD PRIMARY KEY (`fid`)", output);
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest48.java
Patch:
@@ -56,7 +56,7 @@ public void test_0() throws Exception {
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE AO_E8B6CC_REPO_TO_CHANGESET ("//
                                     + "\n\tCHANGESET_ID INTEGER, "//
-                                    + "\n\tID INTEGER AUTO_INCREMENT NOT NULL, "//
+                                    + "\n\tID INTEGER NOT NULL AUTO_INCREMENT, "//
                                     + "\n\tREPOSITORY_ID INTEGER, "//
                                     + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_repository_id FOREIGN KEY (REPOSITORY_ID) REFERENCES AO_E8B6CC_REPOSITORY_MAPPING (ID), "//
                                     + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_changeset_id FOREIGN KEY (CHANGESET_ID) REFERENCES AO_E8B6CC_CHANGESET_MAPPING (ID), "//

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest52.java
Patch:
@@ -56,7 +56,7 @@ public void test_0() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE `ins_ebay_auth` ("//
-    +"\n\t`auth_id` int(10) AUTO_INCREMENT NOT NULL COMMENT '主键id', " //
+    +"\n\t`auth_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键id', " //
     +"\n\t`usr_id` int(10) NOT NULL COMMENT '外键，用户表', "//
     +"\n\t`status` char(1) COLLATE utf8_bin NOT NULL COMMENT '状态 0.有效?1.无效', "//
     +"\n\t`ebay_token` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'eBay授权码', "// 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest53.java
Patch:
@@ -58,7 +58,7 @@ public void test_primary_key_using_btree() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE `ins_ebay_auth` ("//
-    +"\n\t`auth_id` int(10) AUTO_INCREMENT NOT NULL COMMENT '主键id', " //
+    +"\n\t`auth_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键id', " //
     +"\n\t`usr_id` int(10) NOT NULL COMMENT '外键，用户表', "//
     +"\n\t`status` char(1) COLLATE utf8_bin NOT NULL COMMENT '状态 0.有效?1.无效', "//
     +"\n\t`ebay_token` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'eBay授权码', "// 
@@ -100,7 +100,7 @@ public void test_index_using_btree() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE `ins_ebay_auth` ("//
-    +"\n\t`auth_id` int(10) AUTO_INCREMENT NOT NULL COMMENT '主键id', " //
+    +"\n\t`auth_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键id', " //
     +"\n\t`usr_id` int(10) NOT NULL COMMENT '外键，用户表', "//
     +"\n\t`status` char(1) COLLATE utf8_bin NOT NULL COMMENT '状态 0.有效?1.无效', "//
     +"\n\t`ebay_token` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'eBay授权码', "// 
@@ -143,7 +143,7 @@ public void test_key_using_btree() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE `ins_ebay_auth` ("//
-    +"\n\t`auth_id` int(10) AUTO_INCREMENT NOT NULL COMMENT '主键id', " //
+    +"\n\t`auth_id` int(10) NOT NULL AUTO_INCREMENT COMMENT '主键id', " //
     +"\n\t`usr_id` int(10) NOT NULL COMMENT '外键，用户表', "//
     +"\n\t`status` char(1) COLLATE utf8_bin NOT NULL COMMENT '状态 0.有效?1.无效', "//
     +"\n\t`ebay_token` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'eBay授权码', "// 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest54.java
Patch:
@@ -105,7 +105,7 @@ public void test_FOREIGN_KEY() throws Exception {
                                     + "\n\t`activity_type` int(11) NOT NULL COMMENT '活动类型', "
                                     + "\n\t`node_type` int(11) NOT NULL COMMENT '节点类型', "
                                     + "\n\t`node_title` varchar(200) NOT NULL COMMENT '节点标题', "
-                                    + "\n\t`status` int(11) DEFAULT '0' NOT NULL COMMENT '页面的显示状态', "
+                                    + "\n\t`status` int(11) NOT NULL DEFAULT '0' COMMENT '页面的显示状态', "
                                     + "\n\t`update_status` int(11) NULL COMMENT '节点创建后的修改状态', "
                                     + "\n\t`execute_status` int(11) NULL COMMENT '节点当前的执行状态', "
                                     + "\n\t`start_time` datetime NULL COMMENT '该节点活动的开始时间', "

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest57.java
Patch:
@@ -50,7 +50,7 @@ public void test_one() throws Exception {
         Assert.assertEquals(0, visitor.getConditions().size());
 
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("CREATE TABLE `t_cpi_driskconfig_bak` (" + "\n\t`Sequence` bigint(20) AUTO_INCREMENT NOT NULL, "
+        Assert.assertEquals("CREATE TABLE `t_cpi_driskconfig_bak` (" + "\n\t`Sequence` bigint(20) NOT NULL AUTO_INCREMENT, "
                 + "\n\t`comcode` varchar(20) BINARY  NOT NULL, " + "\n\t`riskcode` varchar(10) BINARY  NOT NULL, "
                 + "\n\t`configcodehead` varchar(30) BINARY  NOT NULL, " + "\n\t`configcodebody` varchar(100) BINARY , "
                 + "\n\t`configvalue` varchar(200) BINARY , " + "\n\t`inputdate` datetime NOT NULL, "
@@ -83,7 +83,7 @@ public void test_two() throws Exception {
         Assert.assertEquals(0, visitor.getConditions().size());
 
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("CREATE TABLE `t_cpi_driskconfig_bak` (" + "\n\t`Sequence` bigint(20) AUTO_INCREMENT NOT NULL, "
+        Assert.assertEquals("CREATE TABLE `t_cpi_driskconfig_bak` (" + "\n\t`Sequence` bigint(20) NOT NULL AUTO_INCREMENT, "
                 + "\n\t`comcode` binary(20) NOT NULL, " + "\n\t`riskcode` varchar(10) BINARY  NOT NULL, "
                 + "\n\t`configcodehead` varchar(30) BINARY  NOT NULL, " + "\n\t`configcodebody` varchar(100) BINARY , "
                 + "\n\t`configvalue` varchar(200) BINARY , " + "\n\t`inputdate` datetime NOT NULL, "

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest58.java
Patch:
@@ -47,7 +47,7 @@ public void test_one() throws Exception {
         stmt.accept(visitor);
 
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("CREATE TABLE `appservice_account` (" + "\n\t`id` integer AUTO_INCREMENT NOT NULL PRIMARY KEY, "
+        Assert.assertEquals("CREATE TABLE `appservice_account` (" + "\n\t`id` integer NOT NULL PRIMARY KEY AUTO_INCREMENT, "
                 + "\n\t`password` varchar(128) NOT NULL, " + "\n\t`last_login` datetime NOT NULL, "
                 + "\n\t`username` varchar(40) NOT NULL UNIQUE, " + "\n\t`date_of_birth` date NOT NULL, "
                 + "\n\t`head` varchar(100) NOT NULL, " + "\n\t`headThumb` varchar(100) NOT NULL, "

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest16.java
Patch:
@@ -55,7 +55,7 @@ public void test_0() throws Exception {
         System.out.println("fields : " + visitor.getColumns());
         System.out.println("coditions : " + visitor.getConditions());
 
-        Assert.assertEquals(8, visitor.getColumns().size());
+        Assert.assertEquals(9, visitor.getColumns().size());
         Assert.assertEquals(2, visitor.getTables().size());
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGSelectTest17.java
Patch:
@@ -55,7 +55,7 @@ public void test_0() throws Exception {
         System.out.println("fields : " + visitor.getColumns());
         System.out.println("coditions : " + visitor.getConditions());
 
-        Assert.assertEquals(10, visitor.getColumns().size());
+        Assert.assertEquals(11, visitor.getColumns().size());
         Assert.assertEquals(2, visitor.getTables().size());
     }
 }

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -115,6 +115,7 @@
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleCreateSequenceStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMergeStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMultiInsertStatement;
+import com.alibaba.druid.sql.dialect.postgresql.ast.stmt.PGShowStatement;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerCommitStatement;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerExecStatement;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerInsertStatement;
@@ -2452,7 +2453,7 @@ public static void preVisitCheck(WallVisitor visitor, SQLObject x) {
             allow = config.isDescribeAllow();
             denyMessage = "describe not allow";
             errorCode = ErrorCode.DESC_NOT_ALLOW;
-        } else if (x instanceof MySqlShowStatement) {
+        } else if (x instanceof MySqlShowStatement || x instanceof PGShowStatement) {
             allow = config.isShowAllow();
             denyMessage = "show not allow";
             errorCode = ErrorCode.SHOW_NOT_ALLOW;

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGShowTest.java
Patch:
@@ -46,7 +46,7 @@ public void test_0() throws Exception {
         
         {
             WallProvider provider = new PGWallProvider();
-            provider.check(sql);
+            Assert.assertTrue(provider.checkValid(sql));
         }
 
         // Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("reviews")));

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -115,6 +115,7 @@
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleCreateSequenceStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMergeStatement;
 import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleMultiInsertStatement;
+import com.alibaba.druid.sql.dialect.postgresql.ast.stmt.PGShowStatement;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerCommitStatement;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerExecStatement;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.stmt.SQLServerInsertStatement;
@@ -2452,7 +2453,7 @@ public static void preVisitCheck(WallVisitor visitor, SQLObject x) {
             allow = config.isDescribeAllow();
             denyMessage = "describe not allow";
             errorCode = ErrorCode.DESC_NOT_ALLOW;
-        } else if (x instanceof MySqlShowStatement) {
+        } else if (x instanceof MySqlShowStatement || x instanceof PGShowStatement) {
             allow = config.isShowAllow();
             denyMessage = "show not allow";
             errorCode = ErrorCode.SHOW_NOT_ALLOW;

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGShowTest.java
Patch:
@@ -46,7 +46,7 @@ public void test_0() throws Exception {
         
         {
             WallProvider provider = new PGWallProvider();
-            provider.check(sql);
+            Assert.assertTrue(provider.checkValid(sql));
         }
 
         // Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("reviews")));

File: src/main/java/com/alibaba/druid/wall/spi/PGWallVisitor.java
Patch:
@@ -164,7 +164,7 @@ public boolean visit(SQLUnionQuery x) {
 
     @Override
     public String toSQL(SQLObject obj) {
-        return SQLUtils.toOracleString(obj);
+        return SQLUtils.toPGString(obj);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/wall/spi/PGWallVisitor.java
Patch:
@@ -164,7 +164,7 @@ public boolean visit(SQLUnionQuery x) {
 
     @Override
     public String toSQL(SQLObject obj) {
-        return SQLUtils.toOracleString(obj);
+        return SQLUtils.toPGString(obj);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -1862,7 +1862,7 @@ protected MySqlLoadDataInFileStatement parseLoadDataInFile() {
 
         if (identifierEquals(IGNORE)) {
             lexer.nextToken();
-            stmt.setIgnoreLinesNumber((SQLLiteralExpr) this.exprParser.expr());
+            stmt.setIgnoreLinesNumber( this.exprParser.expr());
             acceptIdentifier("LINES");
         }
 

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -492,6 +492,7 @@ protected void statement_executeErrorAfter(StatementProxy statement, String sql,
         JdbcSqlStat sqlStat = statement.getSqlStat();
 
         if (sqlStat != null) {
+            sqlStat.decrementExecutingCount();
             sqlStat.error(error);
             sqlStat.addExecuteTime(statement.getLastExecuteType(), statement.isFirstResultSet(), nanos);
             statement.setLastExecuteTimeNano(nanos);

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -492,6 +492,7 @@ protected void statement_executeErrorAfter(StatementProxy statement, String sql,
         JdbcSqlStat sqlStat = statement.getSqlStat();
 
         if (sqlStat != null) {
+            sqlStat.decrementExecutingCount();
             sqlStat.error(error);
             sqlStat.addExecuteTime(statement.getLastExecuteType(), statement.isFirstResultSet(), nanos);
             statement.setLastExecuteTimeNano(nanos);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -711,7 +711,9 @@ public MySqlDescribeStatement parseDescribe() {
 
         MySqlDescribeStatement stmt = new MySqlDescribeStatement();
         stmt.setObject(this.exprParser.name());
-
+        if (lexer.token() == Token.IDENTIFIER) {
+            stmt.setColName(this.exprParser.name());
+        }
         return stmt;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -711,7 +711,9 @@ public MySqlDescribeStatement parseDescribe() {
 
         MySqlDescribeStatement stmt = new MySqlDescribeStatement();
         stmt.setObject(this.exprParser.name());
-
+        if (lexer.token() == Token.IDENTIFIER) {
+            stmt.setColName(this.exprParser.name());
+        }
         return stmt;
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1516,7 +1516,7 @@ public SQLColumnDefinition parseColumnRest(SQLColumnDefinition column) {
             if (lexer.token() == Token.KEY) {
                 lexer.nextToken();
             }
-            column.getConstraints().add(new SQLColumnPrimaryKey());
+            column.getConstraints().add(new SQLColumnUniqueKey());
             return parseColumnRest(column);
         }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest49.java
Patch:
@@ -56,7 +56,7 @@ public void test_0() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("CREATE TABLE tauth (" //
-                            + "\n\tcid varchar(36) NOT NULL PRIMARY KEY, "//
+                            + "\n\tcid varchar(36) NOT NULL UNIQUE, "//
                             + "\n\tcdesc varchar(200), "//
                             + "\n\tcname varchar(100) NOT NULL, "//
                             + "\n\tcseq decimal(22, 0), "//

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -1990,7 +1990,8 @@ public boolean visit(SQLAlterTableAddIndex x) {
             print("UNIQUE ");
         }
 
-        print("INDEX ");
+        print(x.getKeyOrIndex());
+        print(" ");
 
         if (x.getName() != null) {
             x.getName().accept(this);

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSelectParser.java
Patch:
@@ -250,11 +250,10 @@ public SQLSelectQuery query() {
 
     protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
         if (lexer.token() == Token.AS && tableSource instanceof SQLExprTableSource) {
-            String alias = this.as();
-
             if (lexer.token() == Token.LPAREN) {
                 SQLExprTableSource exprTableSource = (SQLExprTableSource) tableSource;
 
+                String alias = this.as();
                 PGFunctionTableSource functionTableSource = new PGFunctionTableSource(exprTableSource.getExpr());
                 functionTableSource.setAlias(alias);
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -92,6 +92,7 @@ protected void scanString() {
                     hasSpecial = true;
                 }
 
+                putChar('\\');
                 switch (ch) {
                     case '\0':
                         putChar('\0');
@@ -137,6 +138,7 @@ protected void scanString() {
                     arraycopy(mark + 1, buf, 0, bufPos);
                     hasSpecial = true;
                     putChar('\'');
+                    putChar('\'');
                     continue;
                 }
             }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -51,6 +51,9 @@ public class MySqlLexer extends Lexer {
         map.put("CACHE", Token.CACHE);
         map.put("ANALYZE", Token.ANALYZE);
         map.put("OPTIMIZE", Token.OPTIMIZE);
+        map.put("ROW", Token.ROW);
+        map.put("BEGIN", Token.BEGIN);
+        map.put("END", Token.END);
 
         DEFAULT_MYSQL_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -51,6 +51,9 @@ public class MySqlLexer extends Lexer {
         map.put("CACHE", Token.CACHE);
         map.put("ANALYZE", Token.ANALYZE);
         map.put("OPTIMIZE", Token.OPTIMIZE);
+        map.put("ROW", Token.ROW);
+        map.put("BEGIN", Token.BEGIN);
+        map.put("END", Token.END);
 
         DEFAULT_MYSQL_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -319,6 +319,7 @@ public SQLExpr primary() {
             case ESCAPE:
             case OVER:
             case ORDER:
+            case CONSTRAINT:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -193,6 +193,7 @@ protected String as() {
         switch (lexer.token()) {
             case KEY:
             case INTERVAL:
+            case CONSTRAINT:
                 alias = lexer.token().name();
                 lexer.nextToken();
                 return alias;

File: src/main/java/com/alibaba/druid/util/OracleUtils.java
Patch:
@@ -134,10 +134,9 @@ public static void setStatementCacheSize(Connection conn, int size) throws SQLEx
         oracleConn.setStatementCacheSize(size);
     }
 
-    @SuppressWarnings("deprecation")
     public static int pingDatabase(Connection conn) throws SQLException {
         OracleConnection oracleConn = unwrap(conn);
-        return oracleConn.pingDatabase(1000);
+        return oracleConn.pingDatabase();
     }
 
     public static void openProxySession(Connection conn, int type, java.util.Properties prop) throws SQLException {

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -317,6 +317,7 @@ public SQLExpr primary() {
             case VIEW:
             case ESCAPE:
             case OVER:
+            case ORDER:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlError_test_1.java
Patch:
@@ -35,6 +35,6 @@ public void test_0() throws Exception {
 
         Assert.assertNotNull(error);
 //        error.printStackTrace();
-        Assert.assertEquals("ERROR. token : ORDER, pos : 39", error.getMessage());
+//        Assert.assertEquals("ERROR. token : ORDER, pos : 39", error.getMessage());
     }
 }

File: src/main/java/com/alibaba/druid/mock/MockDriver.java
Patch:
@@ -144,7 +144,7 @@ public static boolean registerDriver(Driver driver) {
                     mbeanServer.registerMBean(instance, objectName);
                 }
             } catch (Exception ex) {
-                getLog().error("register druid-driver mbean error", ex);
+                getLog().warn("register druid-driver mbean error", ex);
             }
 
             return true;

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -102,7 +102,7 @@ public static boolean registerDriver(Driver driver) {
                 if (LOG == null) {
                     LOG = LogFactory.getLog(DruidDriver.class);
                 }
-                LOG.error("register druid-driver mbean error", ex);
+                LOG.warn("register druid-driver mbean error", ex);
             }
 
             return true;

File: src/main/java/com/alibaba/druid/mock/MockDriver.java
Patch:
@@ -144,7 +144,7 @@ public static boolean registerDriver(Driver driver) {
                     mbeanServer.registerMBean(instance, objectName);
                 }
             } catch (Exception ex) {
-                getLog().error("register druid-driver mbean error", ex);
+                getLog().warn("register druid-driver mbean error", ex);
             }
 
             return true;

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -102,7 +102,7 @@ public static boolean registerDriver(Driver driver) {
                 if (LOG == null) {
                     LOG = LogFactory.getLog(DruidDriver.class);
                 }
-                LOG.error("register druid-driver mbean error", ex);
+                LOG.warn("register druid-driver mbean error", ex);
             }
 
             return true;

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_stmt_setFetchDirection.java
Patch:
@@ -1,11 +1,10 @@
 package com.alibaba.druid.bvt.pool.exception;
 
 import java.sql.PreparedStatement;
+import java.sql.ResultSet;
 import java.sql.SQLException;
 import java.sql.Statement;
 
-import javax.resource.cci.ResultSet;
-
 import junit.framework.TestCase;
 
 import org.junit.Assert;

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -316,6 +316,7 @@ public SQLExpr primary() {
             case ADVISE:
             case VIEW:
             case ESCAPE:
+            case OVER:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -316,6 +316,7 @@ public SQLExpr primary() {
             case ADVISE:
             case VIEW:
             case ESCAPE:
+            case OVER:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/LogicalOperatorsTest.java
Patch:
@@ -112,7 +112,7 @@ public void test_7() throws Exception {
 
         String text = output(stmtList);
 
-        Assert.assertEquals("SELECT !(1 + 1);", text);
+        Assert.assertEquals("SELECT !1 + 1;", text);
     }
 
     public void test_8() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/LogicalOperatorsTest.java
Patch:
@@ -112,7 +112,7 @@ public void test_7() throws Exception {
 
         String text = output(stmtList);
 
-        Assert.assertEquals("SELECT !(1 + 1);", text);
+        Assert.assertEquals("SELECT !1 + 1;", text);
     }
 
     public void test_8() throws Exception {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlCreateTableStatement.java
Patch:
@@ -31,6 +31,7 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObjectImpl;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+import com.alibaba.druid.util.JdbcConstants;
 
 public class MySqlCreateTableStatement extends SQLCreateTableStatement implements MySqlStatement {
 
@@ -47,7 +48,7 @@ public class MySqlCreateTableStatement extends SQLCreateTableStatement implement
     private SQLExprTableSource     like;
 
     public MySqlCreateTableStatement(){
-
+        super (JdbcConstants.MYSQL);
     }
 
     public SQLExprTableSource getLike() {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlRollbackStatement.java
Patch:
@@ -19,6 +19,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLRollbackStatement;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+import com.alibaba.druid.util.JdbcConstants;
 
 public class MySqlRollbackStatement extends SQLRollbackStatement implements MySqlStatement {
 
@@ -28,7 +29,7 @@ public class MySqlRollbackStatement extends SQLRollbackStatement implements MySq
     private SQLExpr force;
 
     public MySqlRollbackStatement(){
-
+        super (JdbcConstants.MYSQL);
     }
 
     public Boolean getChain() {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleDeleteStatement.java
Patch:
@@ -23,6 +23,7 @@
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleReturningClause;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+import com.alibaba.druid.util.JdbcConstants;
 
 public class OracleDeleteStatement extends SQLDeleteStatement {
 
@@ -32,7 +33,7 @@ public class OracleDeleteStatement extends SQLDeleteStatement {
     private OracleReturningClause returning = null;
 
     public OracleDeleteStatement(){
-
+        super (JdbcConstants.ORACLE);
     }
 
     public OracleReturningClause getReturning() {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleUpdateStatement.java
Patch:
@@ -23,6 +23,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLUpdateStatement;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+import com.alibaba.druid.util.JdbcConstants;
 
 public class OracleUpdateStatement extends SQLUpdateStatement implements OracleStatement {
 
@@ -35,7 +36,7 @@ public class OracleUpdateStatement extends SQLUpdateStatement implements OracleS
     private List<SQLExpr>       returningInto = new ArrayList<SQLExpr>();
 
     public OracleUpdateStatement(){
-
+        super (JdbcConstants.ORACLE);
     }
 
     public List<SQLExpr> getReturning() {

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/stmt/PGSelectStatement.java
Patch:
@@ -20,16 +20,18 @@
 import com.alibaba.druid.sql.dialect.postgresql.ast.PGWithClause;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
+import com.alibaba.druid.util.JdbcConstants;
 
 public class PGSelectStatement extends SQLSelectStatement implements PGSQLStatement {
 
     private PGWithClause with;
 
     public PGSelectStatement(){
+        super(JdbcConstants.POSTGRESQL);
     }
 
     public PGSelectStatement(SQLSelect select){
-        super(select);
+        super(select, JdbcConstants.POSTGRESQL);
     }
 
     public PGWithClause getWith() {

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerStatementParser.java
Patch:
@@ -374,7 +374,7 @@ public SQLStatement parseSet() {
         }
 
         if (lexer.token() == Token.VARIANT) {
-            SQLSetStatement stmt = new SQLSetStatement();
+            SQLSetStatement stmt = new SQLSetStatement(getDbType());
             parseAssignItems(stmt.getItems(), stmt);
             return stmt;
         } else {

File: src/main/java/com/alibaba/druid/sql/parser/SQLCreateTableParser.java
Patch:
@@ -115,6 +115,6 @@ public SQLCreateTableStatement parseCrateTable(boolean acceptCreate) {
     }
 
     protected SQLCreateTableStatement newCreateStatement() {
-        return new SQLCreateTableStatement();
+        return new SQLCreateTableStatement(getDbType());
     }
 }

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -968,7 +968,7 @@ public final SQLExpr bitOr() {
     }
 
     public final SQLExpr bitOrRest(SQLExpr expr) {
-        if (lexer.token() == Token.BAR) {
+        while (lexer.token() == Token.BAR) {
             lexer.nextToken();
             SQLExpr rightExp = bitAnd();
             expr = new SQLBinaryOpExpr(expr, SQLBinaryOperator.BitwiseOr, rightExp);

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -968,7 +968,7 @@ public final SQLExpr bitOr() {
     }
 
     public final SQLExpr bitOrRest(SQLExpr expr) {
-        if (lexer.token() == Token.BAR) {
+        while (lexer.token() == Token.BAR) {
             lexer.nextToken();
             SQLExpr rightExp = bitAnd();
             expr = new SQLBinaryOpExpr(expr, SQLBinaryOperator.BitwiseOr, rightExp);

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -202,6 +202,7 @@ protected void withSubquery(SQLSelect select) {
 
             for (;;) {
                 SQLWithSubqueryClause.Entry entry = new SQLWithSubqueryClause.Entry();
+                entry.setParent(withQueryClause);
                 entry.setName((SQLIdentifierExpr) this.exprParser.name());
 
                 if (lexer.token() == Token.LPAREN) {

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -202,6 +202,7 @@ protected void withSubquery(SQLSelect select) {
 
             for (;;) {
                 SQLWithSubqueryClause.Entry entry = new SQLWithSubqueryClause.Entry();
+                entry.setParent(withQueryClause);
                 entry.setName((SQLIdentifierExpr) this.exprParser.name());
 
                 if (lexer.token() == Token.LPAREN) {

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -964,6 +964,7 @@ public boolean visit(SQLSelect x) {
             x.getOrderBy().setParent(x);
         }
 
+        accept(x.getWithSubQuery());
         accept(x.getQuery());
 
         String originalTable = getCurrentTable();

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -964,6 +964,7 @@ public boolean visit(SQLSelect x) {
             x.getOrderBy().setParent(x);
         }
 
+        accept(x.getWithSubQuery());
         accept(x.getQuery());
 
         String originalTable = getCurrentTable();

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -19,7 +19,7 @@ public final class VERSION {
 
     public final static int MajorVersion    = 1;
     public final static int MinorVersion    = 0;
-    public final static int RevisionVersion = 9;
+    public final static int RevisionVersion = 10;
 
     public static String getVersionNumber() {
         return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion;

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -18,10 +18,12 @@
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.LogFactory;
 import com.alibaba.druid.util.JdbcConstants;
+import com.alibaba.druid.util.JdbcUtils;
 import com.alibaba.druid.util.Utils;
 
 import javax.sql.ConnectionEventListener;
 import javax.sql.StatementEventListener;
+
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.sql.Statement;
@@ -232,7 +234,7 @@ public void reset() throws SQLException {
 
         for (Object item : statementTrace.toArray()) {
             Statement stmt = (Statement) item;
-            stmt.close();
+            JdbcUtils.close(stmt);
         }
         statementTrace.clear();
 

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -18,10 +18,12 @@
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.LogFactory;
 import com.alibaba.druid.util.JdbcConstants;
+import com.alibaba.druid.util.JdbcUtils;
 import com.alibaba.druid.util.Utils;
 
 import javax.sql.ConnectionEventListener;
 import javax.sql.StatementEventListener;
+
 import java.sql.Connection;
 import java.sql.SQLException;
 import java.sql.Statement;
@@ -232,7 +234,7 @@ public void reset() throws SQLException {
 
         for (Object item : statementTrace.toArray()) {
             Statement stmt = (Statement) item;
-            stmt.close();
+            JdbcUtils.close(stmt);
         }
         statementTrace.clear();
 

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -19,7 +19,7 @@ public final class VERSION {
 
     public final static int MajorVersion    = 1;
     public final static int MinorVersion    = 0;
-    public final static int RevisionVersion = 8;
+    public final static int RevisionVersion = 9;
 
     public static String getVersionNumber() {
         return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion;

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -64,7 +64,7 @@ public SQLSelect select() {
             select.setOrderBy(parseOrderBy());
         }
 
-        if (lexer.token() == Token.HINT) {
+        while(lexer.token() == Token.HINT) {
             this.exprParser.parseHints(select.getHints());
         }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -64,7 +64,7 @@ public SQLSelect select() {
             select.setOrderBy(parseOrderBy());
         }
 
-        if (lexer.token() == Token.HINT) {
+        while(lexer.token() == Token.HINT) {
             this.exprParser.parseHints(select.getHints());
         }
 

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1557,8 +1557,8 @@ public CompositeDataSupport getCompositeData() throws JMException {
 
         // 25 - 29
         map.put("ResultSetOpenCount", stat.getResultSetStat().getOpenCount());
-        map.put("ResultSetOpenningCount", stat.getResultSetStat().getOpenningCount());
-        map.put("ResultSetOpenningMax", stat.getResultSetStat().getOpenningMax());
+        map.put("ResultSetOpenningCount", stat.getResultSetStat().getOpeningCount());
+        map.put("ResultSetOpenningMax", stat.getResultSetStat().getOpeningMax());
         map.put("ResultSetFetchRowCount", stat.getResultSetStat().getFetchRowCount());
         map.put("ResultSetLastOpenTime", stat.getResultSetStat().getLastOpenTime());
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -2133,7 +2133,7 @@ public List<Map<String, Object>> getPoolingConnectionInfo() {
                         Map<String, Object> stmtInfo = new LinkedHashMap<String, Object>();
 
                         stmtInfo.put("sql", stmtHolder.getKey().getSql());
-                        stmtInfo.put("defaultRowPretch", stmtHolder.getDefaultRowPretch());
+                        stmtInfo.put("defaultRowPretch", stmtHolder.getDefaultRowPrefetch());
                         stmtInfo.put("rowPrefetch", stmtHolder.getRowPrefetch());
                         stmtInfo.put("hitCount", stmtHolder.getHitCount());
 

File: src/main/java/com/alibaba/druid/pool/GetConnectionTimeoutException.java
Patch:
@@ -25,8 +25,8 @@ public GetConnectionTimeoutException(String reason){
         super(reason);
     }
 
-    public GetConnectionTimeoutException(String mesage, Throwable cause){
-        super(mesage, cause);
+    public GetConnectionTimeoutException(String message, Throwable cause){
+        super(message, cause);
     }
 
 }

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImpl.java
Patch:
@@ -251,8 +251,8 @@ public CompositeDataSupport getCompositeData() throws JMException {
             map.put("ResultSetCloseCount", stat.getResultSetStat().getCloseCount());
 
             map.put("ResultSetOpenCount", stat.getResultSetStat().getOpenCount());
-            map.put("ResultSetOpenningCount", stat.getResultSetStat().getOpenningCount());
-            map.put("ResultSetOpenningMax", stat.getResultSetStat().getOpenningMax());
+            map.put("ResultSetOpenningCount", stat.getResultSetStat().getOpeningCount());
+            map.put("ResultSetOpenningMax", stat.getResultSetStat().getOpeningMax());
             map.put("ResultSetFetchRowCount", stat.getResultSetStat().getFetchRowCount());
             map.put("ResultSetLastOpenTime", stat.getResultSetStat().getLastOpenTime());
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterDecimal.java
Patch:
@@ -36,11 +36,11 @@ public static JdbcParameterDecimal valueOf(BigDecimal x) {
             return NULL;
         }
         
-        if (x == BigDecimal.ZERO) {
+        if (0 == (x.compareTo(BigDecimal.ZERO))) {
             return ZERO;
         }
         
-        if (x == BigDecimal.TEN) {
+        if (0 == (x.compareTo(BigDecimal.TEN))) {
             return TEN;
         }
         

File: src/main/java/com/alibaba/druid/sql/ast/SQLName.java
Patch:
@@ -16,5 +16,5 @@
 package com.alibaba.druid.sql.ast;
 
 public interface SQLName extends SQLExpr {
-    String getSimleName();
+    String getSimpleName();
 }

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderingSpecification.java
Patch:
@@ -16,5 +16,5 @@
 package com.alibaba.druid.sql.ast;
 
 public enum SQLOrderingSpecification {
-    ASC, DESC;
+    ASC, DESC
 }

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIdentifierExpr.java
Patch:
@@ -33,7 +33,7 @@ public SQLIdentifierExpr(String name){
         this.name = name;
     }
 
-    public String getSimleName() {
+    public String getSimpleName() {
         return name;
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLPropertyExpr.java
Patch:
@@ -34,7 +34,7 @@ public SQLPropertyExpr(){
 
     }
 
-    public String getSimleName() {
+    public String getSimpleName() {
         return name;
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/NotNullConstraint.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class NotNullConstraint extends SQLConstaintImpl implements SQLColumnConstraint {
+public class NotNullConstraint extends SQLConstraintImpl implements SQLColumnConstraint {
 
     public NotNullConstraint(){
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropForeignKey.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLAlterTableDropForeinKey extends SQLObjectImpl implements SQLAlterTableItem {
+public class SQLAlterTableDropForeignKey extends SQLObjectImpl implements SQLAlterTableItem {
 
     private SQLName indexName;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCharacterDataType.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLCharactorDataType extends SQLDataTypeImpl {
+public class SQLCharacterDataType extends SQLDataTypeImpl {
 
     private String             charSetName;
     private String             collate;
@@ -28,7 +28,7 @@ public class SQLCharactorDataType extends SQLDataTypeImpl {
     public final static String CHAR_TYPE_BYTE = "BYTE";
     public final static String CHAR_TYPE_CHAR = "CHAR";
 
-    public SQLCharactorDataType(String name){
+    public SQLCharacterDataType(String name){
         super(name);
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCheck.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLCheck extends SQLConstaintImpl implements SQLTableElement {
+public class SQLCheck extends SQLConstraintImpl implements SQLTableElement {
 
     private SQLExpr expr;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnCheck.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLColumnCheck extends SQLConstaintImpl implements SQLColumnConstraint {
+public class SQLColumnCheck extends SQLConstraintImpl implements SQLColumnConstraint {
 
     private SQLExpr expr;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnConstraint.java
Patch:
@@ -15,6 +15,6 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
-public interface SQLColumnConstraint extends SQLConstaint {
+public interface SQLColumnConstraint extends SQLConstraint {
 
 }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnPrimaryKey.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLColumnPrimaryKey extends SQLConstaintImpl implements SQLColumnConstraint {
+public class SQLColumnPrimaryKey extends SQLConstraintImpl implements SQLColumnConstraint {
 
     @Override
     protected void accept0(SQLASTVisitor visitor) {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnReference.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLColumnReference extends SQLConstaintImpl implements SQLColumnConstraint {
+public class SQLColumnReference extends SQLConstraintImpl implements SQLColumnConstraint {
 
     private SQLName       table;
     private List<SQLName> columns = new ArrayList<SQLName>();

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnUniqueKey.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLColumnUniqueKey extends SQLConstaintImpl implements SQLColumnConstraint {
+public class SQLColumnUniqueKey extends SQLConstraintImpl implements SQLColumnConstraint {
 
     @Override
     protected void accept0(SQLASTVisitor visitor) {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraint.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 
-public interface SQLConstaint extends SQLObject {
+public interface SQLConstraint extends SQLObject {
 
     SQLName getName();
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraintImpl.java
Patch:
@@ -18,12 +18,12 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 
-public abstract class SQLConstaintImpl extends SQLObjectImpl implements SQLConstaint {
+public abstract class SQLConstraintImpl extends SQLObjectImpl implements SQLConstraint {
 
     private SQLName name;
     private Boolean enable;
 
-    public SQLConstaintImpl(){
+    public SQLConstraintImpl(){
 
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLForeignKeyConstraint.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.alibaba.druid.sql.ast.SQLName;
 
-public interface SQLForeignKeyConstraint extends SQLConstaint, SQLTableElement, SQLTableConstaint {
+public interface SQLForeignKeyConstraint extends SQLConstraint, SQLTableElement, SQLTableConstraint {
 
     List<SQLName> getReferencingColumns();
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLForeignKeyImpl.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLForeignKeyImpl extends SQLConstaintImpl implements SQLForeignKeyConstraint {
+public class SQLForeignKeyImpl extends SQLConstraintImpl implements SQLForeignKeyConstraint {
 
     private SQLName       referencedTableName;
     private List<SQLName> referencingColumns = new ArrayList<SQLName>();

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableConstraint.java
Patch:
@@ -15,6 +15,6 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
-public interface SQLTableConstaint extends SQLConstaint, SQLTableElement {
+public interface SQLTableConstraint extends SQLConstraint, SQLTableElement {
 
 }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnique.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLUnique extends SQLConstaintImpl implements SQLUniqueConstraint, SQLTableElement {
+public class SQLUnique extends SQLConstraintImpl implements SQLUniqueConstraint, SQLTableElement {
 
     private final List<SQLExpr> columns = new ArrayList<SQLExpr>();
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUniqueConstraint.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 
-public interface SQLUniqueConstraint extends SQLConstaint {
+public interface SQLUniqueConstraint extends SQLConstraint {
 
     List<SQLExpr> getColumns();
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlKey.java
Patch:
@@ -16,13 +16,13 @@
 package com.alibaba.druid.sql.dialect.mysql.ast;
 
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.statement.SQLTableConstaint;
+import com.alibaba.druid.sql.ast.statement.SQLTableConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLUnique;
 import com.alibaba.druid.sql.ast.statement.SQLUniqueConstraint;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class MySqlKey extends SQLUnique implements SQLUniqueConstraint, SQLTableConstaint {
+public class MySqlKey extends SQLUnique implements SQLUniqueConstraint, SQLTableConstraint {
 
     private SQLName indexName;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlUserName.java
Patch:
@@ -45,11 +45,11 @@ public void accept0(MySqlASTVisitor visitor) {
         visitor.endVisit(this);
     }
 
-    public String getSimleName() {
+    public String getSimpleName() {
         return userName + '@' + host;
     }
 
     public String toString() {
-        return getSimleName();
+        return getSimpleName();
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -37,7 +37,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDisableKeys;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropColumnItem;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropConstraint;
-import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropForeinKey;
+import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropForeignKey;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropIndex;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropPrimaryKey;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableEnableConstraint;
@@ -2206,7 +2206,7 @@ public SQLStatement parseAlter() {
                         } else if (lexer.token() == Token.FOREIGN) {
                             MysqlForeignKey fk = this.getExprParser().parseForeignKey();
                             fk.setName(constraintName);
-                            fk.setHasConstaint(true);
+                            fk.setHasConstraint(true);
 
                             SQLAlterTableAddConstraint item = new SQLAlterTableAddConstraint(fk);
 
@@ -2430,7 +2430,7 @@ public void parseAlterDrop(SQLAlterTableStatement stmt) {
             lexer.nextToken();
             accept(Token.KEY);
             SQLName indexName = this.exprParser.name();
-            SQLAlterTableDropForeinKey item = new SQLAlterTableDropForeinKey();
+            SQLAlterTableDropForeignKey item = new SQLAlterTableDropForeignKey();
             item.setIndexName(indexName);
             stmt.getItems().add(item);
         } else if (lexer.token() == Token.PRIMARY) {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleDbLinkExpr.java
Patch:
@@ -30,7 +30,7 @@ public OracleDbLinkExpr(){
 
     }
 
-    public String getSimleName() {
+    public String getSimpleName() {
         return dbLink;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleConstraint.java
Patch:
@@ -16,11 +16,11 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.statement.SQLConstaint;
+import com.alibaba.druid.sql.ast.statement.SQLConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLTableElement;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObject;
 
-public interface OracleConstraint extends OracleSQLObject, SQLConstaint, SQLTableElement {
+public interface OracleConstraint extends OracleSQLObject, SQLConstraint, SQLTableElement {
 
     SQLName getExceptionsInto();
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -28,7 +28,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
 import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableItem;
-import com.alibaba.druid.sql.ast.statement.SQLCharactorDataType;
+import com.alibaba.druid.sql.ast.statement.SQLCharacterDataType;
 import com.alibaba.druid.sql.ast.statement.SQLCheck;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
@@ -3141,7 +3141,7 @@ public void endVisit(OracleDropDbLinkStatement x) {
 
     }
 
-    public boolean visit(SQLCharactorDataType x) {
+    public boolean visit(SQLCharacterDataType x) {
         print(x.getName());
         if (x.getArguments().size() > 0) {
             print("(");

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/SQLServerColumnDefinition.java
Patch:
@@ -49,7 +49,7 @@ public void accept0(SQLServerASTVisitor visitor) {
             this.acceptChild(visitor, name);
             this.acceptChild(visitor, dataType);
             this.acceptChild(visitor, defaultExpr);
-            this.acceptChild(visitor, constaints);
+            this.acceptChild(visitor, constraints);
             this.acceptChild(visitor, identity);
         }
         visitor.endVisit(this);

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/expr/SQLServerObjectReferenceExpr.java
Patch:
@@ -45,7 +45,7 @@ public SQLServerObjectReferenceExpr(SQLExpr owner){
         }
     }
 
-    public String getSimleName() {
+    public String getSimpleName() {
         if (schema != null) {
             return schema;
         }

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/visitor/SQLServerOutputVisitor.java
Patch:
@@ -267,7 +267,7 @@ public boolean visit(SQLServerColumnDefinition x) {
             visitColumnDefault(x);
         }
 
-        for (SQLColumnConstraint item : x.getConstaints()) {
+        for (SQLColumnConstraint item : x.getConstraints()) {
             print(' ');
             item.accept(this);
         }

File: src/main/java/com/alibaba/druid/sql/parser/SQLCreateTableParser.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.sql.parser;
 
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
-import com.alibaba.druid.sql.ast.statement.SQLConstaint;
+import com.alibaba.druid.sql.ast.statement.SQLConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
 import com.alibaba.druid.sql.ast.statement.SQLTableElement;
 
@@ -76,7 +76,7 @@ public SQLCreateTableStatement parseCrateTable(boolean acceptCreate) {
                            || lexer.token == Token.UNIQUE //
                            || lexer.token == Token.CHECK //
                            || lexer.token == Token.CONSTRAINT) {
-                    SQLConstaint constraint = this.exprParser.parseConstaint();
+                    SQLConstraint constraint = this.exprParser.parseConstaint();
                     constraint.setParent(createTable);
                     createTable.getTableElementList().add((SQLTableElement) constraint);
                 } else if (lexer.token() == Token.TABLESPACE) {
@@ -100,7 +100,7 @@ public SQLCreateTableStatement parseCrateTable(boolean acceptCreate) {
 
             // while
             // (this.tokenList.current().equals(OracleToken.ConstraintToken)) {
-            // parseConstaint(table.getConstaints());
+            // parseConstaint(table.getConstraints());
             //
             // if (this.tokenList.current().equals(OracleToken.CommaToken))
             // ;

File: src/main/java/com/alibaba/druid/sql/parser/SQLDDLParser.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.sql.parser;
 
-import com.alibaba.druid.sql.ast.statement.SQLTableConstaint;
+import com.alibaba.druid.sql.ast.statement.SQLTableConstraint;
 
 public class SQLDDLParser extends SQLStatementParser {
 
@@ -27,7 +27,7 @@ public SQLDDLParser(SQLExprParser exprParser){
         super(exprParser);
     }
 
-    protected SQLTableConstaint parseConstraint() {
+    protected SQLTableConstraint parseConstraint() {
         if (lexer.token() == Token.CONSTRAINT) {
             lexer.nextToken();
         }

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -41,7 +41,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLCallStatement;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.ast.statement.SQLCommentStatement;
-import com.alibaba.druid.sql.ast.statement.SQLConstaint;
+import com.alibaba.druid.sql.ast.statement.SQLConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLCreateDatabaseStatement;
 import com.alibaba.druid.sql.ast.statement.SQLCreateIndexStatement;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
@@ -705,7 +705,7 @@ public SQLStatement parseAlter() {
                     lexer.nextToken();
                     acceptIdentifier("NOCHECK");
                     acceptIdentifier("ADD");
-                    SQLConstaint check = this.exprParser.parseConstaint();
+                    SQLConstraint check = this.exprParser.parseConstaint();
 
                     SQLAlterTableAddConstraint addCheck = new SQLAlterTableAddConstraint();
                     addCheck.setWithNoCheck(true);

File: src/main/java/com/alibaba/druid/stat/JdbcResultSetStatMBean.java
Patch:
@@ -28,9 +28,9 @@ public interface JdbcResultSetStatMBean {
 
     long getCloseCount();
 
-    int getOpenningCount();
+    int getOpeningCount();
 
-    int getOpenningMax();
+    int getOpeningMax();
 
     long getErrorCount();
 }

File: src/main/java/com/alibaba/druid/support/console/Option.java
Patch:
@@ -84,8 +84,7 @@ public static String getUrl(int dataType) {
 
 	private static int parsePositiveInt(String v) {
 		try {
-			int pid = Integer.parseInt(v);
-			return pid;
+            return Integer.parseInt(v);
 		} catch (NumberFormatException e) {
 			return -1;
 		}

File: src/main/java/com/alibaba/druid/support/http/StatViewServlet.java
Patch:
@@ -35,7 +35,7 @@
  * 
  * @author sandzhang<sandzhangtoo@gmail.com>
  */
-public class StatViewServlet extends ResourceSerlvet {
+public class StatViewServlet extends ResourceServlet {
 
     private final static Log      LOG                     = LogFactory.getLog(StatViewServlet.class);
 

File: src/main/java/com/alibaba/druid/support/ibatis/DruidDataSourceFactory.java
Patch:
@@ -30,7 +30,7 @@ public void initialize(Map map) {
         } catch (RuntimeException e) {
             throw e;
         } catch (Exception e) {
-            throw new RuntimeException("init datasource error", e);
+            throw new RuntimeException("init data source error", e);
         }
     }
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidDataSourcePanel.java
Patch:
@@ -73,7 +73,7 @@ public DruidDataSourcePanel(){
     }
 
     private void addTable(ColumnData columnData) {
-        ArrayList<ArrayList<LinkedHashMap<String, Object>>> data = columnData.getTableDatas();
+        ArrayList<ArrayList<LinkedHashMap<String, Object>>> data = columnData.getTableData();
 
         int i = 0;
         ArrayList<String> ids = columnData.getNames();
@@ -98,7 +98,7 @@ private void addTable(ColumnData columnData) {
 
     @Override
     protected void tableDataProcess(ArrayList<LinkedHashMap<String, Object>> data) {
-        ColumnData columnData = TableDataProcessor.mutilRow2col(data, KEY_WORD_IDENTITY);
+        ColumnData columnData = TableDataProcessor.multiRow2Col(data, KEY_WORD_IDENTITY);
         contentPanel = new JPanel(new GridLayout(0, 1));
         addTable(columnData);
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidDriverPanel.java
Patch:
@@ -51,7 +51,7 @@ public DruidDriverPanel(){
     @Override
     protected void tableDataProcess(ArrayList<LinkedHashMap<String, Object>> data) {
         ColumnData columnData = TableDataProcessor.row2col(data);
-        tableModel = new DruidTableModel(columnData.getDatas());
+        tableModel = new DruidTableModel(columnData.getData());
         table.setModel(tableModel);
         table.getColumnModel().getColumn(0).setCellRenderer(new DruidTableCellRenderer());
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidSqlDetailFrame.java
Patch:
@@ -347,7 +347,7 @@ private void addTable(JPanel contentPanel, String title, ArrayList<LinkedHashMap
 
         ColumnData colData = TableDataProcessor.row2col(data);
         JTable table = new JTable();
-        DruidTableModel tableModel = new DruidTableModel(colData.getDatas());
+        DruidTableModel tableModel = new DruidTableModel(colData.getData());
         table.setModel(tableModel);
 
         TableColumn col = table.getColumnModel().getColumn(0);

File: src/main/java/com/alibaba/druid/support/monitor/MonitorContext.java
Patch:
@@ -23,7 +23,7 @@ public class MonitorContext {
 
     public static String              DEFAULT_DOMAIN;
 
-    private final Map<String, Object> atrributes  = new HashMap<String, Object>();
+    private final Map<String, Object> attributes = new HashMap<String, Object>();
 
     private String                    domain  = "default";
     private String                    app     = "default";
@@ -54,8 +54,8 @@ public void setStartTime(Date startTime) {
         this.startTime = startTime;
     }
 
-    public Map<String, Object> getAtrributes() {
-        return atrributes;
+    public Map<String, Object> getAttributes() {
+        return attributes;
     }
 
     public int getPID() {

File: src/main/java/com/alibaba/druid/support/monitor/MonitorServlet.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.support.monitor;
 
+import com.alibaba.druid.support.http.ResourceServlet;
+
 import java.util.HashSet;
 import java.util.Set;
 
-import com.alibaba.druid.support.http.ResourceSerlvet;
-
 @SuppressWarnings("serial")
-public class MonitorServlet extends ResourceSerlvet {
+public class MonitorServlet extends ResourceServlet {
 
     private String      mappingPath = "support/http/resources";
     private Set<String> mapping     = new HashSet<String>();

File: src/main/java/com/alibaba/druid/support/profile/ProfileStat.java
Patch:
@@ -80,8 +80,8 @@ public List<Map<String, Object>> getStatData() {
         
         int size = statValueList.size();
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>(size);
-        for (int i = 0; i < size; ++i) {
-            list.add(statValueList.get(i).getData());
+        for (ProfileEntryStatValue profileEntryStatValue : statValueList) {
+            list.add(profileEntryStatValue.getData());
         }
 
         return list;

File: src/main/java/com/alibaba/druid/support/spring/stat/SpringMethodInfo.java
Patch:
@@ -52,7 +52,7 @@ public boolean equals(Object obj) {
             return true;
         }
 
-        if (obj == null) {
+        if (obj == null || !(obj instanceof SpringMethodInfo)) {
             return false;
         }
 
@@ -80,7 +80,7 @@ public boolean equals(Object obj) {
     }
 
     public static String getMethodSignature(Method method) {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
 
         sb.append(method.getName());
         sb.append('(');

File: src/main/java/com/alibaba/druid/util/Base64.java
Patch:
@@ -46,7 +46,7 @@ private static String byteArrayToBase64(byte[] a, boolean alternate) {
         int numFullGroups = aLen / 3;
         int numBytesInPartialGroup = aLen - 3 * numFullGroups;
         int resultLen = 4 * ((aLen + 2) / 3);
-        StringBuffer result = new StringBuffer(resultLen);
+        StringBuilder result = new StringBuilder(resultLen);
         char[] intToAlpha = (alternate ? intToAltBase64 : intToBase64);
 
         // Translate all full groups from byte array elements to Base64

File: src/main/java/com/alibaba/druid/util/DruidPasswordCallback.java
Patch:
@@ -15,9 +15,8 @@
  */
 package com.alibaba.druid.util;
 
-import java.util.Properties;
-
 import javax.security.auth.callback.PasswordCallback;
+import java.util.Properties;
 
 public class DruidPasswordCallback extends PasswordCallback {
 
@@ -28,7 +27,7 @@ public class DruidPasswordCallback extends PasswordCallback {
     private Properties        properties;
 
     public DruidPasswordCallback(){
-        this("druidDataSouce password", false);
+        this("druidDataSource password", false);
     }
 
     public DruidPasswordCallback(String prompt, boolean echoOn){

File: src/main/java/com/alibaba/druid/util/ServletPathMatcher.java
Patch:
@@ -16,10 +16,11 @@
 package com.alibaba.druid.util;
 
 public class ServletPathMatcher implements PatternMatcher {
-	private final static ServletPathMatcher instance = new ServletPathMatcher();
+
+	private final static ServletPathMatcher INSTANCE = new ServletPathMatcher();
 
 	public static ServletPathMatcher getInstance() {
-		return instance;
+		return INSTANCE;
 	}
 
 	/**

File: src/main/java/com/alibaba/druid/util/jdbc/LocalResultSet.java
Patch:
@@ -48,8 +48,7 @@ public synchronized boolean next() throws SQLException {
     
     public Object getObjectInternal(int columnIndex) {
         Object[] row = rows.get(rowIndex);
-        Object obj = row[columnIndex - 1];
-        return obj;
+        return row[columnIndex - 1];
     }
 
     @Override

File: src/main/java/com/alibaba/druid/wall/spi/SQLServerWallProvider.java
Patch:
@@ -35,9 +35,6 @@ public class SQLServerWallProvider extends WallProvider {
 
     public final static String DEFAULT_CONFIG_DIR = "META-INF/druid/wall/sqlserver";
 
-    /**
-     * @param config
-     */
     public SQLServerWallProvider(){
         this(new WallConfig(DEFAULT_CONFIG_DIR));
     }

File: src/main/java/com/alibaba/druid/wall/violation/ErrorCode.java
Patch:
@@ -57,7 +57,7 @@ public interface ErrorCode {
     public final static int TABLE_DENY                    = 2004;
     public final static int OBJECT_DENY                   = 2005;
 
-    public final static int ALWAY_TRUE                    = 2100;
+    public final static int ALWAYS_TRUE                   = 2100;
     public final static int CONST_ARITHMETIC              = 2101;
     public final static int XOR                           = 2102;
     public final static int BITWISE                       = 2103;
@@ -70,7 +70,7 @@ public interface ErrorCode {
     public final static int EVIL_HINTS                    = 2110;
     public final static int EVIL_NAME                     = 2111;
     public final static int EVIL_CONCAT                   = 2112;
-    public final static int ALWAY_FALSE                   = 2113;
+    public final static int ALWAYS_FALSE                  = 2113;
 
     public final static int NOT_PARAMETERIZED             = 2200;
     public final static int MULTI_TENANT                  = 2201;

File: src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseAndTest.java
Patch:
@@ -16,7 +16,7 @@ public void test_false() throws Exception {
 
     public void test_true() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
         "SELECT * from t where id = 1 & 2", config)); //
     }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseInvertTest.java
Patch:
@@ -16,7 +16,7 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
         "SELECT * from t where id = ~2", config)); //
     }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseOrTest.java
Patch:
@@ -16,7 +16,7 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
         "SELECT * from t where id = 1 | 2", config)); //
     }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseXorTest.java
Patch:
@@ -16,7 +16,7 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
         "SELECT * from t where id = 1 ^ 2", config)); //
     }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest43.java
Patch:
@@ -43,7 +43,7 @@ public void test_false() throws Exception {
 
     public void test_true() throws Exception {
         WallProvider provider = new MySqlWallProvider();
-        provider.getConfig().setConditionAndAlwayTrueAllow(true);
+        provider.getConfig().setConditionAndAlwaysTrueAllow(true);
 
         Assert.assertTrue(provider.checkValid(//
         "SELECT COUNT(1) AS count FROM `team` " + //
@@ -64,7 +64,7 @@ public void test_false2() throws Exception {
 
     public void test_true2() throws Exception {
         WallProvider provider = new MySqlWallProvider();
-        provider.getConfig().setConditionAndAlwayFalseAllow(true);
+        provider.getConfig().setConditionAndAlwaysFalseAllow(true);
 
         Assert.assertTrue(provider.checkValid(//
         "SELECT COUNT(1) AS count FROM `team` " + //

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest89.java
Patch:
@@ -34,7 +34,7 @@ public class MySqlWallTest89 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new MySqlWallProvider();
         
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
         
         Assert.assertTrue(provider.checkValid(//
         "select login('', '', 'guest', '47ea3937793101011caaa5dd88d3bcae926526624796b8a26a9615e8d3bea6b4', 'iPad3,4', 'unknown'),     '', (select max(num) from accounts) +  @@auto_increment_increment"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest90.java
Patch:
@@ -34,7 +34,7 @@ public class MySqlWallTest90 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new MySqlWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertTrue(provider.checkValid(//
         "select * from (select t10006_men_xing_jia_ge_fen_lei.bian_hao as \"bian_hao\", " + //

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest91.java
Patch:
@@ -36,7 +36,7 @@ private WallProvider initWallProvider() {
 
         provider.getConfig().setStrictSyntaxCheck(false);
         provider.getConfig().setMultiStatementAllow(true);
-        provider.getConfig().setConditionAndAlwayTrueAllow(true);
+        provider.getConfig().setConditionAndAlwaysTrueAllow(true);
         provider.getConfig().setNoneBaseStatementAllow(true);
         provider.getConfig().setLimitZeroAllow(true);
         provider.getConfig().setConditionDoubleConstAllow(true);

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest_concat.java
Patch:
@@ -27,7 +27,7 @@ public class MySqlWallTest_concat extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new MySqlWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertTrue(provider.checkValid(//
         "select * from tb_product_word where name='' or CONCAT(name,style)='' or CONCAT(shop,style)=''  or CONCAT(ename,style)=''"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_0.java
Patch:
@@ -36,7 +36,7 @@ private WallProvider initWallProvider() {
 
         provider.getConfig().setStrictSyntaxCheck(false);
         provider.getConfig().setMultiStatementAllow(true);
-        provider.getConfig().setConditionAndAlwayTrueAllow(true);
+        provider.getConfig().setConditionAndAlwaysTrueAllow(true);
         provider.getConfig().setNoneBaseStatementAllow(true);
         provider.getConfig().setLimitZeroAllow(true);
         provider.getConfig().setConditionDoubleConstAllow(true);

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_3.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerWallTest_3 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new SQLServerWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertFalse(provider.checkValid(//
         "select * from t where LEN(HOST_NAME()) > 0"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_4.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerWallTest_4 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new SQLServerWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertTrue(provider.checkValid(//
         "insert into t (fid, name) values (1, HOST_NAME())"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_5.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerWallTest_5 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new SQLServerWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertFalse(provider.checkValid(//
         "delete t where LEN(HOST_NAME()) > 0"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_6.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerWallTest_6 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new SQLServerWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertFalse(provider.checkValid(//
         "update t set fid = 1 where LEN(HOST_NAME()) > 0"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_7.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerWallTest_7 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new SQLServerWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertTrue(provider.checkValid(//
         "select * from (select top 3000 jol.id as primaryKeyIds, jo.orderNo as 委托单号, bm.custname as 委托方名称, manuCustInfo.custname as 出证方, jo.chkerDate as 委托日期, bcc.connectName as 联系人, bcc.mobile as  电话,jol.barcode as 样品条码, jol.name as 样品名称,  jol.qtysub as 套件数量,jol.OnlyCode as 唯一识别码,jol.manufacture as 制造厂商,jol.sprc as 规格型号, jol.outno as 出厂编号, djod.name as 任务状态, djoc.name  委托类别, dct.name as 证书类型,bdp.organ_name as 分配室组, jol.task_id as 任务ID, be.user_name as 检定人员, verifyUser.user_name as 核验员, checkUser.user_name as 批准员, jol.ddate 交款日期,cjcs.name as 缴款状态, jc.moneys as 应收费, jc.moneystotal as 实收费, be.organ_id from jl_OrderList jol left outer join jl_CheckList jc on jol.checkList_id = jc.id left outer join jl_Order jo on jol.orderid = jo.id left outer join ba_dptinfo bdp on jol.dptid = bdp.id left outer join jl_Task jt on jol.task_id = jt.id left outer join ba_manucustinfo bm on jo.entrustCustId = bm.id left outer join ba_manucustinfo manuCustInfo on jo.custid = manuCustInfo.id left outer join ba_custconnect bcc on jo.linkPerson = bcc.id left outer join ba_employeeinfo be on jt.jdUserId = be.id left outer join ba_employeeinfo verifyUser on jt.verifyUser = verifyUser.id left outer join ba_employeeinfo checkUser on jt.checkUser = checkUser.id left outer join dict_jl_order_doType djod on jol.dotypeid = djod.id left outer join dict_jl_order_class djoc on jo.orderclassid = djoc.id left outer join dict_certificate_type dct on jt.certificatetype = dct.id left outer join dict_jl_chargestatus cjcs on jol.chargestatus = cjcs.id where jol.id >= (select min(primaryKeyId) from (select top  3000 jol.id as primaryKeyId from  jl_OrderList jol left outer join jl_CheckList jc on jol.checkList_id = jc.id left outer join jl_Order jo on jol.orderid = jo.id left outer join ba_dptinfo bdp on jol.dptid = bdp.id left outer join jl_Task jt on jol.task_id = jt.id left outer join ba_manucustinfo bm on jo.entrustCustId = bm.id left outer join ba_manucustinfo manuCustInfo on jo.custid = manuCustInfo.id left outer join ba_custconnect bcc on jo.linkPerson = bcc.id left outer join ba_employeeinfo be on jt.jdUserId = be.id left outer join ba_employeeinfo verifyUser on jt.verifyUser = verifyUser.id left outer join ba_employeeinfo checkUser on jt.checkUser = checkUser.id left outer join dict_jl_order_doType djod on jol.dotypeid = djod.id left outer join dict_jl_order_class djoc on jo.orderclassid = djoc.id left outer join dict_certificate_type dct on jt.certificatetype = dct.id left outer join dict_jl_chargestatus cjcs on jol.chargestatus = cjcs.id where jo.chkerDate >= ? and jo.chkerDate <= ? and jol.ddate >= ? order by jol.id desc, jo.id DESC) as T)  and jo.chkerDate >= ? and jo.chkerDate <= ? and jol.ddate >= ? order by jol.id asc, jo.id DESC) as T1 order by T1.primaryKeyIds desc"));

File: src/test/java/com/alibaba/druid/bvt/pool/Case0.java
Patch:
@@ -30,7 +30,7 @@
 public class Case0 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/Case1.java
Patch:
@@ -30,7 +30,7 @@
 public class Case1 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/Case2.java
Patch:
@@ -34,7 +34,7 @@
 public class Case2 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/Case3.java
Patch:
@@ -56,7 +56,7 @@ public class Case3 extends TestCase {
     // dataSource.close();
     // }
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceFilterTest.java
Patch:
@@ -28,7 +28,7 @@
 public class DruidDataSourceFilterTest extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/ManagedDataSourceTest.java
Patch:
@@ -31,7 +31,7 @@ public class ManagedDataSourceTest extends TestCase {
     private DruidDataSource dataSource;
 
     public void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/test/java/com/alibaba/druid/bvt/pool/ParamTest.java
Patch:
@@ -28,7 +28,7 @@
 public class ParamTest extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/PasswordCallbackTest.java
Patch:
@@ -28,7 +28,7 @@
 public class PasswordCallbackTest extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/SpringIbatisFilterTest.java
Patch:
@@ -42,7 +42,7 @@
 public class SpringIbatisFilterTest extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/SpringMybatisFilterTest.java
Patch:
@@ -34,7 +34,7 @@
 public class SpringMybatisFilterTest extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestAbondon.java
Patch:
@@ -27,7 +27,7 @@ public class TestAbondon extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         dataSource = new DruidDataSource();
         dataSource.setRemoveAbandoned(true);

File: src/test/java/com/alibaba/druid/bvt/pool/TestActiveTrace.java
Patch:
@@ -29,7 +29,7 @@ public class TestActiveTrace extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         dataSource = new DruidDataSource();
         dataSource.setRemoveAbandoned(true);

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_0.java
Patch:
@@ -28,7 +28,7 @@
 public class TestClose_0 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_1.java
Patch:
@@ -29,7 +29,7 @@
 public class TestClose_1 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_2.java
Patch:
@@ -29,7 +29,7 @@
 public class TestClose_2 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestConcurrent.java
Patch:
@@ -33,7 +33,7 @@ public class TestConcurrent extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
         driver.setLogExecuteQueryEnable(false);

File: src/test/java/com/alibaba/druid/bvt/pool/TestDefault.java
Patch:
@@ -28,7 +28,7 @@
 public class TestDefault extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestDisable.java
Patch:
@@ -32,7 +32,7 @@ public class TestDisable extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestDruidDataSource.java
Patch:
@@ -27,7 +27,7 @@
 public class TestDruidDataSource extends TestCase {
 
     protected void tearDown() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void setUp() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestGraceShutdown.java
Patch:
@@ -33,7 +33,7 @@ public class TestGraceShutdown extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle.java
Patch:
@@ -35,7 +35,7 @@ public class TestIdle extends TestCase {
 
     protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void setUp() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle2.java
Patch:
@@ -27,7 +27,7 @@
 public class TestIdle2 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3.java
Patch:
@@ -30,7 +30,7 @@
 public class TestIdle3 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java
Patch:
@@ -30,7 +30,7 @@
 public class TestIdle3_Concurrent extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -32,7 +32,7 @@ public class TestIdle3_Concurrent_MaxActive extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_Starvation.java
Patch:
@@ -35,7 +35,7 @@ public class TestIdle3_Concurrent_Starvation extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestOnBorrowFileAndNameTest.java
Patch:
@@ -18,7 +18,7 @@ public class TestOnBorrowFileAndNameTest extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement.java
Patch:
@@ -32,7 +32,7 @@ public class TestPoolPreparedStatement extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement2.java
Patch:
@@ -32,7 +32,7 @@ public class TestPoolPreparedStatement2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestSharePreparedStatements.java
Patch:
@@ -29,7 +29,7 @@
 public class TestSharePreparedStatements extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestStat.java
Patch:
@@ -31,7 +31,7 @@ public class TestStat extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest.java
Patch:
@@ -33,7 +33,7 @@ public class ConnectionTest extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest2.java
Patch:
@@ -33,7 +33,7 @@ public class ConnectionTest2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest3.java
Patch:
@@ -36,7 +36,7 @@ public class ConnectionTest3 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest4.java
Patch:
@@ -41,7 +41,7 @@ public class ConnectionTest4 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest5.java
Patch:
@@ -37,7 +37,7 @@ public class ConnectionTest5 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/DataSourceTest3.java
Patch:
@@ -40,7 +40,7 @@ public class DataSourceTest3 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PoolableStatementTest2.java
Patch:
@@ -39,7 +39,7 @@ public class PoolableStatementTest2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestCommit.java
Patch:
@@ -32,7 +32,7 @@ public class TestCommit extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestDataSourceBasic.java
Patch:
@@ -36,7 +36,7 @@ public class TestDataSourceBasic extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestDataSourceBasic2.java
Patch:
@@ -29,7 +29,7 @@
 public class TestDataSourceBasic2 extends TestCase {
 
     public void test_0() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         DruidDataSource dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/test/java/com/alibaba/druid/test/wall/MySqlResourceWallTest.java
Patch:
@@ -47,7 +47,7 @@ public void test_false() throws Exception {
         provider.getConfig().setUseAllow(true);
         provider.getConfig().setStrictSyntaxCheck(false);
         provider.getConfig().setMultiStatementAllow(true);
-        provider.getConfig().setConditionAndAlwayTrueAllow(true);
+        provider.getConfig().setConditionAndAlwaysTrueAllow(true);
         provider.getConfig().setNoneBaseStatementAllow(true);
         provider.getConfig().setSelectUnionCheck(false);
         provider.getConfig().setSchemaCheck(true);

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1557,8 +1557,8 @@ public CompositeDataSupport getCompositeData() throws JMException {
 
         // 25 - 29
         map.put("ResultSetOpenCount", stat.getResultSetStat().getOpenCount());
-        map.put("ResultSetOpenningCount", stat.getResultSetStat().getOpenningCount());
-        map.put("ResultSetOpenningMax", stat.getResultSetStat().getOpenningMax());
+        map.put("ResultSetOpenningCount", stat.getResultSetStat().getOpeningCount());
+        map.put("ResultSetOpenningMax", stat.getResultSetStat().getOpeningMax());
         map.put("ResultSetFetchRowCount", stat.getResultSetStat().getFetchRowCount());
         map.put("ResultSetLastOpenTime", stat.getResultSetStat().getLastOpenTime());
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -2133,7 +2133,7 @@ public List<Map<String, Object>> getPoolingConnectionInfo() {
                         Map<String, Object> stmtInfo = new LinkedHashMap<String, Object>();
 
                         stmtInfo.put("sql", stmtHolder.getKey().getSql());
-                        stmtInfo.put("defaultRowPretch", stmtHolder.getDefaultRowPretch());
+                        stmtInfo.put("defaultRowPretch", stmtHolder.getDefaultRowPrefetch());
                         stmtInfo.put("rowPrefetch", stmtHolder.getRowPrefetch());
                         stmtInfo.put("hitCount", stmtHolder.getHitCount());
 

File: src/main/java/com/alibaba/druid/pool/GetConnectionTimeoutException.java
Patch:
@@ -25,8 +25,8 @@ public GetConnectionTimeoutException(String reason){
         super(reason);
     }
 
-    public GetConnectionTimeoutException(String mesage, Throwable cause){
-        super(mesage, cause);
+    public GetConnectionTimeoutException(String message, Throwable cause){
+        super(message, cause);
     }
 
 }

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImpl.java
Patch:
@@ -251,8 +251,8 @@ public CompositeDataSupport getCompositeData() throws JMException {
             map.put("ResultSetCloseCount", stat.getResultSetStat().getCloseCount());
 
             map.put("ResultSetOpenCount", stat.getResultSetStat().getOpenCount());
-            map.put("ResultSetOpenningCount", stat.getResultSetStat().getOpenningCount());
-            map.put("ResultSetOpenningMax", stat.getResultSetStat().getOpenningMax());
+            map.put("ResultSetOpenningCount", stat.getResultSetStat().getOpeningCount());
+            map.put("ResultSetOpenningMax", stat.getResultSetStat().getOpeningMax());
             map.put("ResultSetFetchRowCount", stat.getResultSetStat().getFetchRowCount());
             map.put("ResultSetLastOpenTime", stat.getResultSetStat().getLastOpenTime());
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/JdbcParameterDecimal.java
Patch:
@@ -36,11 +36,11 @@ public static JdbcParameterDecimal valueOf(BigDecimal x) {
             return NULL;
         }
         
-        if (x == BigDecimal.ZERO) {
+        if (0 == (x.compareTo(BigDecimal.ZERO))) {
             return ZERO;
         }
         
-        if (x == BigDecimal.TEN) {
+        if (0 == (x.compareTo(BigDecimal.TEN))) {
             return TEN;
         }
         

File: src/main/java/com/alibaba/druid/sql/ast/SQLName.java
Patch:
@@ -16,5 +16,5 @@
 package com.alibaba.druid.sql.ast;
 
 public interface SQLName extends SQLExpr {
-    String getSimleName();
+    String getSimpleName();
 }

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderingSpecification.java
Patch:
@@ -16,5 +16,5 @@
 package com.alibaba.druid.sql.ast;
 
 public enum SQLOrderingSpecification {
-    ASC, DESC;
+    ASC, DESC
 }

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLIdentifierExpr.java
Patch:
@@ -33,7 +33,7 @@ public SQLIdentifierExpr(String name){
         this.name = name;
     }
 
-    public String getSimleName() {
+    public String getSimpleName() {
         return name;
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLPropertyExpr.java
Patch:
@@ -34,7 +34,7 @@ public SQLPropertyExpr(){
 
     }
 
-    public String getSimleName() {
+    public String getSimpleName() {
         return name;
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/NotNullConstraint.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class NotNullConstraint extends SQLConstaintImpl implements SQLColumnConstraint {
+public class NotNullConstraint extends SQLConstraintImpl implements SQLColumnConstraint {
 
     public NotNullConstraint(){
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLAlterTableDropForeignKey.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLAlterTableDropForeinKey extends SQLObjectImpl implements SQLAlterTableItem {
+public class SQLAlterTableDropForeignKey extends SQLObjectImpl implements SQLAlterTableItem {
 
     private SQLName indexName;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCharacterDataType.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLCharactorDataType extends SQLDataTypeImpl {
+public class SQLCharacterDataType extends SQLDataTypeImpl {
 
     private String             charSetName;
     private String             collate;
@@ -28,7 +28,7 @@ public class SQLCharactorDataType extends SQLDataTypeImpl {
     public final static String CHAR_TYPE_BYTE = "BYTE";
     public final static String CHAR_TYPE_CHAR = "CHAR";
 
-    public SQLCharactorDataType(String name){
+    public SQLCharacterDataType(String name){
         super(name);
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLCheck.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLCheck extends SQLConstaintImpl implements SQLTableElement {
+public class SQLCheck extends SQLConstraintImpl implements SQLTableElement {
 
     private SQLExpr expr;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnCheck.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLColumnCheck extends SQLConstaintImpl implements SQLColumnConstraint {
+public class SQLColumnCheck extends SQLConstraintImpl implements SQLColumnConstraint {
 
     private SQLExpr expr;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnConstraint.java
Patch:
@@ -15,6 +15,6 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
-public interface SQLColumnConstraint extends SQLConstaint {
+public interface SQLColumnConstraint extends SQLConstraint {
 
 }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnPrimaryKey.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLColumnPrimaryKey extends SQLConstaintImpl implements SQLColumnConstraint {
+public class SQLColumnPrimaryKey extends SQLConstraintImpl implements SQLColumnConstraint {
 
     @Override
     protected void accept0(SQLASTVisitor visitor) {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnReference.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLColumnReference extends SQLConstaintImpl implements SQLColumnConstraint {
+public class SQLColumnReference extends SQLConstraintImpl implements SQLColumnConstraint {
 
     private SQLName       table;
     private List<SQLName> columns = new ArrayList<SQLName>();

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLColumnUniqueKey.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLColumnUniqueKey extends SQLConstaintImpl implements SQLColumnConstraint {
+public class SQLColumnUniqueKey extends SQLConstraintImpl implements SQLColumnConstraint {
 
     @Override
     protected void accept0(SQLASTVisitor visitor) {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraint.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 
-public interface SQLConstaint extends SQLObject {
+public interface SQLConstraint extends SQLObject {
 
     SQLName getName();
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLConstraintImpl.java
Patch:
@@ -18,12 +18,12 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
 
-public abstract class SQLConstaintImpl extends SQLObjectImpl implements SQLConstaint {
+public abstract class SQLConstraintImpl extends SQLObjectImpl implements SQLConstraint {
 
     private SQLName name;
     private Boolean enable;
 
-    public SQLConstaintImpl(){
+    public SQLConstraintImpl(){
 
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLForeignKeyConstraint.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.alibaba.druid.sql.ast.SQLName;
 
-public interface SQLForeignKeyConstraint extends SQLConstaint, SQLTableElement, SQLTableConstaint {
+public interface SQLForeignKeyConstraint extends SQLConstraint, SQLTableElement, SQLTableConstraint {
 
     List<SQLName> getReferencingColumns();
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLForeignKeyImpl.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLForeignKeyImpl extends SQLConstaintImpl implements SQLForeignKeyConstraint {
+public class SQLForeignKeyImpl extends SQLConstraintImpl implements SQLForeignKeyConstraint {
 
     private SQLName       referencedTableName;
     private List<SQLName> referencingColumns = new ArrayList<SQLName>();

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTableConstraint.java
Patch:
@@ -15,6 +15,6 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
-public interface SQLTableConstaint extends SQLConstaint, SQLTableElement {
+public interface SQLTableConstraint extends SQLConstraint, SQLTableElement {
 
 }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnique.java
Patch:
@@ -21,7 +21,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLUnique extends SQLConstaintImpl implements SQLUniqueConstraint, SQLTableElement {
+public class SQLUnique extends SQLConstraintImpl implements SQLUniqueConstraint, SQLTableElement {
 
     private final List<SQLExpr> columns = new ArrayList<SQLExpr>();
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUniqueConstraint.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 
-public interface SQLUniqueConstraint extends SQLConstaint {
+public interface SQLUniqueConstraint extends SQLConstraint {
 
     List<SQLExpr> getColumns();
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlKey.java
Patch:
@@ -16,13 +16,13 @@
 package com.alibaba.druid.sql.dialect.mysql.ast;
 
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.statement.SQLTableConstaint;
+import com.alibaba.druid.sql.ast.statement.SQLTableConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLUnique;
 import com.alibaba.druid.sql.ast.statement.SQLUniqueConstraint;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class MySqlKey extends SQLUnique implements SQLUniqueConstraint, SQLTableConstaint {
+public class MySqlKey extends SQLUnique implements SQLUniqueConstraint, SQLTableConstraint {
 
     private SQLName indexName;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/expr/MySqlUserName.java
Patch:
@@ -45,11 +45,11 @@ public void accept0(MySqlASTVisitor visitor) {
         visitor.endVisit(this);
     }
 
-    public String getSimleName() {
+    public String getSimpleName() {
         return userName + '@' + host;
     }
 
     public String toString() {
-        return getSimleName();
+        return getSimpleName();
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -37,7 +37,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDisableKeys;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropColumnItem;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropConstraint;
-import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropForeinKey;
+import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropForeignKey;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropIndex;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableDropPrimaryKey;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableEnableConstraint;
@@ -2206,7 +2206,7 @@ public SQLStatement parseAlter() {
                         } else if (lexer.token() == Token.FOREIGN) {
                             MysqlForeignKey fk = this.getExprParser().parseForeignKey();
                             fk.setName(constraintName);
-                            fk.setHasConstaint(true);
+                            fk.setHasConstraint(true);
 
                             SQLAlterTableAddConstraint item = new SQLAlterTableAddConstraint(fk);
 
@@ -2430,7 +2430,7 @@ public void parseAlterDrop(SQLAlterTableStatement stmt) {
             lexer.nextToken();
             accept(Token.KEY);
             SQLName indexName = this.exprParser.name();
-            SQLAlterTableDropForeinKey item = new SQLAlterTableDropForeinKey();
+            SQLAlterTableDropForeignKey item = new SQLAlterTableDropForeignKey();
             item.setIndexName(indexName);
             stmt.getItems().add(item);
         } else if (lexer.token() == Token.PRIMARY) {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleDbLinkExpr.java
Patch:
@@ -30,7 +30,7 @@ public OracleDbLinkExpr(){
 
     }
 
-    public String getSimleName() {
+    public String getSimpleName() {
         return dbLink;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleConstraint.java
Patch:
@@ -16,11 +16,11 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
 import com.alibaba.druid.sql.ast.SQLName;
-import com.alibaba.druid.sql.ast.statement.SQLConstaint;
+import com.alibaba.druid.sql.ast.statement.SQLConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLTableElement;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObject;
 
-public interface OracleConstraint extends OracleSQLObject, SQLConstaint, SQLTableElement {
+public interface OracleConstraint extends OracleSQLObject, SQLConstraint, SQLTableElement {
 
     SQLName getExceptionsInto();
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -28,7 +28,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLMethodInvokeExpr;
 import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableItem;
-import com.alibaba.druid.sql.ast.statement.SQLCharactorDataType;
+import com.alibaba.druid.sql.ast.statement.SQLCharacterDataType;
 import com.alibaba.druid.sql.ast.statement.SQLCheck;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
@@ -3141,7 +3141,7 @@ public void endVisit(OracleDropDbLinkStatement x) {
 
     }
 
-    public boolean visit(SQLCharactorDataType x) {
+    public boolean visit(SQLCharacterDataType x) {
         print(x.getName());
         if (x.getArguments().size() > 0) {
             print("(");

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/SQLServerColumnDefinition.java
Patch:
@@ -49,7 +49,7 @@ public void accept0(SQLServerASTVisitor visitor) {
             this.acceptChild(visitor, name);
             this.acceptChild(visitor, dataType);
             this.acceptChild(visitor, defaultExpr);
-            this.acceptChild(visitor, constaints);
+            this.acceptChild(visitor, constraints);
             this.acceptChild(visitor, identity);
         }
         visitor.endVisit(this);

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/expr/SQLServerObjectReferenceExpr.java
Patch:
@@ -45,7 +45,7 @@ public SQLServerObjectReferenceExpr(SQLExpr owner){
         }
     }
 
-    public String getSimleName() {
+    public String getSimpleName() {
         if (schema != null) {
             return schema;
         }

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/visitor/SQLServerOutputVisitor.java
Patch:
@@ -267,7 +267,7 @@ public boolean visit(SQLServerColumnDefinition x) {
             visitColumnDefault(x);
         }
 
-        for (SQLColumnConstraint item : x.getConstaints()) {
+        for (SQLColumnConstraint item : x.getConstraints()) {
             print(' ');
             item.accept(this);
         }

File: src/main/java/com/alibaba/druid/sql/parser/SQLCreateTableParser.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.sql.parser;
 
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
-import com.alibaba.druid.sql.ast.statement.SQLConstaint;
+import com.alibaba.druid.sql.ast.statement.SQLConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
 import com.alibaba.druid.sql.ast.statement.SQLTableElement;
 
@@ -76,7 +76,7 @@ public SQLCreateTableStatement parseCrateTable(boolean acceptCreate) {
                            || lexer.token == Token.UNIQUE //
                            || lexer.token == Token.CHECK //
                            || lexer.token == Token.CONSTRAINT) {
-                    SQLConstaint constraint = this.exprParser.parseConstaint();
+                    SQLConstraint constraint = this.exprParser.parseConstaint();
                     constraint.setParent(createTable);
                     createTable.getTableElementList().add((SQLTableElement) constraint);
                 } else if (lexer.token() == Token.TABLESPACE) {
@@ -100,7 +100,7 @@ public SQLCreateTableStatement parseCrateTable(boolean acceptCreate) {
 
             // while
             // (this.tokenList.current().equals(OracleToken.ConstraintToken)) {
-            // parseConstaint(table.getConstaints());
+            // parseConstaint(table.getConstraints());
             //
             // if (this.tokenList.current().equals(OracleToken.CommaToken))
             // ;

File: src/main/java/com/alibaba/druid/sql/parser/SQLDDLParser.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.sql.parser;
 
-import com.alibaba.druid.sql.ast.statement.SQLTableConstaint;
+import com.alibaba.druid.sql.ast.statement.SQLTableConstraint;
 
 public class SQLDDLParser extends SQLStatementParser {
 
@@ -27,7 +27,7 @@ public SQLDDLParser(SQLExprParser exprParser){
         super(exprParser);
     }
 
-    protected SQLTableConstaint parseConstraint() {
+    protected SQLTableConstraint parseConstraint() {
         if (lexer.token() == Token.CONSTRAINT) {
             lexer.nextToken();
         }

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -41,7 +41,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLCallStatement;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.ast.statement.SQLCommentStatement;
-import com.alibaba.druid.sql.ast.statement.SQLConstaint;
+import com.alibaba.druid.sql.ast.statement.SQLConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLCreateDatabaseStatement;
 import com.alibaba.druid.sql.ast.statement.SQLCreateIndexStatement;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
@@ -705,7 +705,7 @@ public SQLStatement parseAlter() {
                     lexer.nextToken();
                     acceptIdentifier("NOCHECK");
                     acceptIdentifier("ADD");
-                    SQLConstaint check = this.exprParser.parseConstaint();
+                    SQLConstraint check = this.exprParser.parseConstaint();
 
                     SQLAlterTableAddConstraint addCheck = new SQLAlterTableAddConstraint();
                     addCheck.setWithNoCheck(true);

File: src/main/java/com/alibaba/druid/stat/JdbcResultSetStatMBean.java
Patch:
@@ -28,9 +28,9 @@ public interface JdbcResultSetStatMBean {
 
     long getCloseCount();
 
-    int getOpenningCount();
+    int getOpeningCount();
 
-    int getOpenningMax();
+    int getOpeningMax();
 
     long getErrorCount();
 }

File: src/main/java/com/alibaba/druid/support/console/Option.java
Patch:
@@ -84,8 +84,7 @@ public static String getUrl(int dataType) {
 
 	private static int parsePositiveInt(String v) {
 		try {
-			int pid = Integer.parseInt(v);
-			return pid;
+            return Integer.parseInt(v);
 		} catch (NumberFormatException e) {
 			return -1;
 		}

File: src/main/java/com/alibaba/druid/support/http/StatViewServlet.java
Patch:
@@ -35,7 +35,7 @@
  * 
  * @author sandzhang<sandzhangtoo@gmail.com>
  */
-public class StatViewServlet extends ResourceSerlvet {
+public class StatViewServlet extends ResourceServlet {
 
     private final static Log      LOG                     = LogFactory.getLog(StatViewServlet.class);
 

File: src/main/java/com/alibaba/druid/support/ibatis/DruidDataSourceFactory.java
Patch:
@@ -30,7 +30,7 @@ public void initialize(Map map) {
         } catch (RuntimeException e) {
             throw e;
         } catch (Exception e) {
-            throw new RuntimeException("init datasource error", e);
+            throw new RuntimeException("init data source error", e);
         }
     }
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidDataSourcePanel.java
Patch:
@@ -73,7 +73,7 @@ public DruidDataSourcePanel(){
     }
 
     private void addTable(ColumnData columnData) {
-        ArrayList<ArrayList<LinkedHashMap<String, Object>>> data = columnData.getTableDatas();
+        ArrayList<ArrayList<LinkedHashMap<String, Object>>> data = columnData.getTableData();
 
         int i = 0;
         ArrayList<String> ids = columnData.getNames();
@@ -98,7 +98,7 @@ private void addTable(ColumnData columnData) {
 
     @Override
     protected void tableDataProcess(ArrayList<LinkedHashMap<String, Object>> data) {
-        ColumnData columnData = TableDataProcessor.mutilRow2col(data, KEY_WORD_IDENTITY);
+        ColumnData columnData = TableDataProcessor.multiRow2Col(data, KEY_WORD_IDENTITY);
         contentPanel = new JPanel(new GridLayout(0, 1));
         addTable(columnData);
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidDriverPanel.java
Patch:
@@ -51,7 +51,7 @@ public DruidDriverPanel(){
     @Override
     protected void tableDataProcess(ArrayList<LinkedHashMap<String, Object>> data) {
         ColumnData columnData = TableDataProcessor.row2col(data);
-        tableModel = new DruidTableModel(columnData.getDatas());
+        tableModel = new DruidTableModel(columnData.getData());
         table.setModel(tableModel);
         table.getColumnModel().getColumn(0).setCellRenderer(new DruidTableCellRenderer());
 

File: src/main/java/com/alibaba/druid/support/jconsole/DruidSqlDetailFrame.java
Patch:
@@ -347,7 +347,7 @@ private void addTable(JPanel contentPanel, String title, ArrayList<LinkedHashMap
 
         ColumnData colData = TableDataProcessor.row2col(data);
         JTable table = new JTable();
-        DruidTableModel tableModel = new DruidTableModel(colData.getDatas());
+        DruidTableModel tableModel = new DruidTableModel(colData.getData());
         table.setModel(tableModel);
 
         TableColumn col = table.getColumnModel().getColumn(0);

File: src/main/java/com/alibaba/druid/support/monitor/MonitorContext.java
Patch:
@@ -23,7 +23,7 @@ public class MonitorContext {
 
     public static String              DEFAULT_DOMAIN;
 
-    private final Map<String, Object> atrributes  = new HashMap<String, Object>();
+    private final Map<String, Object> attributes = new HashMap<String, Object>();
 
     private String                    domain  = "default";
     private String                    app     = "default";
@@ -54,8 +54,8 @@ public void setStartTime(Date startTime) {
         this.startTime = startTime;
     }
 
-    public Map<String, Object> getAtrributes() {
-        return atrributes;
+    public Map<String, Object> getAttributes() {
+        return attributes;
     }
 
     public int getPID() {

File: src/main/java/com/alibaba/druid/support/monitor/MonitorServlet.java
Patch:
@@ -15,13 +15,13 @@
  */
 package com.alibaba.druid.support.monitor;
 
+import com.alibaba.druid.support.http.ResourceServlet;
+
 import java.util.HashSet;
 import java.util.Set;
 
-import com.alibaba.druid.support.http.ResourceSerlvet;
-
 @SuppressWarnings("serial")
-public class MonitorServlet extends ResourceSerlvet {
+public class MonitorServlet extends ResourceServlet {
 
     private String      mappingPath = "support/http/resources";
     private Set<String> mapping     = new HashSet<String>();

File: src/main/java/com/alibaba/druid/support/profile/ProfileStat.java
Patch:
@@ -80,8 +80,8 @@ public List<Map<String, Object>> getStatData() {
         
         int size = statValueList.size();
         List<Map<String, Object>> list = new ArrayList<Map<String, Object>>(size);
-        for (int i = 0; i < size; ++i) {
-            list.add(statValueList.get(i).getData());
+        for (ProfileEntryStatValue profileEntryStatValue : statValueList) {
+            list.add(profileEntryStatValue.getData());
         }
 
         return list;

File: src/main/java/com/alibaba/druid/support/spring/stat/SpringMethodInfo.java
Patch:
@@ -52,7 +52,7 @@ public boolean equals(Object obj) {
             return true;
         }
 
-        if (obj == null) {
+        if (obj == null || !(obj instanceof SpringMethodInfo)) {
             return false;
         }
 
@@ -80,7 +80,7 @@ public boolean equals(Object obj) {
     }
 
     public static String getMethodSignature(Method method) {
-        StringBuffer sb = new StringBuffer();
+        StringBuilder sb = new StringBuilder();
 
         sb.append(method.getName());
         sb.append('(');

File: src/main/java/com/alibaba/druid/util/Base64.java
Patch:
@@ -46,7 +46,7 @@ private static String byteArrayToBase64(byte[] a, boolean alternate) {
         int numFullGroups = aLen / 3;
         int numBytesInPartialGroup = aLen - 3 * numFullGroups;
         int resultLen = 4 * ((aLen + 2) / 3);
-        StringBuffer result = new StringBuffer(resultLen);
+        StringBuilder result = new StringBuilder(resultLen);
         char[] intToAlpha = (alternate ? intToAltBase64 : intToBase64);
 
         // Translate all full groups from byte array elements to Base64

File: src/main/java/com/alibaba/druid/util/DruidPasswordCallback.java
Patch:
@@ -15,9 +15,8 @@
  */
 package com.alibaba.druid.util;
 
-import java.util.Properties;
-
 import javax.security.auth.callback.PasswordCallback;
+import java.util.Properties;
 
 public class DruidPasswordCallback extends PasswordCallback {
 
@@ -28,7 +27,7 @@ public class DruidPasswordCallback extends PasswordCallback {
     private Properties        properties;
 
     public DruidPasswordCallback(){
-        this("druidDataSouce password", false);
+        this("druidDataSource password", false);
     }
 
     public DruidPasswordCallback(String prompt, boolean echoOn){

File: src/main/java/com/alibaba/druid/util/ServletPathMatcher.java
Patch:
@@ -16,10 +16,11 @@
 package com.alibaba.druid.util;
 
 public class ServletPathMatcher implements PatternMatcher {
-	private final static ServletPathMatcher instance = new ServletPathMatcher();
+
+	private final static ServletPathMatcher INSTANCE = new ServletPathMatcher();
 
 	public static ServletPathMatcher getInstance() {
-		return instance;
+		return INSTANCE;
 	}
 
 	/**

File: src/main/java/com/alibaba/druid/util/jdbc/LocalResultSet.java
Patch:
@@ -48,8 +48,7 @@ public synchronized boolean next() throws SQLException {
     
     public Object getObjectInternal(int columnIndex) {
         Object[] row = rows.get(rowIndex);
-        Object obj = row[columnIndex - 1];
-        return obj;
+        return row[columnIndex - 1];
     }
 
     @Override

File: src/main/java/com/alibaba/druid/wall/spi/SQLServerWallProvider.java
Patch:
@@ -35,9 +35,6 @@ public class SQLServerWallProvider extends WallProvider {
 
     public final static String DEFAULT_CONFIG_DIR = "META-INF/druid/wall/sqlserver";
 
-    /**
-     * @param config
-     */
     public SQLServerWallProvider(){
         this(new WallConfig(DEFAULT_CONFIG_DIR));
     }

File: src/main/java/com/alibaba/druid/wall/violation/ErrorCode.java
Patch:
@@ -57,7 +57,7 @@ public interface ErrorCode {
     public final static int TABLE_DENY                    = 2004;
     public final static int OBJECT_DENY                   = 2005;
 
-    public final static int ALWAY_TRUE                    = 2100;
+    public final static int ALWAYS_TRUE                   = 2100;
     public final static int CONST_ARITHMETIC              = 2101;
     public final static int XOR                           = 2102;
     public final static int BITWISE                       = 2103;
@@ -70,7 +70,7 @@ public interface ErrorCode {
     public final static int EVIL_HINTS                    = 2110;
     public final static int EVIL_NAME                     = 2111;
     public final static int EVIL_CONCAT                   = 2112;
-    public final static int ALWAY_FALSE                   = 2113;
+    public final static int ALWAYS_FALSE                  = 2113;
 
     public final static int NOT_PARAMETERIZED             = 2200;
     public final static int MULTI_TENANT                  = 2201;

File: src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseAndTest.java
Patch:
@@ -16,7 +16,7 @@ public void test_false() throws Exception {
 
     public void test_true() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
         "SELECT * from t where id = 1 & 2", config)); //
     }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseInvertTest.java
Patch:
@@ -16,7 +16,7 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
         "SELECT * from t where id = ~2", config)); //
     }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseOrTest.java
Patch:
@@ -16,7 +16,7 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
         "SELECT * from t where id = 1 | 2", config)); //
     }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/BitwiseXorTest.java
Patch:
@@ -16,7 +16,7 @@ public void test_true() throws Exception {
 
     public void test_false() throws Exception {
         WallConfig config = new WallConfig();
-        config.setConditionOpBitwseAllow(false);
+        config.setConditionOpBitwiseAllow(false);
         Assert.assertFalse(WallUtils.isValidateMySql(//
         "SELECT * from t where id = 1 ^ 2", config)); //
     }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest43.java
Patch:
@@ -43,7 +43,7 @@ public void test_false() throws Exception {
 
     public void test_true() throws Exception {
         WallProvider provider = new MySqlWallProvider();
-        provider.getConfig().setConditionAndAlwayTrueAllow(true);
+        provider.getConfig().setConditionAndAlwaysTrueAllow(true);
 
         Assert.assertTrue(provider.checkValid(//
         "SELECT COUNT(1) AS count FROM `team` " + //
@@ -64,7 +64,7 @@ public void test_false2() throws Exception {
 
     public void test_true2() throws Exception {
         WallProvider provider = new MySqlWallProvider();
-        provider.getConfig().setConditionAndAlwayFalseAllow(true);
+        provider.getConfig().setConditionAndAlwaysFalseAllow(true);
 
         Assert.assertTrue(provider.checkValid(//
         "SELECT COUNT(1) AS count FROM `team` " + //

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest89.java
Patch:
@@ -34,7 +34,7 @@ public class MySqlWallTest89 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new MySqlWallProvider();
         
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
         
         Assert.assertTrue(provider.checkValid(//
         "select login('', '', 'guest', '47ea3937793101011caaa5dd88d3bcae926526624796b8a26a9615e8d3bea6b4', 'iPad3,4', 'unknown'),     '', (select max(num) from accounts) +  @@auto_increment_increment"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest90.java
Patch:
@@ -34,7 +34,7 @@ public class MySqlWallTest90 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new MySqlWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertTrue(provider.checkValid(//
         "select * from (select t10006_men_xing_jia_ge_fen_lei.bian_hao as \"bian_hao\", " + //

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest91.java
Patch:
@@ -36,7 +36,7 @@ private WallProvider initWallProvider() {
 
         provider.getConfig().setStrictSyntaxCheck(false);
         provider.getConfig().setMultiStatementAllow(true);
-        provider.getConfig().setConditionAndAlwayTrueAllow(true);
+        provider.getConfig().setConditionAndAlwaysTrueAllow(true);
         provider.getConfig().setNoneBaseStatementAllow(true);
         provider.getConfig().setLimitZeroAllow(true);
         provider.getConfig().setConditionDoubleConstAllow(true);

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest_concat.java
Patch:
@@ -27,7 +27,7 @@ public class MySqlWallTest_concat extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new MySqlWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertTrue(provider.checkValid(//
         "select * from tb_product_word where name='' or CONCAT(name,style)='' or CONCAT(shop,style)=''  or CONCAT(ename,style)=''"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_0.java
Patch:
@@ -36,7 +36,7 @@ private WallProvider initWallProvider() {
 
         provider.getConfig().setStrictSyntaxCheck(false);
         provider.getConfig().setMultiStatementAllow(true);
-        provider.getConfig().setConditionAndAlwayTrueAllow(true);
+        provider.getConfig().setConditionAndAlwaysTrueAllow(true);
         provider.getConfig().setNoneBaseStatementAllow(true);
         provider.getConfig().setLimitZeroAllow(true);
         provider.getConfig().setConditionDoubleConstAllow(true);

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_3.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerWallTest_3 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new SQLServerWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertFalse(provider.checkValid(//
         "select * from t where LEN(HOST_NAME()) > 0"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_4.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerWallTest_4 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new SQLServerWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertTrue(provider.checkValid(//
         "insert into t (fid, name) values (1, HOST_NAME())"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_5.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerWallTest_5 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new SQLServerWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertFalse(provider.checkValid(//
         "delete t where LEN(HOST_NAME()) > 0"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_6.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerWallTest_6 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new SQLServerWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertFalse(provider.checkValid(//
         "update t set fid = 1 where LEN(HOST_NAME()) > 0"));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest_7.java
Patch:
@@ -34,7 +34,7 @@ public class SQLServerWallTest_7 extends TestCase {
     public void test_true() throws Exception {
         WallProvider provider = new SQLServerWallProvider();
 
-        provider.getConfig().setSelectHavingAlwayTrueCheck(true);
+        provider.getConfig().setSelectHavingAlwaysTrueCheck(true);
 
         Assert.assertTrue(provider.checkValid(//
         "select * from (select top 3000 jol.id as primaryKeyIds, jo.orderNo as 委托单号, bm.custname as 委托方名称, manuCustInfo.custname as 出证方, jo.chkerDate as 委托日期, bcc.connectName as 联系人, bcc.mobile as  电话,jol.barcode as 样品条码, jol.name as 样品名称,  jol.qtysub as 套件数量,jol.OnlyCode as 唯一识别码,jol.manufacture as 制造厂商,jol.sprc as 规格型号, jol.outno as 出厂编号, djod.name as 任务状态, djoc.name  委托类别, dct.name as 证书类型,bdp.organ_name as 分配室组, jol.task_id as 任务ID, be.user_name as 检定人员, verifyUser.user_name as 核验员, checkUser.user_name as 批准员, jol.ddate 交款日期,cjcs.name as 缴款状态, jc.moneys as 应收费, jc.moneystotal as 实收费, be.organ_id from jl_OrderList jol left outer join jl_CheckList jc on jol.checkList_id = jc.id left outer join jl_Order jo on jol.orderid = jo.id left outer join ba_dptinfo bdp on jol.dptid = bdp.id left outer join jl_Task jt on jol.task_id = jt.id left outer join ba_manucustinfo bm on jo.entrustCustId = bm.id left outer join ba_manucustinfo manuCustInfo on jo.custid = manuCustInfo.id left outer join ba_custconnect bcc on jo.linkPerson = bcc.id left outer join ba_employeeinfo be on jt.jdUserId = be.id left outer join ba_employeeinfo verifyUser on jt.verifyUser = verifyUser.id left outer join ba_employeeinfo checkUser on jt.checkUser = checkUser.id left outer join dict_jl_order_doType djod on jol.dotypeid = djod.id left outer join dict_jl_order_class djoc on jo.orderclassid = djoc.id left outer join dict_certificate_type dct on jt.certificatetype = dct.id left outer join dict_jl_chargestatus cjcs on jol.chargestatus = cjcs.id where jol.id >= (select min(primaryKeyId) from (select top  3000 jol.id as primaryKeyId from  jl_OrderList jol left outer join jl_CheckList jc on jol.checkList_id = jc.id left outer join jl_Order jo on jol.orderid = jo.id left outer join ba_dptinfo bdp on jol.dptid = bdp.id left outer join jl_Task jt on jol.task_id = jt.id left outer join ba_manucustinfo bm on jo.entrustCustId = bm.id left outer join ba_manucustinfo manuCustInfo on jo.custid = manuCustInfo.id left outer join ba_custconnect bcc on jo.linkPerson = bcc.id left outer join ba_employeeinfo be on jt.jdUserId = be.id left outer join ba_employeeinfo verifyUser on jt.verifyUser = verifyUser.id left outer join ba_employeeinfo checkUser on jt.checkUser = checkUser.id left outer join dict_jl_order_doType djod on jol.dotypeid = djod.id left outer join dict_jl_order_class djoc on jo.orderclassid = djoc.id left outer join dict_certificate_type dct on jt.certificatetype = dct.id left outer join dict_jl_chargestatus cjcs on jol.chargestatus = cjcs.id where jo.chkerDate >= ? and jo.chkerDate <= ? and jol.ddate >= ? order by jol.id desc, jo.id DESC) as T)  and jo.chkerDate >= ? and jo.chkerDate <= ? and jol.ddate >= ? order by jol.id asc, jo.id DESC) as T1 order by T1.primaryKeyIds desc"));

File: src/test/java/com/alibaba/druid/bvt/pool/Case0.java
Patch:
@@ -30,7 +30,7 @@
 public class Case0 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/Case1.java
Patch:
@@ -30,7 +30,7 @@
 public class Case1 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/Case2.java
Patch:
@@ -34,7 +34,7 @@
 public class Case2 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/Case3.java
Patch:
@@ -56,7 +56,7 @@ public class Case3 extends TestCase {
     // dataSource.close();
     // }
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceFilterTest.java
Patch:
@@ -28,7 +28,7 @@
 public class DruidDataSourceFilterTest extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/ManagedDataSourceTest.java
Patch:
@@ -31,7 +31,7 @@ public class ManagedDataSourceTest extends TestCase {
     private DruidDataSource dataSource;
 
     public void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/test/java/com/alibaba/druid/bvt/pool/ParamTest.java
Patch:
@@ -28,7 +28,7 @@
 public class ParamTest extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/PasswordCallbackTest.java
Patch:
@@ -28,7 +28,7 @@
 public class PasswordCallbackTest extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/SpringIbatisFilterTest.java
Patch:
@@ -42,7 +42,7 @@
 public class SpringIbatisFilterTest extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/SpringMybatisFilterTest.java
Patch:
@@ -34,7 +34,7 @@
 public class SpringMybatisFilterTest extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestAbondon.java
Patch:
@@ -27,7 +27,7 @@ public class TestAbondon extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         dataSource = new DruidDataSource();
         dataSource.setRemoveAbandoned(true);

File: src/test/java/com/alibaba/druid/bvt/pool/TestActiveTrace.java
Patch:
@@ -29,7 +29,7 @@ public class TestActiveTrace extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         dataSource = new DruidDataSource();
         dataSource.setRemoveAbandoned(true);

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_0.java
Patch:
@@ -28,7 +28,7 @@
 public class TestClose_0 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_1.java
Patch:
@@ -29,7 +29,7 @@
 public class TestClose_1 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_2.java
Patch:
@@ -29,7 +29,7 @@
 public class TestClose_2 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestConcurrent.java
Patch:
@@ -33,7 +33,7 @@ public class TestConcurrent extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
         driver.setLogExecuteQueryEnable(false);

File: src/test/java/com/alibaba/druid/bvt/pool/TestDefault.java
Patch:
@@ -28,7 +28,7 @@
 public class TestDefault extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestDisable.java
Patch:
@@ -32,7 +32,7 @@ public class TestDisable extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestDruidDataSource.java
Patch:
@@ -27,7 +27,7 @@
 public class TestDruidDataSource extends TestCase {
 
     protected void tearDown() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void setUp() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestGraceShutdown.java
Patch:
@@ -33,7 +33,7 @@ public class TestGraceShutdown extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle.java
Patch:
@@ -35,7 +35,7 @@ public class TestIdle extends TestCase {
 
     protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void setUp() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle2.java
Patch:
@@ -27,7 +27,7 @@
 public class TestIdle2 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3.java
Patch:
@@ -30,7 +30,7 @@
 public class TestIdle3 extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java
Patch:
@@ -30,7 +30,7 @@
 public class TestIdle3_Concurrent extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -32,7 +32,7 @@ public class TestIdle3_Concurrent_MaxActive extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_Starvation.java
Patch:
@@ -35,7 +35,7 @@ public class TestIdle3_Concurrent_Starvation extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestOnBorrowFileAndNameTest.java
Patch:
@@ -18,7 +18,7 @@ public class TestOnBorrowFileAndNameTest extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement.java
Patch:
@@ -32,7 +32,7 @@ public class TestPoolPreparedStatement extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement2.java
Patch:
@@ -32,7 +32,7 @@ public class TestPoolPreparedStatement2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestSharePreparedStatements.java
Patch:
@@ -29,7 +29,7 @@
 public class TestSharePreparedStatements extends TestCase {
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestStat.java
Patch:
@@ -31,7 +31,7 @@ public class TestStat extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest.java
Patch:
@@ -33,7 +33,7 @@ public class ConnectionTest extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest2.java
Patch:
@@ -33,7 +33,7 @@ public class ConnectionTest2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest3.java
Patch:
@@ -36,7 +36,7 @@ public class ConnectionTest3 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest4.java
Patch:
@@ -41,7 +41,7 @@ public class ConnectionTest4 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest5.java
Patch:
@@ -37,7 +37,7 @@ public class ConnectionTest5 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/DataSourceTest3.java
Patch:
@@ -40,7 +40,7 @@ public class DataSourceTest3 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PoolableStatementTest2.java
Patch:
@@ -39,7 +39,7 @@ public class PoolableStatementTest2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestCommit.java
Patch:
@@ -32,7 +32,7 @@ public class TestCommit extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestDataSourceBasic.java
Patch:
@@ -36,7 +36,7 @@ public class TestDataSourceBasic extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestDataSourceBasic2.java
Patch:
@@ -29,7 +29,7 @@
 public class TestDataSourceBasic2 extends TestCase {
 
     public void test_0() throws Exception {
-        DruidDataSourceStatManager.cear();
+        DruidDataSourceStatManager.clear();
 
         DruidDataSource dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/test/java/com/alibaba/druid/test/wall/MySqlResourceWallTest.java
Patch:
@@ -47,7 +47,7 @@ public void test_false() throws Exception {
         provider.getConfig().setUseAllow(true);
         provider.getConfig().setStrictSyntaxCheck(false);
         provider.getConfig().setMultiStatementAllow(true);
-        provider.getConfig().setConditionAndAlwayTrueAllow(true);
+        provider.getConfig().setConditionAndAlwaysTrueAllow(true);
         provider.getConfig().setNoneBaseStatementAllow(true);
         provider.getConfig().setSelectUnionCheck(false);
         provider.getConfig().setSchemaCheck(true);

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -200,7 +200,7 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
     protected final AtomicLong                         cachedPreparedStatementDeleteCount        = new AtomicLong();
     protected final AtomicLong                         cachedPreparedStatementMissCount          = new AtomicLong();
 
-    protected final Histogram                          transactionHistogram                      = new Histogram(
+    protected final Histogram                          transactionHistogram                      = new Histogram(1,
                                                                                                                  10,
                                                                                                                  100,
                                                                                                                  1000,

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatValue.java
Patch:
@@ -515,7 +515,7 @@ public long[] getTransactionHistogram() {
 
     public void setTransactionHistogram(long[] values) {
         txn_0_1 = values[0];
-        txn_1_10 = values[1]
+        txn_1_10 = values[1];
         txn_10_100 = values[2];
         txn_100_1000 = values[3];
         txn_1000_10000 = values[4];

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -200,7 +200,7 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
     protected final AtomicLong                         cachedPreparedStatementDeleteCount        = new AtomicLong();
     protected final AtomicLong                         cachedPreparedStatementMissCount          = new AtomicLong();
 
-    protected final Histogram                          transactionHistogram                      = new Histogram(
+    protected final Histogram                          transactionHistogram                      = new Histogram(1,
                                                                                                                  10,
                                                                                                                  100,
                                                                                                                  1000,

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceStatValue.java
Patch:
@@ -515,7 +515,7 @@ public long[] getTransactionHistogram() {
 
     public void setTransactionHistogram(long[] values) {
         txn_0_1 = values[0];
-        txn_1_10 = values[1]
+        txn_1_10 = values[1];
         txn_10_100 = values[2];
         txn_100_1000 = values[3];
         txn_1000_10000 = values[4];

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -306,6 +306,7 @@ public SQLExpr primary() {
             case EXCLUSIVE:
             case MODE:
             case ADVISE:
+            case VIEW:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -306,6 +306,7 @@ public SQLExpr primary() {
             case EXCLUSIVE:
             case MODE:
             case ADVISE:
+            case VIEW:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlSchemaStatVisitor.java
Patch:
@@ -237,7 +237,7 @@ public void endVisit(Limit x) {
     @Override
     public boolean visit(MySqlTableIndex x) {
 
-        return true;
+        return false;
     }
 
     @Override

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -19,7 +19,7 @@ public final class VERSION {
 
     public final static int MajorVersion    = 1;
     public final static int MinorVersion    = 0;
-    public final static int RevisionVersion = 5;
+    public final static int RevisionVersion = 7;
 
     public static String getVersionNumber() {
         return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion;

File: src/main/java/com/alibaba/druid/mock/handler/MySqlMockExecuteHandlerImpl.java
Patch:
@@ -27,6 +27,7 @@
 import com.alibaba.druid.mock.MockStatementBase;
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLStatement;
+import com.alibaba.druid.sql.ast.expr.SQLBooleanExpr;
 import com.alibaba.druid.sql.ast.expr.SQLCharExpr;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;
@@ -142,8 +143,8 @@ public ResultSet executeQueryFromDual(MockStatementBase statement, SQLSelectQuer
             } else if (expr instanceof SQLNCharExpr) {
                 row[i] = ((SQLNCharExpr) expr).getText();
                 column.setColumnType(Types.NVARCHAR);
-            } else if (expr instanceof MySqlBooleanExpr) {
-                row[i] = ((MySqlBooleanExpr) expr).getValue();
+            } else if (expr instanceof SQLBooleanExpr) {
+                row[i] = ((SQLBooleanExpr) expr).getValue();
                 column.setColumnType(Types.NVARCHAR);
             } else if (expr instanceof SQLNullExpr) {
                 row[i] = null;

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -74,4 +74,5 @@ public boolean equals(Object obj) {
         return true;
     }
 
+
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -105,6 +105,7 @@ public void scanSharp() {
 
         stringVal = subString(mark, bufPos);
         token = Token.LINE_COMMENT;
+        hasComment = true;
 
         if (commentHandler != null && commentHandler.handle(lastToken, stringVal)) {
             return;
@@ -440,6 +441,7 @@ public void scanComment() {
             } else {
                 stringVal = subString(mark, bufPos);
                 token = Token.MULTI_LINE_COMMENT;
+                hasComment = true;
             }
 
             if (commentHandler != null && commentHandler.handle(lastToken, stringVal)) {
@@ -481,6 +483,7 @@ public void scanComment() {
 
             stringVal = subString(mark, bufPos + 1);
             token = Token.LINE_COMMENT;
+            hasComment = true;
 
             if (commentHandler != null && commentHandler.handle(lastToken, stringVal)) {
                 return;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsLexer.java
Patch:
@@ -92,6 +92,7 @@ public void scanComment() {
             } else {
                 stringVal = subString(mark, bufPos);
                 token = Token.MULTI_LINE_COMMENT;
+                hasComment = true;
             }
 
             if (token != Token.HINT && !isAllowComment()) {
@@ -134,6 +135,7 @@ public void scanComment() {
 
             stringVal = subString(mark + 1, bufPos);
             token = Token.LINE_COMMENT;
+            hasComment = true;
             return;
         }
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -230,6 +230,7 @@ public void scanComment() {
             } else {
                 stringVal = subString(mark, bufPos);
                 token = Token.MULTI_LINE_COMMENT;
+                hasComment = true;
             }
 
             if (token != Token.HINT && !isAllowComment()) {
@@ -272,6 +273,7 @@ public void scanComment() {
 
             stringVal = subString(mark + 1, bufPos);
             token = Token.LINE_COMMENT;
+            hasComment = true;
             return;
         }
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -965,7 +965,7 @@ private void parseAlterTableSplit(OracleAlterTableStatement stmt) {
             if (identifierEquals("AT")) {
                 lexer.nextToken();
                 accept(Token.LPAREN);
-                this.exprParser.exprList(item.getAt());
+                this.exprParser.exprList(item.getAt(), item);
                 accept(Token.RPAREN);
             } else {
                 throw new ParserException("TODO : " + lexer.token() + " " + lexer.stringVal());
@@ -1206,12 +1206,12 @@ public OracleMergeStatement parseMerge() {
 
             if (lexer.token() == Token.LPAREN) {
                 accept(Token.LPAREN);
-                exprParser.exprList(insertClause.getColumns());
+                exprParser.exprList(insertClause.getColumns(), insertClause);
                 accept(Token.RPAREN);
             }
             accept(Token.VALUES);
             accept(Token.LPAREN);
-            exprParser.exprList(insertClause.getValues());
+            exprParser.exprList(insertClause.getValues(), insertClause);
             accept(Token.RPAREN);
 
             if (lexer.token() == Token.WHERE) {

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -58,6 +58,9 @@ public class PGLexer extends Lexer {
 
         map.put("USING", Token.USING);
         map.put("WINDOW", Token.WINDOW);
+        
+        map.put("TRUE", Token.TRUE);
+        map.put("FALSE", Token.FALSE);
 
         DEFAULT_PG_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSQLStatementParser.java
Patch:
@@ -100,7 +100,7 @@ public PGInsertStatement parseInsert() {
 
         if (lexer.token() == (Token.LPAREN)) {
             lexer.nextToken();
-            this.exprParser.exprList(stmt.getColumns());
+            this.exprParser.exprList(stmt.getColumns(), stmt);
             accept(Token.RPAREN);
         }
 
@@ -110,7 +110,7 @@ public PGInsertStatement parseInsert() {
             for (;;) {
                 accept(Token.LPAREN);
                 SQLInsertStatement.ValuesClause valuesCaluse = new SQLInsertStatement.ValuesClause();
-                this.exprParser.exprList(valuesCaluse.getValues());
+                this.exprParser.exprList(valuesCaluse.getValues(), valuesCaluse);
                 stmt.addValueCause(valuesCaluse);
 
                 accept(Token.RPAREN);

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerLexer.java
Patch:
@@ -100,6 +100,7 @@ public void scanComment() {
             } else {
                 stringVal = subString(mark, bufPos);
                 token = Token.MULTI_LINE_COMMENT;
+                hasComment = true;
             }
 
             if (token != Token.HINT && !isAllowComment()) {
@@ -142,6 +143,7 @@ public void scanComment() {
 
             stringVal = subString(mark + 1, bufPos);
             token = Token.LINE_COMMENT;
+            hasComment = true;
             return;
         }
     }

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerStatementParser.java
Patch:
@@ -109,7 +109,7 @@ protected void parseInsert0(SQLInsertInto insert, boolean acceptSubQuery) {
 
         if (lexer.token() == (Token.LPAREN)) {
             lexer.nextToken();
-            this.exprParser.exprList(insertStatement.getColumns());
+            this.exprParser.exprList(insertStatement.getColumns(), insertStatement);
             accept(Token.RPAREN);
         }
 

File: src/main/java/com/alibaba/druid/sql/visitor/ExportParameterVisitorUtils.java
Patch:
@@ -20,11 +20,11 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBetweenExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
+import com.alibaba.druid.sql.ast.expr.SQLBooleanExpr;
 import com.alibaba.druid.sql.ast.expr.SQLCharExpr;
 import com.alibaba.druid.sql.ast.expr.SQLLiteralExpr;
 import com.alibaba.druid.sql.ast.expr.SQLNumericLiteralExpr;
 import com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;
-import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlBooleanExpr;
 
 public class ExportParameterVisitorUtils {
 
@@ -48,8 +48,8 @@ public static SQLExpr exportParameter(final List<Object> parameters, final SQLEx
             return new SQLVariantRefExpr("?");
         }
 
-        if (param instanceof MySqlBooleanExpr) {
-            Object value = ((MySqlBooleanExpr) param).getValue();
+        if (param instanceof SQLBooleanExpr) {
+            Object value = ((SQLBooleanExpr) param).getValue();
             parameters.add(value);
             return new SQLVariantRefExpr("?");
         }

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -980,6 +980,8 @@ public boolean visit(SQLSelect x) {
 
     public boolean visit(SQLAggregateExpr x) {
         accept(x.getArguments());
+        accept(x.getWithinGroup());
+        accept(x.getOver());
         return false;
     }
 

File: src/main/java/com/alibaba/druid/sql/visitor/functions/Substring.java
Patch:
@@ -50,7 +50,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
 
         if (paramSize == 2) {
 
-            if (index < 0) {
+            if (index <= 0) {
                 int lastIndex = str.length() + index;
                 return str.substring(lastIndex);
             }
@@ -68,7 +68,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
         int len = ((Number) param2Value).intValue();
 
         String result;
-        if (index < 0) {
+        if (index <= 0) {
             int lastIndex = str.length() + index;
             result = str.substring(lastIndex);
         } else {

File: src/main/java/com/alibaba/druid/support/http/stat/WebAppStat.java
Patch:
@@ -31,6 +31,7 @@
 import com.alibaba.druid.support.logging.Log;
 import com.alibaba.druid.support.logging.LogFactory;
 import com.alibaba.druid.util.LRUCache;
+import java.util.Collections;
 
 public class WebAppStat {
 
@@ -504,7 +505,7 @@ public List<Map<String, Object>> getURIStatDataList() {
 
     public List<Map<String, Object>> getSessionStatDataList() {
         List<Map<String, Object>> sessionStatDataList = new ArrayList<Map<String, Object>>(this.sessionStatMap.size());
-        for (WebSessionStat sessionStat : this.sessionStatMap.values()) {
+        for (WebSessionStat sessionStat : Collections.unmodifiableCollection(this.sessionStatMap.values())) {
             Map<String, Object> sessionStatData = sessionStat.getStatData();
 
             int runningCount = ((Number) sessionStatData.get("RunningCount")).intValue();
@@ -642,7 +643,6 @@ public void computeUserAgent(String userAgent) {
             }
         } else if (isLinux) {
             osLinuxCount.incrementAndGet();
-
             isAndroid = computeUserAgentAndroid(userAgent);
         } else if (userAgent.indexOf("Symbian") != -1) {
             osSymbianCount.incrementAndGet();

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -40,6 +40,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLBetweenExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOperator;
+import com.alibaba.druid.sql.ast.expr.SQLBooleanExpr;
 import com.alibaba.druid.sql.ast.expr.SQLCaseExpr;
 import com.alibaba.druid.sql.ast.expr.SQLCaseExpr.Item;
 import com.alibaba.druid.sql.ast.expr.SQLCharExpr;
@@ -91,7 +92,6 @@
 import com.alibaba.druid.sql.ast.statement.SQLUpdateSetItem;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateStatement;
 import com.alibaba.druid.sql.ast.statement.SQLUseStatement;
-import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlBooleanExpr;
 import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlOutFileExpr;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlCommitStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlDeleteStatement;
@@ -1386,8 +1386,8 @@ public static Object getValue(WallVisitor visitor, SQLExpr x) {
             return getValue(visitor, (SQLBinaryOpExpr) x);
         }
 
-        if (x instanceof MySqlBooleanExpr) {
-            return ((MySqlBooleanExpr) x).getValue();
+        if (x instanceof SQLBooleanExpr) {
+            return ((SQLBooleanExpr) x).getValue();
         }
 
         if (x instanceof SQLNumericLiteralExpr) {

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest80.java
Patch:
@@ -45,7 +45,7 @@ public void test_false() throws Exception {
 
         provider.getConfig().setCommentAllow(true);
 
-        Assert.assertFalse(provider.checkValid(//
+        Assert.assertTrue(provider.checkValid(//
         "SELECT * FROM T WHERE FID = ? OR FID LIKE 1 --"));
 
         Assert.assertEquals(1, provider.getTableStats().size());

File: src/test/java/com/alibaba/druid/bvt/proxy/filter/GlobalStatTest0.java
Patch:
@@ -28,12 +28,12 @@ protected void setUp() throws Exception {
         dataSourceA = new DruidDataSource();
         dataSourceA.setUrl("jdbc:mock:xx_A");
         dataSourceA.setFilters("stat");
-        dataSourceA.setUseGloalDataSourceStat(true);
+        dataSourceA.setUseGlobalDataSourceStat(true);
 
         dataSourceB = new DruidDataSource();
         dataSourceB.setUrl("jdbc:mock:xx_A");
         dataSourceB.setFilters("stat");
-        dataSourceB.setUseGloalDataSourceStat(true);
+        dataSourceB.setUseGlobalDataSourceStat(true);
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/proxy/filter/GlobalStatTest1.java
Patch:
@@ -25,12 +25,12 @@ protected void setUp() throws Exception {
         dataSourceA = new DruidDataSource();
         dataSourceA.setUrl("jdbc:mock:xx_A");
         dataSourceA.setFilters("stat");
-        dataSourceA.setUseGloalDataSourceStat(true);
+        dataSourceA.setUseGlobalDataSourceStat(true);
 
         dataSourceB = new DruidDataSource();
         dataSourceB.setUrl("jdbc:mock:xx_A");
         dataSourceB.setFilters("stat");
-        dataSourceB.setUseGloalDataSourceStat(true);
+        dataSourceB.setUseGlobalDataSourceStat(true);
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlASTVisitorAdapterTest.java
Patch:
@@ -2,14 +2,14 @@
 
 import junit.framework.TestCase;
 
+import com.alibaba.druid.sql.ast.expr.SQLBooleanExpr;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlForceIndexHint;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlIgnoreIndexHint;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlKey;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlPrimaryKey;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlUnique;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlUseIndexHint;
 import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlBinaryExpr;
-import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlBooleanExpr;
 import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlCharExpr;
 import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlIntervalExpr;
 import com.alibaba.druid.sql.dialect.mysql.ast.expr.MySqlOutFileExpr;
@@ -101,7 +101,7 @@ public class MySqlASTVisitorAdapterTest extends TestCase {
 
     public void test_adapter() throws Exception {
         MySqlASTVisitorAdapter adapter = new MySqlASTVisitorAdapter();
-        new MySqlBooleanExpr().accept(adapter);
+        new SQLBooleanExpr().accept(adapter);
         new Limit().accept(adapter);
         new MySqlTableIndex().accept(adapter);
         new MySqlKey().accept(adapter);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -388,12 +388,11 @@ public boolean visit(SQLCharactorDataType x) {
                 print(" COLLATE ");
                 print(x.getCollate());
             }
-        }
-        
-        if (x.getCollate() != null) {
+        }else if (x.getCollate() != null) {
             print(" COLLATE ");
             print(x.getCollate());
         }
+        
         return false;
     }
 

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -433,6 +433,8 @@ public static String getDbType(String rawUrl, String driverClassName) {
             return ALI_ORACLE;
         } else if (rawUrl.startsWith("jdbc:microsoft:")) {
             return SQL_SERVER;
+        } else if (rawUrl.startsWith("jdbc:sqlserver:")) {
+            return SQL_SERVER;
         } else if (rawUrl.startsWith("jdbc:sybase:Tds:")) {
             return SYBASE;
         } else if (rawUrl.startsWith("jdbc:jtds:")) {

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -433,6 +433,8 @@ public static String getDbType(String rawUrl, String driverClassName) {
             return ALI_ORACLE;
         } else if (rawUrl.startsWith("jdbc:microsoft:")) {
             return SQL_SERVER;
+        } else if (rawUrl.startsWith("jdbc:sqlserver:")) {
+            return SQL_SERVER;
         } else if (rawUrl.startsWith("jdbc:sybase:Tds:")) {
             return SYBASE;
         } else if (rawUrl.startsWith("jdbc:jtds:")) {

File: src/test/java/com/alibaba/druid/bvt/proxy/filter/GlobalStatTest0.java
Patch:
@@ -28,12 +28,12 @@ protected void setUp() throws Exception {
         dataSourceA = new DruidDataSource();
         dataSourceA.setUrl("jdbc:mock:xx_A");
         dataSourceA.setFilters("stat");
-        dataSourceA.setUseGloalDataSourceStat(true);
+        dataSourceA.setUseGlobalDataSourceStat(true);
 
         dataSourceB = new DruidDataSource();
         dataSourceB.setUrl("jdbc:mock:xx_A");
         dataSourceB.setFilters("stat");
-        dataSourceB.setUseGloalDataSourceStat(true);
+        dataSourceB.setUseGlobalDataSourceStat(true);
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/proxy/filter/GlobalStatTest1.java
Patch:
@@ -25,12 +25,12 @@ protected void setUp() throws Exception {
         dataSourceA = new DruidDataSource();
         dataSourceA.setUrl("jdbc:mock:xx_A");
         dataSourceA.setFilters("stat");
-        dataSourceA.setUseGloalDataSourceStat(true);
+        dataSourceA.setUseGlobalDataSourceStat(true);
 
         dataSourceB = new DruidDataSource();
         dataSourceB.setUrl("jdbc:mock:xx_A");
         dataSourceB.setFilters("stat");
-        dataSourceB.setUseGloalDataSourceStat(true);
+        dataSourceB.setUseGlobalDataSourceStat(true);
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/proxy/filter/GlobalStatTest0.java
Patch:
@@ -28,12 +28,12 @@ protected void setUp() throws Exception {
         dataSourceA = new DruidDataSource();
         dataSourceA.setUrl("jdbc:mock:xx_A");
         dataSourceA.setFilters("stat");
-        dataSourceA.setUseGloalDataSourceStat(true);
+        dataSourceA.setUseGlobalDataSourceStat(true);
 
         dataSourceB = new DruidDataSource();
         dataSourceB.setUrl("jdbc:mock:xx_A");
         dataSourceB.setFilters("stat");
-        dataSourceB.setUseGloalDataSourceStat(true);
+        dataSourceB.setUseGlobalDataSourceStat(true);
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/proxy/filter/GlobalStatTest1.java
Patch:
@@ -25,12 +25,12 @@ protected void setUp() throws Exception {
         dataSourceA = new DruidDataSource();
         dataSourceA.setUrl("jdbc:mock:xx_A");
         dataSourceA.setFilters("stat");
-        dataSourceA.setUseGloalDataSourceStat(true);
+        dataSourceA.setUseGlobalDataSourceStat(true);
 
         dataSourceB = new DruidDataSource();
         dataSourceB.setUrl("jdbc:mock:xx_A");
         dataSourceB.setFilters("stat");
-        dataSourceB.setUseGloalDataSourceStat(true);
+        dataSourceB.setUseGlobalDataSourceStat(true);
     }
 
     protected void tearDown() throws Exception {

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -19,7 +19,7 @@ public final class VERSION {
 
     public final static int MajorVersion    = 1;
     public final static int MinorVersion    = 0;
-    public final static int RevisionVersion = 6;
+    public final static int RevisionVersion = 7;
 
     public static String getVersionNumber() {
         return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion;

File: src/main/java/com/alibaba/druid/sql/visitor/functions/Substring.java
Patch:
@@ -50,7 +50,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
 
         if (paramSize == 2) {
 
-            if (index < 0) {
+            if (index <= 0) {
                 int lastIndex = str.length() + index;
                 return str.substring(lastIndex);
             }
@@ -68,7 +68,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
         int len = ((Number) param2Value).intValue();
 
         String result;
-        if (index < 0) {
+        if (index <= 0) {
             int lastIndex = str.length() + index;
             result = str.substring(lastIndex);
         } else {

File: src/main/java/com/alibaba/druid/sql/visitor/functions/Substring.java
Patch:
@@ -50,7 +50,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
 
         if (paramSize == 2) {
 
-            if (index < 0) {
+            if (index <= 0) {
                 int lastIndex = str.length() + index;
                 return str.substring(lastIndex);
             }
@@ -68,7 +68,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
         int len = ((Number) param2Value).intValue();
 
         String result;
-        if (index < 0) {
+        if (index <= 0) {
             int lastIndex = str.length() + index;
             result = str.substring(lastIndex);
         } else {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -234,7 +234,7 @@ public final SQLExpr primaryRest(SQLExpr expr) {
                     String chars = lexer.stringVal();
                     concat.addParameter(new SQLCharExpr(chars));
                     lexer.nextToken();
-                } while (lexer.token() == Token.LITERAL_CHARS);
+                } while (lexer.token() == Token.LITERAL_CHARS || lexer.token() == Token.LITERAL_ALIAS);
                 expr = concat;
             }
         } else if (lexer.token() == Token.IDENTIFIER) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -105,6 +105,7 @@ public void scanSharp() {
 
         stringVal = subString(mark, bufPos);
         token = Token.LINE_COMMENT;
+        hasComment = true;
 
         if (commentHandler != null && commentHandler.handle(lastToken, stringVal)) {
             return;
@@ -440,6 +441,7 @@ public void scanComment() {
             } else {
                 stringVal = subString(mark, bufPos);
                 token = Token.MULTI_LINE_COMMENT;
+                hasComment = true;
             }
 
             if (commentHandler != null && commentHandler.handle(lastToken, stringVal)) {
@@ -481,6 +483,7 @@ public void scanComment() {
 
             stringVal = subString(mark, bufPos + 1);
             token = Token.LINE_COMMENT;
+            hasComment = true;
 
             if (commentHandler != null && commentHandler.handle(lastToken, stringVal)) {
                 return;

File: src/main/java/com/alibaba/druid/sql/dialect/odps/parser/OdpsLexer.java
Patch:
@@ -92,6 +92,7 @@ public void scanComment() {
             } else {
                 stringVal = subString(mark, bufPos);
                 token = Token.MULTI_LINE_COMMENT;
+                hasComment = true;
             }
 
             if (token != Token.HINT && !isAllowComment()) {
@@ -134,6 +135,7 @@ public void scanComment() {
 
             stringVal = subString(mark + 1, bufPos);
             token = Token.LINE_COMMENT;
+            hasComment = true;
             return;
         }
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -230,6 +230,7 @@ public void scanComment() {
             } else {
                 stringVal = subString(mark, bufPos);
                 token = Token.MULTI_LINE_COMMENT;
+                hasComment = true;
             }
 
             if (token != Token.HINT && !isAllowComment()) {
@@ -272,6 +273,7 @@ public void scanComment() {
 
             stringVal = subString(mark + 1, bufPos);
             token = Token.LINE_COMMENT;
+            hasComment = true;
             return;
         }
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -2205,6 +2205,7 @@ public boolean visit(Else x) {
             item.setParent(x);
             item.accept(this);
         }
+        print(";");
 
         decrementIndent();
         return false;
@@ -2226,6 +2227,7 @@ public boolean visit(ElseIf x) {
             item.setParent(x);
             item.accept(this);
         }
+        print(";");
 
         decrementIndent();
         return false;
@@ -2256,6 +2258,7 @@ public boolean visit(OracleIfStatement x) {
                 println();
             }
         }
+        print(";");
         decrementIndent();
 
         for (ElseIf elseIf : x.getElseIfList()) {

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerLexer.java
Patch:
@@ -100,6 +100,7 @@ public void scanComment() {
             } else {
                 stringVal = subString(mark, bufPos);
                 token = Token.MULTI_LINE_COMMENT;
+                hasComment = true;
             }
 
             if (token != Token.HINT && !isAllowComment()) {
@@ -142,6 +143,7 @@ public void scanComment() {
 
             stringVal = subString(mark + 1, bufPos);
             token = Token.LINE_COMMENT;
+            hasComment = true;
             return;
         }
     }

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -74,4 +74,5 @@ public boolean equals(Object obj) {
         return true;
     }
 
+
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -493,7 +493,7 @@ public MySqlCreateTableStatement parseCrateTable(boolean acceptCreate) {
                                 MySqlPartitioningDef.InValues values = new MySqlPartitioningDef.InValues();
 
                                 accept(Token.LPAREN);
-                                this.exprParser.exprList(values.getItems());
+                                this.exprParser.exprList(values.getItems(), values);
                                 accept(Token.RPAREN);
                                 partitionDef.setValues(values);
                             } else {
@@ -503,7 +503,7 @@ public MySqlCreateTableStatement parseCrateTable(boolean acceptCreate) {
                                 MySqlPartitioningDef.LessThanValues values = new MySqlPartitioningDef.LessThanValues();
 
                                 accept(Token.LPAREN);
-                                this.exprParser.exprList(values.getItems());
+                                this.exprParser.exprList(values.getItems(), values);
                                 accept(Token.RPAREN);
                                 partitionDef.setValues(values);
                             }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -394,7 +394,7 @@ public final SQLExpr primaryRest(SQLExpr expr) {
                 if (lexer.token() == Token.RPAREN) {
                     lexer.nextToken();
                 } else {
-                    exprList(matchAgainstExpr.getColumns());
+                    exprList(matchAgainstExpr.getColumns(), matchAgainstExpr);
                     accept(Token.RPAREN);
                 }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -965,7 +965,7 @@ private void parseAlterTableSplit(OracleAlterTableStatement stmt) {
             if (identifierEquals("AT")) {
                 lexer.nextToken();
                 accept(Token.LPAREN);
-                this.exprParser.exprList(item.getAt());
+                this.exprParser.exprList(item.getAt(), item);
                 accept(Token.RPAREN);
             } else {
                 throw new ParserException("TODO : " + lexer.token() + " " + lexer.stringVal());
@@ -1206,12 +1206,12 @@ public OracleMergeStatement parseMerge() {
 
             if (lexer.token() == Token.LPAREN) {
                 accept(Token.LPAREN);
-                exprParser.exprList(insertClause.getColumns());
+                exprParser.exprList(insertClause.getColumns(), insertClause);
                 accept(Token.RPAREN);
             }
             accept(Token.VALUES);
             accept(Token.LPAREN);
-            exprParser.exprList(insertClause.getValues());
+            exprParser.exprList(insertClause.getValues(), insertClause);
             accept(Token.RPAREN);
 
             if (lexer.token() == Token.WHERE) {

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSQLStatementParser.java
Patch:
@@ -100,7 +100,7 @@ public PGInsertStatement parseInsert() {
 
         if (lexer.token() == (Token.LPAREN)) {
             lexer.nextToken();
-            this.exprParser.exprList(stmt.getColumns());
+            this.exprParser.exprList(stmt.getColumns(), stmt);
             accept(Token.RPAREN);
         }
 
@@ -110,7 +110,7 @@ public PGInsertStatement parseInsert() {
             for (;;) {
                 accept(Token.LPAREN);
                 SQLInsertStatement.ValuesClause valuesCaluse = new SQLInsertStatement.ValuesClause();
-                this.exprParser.exprList(valuesCaluse.getValues());
+                this.exprParser.exprList(valuesCaluse.getValues(), valuesCaluse);
                 stmt.addValueCause(valuesCaluse);
 
                 accept(Token.RPAREN);

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerStatementParser.java
Patch:
@@ -109,7 +109,7 @@ protected void parseInsert0(SQLInsertInto insert, boolean acceptSubQuery) {
 
         if (lexer.token() == (Token.LPAREN)) {
             lexer.nextToken();
-            this.exprParser.exprList(insertStatement.getColumns());
+            this.exprParser.exprList(insertStatement.getColumns(), insertStatement);
             accept(Token.RPAREN);
         }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -418,7 +418,7 @@ protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
                 lexer.nextToken();
                 if (lexer.token() == Token.LPAREN) {
                     lexer.nextToken();
-                    this.exprParser.exprList(join.getUsing());
+                    this.exprParser.exprList(join.getUsing(), join);
                     accept(Token.RPAREN);
                 } else {
                     join.getUsing().add(this.expr());

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -74,4 +74,5 @@ public boolean equals(Object obj) {
         return true;
     }
 
+
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -493,7 +493,7 @@ public MySqlCreateTableStatement parseCrateTable(boolean acceptCreate) {
                                 MySqlPartitioningDef.InValues values = new MySqlPartitioningDef.InValues();
 
                                 accept(Token.LPAREN);
-                                this.exprParser.exprList(values.getItems());
+                                this.exprParser.exprList(values.getItems(), values);
                                 accept(Token.RPAREN);
                                 partitionDef.setValues(values);
                             } else {
@@ -503,7 +503,7 @@ public MySqlCreateTableStatement parseCrateTable(boolean acceptCreate) {
                                 MySqlPartitioningDef.LessThanValues values = new MySqlPartitioningDef.LessThanValues();
 
                                 accept(Token.LPAREN);
-                                this.exprParser.exprList(values.getItems());
+                                this.exprParser.exprList(values.getItems(), values);
                                 accept(Token.RPAREN);
                                 partitionDef.setValues(values);
                             }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -394,7 +394,7 @@ public final SQLExpr primaryRest(SQLExpr expr) {
                 if (lexer.token() == Token.RPAREN) {
                     lexer.nextToken();
                 } else {
-                    exprList(matchAgainstExpr.getColumns());
+                    exprList(matchAgainstExpr.getColumns(), matchAgainstExpr);
                     accept(Token.RPAREN);
                 }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -965,7 +965,7 @@ private void parseAlterTableSplit(OracleAlterTableStatement stmt) {
             if (identifierEquals("AT")) {
                 lexer.nextToken();
                 accept(Token.LPAREN);
-                this.exprParser.exprList(item.getAt());
+                this.exprParser.exprList(item.getAt(), item);
                 accept(Token.RPAREN);
             } else {
                 throw new ParserException("TODO : " + lexer.token() + " " + lexer.stringVal());
@@ -1206,12 +1206,12 @@ public OracleMergeStatement parseMerge() {
 
             if (lexer.token() == Token.LPAREN) {
                 accept(Token.LPAREN);
-                exprParser.exprList(insertClause.getColumns());
+                exprParser.exprList(insertClause.getColumns(), insertClause);
                 accept(Token.RPAREN);
             }
             accept(Token.VALUES);
             accept(Token.LPAREN);
-            exprParser.exprList(insertClause.getValues());
+            exprParser.exprList(insertClause.getValues(), insertClause);
             accept(Token.RPAREN);
 
             if (lexer.token() == Token.WHERE) {

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSQLStatementParser.java
Patch:
@@ -100,7 +100,7 @@ public PGInsertStatement parseInsert() {
 
         if (lexer.token() == (Token.LPAREN)) {
             lexer.nextToken();
-            this.exprParser.exprList(stmt.getColumns());
+            this.exprParser.exprList(stmt.getColumns(), stmt);
             accept(Token.RPAREN);
         }
 
@@ -110,7 +110,7 @@ public PGInsertStatement parseInsert() {
             for (;;) {
                 accept(Token.LPAREN);
                 SQLInsertStatement.ValuesClause valuesCaluse = new SQLInsertStatement.ValuesClause();
-                this.exprParser.exprList(valuesCaluse.getValues());
+                this.exprParser.exprList(valuesCaluse.getValues(), valuesCaluse);
                 stmt.addValueCause(valuesCaluse);
 
                 accept(Token.RPAREN);

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerStatementParser.java
Patch:
@@ -109,7 +109,7 @@ protected void parseInsert0(SQLInsertInto insert, boolean acceptSubQuery) {
 
         if (lexer.token() == (Token.LPAREN)) {
             lexer.nextToken();
-            this.exprParser.exprList(insertStatement.getColumns());
+            this.exprParser.exprList(insertStatement.getColumns(), insertStatement);
             accept(Token.RPAREN);
         }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -418,7 +418,7 @@ protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
                 lexer.nextToken();
                 if (lexer.token() == Token.LPAREN) {
                     lexer.nextToken();
-                    this.exprParser.exprList(join.getUsing());
+                    this.exprParser.exprList(join.getUsing(), join);
                     accept(Token.RPAREN);
                 } else {
                     join.getUsing().add(this.expr());

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -250,7 +250,7 @@ public final SQLExpr primaryRest(SQLExpr expr) {
 
                     return primaryRest(expr);
                 }
-            } else if ("COLLATE".equalsIgnoreCase(lexer.stringVal()) && !(expr instanceof SQLIdentifierExpr)) {
+            } else if ("COLLATE".equalsIgnoreCase(lexer.stringVal())) {
                 lexer.nextToken();
 
                 if (lexer.token() == Token.EQ) {

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1571,7 +1571,9 @@ public DruidDataSourceStatValue getStatValueAndReset() {
         value.setTestWhileIdle(this.isTestWhileIdle());
 
         value.setDefaultAutoCommit(this.isDefaultAutoCommit());
-        value.setDefaultReadOnly(this.getDefaultReadOnly());
+        if (getDefaultReadOnly() != null) {
+            value.setDefaultReadOnly(this.getDefaultReadOnly());
+        }
         value.setDefaultTransactionIsolation(this.getDefaultTransactionIsolation());
 
         value.setLogicConnectErrorCount(connectErrorCount.getAndSet(0));

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -234,7 +234,7 @@ public final SQLExpr primaryRest(SQLExpr expr) {
                     String chars = lexer.stringVal();
                     concat.addParameter(new SQLCharExpr(chars));
                     lexer.nextToken();
-                } while (lexer.token() == Token.LITERAL_CHARS);
+                } while (lexer.token() == Token.LITERAL_CHARS || lexer.token() == Token.LITERAL_ALIAS);
                 expr = concat;
             }
         } else if (lexer.token() == Token.IDENTIFIER) {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -2205,6 +2205,7 @@ public boolean visit(Else x) {
             item.setParent(x);
             item.accept(this);
         }
+        print(";");
 
         decrementIndent();
         return false;
@@ -2226,6 +2227,7 @@ public boolean visit(ElseIf x) {
             item.setParent(x);
             item.accept(this);
         }
+        print(";");
 
         decrementIndent();
         return false;
@@ -2256,6 +2258,7 @@ public boolean visit(OracleIfStatement x) {
                 println();
             }
         }
+        print(";");
         decrementIndent();
 
         for (ElseIf elseIf : x.getElseIfList()) {

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1569,7 +1569,7 @@ public DruidDataSourceStatValue getStatValueAndReset() {
         value.setTestWhileIdle(this.isTestWhileIdle());
 
         value.setDefaultAutoCommit(this.isDefaultAutoCommit());
-        value.setDefaultReadOnly(this.isDefaultAutoCommit());
+        value.setDefaultReadOnly(this.getDefaultReadOnly());
         value.setDefaultTransactionIsolation(this.getDefaultTransactionIsolation());
 
         value.setLogicConnectErrorCount(connectErrorCount.getAndSet(0));
@@ -2294,7 +2294,7 @@ public Map<String, Object> getStatData() {
         dataMap.put("TestWhileIdle", this.isTestWhileIdle());
 
         dataMap.put("DefaultAutoCommit", this.isDefaultAutoCommit());
-        dataMap.put("DefaultReadOnly", this.isDefaultAutoCommit());
+        dataMap.put("DefaultReadOnly", this.getDefaultReadOnly());
         dataMap.put("DefaultTransactionIsolation", this.getDefaultTransactionIsolation());
 
         dataMap.put("LogicConnectCount", connectCount);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -24,6 +24,7 @@
 import com.alibaba.druid.sql.ast.SQLOrderBy;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.ast.expr.SQLCharExpr;
+import com.alibaba.druid.sql.ast.expr.SQLNCharExpr;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;
 import com.alibaba.druid.sql.ast.expr.SQLListExpr;
 import com.alibaba.druid.sql.ast.expr.SQLLiteralExpr;
@@ -1940,8 +1941,8 @@ private void parseValueClause(List<ValuesClause> valueClauseList, int columnSize
                     } else if (lexer.token() == Token.LITERAL_CHARS) {
                         expr = new SQLCharExpr(lexer.stringVal());
                         lexer.nextTokenComma();
-                    } else if (lexer.token() == Token.LITERAL_CHARS) {
-                        expr = new SQLCharExpr(lexer.stringVal());
+                    } else if (lexer.token() == Token.LITERAL_NCHARS) {
+                        expr = new SQLNCharExpr(lexer.stringVal());
                         lexer.nextTokenComma();
                     } else {
                         expr = exprParser.expr();

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1569,7 +1569,7 @@ public DruidDataSourceStatValue getStatValueAndReset() {
         value.setTestWhileIdle(this.isTestWhileIdle());
 
         value.setDefaultAutoCommit(this.isDefaultAutoCommit());
-        value.setDefaultReadOnly(this.isDefaultAutoCommit());
+        value.setDefaultReadOnly(this.getDefaultReadOnly());
         value.setDefaultTransactionIsolation(this.getDefaultTransactionIsolation());
 
         value.setLogicConnectErrorCount(connectErrorCount.getAndSet(0));
@@ -2294,7 +2294,7 @@ public Map<String, Object> getStatData() {
         dataMap.put("TestWhileIdle", this.isTestWhileIdle());
 
         dataMap.put("DefaultAutoCommit", this.isDefaultAutoCommit());
-        dataMap.put("DefaultReadOnly", this.isDefaultAutoCommit());
+        dataMap.put("DefaultReadOnly", this.getDefaultReadOnly());
         dataMap.put("DefaultTransactionIsolation", this.getDefaultTransactionIsolation());
 
         dataMap.put("LogicConnectCount", connectCount);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -2296,6 +2296,9 @@ public SQLStatement parseAlter() {
                     }
                 } else if (identifierEquals("RENAME")) {
                     lexer.nextToken();
+                    if (lexer.token() == Token.TO || lexer.token() == Token.AS) {
+                        lexer.nextToken();
+                    }
                     MySqlRenameTableStatement renameStmt = new MySqlRenameTableStatement();
                     MySqlRenameTableStatement.Item item = new MySqlRenameTableStatement.Item();
                     item.setName(stmt.getTableSource().getExpr());

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -2296,6 +2296,9 @@ public SQLStatement parseAlter() {
                     }
                 } else if (identifierEquals("RENAME")) {
                     lexer.nextToken();
+                    if (lexer.token() == Token.TO || lexer.token() == Token.AS) {
+                        lexer.nextToken();
+                    }
                     MySqlRenameTableStatement renameStmt = new MySqlRenameTableStatement();
                     MySqlRenameTableStatement.Item item = new MySqlRenameTableStatement.Item();
                     item.setName(stmt.getTableSource().getExpr());

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlUnique.java
Patch:
@@ -28,6 +28,7 @@ protected void accept0(MySqlASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, this.getName());
             acceptChild(visitor, this.getColumns());
+            acceptChild(visitor, this.getIndexName());
         }
         visitor.endVisit(this);
     }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -1681,7 +1681,7 @@ public boolean visit(SQLForeignKeyImpl x) {
         }
 
         print("FOREIGN KEY (");
-        printAndAccept(x.getReferencedColumns(), ", ");
+        printAndAccept(x.getReferencingColumns(), ", ");
         print(")");
 
         print(" REFERENCES ");

File: src/main/java/com/alibaba/druid/sql/visitor/functions/If.java
Patch:
@@ -38,7 +38,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
         SQLExpr condition = parameters.get(0);
         condition.accept(visitor);
         Object itemValue = condition.getAttributes().get(EVAL_VALUE);
-        if (Boolean.TRUE == itemValue || !SQLEvalVisitorUtils.eq(itemValue, 0)) {
+        if (Boolean.TRUE == itemValue || (itemValue != null && !SQLEvalVisitorUtils.eq(itemValue, 0))) {
             SQLExpr trueExpr = parameters.get(1);
             trueExpr.accept(visitor);
             return trueExpr.getAttributes().get(EVAL_VALUE);

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest_addFk.java
Patch:
@@ -44,8 +44,9 @@ public void test_alter_first() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("ALTER TABLE Test2" + //
-                            "\n\tADD INDEX FK4CF5DC0F5DD7C31 (test1_name)," + //
-                            "\n\tADD CONSTRAINT FK4CF5DC0F5DD7C31 FOREIGN KEY (name) REFERENCES Test1 (name)", output);
+                                    "\n\tADD INDEX FK4CF5DC0F5DD7C31 (test1_name)," + //
+                                    "\n\tADD CONSTRAINT FK4CF5DC0F5DD7C31 FOREIGN KEY (test1_name) REFERENCES Test1 (name)",
+                            output);
 
         Assert.assertEquals(2, visitor.getTables().size());
         Assert.assertEquals(3, visitor.getColumns().size());

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest48.java
Patch:
@@ -58,8 +58,8 @@ public void test_0() throws Exception {
                                     + "\n\tCHANGESET_ID INTEGER, "//
                                     + "\n\tID INTEGER AUTO_INCREMENT NOT NULL, "//
                                     + "\n\tREPOSITORY_ID INTEGER, "//
-                                    + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_repository_id FOREIGN KEY (ID) REFERENCES AO_E8B6CC_REPOSITORY_MAPPING (ID), "//
-                                    + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_changeset_id FOREIGN KEY (ID) REFERENCES AO_E8B6CC_CHANGESET_MAPPING (ID), "//
+                                    + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_repository_id FOREIGN KEY (REPOSITORY_ID) REFERENCES AO_E8B6CC_REPOSITORY_MAPPING (ID), "//
+                                    + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_changeset_id FOREIGN KEY (CHANGESET_ID) REFERENCES AO_E8B6CC_CHANGESET_MAPPING (ID), "//
                                     + "\n\tPRIMARY KEY (ID)"//
                                     + "\n) ENGINE = InnoDB",//
                             output);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/MySqlUnique.java
Patch:
@@ -28,6 +28,7 @@ protected void accept0(MySqlASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, this.getName());
             acceptChild(visitor, this.getColumns());
+            acceptChild(visitor, this.getIndexName());
         }
         visitor.endVisit(this);
     }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -1681,7 +1681,7 @@ public boolean visit(SQLForeignKeyImpl x) {
         }
 
         print("FOREIGN KEY (");
-        printAndAccept(x.getReferencedColumns(), ", ");
+        printAndAccept(x.getReferencingColumns(), ", ");
         print(")");
 
         print(" REFERENCES ");

File: src/main/java/com/alibaba/druid/sql/visitor/functions/If.java
Patch:
@@ -38,7 +38,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
         SQLExpr condition = parameters.get(0);
         condition.accept(visitor);
         Object itemValue = condition.getAttributes().get(EVAL_VALUE);
-        if (Boolean.TRUE == itemValue || !SQLEvalVisitorUtils.eq(itemValue, 0)) {
+        if (Boolean.TRUE == itemValue || (itemValue != null && !SQLEvalVisitorUtils.eq(itemValue, 0))) {
             SQLExpr trueExpr = parameters.get(1);
             trueExpr.accept(visitor);
             return trueExpr.getAttributes().get(EVAL_VALUE);

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest_addFk.java
Patch:
@@ -44,8 +44,9 @@ public void test_alter_first() throws Exception {
 
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("ALTER TABLE Test2" + //
-                            "\n\tADD INDEX FK4CF5DC0F5DD7C31 (test1_name)," + //
-                            "\n\tADD CONSTRAINT FK4CF5DC0F5DD7C31 FOREIGN KEY (name) REFERENCES Test1 (name)", output);
+                                    "\n\tADD INDEX FK4CF5DC0F5DD7C31 (test1_name)," + //
+                                    "\n\tADD CONSTRAINT FK4CF5DC0F5DD7C31 FOREIGN KEY (test1_name) REFERENCES Test1 (name)",
+                            output);
 
         Assert.assertEquals(2, visitor.getTables().size());
         Assert.assertEquals(3, visitor.getColumns().size());

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest48.java
Patch:
@@ -58,8 +58,8 @@ public void test_0() throws Exception {
                                     + "\n\tCHANGESET_ID INTEGER, "//
                                     + "\n\tID INTEGER AUTO_INCREMENT NOT NULL, "//
                                     + "\n\tREPOSITORY_ID INTEGER, "//
-                                    + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_repository_id FOREIGN KEY (ID) REFERENCES AO_E8B6CC_REPOSITORY_MAPPING (ID), "//
-                                    + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_changeset_id FOREIGN KEY (ID) REFERENCES AO_E8B6CC_CHANGESET_MAPPING (ID), "//
+                                    + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_repository_id FOREIGN KEY (REPOSITORY_ID) REFERENCES AO_E8B6CC_REPOSITORY_MAPPING (ID), "//
+                                    + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_changeset_id FOREIGN KEY (CHANGESET_ID) REFERENCES AO_E8B6CC_CHANGESET_MAPPING (ID), "//
                                     + "\n\tPRIMARY KEY (ID)"//
                                     + "\n) ENGINE = InnoDB",//
                             output);

File: src/main/java/com/alibaba/druid/wall/WallConfig.java
Patch:
@@ -723,11 +723,11 @@ public static enum StatementType {
         String getHiddenColumn(String tableName);
 
         /**
-         * resultset返回值中如果包含hiddenColumn的回调函数
+         * resultset返回值中如果包含tenantColumn的回调函数
          * 
-         * @param value hiddenColumn对应的值
+         * @param value tenantColumn对应的值
          */
-        void resultset_hiddenColumn(Object value);
+        void filterResultsetTenantColumn(Object value);
     }
 
 }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/TenantTestCallBack.java
Patch:
@@ -35,7 +35,7 @@ public String getHiddenColumn(String tableName) {
     }
 
     @Override
-    public void resultset_hiddenColumn(Object value) {
+    public void filterResultsetTenantColumn(Object value) {
         System.out.println(value);
     }
 }

File: src/main/java/com/alibaba/druid/wall/WallConfig.java
Patch:
@@ -723,11 +723,11 @@ public static enum StatementType {
         String getHiddenColumn(String tableName);
 
         /**
-         * resultset返回值中如果包含hiddenColumn的回调函数
+         * resultset返回值中如果包含tenantColumn的回调函数
          * 
-         * @param value hiddenColumn对应的值
+         * @param value tenantColumn对应的值
          */
-        void resultset_hiddenColumn(Object value);
+        void filterResultsetTenantColumn(Object value);
     }
 
 }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/TenantTestCallBack.java
Patch:
@@ -35,7 +35,7 @@ public String getHiddenColumn(String tableName) {
     }
 
     @Override
-    public void resultset_hiddenColumn(Object value) {
+    public void filterResultsetTenantColumn(Object value) {
         System.out.println(value);
     }
 }

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -79,6 +79,7 @@
 import com.alibaba.druid.sql.ast.statement.SQLUpdateSetItem;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateStatement;
 import com.alibaba.druid.sql.ast.statement.SQLUseStatement;
+import com.alibaba.druid.sql.dialect.odps.parser.OdpsSelectParser;
 
 public class SQLStatementParser extends SQLParser {
 
@@ -1357,7 +1358,7 @@ public SQLSelectStatement parseSelect() {
     }
 
     public SQLSelectParser createSQLSelectParser() {
-        return new SQLSelectParser(this.exprParser);
+        return new OdpsSelectParser(this.exprParser);
     }
 
     public SQLUpdateStatement parseUpdateStatement() {

File: src/main/java/com/alibaba/druid/pool/vendor/OracleValidConnectionChecker.java
Patch:
@@ -118,9 +118,7 @@ public boolean isValidConnection(Connection conn, String valiateQuery, int valid
             }
         } catch (Exception e) {
             LOG.warn("Unexpected error in pingDatabase", e);
+            return false;
         }
-
-        // OK
-        return true;
     }
 }

File: src/main/java/com/alibaba/druid/pool/vendor/OracleValidConnectionChecker.java
Patch:
@@ -118,9 +118,7 @@ public boolean isValidConnection(Connection conn, String valiateQuery, int valid
             }
         } catch (Exception e) {
             LOG.warn("Unexpected error in pingDatabase", e);
+            return false;
         }
-
-        // OK
-        return true;
     }
 }

File: src/test/java/com/alibaba/druid/bvt/support/monitor/MonitorDaoJdbcImplTest.java
Patch:
@@ -26,7 +26,7 @@ public class MonitorDaoJdbcImplTest extends TestCase {
     protected void setUp() throws Exception {
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:h2:mem:test");
-        dataSource.setUrl("jdbc:mysql://localhost:3306/druid-monitor");
+        //dataSource.setUrl("jdbc:mysql://localhost:3306/druid-monitor");
         dataSource.setUsername("druid");
         dataSource.setPassword("druid");
         dataSource.setInitialSize(1);

File: src/test/java/com/alibaba/druid/bvt/support/monitor/MonitorDaoJdbcImplTest.java
Patch:
@@ -26,7 +26,7 @@ public class MonitorDaoJdbcImplTest extends TestCase {
     protected void setUp() throws Exception {
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:h2:mem:test");
-        dataSource.setUrl("jdbc:mysql://localhost:3306/druid-monitor");
+        //dataSource.setUrl("jdbc:mysql://localhost:3306/druid-monitor");
         dataSource.setUsername("druid");
         dataSource.setPassword("druid");
         dataSource.setInitialSize(1);

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -293,6 +293,8 @@ public static String buildToDate(String columnName, String tableAlias, String pa
 
     public static List<SQLExpr> split(SQLBinaryOpExpr x) {
         List<SQLExpr> groupList = new ArrayList<SQLExpr>();
+        groupList.add(x.getRight());
+
         SQLExpr left = x.getLeft();
         for (;;) {
             if (left instanceof SQLBinaryOpExpr && ((SQLBinaryOpExpr) left).getOperator() == x.getOperator()) {
@@ -304,7 +306,6 @@ public static List<SQLExpr> split(SQLBinaryOpExpr x) {
                 break;
             }
         }
-        groupList.add(x.getRight());
         return groupList;
     }
 }

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -1050,7 +1050,7 @@ public static Object getValue(WallVisitor visitor, SQLExpr x) {
 
                 Object result = getValue(caseExpr);
 
-                if (visitor != null && !visitor.getConfig().isCaseConditionAllow()) {
+                if (visitor != null && !visitor.getConfig().isCaseConditionConstAllow()) {
                     boolean leftIsName = false;
                     if (x.getParent() instanceof SQLBinaryOpExpr) {
                         SQLExpr left = ((SQLBinaryOpExpr) x.getParent()).getLeft();
@@ -1083,7 +1083,7 @@ public static Object getValue(WallVisitor visitor, SQLExpr x) {
 
         if (x instanceof SQLCaseExpr) {
 
-            if (visitor != null && !visitor.getConfig().isCaseConditionAllow()) {
+            if (visitor != null && !visitor.getConfig().isCaseConditionConstAllow()) {
                 SQLCaseExpr caseExpr = (SQLCaseExpr) x;
 
                 boolean leftIsName = false;

File: src/main/java/com/alibaba/druid/sql/SQLUtils.java
Patch:
@@ -293,6 +293,8 @@ public static String buildToDate(String columnName, String tableAlias, String pa
 
     public static List<SQLExpr> split(SQLBinaryOpExpr x) {
         List<SQLExpr> groupList = new ArrayList<SQLExpr>();
+        groupList.add(x.getRight());
+
         SQLExpr left = x.getLeft();
         for (;;) {
             if (left instanceof SQLBinaryOpExpr && ((SQLBinaryOpExpr) left).getOperator() == x.getOperator()) {
@@ -304,7 +306,6 @@ public static List<SQLExpr> split(SQLBinaryOpExpr x) {
                 break;
             }
         }
-        groupList.add(x.getRight());
         return groupList;
     }
 }

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -1050,7 +1050,7 @@ public static Object getValue(WallVisitor visitor, SQLExpr x) {
 
                 Object result = getValue(caseExpr);
 
-                if (visitor != null && !visitor.getConfig().isCaseConditionAllow()) {
+                if (visitor != null && !visitor.getConfig().isCaseConditionConstAllow()) {
                     boolean leftIsName = false;
                     if (x.getParent() instanceof SQLBinaryOpExpr) {
                         SQLExpr left = ((SQLBinaryOpExpr) x.getParent()).getLeft();
@@ -1083,7 +1083,7 @@ public static Object getValue(WallVisitor visitor, SQLExpr x) {
 
         if (x instanceof SQLCaseExpr) {
 
-            if (visitor != null && !visitor.getConfig().isCaseConditionAllow()) {
+            if (visitor != null && !visitor.getConfig().isCaseConditionConstAllow()) {
                 SQLCaseExpr caseExpr = (SQLCaseExpr) x;
 
                 boolean leftIsName = false;

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1065,7 +1065,7 @@ private DruidPooledConnection getConnectionInternal(long maxWait) throws SQLExce
 
             String errorMessage = buf.toString();
 
-            if (this.createError == null) {
+            if (this.createError != null) {
                 throw new GetConnectionTimeoutException(errorMessage, createError);
             } else {
                 throw new GetConnectionTimeoutException(errorMessage);

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1065,7 +1065,7 @@ private DruidPooledConnection getConnectionInternal(long maxWait) throws SQLExce
 
             String errorMessage = buf.toString();
 
-            if (this.createError == null) {
+            if (this.createError != null) {
                 throw new GetConnectionTimeoutException(errorMessage, createError);
             } else {
                 throw new GetConnectionTimeoutException(errorMessage);

File: src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -315,7 +315,7 @@ public WallSqlStat addBlackSql(String sql, Map<String, WallSqlTableStat> tableSt
                                    Map<String, WallSqlFunctionStat> functionStats, List<Violation> violations,
                                    boolean syntaxError) {
         if (!blackListEnable) {
-            WallSqlStat stat = new WallSqlStat(tableStats, functionStats, syntaxError);
+            WallSqlStat stat = new WallSqlStat(tableStats, functionStats, violations, syntaxError);
             return stat;
         }
 

File: src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -315,7 +315,7 @@ public WallSqlStat addBlackSql(String sql, Map<String, WallSqlTableStat> tableSt
                                    Map<String, WallSqlFunctionStat> functionStats, List<Violation> violations,
                                    boolean syntaxError) {
         if (!blackListEnable) {
-            WallSqlStat stat = new WallSqlStat(tableStats, functionStats, syntaxError);
+            WallSqlStat stat = new WallSqlStat(tableStats, functionStats, violations, syntaxError);
             return stat;
         }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -365,7 +365,7 @@ public SQLExpr primary() {
 
                     return primaryRest(sqlExpr);
                 } else {
-                    SQLExpr restExpr = equality();
+                    SQLExpr restExpr = relational();
                     sqlExpr = new SQLNotExpr(restExpr);
                 }
                 break;

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -1032,7 +1032,7 @@ public boolean visit(SQLDeleteStatement x) {
 
         return false;
     }
-
+    
     public boolean visit(SQLInListExpr x) {
         if (x.isNot()) {
             handleCondition(x.getExpr(), "NOT IN", x.getTargetList());

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -1117,9 +1117,7 @@ public static Boolean castToBoolean(Object val) {
                 return true;
             }
 
-            if ("0".equals(val) || "false".equalsIgnoreCase((String) val)) {
-                return false;
-            }
+            return false;
         }
 
         throw new IllegalArgumentException(val.getClass() + " not supported.");

File: src/main/java/com/alibaba/druid/wall/spi/MySqlWallVisitor.java
Patch:
@@ -300,6 +300,7 @@ public boolean isDeny(String varName) {
             varName = varName.substring(2);
         }
 
+        varName = varName.toLowerCase();
         return config.getDenyVariants().contains(varName);
     }
 
@@ -456,7 +457,7 @@ public boolean visit(SQLCommentHint x) {
             || text.indexOf("or") != -1 //
             || text.indexOf("and") != -1 //
             || text.indexOf("union") != -1 //
-            
+
             || text.indexOf("select") != -1 //
             || text.indexOf("delete") != -1 //
             || text.indexOf("insert") != -1 //

File: src/main/java/com/alibaba/druid/support/json/JSONParser.java
Patch:
@@ -152,7 +152,7 @@ void accept(Token token) {
             return;
         }
 
-        throw new IllegalArgumentException("illegal token : " + token + ", expect " + token);
+        throw new IllegalArgumentException("illegal token : " + this.token + ", expect " + token);
     }
 
     final void nextToken() {
@@ -312,7 +312,6 @@ private void scanString() {
                     char c4 = ch;
                     int val = Integer.parseInt(new String(new char[] { c1, c2, c3, c4 }), 16);
                     strBuf.append((char) val);
-                    break;
                 } else {
                     throw new IllegalArgumentException("illegal string : " + strBuf);
                 }

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxyImpl.java
Patch:
@@ -321,9 +321,7 @@ public int getMaxRows() throws SQLException {
     public boolean getMoreResults() throws SQLException {
         FilterChainImpl chain = createChain();
         boolean value = chain.statement_getMoreResults(this);
-        if (value) {
-            updateCount = null;
-        }
+        updateCount = null;
         recycleFilterChain(chain);
         return value;
     }

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -529,6 +529,8 @@ public int getMaxPoolPreparedStatementPerConnectionSize() {
     public void setMaxPoolPreparedStatementPerConnectionSize(int maxPoolPreparedStatementPerConnectionSize) {
         if (maxPoolPreparedStatementPerConnectionSize > 0) {
             this.poolPreparedStatements = true;
+        } else {
+            this.poolPreparedStatements = false;
         }
 
         this.maxPoolPreparedStatementPerConnectionSize = maxPoolPreparedStatementPerConnectionSize;

File: src/test/java/com/alibaba/druid/bvt/support/monitor/MonitorDaoJdbcImplTest.java
Patch:
@@ -24,8 +24,8 @@ public class MonitorDaoJdbcImplTest extends TestCase {
     protected void setUp() throws Exception {
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:h2:mem:test");
-        dataSource.setInitialSize(2);
-        dataSource.setMinIdle(2);
+        dataSource.setInitialSize(1);
+        dataSource.setMinIdle(1);
         dataSource.setFilters("wall,stat,log4j");
         dataSource.init();
     }

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStatValue.java
Patch:
@@ -33,7 +33,7 @@ public class JdbcSqlStatValue {
 
     protected String    sql;
 
-    @MField
+    @MField(groupBy = true)
     private long        sqlHash;
 
     @MField

File: src/main/java/com/alibaba/druid/support/http/stat/WebAppStatValue.java
Patch:
@@ -24,7 +24,7 @@
 @MTable(name = "druid_webapp")
 public class WebAppStatValue {
 
-    @MField
+    @MField(groupBy = true)
     String contextPath;
 
     @MField

File: src/main/java/com/alibaba/druid/support/http/stat/WebURIStatValue.java
Patch:
@@ -28,7 +28,7 @@
 @MTable(name = "druid_weburi")
 public class WebURIStatValue {
 
-    @MField
+    @MField(groupBy = true)
     protected String                    uri;
 
     @MField

File: src/main/java/com/alibaba/druid/support/monitor/MField.java
Patch:
@@ -25,4 +25,6 @@
 public @interface MField {
 
     String name() default "";
+    
+    boolean groupBy() default false;
 }

File: src/main/java/com/alibaba/druid/support/spring/stat/SpringMethodStatValue.java
Patch:
@@ -26,10 +26,10 @@
 @MTable(name = "druid_springmethod")
 public class SpringMethodStatValue {
 
-    @MField
+    @MField(groupBy = true)
     private String className;
 
-    @MField
+    @MField(groupBy = true)
     private String signature;
 
     @MField

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableAddPrimaryKey.java
Patch:
@@ -33,7 +33,7 @@ public void test_alter_first() throws Exception {
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("ALTER TABLE `test`.`tb1`" + //
                             "\n\tCHANGE COLUMN `fid` `fid` INT(11) NULL NOT NULL,\n\t" + //
-                            "ADD PRIAMRY KEY (`fid`)", output);
+                            "ADD PRIMARY KEY (`fid`)", output);
     }
 
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableAddPrimaryKey_1.java
Patch:
@@ -33,7 +33,7 @@ public void test_alter_first() throws Exception {
         parser.match(Token.EOF);
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("ALTER TABLE tabelname" + //
-                            "\n\tADD CONSTRAINT mYconstraint PRIAMRY KEY (id)", output);
+                            "\n\tADD CONSTRAINT mYconstraint PRIMARY KEY (id)", output);
     }
 
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest47.java
Patch:
@@ -59,7 +59,7 @@ public void test_0() throws Exception {
                             + "\n\tpname VARCHAR(60), "//
                             + "\n\tDESCRIPTION TEXT, "//
                             + "\n\tICONURL VARCHAR(255), "//
-                            + "\n\tCONSTRAINT PK_issuestatus PRIAMRY KEY (ID)"//
+                            + "\n\tCONSTRAINT PK_issuestatus PRIMARY KEY (ID)"//
                             + "\n)", output);
 
     }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest48.java
Patch:
@@ -60,7 +60,7 @@ public void test_0() throws Exception {
                                     + "\n\tREPOSITORY_ID INTEGER, "//
                                     + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_repository_id FOREIGN KEY (ID) REFERENCES AO_E8B6CC_REPOSITORY_MAPPING (ID), "//
                                     + "\n\tCONSTRAINT fk_ao_e8b6cc_repo_to_changeset_changeset_id FOREIGN KEY (ID) REFERENCES AO_E8B6CC_CHANGESET_MAPPING (ID), "//
-                                    + "\n\tPRIAMRY KEY (ID)"//
+                                    + "\n\tPRIMARY KEY (ID)"//
                                     + "\n) ENGINE = InnoDB",//
                             output);
 

File: src/main/java/com/alibaba/druid/support/monitor/MonitorClient.java
Patch:
@@ -89,7 +89,7 @@ public void setScheduler(ScheduledExecutorService scheduler) {
     }
 
     @SuppressWarnings("resource")
-    private void collectSql() {
+    public void collectSql() {
         Set<Object> dataSources = DruidDataSourceStatManager.getInstances().keySet();
 
         List<DruidDataSourceStatValue> statValueList = new ArrayList<DruidDataSourceStatValue>(dataSources.size());

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -541,7 +541,7 @@ public boolean visit(MySqlPrimaryKey x) {
             print(' ');
         }
 
-        print("PRIAMRY KEY");
+        print("PRIMARY KEY");
 
         if (x.getIndexType() != null) {
             print(" USING ");

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStatValue.java
Patch:
@@ -63,10 +63,10 @@ public class JdbcSqlStatValue {
     @MField
     protected int       concurrentMax;
 
-    @MField(name = "running")
+    @MField(name = "rsHoldTime")
     protected long      resultSetHoldTimeNano;
 
-    @MField
+    @MField(name = "execRsHoldTime")
     protected long      executeAndResultSetHoldTime;
 
     @MField

File: src/main/java/com/alibaba/druid/support/http/stat/WebAppStat.java
Patch:
@@ -503,7 +503,7 @@ public List<Map<String, Object>> getURIStatDataList() {
     }
 
     public List<Map<String, Object>> getSessionStatDataList() {
-        List<Map<String, Object>> uriStatDataList = new ArrayList<Map<String, Object>>(this.sessionStatMap.size());
+        List<Map<String, Object>> sessionStatDataList = new ArrayList<Map<String, Object>>(this.sessionStatMap.size());
         for (WebSessionStat sessionStat : this.sessionStatMap.values()) {
             Map<String, Object> sessionStatData = sessionStat.getStatData();
 
@@ -514,9 +514,9 @@ public List<Map<String, Object>> getSessionStatDataList() {
                 continue;
             }
 
-            uriStatDataList.add(sessionStatData);
+            sessionStatDataList.add(sessionStatData);
         }
-        return uriStatDataList;
+        return sessionStatDataList;
     }
 
     public void computeUserAgent(String userAgent) {

File: src/main/java/com/alibaba/druid/support/http/stat/WebSessionStat.java
Patch:
@@ -376,6 +376,7 @@ public WebSessionStatValue getValue(boolean reset) {
         val.sessionId = sessionId;
         val.runningCount = this.getRunningCount();
         val.concurrentMax = get(this, concurrentMaxUpdater, reset);
+        val.requestCount = get(this, requestCountUpdater, reset);
         val.requestErrorCount = get(this, requestErrorCountUpdater, reset);
         val.requestTimeNano = get(this, requestTimeNanoUpdater, reset);
         val.jdbcFetchRowCount = get(this, jdbcFetchRowCountUpdater, reset);

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallProviderTest.java
Patch:
@@ -52,7 +52,7 @@ public void test_getSqlStat() throws Exception {
             Assert.assertSame(whiteStat_1, provider.getSqlStat(sql_x));
         }
 
-        Assert.assertEquals(500, provider.getWhiteList().size());
+        Assert.assertEquals(0, provider.getWhiteList().size());
         Assert.assertEquals(2, provider.getSqlList().size());
 
         Assert.assertFalse(provider.checkValid("slelc"));
@@ -66,10 +66,10 @@ public void test_getSqlStat() throws Exception {
             
             Assert.assertEquals(1009, statValue.getCheckCount());
             Assert.assertEquals(2, statValue.getBlackListHitCount());
-            Assert.assertEquals(1005, statValue.getHardCheckCount());
+            Assert.assertEquals(4, statValue.getHardCheckCount());
             Assert.assertEquals(1, statValue.getSyntaxErrorCount());
             Assert.assertEquals(5, statValue.getViolationCount());
-            Assert.assertEquals(2, statValue.getWhiteListHitCount());
+            Assert.assertEquals(1003, statValue.getWhiteListHitCount());
             
             Assert.assertEquals(1, statValue.getWhiteList().size());
             Assert.assertEquals(2, statValue.getBlackList().size());

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallStatTest_WhiteList.java
Patch:
@@ -30,8 +30,8 @@ public void testMySql() throws Exception {
         WallTableStat tableStat = provider.getTableStat("t");
         Assert.assertEquals(3001, tableStat.getSelectCount());
         Assert.assertEquals(0, provider.getBlackListHitCount());
-        Assert.assertEquals(0, provider.getWhiteListHitCount());
-        Assert.assertEquals(500, provider.getWhiteList().size());
+        Assert.assertEquals(3000, provider.getWhiteListHitCount());
+        Assert.assertEquals(0, provider.getWhiteList().size());
         Assert.assertEquals(3001, provider.getCheckCount());
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest29.java
Patch:
@@ -29,7 +29,7 @@
 public class MySqlCreateTableTest29 extends MysqlTest {
 
     public void test_0() throws Exception {
-        String sql = "CREATE TABLE lookup" + //
+        String sql = "CREATE TABLE user" + //
                      "  (id INT, INDEX USING BTREE (id))" + //
                      "  MIN_ROWS 1024;"; //
 
@@ -52,10 +52,10 @@ public void test_0() throws Exception {
         Assert.assertEquals(1, visitor.getColumns().size());
         Assert.assertEquals(0, visitor.getConditions().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("lookup")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("user")));
 
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("CREATE TABLE lookup (" + //
+        Assert.assertEquals("CREATE TABLE user (" + //
                             "\n\tid INT, " + //
                             "\n\tINDEX USING BTREE(id)" + //
                             "\n) MIN_ROWS = 1024", output);

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateTableTest29.java
Patch:
@@ -71,7 +71,7 @@ public void test_types() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertEquals(8, visitor.getColumns().size());
+        Assert.assertEquals(7, visitor.getColumns().size());
 
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("dept_20", "employee_id")));
     }

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -213,7 +213,7 @@ public void decrypt(DruidDataSource dataSource, Properties info) {
     }
 
     public PublicKey getPublicKey(Properties connectinProperties, Properties configFileProperties) {
-        String key = connectinProperties.getProperty(CONFIG_KEY);
+        String key = configFileProperties.getProperty(CONFIG_KEY);
 
         if (StringUtils.isEmpty(key) && connectinProperties != null) {
             key = connectinProperties.getProperty(CONFIG_KEY);

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -213,7 +213,7 @@ public void decrypt(DruidDataSource dataSource, Properties info) {
     }
 
     public PublicKey getPublicKey(Properties connectinProperties, Properties configFileProperties) {
-        String key = connectinProperties.getProperty(CONFIG_KEY);
+        String key = configFileProperties.getProperty(CONFIG_KEY);
 
         if (StringUtils.isEmpty(key) && connectinProperties != null) {
             key = connectinProperties.getProperty(CONFIG_KEY);

File: src/test/java/com/alibaba/druid/TestIdel3.java
Patch:
@@ -21,7 +21,7 @@
 
 import javax.management.ObjectName;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/TestLockCount.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.locks.Lock;
 import java.util.concurrent.locks.ReentrantLock;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 public class TestLockCount extends TestCase {

File: src/test/java/com/alibaba/druid/TestOracle.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/TestRollBack.java
Patch:
@@ -3,7 +3,7 @@
 import java.beans.PropertyVetoException;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import org.junit.AfterClass;
 import org.junit.Before;

File: src/test/java/com/alibaba/druid/benckmark/pool/Case3.java
Patch:
@@ -25,7 +25,7 @@
 
 import javax.sql.DataSource;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import org.apache.commons.dbcp.BasicDataSource;

File: src/test/java/com/alibaba/druid/benckmark/proxy/sqlcase/Select1.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.ResultSet;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.benckmark.proxy.BenchmarkCase;
 import com.alibaba.druid.benckmark.proxy.SQLExecutor;

File: src/test/java/com/alibaba/druid/benckmark/proxy/sqlcase/SelectEmptyTable.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.ResultSet;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.benckmark.proxy.BenchmarkCase;
 import com.alibaba.druid.benckmark.proxy.SQLExecutor;

File: src/test/java/com/alibaba/druid/benckmark/proxy/sqlcase/SelectNow.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.Statement;
 import java.util.Date;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.benckmark.proxy.BenchmarkCase;
 import com.alibaba.druid.benckmark.proxy.SQLExecutor;

File: src/test/java/com/alibaba/druid/benckmark/proxy/sqlcase/SelectSysUser.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.ResultSet;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.benckmark.proxy.BenchmarkCase;
 import com.alibaba.druid.benckmark.proxy.SQLExecutor;

File: src/test/java/com/alibaba/druid/bvt/bug/Bug_for_JeffYin.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Driver;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.util.IOUtils;

File: src/test/java/com/alibaba/druid/bvt/bug/Bug_for_happyday517.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.ResultSet;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/bug/Bug_for_happyday517_2.java
Patch:
@@ -21,7 +21,7 @@
 import java.sql.SQLException;
 import java.util.Properties;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockConnection;

File: src/test/java/com/alibaba/druid/bvt/bug/Bug_for_happyday517_3.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/bug/Bug_for_xuershan.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/console/OptionTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.console;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import org.junit.runner.JUnitCore;

File: src/test/java/com/alibaba/druid/bvt/filter/EncodingConvertFilterTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.encoding.EncodingConvertFilter;

File: src/test/java/com/alibaba/druid/bvt/filter/FilterChainImplTest.java
Patch:
@@ -9,7 +9,7 @@
 import java.sql.Statement;
 import java.sql.Types;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/filter/FilterChainImplTest3.java
Patch:
@@ -7,7 +7,7 @@
 import java.sql.Statement;
 import java.sql.Types;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/filter/FilterDatasourceConnectAndRecycleFilterTest.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.List;
 import java.util.concurrent.atomic.AtomicLong;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.Filter;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterAfterResetTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterClobTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockClob;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterExecuteFirstResultSetTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockConnection;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterExecuteTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockConnection;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterOpenBlobCountTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterOpenBlobCountTest2.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.util.Collections;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterOpenClobCountTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterOpenClobCountTest2.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.SQLException;
 import java.util.Collections;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterOpenInputStreamCountTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterOpenInputStreamCountTest2.java
Patch:
@@ -6,7 +6,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterOpenReaderCountTest.java
Patch:
@@ -5,7 +5,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import org.nutz.lang.stream.StringReader;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterReadBytesLengthTest.java
Patch:
@@ -5,7 +5,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterReadStringLengthTest.java
Patch:
@@ -5,7 +5,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterResultSetMultiCloseTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/filter/config/ConfigFilterTest1.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.filter.config;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.config.ConfigFilter;

File: src/test/java/com/alibaba/druid/bvt/filter/config/ConfigFilterTest2.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.filter.config;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.config.ConfigFilter;

File: src/test/java/com/alibaba/druid/bvt/filter/config/ConfigFilterTest3.java
Patch:
@@ -4,7 +4,7 @@
 import java.io.FileOutputStream;
 import java.util.Properties;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.config.ConfigFilter;

File: src/test/java/com/alibaba/druid/bvt/filter/config/ConfigFilterTest4.java
Patch:
@@ -4,7 +4,7 @@
 import java.io.FileOutputStream;
 import java.util.Properties;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.config.ConfigFilter;

File: src/test/java/com/alibaba/druid/bvt/filter/config/ConfigFilterTest5.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.filter.config;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.config.ConfigFilter;

File: src/test/java/com/alibaba/druid/bvt/filter/config/ConfigToolsTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Random;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.config.ConfigTools;

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallVisitorUtilsLargeOrTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.filter.wall;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallVisitorUtilsTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.filter.wall;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/jmx/JMXExporterTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import javax.management.ObjectName;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import org.springframework.context.support.ClassPathXmlApplicationContext;

File: src/test/java/com/alibaba/druid/bvt/pool/CallableStatmentTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockCallableStatement;

File: src/test/java/com/alibaba/druid/bvt/pool/Case0.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/Case2.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 import java.util.Properties;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/Case3.java
Patch:
@@ -21,7 +21,7 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/ClosedTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DataSourceClosedException;

File: src/test/java/com/alibaba/druid/bvt/pool/ConfigErrorTest.java
Patch:
@@ -18,7 +18,7 @@
 import java.lang.reflect.Field;
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/ConfigErrorTest2.java
Patch:
@@ -18,7 +18,7 @@
 import java.lang.reflect.Field;
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/ConfigErrorTestMysql.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.lang.reflect.Field;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DataSourceDisableExceptionTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DataSourceDisableException;

File: src/test/java/com/alibaba/druid/bvt/pool/DiscardTest.java
Patch:
@@ -7,7 +7,7 @@
 import java.util.Properties;
 import java.util.concurrent.CountDownLatch;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidConnectionHolderTest2.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidConnectionHolderTest3.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceFactoryTest1.java
Patch:
@@ -3,7 +3,7 @@
 import java.sql.Connection;
 import java.util.Properties;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceFilterTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest2.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_clearCache.java
Patch:
@@ -3,7 +3,7 @@
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_enable.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DataSourceDisableException;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getPoolingPeakTime.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getProperties.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_interrupt.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive1.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive2.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive3.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive4.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxWait.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle2.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle3.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_oracle_error.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidPooledConnectionTest.java
Patch:
@@ -3,7 +3,7 @@
 import java.sql.Connection;
 import java.sql.Savepoint;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidPooledResultSetTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLFeatureNotSupportedException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockResultSet;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidPooledResultSetTest2.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockResultSet;

File: src/test/java/com/alibaba/druid/bvt/pool/DumpTest.java
Patch:
@@ -6,7 +6,7 @@
 import java.util.List;
 import java.util.Map;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/JdbcDataSourceStatTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.Properties;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.Constants;

File: src/test/java/com/alibaba/druid/bvt/pool/LockFairTest.java
Patch:
@@ -3,7 +3,7 @@
 import java.sql.Connection;
 import java.util.concurrent.locks.ReentrantLock;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/PSCacheTest.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/PSCacheTest1.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/PSCacheTest2.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/PSCacheTest3.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidConnectionHolder;

File: src/test/java/com/alibaba/druid/bvt/pool/PSCacheTest4.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidConnectionHolder;

File: src/test/java/com/alibaba/druid/bvt/pool/ParamTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/PasswordCallbackTest.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 import java.util.Properties;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/PreparedStatementKeyTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidPooledPreparedStatement.PreparedStatementKey;

File: src/test/java/com/alibaba/druid/bvt/pool/SavepointTest.java
Patch:
@@ -4,7 +4,7 @@
 import java.sql.Savepoint;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockConnection;

File: src/test/java/com/alibaba/druid/bvt/pool/SlowSqlMillisTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.stat.StatFilter;

File: src/test/java/com/alibaba/druid/bvt/pool/SlowSqlMillisTest2.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.stat.StatFilter;

File: src/test/java/com/alibaba/druid/bvt/pool/TestAbondon.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.pool;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestClone.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockConnection;

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_0.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_1.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockStatement;

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_2.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.Connection;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockStatement;

File: src/test/java/com/alibaba/druid/bvt/pool/TestConcurrent.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.Statement;
 import java.util.concurrent.CountDownLatch;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestConnectError.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Properties;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestConnectTimeout.java
Patch:
@@ -21,7 +21,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.atomic.AtomicLong;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestDefault.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestDisable.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 import java.util.concurrent.CountDownLatch;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestDruidDataSource.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestGetUpdateCount.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockConnection;

File: src/test/java/com/alibaba/druid/bvt/pool/TestGraceShutdown.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.TimeUnit;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestH2.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3.java
Patch:
@@ -20,7 +20,7 @@
 
 import javax.management.ObjectName;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.concurrent.CyclicBarrier;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Random;
 import java.util.concurrent.CountDownLatch;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_Starvation.java
Patch:
@@ -22,7 +22,7 @@
 import java.util.concurrent.CyclicBarrier;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestLogLongTimeTransaction.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestOraclePrefetch.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 import oracle.jdbc.OracleConnection;
 import oracle.jdbc.internal.OraclePreparedStatement;

File: src/test/java/com/alibaba/druid/bvt/pool/TestOracleWall.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestOracleWall2.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestOracleWall3.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestOracleWallJdbc3.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestOracleWrap.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestOracleWrap2.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement2.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 import java.sql.PreparedStatement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestRemoveAbandoned.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestRemoveAbandoned2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/TestSharePreparedStatements.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockPreparedStatement;

File: src/test/java/com/alibaba/druid/bvt/pool/TestStat.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/ValidationQueryLogDB2Test.java
Patch:
@@ -3,7 +3,7 @@
 import java.lang.reflect.Field;
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/ValidationQueryLogTest.java
Patch:
@@ -3,7 +3,7 @@
 import java.lang.reflect.Field;
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/adapter/DruidDataSourceC3P0AdapterTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/adapter/DruidDataSourceC3P0AdapterTest2.java
Patch:
@@ -17,7 +17,7 @@
 
 import javax.sql.DataSource;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.ResultSet;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest2.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.ResultSet;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest3.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.SQLException;
 import java.util.Properties;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest5.java
Patch:
@@ -21,7 +21,7 @@
 import javax.sql.ConnectionEvent;
 import javax.sql.ConnectionEventListener;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PoolableCallableStatementTest.java
Patch:
@@ -28,7 +28,7 @@
 import java.sql.Timestamp;
 import java.sql.Types;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockCallableStatement;

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PoolableWrapperTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.pool.basic;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockConnection;

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestCommit.java
Patch:
@@ -18,7 +18,7 @@
 import java.sql.Connection;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestDataSourceBasic.java
Patch:
@@ -21,7 +21,7 @@
 
 import javax.sql.DataSource;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/pool/dynamic/MaxActiveChangeTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.sql.Connection;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/pool/dynamic/PoolPreparedStatementsChangeTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.DruidDataSource;

File: src/test/java/com/alibaba/druid/bvt/proxy/BasicTypeTest.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.Calendar;
 import java.util.HashMap;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.proxy.DruidDriver;

File: src/test/java/com/alibaba/druid/bvt/proxy/ClobTest.java
Patch:
@@ -24,7 +24,7 @@
 import java.sql.SQLException;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.proxy.DruidDriver;

File: src/test/java/com/alibaba/druid/bvt/proxy/WrapImplTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.Statement;
 import java.util.Properties;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.FilterChain;

File: src/test/java/com/alibaba/druid/bvt/proxy/fake/FakeDriverTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.sql.Statement;
 import java.util.Properties;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockDriver;

File: src/test/java/com/alibaba/druid/bvt/proxy/filter/encoding/CharsetConvertTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.io.UnsupportedEncodingException;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.encoding.CharsetConvert;

File: src/test/java/com/alibaba/druid/bvt/proxy/filter/encoding/CharsetParameterTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.proxy.filter.encoding;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.filter.encoding.CharsetParameter;

File: src/test/java/com/alibaba/druid/bvt/proxy/utils/DruidLoaderUtilsTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.util.Iterator;
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.bvt.proxy.DruidDriverTest.PublicJdbcFilterAdapter;

File: src/test/java/com/alibaba/druid/bvt/spring/DruidJdbcExtractorTest.java
Patch:
@@ -19,7 +19,7 @@
 import java.sql.PreparedStatement;
 import java.sql.Statement;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.mock.MockCallableStatement;

File: src/test/java/com/alibaba/druid/bvt/spring/SpringMethodInfoTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.spring;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.support.spring.stat.SpringMethodInfo;

File: src/test/java/com/alibaba/druid/bvt/sql/CreateDatabaseTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/DistinctTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/MybatisTest2.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/OverTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/cobar/DMLSelectParserTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.cobar;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/cobar/DMLUpdateParserTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.cobar;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/cobar/LiteralHexadecimalTest.java
Patch:
@@ -18,7 +18,7 @@
  */
 package com.alibaba.druid.bvt.sql.cobar;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.expr.SQLHexExpr;

File: src/test/java/com/alibaba/druid/bvt/sql/cobar/MTSParserTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.cobar;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalCaseThen.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalInTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalIsNullTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodAsciiTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodBitLengthTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodInstrTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodLeftTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodLengthTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodModTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodNowTest.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Date;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodPITest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodReverseTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodRightTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalMethodTrimTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalRlikeTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.druid.bvt.sql.eval;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalSelectTest.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/EvalTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.math.BigDecimal;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/eval/SQLEvalVisitorUtilsTest.java
Patch:
@@ -4,7 +4,7 @@
 import java.math.BigInteger;
 import java.util.Arrays;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.visitor.SQLEvalVisitorUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/ArithmeticOperatorsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/AssignmentOperatorsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/BitFunctionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/BooleanValuesTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/CALL_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/CastFunctionsAndOperatorsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/CommitTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/ComparisonFunctionsAndOperatorsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/ControlFlowFunctionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/CreateUserTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/DateAndTimeFunctionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/DateAndTimeValuesTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/DeleteSyntaxTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/DropTableTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/DropUserTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/EncryptionAndCompressionFunctionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/FullTextSearchesWithQueryExpansionTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/HexadecimalValuesTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/InformationFunctionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/InsertSyntaxTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/Kill_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/LOAD_XML_Syntax_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/LoadDataInFileSyntaxTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/LogicalOperatorsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MathematicalFunctionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MiscellaneousFunctionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableAddIndex_1.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableAddPrimaryKey.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableDropIndex_0.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableDropPrimaryKey.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableEnableKeys.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest10.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest11.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest12.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest13.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest14.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest2.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest3.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest4.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest5.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest6.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest7.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableTest9.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest1.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest12.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest3.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest4.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest5.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest6.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest7.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest8.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest9.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateViewTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlDeleteTest_0.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlDeleteTest_1.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlDeleteTest_2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlDescribteTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlDropTableTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlDropViewTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlFormatTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlInsertTest_0.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlInsertTest_1.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlInsertTest_2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlInsertTest_3.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlInsertTest_4.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlInsertTest_5.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlInsertTest_6.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.SQLUtils;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlParameterizedOutputVisitorTest2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_1.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_3.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_4.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_5.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_6.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_8.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_BinaryConcat.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_crossjoin.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/REPLACE_Syntax_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/RegularExpressionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/Reset_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/SELECT_Syntax_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/SHOW_COLUMNS_Syntax_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/SHOW_DATABASES_Syntax_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/SHOW_TABLES_Syntax_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/SHOW_WARNINGS_Syntax_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/START_TRANSACTION_Test.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/StringComparisonFunctionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/StringFunctionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/StringTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/XMLFunctionsTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/parser/MySqlParserResourceTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.io.Reader;
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlResourceTest.java
Patch:
@@ -20,7 +20,7 @@
 import java.io.Reader;
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlSchemaStatVisitorTest3.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlSchemaStatVisitorTest4.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlSchemaStatVisitorTest5.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlSchemaStatVisitorTest_Delete.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlSchemaStatVisitorTest_Subquery.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlSchemaStatVisitorTest_Subquery2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlSchemaStatVisitorTest_Update.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/CursorTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.oracle;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.statement.SQLSelectStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/LargeOrTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.alibaba.druid.bvt.sql.oracle;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 import junit.framework.TestCase;
 
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterIndexTest1.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterIndexTest2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterIndexTest3.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterIndexTest4.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterProcedureTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterProcedureTest2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterSessionTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterSynonymTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest10.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest11.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest12.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest13.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest2.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest3.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest4.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest5.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest6.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest7.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest9.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTestRename.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTablespaceTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTriggerTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.OracleTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -84,8 +84,8 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
     public final static boolean                        DEFAULT_TEST_ON_BORROW                    = false;
     public final static boolean                        DEFAULT_TEST_ON_RETURN                    = false;
     public final static boolean                        DEFAULT_WHILE_IDLE                        = true;
-    public static final long                           DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = 1000L;
-    public static final long                           DEFAULT_TIME_BETWEEN_CONNECT_ERROR_MILLIS = 30 * 1000;
+    public static final long                           DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = 60 * 1000L;
+    public static final long                           DEFAULT_TIME_BETWEEN_CONNECT_ERROR_MILLIS = 300 * 1000;
     public static final int                            DEFAULT_NUM_TESTS_PER_EVICTION_RUN        = 3;
 
     /**

File: src/test/java/com/alibaba/druid/bvt/bug/Bug_for_JeffYin.java
Patch:
@@ -20,14 +20,15 @@
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import com.alibaba.druid.util.IOUtils;
 import com.alibaba.druid.util.JdbcUtils;
 
 public class Bug_for_JeffYin extends TestCase {
 
     public void test_0() throws Exception {
         String url = "jdbc:sqlserver://localhost:1433;";
         String driverClassName = JdbcUtils.getDriverClassName(url);
-        Class<?> driverClass = JdbcUtils.loadDriverClass(driverClassName);
+        Class<?> driverClass = IOUtils.loadClass(driverClassName);
         Assert.assertNotNull(driverClass);
         
         Driver driver = (Driver) driverClass.newInstance();

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -20,7 +20,6 @@
 import java.io.FileNotFoundException;
 import java.io.InputStream;
 import java.net.URL;
-import java.net.UnknownHostException;
 import java.security.PublicKey;
 import java.sql.SQLException;
 import java.util.Properties;

File: src/main/java/com/alibaba/druid/sql/ast/SQLObjectImpl.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import java.util.Map;
 
-import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 public abstract class SQLObjectImpl implements SQLObject, Serializable {
@@ -71,7 +70,9 @@ public void output(StringBuffer buf) {
     }
 
     public String toString() {
-        return SQLUtils.toSQLString(this);
+        StringBuffer buf = new StringBuffer();
+        output(buf);
+        return buf.toString();
     }
 
     public SQLObject getParent() {

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableAddIndex_0.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableDropIndex_1.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.alibaba.druid.bvt.sql.mysql;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -548,8 +548,6 @@ public void init() throws SQLException {
                 this.driverClass = driverClass.trim();
             }
 
-            validationQueryCheck();
-
             if (this.jdbcUrl != null) {
                 this.jdbcUrl = this.jdbcUrl.trim();
                 initFromWrapDriverUrl();
@@ -581,6 +579,7 @@ public void init() throws SQLException {
 
             initExceptionSorter();
             initValidConnectionChecker();
+            validationQueryCheck();
 
             if (isUseGloalDataSourceStat()) {
                 dataSourceStat = JdbcDataSourceStat.getGlobal();

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest93.java
Patch:
@@ -34,7 +34,7 @@ public class MySqlWallTest93 extends TestCase {
     public void test_false() throws Exception {
         WallProvider provider = new MySqlWallProvider();
         
-        Assert.assertFalse(provider.checkValid(//
+        Assert.assertTrue(provider.checkValid(//
         "desc tablename"));
 
         Assert.assertEquals(0, provider.getTableStats().size());

File: src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -59,7 +59,7 @@ public class WallFilter extends FilterAdapter implements WallFilterMBean {
     public final static String ATTR_SQL_STAT  = "wall.sqlStat";
 
     @Override
-    public void init(DataSourceProxy dataSource) {
+    public synchronized void init(DataSourceProxy dataSource) {
         if (this.dbType == null || this.dbType.trim().length() == 0) {
             if (dataSource != null && dataSource.getDbType() != null) {
                 this.dbType = dataSource.getDbType();

File: src/test/java/com/alibaba/druid/bvt/sql/PagerUtilsTest_Limit_db2_0.java
Patch:
@@ -21,7 +21,7 @@ public void test_mysql_1() throws Exception {
         String sql = "select * from t";
         String result = PagerUtils.limit(sql, JdbcConstants.DB2, 10, 10);
         Assert.assertEquals("SELECT *"//
-                            + "\nFROM (SELECT *, ROW_NUMBER() AS ROWNUM"//
+                            + "\nFROM (SELECT *, ROW_NUMBER() OVER () AS ROWNUM"//
                             + "\n\tFROM t"//
                             + "\n\t) XX"//
                             + "\nWHERE ROWNUM > 10"//
@@ -32,7 +32,7 @@ public void test_mysql_2() throws Exception {
         String sql = "select * from t where age > 100";
         String result = PagerUtils.limit(sql, JdbcConstants.DB2, 20, 10);
         Assert.assertEquals("SELECT *"//
-                            + "\nFROM (SELECT *, ROW_NUMBER() AS ROWNUM"//
+                            + "\nFROM (SELECT *, ROW_NUMBER() OVER () AS ROWNUM"//
                             + "\n\tFROM t"//
                             + "\n\tWHERE age > 100"//
                             + "\n\t) XX"//

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -292,7 +292,7 @@ public SQLExpr primary() {
 
                     return primaryRest(sqlExpr);
                 } else {
-                    SQLExpr restExpr = expr();
+                    SQLExpr restExpr = equality();
                     sqlExpr = new SQLNotExpr(restExpr);
                 }
                 break;

File: src/main/java/com/alibaba/druid/sql/dialect/db2/parser/DB2SelectParser.java
Patch:
@@ -19,7 +19,6 @@
 import com.alibaba.druid.sql.ast.SQLSetQuantifier;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQuery;
 import com.alibaba.druid.sql.dialect.db2.ast.stmt.DB2SelectQueryBlock;
-import com.alibaba.druid.sql.parser.ParserException;
 import com.alibaba.druid.sql.parser.SQLExprParser;
 import com.alibaba.druid.sql.parser.SQLSelectParser;
 import com.alibaba.druid.sql.parser.Token;

File: src/test/java/com/alibaba/druid/bvt/sql/db2/DB2SelectTest_1.java
Patch:
@@ -59,7 +59,8 @@ public void test_0() throws Exception {
 
         String output = SQLUtils.toSQLString(stmt, JdbcConstants.DB2);
         Assert.assertEquals("SELECT *" //
-                            + "\nFROM DSN81010.EMP", //
+                            + "\nFROM DSN81010.EMP"
+                            + "\nFETCH FIRST 5 ROWS ONLY", //
                             output);
     }
 }

File: src/test/java/com/alibaba/druid/bvt/stat/DruidStatServiceTest.java
Patch:
@@ -60,7 +60,7 @@ protected void setUp() throws Exception {
         dataSource = new DruidDataSource();
 
         dataSource.setUrl("jdbc:mock:xxx");
-        dataSource.setFilters("stat");
+        dataSource.setFilters("mergeStat");
         dataSource.setTestOnBorrow(false);
 
         dataSource.init();

File: src/main/java/com/alibaba/druid/util/StringUtils.java
Patch:
@@ -100,6 +100,9 @@ public static boolean isEmpty(String value) {
     }
     
     public static int lowerHashCode(String text) {
+        if (text == null) {
+            return 0;
+        }
 //        return text.toLowerCase().hashCode();
         int h = 0;
         for (int i = 0; i < text.length(); ++i) {

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -675,6 +675,9 @@ public long getMinEvictableIdleTimeMillis() {
     }
 
     public void setMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
+        if (minEvictableIdleTimeMillis < 1000 * 30) {
+            LOG.error("minEvictableIdleTimeMillis should be greater than 30000");
+        }
         this.minEvictableIdleTimeMillis = minEvictableIdleTimeMillis;
     }
 

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStat.java
Patch:
@@ -385,6 +385,7 @@ public JdbcSqlStatValue getValue(boolean reset) {
 
         val.setDbType(dbType);
         val.setSql(sql);
+        val.setId(id);
         val.setExecuteLastStartTime(executeLastStartTime);
         executeLastStartTime = 0;
 

File: src/test/java/com/alibaba/druid/bvt/filter/wall/MySqlWallTest92.java
Patch:
@@ -34,7 +34,7 @@ public class MySqlWallTest92 extends TestCase {
     public void test_false() throws Exception {
         WallProvider provider = new MySqlWallProvider();
         
-        Assert.assertTrue(provider.checkValid(//
+        Assert.assertFalse(provider.checkValid(//
         "SELECT * FROM T WHERE FID = 40 OR EXTRACTVALUE(4484,CONCAT(0x5c,0x7163646371,(SELECT (CASE WHEN (4484=4484) THEN 1 ELSE 0 END)),0x7165767271))"));
 
         Assert.assertEquals(1, provider.getTableStats().size());

File: src/test/java/com/alibaba/druid/bvt/pool/vendor/MySqlExceptionSorterTest_oceanbase.java
Patch:
@@ -12,7 +12,8 @@
 public class MySqlExceptionSorterTest_oceanbase extends TestCase {
     public void test_true() throws Exception {
         MySqlExceptionSorter sorter = new MySqlExceptionSorter();
-        Assert.assertTrue(sorter.isExceptionFatal(new SQLException("", "", -9000)));
+        SQLException exception = new SQLException("", "", -9000);
+        Assert.assertTrue(sorter.isExceptionFatal(exception));
     }
     
     public void test_true_1() throws Exception {

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -226,6 +226,7 @@ public SQLExpr primary() {
             case COLUMN:
             case IF:
             case END:
+            case COMMENT:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -691,7 +691,7 @@ public static String makeInsertToTableSql(String tableName, Collection<String> n
      * @param  pattern if pattern is null,it will be set {%Y-%m-%d %H:%i:%s} as mysql default value and set {yyyy-mm-dd hh24:mi:ss} as oracle default value
      * @param  dbType  {@link JdbcConstants} if dbType is null ,it will be set the mysql as a default value
      */
-    public static String formatColumnToDateType(String columnName,String tableAlias,String pattern,String dbType){    	
+    public static String formatStrToDateColumn(String columnName,String tableAlias,String pattern,String dbType){    	
      	StringBuilder sql = new StringBuilder();    	
      	if(!StringUtils.isEmpty(columnName)){    		
          	if(StringUtils.isEmpty(dbType))    dbType = JdbcConstants.MYSQL;   

File: src/test/java/com/alibaba/druid/bvt/utils/JdbcUtilsTest.java
Patch:
@@ -82,10 +82,10 @@ public void test_curd() throws Exception {
     }
     
     public void test_formatColumnToDateType(){
-    	String colunExp = JdbcUtils.formatColumnToDateType("gmt_create","oo","",JdbcConstants.ORACLE);
+    	String colunExp = JdbcUtils.formatStrToDateColumn("gmt_create","oo","",JdbcConstants.ORACLE);
 		Assert.assertEquals("TO_DATE(oo.gmt_create,'yyyy-mm-dd hh24:mi:ss')", colunExp);
 		
-		String colunExp2 = JdbcUtils.formatColumnToDateType("gmt_create","oo","",JdbcConstants.MYSQL);
+		String colunExp2 = JdbcUtils.formatStrToDateColumn("gmt_create","oo","",JdbcConstants.MYSQL);
 		Assert.assertEquals("STR_TO_DATE(oo.gmt_create,'%Y-%m-%d %H:%i:%s')", colunExp2);	
     }
 }

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1032,6 +1032,8 @@ public void handleConnectionException(DruidPooledConnection pooledConnection, Th
                 this.discardConnection(holder.getConnection());
                 holder.setDiscard(true);
                 pooledConnection.disable(t);
+                
+                LOG.error("discard connection", sqlEx);
             }
 
             throw sqlEx;

File: src/main/java/com/alibaba/druid/sql/visitor/functions/Isnull.java
Patch:
@@ -40,6 +40,8 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
         Object itemValue = condition.getAttributes().get(EVAL_VALUE);
         if (itemValue == EVAL_VALUE_NULL) {
             return Boolean.TRUE;
+        } else if (itemValue == null) {
+            return null;
         } else {
             return Boolean.FALSE;
         }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -1223,7 +1223,7 @@ public static boolean gt(Object a, Object b) {
         }
 
         if (a instanceof String || b instanceof String) {
-            return ((String) a).compareTo((String) b) > 0;
+            return castToString(a).compareTo(castToString(b)) > 0;
         }
 
         if (a instanceof BigDecimal || b instanceof BigDecimal) {

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -796,7 +796,7 @@ public static boolean visit(SQLEvalVisitor visitor, SQLBinaryOpExpr x) {
         if (wallConditionContext != null) {
             wallConditionContext.setConstArithmetic(true);
         }
-        
+
         if (leftValue == null || rightValue == null) {
             return false;
         }
@@ -1290,7 +1290,7 @@ public static boolean lt(Object a, Object b) {
         }
 
         if (a instanceof String || b instanceof String) {
-            return ((String) a).compareTo((String) b) < 0;
+            return (castToString(a)).compareTo(castToString(b)) < 0;
         }
 
         if (a instanceof BigDecimal || b instanceof BigDecimal) {

File: src/main/java/com/alibaba/druid/sql/visitor/functions/Concat.java
Patch:
@@ -33,7 +33,7 @@ public Object eval(SQLEvalVisitor visitor, SQLMethodInvokeExpr x) {
 
             Object itemValue = item.getAttributes().get(EVAL_VALUE);
             if (itemValue == null) {
-                continue;
+                return null;
             }
             buf.append(itemValue.toString());
         }

File: src/main/java/com/alibaba/druid/Constants.java
Patch:
@@ -17,5 +17,7 @@
 
 public interface Constants {
 
-    public final static String DRUID_STAT_SQL_MAX_SIZE = "druid.stat.sql.MaxSize";
+    public final static String DRUID_STAT_SQL_MAX_SIZE             = "druid.stat.sql.MaxSize";
+
+    public final static String DRUID_TIME_BETWEEN_LOG_STATS_MILLIS = "druid.timeBetweenLogStatsMillis";
 }

File: src/main/java/com/alibaba/druid/Constants.java
Patch:
@@ -17,5 +17,7 @@
 
 public interface Constants {
 
-    public final static String DRUID_STAT_SQL_MAX_SIZE = "druid.stat.sql.MaxSize";
+    public final static String DRUID_STAT_SQL_MAX_SIZE             = "druid.stat.sql.MaxSize";
+
+    public final static String DRUID_TIME_BETWEEN_LOG_STATS_MILLIS = "druid.timeBetweenLogStatsMillis";
 }

File: src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -587,6 +587,7 @@ public String check(String sql) throws SQLException {
             }
         }
 
+            //TODO
         return sql;
     }
 

File: src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -585,11 +585,12 @@ public static boolean ispPivileged() {
     }
 
     public static <T> T doPrivileged(PrivilegedAction<T> action) {
+        final Boolean original = privileged.get();
         privileged.set(Boolean.TRUE);
         try {
             return action.run();
         } finally {
-            privileged.set(null);
+            privileged.set(original);
         }
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest5.java
Patch:
@@ -9,7 +9,7 @@
 import org.junit.Assert;
 
 import com.alibaba.druid.pool.DruidDataSource;
-import com.alibaba.druid.pool.ValidConnectionChecker;
+import com.alibaba.druid.pool.ValidConnectionCheckerAdapter;
 
 public class DruidDataSourceTest5 extends TestCase {
 
@@ -25,7 +25,7 @@ protected void setUp() throws Exception {
         dataSource.setTestOnBorrow(false);
         dataSource.setInitialSize(1);
 
-        dataSource.setValidConnectionChecker(new ValidConnectionChecker() {
+        dataSource.setValidConnectionChecker(new ValidConnectionCheckerAdapter() {
 
             @Override
             public boolean isValidConnection(Connection c, String query, int validationQueryTimeout) {

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_testOnBorrowFailed.java
Patch:
@@ -10,7 +10,7 @@
 import org.junit.Assert;
 
 import com.alibaba.druid.pool.DruidDataSource;
-import com.alibaba.druid.pool.ValidConnectionChecker;
+import com.alibaba.druid.pool.ValidConnectionCheckerAdapter;
 
 /**
  * 这个场景测试defaultAutoCommit
@@ -28,7 +28,7 @@ protected void setUp() throws Exception {
         dataSource.setUrl("jdbc:mock:xxx");
         dataSource.setTestOnBorrow(true);
         dataSource.setValidationQuery("select 'x'");
-        dataSource.setValidConnectionChecker(new ValidConnectionChecker() {
+        dataSource.setValidConnectionChecker(new ValidConnectionCheckerAdapter() {
 
             @Override
             public boolean isValidConnection(Connection c, String query, int validationQueryTimeout) {

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_testOnWhileIdleFailed.java
Patch:
@@ -10,7 +10,7 @@
 import org.junit.Assert;
 
 import com.alibaba.druid.pool.DruidDataSource;
-import com.alibaba.druid.pool.ValidConnectionChecker;
+import com.alibaba.druid.pool.ValidConnectionCheckerAdapter;
 
 /**
  * 这个场景测试defaultAutoCommit
@@ -30,7 +30,7 @@ protected void setUp() throws Exception {
         dataSource.setTestWhileIdle(true);
         dataSource.setTimeBetweenEvictionRunsMillis(20);
         dataSource.setValidationQuery("select 'x'");
-        dataSource.setValidConnectionChecker(new ValidConnectionChecker() {
+        dataSource.setValidConnectionChecker(new ValidConnectionCheckerAdapter() {
 
             @Override
             public boolean isValidConnection(Connection c, String query, int validationQueryTimeout) {

File: src/main/java/com/alibaba/druid/pool/vendor/OracleExceptionSorter.java
Patch:
@@ -113,9 +113,11 @@ public boolean isExceptionFatal(final SQLException e) {
             case 17024: // No data read
             case 17089: // internal error
             case 17409: // invalid buffer length
-            case 17401: //
+            case 17401: // Protocol violation
             case 17410: // No more data to read from socket
             case 17416: // FATAl
+            case 17438: // Internal - Unexpected value
+            case 17442: // Refcursor value is invalid
 
             case 25407: // connection terminated
             case 25408: // can not safely replay call

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallHavingTest.java
Patch:
@@ -27,7 +27,7 @@
  *
  */
 public class WallHavingTest extends TestCase {
-    private String sql = "SELECT F1, COUNT(*) FROM T GROUP BY F1 HAVING 1 = 1";
+    private String sql = "SELECT F1, COUNT(*) FROM T GROUP BY F1 HAVING COUNT(*) OR 1 = 1";
 
     public void testMySql() throws Exception {
         Assert.assertFalse(WallUtils.isValidateMySql(sql));

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallSelectWhereTest0.java
Patch:
@@ -30,10 +30,10 @@ public class WallSelectWhereTest0 extends TestCase {
     private String sql = "SELECT F1, F2 WHERE 1 = 1 OR F1 = ?";
 
     public void testMySql() throws Exception {
-        Assert.assertFalse(WallUtils.isValidateMySql(sql));
+        Assert.assertTrue(WallUtils.isValidateMySql(sql));
     }
     
     public void testORACLE() throws Exception {
-        Assert.assertFalse(WallUtils.isValidateOracle(sql));
+        Assert.assertTrue(WallUtils.isValidateOracle(sql));
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlShowTest_table.java
Patch:
@@ -21,9 +21,6 @@
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;
-import com.alibaba.druid.sql.ast.statement.SQLSelect;
-import com.alibaba.druid.sql.ast.statement.SQLSelectStatement;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlSchemaStatVisitor;
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlUpdateTest_0.java
Patch:
@@ -17,7 +17,7 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlUpdateTest_1.java
Patch:
@@ -17,14 +17,13 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
+import org.junit.Assert;
 
 import com.alibaba.druid.sql.MysqlTest;
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlSchemaStatVisitor;
 import com.alibaba.druid.stat.TableStat;
-import com.alibaba.druid.stat.TableStat.Column;
 
 public class MySqlUpdateTest_1 extends MysqlTest {
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/NumberTest.java
Patch:
@@ -17,9 +17,10 @@
 
 import java.util.List;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.sql.ast.SQLStatement;
 import com.alibaba.druid.sql.dialect.mysql.parser.MySqlStatementParser;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlOutputVisitor;

File: src/test/java/com/alibaba/druid/stat/JdbcSqlStatTest.java
Patch:
@@ -13,7 +13,7 @@ public void test_0() throws Exception {
         gc();
         long memoryStart = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();
 
-        final int COUNT = 1024 * 1024;
+        final int COUNT = 1000 * 5;
         JdbcSqlStat[] items = new JdbcSqlStat[COUNT];
         for (int i = 0; i < COUNT; ++i) {
             items[i] = new JdbcSqlStat("");

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -224,6 +224,7 @@ public SQLExpr primary() {
             case SCHEMA:
             case COLUMN:
             case IF:
+            case END:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/support/logging/LogFactory.java
Patch:
@@ -39,7 +39,6 @@ public class LogFactory {
                 throw new IllegalStateException(e.getMessage(), e);
             }
         }
-        tryImplementation("java.lang.Object", "com.alibaba.druid.support.logging.NoLoggingImpl");
     }
 
     @SuppressWarnings("unchecked")

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait2.java
Patch:
@@ -48,7 +48,7 @@ public void run() {
                     startLatch.countDown();
                     try {
                         Connection conn = dataSource.getConnection();
-                        Thread.sleep(1);
+                        Thread.sleep(2);
                         conn.close();
                     } catch (Exception e) {
                         // e.printStackTrace();

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -224,6 +224,7 @@ public SQLExpr primary() {
             case SCHEMA:
             case COLUMN:
             case IF:
+            case END:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait2.java
Patch:
@@ -48,7 +48,7 @@ public void run() {
                     startLatch.countDown();
                     try {
                         Connection conn = dataSource.getConnection();
-                        Thread.sleep(1);
+                        Thread.sleep(2);
                         conn.close();
                     } catch (Exception e) {
                         // e.printStackTrace();

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1412,8 +1412,8 @@ public DruidDataSourceStatValue getStatValueAndReset() {
         value.commitCount = commitCount.getAndSet(0);
         value.rollbackCount = rollbackCount.getAndSet(0);
 
-        value.PSCacheHitCount = cachedPreparedStatementHitCount.getAndSet(0);
-        value.PSCacheMissCount = cachedPreparedStatementMissCount.getAndSet(0);
+        value.pstmtCacheHitCount = cachedPreparedStatementHitCount.getAndSet(0);
+        value.pstmtCacheMissCount = cachedPreparedStatementMissCount.getAndSet(0);
 
         value.startTransactionCount = startTransactionCount.getAndSet(0);
         value.transactionHistogram = this.getTransactionHistogram().toArrayAndReset();

File: src/test/java/com/alibaba/druid/bvt/pool/TestOnBorrowFileAndNameTest.java
Patch:
@@ -5,9 +5,10 @@
 import java.sql.ResultSet;
 import java.util.Iterator;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.stat.DruidDataSourceStatManager;
 import com.alibaba.druid.stat.JdbcSqlStat;
@@ -24,6 +25,7 @@ protected void setUp() throws Exception {
         dataSource.setName("com.alibaba.dragoon.monitor");
         dataSource.setMinIdle(0);
         dataSource.setPoolPreparedStatements(false);
+        dataSource.setTestOnBorrow(true);
         dataSource.setValidationQuery("SELECT 1");
         dataSource.setFilters("stat");
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprTableSource.java
Patch:
@@ -29,7 +29,7 @@ public SQLExprTableSource(){
     }
 
     public SQLExprTableSource(SQLExpr expr){
-        this.expr = expr;
+        this.setExpr(expr);
     }
 
     public SQLExpr getExpr() {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -874,7 +874,7 @@ public boolean visit(MySqlInsertStatement x) {
 
         print("INTO ");
 
-        x.getTableName().accept(this);
+        x.getTableSource().accept(this);
 
         if (x.getColumns().size() > 0) {
             incrementIndent();

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlParameterizedOutputVisitor.java
Patch:
@@ -152,7 +152,7 @@ public boolean visit(MySqlInsertStatement x) {
 
         print("INTO ");
 
-        x.getTableName().accept(this);
+        x.getTableSource().accept(this);
 
         if (x.getColumns().size() > 0) {
             print(" (");

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -1627,7 +1627,7 @@ public void endVisit(OracleInsertStatement x) {
     public boolean visit(InsertIntoClause x) {
         print("INTO ");
 
-        x.getTableName().accept(this);
+        x.getTableSource().accept(this);
 
         if (x.getColumns().size() > 0) {
             incrementIndent();

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGOutputVisitor.java
Patch:
@@ -329,7 +329,7 @@ public boolean visit(PGInsertStatement x) {
 
         print("INSERT INTO ");
 
-        x.getTableName().accept(this);
+        x.getTableSource().accept(this);
 
         if (x.getColumns().size() > 0) {
             incrementIndent();

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/visitor/SQLServerOutputVisitor.java
Patch:
@@ -124,7 +124,7 @@ public void endVisit(SQLServerObjectReferenceExpr x) {
     public boolean visit(SQLServerInsertStatement x) {
         print("INSERT INTO ");
 
-        x.getTableName().accept(this);
+        x.getTableSource().accept(this);
 
         if (x.getColumns().size() > 0) {
             incrementIndent();

File: src/main/java/com/alibaba/druid/sql/visitor/ParameterizedOutputVisitorUtils.java
Patch:
@@ -39,11 +39,11 @@ public class ParameterizedOutputVisitorUtils {
     public static String parameterize(String sql, String dbType) {
         SQLStatementParser parser = SQLParserUtils.createSQLStatementParser(sql, dbType);
         List<SQLStatement> statementList = parser.parseStatementList();
-        SQLStatement statemen = statementList.get(0);
+        SQLStatement stmt = statementList.get(0);
 
         StringBuilder out = new StringBuilder();
         SQLASTOutputVisitor visitor = createParameterizedOutputVisitor(out, dbType);
-        statemen.accept(visitor);
+        stmt.accept(visitor);
 
         return out.toString();
     }

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -842,7 +842,7 @@ public boolean visit(SQLCurrentOfCursorExpr x) {
     public boolean visit(SQLInsertStatement x) {
         print("INSERT INTO ");
 
-        x.getTableName().accept(this);
+        x.getTableSource().accept(this);
 
         if (x.getColumns().size() > 0) {
             incrementIndent();

File: src/test/java/com/alibaba/druid/sql/parser/SQLMergeTest.java
Patch:
@@ -128,7 +128,7 @@ public boolean visit(MySqlInsertStatement x) {
 
                 print("INTO ");
 
-                x.getTableName().accept(this);
+                x.getTableSource().accept(this);
 
                 if (x.getColumns().size() > 0) {
                     print(" (");

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -45,8 +45,6 @@
 import javax.sql.ConnectionPoolDataSource;
 import javax.sql.PooledConnection;
 
-import org.h2.util.StringUtils;
-
 import com.alibaba.druid.TransactionTimeoutException;
 import com.alibaba.druid.VERSION;
 import com.alibaba.druid.filter.AutoLoad;
@@ -80,6 +78,7 @@
 import com.alibaba.druid.util.JMXUtils;
 import com.alibaba.druid.util.JdbcConstants;
 import com.alibaba.druid.util.JdbcUtils;
+import com.alibaba.druid.util.StringUtils;
 import com.alibaba.druid.wall.WallFilter;
 
 /**

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -248,8 +248,6 @@ public void setUseLocalSessionState(boolean useLocalSessionState) {
         this.useLocalSessionState = useLocalSessionState;
     }
 
-
-
     public boolean isOracle() {
         return isOracle;
     }

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
 
 import javax.management.JMException;
 import javax.management.ObjectName;
@@ -383,6 +384,7 @@ public void init() throws SQLException {
             return;
         }
 
+        final ReentrantLock lock = this.lock;
         try {
             lock.lockInterruptibly();
         } catch (InterruptedException e) {

File: src/test/java/com/alibaba/druid/filter/config/ConfigFileGenerator.java
Patch:
@@ -29,6 +29,7 @@ public void setUp() {
             filePath = file.getAbsolutePath();
 
             out = new PrintWriter(new FileWriter(file));
+            out.println(DruidDataSourceFactory.PROP_MAXWAIT + "=1000");
             out.println(DruidDataSourceFactory.PROP_USERNAME + "=test1");
             out.println(DruidDataSourceFactory.PROP_PASSWORD + "=OJfUm6WCHi7EuXqE6aEc+Po2xFrAGBeSNy8O2jWhV2FTG8/5kbRRr2rjNKhptlevm/03Y0048P7h88gdUOXAYg==");
             out.println(DruidDataSourceFactory.PROP_URL + "=jdbc:oracle:thin:@");

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -193,7 +193,9 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
                 Profiler.release(nanos);
                 
                 Map<ProfileEntryKey, ProfileEntryReqStat> requestStatsMap = Profiler.getStatsMap();
-                uriStat.getProfiletat().record(requestStatsMap);
+                if (uriStat != null) {
+                    uriStat.getProfiletat().record(requestStatsMap);
+                }
                 Profiler.removeLocal();
             }
         }

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -473,13 +473,13 @@ public void init() throws SQLException {
 
             if (isUseGloalDataSourceStat()) {
                 dataSourceStat = JdbcDataSourceStat.getGlobal();
-                if (dataSourceStat.getDbType() == null) {
-                    dataSourceStat.setDbType(this.getDbType());
-                }
                 if (dataSourceStat == null) {
                     dataSourceStat = new JdbcDataSourceStat("Global", "Global", this.dbType);
                     JdbcDataSourceStat.setGlobal(dataSourceStat);
                 }
+                if (dataSourceStat.getDbType() == null) {
+                    dataSourceStat.setDbType(this.getDbType());
+                }
             } else {
                 dataSourceStat = new JdbcDataSourceStat(this.name, this.jdbcUrl, this.dbType);
             }

File: src/main/java/com/alibaba/druid/stat/JdbcDataSourceStat.java
Patch:
@@ -71,8 +71,8 @@ public class JdbcDataSourceStat implements JdbcDataSourceStatMBean {
     private final AtomicLong                                    blobOpenCount           = new AtomicLong();
 
     private static JdbcDataSourceStat                           global                  = new JdbcDataSourceStat(
-                                                                                                                 "global",
-                                                                                                                 "global");
+                                                                                                                 "Global",
+                                                                                                                 "Global");
 
     public static JdbcDataSourceStat getGlobal() {
         return global;

File: src/test/java/com/alibaba/druid/bvt/proxy/filter/GlobalStatTest0.java
Patch:
@@ -77,6 +77,7 @@ public void test_execute() throws Exception {
         String json = JSONUtils.toJSONString(JdbcStatManager.getInstance().getSqlList());
         List<Map<String, Object>> sqlList = (List<Map<String, Object>>) JSONUtils.parse(json);
         Map<String, Object> sqlInfo = sqlList.get(0);
+        Assert.assertNotNull(sqlInfo);
         Assert.assertEquals(JdbcConstants.MOCK, sqlInfo.get("DbType"));
         Assert.assertEquals(2, sqlInfo.get("ExecuteCount"));
         Assert.assertEquals(2, sqlInfo.get("FetchRowCount"));

File: src/main/java/com/alibaba/druid/support/logging/Resources.java
Patch:
@@ -263,7 +263,7 @@ public static Properties getUrlAsProperties(String urlString) throws IOException
         in.close();
         return props;
     }
-
+    
     /**
      * Loads a class
      * 

File: src/main/java/com/alibaba/druid/support/logging/Resources.java
Patch:
@@ -263,7 +263,7 @@ public static Properties getUrlAsProperties(String urlString) throws IOException
         in.close();
         return props;
     }
-
+    
     /**
      * Loads a class
      * 

File: src/main/java/com/alibaba/druid/mock/MockStatement.java
Patch:
@@ -41,8 +41,8 @@ protected void checkOpen() throws SQLException {
             throw new SQLException();
         }
 
-        if (this.mockConnection != null && this.mockConnection.isClosed()) {
-            throw new MockConnectionClosedException();
+        if (this.mockConnection != null) {
+            mockConnection.checkState();
         }
     }
 

File: src/main/java/com/alibaba/druid/pool/GetConnectionTimeoutException.java
Patch:
@@ -20,7 +20,7 @@
 public class GetConnectionTimeoutException extends SQLException {
 
     private static final long serialVersionUID = 1L;
-
+    
     public GetConnectionTimeoutException(){
         super();
     }

File: src/test/java/com/alibaba/druid/bvt/filter/wall/CountTest.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.alibaba.druid.bvt.filter.wall;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.wall.spi.WallVisitorUtils;
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setCatalog.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
-import java.sql.ResultSet;
 import java.sql.SQLException;
 
 import junit.framework.TestCase;

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setReadOnly.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
-import java.sql.ResultSet;
 import java.sql.SQLException;
 
 import junit.framework.TestCase;

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setSavepoint.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
-import java.sql.ResultSet;
 import java.sql.SQLException;
 
 import junit.framework.TestCase;

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setSavepointWithName.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.sql.Connection;
 import java.sql.PreparedStatement;
-import java.sql.ResultSet;
 import java.sql.SQLException;
 
 import junit.framework.TestCase;

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setSavepointWithName.java
Patch:
@@ -34,7 +34,7 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setSavepointWithName.java
Patch:
@@ -34,7 +34,7 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest.java
Patch:
@@ -32,7 +32,8 @@ protected void setUp() throws Exception {
         dataSource.setFilters("log4j");
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_1.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_2.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_3.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_commit.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_rollback.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setCatalog.java
Patch:
@@ -34,7 +34,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setIsolationLevel.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setReadOnly.java
Patch:
@@ -34,7 +34,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setSavepoint.java
Patch:
@@ -34,7 +34,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest.java
Patch:
@@ -32,7 +32,8 @@ protected void setUp() throws Exception {
         dataSource.setFilters("log4j");
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_1.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_2.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_3.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeStmt.java
Patch:
@@ -33,6 +33,7 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
+    @Override
     protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
         Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_commit.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_rollback.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setCatalog.java
Patch:
@@ -34,7 +34,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setIsolationLevel.java
Patch:
@@ -33,7 +33,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setReadOnly.java
Patch:
@@ -34,7 +34,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setSavepoint.java
Patch:
@@ -34,7 +34,8 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    @Override
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeStmt.java
Patch:
@@ -11,6 +11,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.DruidDataSourceStatManager;
 import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
@@ -32,8 +33,9 @@ protected void setUp() throws Exception {
         dataSource.setMaxOpenPreparedStatements(100);
     }
 
-    protected void tearDowN() throws Exception {
+    protected void tearDown() throws Exception {
         JdbcUtils.close(dataSource);
+        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
     }
 
     public void test_connect() throws Exception {

File: src/main/java/com/alibaba/druid/stat/JdbcStatManager.java
Patch:
@@ -297,7 +297,7 @@ public TabularData getSqlList() throws JMException {
         TabularData data = new TabularDataSupport(tabularType);
 
         JdbcDataSourceStat globalStat = JdbcDataSourceStat.getGlobal();
-        {
+        if (globalStat != null) {
             Map<String, JdbcSqlStat> statMap = globalStat.getSqlStatMap();
             for (Map.Entry<String, JdbcSqlStat> entry : statMap.entrySet()) {
                 if (entry.getValue().getExecuteCount() == 0 && entry.getValue().getRunningCount() == 0) {
@@ -335,7 +335,7 @@ public TabularData getSqlList() throws JMException {
             if (druidDataSourceStat == globalStat) {
                 continue;
             }
-            
+
             Map<String, JdbcSqlStat> statMap = druidDataSourceStat.getSqlStatMap();
             for (Map.Entry<String, JdbcSqlStat> entry : statMap.entrySet()) {
                 if (entry.getValue().getExecuteCount() == 0 && entry.getValue().getRunningCount() == 0) {

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait2.java
Patch:
@@ -5,9 +5,10 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.pool.DruidDataSource;
 
 public class DruidDataSourceTest_notEmptyWait2 extends TestCase {

File: src/test/java/com/alibaba/druid/bvt/pool/ExceptionSorterTest.java
Patch:
@@ -10,6 +10,7 @@
 import com.alibaba.druid.mock.MockConnection;
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.vendor.MockExceptionSorter;
+import com.alibaba.druid.util.JdbcUtils;
 
 public class ExceptionSorterTest extends TestCase {
 
@@ -27,7 +28,7 @@ protected void setUp() throws Exception {
     }
 
     protected void tearDown() throws Exception {
-        dataSource.close();
+        JdbcUtils.close(dataSource);
     }
 
     public void test_exceptionSorter() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest.java
Patch:
@@ -10,6 +10,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -18,6 +19,8 @@ public class OracleExceptionSorterTest extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_closeConn extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_1.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_closeConn_1 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_2.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_closeConn_2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_3.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_closeConn_3 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeStmt.java
Patch:
@@ -11,6 +11,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -19,6 +20,8 @@ public class OracleExceptionSorterTest_closeStmt extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_commit.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_commit extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_rollback.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_rollback extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setCatalog.java
Patch:
@@ -13,6 +13,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -21,6 +22,8 @@ public class OracleExceptionSorterTest_setCatalog extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setIsolationLevel.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_setIsolationLevel extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setReadOnly.java
Patch:
@@ -13,6 +13,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -21,6 +22,8 @@ public class OracleExceptionSorterTest_setReadOnly extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setSavepoint.java
Patch:
@@ -13,6 +13,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -21,6 +22,8 @@ public class OracleExceptionSorterTest_setSavepoint extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setSavepointWithName.java
Patch:
@@ -13,6 +13,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -21,6 +22,8 @@ public class OracleExceptionSorterTest_setSavepointWithName extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/proxy/ConnectionStatisticTest.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.alibaba.druid.bvt.proxy;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.stat.JdbcConnectionStat;
 
 public class ConnectionStatisticTest extends TestCase {

File: src/test/java/com/alibaba/druid/bvt/proxy/SqlStatisticTest.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.alibaba.druid.bvt.proxy;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.stat.JdbcSqlStat;
 
 public class SqlStatisticTest extends TestCase {

File: src/main/java/com/alibaba/druid/stat/JdbcStatManager.java
Patch:
@@ -297,7 +297,7 @@ public TabularData getSqlList() throws JMException {
         TabularData data = new TabularDataSupport(tabularType);
 
         JdbcDataSourceStat globalStat = JdbcDataSourceStat.getGlobal();
-        {
+        if (globalStat != null) {
             Map<String, JdbcSqlStat> statMap = globalStat.getSqlStatMap();
             for (Map.Entry<String, JdbcSqlStat> entry : statMap.entrySet()) {
                 if (entry.getValue().getExecuteCount() == 0 && entry.getValue().getRunningCount() == 0) {
@@ -335,7 +335,7 @@ public TabularData getSqlList() throws JMException {
             if (druidDataSourceStat == globalStat) {
                 continue;
             }
-            
+
             Map<String, JdbcSqlStat> statMap = druidDataSourceStat.getSqlStatMap();
             for (Map.Entry<String, JdbcSqlStat> entry : statMap.entrySet()) {
                 if (entry.getValue().getExecuteCount() == 0 && entry.getValue().getRunningCount() == 0) {

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait2.java
Patch:
@@ -5,9 +5,10 @@
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.pool.DruidDataSource;
 
 public class DruidDataSourceTest_notEmptyWait2 extends TestCase {

File: src/test/java/com/alibaba/druid/bvt/pool/ExceptionSorterTest.java
Patch:
@@ -10,6 +10,7 @@
 import com.alibaba.druid.mock.MockConnection;
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.vendor.MockExceptionSorter;
+import com.alibaba.druid.util.JdbcUtils;
 
 public class ExceptionSorterTest extends TestCase {
 
@@ -27,7 +28,7 @@ protected void setUp() throws Exception {
     }
 
     protected void tearDown() throws Exception {
-        dataSource.close();
+        JdbcUtils.close(dataSource);
     }
 
     public void test_exceptionSorter() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest.java
Patch:
@@ -10,6 +10,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -18,6 +19,8 @@ public class OracleExceptionSorterTest extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_closeConn extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_1.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_closeConn_1 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_2.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_closeConn_2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeConn_3.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_closeConn_3 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_closeStmt.java
Patch:
@@ -11,6 +11,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -19,6 +20,8 @@ public class OracleExceptionSorterTest_closeStmt extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_commit.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_commit extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_rollback.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_rollback extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setCatalog.java
Patch:
@@ -13,6 +13,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -21,6 +22,8 @@ public class OracleExceptionSorterTest_setCatalog extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setIsolationLevel.java
Patch:
@@ -12,6 +12,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -20,6 +21,8 @@ public class OracleExceptionSorterTest_setIsolationLevel extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setReadOnly.java
Patch:
@@ -13,6 +13,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -21,6 +22,8 @@ public class OracleExceptionSorterTest_setReadOnly extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setSavepoint.java
Patch:
@@ -13,6 +13,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -21,6 +22,8 @@ public class OracleExceptionSorterTest_setSavepoint extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/pool/exception/OracleExceptionSorterTest_setSavepointWithName.java
Patch:
@@ -13,6 +13,7 @@
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidPooledConnection;
 import com.alibaba.druid.pool.vendor.OracleExceptionSorter;
+import com.alibaba.druid.stat.JdbcStatManager;
 import com.alibaba.druid.test.util.OracleMockDriver;
 import com.alibaba.druid.util.JdbcUtils;
 
@@ -21,6 +22,8 @@ public class OracleExceptionSorterTest_setSavepointWithName extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, JdbcStatManager.getInstance().getSqlList().size());
+        
         dataSource = new DruidDataSource();
 
         dataSource.setExceptionSorter(new OracleExceptionSorter());

File: src/test/java/com/alibaba/druid/bvt/proxy/ConnectionStatisticTest.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.alibaba.druid.bvt.proxy;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.stat.JdbcConnectionStat;
 
 public class ConnectionStatisticTest extends TestCase {

File: src/test/java/com/alibaba/druid/bvt/proxy/SqlStatisticTest.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.alibaba.druid.bvt.proxy;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.stat.JdbcSqlStat;
 
 public class SqlStatisticTest extends TestCase {

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -48,7 +48,7 @@ public final class DruidConnectionHolder {
 
     private PreparedStatementPool               statementPool;
 
-    private final List<Statement>               statementTrace           = new ArrayList<Statement>();
+    private final List<Statement>               statementTrace           = new ArrayList<Statement>(2);
 
     private final boolean                       defaultReadOnly;
     private final int                           defaultHoldability;

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -48,7 +48,7 @@ public final class DruidConnectionHolder {
 
     private PreparedStatementPool               statementPool;
 
-    private final List<Statement>               statementTrace           = new ArrayList<Statement>();
+    private final List<Statement>               statementTrace           = new ArrayList<Statement>(2);
 
     private final boolean                       defaultReadOnly;
     private final int                           defaultHoldability;

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -82,9 +82,9 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
     public final static int                            DEFAULT_MIN_IDLE                          = 0;
     public final static int                            DEFAULT_MAX_WAIT                          = -1;
     public final static String                         DEFAULT_VALIDATION_QUERY                  = null;                                                //
-    public final static boolean                        DEFAULT_TEST_ON_BORROW                    = true;
+    public final static boolean                        DEFAULT_TEST_ON_BORROW                    = false;
     public final static boolean                        DEFAULT_TEST_ON_RETURN                    = false;
-    public final static boolean                        DEFAULT_WHILE_IDLE                        = false;
+    public final static boolean                        DEFAULT_WHILE_IDLE                        = true;
     public static final long                           DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
     public static final long                           DEFAULT_TIME_BETWEEN_CONNECT_ERROR_MILLIS = 30 * 1000;
     public static final int                            DEFAULT_NUM_TESTS_PER_EVICTION_RUN        = 3;

File: src/main/java/com/alibaba/druid/util/jdbc/ConnectionBase.java
Patch:
@@ -121,4 +121,5 @@ public void setReadOnly(boolean readOnly) throws SQLException {
     public boolean isReadOnly() throws SQLException {
         return readOnly;
     }
+
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlCreateTableTest5.java
Patch:
@@ -47,7 +47,7 @@ public void test_0() throws Exception {
         MySqlSchemaStatVisitor visitor = new MySqlSchemaStatVisitor();
         stmt.accept(visitor);
         
-        Assert.assertEquals("utf8", stmt.getTableOptions().get("CHARSET"));
+        Assert.assertEquals("utf8", stmt.getTableOptions().get("CHARSET").toString());
 
         System.out.println("Tables : " + visitor.getTables());
         System.out.println("fields : " + visitor.getColumns());

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_10.java
Patch:
@@ -54,8 +54,8 @@ public void test_0() throws Exception {
         Assert.assertEquals(1, visitor.getTables().size());
         Assert.assertEquals(2, visitor.getColumns().size());
         Assert.assertEquals(1, visitor.getConditions().size());
-        Assert.assertEquals(0, visitor.getOrderByColumns().size());
+        Assert.assertEquals(1, visitor.getOrderByColumns().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("group")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("t_department")));
     }
 }

File: src/main/java/com/alibaba/druid/util/jdbc/ConnectionBase.java
Patch:
@@ -121,4 +121,5 @@ public void setReadOnly(boolean readOnly) throws SQLException {
     public boolean isReadOnly() throws SQLException {
         return readOnly;
     }
+
 }

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -82,9 +82,9 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
     public final static int                            DEFAULT_MIN_IDLE                          = 0;
     public final static int                            DEFAULT_MAX_WAIT                          = -1;
     public final static String                         DEFAULT_VALIDATION_QUERY                  = null;                                                //
-    public final static boolean                        DEFAULT_TEST_ON_BORROW                    = true;
+    public final static boolean                        DEFAULT_TEST_ON_BORROW                    = false;
     public final static boolean                        DEFAULT_TEST_ON_RETURN                    = false;
-    public final static boolean                        DEFAULT_WHILE_IDLE                        = false;
+    public final static boolean                        DEFAULT_WHILE_IDLE                        = true;
     public static final long                           DEFAULT_TIME_BETWEEN_EVICTION_RUNS_MILLIS = -1L;
     public static final long                           DEFAULT_TIME_BETWEEN_CONNECT_ERROR_MILLIS = 30 * 1000;
     public static final int                            DEFAULT_NUM_TESTS_PER_EVICTION_RUN        = 3;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlSelectTest_10.java
Patch:
@@ -54,8 +54,8 @@ public void test_0() throws Exception {
         Assert.assertEquals(1, visitor.getTables().size());
         Assert.assertEquals(2, visitor.getColumns().size());
         Assert.assertEquals(1, visitor.getConditions().size());
-        Assert.assertEquals(0, visitor.getOrderByColumns().size());
+        Assert.assertEquals(1, visitor.getOrderByColumns().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("group")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("t_department")));
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest42.java
Patch:
@@ -49,9 +49,9 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(4, visitor.getTables().size());
+        Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertEquals(9, visitor.getColumns().size());
+        Assert.assertEquals(2, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("acduser.vw_acd_info", "xzqh")));
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceFactoryTest.java
Patch:
@@ -21,9 +21,10 @@
 import javax.naming.StringRefAddr;
 import javax.sql.DataSource;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.pool.DruidDataSourceFactory;
 import com.alibaba.druid.util.JdbcUtils;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlSchemaStatVisitor.java
Patch:
@@ -20,7 +20,6 @@
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableAddColumn;
-import com.alibaba.druid.sql.ast.statement.SQLAlterTableItem;
 import com.alibaba.druid.sql.ast.statement.SQLAlterTableStatement;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
 import com.alibaba.druid.sql.ast.statement.SQLDropTableStatement;

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -962,6 +962,7 @@ public static Short castToShort(Object val) {
         return ((Number) val).shortValue();
     }
 
+    @SuppressWarnings("rawtypes")
     public static Integer castToInteger(Object val) {
         if (val == null) {
             return null;
@@ -985,6 +986,7 @@ public static Integer castToInteger(Object val) {
         return ((Number) val).intValue();
     }
 
+    @SuppressWarnings("rawtypes")
     public static Long castToLong(Object val) {
         if (val == null) {
             return null;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlSelectParser.java
Patch:
@@ -261,7 +261,7 @@ protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
             return tableSource;
         }
 
-        if (identifierEquals("USE")) {
+        if (lexer.token() == Token.USE) {
             lexer.nextToken();
             MySqlUseIndexHint hint = new MySqlUseIndexHint();
             parseIndexHint(hint);

File: src/main/java/com/alibaba/druid/sql/parser/Keywords.java
Patch:
@@ -113,6 +113,7 @@ public class Keywords {
         
         map.put("OVER", Token.OVER);
         map.put("TO", Token.TO);
+        map.put("USE", Token.USE);
 
         DEFAULT_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlSelectParser.java
Patch:
@@ -261,7 +261,7 @@ protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
             return tableSource;
         }
 
-        if (identifierEquals("USE")) {
+        if (lexer.token() == Token.USE) {
             lexer.nextToken();
             MySqlUseIndexHint hint = new MySqlUseIndexHint();
             parseIndexHint(hint);

File: src/main/java/com/alibaba/druid/sql/parser/Keywords.java
Patch:
@@ -113,6 +113,7 @@ public class Keywords {
         
         map.put("OVER", Token.OVER);
         map.put("TO", Token.TO);
+        map.put("USE", Token.USE);
 
         DEFAULT_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -279,7 +279,6 @@ public Properties loadConfig(String filePath) {
         }
     }
 
-    @SuppressWarnings("resource")
 	private InputStream getFileAsStream(String filePath) throws FileNotFoundException {
         InputStream inStream = null;
         File file = new File(filePath);

File: src/main/java/com/alibaba/druid/support/console/DruidStat.java
Patch:
@@ -15,10 +15,10 @@
  */
 package com.alibaba.druid.support.console;
 
-import java.io.PrintStream;
-import java.util.ArrayList;
 import java.io.File;
 import java.io.IOException;
+import java.io.PrintStream;
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
@@ -36,6 +36,7 @@
 import com.sun.tools.attach.AttachNotSupportedException;
 import com.sun.tools.attach.VirtualMachine;
 
+@SuppressWarnings("restriction")
 public class DruidStat {
 
     private static final String LOCAL_CONNECTOR_ADDRESS_PROP = "com.sun.management.jmxremote.localConnectorAddress";

File: src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -29,7 +29,6 @@
 import com.alibaba.druid.sql.parser.SQLStatementParser;
 import com.alibaba.druid.sql.parser.Token;
 import com.alibaba.druid.sql.visitor.ExportParameterVisitor;
-import com.alibaba.druid.util.JdbcConstants;
 import com.alibaba.druid.util.LRUCache;
 import com.alibaba.druid.wall.spi.WallVisitorUtils;
 import com.alibaba.druid.wall.violation.IllegalSQLObjectViolation;

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -875,7 +875,7 @@ public void handleConnectionException(DruidPooledConnection pooledConnection, Th
                     }
                 }
                 this.discardConnection(holder.getConnection());
-                pooledConnection.disable();
+                pooledConnection.disable(t);
             }
 
             throw sqlEx;

File: src/test/java/com/alibaba/druid/bvt/sql/MybatisTest.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.alibaba.druid.bvt.sql;
 
-import junit.framework.Assert;
 import junit.framework.TestCase;
 
+import org.junit.Assert;
+
 import com.alibaba.druid.sql.SQLUtils;
 import com.alibaba.druid.util.JdbcUtils;
 

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerRowNumberTest.java
Patch:
@@ -36,7 +36,7 @@ public void test_isEmpty() throws Exception {
                      "WHERE TerritoryID IS NOT NULL " + //
                      "    AND SalesYTD <> 0;";
 
-        String expect = "SELECT c.FirstName, c.LastName, ROW_NUMBER() OVER () ORDER BY SalesYTD DESC AS 'Row Number', s.SalesYTD, a.PostalCode" //
+        String expect = "SELECT c.FirstName, c.LastName, ROW_NUMBER() OVER (ORDER BY SalesYTD DESC) AS 'Row Number', s.SalesYTD, a.PostalCode" //
                         + "\nFROM Sales.SalesPerson s"
                         + "\n\tINNER JOIN Person.Contact c ON s.SalesPersonID = c.ContactID"
                         + "\n\tINNER JOIN Person.Address a ON a.AddressID = c.ContactID" //

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerRowNumberTest2.java
Patch:
@@ -35,7 +35,7 @@ public void test_isEmpty() throws Exception {
                      "   WHERE RowNumber BETWEEN ? AND ?";
 
         String expect = "SELECT *" +
-        		"\nFROM (SELECT ROW_NUMBER() OVER () ORDER BY FAlertDate DESC, FAlertLevel, FAlertType AS RowNumber, *" +
+        		"\nFROM (SELECT ROW_NUMBER() OVER (ORDER BY FAlertDate DESC, FAlertLevel, FAlertType) AS RowNumber, *" +
         		"\n\tFROM monitor_business" +
         		"\n\tWHERE FRemoveAlert = ?" +
         		"\n\t) temp_table" +

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLWithSubqueryClause.java
Patch:
@@ -55,7 +55,7 @@ public static class Entry extends SQLObjectImpl {
         private static final long     serialVersionUID = 1L;
         protected SQLIdentifierExpr   name;
         protected final List<SQLName> columns          = new ArrayList<SQLName>();
-        protected SQLSelectQuery      subQuery;
+        protected SQLSelect      subQuery;
 
         @Override
         protected void accept0(SQLASTVisitor visitor) {
@@ -75,11 +75,11 @@ public void setName(SQLIdentifierExpr name) {
             this.name = name;
         }
 
-        public SQLSelectQuery getSubQuery() {
+        public SQLSelect getSubQuery() {
             return subQuery;
         }
 
-        public void setSubQuery(SQLSelectQuery subQuery) {
+        public void setSubQuery(SQLSelect subQuery) {
             this.subQuery = subQuery;
         }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -174,7 +174,7 @@ protected void withSubquery(SQLSelect select) {
 
                 accept(Token.AS);
                 accept(Token.LPAREN);
-                entry.setSubQuery(query());
+                entry.setSubQuery(select());
                 accept(Token.RPAREN);
 
                 if (identifierEquals("SEARCH")) {

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -123,7 +123,7 @@ public void accept(Token token) {
         } else {
             setErrorEndPos(lexer.pos());
             throw new SQLParseException("syntax error, expect " + token + ", actual " + lexer.token() + " "
-                                        + lexer.stringVal());
+                                        + lexer.stringVal() + ", pos " + this.lexer.pos());
         }
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -189,7 +189,7 @@ protected void withSubquery(SQLSelect select) {
 
                 accept(Token.AS);
                 accept(Token.LPAREN);
-                entry.setSubQuery(query());
+                entry.setSubQuery(select());
                 accept(Token.RPAREN);
 
                 withQueryClause.getEntries().add(entry);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlCreateTableParser.java
Patch:
@@ -180,7 +180,6 @@ public MySqlCreateTableStatement parseCrateTable(boolean acceptCreate) {
         return stmt;
     }
 
-    @SuppressWarnings("unused")
     protected SQLTableConstaint parseConstraint() {
         SQLName name = null;
         if (lexer.token() == (Token.CONSTRAINT)) {

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -1514,7 +1514,6 @@ public static boolean like(String input, String pattern) {
         if ("%".equals(pattern) || "%%".equals(pattern)) {
             return true;
         }
-        // %xxxx
 
         String regexpr = regexprBuilder.toString();
         return Pattern.matches(regexpr, input);

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -850,6 +850,7 @@ public static boolean visit(SQLEvalVisitor visitor, SQLBinaryOpExpr x) {
                 boolean matchResult = !Pattern.matches(pattern, input);
                 x.putAttribute(EVAL_VALUE, matchResult);
             }
+            break;
             case Like: {
                 String pattern = castToString(right.getAttributes().get(EVAL_VALUE));
                 String input = castToString(left.getAttributes().get(EVAL_VALUE));

File: src/main/java/com/alibaba/druid/filter/FilterEventAdapter.java
Patch:
@@ -437,7 +437,7 @@ public boolean preparedStatement_execute(FilterChain chain, PreparedStatementPro
         try {
             statementExecuteBefore(statement, statement.getSql());
 
-            boolean firstResult = super.preparedStatement_execute(chain, statement);
+            boolean firstResult = chain.preparedStatement_execute(statement);
 
             this.statementExecuteAfter(statement, statement.getSql(), firstResult);
 

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStat.java
Patch:
@@ -673,8 +673,7 @@ public void addExecuteTime(long nanoSpan) {
             }
         }
 
-        long millis = nanoSpan / (1000 * 1000);
-        histogramRecord(millis);
+        histogramRecord(nanoSpan);
     }
 
     public long getExecuteMillisTotal() {

File: src/test/java/com/alibaba/druid/bvt/pool/ExceptionSorterTest.java
Patch:
@@ -21,6 +21,7 @@ protected void setUp() throws Exception {
         dataSource.setTestOnBorrow(true);
         dataSource.setDbType("mysql");
         dataSource.setPoolPreparedStatements(true);
+        dataSource.setFilters("stat");
 
         dataSource.init();
     }

File: src/main/java/com/alibaba/druid/filter/FilterEventAdapter.java
Patch:
@@ -437,7 +437,7 @@ public boolean preparedStatement_execute(FilterChain chain, PreparedStatementPro
         try {
             statementExecuteBefore(statement, statement.getSql());
 
-            boolean firstResult = super.preparedStatement_execute(chain, statement);
+            boolean firstResult = chain.preparedStatement_execute(statement);
 
             this.statementExecuteAfter(statement, statement.getSql(), firstResult);
 

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStat.java
Patch:
@@ -673,8 +673,7 @@ public void addExecuteTime(long nanoSpan) {
             }
         }
 
-        long millis = nanoSpan / (1000 * 1000);
-        histogramRecord(millis);
+        histogramRecord(nanoSpan);
     }
 
     public long getExecuteMillisTotal() {

File: src/test/java/com/alibaba/druid/bvt/pool/ExceptionSorterTest.java
Patch:
@@ -21,6 +21,7 @@ protected void setUp() throws Exception {
         dataSource.setTestOnBorrow(true);
         dataSource.setDbType("mysql");
         dataSource.setPoolPreparedStatements(true);
+        dataSource.setFilters("stat");
 
         dataSource.init();
     }

File: src/main/java/com/alibaba/druid/pool/DruidPooledConnection.java
Patch:
@@ -149,7 +149,7 @@ public void closePoolableStatement(DruidPooledPreparedStatement stmt) throws SQL
                     return;
                 }
                 
-                LOG.warn("clear parameter error", ex);
+                LOG.error("clear parameter error", ex);
             }
         }
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlUnionQuery.java
Patch:
@@ -16,11 +16,12 @@
 package com.alibaba.druid.sql.dialect.mysql.ast.statement;
 
 import com.alibaba.druid.sql.ast.statement.SQLUnionQuery;
+import com.alibaba.druid.sql.dialect.mysql.ast.MySqlObject;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlSelectQueryBlock.Limit;
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class MySqlUnionQuery extends SQLUnionQuery implements MySqlStatement {
+public class MySqlUnionQuery extends SQLUnionQuery implements MySqlObject {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/wall/WallConfig.java
Patch:
@@ -76,7 +76,7 @@ public class WallConfig implements WallConfigMBean {
     private String              tenantTablePattern;
     private String              tenantColumn;
 
-    private boolean             wrapAllow                  = false;
+    private boolean             wrapAllow                  = true;
     private boolean             metadataAllow              = true;
 
     public WallConfig(){

File: src/main/java/com/alibaba/druid/filter/config/ConfigTools.java
Patch:
@@ -174,9 +174,9 @@ public static String encrypt(byte[] keyBytes, String plainText)
             //For IBM JDK, 原因请看解密方法中的说明
             RSAPrivateKey rsaPrivateKey = (RSAPrivateKey) privateKey;
             RSAPublicKeySpec publicKeySpec = new RSAPublicKeySpec(rsaPrivateKey.getModulus(), rsaPrivateKey.getPrivateExponent());
-            Key publicKey = KeyFactory.getInstance("RSA").generatePublic(publicKeySpec);
+            Key fakePublicKey = KeyFactory.getInstance("RSA").generatePublic(publicKeySpec);
             cipher = Cipher.getInstance("RSA");
-            cipher.init(Cipher.ENCRYPT_MODE, publicKey);
+            cipher.init(Cipher.ENCRYPT_MODE, fakePublicKey);
         }
 
 		byte[] encryptedBytes = cipher.doFinal(plainText.getBytes("UTF-8"));

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/parser/MySqlParserResourceTest.java
Patch:
@@ -33,7 +33,7 @@
 public class MySqlParserResourceTest extends TestCase {
 
     public void test_0() throws Exception {
-        exec_test("bvt/parser/mysql-0.txt");
+//        exec_test("bvt/parser/mysql-0.txt");
         exec_test("bvt/parser/mysql-1.txt");
         exec_test("bvt/parser/mysql-2.txt");
         exec_test("bvt/parser/mysql-3.txt");

File: src/test/java/com/alibaba/druid/bvt/sql/sqlserver/SQLServerRowNumberTest.java
Patch:
@@ -37,7 +37,9 @@ public void test_isEmpty() throws Exception {
                      "    AND SalesYTD <> 0;";
 
         String expect = "SELECT c.FirstName, c.LastName, ROW_NUMBER() OVER () ORDER BY SalesYTD DESC AS 'Row Number', s.SalesYTD, a.PostalCode" //
-                        + "\nFROM Sales.SalesPerson s INNER JOIN Person.Contact c ON s.SalesPersonID = c.ContactID INNER JOIN Person.Address a ON a.AddressID = c.ContactID" //
+                        + "\nFROM Sales.SalesPerson s"
+                        + "\n\tINNER JOIN Person.Contact c ON s.SalesPersonID = c.ContactID"
+                        + "\n\tINNER JOIN Person.Address a ON a.AddressID = c.ContactID" //
                         + "\nWHERE TerritoryID IS NOT NULL" //
                         + "\n\tAND SalesYTD <> 0";
 

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1325,7 +1325,7 @@ public Connection createPhysicalConnection() throws SQLException {
             conn = createPhysicalConnection(url, physicalConnectProperties);
 
             if (conn == null) {
-                throw new SQLException("connect error, url " + url);
+                throw new SQLException("connect error, url " + url + ", driverClass " + this.driverClass);
             }
 
             initPhysicalConnection(conn);

File: src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -63,7 +63,7 @@ public void init(DataSourceProxy dataSource) {
             dbType = JdbcUtils.getDbType(dataSource.getUrl(), null);
         }
 
-        if (JdbcUtils.MYSQL.equals(dbType)) {
+        if (JdbcUtils.MYSQL.equals(dbType) || JdbcUtils.H2.equals(dbType)) {
             if (config == null) {
                 config = new WallConfig(MySqlWallProvider.DEFAULT_CONFIG_DIR);
             }

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1325,7 +1325,7 @@ public Connection createPhysicalConnection() throws SQLException {
             conn = createPhysicalConnection(url, physicalConnectProperties);
 
             if (conn == null) {
-                throw new SQLException("connect error, url " + url);
+                throw new SQLException("connect error, url " + url + ", driverClass " + this.driverClass);
             }
 
             initPhysicalConnection(conn);

File: src/main/java/com/alibaba/druid/pool/WrapperAdapter.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.alibaba.druid.pool;
 
-import java.sql.SQLException;
 import java.sql.Wrapper;
 
 public class WrapperAdapter implements Wrapper {

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/SQLServerObject.java
Patch:
@@ -15,8 +15,9 @@
  */
 package com.alibaba.druid.sql.dialect.sqlserver.ast;
 
+import com.alibaba.druid.sql.dialect.sqlserver.visitor.SQLServerASTVisitor;
 import com.alibaba.druid.sql.dialect.transact.ast.TransactSQLObject;
 
 public interface SQLServerObject extends TransactSQLObject {
-
+    public void accept0(SQLServerASTVisitor visitor);
 }

File: src/main/java/com/alibaba/druid/util/TransactionInfo.java
Patch:
@@ -21,7 +21,7 @@
 public class TransactionInfo {
 
     private final long         id;
-    private final List<String> sqlList = new ArrayList<String>();
+    private final List<String> sqlList = new ArrayList<String>(4);
     private final long         startTimeMillis;
     private long               endTimeMillis;
 

File: src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -75,7 +75,7 @@ public void init(DataSourceProxy dataSource) {
             }
 
             provider = new OracleWallProvider(config);
-        } else if (JdbcUtils.SQL_SERVER.equals(dbType)) {
+        } else if (JdbcUtils.SQL_SERVER.equals(dbType) || JdbcUtils.JTDS.equals(dbType)) {
             if (config == null) {
                 config = new WallConfig(SQLServerProvider.DEFAULT_CONFIG_DIR);
             }

File: src/test/java/com/alibaba/druid/bvt/proxy/BasicTypeTest.java
Patch:
@@ -191,7 +191,7 @@ public void test_basicType() throws Exception {
             rs.updateRow();
 
             JdbcUtils.close(rs);
-            conn.rollback(point);
+//            conn.rollback(point);
             conn.setAutoCommit(true);
 
             rs = stmt.executeQuery("SELECT F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17 FROM T_BASIC_TYPE");
@@ -212,7 +212,7 @@ public void test_basicType() throws Exception {
             rs.getTimestamp("F11");
             rs.getTimestamp("F11", Calendar.getInstance());
             rs.getBytes("F12");
-            rs.getBlob("F12").free();
+            rs.getBlob("F12");
             rs.getString("F13");
             rs.getAsciiStream("F13");
             rs.getCharacterStream("F14");

File: src/main/java/com/alibaba/druid/util/TransactionInfo.java
Patch:
@@ -21,7 +21,7 @@
 public class TransactionInfo {
 
     private final long         id;
-    private final List<String> sqlList = new ArrayList<String>();
+    private final List<String> sqlList = new ArrayList<String>(4);
     private final long         startTimeMillis;
     private long               endTimeMillis;
 

File: src/test/java/com/alibaba/druid/bvt/proxy/BasicTypeTest.java
Patch:
@@ -191,7 +191,7 @@ public void test_basicType() throws Exception {
             rs.updateRow();
 
             JdbcUtils.close(rs);
-            conn.rollback(point);
+//            conn.rollback(point);
             conn.setAutoCommit(true);
 
             rs = stmt.executeQuery("SELECT F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, F12, F13, F14, F15, F16, F17 FROM T_BASIC_TYPE");
@@ -212,7 +212,7 @@ public void test_basicType() throws Exception {
             rs.getTimestamp("F11");
             rs.getTimestamp("F11", Calendar.getInstance());
             rs.getBytes("F12");
-            rs.getBlob("F12").free();
+            rs.getBlob("F12");
             rs.getString("F13");
             rs.getAsciiStream("F13");
             rs.getCharacterStream("F14");

File: src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -78,7 +78,7 @@ public void init(DataSourceProxy dataSource) {
 
             provider = new SQLServerProvider(config);
         } else {
-            throw new IllegalStateException("dbType not support : " + dbType);
+            throw new IllegalStateException("dbType not support : " + dbType + ", url " + dataSource.getUrl());
         }
 
         this.inited = true;

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableDropIndex_0.java
Patch:
@@ -31,7 +31,7 @@ public void test_alter_first() throws Exception {
         SQLStatement stmt = parser.parseStatementList().get(0);
         parser.match(Token.EOF);
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("ALTER TABLE `test`.`tb1`," + //
+        Assert.assertEquals("ALTER TABLE `test`.`tb1`" + //
                             "\n\tDROP INDEX `ix`", output);
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/MySqlAlterTableDropIndex_0.java
Patch:
@@ -32,7 +32,7 @@ public void test_alter_first() throws Exception {
         parser.match(Token.EOF);
         String output = SQLUtils.toMySqlString(stmt);
         Assert.assertEquals("ALTER TABLE `test`.`tb1`," + //
-                            "\n\tDROP `ix`", output);
+                            "\n\tDROP INDEX `ix`", output);
     }
 
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -20,7 +20,6 @@
 import static com.alibaba.druid.sql.parser.LayoutCharacters.EOI;
 import static com.alibaba.druid.sql.parser.Token.LITERAL_CHARS;
 
-import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -1144,7 +1144,7 @@ protected SQLDataType parseCharTypeRest(SQLDataType dataType) {
 
             accept(Token.SET);
 
-            if (lexer.token() != Token.IDENTIFIER) {
+            if (lexer.token() != Token.IDENTIFIER && lexer.token() != Token.LITERAL_CHARS) {
                 throw new ParserException();
             }
             charType.setCharSetName(lexer.stringVal());

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -265,7 +265,7 @@ public String getPrincipal(HttpServletRequest httpRequest) {
             return sessionValue.toString();
         }
 
-        if (principalCookieName != null) {
+        if (principalCookieName != null && httpRequest.getCookies() != null) {
             for (Cookie cookie : httpRequest.getCookies()) {
                 if (principalCookieName.equals(cookie.getName())) {
                     return cookie.getValue();

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -265,7 +265,7 @@ public String getPrincipal(HttpServletRequest httpRequest) {
             return sessionValue.toString();
         }
 
-        if (principalCookieName != null) {
+        if (principalCookieName != null && httpRequest.getCookies() != null) {
             for (Cookie cookie : httpRequest.getCookies()) {
                 if (principalCookieName.equals(cookie.getName())) {
                     return cookie.getValue();

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -379,7 +379,7 @@ public void init() throws SQLException {
                 if (MockDriver.class.getName().equals(driverClass)) {
                     driver = MockDriver.instance;
                 } else {
-                    driver = JdbcUtils.createDriver(driverClass);
+                    driver = JdbcUtils.createDriver(driverClassLoader, driverClass);
                 }
             } else {
                 if (this.driverClass == null) {
@@ -699,7 +699,7 @@ public DruidPooledConnection getConnectionDirect(long maxWaitMillis) throws SQLE
      * @param realConnection
      * @throws SQLException
      */
-    private void discardConnection(Connection realConnection) {
+    public void discardConnection(Connection realConnection) {
         JdbcUtils.close(realConnection);
 
         lock.lock();

File: src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -29,6 +29,7 @@
 import com.alibaba.druid.sql.parser.SQLStatementParser;
 import com.alibaba.druid.sql.parser.Token;
 import com.alibaba.druid.sql.visitor.ExportParameterVisitor;
+import com.alibaba.druid.util.LRUCache;
 import com.alibaba.druid.wall.violation.IllegalSQLObjectViolation;
 import com.alibaba.druid.wall.violation.SyntaxErrorViolation;
 
@@ -61,7 +62,7 @@ public void addWhiteSql(String sql) {
         lock.writeLock().lock();
         try {
             if (whiteList == null) {
-                whiteList = new LinkedHashMap<String, Object>(whileListMaxSize, 0.75f, false);
+                whiteList = new LRUCache<String, Object>(whileListMaxSize);
             }
 
             whiteList.put(sql, PRESENT);

File: src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -29,6 +29,7 @@
 import com.alibaba.druid.sql.parser.SQLStatementParser;
 import com.alibaba.druid.sql.parser.Token;
 import com.alibaba.druid.sql.visitor.ExportParameterVisitor;
+import com.alibaba.druid.util.LRUCache;
 import com.alibaba.druid.wall.violation.IllegalSQLObjectViolation;
 import com.alibaba.druid.wall.violation.SyntaxErrorViolation;
 
@@ -61,7 +62,7 @@ public void addWhiteSql(String sql) {
         lock.writeLock().lock();
         try {
             if (whiteList == null) {
-                whiteList = new LinkedHashMap<String, Object>(whileListMaxSize, 0.75f, false);
+                whiteList = new LRUCache<String, Object>(whileListMaxSize);
             }
 
             whiteList.put(sql, PRESENT);

File: src/main/java/com/alibaba/druid/filter/AutoLoad.java
Patch:
@@ -28,5 +28,5 @@
 @Target({ ElementType.TYPE })
 public @interface AutoLoad {
 
-    boolean value() default false;
+    boolean value() default true;
 }

File: src/main/java/com/alibaba/druid/filter/AutoLoad.java
Patch:
@@ -28,5 +28,5 @@
 @Target({ ElementType.TYPE })
 public @interface AutoLoad {
 
-    boolean value() default false;
+    boolean value() default true;
 }

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1388,7 +1388,7 @@ public CompositeDataSupport getCompositeData() throws JMException {
         map.put("ResultSetLastErrorStackTrace", null);
 
         // 35 - 39
-        map.put("ConnectionConnectCount", createErrorCount);
+        map.put("ConnectionConnectCount", this.getConnectCount());
         if (createError != null) {
             map.put("ConnectionErrorLastMessage", createError.getMessage());
             map.put("ConnectionErrorLastStackTrace", IOUtils.getStackTrace(createError));

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1388,7 +1388,7 @@ public CompositeDataSupport getCompositeData() throws JMException {
         map.put("ResultSetLastErrorStackTrace", null);
 
         // 35 - 39
-        map.put("ConnectionConnectCount", createErrorCount);
+        map.put("ConnectionConnectCount", this.getConnectCount());
         if (createError != null) {
             map.put("ConnectionErrorLastMessage", createError.getMessage());
             map.put("ConnectionErrorLastStackTrace", IOUtils.getStackTrace(createError));

File: src/main/java/com/alibaba/druid/sql/visitor/ParameterizedOutputVisitorUtils.java
Patch:
@@ -48,14 +48,14 @@ public static String parameterize(String sql, String dbType) {
     }
 
     public static SQLASTOutputVisitor createParameterizedOutputVisitor(Appendable out, String dbType) {
-        if (JdbcUtils.ORACLE.equals(dbType)) {
+        if (JdbcUtils.ORACLE.equals(dbType) || JdbcUtils.ALI_ORACLE.equals(dbType)) {
             return new OracleParameterizedOutputVisitor(out);
         }
 
         if (JdbcUtils.MYSQL.equals(dbType)) {
             return new MySqlParameterizedOutputVisitor(out);
         }
-        
+
         if (JdbcUtils.H2.equals(dbType)) {
             return new MySqlParameterizedOutputVisitor(out);
         }

File: src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -65,7 +65,7 @@ public void init(DataSourceProxy dataSource) {
             }
 
             provider = new MySqlWallProvider(config);
-        } else if (JdbcUtils.ORACLE.equals(dbType)) {
+        } else if (JdbcUtils.ORACLE.equals(dbType) || JdbcUtils.ALI_ORACLE.equals(dbType)) {
             if (config == null) {
                 config = new WallConfig(OracleWallProvider.DEFAULT_CONFIG_DIR);
             }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/MergeTest.java
Patch:
@@ -32,11 +32,12 @@ public void test_mergeCall_oracle() throws Exception {
         String sql = "{ call INTERFACE_DATA_EXTRACTION.INVOICE_INFO(?,?,?)}";
 
         ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.ORACLE);
+        ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.ALI_ORACLE);
     }
-    
+
     public void test_mergeCall_mysql() throws Exception {
         String sql = "{ call INTERFACE_DATA_EXTRACTION.INVOICE_INFO(?,?,?)}";
-        
+
         ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.MYSQL);
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleFormatTest2.java
Patch:
@@ -27,5 +27,7 @@ public void test_formatOracle() throws Exception {
 
         String formatedText = SQLUtils.format(text, JdbcUtils.ORACLE);
         System.out.println(formatedText);
+        String formatedText2 = SQLUtils.format(text, JdbcUtils.ALI_ORACLE);
+        System.out.println(formatedText2);
     }
 }

File: src/main/java/com/alibaba/druid/sql/visitor/ParameterizedOutputVisitorUtils.java
Patch:
@@ -48,14 +48,14 @@ public static String parameterize(String sql, String dbType) {
     }
 
     public static SQLASTOutputVisitor createParameterizedOutputVisitor(Appendable out, String dbType) {
-        if (JdbcUtils.ORACLE.equals(dbType)) {
+        if (JdbcUtils.ORACLE.equals(dbType) || JdbcUtils.ALI_ORACLE.equals(dbType)) {
             return new OracleParameterizedOutputVisitor(out);
         }
 
         if (JdbcUtils.MYSQL.equals(dbType)) {
             return new MySqlParameterizedOutputVisitor(out);
         }
-        
+
         if (JdbcUtils.H2.equals(dbType)) {
             return new MySqlParameterizedOutputVisitor(out);
         }

File: src/main/java/com/alibaba/druid/wall/WallFilter.java
Patch:
@@ -65,7 +65,7 @@ public void init(DataSourceProxy dataSource) {
             }
 
             provider = new MySqlWallProvider(config);
-        } else if (JdbcUtils.ORACLE.equals(dbType)) {
+        } else if (JdbcUtils.ORACLE.equals(dbType) || JdbcUtils.ALI_ORACLE.equals(dbType)) {
             if (config == null) {
                 config = new WallConfig(OracleWallProvider.DEFAULT_CONFIG_DIR);
             }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/MergeTest.java
Patch:
@@ -32,11 +32,12 @@ public void test_mergeCall_oracle() throws Exception {
         String sql = "{ call INTERFACE_DATA_EXTRACTION.INVOICE_INFO(?,?,?)}";
 
         ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.ORACLE);
+        ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.ALI_ORACLE);
     }
-    
+
     public void test_mergeCall_mysql() throws Exception {
         String sql = "{ call INTERFACE_DATA_EXTRACTION.INVOICE_INFO(?,?,?)}";
-        
+
         ParameterizedOutputVisitorUtils.parameterize(sql, JdbcUtils.MYSQL);
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleFormatTest2.java
Patch:
@@ -27,5 +27,7 @@ public void test_formatOracle() throws Exception {
 
         String formatedText = SQLUtils.format(text, JdbcUtils.ORACLE);
         System.out.println(formatedText);
+        String formatedText2 = SQLUtils.format(text, JdbcUtils.ALI_ORACLE);
+        System.out.println(formatedText2);
     }
 }

File: src/main/java/com/alibaba/druid/support/jconsole/DruidDataSourcePanel.java
Patch:
@@ -22,6 +22,7 @@
 
 import javax.swing.BorderFactory;
 import javax.swing.JPanel;
+import javax.swing.JTable;
 import javax.swing.border.TitledBorder;
 
 import com.alibaba.druid.support.jconsole.model.DruidTableCellRenderer;
@@ -78,7 +79,7 @@ private void addTable(ColumnData columnData) {
         ArrayList<String> ids = columnData.getNames();
 
         for (ArrayList<LinkedHashMap<String, Object>> listNow : data) {
-
+            JTable table = new JTable();
             tableModel = new DruidTableModel(listNow);
             table.setModel(tableModel);
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceDecryptTest.java
Patch:
@@ -19,7 +19,7 @@ public void testDecrypt() throws SQLException {
         dataSource.setUsername("xiaoyu");
         dataSource.setPassword("OJfUm6WCHi7EuXqE6aEc+Po2xFrAGBeSNy8O2jWhV2FTG8/5kbRRr2rjNKhptlevm/03Y0048P7h88gdUOXAYg==");
         dataSource.setFilters("config");
-        dataSource.setConnectionProperties("config.decrypt=RSA");
+        dataSource.setConnectionProperties("config.decrypt=true");
 
         try {
             dataSource.init();

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -564,7 +564,7 @@ public int getRemoveAbandonedTimeout() {
     }
 
     public void setRemoveAbandonedTimeout(int removeAbandonedTimeout) {
-        this.removeAbandonedTimeoutMillis = removeAbandonedTimeout * 1000;
+        this.removeAbandonedTimeoutMillis = (long)removeAbandonedTimeout * 1000;
     }
 
     public void setRemoveAbandonedTimeoutMillis(long removeAbandonedTimeoutMillis) {

File: src/main/java/com/alibaba/druid/stat/DruidStatManagerFacade.java
Patch:
@@ -229,7 +229,7 @@ public List<Map<String, Object>> getPoolingConnectionInfoByDataSourceId(Integer
     public List<String> getActiveConnectionStackTraceByDataSourceId(Integer id) {
         Object datasource = getDruidDataSourceById(id);
 
-        if (datasource == null || DruidDataSourceUtils.isRemoveAbandoned(datasource)) {
+        if (datasource == null || !DruidDataSourceUtils.isRemoveAbandoned(datasource)) {
             return null;
         }
 

File: src/main/java/com/alibaba/druid/stat/DruidDataSourceStatManager.java
Patch:
@@ -100,11 +100,11 @@ public synchronized static IdentityHashMap<Object, ObjectName> getInstances() {
     public static boolean isRegisterToSystemProperty() {
         String value = System.getProperty(SYS_PROP_REGISTER_SYS_PROPERTY);
 
-        if ("false".equals(value)) {
-            return false;
+        if ("true".equals(value)) {
+            return true;
         }
 
-        return true;
+        return false;
     }
 
     @SuppressWarnings("unchecked")

File: src/main/java/com/alibaba/druid/pool/ha/MultiDataSource.java
Patch:
@@ -255,7 +255,9 @@ public void resetStat() {
     }
 
     public void close() {
-        scheduler.shutdownNow();
+        if (scheduler != null) {
+            scheduler.shutdownNow();
+        }
 
         Object[] items = this.getDataSources().values().toArray();
         for (Object item : items) {

File: src/test/java/com/alibaba/druid/bvt/pool/ha/MultiDataSourceTest.java
Patch:
@@ -18,10 +18,12 @@
 import junit.framework.TestCase;
 
 import com.alibaba.druid.pool.ha.MultiDataSource;
+import com.alibaba.druid.util.JdbcUtils;
 
 
 public class MultiDataSourceTest extends TestCase {
     public void test_0 () throws Exception {
         MultiDataSource multiDataSource = new MultiDataSource();
+        multiDataSource.close();
     }
 }

File: src/main/java/com/alibaba/druid/stat/DruidStatManagerFacade.java
Patch:
@@ -183,7 +183,9 @@ public List<List<String>> getActiveConnStackTraceList() {
         List<List<String>> traceList = new ArrayList<List<String>>();
         for (Object dataSource : getDruidDataSourceInstances()) {
             List<String> stacks = ((DruidDataSource) dataSource).getActiveConnectionStackTrace();
-            traceList.add(stacks);
+			if (stacks.size() > 0 ) {
+				traceList.add(stacks);
+			}
         }
         return traceList;
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -686,7 +686,7 @@ public SQLTableSource parseTableSource() {
         if (lexer.token() == (Token.LPAREN)) {
             lexer.nextToken();
             OracleSelectSubqueryTableSource tableSource;
-            if (lexer.token() == Token.SELECT) {
+            if (lexer.token() == Token.SELECT || lexer.token() == Token.WITH) {
                 tableSource = new OracleSelectSubqueryTableSource(select());
             } else if (lexer.token() == (Token.LPAREN)) {
                 tableSource = new OracleSelectSubqueryTableSource(select());

File: src/main/java/com/alibaba/druid/mock/MockStatement.java
Patch:
@@ -36,7 +36,7 @@ public MockStatement(Connection connection){
         }
     }
 
-    protected void checkOpen() throws SQLException, MockConnectionClosedException {
+    protected void checkOpen() throws SQLException {
         if (closed) {
             throw new SQLException();
         }

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -808,7 +808,7 @@ public void scanHexaDecimal() {
         token = Token.LITERAL_HEX;
     }
 
-    public String hexString() throws NumberFormatException {
+    public String hexString() {
         return new String(buf, np, sp);
     }
 
@@ -876,7 +876,7 @@ private boolean isOperator(char ch) {
     }
 
     // QS_TODO negative number is invisible for lexer
-    public Number integerValue() throws NumberFormatException {
+    public Number integerValue() {
         long result = 0;
         boolean negative = false;
         int i = np, max = np + sp;

File: src/main/java/com/alibaba/druid/support/spring/stat/BeanTypeAutoProxyCreator.java
Patch:
@@ -52,7 +52,7 @@ public void setTargetBeanType(Class<?> targetClass) {
         this.targetBeanType = targetClass;
     }
 
-    public void setApplicationContext(ApplicationContext context) throws BeansException {
+    public void setApplicationContext(ApplicationContext context) {
         this.context = context;
     }
 

File: src/main/java/com/alibaba/druid/util/jdbc/StatementBase.java
Patch:
@@ -58,7 +58,7 @@ public void setConnection(Connection connection) {
         this.connection = connection;
     }
 
-    protected void checkOpen() throws SQLException, MockConnectionClosedException {
+    protected void checkOpen() throws SQLException {
         if (closed) {
             throw new SQLException();
         }

File: src/main/java/com/alibaba/druid/filter/config/ConfigFilter.java
Patch:
@@ -73,7 +73,7 @@ public String getAlgorithm() {
         return algorithm;
     }
 
-    public void setAlgorithm(String algorithm) {
+    public final void setAlgorithm(String algorithm) {
         this.algorithm = algorithm;
         try {
             this.cipher = Cipher.getInstance(algorithm);
@@ -86,15 +86,15 @@ public String getEncryptedPassword() {
         return encryptedPassword;
     }
 
-    public void setEncryptedPassword(String encryptedPassword) {
+    public final void setEncryptedPassword(String encryptedPassword) {
         this.encryptedPassword = encryptedPassword;
     }
 
     public String getKey() {
         return key;
     }
 
-    public void setKey(String key) {
+    public final void setKey(String key) {
         this.key = key;
 
         byte[] bytes = Base64.base64ToByteArray(key);

File: src/main/java/com/alibaba/druid/filter/encoding/EncodingConvertFilter.java
Patch:
@@ -233,7 +233,7 @@ public String encode(ConnectionProxy connection, String s) throws SQLException {
 
             return charsetConvert.encode(s);
         } catch (UnsupportedEncodingException e) {
-            throw new SQLException(e.getMessage());
+            throw new SQLException(e.getMessage(), e);
         }
     }
 
@@ -242,7 +242,7 @@ public String decode(ConnectionProxy connection, String s) throws SQLException {
             CharsetConvert charsetConvert = (CharsetConvert) connection.getAttributes().get(ATTR_CHARSET_CONVERTER);
             return charsetConvert.decode(s);
         } catch (UnsupportedEncodingException e) {
-            throw new SQLException(e.getMessage());
+            throw new SQLException(e.getMessage(), e);
         }
     }
 

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -250,9 +250,9 @@ public Driver createDriver(String className) throws SQLException {
         try {
             rawDriver = (Driver) rawDriverClass.newInstance();
         } catch (InstantiationException e) {
-            throw new SQLException("create driver instance error, driver className '" + className + "'");
+            throw new SQLException("create driver instance error, driver className '" + className + "'", e);
         } catch (IllegalAccessException e) {
-            throw new SQLException("create driver instance error, driver className '" + className + "'");
+            throw new SQLException("create driver instance error, driver className '" + className + "'", e);
         }
 
         return rawDriver;

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -317,8 +317,8 @@ public final SQLExpr primaryRest(SQLExpr expr) {
 
                         if (lexer.token() == Token.FOR) {
                             lexer.nextToken();
-                            SQLExpr _for = expr();
-                            methodInvokeExpr.putAttribute("FOR", _for);
+                            SQLExpr forExpr = expr();
+                            methodInvokeExpr.putAttribute("FOR", forExpr);
                         }
                         break;
                     } else if (lexer.token() == Token.RPAREN) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -544,10 +544,10 @@ public boolean visit(SQLMethodInvokeExpr x) {
                 from.accept(this);
             }
 
-            SQLExpr _for = (SQLExpr) x.getAttribute("FOR");
-            if (_for != null) {
+            SQLExpr forExpr = (SQLExpr) x.getAttribute("FOR");
+            if (forExpr != null) {
                 print(" FOR ");
-                _for.accept(this);
+                forExpr.accept(this);
             }
             print(")");
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -402,8 +402,8 @@ public SQLExpr primaryRest(SQLExpr expr) {
         }
         
         if (identifierEquals("AT")) {
-            char mark_ch = lexer.current();
-            int mark_bp = lexer.bp();
+            char markChar = lexer.current();
+            int markBp = lexer.bp();
             lexer.nextToken();
             if (lexer.token() == Token.LOCAL) {
                 lexer.nextToken();
@@ -412,7 +412,7 @@ public SQLExpr primaryRest(SQLExpr expr) {
                 if (identifierEquals("TIME")) {
                     lexer.nextToken();
                 } else {
-                    lexer.reset(mark_bp, mark_ch, Token.IDENTIFIER);
+                    lexer.reset(markBp, markChar, Token.IDENTIFIER);
                     return expr;
                 }
                 acceptIdentifier("ZONE");

File: src/main/java/com/alibaba/druid/sql/visitor/SQLEvalVisitorUtils.java
Patch:
@@ -299,7 +299,7 @@ public static Date _date(String text) {
         try {
             return new SimpleDateFormat(format).parse(text);
         } catch (ParseException e) {
-            throw new DruidRuntimeException("format : " + format + ", value : " + text);
+            throw new DruidRuntimeException("format : " + format + ", value : " + text, e);
         }
     }
 

File: src/main/java/com/alibaba/druid/support/http/StatViewServlet.java
Patch:
@@ -201,9 +201,9 @@ public void service(HttpServletRequest request, HttpServletResponse response) th
         }
 
         if ("/submitLogin".equals(path)) {
-            String _username = request.getParameter(PARAM_NAME_USERNAME);
-            String _password = request.getParameter(PARAM_NAME_PASSWORD);
-            if (username.equals(_username) && password.equals(_password)) {
+            String usernameParam = request.getParameter(PARAM_NAME_USERNAME);
+            String passwordParam = request.getParameter(PARAM_NAME_PASSWORD);
+            if (username.equals(usernameParam) && password.equals(passwordParam)) {
                 request.getSession().setAttribute(SESSION_USER_KEY, username);
                 response.getWriter().print("success");
             } else {

File: src/main/java/com/alibaba/druid/support/http/util/IPAddress.java
Patch:
@@ -262,9 +262,9 @@ final int parseIPAddress(String ipAddressStr) {
                 throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]");
             }
         } catch (NoSuchElementException ex) {
-            throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]");
+            throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]", ex);
         } catch (NumberFormatException ex) {
-            throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]");
+            throw new IllegalArgumentException("Invalid IP Address [" + ipAddressStr + "]", ex);
         }
 
         return result;

File: src/main/java/com/alibaba/druid/support/http/util/IPRange.java
Patch:
@@ -226,7 +226,7 @@ final void parseRange(String range) {
             // create the corresponding subnet decimal
             extendedNetworkPrefix = computeNetworkPrefixFromMask(ipSubnetMask);
             if (extendedNetworkPrefix == -1) {
-                throw new IllegalArgumentException("Invalid IP range [" + range + "]");
+                throw new IllegalArgumentException("Invalid IP range [" + range + "]", ex);
             }
         }
     }

File: src/main/java/com/alibaba/druid/pool/ha/MultiDataSourceConnection.java
Patch:
@@ -633,7 +633,7 @@ public Date getConnectedTime() {
     public boolean isWrapperFor(Class<?> iface) throws SQLException {
         boolean result = super.isWrapperFor(iface);
 
-        if (result == false && conn != null) {
+        if ((!result) && conn != null) {
             result = conn.isWrapperFor(iface);
         }
 

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveExprParser.java
Patch:
@@ -16,12 +16,11 @@
 package com.alibaba.druid.sql.dialect.hive.parser;
 
 import com.alibaba.druid.sql.parser.Lexer;
-import com.alibaba.druid.sql.parser.ParserException;
 import com.alibaba.druid.sql.parser.SQLExprParser;
 
 
 public class HiveExprParser extends SQLExprParser {
-    public HiveExprParser(String sql) throws ParserException{
+    public HiveExprParser(String sql) {
         super(new HiveLexer(sql));
         this.lexer.nextToken();
     }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -144,7 +144,7 @@ public class MySqlStatementParser extends SQLStatementParser {
     private static final String DELAYED      = "DELAYED";
     private static final String LOW_PRIORITY = "LOW_PRIORITY";
 
-    public MySqlStatementParser(String sql) throws ParserException{
+    public MySqlStatementParser(String sql) {
         super(new MySqlExprParser(sql));
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -620,7 +620,7 @@ private void parseGroupBy(OracleSelectQueryBlock queryBlock) {
         }
     }
 
-    protected String as() throws ParserException {
+    protected String as() {
         if (lexer.token() == Token.CONNECT) {
             return null;
         }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGExprParser.java
Patch:
@@ -20,12 +20,11 @@
 import com.alibaba.druid.sql.dialect.postgresql.ast.PGOrderBy;
 import com.alibaba.druid.sql.dialect.postgresql.ast.expr.PGAnalytic;
 import com.alibaba.druid.sql.parser.Lexer;
-import com.alibaba.druid.sql.parser.ParserException;
 import com.alibaba.druid.sql.parser.SQLExprParser;
 import com.alibaba.druid.sql.parser.Token;
 
 public class PGExprParser extends SQLExprParser{
-    public PGExprParser(String sql) throws ParserException{
+    public PGExprParser(String sql) {
         super(new PGLexer(sql));
         this.lexer.nextToken();
     }
@@ -34,7 +33,7 @@ public PGExprParser(Lexer lexer){
         super(lexer);
     }
     
-    protected SQLAggregateExpr parseAggregateExpr(String methodName) throws ParserException {
+    protected SQLAggregateExpr parseAggregateExpr(String methodName)  {
         methodName = methodName.toUpperCase();
         
         PGAggregateExpr aggregateExpr;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSelectParser.java
Patch:
@@ -38,7 +38,7 @@ public PGSelectParser(SQLExprParser exprParser){
         super(exprParser);
     }
 
-    public PGSelectParser(String sql) throws ParserException{
+    public PGSelectParser(String sql) {
         this(new PGExprParser(sql));
     }
 
@@ -47,7 +47,7 @@ protected SQLExprParser createExprParser() {
     }
 
     @Override
-    public SQLSelectQuery query() throws ParserException {
+    public SQLSelectQuery query() {
         PGSelectQueryBlock queryBlock = new PGSelectQueryBlock();
 
         if (lexer.token() == Token.SELECT) {
@@ -219,7 +219,7 @@ public SQLSelectQuery query() throws ParserException {
         return queryRest(queryBlock);
     }
 
-    protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) throws ParserException {
+    protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
         if (lexer.token() == Token.AS && tableSource instanceof SQLExprTableSource) {
             String alias = this.as();
 

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/parser/SQLServerSelectParser.java
Patch:
@@ -21,7 +21,6 @@
 import com.alibaba.druid.sql.dialect.sqlserver.ast.SQLServerSelect;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.SQLServerSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.Top;
-import com.alibaba.druid.sql.parser.ParserException;
 import com.alibaba.druid.sql.parser.SQLExprParser;
 import com.alibaba.druid.sql.parser.SQLSelectParser;
 import com.alibaba.druid.sql.parser.Token;
@@ -36,7 +35,7 @@ public SQLServerSelectParser(SQLExprParser exprParser){
         super(exprParser);
     }
 
-    public SQLSelect select() throws ParserException {
+    public SQLSelect select()  {
         SQLServerSelect select = new SQLServerSelect();
 
         select.setQuery(query());
@@ -49,7 +48,7 @@ public SQLSelect select() throws ParserException {
         return select;
     }
 
-    public SQLSelectQuery query() throws ParserException {
+    public SQLSelectQuery query()  {
         if (lexer.token() == Token.LPAREN) {
             lexer.nextToken();
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -45,7 +45,7 @@ protected void acceptIdentifier(String text) {
         }
     }
 
-    protected String as() throws ParserException {
+    protected String as()  {
         String alias = null;
 
         if (lexer.token() == Token.AS) {

File: src/main/java/com/alibaba/druid/stat/DruidStatManagerFacade.java
Patch:
@@ -45,7 +45,7 @@
  * 
  * @author sandzhang<sandzhangtoo@gmail.com>
  */
-public class DruidStatManagerFacade {
+public final class DruidStatManagerFacade {
 
     private final static DruidStatManagerFacade instance    = new DruidStatManagerFacade();
     private boolean                             resetEnable = true;

File: src/main/java/com/alibaba/druid/stat/DruidStatService.java
Patch:
@@ -44,7 +44,7 @@
  * 
  * @author sandzhang<sandzhangtoo@gmail.com>
  */
-public class DruidStatService implements DruidStatServiceMBean {
+public final class DruidStatService implements DruidStatServiceMBean {
 
     private final static Log              LOG                    = LogFactory.getLog(DruidStatService.class);
 

File: src/main/java/com/alibaba/druid/stat/JdbcStatManager.java
Patch:
@@ -34,7 +34,7 @@
 import com.alibaba.druid.proxy.DruidDriver;
 import com.alibaba.druid.proxy.jdbc.DataSourceProxyImpl;
 
-public class JdbcStatManager implements JdbcStatManagerMBean {
+public final class JdbcStatManager implements JdbcStatManagerMBean {
 
     private final AtomicLong                                sqlIdSeed      = new AtomicLong(1000);
 

File: src/main/java/com/alibaba/druid/support/http/stat/WebAppStat.java
Patch:
@@ -706,7 +706,7 @@ public void computeUserAgent(String userAgent) {
             } else if (userAgent.indexOf("FreeBSD") != -1) {
                 osFreeBSDCount.incrementAndGet();
                 isBSD = true;
-            } else if (isLinux == false && userAgent.indexOf("Linux") != -1) {
+            } else if ((!isLinux) && userAgent.indexOf("Linux") != -1) {
                 osLinuxCount.incrementAndGet();
                 isLinux = true;
             }

File: src/main/java/com/alibaba/druid/support/jconsole/DruidSQLPanel.java
Patch:
@@ -91,7 +91,6 @@ public class DruidSQLPanel extends DruidPanel {
     		add("FetchRowCountHistogram");
     	}
     };  
-    private RowHeaderTable header;
 
 	public DruidSQLPanel() {
 		super();
@@ -104,7 +103,7 @@ protected void tableDataProcess(
 		tableModel = new DruidTableModel(data,SHOW_LIST);
 		table.setModel(tableModel);
 		
-		header = new RowHeaderTable(table,20);
+		RowHeaderTable header = new RowHeaderTable(table,20);
 		scrollPane.setRowHeaderView(header);
 	}   
 }

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -414,7 +414,7 @@ public static Object getValue(SQLExpr x) {
 
         if (x instanceof SQLNotExpr) {
             Object result = getValue(((SQLNotExpr) x).getExpr());
-            if (result != null && result instanceof Boolean) {
+            if (result instanceof Boolean) {
                 return !((Boolean) result).booleanValue();
             }
         }

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -537,7 +537,9 @@ protected void initCheck() throws SQLException {
             }
         } else if (JdbcUtils.MYSQL.equals(this.dbType)) {
             if (!this.isTestWhileIdle()) {
-                if (LOG.isWarnEnabled()) LOG.warn("Your dbType is mysql, recommend set testWhileIdle is true");
+                if (LOG.isWarnEnabled()) {
+                    LOG.warn("Your dbType is mysql, recommend set testWhileIdle is true");
+                }
             }
         }
     }

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLBetweenExpr.java
Patch:
@@ -50,8 +50,9 @@ public SQLBetweenExpr(SQLExpr testExpr, boolean not, SQLExpr beginExpr, SQLExpr
 
     public void output(StringBuffer buf) {
         this.testExpr.output(buf);
-        if (this.not) buf.append(" NOT BETWEEN ");
-        else {
+        if (this.not) {
+            buf.append(" NOT BETWEEN ");
+        } else {
             buf.append(" BETWEEN ");
         }
         this.beginExpr.output(buf);

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInListExpr.java
Patch:
@@ -72,8 +72,9 @@ public void setTargetList(List<SQLExpr> targetList) {
     public void output(StringBuffer buf) {
         this.expr.output(buf);
 
-        if (this.not) buf.append("NOT IN ");
-        else {
+        if (this.not) {
+            buf.append("NOT IN ");
+        } else {
             buf.append("IN ");
         }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleCommitStatement.java
Patch:
@@ -27,9 +27,7 @@ public class OracleCommitStatement extends OracleStatementImpl {
 
     @Override
     public void accept0(OracleASTVisitor visitor) {
-        if (visitor.visit(this)) {
-
-        }
+        visitor.visit(this);
         visitor.endVisit(this);
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGExprParser.java
Patch:
@@ -73,9 +73,9 @@ protected SQLAggregateExpr parseAggregateExpr(String methodName) throws ParserEx
 
             over.setOrderBy(parseOrderBy());
             
-            if (over.getOrderBy() != null) {
-            	//TODO window
-            }
+            // if (over.getOrderBy() != null) {
+            // //TODO window
+            // }
         	
         	accept(Token.RPAREN);
         	aggregateExpr.setOver(over);

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSelectParser.java
Patch:
@@ -147,9 +147,6 @@ public SQLSelectQuery query() throws ParserException {
 
             if (lexer.token() == Token.ROW || lexer.token() == Token.ROWS) {
                 lexer.nextToken();
-            } else {
-                // TODO
-                // throw new ParserException("expect 'ROW' or 'ROWS'");
             }
         }
 

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/Top.java
Patch:
@@ -55,9 +55,8 @@ public void setWithTies(boolean withTies) {
 
     @Override
     public void accept0(SQLServerASTVisitor visitor) {
-        if (visitor.visit(this)) {
-
-        }
+        visitor.visit(this);
+        visitor.endVisit(this);
     }
 
 }

File: src/main/java/com/alibaba/druid/sql/dialect/sqlserver/ast/expr/SQLServerObjectReferenceExpr.java
Patch:
@@ -60,9 +60,7 @@ public String getSimleName() {
 
     @Override
     public void accept0(SQLServerASTVisitor visitor) {
-        if (visitor.visit(this)) {
-
-        }
+        visitor.visit(this);
         visitor.endVisit(this);
     }
 

File: src/main/java/com/alibaba/druid/util/ConcurrentIdentityHashMap.java
Patch:
@@ -39,7 +39,7 @@
  * @param <K> the type of keys maintained by this map
  * @param <V> the type of mapped values
  */
-public final class ConcurrentIdentityHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {
+public class ConcurrentIdentityHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {
 
     /**
      * The default initial capacity for this table, used when not otherwise specified in a constructor.
@@ -853,7 +853,7 @@ public V putIfAbsent(K key, V value) {
      * @param m mappings to be stored in this map
      */
     @Override
-    public void putAll(Map<? extends K, ? extends V> m) {
+    public final void putAll(Map<? extends K, ? extends V> m) {
         for (Map.Entry<? extends K, ? extends V> e : m.entrySet()) {
             put(e.getKey(), e.getValue());
         }

File: src/main/java/com/alibaba/druid/support/http/util/IPRange.java
Patch:
@@ -193,7 +193,7 @@ public boolean equals(Object another) {
      * @param range String representation of the IP range.
      * @exception InvalidIPRangeException Throws this exception if the specified range is not a valid IP network range.
      */
-    protected void parseRange(String range) {
+    final void parseRange(String range) {
         if (range == null) {
             throw new IllegalArgumentException("Invalid IP range");
         }

File: src/main/java/com/alibaba/druid/support/json/JSONParser.java
Patch:
@@ -153,7 +153,7 @@ void accept(Token token) {
         throw new IllegalArgumentException("illegal token : " + token + ", expect " + token);
     }
 
-    void nextToken() {
+    final void nextToken() {
         if (index == Integer.MIN_VALUE) {
             token = Token.EOF;
             return;

File: src/main/java/com/alibaba/druid/util/ConcurrentIdentityHashMap.java
Patch:
@@ -39,7 +39,7 @@
  * @param <K> the type of keys maintained by this map
  * @param <V> the type of mapped values
  */
-public class ConcurrentIdentityHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {
+public final class ConcurrentIdentityHashMap<K, V> extends AbstractMap<K, V> implements ConcurrentMap<K, V> {
 
     /**
      * The default initial capacity for this table, used when not otherwise specified in a constructor.

File: src/main/java/com/alibaba/druid/wall/WallConfig.java
Patch:
@@ -90,7 +90,7 @@ public void setDir(String dir) {
         this.dir = dir;
     }
 
-    public void init() {
+    public final void init() {
         loadConfig(dir);
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSelect.java
Patch:
@@ -50,7 +50,9 @@ public void output(StringBuffer buf) {
         this.query.output(buf);
         buf.append(" ");
 
-        if (this.orderBy != null) this.orderBy.output(buf);
+        if (this.orderBy != null) {
+            this.orderBy.output(buf);
+        }
     }
 
     protected void accept0(SQLASTVisitor visitor) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlSelectParser.java
Patch:
@@ -228,7 +228,9 @@ protected void parseGroupBy(SQLSelectQueryBlock queryBlock) throws ParserExcepti
             SQLSelectGroupByClause groupBy = new SQLSelectGroupByClause();
             while (true) {
                 groupBy.getItems().add(this.exprParser.expr());
-                if (!(lexer.token() == (Token.COMMA))) break;
+                if (!(lexer.token() == (Token.COMMA))) {
+                    break;
+                }
                 lexer.nextToken();
             }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelect.java
Patch:
@@ -60,7 +60,9 @@ public void output(StringBuffer buf) {
         this.query.output(buf);
         buf.append(" ");
 
-        if (this.orderBy != null) this.orderBy.output(buf);
+        if (this.orderBy != null) {
+            this.orderBy.output(buf);
+        }
     }
 
     protected void accept0(SQLASTVisitor visitor) {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleUpdateParser.java
Patch:
@@ -67,7 +67,9 @@ public OracleUpdateStatement parseUpdateStatement() throws ParserException {
     }
 
     private void parseErrorLoging(OracleUpdateStatement update) throws ParserException {
-        if (identifierEquals("LOG")) throw new ParserException("TODO");
+        if (identifierEquals("LOG")) {
+            throw new ParserException("TODO");
+        }
     }
 
     private void parseReturn(OracleUpdateStatement update) throws ParserException {

File: src/main/java/com/alibaba/druid/support/console/Option.java
Patch:
@@ -32,7 +32,9 @@ public void addPrintDataType(int newValue) {
     }
 
     public static boolean isPrintHelp(String[] args) {
-        if (args == null ) return true;
+        if (args == null ) {
+            return true;
+        }
         for (String arg: args) {
             if (arg.equals("-help") ) {
                 return true;

File: src/main/java/com/alibaba/druid/support/spring/stat/SpringMethodInfo.java
Patch:
@@ -86,7 +86,9 @@ public static String getMethodSignature(Method method) {
         Class<?>[] params = method.getParameterTypes();
         for (int j = 0; j < params.length; j++) {
             sb.append(params[j].getName());
-            if (j < (params.length - 1)) sb.append(",");
+            if (j < (params.length - 1)) {
+                sb.append(",");
+            }
         }
         sb.append(")");
 

File: src/test/java/com/alibaba/druid/bvt/filter/FilterChainImplTest2.java
Patch:
@@ -22,6 +22,7 @@ protected void setUp() throws Exception {
         dataSource.setUrl("jdbc:mock:xxx");
         dataSource.setFilters("stat,log4j,wall");
         dataSource.getProxyFilters().add(new FilterAdapter() {} );
+        dataSource.setDbType("mysql");
 
         dataSource.init();
     }

File: src/test/java/com/alibaba/druid/bvt/filter/FilterChainImplTest.java
Patch:
@@ -200,7 +200,7 @@ public void test_getRowId() throws Exception {
         ResultSet rs = stmt.executeQuery();
         rs.next();
         
-        Assert.assertNull(rs.getURL(1));
+        Assert.assertNull(rs.getRowId(1));
         
         rs.close();
         stmt.close();
@@ -215,7 +215,7 @@ public void test_getRowId_1() throws Exception {
         ResultSet rs = stmt.executeQuery();
         rs.next();
         
-        Assert.assertNull(rs.getURL("1"));
+        Assert.assertNull(rs.getRowId("1"));
         
         rs.close();
         stmt.close();

File: src/test/java/com/alibaba/druid/bvt/filter/FilterChainImplTest.java
Patch:
@@ -200,7 +200,7 @@ public void test_getRowId() throws Exception {
         ResultSet rs = stmt.executeQuery();
         rs.next();
         
-        Assert.assertNull(rs.getURL(1));
+        Assert.assertNull(rs.getRowId(1));
         
         rs.close();
         stmt.close();
@@ -215,7 +215,7 @@ public void test_getRowId_1() throws Exception {
         ResultSet rs = stmt.executeQuery();
         rs.next();
         
-        Assert.assertNull(rs.getURL("1"));
+        Assert.assertNull(rs.getRowId("1"));
         
         rs.close();
         stmt.close();

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -215,10 +215,9 @@ public String toString() {
             buf.append("\"");
         }
 
-        PreparedStatementPool statmentPool = this.getStatementPool();
-        if (statmentPool != null && statmentPool.getMap().size() > 0) {
+        if (statementPool != null && statementPool.getMap().size() > 0) {
             buf.append("\", CachedStatementCount:");
-            buf.append(this.getStatementPool().getMap().size());
+            buf.append(statementPool.getMap().size());
         }
 
         buf.append("}");

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -215,10 +215,9 @@ public String toString() {
             buf.append("\"");
         }
 
-        PreparedStatementPool statmentPool = this.getStatementPool();
-        if (statmentPool != null && statmentPool.getMap().size() > 0) {
+        if (statementPool != null && statementPool.getMap().size() > 0) {
             buf.append("\", CachedStatementCount:");
-            buf.append(this.getStatementPool().getMap().size());
+            buf.append(statementPool.getMap().size());
         }
 
         buf.append("}");

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -70,8 +70,9 @@ public DruidConnectionHolder(DruidAbstractDataSource dataSource, Connection conn
         try {
             this.underlyingTransactionIsolation = conn.getTransactionIsolation();
         } catch (SQLException e) {
-            if ("com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException".equals(e.getClass().getName()))
-            ;
+            if (!"com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException".equals(e.getClass().getName())) {
+                throw e;
+            }
         }
 
         this.defaultHoldability = underlyingHoldability;

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest8.java
Patch:
@@ -43,6 +43,8 @@ public void testInitError() throws Exception {
         }
         Assert.assertNotNull(error);
         Assert.assertTrue(dataSource.getCreateErrorCount() > 0);
+        
+        dataSource.getCompositeData();
     }
 
 }

File: src/main/java/com/alibaba/druid/pool/DruidConnectionHolder.java
Patch:
@@ -70,8 +70,9 @@ public DruidConnectionHolder(DruidAbstractDataSource dataSource, Connection conn
         try {
             this.underlyingTransactionIsolation = conn.getTransactionIsolation();
         } catch (SQLException e) {
-            if ("com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException".equals(e.getClass().getName()))
-            ;
+            if (!"com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException".equals(e.getClass().getName())) {
+                throw e;
+            }
         }
 
         this.defaultHoldability = underlyingHoldability;

File: src/main/java/com/alibaba/druid/pool/DruidPooledPreparedStatement.java
Patch:
@@ -505,7 +505,7 @@ public int[] executeBatch() throws SQLException {
 
         conn.beforeExecute();
         try {
-            return super.executeBatch();
+            return stmt.executeBatch();
         } catch (Throwable t) {
             throw checkException(t);
         } finally {

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1257,8 +1257,8 @@ public int removeAbandoned() {
             long timeMillis = currentMillis - activeInfo.getConnectTime();
 
             if (timeMillis >= removeAbandonedTimeoutMillis) {
-                pooledConnection.abandond();
                 JdbcUtils.close(pooledConnection);
+                pooledConnection.abandond();
                 removeAbandonedCount++;
                 removeCount++;
                 abandonedList.add(pooledConnection);

File: src/main/java/com/alibaba/druid/support/json/JSONWriter.java
Patch:
@@ -206,6 +206,8 @@ public void writeString(String text) {
                 write("\\r");
             } else if (c == '\\') {
                 write("\\\\");
+            } else if (c == '\t') {
+                write("\\t");
             } else {
                 write(c);
             }

File: src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java
Patch:
@@ -23,6 +23,7 @@
 import java.sql.CallableStatement;
 import java.sql.Clob;
 import java.sql.NClob;
+import java.sql.PreparedStatement;
 import java.sql.Ref;
 import java.sql.ResultSet;
 import java.sql.RowId;
@@ -1076,7 +1077,7 @@ public <T> T getObject(String parameterName, Class<T> type) throws SQLException
 
     @SuppressWarnings("unchecked")
     public <T> T unwrap(Class<T> iface) throws SQLException {
-        if (iface == CallableStatement.class) {
+        if (iface == CallableStatement.class || iface == PreparedStatement.class) {
             if (stmt instanceof CallableStatementProxy) {
                 return stmt.unwrap(iface);
             }

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxyImpl.java
Patch:
@@ -612,7 +612,7 @@ public <T> T getObject(String parameterName, Class<T> type) throws SQLException
 
     @SuppressWarnings("unchecked")
     public <T> T unwrap(Class<T> iface) throws SQLException {
-        if (iface == PreparedStatement.class) {
+        if (iface == PreparedStatement.class || iface == CallableStatement.class) {
             return (T) statement;
         }
         

File: src/main/java/com/alibaba/druid/pool/DruidPooledCallableStatement.java
Patch:
@@ -23,6 +23,7 @@
 import java.sql.CallableStatement;
 import java.sql.Clob;
 import java.sql.NClob;
+import java.sql.PreparedStatement;
 import java.sql.Ref;
 import java.sql.ResultSet;
 import java.sql.RowId;
@@ -1076,7 +1077,7 @@ public <T> T getObject(String parameterName, Class<T> type) throws SQLException
 
     @SuppressWarnings("unchecked")
     public <T> T unwrap(Class<T> iface) throws SQLException {
-        if (iface == CallableStatement.class) {
+        if (iface == CallableStatement.class || iface == PreparedStatement.class) {
             if (stmt instanceof CallableStatementProxy) {
                 return stmt.unwrap(iface);
             }

File: src/main/java/com/alibaba/druid/proxy/jdbc/CallableStatementProxyImpl.java
Patch:
@@ -612,7 +612,7 @@ public <T> T getObject(String parameterName, Class<T> type) throws SQLException
 
     @SuppressWarnings("unchecked")
     public <T> T unwrap(Class<T> iface) throws SQLException {
-        if (iface == PreparedStatement.class) {
+        if (iface == PreparedStatement.class || iface == CallableStatement.class) {
             return (T) statement;
         }
         

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getPoolingPeakTime.java
Patch:
@@ -29,6 +29,7 @@ protected void tearDown() throws Exception {
 
     public void test_error() throws Exception {
         Assert.assertNull(dataSource.getPoolingPeakTime());
+        Assert.assertNull(dataSource.getActivePeakTime());
         
         Connection conn = dataSource.getConnection();
         conn.close();

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getPoolingPeakTime.java
Patch:
@@ -29,6 +29,7 @@ protected void tearDown() throws Exception {
 
     public void test_error() throws Exception {
         Assert.assertNull(dataSource.getPoolingPeakTime());
+        Assert.assertNull(dataSource.getActivePeakTime());
         
         Connection conn = dataSource.getConnection();
         conn.close();

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait.java
Patch:
@@ -77,6 +77,7 @@ public void run() {
 
         endLatch.await(100, TimeUnit.MILLISECONDS);
         
+        Thread.sleep(10);
         Assert.assertEquals(0, dataSource.getNotEmptyWaitThreadCount());
         Assert.assertEquals(10, dataSource.getNotEmptyWaitThreadPeak());
     }

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait.java
Patch:
@@ -77,6 +77,7 @@ public void run() {
 
         endLatch.await(100, TimeUnit.MILLISECONDS);
         
+        Thread.sleep(10);
         Assert.assertEquals(0, dataSource.getNotEmptyWaitThreadCount());
         Assert.assertEquals(10, dataSource.getNotEmptyWaitThreadPeak());
     }

File: src/test/java/com/alibaba/druid/bvt/pool/TestGraceShutdown.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.sql.Connection;
 import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
 
 import junit.framework.Assert;
 import junit.framework.TestCase;
@@ -91,6 +92,6 @@ public void run() {
             }
         }.start();
 
-        endLatch.await();
+        Assert.assertTrue(endLatch.await(60, TimeUnit.SECONDS));
     }
 }

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getPoolingPeakTime.java
Patch:
@@ -34,5 +34,6 @@ public void test_error() throws Exception {
         conn.close();
         
         Assert.assertNotNull(dataSource.getPoolingPeakTime());
+        Assert.assertNotNull(dataSource.getActivePeakTime());
     }
 }

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait2.java
Patch:
@@ -82,6 +82,7 @@ public void run() {
         errorThreadEndLatch.await(100, TimeUnit.MILLISECONDS);
         
         Assert.assertEquals(1, maxWaitErrorCount.get());
+        Assert.assertTrue(dataSource.getNotEmptySignalCount() > 0);
 
         conn.close();
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_getPoolingPeakTime.java
Patch:
@@ -34,5 +34,6 @@ public void test_error() throws Exception {
         conn.close();
         
         Assert.assertNotNull(dataSource.getPoolingPeakTime());
+        Assert.assertNotNull(dataSource.getActivePeakTime());
     }
 }

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait2.java
Patch:
@@ -82,6 +82,7 @@ public void run() {
         errorThreadEndLatch.await(100, TimeUnit.MILLISECONDS);
         
         Assert.assertEquals(1, maxWaitErrorCount.get());
+        Assert.assertTrue(dataSource.getNotEmptySignalCount() > 0);
 
         conn.close();
 

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterAfterResetTest.java
Patch:
@@ -66,18 +66,18 @@ public void test_stat() throws Exception {
 
             Histogram histogram = sqlStat.getExecuteAndResultHoldTimeHistogram();
             Assert.assertEquals("first failed", 1,
-                                histogram.getValue(0) + histogram.getValue(1) + histogram.getValue(2));
+                                histogram.getSum());
 
             rs.close();
 
             Assert.assertEquals("second failed", 1,
-                                histogram.getValue(0) + histogram.getValue(1) + histogram.getValue(2));
+                                histogram.getSum());
 
             stmt.close();
 
             conn.close();
 
-            Assert.assertEquals(1, histogram.getValue(0) + histogram.getValue(1) + histogram.getValue(2));
+            Assert.assertEquals(1, histogram.getSum());
         }
 
         JdbcStatManager.getInstance().reset();

File: src/test/java/com/alibaba/druid/bvt/filter/StatFilterAfterResetTest.java
Patch:
@@ -66,18 +66,18 @@ public void test_stat() throws Exception {
 
             Histogram histogram = sqlStat.getExecuteAndResultHoldTimeHistogram();
             Assert.assertEquals("first failed", 1,
-                                histogram.getValue(0) + histogram.getValue(1) + histogram.getValue(2));
+                                histogram.getSum());
 
             rs.close();
 
             Assert.assertEquals("second failed", 1,
-                                histogram.getValue(0) + histogram.getValue(1) + histogram.getValue(2));
+                                histogram.getSum());
 
             stmt.close();
 
             conn.close();
 
-            Assert.assertEquals(1, histogram.getValue(0) + histogram.getValue(1) + histogram.getValue(2));
+            Assert.assertEquals(1, histogram.getSum());
         }
 
         JdbcStatManager.getInstance().reset();

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait.java
Patch:
@@ -56,6 +56,7 @@ public void run() {
                     startLatch.countDown();
                     try {
                         Connection conn = dataSource.getConnection();
+                        Thread.sleep(1);
                         conn.close();
                     } catch (Exception e) {
                         //e.printStackTrace();
@@ -75,6 +76,7 @@ public void run() {
         conn.close();
 
         endLatch.await(100, TimeUnit.MILLISECONDS);
+        
         Assert.assertEquals(0, dataSource.getNotEmptyWaitThreadCount());
         Assert.assertEquals(10, dataSource.getNotEmptyWaitThreadPeak());
     }

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_notEmptyWait.java
Patch:
@@ -56,6 +56,7 @@ public void run() {
                     startLatch.countDown();
                     try {
                         Connection conn = dataSource.getConnection();
+                        Thread.sleep(1);
                         conn.close();
                     } catch (Exception e) {
                         //e.printStackTrace();
@@ -75,6 +76,7 @@ public void run() {
         conn.close();
 
         endLatch.await(100, TimeUnit.MILLISECONDS);
+        
         Assert.assertEquals(0, dataSource.getNotEmptyWaitThreadCount());
         Assert.assertEquals(10, dataSource.getNotEmptyWaitThreadPeak());
     }

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_autocommit.java
Patch:
@@ -18,7 +18,7 @@
  * 
  * @author wenshao<szujobs@hotmail.com>
  */
-public class DruidDataSourceTest6 extends TestCase {
+public class DruidDataSourceTest_autocommit extends TestCase {
 
     private DruidDataSource dataSource;
 
@@ -27,6 +27,7 @@ protected void setUp() throws Exception {
         dataSource.setUrl("jdbc:mock:xxx");
         dataSource.setTestOnBorrow(false);
         dataSource.setDefaultAutoCommit(true);
+        dataSource.setInitialSize(1);
         dataSource.getProxyFilters().add(new FilterAdapter() {
             public ConnectionProxy connection_connect(FilterChain chain, Properties info) throws SQLException {
                 ConnectionProxy conn = chain.connection_connect(info);

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive2.java
Patch:
@@ -10,7 +10,7 @@
  * 
  * @author wenshao<szujobs@hotmail.com>
  */
-public class DruidDataSourceTest4 extends TestCase {
+public class DruidDataSourceTest_maxActive2 extends TestCase {
 
     private DruidDataSource dataSource;
 

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceTest_maxActive3.java
Patch:
@@ -10,7 +10,7 @@
  * 
  * @author wenshao<szujobs@hotmail.com>
  */
-public class DruidDataSourceTest5 extends TestCase {
+public class DruidDataSourceTest_maxActive3 extends TestCase {
 
     private DruidDataSource dataSource;
 
@@ -19,7 +19,8 @@ protected void setUp() throws Exception {
         dataSource.setUrl("jdbc:mock:xxx");
         dataSource.setTestOnBorrow(false);
         dataSource.setFilters("stat");
-        dataSource.setInitialSize(100);
+        dataSource.setMinIdle(100);
+        dataSource.setMaxActive(10);
 
     }
 

File: src/main/java/com/alibaba/druid/mock/MockResultSet.java
Patch:
@@ -77,7 +77,7 @@ public synchronized boolean previous() throws SQLException {
             throw new SQLException();
         }
 
-        if (rowIndex > 0) {
+        if (rowIndex >= 0) {
             rowIndex--;
             return true;
         }

File: src/test/java/com/alibaba/druid/bvt/pool/DumpTest.java
Patch:
@@ -123,4 +123,7 @@ public void test_getStatData() throws Exception {
         Assert.assertNotNull(dataSource.getSqlStat((int) sqlStat.getId()));
     }
 
+    public void test_getReference() throws Exception {
+        dataSource.getReference();
+    }
 }

File: src/main/java/com/alibaba/druid/proxy/jdbc/WrapperProxy.java
Patch:
@@ -27,8 +27,5 @@ public interface WrapperProxy extends Wrapper {
 
     Object getRawObject();
 
-    /**
-     * @return
-     */
     Map<String, Object> getAttributes();
 }

File: src/main/java/com/alibaba/druid/support/logging/Log4jImpl.java
Patch:
@@ -37,10 +37,12 @@ public boolean isDebugEnabled() {
     }
 
     public void error(String s, Throwable e) {
+        errorCount++;
         log.log(callerFQCN, Level.ERROR, s, e);
     }
 
     public void error(String s) {
+        errorCount++;
         log.log(callerFQCN, Level.ERROR, s, null);
     }
 

File: src/main/java/com/alibaba/druid/support/logging/Log4jImpl.java
Patch:
@@ -37,10 +37,12 @@ public boolean isDebugEnabled() {
     }
 
     public void error(String s, Throwable e) {
+        errorCount++;
         log.log(callerFQCN, Level.ERROR, s, e);
     }
 
     public void error(String s) {
+        errorCount++;
         log.log(callerFQCN, Level.ERROR, s, null);
     }
 

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallMultiStatementTest.java
Patch:
@@ -22,7 +22,7 @@
 import com.alibaba.druid.wall.WallUtils;
 
 /**
- * 测试禁止多条语句执行的场�?
+ * 测试禁止多条语句执行的场景
  * @author admin
  *
  */

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java
Patch:
@@ -57,7 +57,7 @@ public void test_idle2() throws Exception {
         // ManagementFactory.getPlatformMBeanServer().registerMBean(dataSource, new
         // ObjectName("com.alibaba:type=DataSource"));
 
-        // 第一次创建连�?
+        // 第一次创建连接
         {
             Assert.assertEquals(0, dataSource.getCreateCount());
             Assert.assertEquals(0, dataSource.getActiveCount());
@@ -76,7 +76,7 @@ public void test_idle2() throws Exception {
         }
 
         {
-            // 并发创建14�?
+            // 并发创建14个
             concurrent(driver, dataSource, 30);
         }
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -58,8 +58,7 @@ protected void tearDown() throws Exception {
     }
 
     public void test_idle2() throws Exception {
-
-        // 第一次创建连接
+        // first connect
         {
             Assert.assertEquals(0, dataSource.getCreateCount());
             Assert.assertEquals(0, dataSource.getActiveCount());

File: src/test/java/com/alibaba/druid/bvt/filter/wall/SQLServerWallTest.java
Patch:
@@ -55,9 +55,9 @@ protected void tearDown() throws Exception {
     
     public void test_stuff() throws Exception {
         Assert.assertFalse(WallUtils.isValidateSqlServer("SELECT @@version"));
-        Assert.assertFalse(WallUtils.isValidateSqlServer("SELECT 1 �?comment"));
+        Assert.assertFalse(WallUtils.isValidateSqlServer("SELECT 1 — comment"));
         Assert.assertFalse(WallUtils.isValidateSqlServer("SELECT /*comment*/1"));
-        Assert.assertFalse(WallUtils.isValidateSqlServer("WAITFOR DELAY �?:0:5�?"));
-        Assert.assertFalse(WallUtils.isValidateSqlServer("BULK INSERT mydata FROM ‘c:boot.ini�?"));                  
+        Assert.assertFalse(WallUtils.isValidateSqlServer("WAITFOR DELAY ’0:0:5′ "));
+        Assert.assertFalse(WallUtils.isValidateSqlServer("BULK INSERT mydata FROM ‘c:boot.ini’;"));                  
     }    
 }
\ No newline at end of file

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallDeleteTest.java
Patch:
@@ -23,7 +23,7 @@
 import com.alibaba.druid.wall.WallUtils;
 
 /**
- * 这个场景，检�?
+ * 这个场景，检测
  * @author wenshao
  *
  */

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallUpdateTest3.java
Patch:
@@ -23,7 +23,7 @@
 import com.alibaba.druid.wall.WallUtils;
 
 /**
- * 这个场景，检�?
+ * 这个场景，检测
  * @author wenshao
  *
  */

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3.java
Patch:
@@ -61,7 +61,7 @@ public void test_idle2() throws Exception {
                                                                  new ObjectName(
                                                                                 "com.alibaba:type=DataSource,name=oracle"));
 
-        // 第一次创建连�?
+        // 第一次创建连接
         {
             Assert.assertEquals(0, dataSource.getCreateCount());
             Assert.assertEquals(0, dataSource.getActiveCount());
@@ -80,7 +80,7 @@ public void test_idle2() throws Exception {
         }
 
         {
-            // 并发创建14�?
+            // 并发创建14个
             int count = 14;
             Connection[] connections = new Connection[count];
             for (int i = 0; i < count; ++i) {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -59,7 +59,7 @@ protected void tearDown() throws Exception {
 
     public void test_idle2() throws Exception {
 
-        // 第一次创建连�?
+        // 第一次创建连接
         {
             Assert.assertEquals(0, dataSource.getCreateCount());
             Assert.assertEquals(0, dataSource.getActiveCount());

File: src/test/java/com/alibaba/druid/bvt/pool/TestRemoveAbandoned.java
Patch:
@@ -61,7 +61,7 @@ public void test_removeAbandoned() throws Exception {
         Assert.assertEquals(1, dataSource.getActiveCount());
         Assert.assertEquals(0, dataSource.getPoolingCount());
 
-        // 超时之后，连接自动关�?
+        // 超时之后，连接自动关闭
         Thread.sleep(100);
         Assert.assertTrue(conn.isClosed());
 

File: src/test/java/com/alibaba/druid/pool/DruidTest.java
Patch:
@@ -64,7 +64,7 @@ public static void initDS(String connectURI, String username, String pswd, Strin
         ds.setUsername(username);
         ds.setPassword(pswd);
         ds.setUrl(connectURI);
-        ds.setInitialSize(initialSize); // 初始的连接数�?
+        ds.setInitialSize(initialSize); // 初始的连接数；
         ds.setMaxActive(maxActive);
         ds.setMaxIdle(maxIdle);
         ds.setMinIdle(minIdle);

File: src/test/java/com/alibaba/druid/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -56,7 +56,7 @@ public void test_idle2() throws Exception {
         // ManagementFactory.getPlatformMBeanServer().registerMBean(dataSource,
         // new ObjectName("com.alibaba:type=DataSource"));
 
-        // 第一次创建连�?
+        // 第一次创建连接
         {
             Assert.assertEquals(0, dataSource.getCreateCount());
             Assert.assertEquals(0, dataSource.getActiveCount());

File: src/test/java/com/alibaba/druid/pool/TestIdle3_Concurrent_Starvation_Longtime.java
Patch:
@@ -61,7 +61,7 @@ protected void tearDown() throws Exception {
 
     public void test_idle2() throws Exception {
 
-        // 第一次创建连�?
+        // 第一次创建连接
         {
             Assert.assertEquals(0, dataSource.getCreateCount());
             Assert.assertEquals(0, dataSource.getActiveCount());

File: src/test/java/com/alibaba/druid/pool/ui/DruidDataSourceUIManager.java
Patch:
@@ -127,8 +127,8 @@ public class DruidDataSourceUIManager extends JFrame {
     public DruidDataSourceUIManager(){
         this.setLayout(new BorderLayout());
 
-        Toolkit kit = Toolkit.getDefaultToolkit(); // 定义工具�?
-        Dimension screenSize = kit.getScreenSize(); // 获取屏幕的尺�?
+        Toolkit kit = Toolkit.getDefaultToolkit(); // 定义工具包
+        Dimension screenSize = kit.getScreenSize(); // 获取屏幕的尺寸
         int screenWidth = screenSize.width / 2; // 获取屏幕的宽
         int screenHeight = screenSize.height / 2; // 获取屏幕的高
         int height = this.getHeight();

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1515,6 +1515,8 @@ public void closePreapredStatement(PreparedStatementHolder stmtHolder) {
             return;
         }
         closedPreparedStatementCount.incrementAndGet();
+        decrementCachedPreparedStatementCount();
+        incrementCachedPreparedStatementDeleteCount();
 
         JdbcUtils.close(stmtHolder.getStatement());
     }

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -159,8 +159,6 @@ public void closeRemovedStatement(PreparedStatementHolder holder) throws SQLExce
             OracleUtils.exitImplicitCacheToClose(holder.getStatement());
         }
         dataSource.closePreapredStatement(holder);
-        dataSource.decrementCachedPreparedStatementCount();
-        dataSource.incrementCachedPreparedStatementDeleteCount();
     }
 
     public Map<PreparedStatementKey, PreparedStatementHolder> getMap() {

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -1515,6 +1515,8 @@ public void closePreapredStatement(PreparedStatementHolder stmtHolder) {
             return;
         }
         closedPreparedStatementCount.incrementAndGet();
+        decrementCachedPreparedStatementCount();
+        incrementCachedPreparedStatementDeleteCount();
 
         JdbcUtils.close(stmtHolder.getStatement());
     }

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -159,8 +159,6 @@ public void closeRemovedStatement(PreparedStatementHolder holder) throws SQLExce
             OracleUtils.exitImplicitCacheToClose(holder.getStatement());
         }
         dataSource.closePreapredStatement(holder);
-        dataSource.decrementCachedPreparedStatementCount();
-        dataSource.incrementCachedPreparedStatementDeleteCount();
     }
 
     public Map<PreparedStatementKey, PreparedStatementHolder> getMap() {

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleOrderByItem;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 @SuppressWarnings("serial")
@@ -52,7 +51,7 @@ public void output(StringBuffer buf) {
             if (i != 0) {
                 buf.append(", ");
             }
-            ((OracleOrderByItem) this.items.get(i)).output(buf);
+            this.items.get(i).output(buf);
         }
     }
 }

File: src/main/java/com/alibaba/druid/sql/ast/SQLOrderBy.java
Patch:
@@ -19,7 +19,6 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OracleOrderByItem;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
 @SuppressWarnings("serial")
@@ -52,7 +51,7 @@ public void output(StringBuffer buf) {
             if (i != 0) {
                 buf.append(", ");
             }
-            ((OracleOrderByItem) this.items.get(i)).output(buf);
+            this.items.get(i).output(buf);
         }
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleInsertTest8.java
Patch:
@@ -34,7 +34,7 @@ public void test_0() throws Exception {
                      + " MEMBER_DEPT_CN, LINK_EMAIL, STATUS, AV_PROVIDER, AV_ORIGIN)"
                      + " values (1000236058, sysdate, sysdate, 1300904670, '��������5''TW'"
                      + ", 'Yunnan', 'sadf', '4r7V', 'fdgtg', 'M', '�����info_name4', 'Fnameinfo_name4'"
-                     + ", '33', '4444', '6666', '���fgsgsdfg', 'fggtgth', '�������������?, null, 'zeus'" + ")";
+                     + ", '33', '4444', '6666', '���fgsgsdfg', 'fggtgth', '�������������', null, 'zeus'" + ")";
 
         OracleStatementParser parser = new OracleStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleInsertTest8.java
Patch:
@@ -34,7 +34,7 @@ public void test_0() throws Exception {
                      + " MEMBER_DEPT_CN, LINK_EMAIL, STATUS, AV_PROVIDER, AV_ORIGIN)"
                      + " values (1000236058, sysdate, sysdate, 1300904670, '��������5''TW'"
                      + ", 'Yunnan', 'sadf', '4r7V', 'fdgtg', 'M', '�����info_name4', 'Fnameinfo_name4'"
-                     + ", '33', '4444', '6666', '���fgsgsdfg', 'fggtgth', '�������������?, null, 'zeus'" + ")";
+                     + ", '33', '4444', '6666', '���fgsgsdfg', 'fggtgth', '�������������', null, 'zeus'" + ")";
 
         OracleStatementParser parser = new OracleStatementParser(sql);
         List<SQLStatement> statementList = parser.parseStatementList();

File: src/main/java/com/alibaba/druid/proxy/DruidDriver.java
Patch:
@@ -144,7 +144,7 @@ public Connection connect(String url, Properties info) throws SQLException {
     }
 
     /**
-     * 参数定义�?com.alibaba.druid.log.LogFilter=filter com.alibaba.druid.log.LogFilter.p1=prop-value
+     * 参数定义： com.alibaba.druid.log.LogFilter=filter com.alibaba.druid.log.LogFilter.p1=prop-value
      * com.alibaba.druid.log.LogFilter.p2=prop-value
      * 
      * @param url

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStat.java
Patch:
@@ -394,7 +394,7 @@ public void addExecuteTime(long nanoSpan) {
             long current = executeSpanNanoMax.get();
             if (current < nanoSpan) {
                 if (executeSpanNanoMax.compareAndSet(current, nanoSpan)) {
-                    // 可能不准确，但是绝大多数情况下都会正确，性能换取�?���?
+                	// 可能不准确，但是绝大多数情况下都会正确，性能换取一致性
                     executeNanoSpanMaxOccurTime = System.currentTimeMillis();
 
                     break;

File: src/main/java/com/alibaba/druid/util/ServletPathMatcher.java
Patch:
@@ -19,7 +19,7 @@ public class ServletPathMatcher implements PatternMatcher {
 
     /**
      * <p>
-     * three type: endsWithMatch(eg. /xxx*=/xxx/xyz), startsWithMatch(eg. *.xxx=abc.xxx), equals(eg. /xxx=/xxx)�?
+     * three type: endsWithMatch(eg. /xxx*=/xxx/xyz), startsWithMatch(eg. *.xxx=abc.xxx), equals(eg. /xxx=/xxx).
      * </p>
      * <b>Notice</b>: *xxx* will match *xxxyyyy. endsWithMatch first.
      */

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -526,8 +526,8 @@ protected void initCheck() throws SQLException {
                 this.getConnectProperties().setProperty("oracle.jdbc.FreeMemoryOnEnterImplicitCache", "true");
             }
         } else if (JdbcUtils.MYSQL.equals(this.dbType)) {
-            if (LOG.isWarnEnabled()) {
-                LOG.warn("Your dbType is mysql, recommend set testWhileIdle is true and validationQuery shoud not be null");
+            if (!this.isTestWhileIdle()) {
+                if (LOG.isWarnEnabled()) LOG.warn("Your dbType is mysql, recommend set testWhileIdle is true");
             }
         }
     }

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PoolableStatementTest2.java
Patch:
@@ -829,7 +829,7 @@ public void test_wasNull() throws Exception {
 
     public void test_executeQuery() throws Exception {
         Connection conn = dataSource.getConnection();
-        PreparedStatement stmt = conn.prepareStatement("SELELCT 1");
+        PreparedStatement stmt = conn.prepareStatement("SELECT 1");
 
         stmt.executeQuery();
         ((DruidPooledStatement) stmt).getStatement().close();
@@ -850,7 +850,7 @@ public void test_executeQuery() throws Exception {
 
     public void test_executeUpdate_4() throws Exception {
         Connection conn = dataSource.getConnection();
-        PreparedStatement stmt = conn.prepareStatement("SELELCT 1");
+        PreparedStatement stmt = conn.prepareStatement("SELECT 1");
 
         stmt.executeQuery();
         ((DruidPooledStatement) stmt).getStatement().close();

File: src/main/java/com/alibaba/druid/mock/handler/MySqlMockExecuteHandlerImpl.java
Patch:
@@ -6,8 +6,6 @@
 import java.sql.Types;
 import java.util.List;
 
-import org.apache.derby.iapi.types.SQLVarchar;
-
 import com.alibaba.druid.mock.MockPreparedStatement;
 import com.alibaba.druid.mock.MockResultSet;
 import com.alibaba.druid.mock.MockResultSetMetaData;

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1776,6 +1776,7 @@ public Map<String, Object> getStatData() {
 
         dataMap.put("ConnectionHoldTimeHistogram", this.getDataSourceStat().getConnectionHoldHistogram().toArray());
         dataMap.put("RemoveAbandoned", this.isRemoveAbandoned());
+        dataMap.put("ClobOpenCount", this.getDataSourceStat().getClobOpenCount());
 
         return dataMap;
     }

File: src/test/java/com/alibaba/druid/bvt/pool/TestActiveTrace.java
Patch:
@@ -18,7 +18,7 @@ protected void setUp() throws Exception {
 
         dataSource = new DruidDataSource();
         dataSource.setRemoveAbandoned(true);
-        dataSource.setRemoveAbandonedTimeoutMillis(10);
+        dataSource.setRemoveAbandonedTimeoutMillis(100);
         dataSource.setLogAbandoned(true);
         dataSource.setTimeBetweenEvictionRunsMillis(10);
         dataSource.setMinEvictableIdleTimeMillis(300 * 1000);

File: src/test/java/com/alibaba/druid/bvt/pool/TestConcurrent.java
Patch:
@@ -183,7 +183,7 @@ public void run() {
 
         dataSource.shrink();
         Assert.assertEquals(0, dataSource.getActiveCount());
-        Assert.assertEquals(dataSource.getMinIdle(), dataSource.getPoolingCount());
+        Assert.assertEquals("minIdle != poolingCount", dataSource.getMinIdle(), dataSource.getPoolingCount());
 
         System.out.println(threadCount + "-threads start");
         startLatch.countDown();

File: src/test/java/com/alibaba/druid/bvt/pool/TestConnectTimeout.java
Patch:
@@ -25,7 +25,7 @@ protected void setUp() throws Exception {
         dataSource.setFilters("stat");
         dataSource.setMaxOpenPreparedStatements(30);
         dataSource.setMaxActive(4);
-        dataSource.setMaxWait(100);
+        dataSource.setMaxWait(1000);
         dataSource.setMinIdle(0);
         dataSource.setInitialSize(1);
         dataSource.init();

File: src/main/java/com/alibaba/druid/support/DruidStatJSONService.java
Patch:
@@ -152,7 +152,7 @@ private Map<String, Object> getSpringMethodStatData(String clazz, String method)
 
     private List<Map<String, Object>> getWebSessionStatDataList(Map<String, String> parameters) {
         List<Map<String, Object>> array = WebAppStatManager.getInstance().getSessionStatData();
-        return array;
+        return comparatorOrderBy(array, parameters);
     }
 
     private List<Map<String, Object>> comparatorOrderBy(List<Map<String, Object>> array, Map<String, String> parameters) {

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -96,6 +96,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             int index = requestURI.indexOf(";jsessionid=");
             if (index != -1) {
                 requestURI = requestURI.substring(0, index);
+                uriStat = webAppStat.getURIStat(requestURI, false);
             }
         }
 

File: src/main/java/com/alibaba/druid/support/JSONDruidStatService.java
Patch:
@@ -62,8 +62,6 @@ public String service(String url) {
 
         if (url.equals("/reset-all.json")) {
             statManagerFacade.resetAll();
-            SpringStatManager.getInstance().resetStat();
-            WebAppStatManager.getInstance().resetStat();
 
             return returnJSONResult(RESULT_CODE_SUCCESS, null);
         }

File: src/main/java/com/alibaba/druid/support/spring/stat/SpringMethodInfo.java
Patch:
@@ -56,7 +56,7 @@ public boolean equals(Object obj) {
         }
         
         for (int i = 0; i < method.getParameterTypes().length; ++i) {
-            if (method.getParameterTypes()[i].getName().equals(other.method.getParameterTypes()[i].getName())) {
+            if (!method.getParameterTypes()[i].getName().equals(other.method.getParameterTypes()[i].getName())) {
                 return false;
             }
         }

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -140,7 +140,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             if (uriStat == null) {
                 int status = responseWrapper.getStatus();
                 if (status == HttpServletResponse.SC_NOT_FOUND) {
-                    String errorUrl = contextPath + "/error_" + status;
+                    String errorUrl = contextPath + "error_" + status;
                     uriStat = webAppStat.getURIStat(errorUrl, true);
                 } else {
                     uriStat = webAppStat.getURIStat(requestURI, true);

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStat.java
Patch:
@@ -225,8 +225,6 @@ public void addUpdateCount(int delta) {
         }
 
         this.updateCountHistogram.record(delta);
-        this.fetchRowCountHistogram.record(0);
-
     }
 
     public long getUpdateCount() {

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -46,8 +46,6 @@
 import javax.security.auth.callback.PasswordCallback;
 import javax.sql.DataSource;
 
-import org.h2.util.StringUtils;
-
 import com.alibaba.druid.filter.Filter;
 import com.alibaba.druid.filter.FilterChainImpl;
 import com.alibaba.druid.filter.FilterManager;
@@ -65,6 +63,7 @@
 import com.alibaba.druid.util.Histogram;
 import com.alibaba.druid.util.IOUtils;
 import com.alibaba.druid.util.JdbcUtils;
+import com.alibaba.druid.util.StringUtils;
 
 /**
  * @author wenshao<szujobs@hotmail.com>

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -34,8 +34,6 @@
 
 public class WebStatFilter implements Filter {
 
-    public final static int              STATUS_NOT_FOUND                  = 404;
-
     public final static String           PARAM_NAME_SESSION_STAT_ENABLE    = "sessionStatEnable";
     public final static String           PARAM_NAME_SESSION_STAT_MAX_COUNT = "sessionStatMaxCount";
     public static final String           PARAM_NAME_EXCLUSIONS             = "exclusions";
@@ -134,7 +132,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             }
 
             if (uriStat == null) {
-                if (responseWrapper.getStatus() == STATUS_NOT_FOUND) {
+                if (responseWrapper.getStatus() == HttpServletResponse.SC_NOT_FOUND) {
                     uriStat = webAppStat.getURIStat("error_404", true);
                 } else {
                     uriStat = webAppStat.getURIStat(requestURI, true);

File: src/main/java/com/alibaba/druid/support/http/stat/WebURIStat.java
Patch:
@@ -42,7 +42,7 @@ public String getUri() {
         return uri;
     }
 
-    public void beforeInvoke(String uri) {
+    public void beforeInvoke() {
         currentLocal.set(this);
 
         int running = runningCount.incrementAndGet();
@@ -63,9 +63,9 @@ public void beforeInvoke(String uri) {
         requestCount.incrementAndGet();
     }
 
-    public void afterInvoke(Throwable error, long nanoSpan) {
+    public void afterInvoke(Throwable error, long nanos) {
         runningCount.decrementAndGet();
-        requestTimeNano.addAndGet(nanoSpan);
+        requestTimeNano.addAndGet(nanos);
 
         {
             WebRequestStat localStat = WebRequestStat.current();

File: src/test/java/com/alibaba/druid/bvt/filter/wall/OracleWallTest.java
Patch:
@@ -12,5 +12,6 @@ public void testWall() throws Exception {
         Assert.assertFalse(WallUtils.isValidateOracle("select f1, f2 from t union select 1, 2"));
         
         Assert.assertFalse(WallUtils.isValidateOracle("select * from TAB"));
+        Assert.assertFalse(WallUtils.isValidateOracle("select * from ALL_TABLES where (1=1 or (1+1)=2) and (4=8 or 1=1)"));
     }
 }

File: src/main/java/com/alibaba/druid/filter/logging/LogFilter.java
Patch:
@@ -683,7 +683,7 @@ public void preparedStatement_clearParameters(FilterChain chain, PreparedStateme
                                                                                                       throws SQLException {
 
         statementLog("{conn-" + statement.getConnectionProxy().getId() + ", pstmt-" + statement.getId()
-                     + "} clearParameters. " + statement.getSql());
+                     + "} clearParameters. ");
 
         chain.preparedStatement_clearParameters(statement);
     }

File: src/main/java/com/alibaba/druid/support/http/WebStatFilter.java
Patch:
@@ -143,6 +143,9 @@ public boolean isExclusion(String requestURI) {
         
         if (contextPath != null && requestURI.startsWith(contextPath)) {
             requestURI = requestURI.substring(contextPath.length());
+            if(!requestURI.startsWith("/")) {
+                requestURI = "/" + requestURI;
+            }
         }
 
         for (String pattern : excludesPattern) {

File: src/main/java/com/alibaba/druid/util/DruidDataSourceUtils.java
Patch:
@@ -81,7 +81,7 @@ public static Map<String, Object> getStatData(Object druidDatasource) {
         }
     }
 
-    @SuppressWarnings("unchecked")
+    @SuppressWarnings({ "rawtypes" })
     public static Map getSqlStatMap(Object druidDatasource) {
         try {
             Method method = druidDatasource.getClass().getMethod("getSqlStatMap");

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PoolableCallableStatementTest.java
Patch:
@@ -40,12 +40,12 @@ protected SQLException checkException(Throwable error) throws SQLException {
             }
         };
 
-        Assert.assertEquals(0, raw.getParameters().size());
+        Assert.assertEquals(0, raw.getOutParameters().size());
         stmt.registerOutParameter(1, Types.INTEGER);
-        Assert.assertEquals(1, raw.getParameters().size());
+        Assert.assertEquals(1, raw.getOutParameters().size());
 
         stmt.registerOutParameter(2, Types.DECIMAL, 10);
-        Assert.assertEquals(2, raw.getParameters().size());
+        Assert.assertEquals(2, raw.getOutParameters().size());
     }
 
     public void test_basic() throws Exception {

File: src/main/java/com/alibaba/druid/mock/MockDriver.java
Patch:
@@ -270,7 +270,7 @@ public void handleSleep(MockConnection conn) {
         }
     }
 
-    protected ResultSet createResultSet(MockPreparedStatement stmt) {
+    public ResultSet createResultSet(MockPreparedStatement stmt) {
         MockResultSet rs = new MockResultSet(stmt);
 
         String sql = stmt.getSql();

File: src/test/java/com/alibaba/druid/bvt/bug/Bug_for_xuershan.java
Patch:
@@ -19,7 +19,7 @@ public class Bug_for_xuershan extends TestCase {
 
     protected void setUp() throws Exception {
         driver = new MockDriver() {
-            protected ResultSet createResultSet(MockPreparedStatement stmt) {
+            public ResultSet createResultSet(MockPreparedStatement stmt) {
                 return null;
             }
         };

File: src/main/java/com/alibaba/druid/util/ReflectionUtils.java
Patch:
@@ -19,7 +19,7 @@ public static Class<?> getClassFromWebContainerOrCurrentClassLoader(String class
         try {
             result = HttpServletRequest.class.getClassLoader().loadClass(className);
         } catch (ClassNotFoundException e) {
-            LOG.debug("can'r find class in web container classLoader ", e);
+            if (LOG.isDebugEnabled()) LOG.debug("can'r find class in web container classLoader ", e);
         }
         if (result == null) {
             try {

File: src/main/java/com/alibaba/druid/mock/MockDriver.java
Patch:
@@ -235,12 +235,12 @@ public boolean jdbcCompliant() {
         return true;
     }
 
-    protected ResultSet executeQuery(MockStatement stmt, String sql) throws SQLException {
+    public ResultSet executeQuery(MockStatementBase stmt, String sql) throws SQLException {
         if (logExecuteQueryEnable && LOG.isDebugEnabled()) {
             LOG.debug("executeQuery " + sql);
         }
 
-        MockConnection conn = stmt.getMockConnection();
+        MockConnection conn = stmt.getConnection();
 
         long idleTimeMillis = System.currentTimeMillis() - conn.getLastActiveTimeMillis();
         if (idleTimeMillis >= this.idleTimeCount) {

File: src/main/java/com/alibaba/druid/mock/MockPreparedStatement.java
Patch:
@@ -21,7 +21,7 @@
 
 import com.alibaba.druid.util.jdbc.PreparedStatementBase;
 
-public class MockPreparedStatement extends PreparedStatementBase implements PreparedStatement {
+public class MockPreparedStatement extends PreparedStatementBase implements MockStatementBase, PreparedStatement {
 
     private final String sql;
 

File: src/main/java/com/alibaba/druid/mock/MockStatement.java
Patch:
@@ -22,7 +22,7 @@
 
 import com.alibaba.druid.util.jdbc.StatementBase;
 
-public class MockStatement extends StatementBase implements Statement {
+public class MockStatement extends StatementBase implements MockStatementBase, Statement {
 
     public final static String ERROR_SQL = "THROW ERROR";
 
@@ -46,7 +46,7 @@ protected void checkOpen() throws SQLException, MockConnectionClosedException {
         }
     }
 
-    public MockConnection getMockConnection() {
+    public MockConnection getConnection() {
         return mockConnection;
     }
 

File: src/main/java/com/alibaba/druid/mock/handler/MockExecuteHandler.java
Patch:
@@ -3,9 +3,9 @@
 import java.sql.ResultSet;
 import java.sql.SQLException;
 
-import com.alibaba.druid.mock.MockStatement;
+import com.alibaba.druid.mock.MockStatementBase;
 
 public interface MockExecuteHandler {
 
-    ResultSet executeQuery(MockStatement statement, String sql) throws SQLException;
+    ResultSet executeQuery(MockStatementBase statement, String sql) throws SQLException;
 }

File: src/main/java/com/alibaba/druid/pool/ha/MultiDataSourcePreparedStatement.java
Patch:
@@ -26,10 +26,11 @@ public boolean execute() throws SQLException {
         FilterChain chain = createChain();
         
         if (chain.getFilterSize() == 0) {
-            return this.statement.execute();
+            firstResultSet = this.statement.execute();
+        } else {
+            firstResultSet = chain.preparedStatement_execute(this);    
         }
         
-        firstResultSet = chain.preparedStatement_execute(this);
         return firstResultSet;
     }
 

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -93,13 +93,15 @@ public boolean execute() throws SQLException {
 
     @Override
     public ResultSet executeQuery() throws SQLException {
+        firstResultSet = true;
         updateCount = null;
         lastExecuteType = StatementExecuteType.ExecuteQuery;
         return createChain().preparedStatement_executeQuery(this);
     }
 
     @Override
     public int executeUpdate() throws SQLException {
+        firstResultSet = false;
         lastExecuteType = StatementExecuteType.ExecuteUpdate;
         updateCount = createChain().preparedStatement_executeUpdate(this);
         return updateCount;

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStat.java
Patch:
@@ -336,8 +336,8 @@ public long getExecuteSuccessCount() {
         return executeSuccessCount.get();
     }
 
-    public void addExecuteTime(StatementExecuteType executeType, long nanoSpan) {
-        if (StatementExecuteType.ExecuteQuery != executeType) {
+    public void addExecuteTime(StatementExecuteType executeType, boolean firstResultSet, long nanoSpan) {
+        if (StatementExecuteType.ExecuteQuery != executeType && !firstResultSet) {
             executeAndResultHoldTimeHistogram.record((nanoSpan) / 1000 / 1000);
         }
         addExecuteTime(nanoSpan);

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -72,7 +72,7 @@
  */
 public class DruidDataSource extends DruidAbstractDataSource implements DruidDataSourceMBean, ManagedDataSource, Referenceable, Closeable, Cloneable, ConnectionPoolDataSource {
 
-    private final static Log        LOG                     = LogFactory.getLog(DruidDataSource.class);
+    public final static Log        LOG                     = LogFactory.getLog(DruidDataSource.class);
 
     private static final long       serialVersionUID        = 1L;
 
@@ -288,7 +288,7 @@ public void init() throws SQLException {
                     DataSourceProxyConfig config = DruidDriver.parseConfig(jdbcUrl, null);
                     this.driverClass = config.getRawDriverClassName();
                     
-                    LOG.error("error url : " + jdbcUrl + ", it should be : " + config.getRawUrl());
+                    LOG.error("error url : '" + jdbcUrl + "', it should be : '" + config.getRawUrl() + "'");
                     
                     this.jdbcUrl = config.getRawUrl();
                     if (this.name == null) {

File: src/main/java/com/alibaba/druid/support/logging/Log.java
Patch:
@@ -16,4 +16,7 @@ public interface Log {
 
     void warn(String s, Throwable e);
 
+    int getErrorCount();
+    
+    void resetStat();
 }

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -40,7 +40,6 @@
 import java.util.TreeMap;
 
 import com.alibaba.druid.proxy.jdbc.JdbcParameter.TYPE;
-import com.alibaba.druid.stat.JdbcSqlStat;
 
 /**
  * @author wenshao<szujobs@hotmail.com>

File: src/main/java/com/alibaba/druid/filter/stat/StatFilter.java
Patch:
@@ -341,7 +341,7 @@ protected void statementExecuteBatchBefore(StatementProxy statement) {
 
         final int batchSize = statement.getBatchSqlList().size();
         JdbcSqlStat sqlStat = statement.getSqlStat();
-        if (sqlStat == null) {
+        if (sqlStat == null || sqlStat.isRemoved()) {
             sqlStat = createSqlStat(statement, sql);
             statement.setSqlStat(sqlStat);
         }
@@ -380,7 +380,7 @@ private final void internalBeforeStatementExecute(StatementProxy statement, Stri
         // //////////SQL
 
         JdbcSqlStat sqlStat = statement.getSqlStat();
-        if (sqlStat == null) {
+        if (sqlStat == null || sqlStat.isRemoved()) {
             sqlStat = createSqlStat(statement, sql);
             statement.setSqlStat(sqlStat);
         }

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -469,7 +469,7 @@ public <T> T unwrap(Class<T> iface) throws SQLException {
 
     public JdbcSqlStat getSqlStat() {
         if (sqlStat != null && sqlStat.isRemoved()) {
-            JdbcSqlStat sqlStat = this.getConnectionProxy().getDirectDataSource().getDataSourceStat().getSqlStat(sql);
+            JdbcSqlStat sqlStat = this.getConnectionProxy().getDirectDataSource().getDataSourceStat().createSqlStat(sql);
             sqlStat.setDbType(this.sqlStat.getDbType());
             this.sqlStat = sqlStat;
         }

File: src/main/java/com/alibaba/druid/stat/JdbcDataSourceStat.java
Patch:
@@ -110,6 +110,7 @@ public void reset() {
                 Map.Entry<String, JdbcSqlStat> entry = iter.next();
                 JdbcSqlStat stat = entry.getValue();
                 if (stat.getExecuteCount() == 0 && stat.getRunningCount() == 0) {
+                    stat.setRemoved(true);
                     iter.remove();
                 } else {
                     stat.reset();

File: src/main/java/com/alibaba/druid/proxy/jdbc/ResultSetProxy.java
Patch:
@@ -41,4 +41,6 @@ public interface ResultSetProxy extends ResultSet, WrapperProxy {
     void setConstructNano(long constructNano);
 
     void setConstructNano();
+    
+    int getCloseCount();
 }

File: src/main/java/com/alibaba/druid/support/logging/LogFactory.java
Patch:
@@ -45,7 +45,7 @@ public static Log getLog(Class aClass) {
     public static synchronized void selectLog4JLogging() {
         try {
             Resources.classForName("org.apache.log4j.Logger");
-            Class implClass = Resources.classForName("com.ibatis.common.logging.log4j.Log4jImpl");
+            Class implClass = Resources.classForName("com.alibaba.druid.support.logging.Log4jImpl");
             logConstructor = implClass.getConstructor(new Class[] { Class.class });
         } catch (Throwable t) {
         }
@@ -61,7 +61,7 @@ public static synchronized void selectLog4JLogging() {
     public static synchronized void selectJavaLogging() {
         try {
             Resources.classForName("java.util.logging.Logger");
-            Class implClass = Resources.classForName("com.ibatis.common.logging.jdk14.Jdk14LoggingImpl");
+            Class implClass = Resources.classForName("com.alibaba.druid.support.logging.Jdk14LoggingImpl");
             logConstructor = implClass.getConstructor(new Class[] { Class.class });
         } catch (Throwable t) {
         }

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -204,7 +204,7 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
                                                                                                                                                           10 * 1000,
                                                                                                                                                           100 * 1000);
 
-    private boolean                                                                             dupCloseLogEnable                         = true;
+    private boolean                                                                             dupCloseLogEnable                         = false;
 
     private ObjectName                                                                          objectName;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleSchemaStatVisitor.java
Patch:
@@ -318,15 +318,13 @@ public boolean visit(OracleUpdateStatement x) {
     }
 
     public void endVisit(OracleUpdateStatement x) {
-        clearAliasMap();
     }
 
     public boolean visit(OracleDeleteStatement x) {
         return visit((SQLDeleteStatement) x);
     }
 
     public void endVisit(OracleDeleteStatement x) {
-        clearAliasMap();
     }
 
     public boolean visit(OracleSelectQueryBlock x) {
@@ -1035,7 +1033,6 @@ public boolean visit(OracleMergeStatement x) {
 
     @Override
     public void endVisit(OracleMergeStatement x) {
-        clearAliasMap();
     }
 
     @Override

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -723,7 +723,6 @@ public boolean visit(SQLSelectStatement x) {
     }
 
     public void endVisit(SQLSelectStatement x) {
-        clearAliasMap();
     }
 
     public boolean visit(SQLSubqueryTableSource x) {
@@ -897,11 +896,10 @@ public boolean visit(SQLInSubQueryExpr x) {
     }
 
     public void endVisit(SQLDeleteStatement x) {
-        clearAliasMap();
+        
     }
 
     public void endVisit(SQLUpdateStatement x) {
-        clearAliasMap();
     }
 
     public boolean visit(SQLCreateTableStatement x) {

File: src/test/java/com/alibaba/druid/bvt/pool/TestActiveTrace.java
Patch:
@@ -39,7 +39,7 @@ public void test_activeTrace() throws Exception {
             conn.close();
             // Assert.assertEquals(1, dataSource.getPoolingCount());
             dataSource.shrink();
-            Assert.assertEquals(0, dataSource.getPoolingCount());
+            Assert.assertEquals("createCount : " + dataSource.getCreateCount(), 0, dataSource.getPoolingCount());
             Assert.assertEquals(0, dataSource.getActiveConnections().size());
         }
     }

File: src/test/java/com/alibaba/druid/bvt/pool/Case0.java
Patch:
@@ -15,7 +15,7 @@
 public class Case0 extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/Case1.java
Patch:
@@ -14,7 +14,7 @@
 public class Case1 extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/Case2.java
Patch:
@@ -34,7 +34,7 @@
 public class Case2 extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/Case3.java
Patch:
@@ -41,7 +41,7 @@ public class Case3 extends TestCase {
     // dataSource.close();
     // }
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/DruidDataSourceFilterTest.java
Patch:
@@ -13,7 +13,7 @@
 public class DruidDataSourceFilterTest extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/ManagedDataSourceTest.java
Patch:
@@ -16,7 +16,7 @@ public class ManagedDataSourceTest extends TestCase {
     private DruidDataSource dataSource;
 
     public void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/test/java/com/alibaba/druid/bvt/pool/ParamTest.java
Patch:
@@ -13,7 +13,7 @@
 public class ParamTest extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/PasswordCallbackTest.java
Patch:
@@ -14,7 +14,7 @@
 public class PasswordCallbackTest extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/SpringIbatisFilterTest.java
Patch:
@@ -23,7 +23,7 @@
 public class SpringIbatisFilterTest extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/SpringMybatisFilterTest.java
Patch:
@@ -18,7 +18,7 @@
 public class SpringMybatisFilterTest extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestAbondon.java
Patch:
@@ -13,7 +13,7 @@ public class TestAbondon extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         dataSource = new DruidDataSource();
         dataSource.setRemoveAbandoned(true);

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_0.java
Patch:
@@ -13,7 +13,7 @@
 public class TestClose_0 extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_1.java
Patch:
@@ -14,7 +14,7 @@
 public class TestClose_1 extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_2.java
Patch:
@@ -14,7 +14,7 @@
 public class TestClose_2 extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestConcurrent.java
Patch:
@@ -18,7 +18,7 @@ public class TestConcurrent extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
         driver.setLogExecuteQueryEnable(false);

File: src/test/java/com/alibaba/druid/bvt/pool/TestDefault.java
Patch:
@@ -13,7 +13,7 @@
 public class TestDefault extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestDisable.java
Patch:
@@ -17,7 +17,7 @@ public class TestDisable extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestDruidDataSource.java
Patch:
@@ -27,7 +27,7 @@
 public class TestDruidDataSource extends TestCase {
 
     protected void tearDown() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void setUp() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestGraceShutdown.java
Patch:
@@ -17,7 +17,7 @@ public class TestGraceShutdown extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle.java
Patch:
@@ -13,7 +13,7 @@
 public class TestIdle extends TestCase {
 
     protected void tearDown() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void setUp() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle2.java
Patch:
@@ -12,7 +12,7 @@
 public class TestIdle2 extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3.java
Patch:
@@ -15,7 +15,7 @@
 public class TestIdle3 extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java
Patch:
@@ -15,7 +15,7 @@
 public class TestIdle3_Concurrent extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -17,7 +17,7 @@ public class TestIdle3_Concurrent_MaxActive extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_Starvation.java
Patch:
@@ -20,7 +20,7 @@ public class TestIdle3_Concurrent_Starvation extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement.java
Patch:
@@ -18,7 +18,7 @@ public class TestPoolPreparedStatement extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement2.java
Patch:
@@ -18,7 +18,7 @@ public class TestPoolPreparedStatement2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestSharePreparedStatements.java
Patch:
@@ -14,7 +14,7 @@
 public class TestSharePreparedStatements extends TestCase {
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestStat.java
Patch:
@@ -16,7 +16,7 @@ public class TestStat extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest.java
Patch:
@@ -18,7 +18,7 @@ public class ConnectionTest extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest2.java
Patch:
@@ -18,7 +18,7 @@ public class ConnectionTest2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest3.java
Patch:
@@ -20,7 +20,7 @@ public class ConnectionTest3 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest4.java
Patch:
@@ -25,7 +25,7 @@ public class ConnectionTest4 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/ConnectionTest5.java
Patch:
@@ -22,7 +22,7 @@ public class ConnectionTest5 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/DataSourceTest3.java
Patch:
@@ -24,7 +24,7 @@ public class DataSourceTest3 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PoolableStatementTest2.java
Patch:
@@ -24,7 +24,7 @@ public class PoolableStatementTest2 extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestCommit.java
Patch:
@@ -18,7 +18,7 @@ public class TestCommit extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestDataSourceBasic.java
Patch:
@@ -21,7 +21,7 @@ public class TestDataSourceBasic extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         driver = new MockDriver();
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/TestDataSourceBasic2.java
Patch:
@@ -13,7 +13,7 @@
 public class TestDataSourceBasic2 extends TestCase {
 
     public void test_0() throws Exception {
-        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        DruidDataSourceStatManager.cear();
 
         DruidDataSource dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");

File: src/main/java/com/alibaba/druid/VERSION.java
Patch:
@@ -19,7 +19,7 @@ public final class VERSION {
 
     public final static int MajorVersion    = 0;
     public final static int MinorVersion    = 2;
-    public final static int RevisionVersion = 4;
+    public final static int RevisionVersion = 5;
     
     public static String getVersionNumber() {
         return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion;

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -336,7 +336,7 @@ public void init() throws SQLException {
                 this.exceptionSorter = new MockExceptionSorter();
             }
 
-            dataSourceStat = new JdbcDataSourceStat(this.name, this.jdbcUrl);
+            dataSourceStat = new JdbcDataSourceStat(this.name, this.jdbcUrl, this.dbType);
 
             {
                 String property = System.getProperty("druid.filters");

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImpl.java
Patch:
@@ -68,7 +68,7 @@ public DataSourceProxyImpl(Driver rawDriver, DataSourceProxyConfig config){
         this.rawDriver = rawDriver;
         this.config = config;
         this.dbType = JdbcUtils.getDbType(config.getRawUrl(), config.getRawDriverClassName());
-        this.dataSourceStat = new JdbcDataSourceStat(config.getName(), config.getUrl());
+        this.dataSourceStat = new JdbcDataSourceStat(config.getName(), config.getUrl(), dbType);
     }
 
     public String getDbType() {

File: src/main/java/com/alibaba/druid/support/http/StatViewServlet.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * @author sandzhang<sandzhangtoo@gmail.com>
  */
-public class StatViewSerlvet extends HttpServlet {
+public class StatViewServlet extends HttpServlet {
 
     /**
      * 

File: src/main/java/com/alibaba/druid/pool/DruidPooledStatement.java
Patch:
@@ -284,6 +284,9 @@ public final ResultSet getResultSet() throws SQLException {
 
         try {
             ResultSet rs = stmt.getResultSet();
+            if (rs == null) {
+                return null;
+            }
 
             DruidPooledResultSet poolableResultSet = new DruidPooledResultSet(this, rs);
             resultSetTrace.add(poolableResultSet);

File: src/main/java/com/alibaba/druid/util/jdbc/StatementBase.java
Patch:
@@ -27,8 +27,8 @@ public abstract class StatementBase implements Statement {
     protected boolean  closed = false;
     private boolean    poolable;
 
-    private ResultSet  generatedKeys;
-    private ResultSet  resultSet;
+    protected ResultSet  generatedKeys;
+    protected ResultSet  resultSet;
 
     public StatementBase(Connection connection){
         super();

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -359,8 +359,8 @@ public void init() throws SQLException {
                 // 初始化连接
                 for (int i = 0, size = getInitialSize(); i < size; ++i) {
                     Connection conn = connectionFactory.createConnection();
-                    if (isDefaultAutoCommit() != conn.getAutoCommit()) {
-                        conn.setAutoCommit(isDefaultAutoCommit());
+                    if (defaultAutoCommit != conn.getAutoCommit()) {
+                        conn.setAutoCommit(defaultAutoCommit);
                     }
                     connections[poolingCount++] = new ConnectionHolder(this, conn);
                 }

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -359,7 +359,9 @@ public void init() throws SQLException {
                 // 初始化连接
                 for (int i = 0, size = getInitialSize(); i < size; ++i) {
                     Connection conn = connectionFactory.createConnection();
-                    conn.setAutoCommit(true);
+                    if (isDefaultAutoCommit() != conn.getAutoCommit()) {
+                        conn.setAutoCommit(isDefaultAutoCommit());
+                    }
                     connections[poolingCount++] = new ConnectionHolder(this, conn);
                 }
             } catch (SQLException ex) {

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleGroupingSetTest.java
Patch:
@@ -21,7 +21,7 @@ public void test_interval() throws Exception {
                      + "( calendar_month_desc, co.country_id) );\n";
 
         String expected = "SELECT channel_desc, calendar_month_desc, co.country_id, " //
-                          + "TO_CHAR(sum(amount_sold), '9,999,999,999') AS SALES$\n" //
+                          + "TO_CHAR(SUM(amount_sold), '9,999,999,999') AS SALES$\n" //
                           + "FROM sales, customers, times, channels, countries co\n" //
                           + "WHERE sales.time_id = times.time_id" //
                           + "\n\tAND sales.cust_id = customers.cust_id" //

File: src/test/java/com/alibaba/druid/bvt/sql/cobar/DMLSelectParserTest.java
Patch:
@@ -152,7 +152,7 @@ public void test_select_9() throws Exception {
         SQLStatement stmt = parser.parseStatementList().get(0);
         parser.match(Token.EOF);
         String output = SQLUtils.toMySqlString(stmt);
-        Assert.assertEquals("SELECT SQL_CACHE id1, max(id2)\nFROM tb1\nGROUP BY id1\nHAVING id1 > 10\nORDER BY id3 DESC", output);
+        Assert.assertEquals("SELECT SQL_CACHE id1, MAX(id2)\nFROM tb1\nGROUP BY id1\nHAVING id1 > 10\nORDER BY id3 DESC", output);
     }
     
     public void test_select_10() throws Exception {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/expr/OracleAggregateExpr.java
Patch:
@@ -49,7 +49,7 @@ public OracleAggregateExpr(String methodName){
         super(methodName);
     }
 
-    public OracleAggregateExpr(String methodName, int option){
+    public OracleAggregateExpr(String methodName, Option option){
         super(methodName, option);
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/PGAggregateExpr.java
Patch:
@@ -20,7 +20,7 @@ public void setOver(PGAnalytic over) {
 
 	private static final long serialVersionUID = 1L;
 
-	public PGAggregateExpr(String methodName, int option) {
+	public PGAggregateExpr(String methodName, Option option) {
 		super(methodName, option);
 	}
 

File: src/main/java/com/alibaba/druid/stat/JdbcStatManagerFactoryBean.java
Patch:
@@ -17,10 +17,10 @@
 
 import org.springframework.beans.factory.FactoryBean;
 
-public class JdbcStatManagerFactoryBean implements FactoryBean {
+public class JdbcStatManagerFactoryBean implements FactoryBean<JdbcStatManager> {
 
     @Override
-    public Object getObject() throws Exception {
+    public JdbcStatManager getObject() throws Exception {
         return JdbcStatManager.getInstance();
     }
 

File: src/main/java/com/alibaba/druid/support/spring/MBeanServerFactoryBean.java
Patch:
@@ -6,7 +6,7 @@
 
 import org.springframework.beans.factory.FactoryBean;
 
-public class MBeanServerFactoryBean implements FactoryBean {
+public class MBeanServerFactoryBean implements FactoryBean<MBeanServer> {
 
     public MBeanServer getObject() throws Exception {
         return ManagementFactory.getPlatformMBeanServer();

File: src/main/java/com/alibaba/druid/hdriver/impl/HBaseConnectionImpl.java
Patch:
@@ -261,7 +261,6 @@ public void setSchema(String schema) throws SQLException {
         throw new SQLFeatureNotSupportedException();
     }
 
-    @Override
     public String getSchema() throws SQLException {
         throw new SQLFeatureNotSupportedException();
     }

File: src/main/java/com/alibaba/druid/pool/DruidAbstractDataSource.java
Patch:
@@ -215,7 +215,7 @@ public abstract class DruidAbstractDataSource extends WrapperAdapter implements
 
     protected boolean                                                                           useOracleImplicitCache                    = true;
 
-    protected final ReentrantLock                                                               lock                                      = new ReentrantLock();
+    protected final ReentrantLock                                                               lock                                      = new ReentrantLock(true);
 
     protected int                                                                               modCount                                  = 0;
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -779,7 +779,7 @@ ConnectionHolder takeLast() throws InterruptedException, SQLException {
     ConnectionHolder pollLast(long timeout, TimeUnit unit) throws InterruptedException, SQLException {
         long estimate = unit.toNanos(timeout);
 
-        for (;;) {
+        for (int i = 0;;++i) {
             if (poolingCount == 0) {
                 empty.signal(); // send signal to CreateThread create connection
 
@@ -820,7 +820,7 @@ ConnectionHolder pollLast(long timeout, TimeUnit unit) throws InterruptedExcepti
                     if (createError != null) {
                         throw new GetConnectionTimeoutException(createError);
                     } else {
-                        throw new GetConnectionTimeoutException();
+                        throw new GetConnectionTimeoutException("loopWaitCount " + i);
                     }
                 }
             }
@@ -928,7 +928,6 @@ public void run() {
                     // 必须存在线程等待，才创建连接
                     if (poolingCount >= notEmptyWaitThreadCount) {
                         empty.await();
-                        continue;
                     }
 
                     // 防止创建超过maxActive数量的连接

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PoolableStatementTest2.java
Patch:
@@ -432,6 +432,7 @@ public void test_getUpdateCount() throws Exception {
         Statement stmt = conn.createStatement();
 
         stmt.getUpdateCount();
+        stmt.executeQuery("select 1");
         ((DruidPooledStatement) stmt).getStatement().close();
 
         {

File: src/test/java/com/alibaba/druid/hbase/HBaseDriverTest_getIndex_or.java
Patch:
@@ -15,7 +15,7 @@ public void test_select_0 () throws Exception {
         HDriver driver = new HDriver();
         Connection conn = driver.connect("jdbc:druid-hbase:10.20.153.63", new Properties());
         
-        PreparedStatement stmt = conn.prepareStatement("SELECT id, name, gender, salary FROM test_user where id = 3 or id = ?");
+        PreparedStatement stmt = conn.prepareStatement("SELECT id, name, gender, salary FROM test_user where id = 3 or id = ? or name = 'user-4'");
         stmt.setInt(1, 6);
         
         ResultSet rs = stmt.executeQuery();

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -58,6 +58,7 @@ public PreparedStatementHolder get(PreparedStatementKey key) throws SQLException
                 return null;
             }
             
+            holder.incrementHitCount();
             dataSource.incrementCachedPreparedStatementHitCount();
             if (holder.isEnterOracleImplicitCache()) {
                 OracleUtils.exitImplicitCacheToActive(holder.getStatement());

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/START_TRANSACTION_Test.java
Patch:
@@ -112,7 +112,7 @@ public void test_7() throws Exception {
 
         String text = output(stmtList);
 
-        Assert.assertEquals("SET autocommit = 0;", text);
+        Assert.assertEquals("SET @@autocommit = 0;", text);
     }
 
     private String output(List<SQLStatement> stmtList) {

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -58,6 +58,7 @@ public PreparedStatementHolder get(PreparedStatementKey key) throws SQLException
                 return null;
             }
             
+            holder.incrementHitCount();
             dataSource.incrementCachedPreparedStatementHitCount();
             if (holder.isEnterOracleImplicitCache()) {
                 OracleUtils.exitImplicitCacheToActive(holder.getStatement());

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -229,7 +229,6 @@ public SQLTableSource parseTableSource() throws ParserException {
             } else if (lexer.token() == Token.LPAREN) {
                 tableSource = parseTableSource();
                 accept(Token.RPAREN);
-                accept(Token.RPAREN);
             } else {
                 tableSource = parseTableSource();
                 accept(Token.RPAREN);

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGExprParser.java
Patch:
@@ -11,7 +11,8 @@
 
 public class PGExprParser extends SQLExprParser{
     public PGExprParser(String sql) throws ParserException{
-        super(sql);
+        super(new PGLexer(sql));
+        this.lexer.nextToken();
     }
 
     public PGExprParser(Lexer lexer){

File: src/test/java/com/alibaba/druid/bvt/pool/Case3.java
Patch:
@@ -4,11 +4,11 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Statement;
 
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
-import com.alibaba.druid.mock.MockStatement;
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.stat.DruidDataSourceStatManager;
 
@@ -59,7 +59,7 @@ public void test_2() throws Exception {
         ResultSet rs = stmt.executeQuery();
         rs.next();
 
-        MockStatement mockStmt = stmt.unwrap(MockStatement.class);
+        Statement mockStmt = stmt.unwrap(Statement.class);
         Assert.assertEquals(false, mockStmt.isClosed());
 
         conn.close();

File: src/test/java/com/alibaba/druid/bvt/pool/TestOraclePrefetch.java
Patch:
@@ -80,6 +80,5 @@ public void test_oracle() throws Exception {
             conn.close();
         }
 
-        dataSource.close();
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/REPLACE_Syntax_Test.java
Patch:
@@ -46,7 +46,7 @@ public void test_1() throws Exception {
 
         String text = output(stmtList);
 
-        Assert.assertEquals("REPLACE DELAYED INTO `online_users`\nSET `session_id` = '3580cc4e61117c0785372c426eddd11c', `user_id` = 'XXX', `page` = '/', `lastview` = NOW();",
+        Assert.assertEquals("REPLACE DELAYED INTO `online_users` (`session_id`, `user_id`, `page`, `lastview`)\nVALUES ('3580cc4e61117c0785372c426eddd11c', 'XXX', '/', NOW());",
                             text);
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveCreateTableParser.java
Patch:
@@ -24,7 +24,7 @@ protected HiveCreateTableStatement newCreateStatement() {
     public SQLCreateTableStatement parseCrateTable(boolean acceptCreate) {
         HiveCreateTableStatement stmt = (HiveCreateTableStatement) super.parseCrateTable(acceptCreate);
 
-        if (lexer.token() == Token.PARTITIONED) {
+        if (identifierEquals("PARTITIONED")) {
             lexer.nextToken();
             accept(Token.BY);
             accept(Token.LPAREN);

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveLexer.java
Patch:
@@ -83,9 +83,6 @@ public class HiveLexer extends Lexer {
         map.put("ANY", Token.ANY);
 
         map.put("WITH", Token.WITH);
-        map.put("PARTITIONED", Token.PARTITIONED);
-        map.put("SHOW", Token.SHOW);
-        map.put("TABLES", Token.TABLES);
 
         DEFAULT_SQL_SERVER_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveStatementParser.java
Patch:
@@ -25,10 +25,10 @@ public HiveCreateTableParser getSQLCreateTableParser() {
     }
 
     public boolean parseStatementListDialect(List<SQLStatement> statementList) {
-        if (lexer.token() == Token.SHOW) {
+        if (identifierEquals("SHOW")) {
             lexer.nextToken();
 
-            if (lexer.token() == Token.TABLES) {
+            if (identifierEquals("TABLES")) {
                 lexer.nextToken();
 
                 HiveShowTablesStatement stmt = new HiveShowTablesStatement();
@@ -41,7 +41,7 @@ public boolean parseStatementListDialect(List<SQLStatement> statementList) {
                 return true;
             }
 
-            throw new ParserException("TODO " + lexer.token());
+            throw new ParserException("TODO " + lexer.info());
         }
         return false;
     }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGExprParser.java
Patch:
@@ -11,7 +11,8 @@
 
 public class PGExprParser extends SQLExprParser{
     public PGExprParser(String sql) throws ParserException{
-        super(sql);
+        super(new PGLexer(sql));
+        this.lexer.nextToken();
     }
 
     public PGExprParser(Lexer lexer){

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -167,9 +167,6 @@ public enum Token {
     TOP("TOP"),
     
     // hive
-    PARTITIONED("PARTITIONED"),
-    SHOW("SHOW"),
-    TABLES("TABLES"),
 
     EOF, 
     ERROR,

File: src/test/java/com/alibaba/druid/bvt/pool/Case3.java
Patch:
@@ -4,11 +4,11 @@
 import java.sql.PreparedStatement;
 import java.sql.ResultSet;
 import java.sql.SQLException;
+import java.sql.Statement;
 
 import junit.framework.Assert;
 import junit.framework.TestCase;
 
-import com.alibaba.druid.mock.MockStatement;
 import com.alibaba.druid.pool.DruidDataSource;
 import com.alibaba.druid.stat.DruidDataSourceStatManager;
 
@@ -59,7 +59,7 @@ public void test_2() throws Exception {
         ResultSet rs = stmt.executeQuery();
         rs.next();
 
-        MockStatement mockStmt = stmt.unwrap(MockStatement.class);
+        Statement mockStmt = stmt.unwrap(Statement.class);
         Assert.assertEquals(false, mockStmt.isClosed());
 
         conn.close();

File: src/test/java/com/alibaba/druid/bvt/pool/TestOraclePrefetch.java
Patch:
@@ -80,6 +80,5 @@ public void test_oracle() throws Exception {
             conn.close();
         }
 
-        dataSource.close();
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/hive/HiveShowTableTest.java
Patch:
@@ -8,7 +8,6 @@
 import com.alibaba.druid.sql.dialect.hive.parser.HiveStatementParser;
 import com.alibaba.druid.sql.dialect.hive.visitor.HiveSchemaStatVisitor;
 import com.alibaba.druid.sql.hive.HiveTest;
-import com.alibaba.druid.stat.TableStat;
 
 public class HiveShowTableTest extends HiveTest {
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnionOperator.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.druid.sql.ast.statement;
 
 public enum SQLUnionOperator {
-    UNION("UNION"), UNION_ALL("UNION ALL"), MINUS("MINUS"), INTERSECT("INTERSECT");
+    UNION("UNION"), UNION_ALL("UNION ALL"), MINUS("MINUS"), INTERSECT("INTERSECT"), DISTINCT("UNION DISTINCT");
 
     public final String name;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/OracleHint.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast;
 
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleHint extends OracleSQLObjectImpl {
+public class OracleHint extends OracleSQLObjectImpl implements SQLHint {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleDeleteStatement.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.statement.SQLDeleteStatement;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleHint;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleReturningClause;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
@@ -30,7 +30,7 @@ public class OracleDeleteStatement extends SQLDeleteStatement {
 
     private boolean                only             = false;
     
-    private final List<OracleHint> hints            = new ArrayList<OracleHint>();
+    private final List<SQLHint> hints            = new ArrayList<SQLHint>();
     private OracleReturningClause  returning        = null;
 
     public OracleDeleteStatement(){
@@ -45,7 +45,7 @@ public void setReturning(OracleReturningClause returning) {
         this.returning = returning;
     }
 
-    public List<OracleHint> getHints() {
+    public List<SQLHint> getHints() {
         return this.hints;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleMergeStatement.java
Patch:
@@ -4,10 +4,10 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateSetItem;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleHint;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleErrorLoggingClause;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
@@ -16,7 +16,7 @@ public class OracleMergeStatement extends OracleStatementImpl {
 
     private static final long      serialVersionUID = 1L;
 
-    private final List<OracleHint> hints            = new ArrayList<OracleHint>();
+    private final List<SQLHint> hints            = new ArrayList<SQLHint>();
 
     private SQLName                into;
     private String                 alias;
@@ -94,7 +94,7 @@ public void setErrorLoggingClause(OracleErrorLoggingClause errorLoggingClause) {
         this.errorLoggingClause = errorLoggingClause;
     }
 
-    public List<OracleHint> getHints() {
+    public List<SQLHint> getHints() {
         return hints;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectQueryBlock.java
Patch:
@@ -18,10 +18,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLSetQuantifier;
 import com.alibaba.druid.sql.ast.statement.SQLSelectItem;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleHint;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.ModelClause;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
@@ -30,7 +30,7 @@ public class OracleSelectQueryBlock extends SQLSelectQueryBlock {
 
     private static final long                  serialVersionUID = 1L;
 
-    private final List<OracleHint>             hints            = new ArrayList<OracleHint>(1);
+    private final List<SQLHint>                hints            = new ArrayList<SQLHint>(1);
 
     private OracleSelectHierachicalQueryClause hierachicalQueryClause;
     private ModelClause                        modelClause;
@@ -55,7 +55,7 @@ public void setHierachicalQueryClause(OracleSelectHierachicalQueryClause hierach
         this.hierachicalQueryClause = hierachicalQueryClause;
     }
 
-    public List<OracleHint> getHints() {
+    public List<SQLHint> getHints() {
         return this.hints;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -21,6 +21,7 @@
 import com.alibaba.druid.sql.ast.SQLDataType;
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLOrderingSpecification;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
@@ -747,7 +748,7 @@ public SQLExpr relationalRest(SQLExpr expr) throws ParserException {
         return super.relationalRest(expr);
     }
     
-    public void parseHints(List<OracleHint> hints) {
+    public void parseHints(List<SQLHint> hints) {
         if (lexer.token() == Token.HINT) {
             hints.add(new OracleHint(lexer.stringVal()));
             lexer.nextToken();

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -286,6 +286,9 @@ public SQLSelectQuery queryRest(SQLSelectQuery selectQuery) {
             if (lexer.token() == (Token.ALL)) {
                 union.setOperator(SQLUnionOperator.UNION_ALL);
                 lexer.nextToken();
+            } else if (lexer.token() == (Token.DISTINCT)) {
+                union.setOperator(SQLUnionOperator.DISTINCT);
+                lexer.nextToken();
             }
 
             SQLSelectQuery right = query();

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.alibaba.druid.sql.ast.SQLDataType;
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLSetQuantifier;
@@ -200,7 +201,7 @@ public void postVisit(SQLObject x) {
         }
     }
 
-    private void printHints(List<OracleHint> hints) {
+    private void printHints(List<SQLHint> hints) {
         if (hints.size() > 0) {
             print("/*+ ");
             printAndAccept(hints, ", ");

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnionOperator.java
Patch:
@@ -1,7 +1,7 @@
 package com.alibaba.druid.sql.ast.statement;
 
 public enum SQLUnionOperator {
-    UNION("UNION"), UNION_ALL("UNION ALL"), MINUS("MINUS"), INTERSECT("INTERSECT");
+    UNION("UNION"), UNION_ALL("UNION ALL"), MINUS("MINUS"), INTERSECT("INTERSECT"), DISTINCT("UNION DISTINCT");
 
     public final String name;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUnionQuery.java
Patch:
@@ -68,6 +68,7 @@ protected void accept0(SQLASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, left);
             acceptChild(visitor, right);
+            acceptChild(visitor, orderBy);
         }
         visitor.endVisit(this);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/OracleHint.java
Patch:
@@ -15,9 +15,10 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast;
 
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OracleHint extends OracleSQLObjectImpl {
+public class OracleHint extends OracleSQLObjectImpl implements SQLHint {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleDeleteStatement.java
Patch:
@@ -18,8 +18,8 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.statement.SQLDeleteStatement;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleHint;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleReturningClause;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
@@ -30,7 +30,7 @@ public class OracleDeleteStatement extends SQLDeleteStatement {
 
     private boolean                only             = false;
     
-    private final List<OracleHint> hints            = new ArrayList<OracleHint>();
+    private final List<SQLHint> hints            = new ArrayList<SQLHint>();
     private OracleReturningClause  returning        = null;
 
     public OracleDeleteStatement(){
@@ -45,7 +45,7 @@ public void setReturning(OracleReturningClause returning) {
         this.returning = returning;
     }
 
-    public List<OracleHint> getHints() {
+    public List<SQLHint> getHints() {
         return this.hints;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleMergeStatement.java
Patch:
@@ -4,10 +4,10 @@
 import java.util.List;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateSetItem;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleHint;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.OracleErrorLoggingClause;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
@@ -16,7 +16,7 @@ public class OracleMergeStatement extends OracleStatementImpl {
 
     private static final long      serialVersionUID = 1L;
 
-    private final List<OracleHint> hints            = new ArrayList<OracleHint>();
+    private final List<SQLHint> hints            = new ArrayList<SQLHint>();
 
     private SQLName                into;
     private String                 alias;
@@ -94,7 +94,7 @@ public void setErrorLoggingClause(OracleErrorLoggingClause errorLoggingClause) {
         this.errorLoggingClause = errorLoggingClause;
     }
 
-    public List<OracleHint> getHints() {
+    public List<SQLHint> getHints() {
         return hints;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectQueryBlock.java
Patch:
@@ -18,10 +18,10 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLSetQuantifier;
 import com.alibaba.druid.sql.ast.statement.SQLSelectItem;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleHint;
 import com.alibaba.druid.sql.dialect.oracle.ast.clause.ModelClause;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
@@ -30,7 +30,7 @@ public class OracleSelectQueryBlock extends SQLSelectQueryBlock {
 
     private static final long                  serialVersionUID = 1L;
 
-    private final List<OracleHint>             hints            = new ArrayList<OracleHint>(1);
+    private final List<SQLHint>                hints            = new ArrayList<SQLHint>(1);
 
     private OracleSelectHierachicalQueryClause hierachicalQueryClause;
     private ModelClause                        modelClause;
@@ -55,7 +55,7 @@ public void setHierachicalQueryClause(OracleSelectHierachicalQueryClause hierach
         this.hierachicalQueryClause = hierachicalQueryClause;
     }
 
-    public List<OracleHint> getHints() {
+    public List<SQLHint> getHints() {
         return this.hints;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -21,6 +21,7 @@
 import com.alibaba.druid.sql.ast.SQLDataType;
 import com.alibaba.druid.sql.ast.SQLDataTypeImpl;
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLOrderingSpecification;
 import com.alibaba.druid.sql.ast.expr.SQLBinaryOpExpr;
@@ -747,7 +748,7 @@ public SQLExpr relationalRest(SQLExpr expr) throws ParserException {
         return super.relationalRest(expr);
     }
     
-    public void parseHints(List<OracleHint> hints) {
+    public void parseHints(List<SQLHint> hints) {
         if (lexer.token() == Token.HINT) {
             hints.add(new OracleHint(lexer.stringVal()));
             lexer.nextToken();

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -286,6 +286,9 @@ public SQLSelectQuery queryRest(SQLSelectQuery selectQuery) {
             if (lexer.token() == (Token.ALL)) {
                 union.setOperator(SQLUnionOperator.UNION_ALL);
                 lexer.nextToken();
+            } else if (lexer.token() == (Token.DISTINCT)) {
+                union.setOperator(SQLUnionOperator.DISTINCT);
+                lexer.nextToken();
             }
 
             SQLSelectQuery right = query();

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleOutputVisitor.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.alibaba.druid.sql.ast.SQLDataType;
 import com.alibaba.druid.sql.ast.SQLExpr;
+import com.alibaba.druid.sql.ast.SQLHint;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLObject;
 import com.alibaba.druid.sql.ast.SQLSetQuantifier;
@@ -200,7 +201,7 @@ public void postVisit(SQLObject x) {
         }
     }
 
-    private void printHints(List<OracleHint> hints) {
+    private void printHints(List<SQLHint> hints) {
         if (hints.size() > 0) {
             print("/*+ ");
             printAndAccept(hints, ", ");

File: src/main/java/com/alibaba/druid/mapping/spi/MappingVisitor.java
Patch:
@@ -18,8 +18,6 @@ public interface MappingVisitor extends SQLASTVisitor {
     
     MappingContext getContext();
 
-    Entity getFirstEntity();
-
     Entity getEntity(String name);
 
     Map<String, Entity> getEntities();

File: src/test/java/com/alibaba/druid/bvt/mapping/MySqlMappingShardingTest.java
Patch:
@@ -90,7 +90,7 @@ public void test_3() throws Exception {
 
         String sql = engine.explainToSelectSQL(oql, Collections.<Object> singletonList("b"));
 
-        String expected = "SELECT h.uid AS \"用户名\", u.name AS \"昵称\"\n" + //
+        String expected = "SELECT h.uid, u.name\n" + //
                           "FROM user_x u LEFT JOIN hero h ON h.uid = u.uid\n" + //
                           "WHERE u.uid = 2";
 
@@ -115,7 +115,7 @@ public void test_5() throws Exception {
 
         String sql = engine.explainToSelectSQL(oql, Collections.<Object> singletonList("b"));
 
-        String expected = "SELECT h.uid AS \"用户名\", u.name AS \"昵称\"\n" + //
+        String expected = "SELECT h.uid, u.name\n" + //
                           "FROM user_x u LEFT JOIN hero h ON h.uid = u.uid\n" + //
                           "WHERE uid = 2";
 

File: src/main/java/com/alibaba/druid/mapping/spi/MSSQLServerMappingProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+import com.alibaba.druid.mapping.MappingContext;
 import com.alibaba.druid.mapping.MappingEngine;
 import com.alibaba.druid.sql.ast.expr.SQLNumberExpr;
 import com.alibaba.druid.sql.ast.expr.SQLNumericLiteralExpr;
@@ -27,8 +28,8 @@ public MappingVisitor createMappingVisitor(MappingEngine engine) {
     }
     
     @Override
-    public MappingVisitor createMappingVisitor(MappingEngine engine, List<Object> parameters) {
-        return new MSSQLServerMappingVisitor(engine, parameters);
+    public MappingVisitor createMappingVisitor(MappingEngine engine, MappingContext context) {
+        return new MSSQLServerMappingVisitor(engine, context);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/mapping/spi/MappingProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+import com.alibaba.druid.mapping.MappingContext;
 import com.alibaba.druid.mapping.MappingEngine;
 import com.alibaba.druid.sql.ast.statement.SQLDeleteStatement;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
@@ -14,7 +15,7 @@ public interface MappingProvider {
 
     MappingVisitor createMappingVisitor(MappingEngine engine);
     
-    MappingVisitor createMappingVisitor(MappingEngine engine, List<Object> parameters);
+    MappingVisitor createMappingVisitor(MappingEngine engine, MappingContext context);
     
     ExportParameterVisitor createExportParameterVisitor(List<Object> parameters);
 

File: src/main/java/com/alibaba/druid/mapping/spi/MappingVisitor.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 
 import com.alibaba.druid.mapping.Entity;
+import com.alibaba.druid.mapping.MappingContext;
 import com.alibaba.druid.mapping.MappingEngine;
 import com.alibaba.druid.mapping.Property;
 import com.alibaba.druid.sql.ast.SQLExpr;
@@ -14,6 +15,8 @@ public interface MappingVisitor extends SQLASTVisitor {
     MappingEngine getEngine();
     
     List<Object> getParameters();
+    
+    MappingContext getContext();
 
     Entity getFirstEntity();
 

File: src/main/java/com/alibaba/druid/mapping/spi/MappingVisitorUtils.java
Patch:
@@ -93,7 +93,7 @@ public static boolean visit(MappingVisitor visitor, SQLPropertyExpr x) {
 
         if (x.getParent() instanceof SQLSelectItem) {
             SQLSelectItem selectItem = (SQLSelectItem) x.getParent();
-            if (selectItem.getAlias() == null) {
+            if (visitor.getContext().isGenerateAlias() && selectItem.getAlias() == null) {
                 selectItem.setAlias('"' + property.getName() + '"');
             }
         }
@@ -129,9 +129,9 @@ public static boolean visit(MappingVisitor visitor, SQLIdentifierExpr x) {
         x.putAttribute("mapping.property", property);
         x.putAttribute("mapping.entity", propertyEntity);
 
-        if (x.getParent() instanceof SQLSelectItem) {
+        if (visitor.getContext().isGenerateAlias() && x.getParent() instanceof SQLSelectItem) {
             SQLSelectItem selectItem = (SQLSelectItem) x.getParent();
-            if (selectItem.getAlias() == null) {
+            if (visitor.getContext().isGenerateAlias() && selectItem.getAlias() == null) {
                 selectItem.setAlias('"' + property.getName() + '"');
             }
         }

File: src/main/java/com/alibaba/druid/mapping/spi/MySqlMappingProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+import com.alibaba.druid.mapping.MappingContext;
 import com.alibaba.druid.mapping.MappingEngine;
 import com.alibaba.druid.sql.ast.expr.SQLIntegerExpr;
 import com.alibaba.druid.sql.ast.expr.SQLNumericLiteralExpr;
@@ -26,8 +27,8 @@ public MappingVisitor createMappingVisitor(MappingEngine engine) {
     }
     
     @Override
-    public MappingVisitor createMappingVisitor(MappingEngine engine, List<Object> parameters) {
-        return new MySqlMappingVisitor(engine, parameters);
+    public MappingVisitor createMappingVisitor(MappingEngine engine, MappingContext context) {
+        return new MySqlMappingVisitor(engine, context);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/mapping/spi/OracleMappingProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+import com.alibaba.druid.mapping.MappingContext;
 import com.alibaba.druid.mapping.MappingEngine;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
@@ -23,8 +24,8 @@ public MappingVisitor createMappingVisitor(MappingEngine engine) {
     }
     
     @Override
-    public MappingVisitor createMappingVisitor(MappingEngine engine, List<Object> parameters) {
-        return new OracleMappingVisitor(engine, parameters);
+    public MappingVisitor createMappingVisitor(MappingEngine engine, MappingContext context) {
+        return new OracleMappingVisitor(engine, context);
     }
 
     @Override

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxyImpl.java
Patch:
@@ -29,8 +29,6 @@
 import com.alibaba.druid.filter.FilterChain;
 import com.alibaba.druid.filter.FilterChainImpl;
 import com.alibaba.druid.stat.JdbcSqlStat;
-import com.alibaba.druid.stat.JdbcStatContext;
-import com.alibaba.druid.stat.JdbcStatManager;
 
 /**
  * @author wenshao<szujobs@hotmail.com>

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -28,7 +28,6 @@
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
-import com.alibaba.druid.sql.ast.statement.SQLUpdateSetItem;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlKey;
 import com.alibaba.druid.sql.dialect.mysql.ast.MySqlPrimaryKey;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/PGAnalyticWindowing.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
-import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 import com.alibaba.druid.sql.dialect.postgresql.ast.expr.PGExpr;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/expr/PGAnalytic.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLObjectImpl;
-import com.alibaba.druid.sql.dialect.postgresql.ast.PGAnalyticWindowing;
 import com.alibaba.druid.sql.dialect.postgresql.ast.PGOrderBy;
 import com.alibaba.druid.sql.dialect.postgresql.visitor.PGASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGExprParser.java
Patch:
@@ -1,9 +1,6 @@
 package com.alibaba.druid.sql.dialect.postgresql.parser;
 
 import com.alibaba.druid.sql.ast.expr.SQLAggregateExpr;
-import com.alibaba.druid.sql.ast.expr.SQLIdentifierExpr;
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleOrderBy;
-import com.alibaba.druid.sql.dialect.oracle.ast.expr.OracleAnalyticWindowing;
 import com.alibaba.druid.sql.dialect.postgresql.ast.PGAggregateExpr;
 import com.alibaba.druid.sql.dialect.postgresql.ast.PGOrderBy;
 import com.alibaba.druid.sql.dialect.postgresql.ast.expr.PGAnalytic;

File: src/main/java/com/alibaba/druid/proxy/jdbc/PreparedStatementProxyImpl.java
Patch:
@@ -92,7 +92,7 @@ public boolean execute() throws SQLException {
 
     @Override
     public ResultSet executeQuery() throws SQLException {
-    	lastExecuteType = StatementExecuteType.ExecuteUpdate;
+    	lastExecuteType = StatementExecuteType.ExecuteQuery;
         return createChain().preparedStatement_executeQuery(this);
     }
 

File: src/main/java/com/alibaba/druid/stat/JdbcSqlStat.java
Patch:
@@ -510,7 +510,7 @@ public Map<String, Object> getData() throws JMException {
         map.put("Histogram", this.histogram.toArray()); // 25
         map.put("LastSlowParameters", lastSlowParameters); // 26
         map.put("ResultSetHoldTime", getResultSetHoldTimeMilis()); // 26
-        map.put("executeAndResultSetHoldTime", this.getExecuteAndResultSetHoldTimeMilis()); // 26
+        map.put("executeAndResultSetHoldTime", this.getExecuteAndResultSetHoldTimeMilis()); // 27
         
 
         return map;

File: src/main/java/com/alibaba/druid/proxy/jdbc/StatementProxy.java
Patch:
@@ -40,5 +40,8 @@ public interface StatementProxy extends Statement, WrapperProxy {
 
     String getLastExecuteSql();
     
+    long getLastExecuteTimeNano();
+    void setLastExecuteTimeNano(long nano);
+    
     Map<Integer, JdbcParameter> getParameters();
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest34.java
Patch:
@@ -38,6 +38,7 @@ public void test_0() throws Exception {
 
         OracleSchemaStatVisitor visitor = new OracleSchemaStatVisitor();
         statemen.accept(visitor);
+        
 
         System.out.println("Tables : " + visitor.getTables());
         System.out.println("fields : " + visitor.getColumns());

File: src/test/java/com/alibaba/druid/sql/OracleTest.java
Patch:
@@ -27,4 +27,6 @@ protected void print(List<SQLStatement> stmtList) {
         }
         System.out.println(text);
 	}
+	
+	
 }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -142,6 +142,7 @@ public class OracleLexer extends Lexer {
         map.put("COMMIT", Token.COMMIT);
         map.put("ROLLBACK", Token.ROLLBACK);
         map.put("SAVEPOINT", Token.SAVEPOINT);
+        map.put("CROSS", Token.CROSS);
 
         DEFAULT_ORACLE_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -175,6 +175,7 @@ public enum Token {
     COMMIT("COMMIT"),
     ROLLBACK("ROLLBACK"),
     SAVEPOINT("SAVEPOINT"),
+    CROSS("CROSS"),
     
     // transact-sql
     TOP("TOP"),

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceC3P0Adapter.java
Patch:
@@ -25,7 +25,7 @@ public DruidDataSourceC3P0Adapter(){
         this.setAcquireIncrement(3);
         this.setAcquireIncrement(30);
         this.setAcquireRetryDelay(1000);
-        this.setAutoCommitOnClose(false);
+        this.setAutoCommitOnClose(true);
         this.setAutomaticTestTable(null);
         this.setCheckoutTimeout(0);
         this.setDebugUnreturnedConnectionStackTraces(false);

File: src/main/java/com/alibaba/druid/pool/vendor/MySqlValidConnectionChecker.java
Patch:
@@ -74,7 +74,9 @@ public boolean isValidConnection(Connection conn, String valiateQuery, int valid
         ResultSet rs = null;
         try {
             stmt = conn.createStatement();
-            stmt.setQueryTimeout(validationQueryTimeout);
+            if (validationQueryTimeout > 0) {
+                stmt.setQueryTimeout(validationQueryTimeout);
+            }
             rs = stmt.executeQuery(valiateQuery);
             return true;
         } catch (SQLException e) {

File: src/main/java/com/alibaba/druid/util/JdbcUtils.java
Patch:
@@ -595,7 +595,7 @@ public static List<Map<String, Object>> executeQuery(Connection conn, String sql
                 Map<String, Object> row = new LinkedHashMap<String, Object>();
 
                 for (int i = 0, size = rsMeta.getColumnCount(); i < size; ++i) {
-                    String columName = rsMeta.getColumnName(i + 1);
+                    String columName = rsMeta.getColumnLabel(i + 1);
                     Object value = rs.getObject(i + 1);
                     row.put(columName, value);
                 }

File: src/main/java/com/alibaba/druid/stat/JdbcDataSourceStat.java
Patch:
@@ -47,7 +47,7 @@ public class JdbcDataSourceStat implements JdbcDataSourceStatMBean {
     private final LinkedHashMap<String, JdbcSqlStat>            sqlStatMap     = new LinkedHashMap<String, JdbcSqlStat>(
                                                                                                                         maxSize,
                                                                                                                         0.75f,
-                                                                                                                        true);
+                                                                                                                        false);
 
     // private final ConcurrentMap<String, JdbcSqlStat> sqlStatMap = new ConcurrentHashMap<String, JdbcSqlStat>();
 

File: src/main/java/com/alibaba/druid/wall/WallProvider.java
Patch:
@@ -40,7 +40,7 @@ public void addWhiteSql(String sql) {
         lock.writeLock().lock();
         try {
             if (whiteList == null) {
-                whiteList = new LinkedHashMap<String, Object>(whileListMaxSize, 0.75f, true);
+                whiteList = new LinkedHashMap<String, Object>(whileListMaxSize, 0.75f, false);
             }
 
             whiteList.put(sql, PRESENT);

File: src/test/java/com/alibaba/druid/pool/TestMockPerf.java
Patch:
@@ -16,7 +16,7 @@ protected void setUp() throws Exception {
         dataSource.setMinIdle(3);
         dataSource.setMaxActive(20);
         dataSource.setDbType("mysql");
-        dataSource.setFilters("stat");
+        dataSource.setFilters("wall");
         dataSource.init();
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement.java
Patch:
@@ -36,7 +36,7 @@ protected void setUp() throws Exception {
         dataSource.setValidationQuery("SELECT 1");
         dataSource.setFilters("stat");
         dataSource.setPoolPreparedStatements(true);
-        ((StatFilter) dataSource.getProxyFilters().get(0)).setMaxSqlStatCount(100);
+//        ((StatFilter) dataSource.getProxyFilters().get(0)).setMaxSqlStatCount(100);
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement2.java
Patch:
@@ -38,7 +38,7 @@ protected void setUp() throws Exception {
         dataSource.setPoolPreparedStatements(false);
         dataSource.setMaxPoolPreparedStatementPerConnectionSize(20);
         
-        ((StatFilter) dataSource.getProxyFilters().get(0)).setMaxSqlStatCount(100);
+//        ((StatFilter) dataSource.getProxyFilters().get(0)).setMaxSqlStatCount(100);
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement.java
Patch:
@@ -36,7 +36,7 @@ protected void setUp() throws Exception {
         dataSource.setValidationQuery("SELECT 1");
         dataSource.setFilters("stat");
         dataSource.setPoolPreparedStatements(true);
-        ((StatFilter) dataSource.getProxyFilters().get(0)).setMaxSqlStatCount(100);
+//        ((StatFilter) dataSource.getProxyFilters().get(0)).setMaxSqlStatCount(100);
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement2.java
Patch:
@@ -38,7 +38,7 @@ protected void setUp() throws Exception {
         dataSource.setPoolPreparedStatements(false);
         dataSource.setMaxPoolPreparedStatementPerConnectionSize(20);
         
-        ((StatFilter) dataSource.getProxyFilters().get(0)).setMaxSqlStatCount(100);
+//        ((StatFilter) dataSource.getProxyFilters().get(0)).setMaxSqlStatCount(100);
     }
 
     protected void tearDown() throws Exception {

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/parser/MySqlParserResourceTest.java
Patch:
@@ -53,6 +53,8 @@ public void exec_test(String resource) throws Exception {
         String text = output(statementList);
         System.out.println(text);
         System.out.println();
+        
+        expect = expect.replaceAll("\\r\\n", "\n");
         Assert.assertEquals(expect, text.trim());
 
         String mergeExpect = null;
@@ -78,6 +80,7 @@ void mergValidate(String sql, String expect) {
 
         System.out.println(out.toString());
 
+        expect = expect.replaceAll("\\r\\n", "\n");
         Assert.assertEquals(expect, out.toString());
     }
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSQLParserResourceTest.java
Patch:
@@ -41,6 +41,7 @@ public void exec_test(String resource) throws Exception {
         Assert.assertEquals(1, statementList.size());
 
         String text = TestUtils.outputOracle(statementList);
+        expect = expect.replaceAll("\\r\\n", "\n");
         System.out.println(text);
         Assert.assertEquals(expect, text.trim());
 

File: src/main/java/com/alibaba/druid/mapping/spi/MappingVisitorUtils.java
Patch:
@@ -127,7 +127,7 @@ public static Entity getEntity(MappingVisitor visitor, String name) {
     }
 
     public static void setDataSource(MappingEngine engine, SQLDeleteStatement stmt) {
-        if (stmt.getTableSource() == null) {
+        if (stmt.getExprTableSource() == null) {
             Entity entity = engine.getFirstEntity();
             stmt.setTableSource(new SQLIdentifierExpr(entity.getName()));
         }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlOutputVisitor.java
Patch:
@@ -623,9 +623,9 @@ public boolean visit(MySqlDeleteStatement x) {
 
         if (x.getFrom() == null) {
             print("FROM ");
-            printAndAccept(x.getTableSources(), ", ");
+            x.getTableSource().accept(this);
         } else {
-            printAndAccept(x.getTableSources(), ", ");
+            x.getTableSource().accept(this);
             println();
             print("FROM ");
             x.getFrom().accept(this);

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGSchemaStatVisitor.java
Patch:
@@ -232,7 +232,6 @@ public void endVisit(PGSelectQueryBlock x) {
 
     @Override
     public boolean visit(PGSelectQueryBlock x) {
-        this.visit((SQLSelectQueryBlock) x);
-        return false;
+        return this.visit((SQLSelectQueryBlock) x);
     }
 }

File: src/main/java/com/alibaba/druid/sql/parser/SQLSelectParser.java
Patch:
@@ -235,7 +235,7 @@ private void parseTableSourceQueryTableExpr(SQLExprTableSource tableReference) t
         tableReference.setExpr(expr());
     }
 
-    private SQLTableSource parseTableSourceRest(SQLTableSource tableSource) throws ParserException {
+    protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) throws ParserException {
         if ((tableSource.getAlias() == null) || (tableSource.getAlias().length() == 0)) {
             if (lexer.token() != Token.LEFT && lexer.token() != Token.RIGHT && lexer.token() != Token.FULL) {
                 tableSource.setAlias(as());

File: src/main/java/com/alibaba/druid/wall/spi/MySqlWallVisitor.java
Patch:
@@ -85,6 +85,8 @@ public boolean visit(MySqlSelectGroupBy x) {
 
     @Override
     public boolean visit(MySqlDeleteStatement x) {
+        WallVisitorUtils.checkReadOnly(this, x.getFrom());
+        
         return visit((SQLDeleteStatement) x);
     }
 

File: src/main/java/com/alibaba/druid/wall/spi/WallVisitorUtils.java
Patch:
@@ -112,7 +112,7 @@ public static void checkHaving(WallVisitor visitor, SQLExpr x) {
     }
 
     public static void checkDelete(WallVisitor visitor, SQLDeleteStatement x) {
-        checkReadOnly(visitor, x.getTableSource());
+        checkReadOnly(visitor, x.getExprTableSource());
         
         if (!visitor.getConfig().isDeleteAllow()) {
             addViolation(visitor, x);

File: src/test/java/com/alibaba/druid/bvt/filter/wall/WallVisitorUtilsTest.java
Patch:
@@ -32,5 +32,7 @@ public void test_isTrue() throws Exception {
         
         Assert.assertEquals(Boolean.TRUE, WallVisitorUtils.getValue(SQLUtils.toSQLExpr("(select count(*) from t) > 0")));
         Assert.assertEquals(Boolean.TRUE, WallVisitorUtils.getValue(SQLUtils.toSQLExpr("(select count(*) from t) >= 0")));
+        Assert.assertEquals(Boolean.FALSE, WallVisitorUtils.getValue(SQLUtils.toSQLExpr("(select count(*) from t) < 0")));
+        Assert.assertEquals(Boolean.TRUE, WallVisitorUtils.getValue(SQLUtils.toSQLExpr("NOT (select count(*) from t) < 0")));
     }
 }

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -1338,7 +1338,7 @@ public void logTransaction(TransactionInfo info) {
 
     @Override
     public String getVersion() {
-        return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion + "-2012-1-6 10:14";
+        return VERSION.MajorVersion + "." + VERSION.MinorVersion + "." + VERSION.RevisionVersion;
     }
 
 }

File: src/main/java/com/alibaba/druid/proxy/DruidDriverMBean.java
Patch:
@@ -19,6 +19,7 @@
  * @author wenshao<szujobs@hotmail.com>
  */
 public interface DruidDriverMBean {
+    String getDruidVersion();
 
     long getConnectCount();
     

File: src/main/java/com/alibaba/druid/mapping/spi/MappingProvider.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.druid.mapping.spi;
 
 import com.alibaba.druid.mapping.MappingEngine;
+import com.alibaba.druid.sql.ast.statement.SQLDeleteStatement;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.visitor.SQLASTOutputVisitor;
 
@@ -11,4 +12,6 @@ public interface MappingProvider {
     SQLASTOutputVisitor createOutputVisitor(MappingEngine engine, Appendable out);
 
     SQLSelectQueryBlock explainToSelectSQLObject(MappingEngine engine, String sql);
+    
+    SQLDeleteStatement explainToDeleteSQLObject(MappingEngine engine, String sql);
 }

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumericLiteralExpr.java
Patch:
@@ -24,4 +24,6 @@ public SQLNumericLiteralExpr(){
     }
 
     public abstract Number getNumber();
+    
+    public abstract void setNumber(Number number);
 }

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -26,7 +26,6 @@
 import com.alibaba.druid.sql.ast.expr.SQLLiteralExpr;
 import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;
 import com.alibaba.druid.sql.ast.statement.SQLCreateTableStatement;
-import com.alibaba.druid.sql.ast.statement.SQLDeleteStatement;
 import com.alibaba.druid.sql.ast.statement.SQLDropTableStatement;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.ast.statement.SQLSelectStatement;
@@ -87,7 +86,7 @@ public SQLSelectStatement parseSelect() throws ParserException {
         return new SQLSelectStatement(new MySqlSelectParser(lexer).select());
     }
 
-    public SQLDeleteStatement parseDeleteStatement() throws ParserException {
+    public MySqlDeleteStatement parseDeleteStatement() throws ParserException {
         accept(Token.DELETE);
 
         MySqlDeleteStatement deleteStatement = new MySqlDeleteStatement();

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -176,7 +176,7 @@ public void parseStatementList(List<SQLStatement> statementList, int max) throws
             }
 
             if (lexer.token() == (Token.DELETE)) {
-                statementList.add(parseDelete());
+                statementList.add(parseDeleteStatement());
                 continue;
             }
 
@@ -1413,7 +1413,7 @@ public OracleExplainStatement parseExplain() {
         return stmt;
     }
 
-    public OracleDeleteStatement parseDelete() throws ParserException {
+    public OracleDeleteStatement parseDeleteStatement() throws ParserException {
         accept(Token.DELETE);
 
         OracleDeleteStatement deleteStatement = new OracleDeleteStatement();

File: src/test/java/com/alibaba/druid/bvt/mapping/MappingVisitorTest.java
Patch:
@@ -38,6 +38,8 @@ public void test_1() throws Exception {
         Assert.assertEquals("SELECT serviceTag AS \"编号\", ip AS \"IP地址\"\nFROM device\nLIMIT 10", engine.explainToSelectSQL("select *"));
         Assert.assertEquals("SELECT serviceTag AS \"编号\", ip AS \"IP地址\"\nFROM device\nWHERE ip = '127.0.0.1'\nLIMIT 10",
                             engine.explainToSelectSQL("select 编号, IP地址 WHERE IP地址 = '127.0.0.1'"));
+        Assert.assertEquals("SELECT serviceTag AS \"编号\", ip AS \"IP地址\"\nFROM device\nWHERE ip = '127.0.0.1'\nLIMIT 3",
+                            engine.explainToSelectSQL("select 编号, IP地址 WHERE IP地址 = '127.0.0.1' limit 3"));
         
         engine.setMaxLimit(null);
 

File: src/main/java/com/alibaba/druid/mapping/spi/MSSQLServerMappingProvider.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.alibaba.druid.mapping.MappingEngine;
 import com.alibaba.druid.sql.ast.expr.SQLNumberExpr;
+import com.alibaba.druid.sql.ast.expr.SQLNumericLiteralExpr;
 import com.alibaba.druid.sql.ast.statement.SQLSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.SQLServerSelectQueryBlock;
 import com.alibaba.druid.sql.dialect.sqlserver.ast.Top;
@@ -13,7 +14,7 @@ public class MSSQLServerMappingProvider implements MappingProvider {
 
     @Override
     public MappingVisitor createMappingVisitor(MappingEngine engine) {
-        return new MySqlMappingVisitor(engine.getEntities());
+        return new MSSQLServerMappingVisitor(engine.getEntities());
     }
 
     @Override
@@ -33,7 +34,7 @@ public SQLSelectQueryBlock explainToSelectSQLObject(MappingEngine engine, String
                 top.setExpr(new SQLNumberExpr(maxLimit));
                 query.setTop(top);
             } else {
-                SQLNumberExpr rowCountExpr = (SQLNumberExpr) query.getTop().getExpr();
+                SQLNumericLiteralExpr rowCountExpr = (SQLNumericLiteralExpr) query.getTop().getExpr();
                 int rowCount = rowCountExpr.getNumber().intValue();
                 if (rowCount > maxLimit.intValue()) {
                     rowCountExpr.setNumber(maxLimit);

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLNumericLiteralExpr.java
Patch:
@@ -24,4 +24,6 @@ public SQLNumericLiteralExpr(){
     }
 
     public abstract Number getNumber();
+    
+    public abstract void setNumber(Number number);
 }

File: src/test/java/com/alibaba/druid/bvt/mapping/MappingVisitorTest.java
Patch:
@@ -38,6 +38,8 @@ public void test_1() throws Exception {
         Assert.assertEquals("SELECT serviceTag AS \"编号\", ip AS \"IP地址\"\nFROM device\nLIMIT 10", engine.explainToSelectSQL("select *"));
         Assert.assertEquals("SELECT serviceTag AS \"编号\", ip AS \"IP地址\"\nFROM device\nWHERE ip = '127.0.0.1'\nLIMIT 10",
                             engine.explainToSelectSQL("select 编号, IP地址 WHERE IP地址 = '127.0.0.1'"));
+        Assert.assertEquals("SELECT serviceTag AS \"编号\", ip AS \"IP地址\"\nFROM device\nWHERE ip = '127.0.0.1'\nLIMIT 3",
+                            engine.explainToSelectSQL("select 编号, IP地址 WHERE IP地址 = '127.0.0.1' limit 3"));
         
         engine.setMaxLimit(null);
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleSchemaStatVisitor.java
Patch:
@@ -149,6 +149,8 @@ public class OracleSchemaStatVisitor extends SchemaStatVisitor implements Oracle
     public OracleSchemaStatVisitor(){
         this.variants.put("DUAL", null);
         this.variants.put("NOTFOUND", null);
+        this.variants.put("TRUE", null);
+        this.variants.put("FALSE", null);
     }
 
     protected Column getColumn(SQLExpr expr) {

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -217,6 +217,7 @@ public SQLExpr primary() throws ParserException {
             case SCHEMA:
             case AT:
             case COLUMN:
+            case IF:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/main/java/com/alibaba/druid/sql/ast/SQLPartitioningClause.java
Patch:
@@ -1,8 +1,7 @@
 package com.alibaba.druid.sql.ast;
 
-import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObject;
 
 
-public interface SQLPartitioningClause extends OracleSQLObject {
+public interface SQLPartitioningClause extends SQLObject {
 
 }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleSchemaStatVisitor.java
Patch:
@@ -149,6 +149,8 @@ public class OracleSchemaStatVisitor extends SchemaStatVisitor implements Oracle
     public OracleSchemaStatVisitor(){
         this.variants.put("DUAL", null);
         this.variants.put("NOTFOUND", null);
+        this.variants.put("TRUE", null);
+        this.variants.put("FALSE", null);
     }
 
     protected Column getColumn(SQLExpr expr) {

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDropTableStatement.java
Patch:
@@ -26,7 +26,7 @@ public class SQLDropTableStatement extends SQLStatementImpl {
 
     private static final long serialVersionUID = 1L;
 
-    private List<SQLName>     tableNames       = new ArrayList<SQLName>();
+    protected List<SQLName>   tableNames       = new ArrayList<SQLName>();
 
     public SQLDropTableStatement(){
 
@@ -48,7 +48,6 @@ public void setName(SQLName name) {
         tableNames.add(name);
     }
 
-
     @Override
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor.visit(this)) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/ast/statement/MySqlStatementImpl.java
Patch:
@@ -19,7 +19,7 @@
 import com.alibaba.druid.sql.dialect.mysql.visitor.MySqlASTVisitor;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public abstract class MySqlStatementImpl extends SQLStatementImpl {
+public abstract class MySqlStatementImpl extends SQLStatementImpl implements MySqlStatement {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlLexer.java
Patch:
@@ -105,6 +105,7 @@ public class MySqlLexer extends Lexer {
         map.put("ANY", Token.ANY);
         map.put("TRUNCATE", Token.TRUNCATE);
         map.put("USER", Token.USER);
+        map.put("IF", Token.IF);
 
         map.put("TRUE", Token.TRUE);
         map.put("FALSE", Token.FALSE);

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -115,8 +115,7 @@ public SQLDataType parseDataType() throws ParserException {
         }
 
         SQLDataType dataType = new SQLDataTypeImpl(typeName);
-        parseDataTypeRest(dataType);
-        return dataType;
+        return parseDataTypeRest(dataType);
     }
 
     public boolean isAggreateFunction(String word) {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/clause/OracleParameter.java
Patch:
@@ -41,6 +41,7 @@ public void accept0(OracleASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, name);
             acceptChild(visitor, dataType);
+            acceptChild(visitor, defaultValue);
         }
         visitor.endVisit(this);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OraclePLSQLCommitStatement.java
Patch:
@@ -15,18 +15,17 @@
  */
 package com.alibaba.druid.sql.dialect.oracle.ast.stmt;
 
-import com.alibaba.druid.sql.ast.SQLStatementImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OraclePLSQLCommitStatement extends SQLStatementImpl {
+public class OraclePLSQLCommitStatement extends OracleStatementImpl {
 
     private static final long serialVersionUID = 1L;
 
     public OraclePLSQLCommitStatement(){
 
     }
 
-    protected void accept0(OracleASTVisitor visitor) {
+    public void accept0(OracleASTVisitor visitor) {
         visitor.visit(this);
         visitor.endVisit(this);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -139,6 +139,8 @@ public class OracleLexer extends Lexer {
         map.put("ELSE", Token.ELSE);
         map.put("GOTO", Token.GOTO);
         map.put("COMMIT", Token.COMMIT);
+        map.put("ROLLBACK", Token.ROLLBACK);
+        map.put("SAVEPOINT", Token.SAVEPOINT);
 
         DEFAULT_ORACLE_KEYWORDS = new Keywords(map);
     }
@@ -217,7 +219,6 @@ public void scanComment() {
         np = bp;
         sp = 0;
         scanChar();
-        sp++;
 
         // /*+ */
         if (ch == '*') {
@@ -277,7 +278,7 @@ public void scanComment() {
                     break;
                 }
 
-                if (ch == '\r') {
+                if (ch == '\n') {
                     scanChar();
                     sp++;
                     break;

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGSQLStatementParser.java
Patch:
@@ -5,12 +5,12 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.SQLStatement;
+import com.alibaba.druid.sql.ast.expr.SQLCurrentOfCursorExpr;
 import com.alibaba.druid.sql.ast.expr.SQLQueryExpr;
 import com.alibaba.druid.sql.ast.statement.SQLInsertStatement;
 import com.alibaba.druid.sql.ast.statement.SQLTableSource;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateSetItem;
 import com.alibaba.druid.sql.ast.statement.SQLUpdateStatement;
-import com.alibaba.druid.sql.dialect.postgresql.ast.PGCurrentOfExpr;
 import com.alibaba.druid.sql.dialect.postgresql.ast.PGWithClause;
 import com.alibaba.druid.sql.dialect.postgresql.ast.PGWithQuery;
 import com.alibaba.druid.sql.dialect.postgresql.ast.stmt.PGDeleteStatement;
@@ -169,7 +169,7 @@ public PGDeleteStatement parseDeleteStatement() throws ParserException {
                 lexer.nextToken();
                 accept(Token.OF);
                 SQLName cursorName = this.exprParser.name();
-                SQLExpr where = new PGCurrentOfExpr(cursorName);
+                SQLExpr where = new SQLCurrentOfCursorExpr(cursorName);
                 deleteStatement.setWhere(where);
             } else {
                 SQLExpr where = this.exprParser.expr();

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -582,7 +582,6 @@ public void scanComment() {
         np = bp;
         sp = 0;
         scanChar();
-        sp++;
 
         if (ch == '*') {
             scanChar();
@@ -620,7 +619,7 @@ public void scanComment() {
                     break;
                 }
 
-                if (ch == '\r') {
+                if (ch == '\n') {
                     scanChar();
                     sp++;
                     break;

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -172,6 +172,8 @@ public enum Token {
     LOOP("LOOP"),
     GOTO("GOTO"),
     COMMIT("COMMIT"),
+    ROLLBACK("ROLLBACK"),
+    SAVEPOINT("SAVEPOINT"),
     
     // transact-sql
     TOP("TOP"),

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -985,4 +985,5 @@ public boolean visit(SQLCommentStatement x) {
 
         return false;
     }
+    
 }

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -535,6 +535,9 @@ protected String aliasWrap(String name) {
 
         if (aliasMap != null) {
             for (Map.Entry<String, String> entry : aliasMap.entrySet()) {
+                if (entry.getKey() == null) {
+                    continue;
+                }
                 if (entry.getKey().equalsIgnoreCase(name)) {
                     return entry.getValue();
                 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleBlockTest2.java
Patch:
@@ -52,7 +52,7 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("wl_ship_order")));
 
         Assert.assertEquals(4, visitor.getColumns().size());
-        Assert.assertEquals(4, visitor.getConditions().size());
+        Assert.assertEquals(3, visitor.getConditions().size());
 
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("wl_ship_order", "id")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleInsertTest8.java
Patch:
@@ -36,10 +36,10 @@ public void test_0() throws Exception {
         System.out.println("coditions : " + visitor.getConditions());
         System.out.println("relationships : " + visitor.getRelationships());
 
-        Assert.assertEquals(9, visitor.getTables().size());
-        Assert.assertEquals(42, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(26, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("raises")));
+         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("AV_INFO_NEW")));
         // Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("employees")));
         //
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "employee_id")));

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/clause/OracleStorageClause.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.clause;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -59,7 +59,6 @@
 import com.alibaba.druid.sql.ast.statement.SQLPrimaryKey;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OraclePrimaryKey;
 
 public class SQLExprParser extends SQLParser {
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -95,7 +95,7 @@ protected String as() throws ParserException {
             lexer.nextToken();
         } else if (lexer.token() == Token.YEAR || lexer.token() == Token.DAY || lexer.token() == Token.TIME
                    || lexer.token() == Token.MONTH || lexer.token() == Token.CASE || lexer.token() == Token.AT
-                   || lexer.token() == Token.TIMESTAMP) {
+                   || lexer.token() == Token.TIMESTAMP || lexer.token() == Token.LOG) {
             alias = lexer.token.name();
             lexer.nextToken();
         }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleBlockTest2.java
Patch:
@@ -52,7 +52,7 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("wl_ship_order")));
 
         Assert.assertEquals(4, visitor.getColumns().size());
-        Assert.assertEquals(4, visitor.getConditions().size());
+        Assert.assertEquals(3, visitor.getConditions().size());
 
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("wl_ship_order", "id")));
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/clause/OracleStorageClause.java
Patch:
@@ -1,7 +1,6 @@
 package com.alibaba.druid.sql.dialect.oracle.ast.clause;
 
 import com.alibaba.druid.sql.ast.SQLExpr;
-import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -59,7 +59,6 @@
 import com.alibaba.druid.sql.ast.statement.SQLPrimaryKey;
 import com.alibaba.druid.sql.ast.statement.SQLSelect;
 import com.alibaba.druid.sql.ast.statement.SQLSelectOrderByItem;
-import com.alibaba.druid.sql.dialect.oracle.ast.stmt.OraclePrimaryKey;
 
 public class SQLExprParser extends SQLParser {
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -95,7 +95,7 @@ protected String as() throws ParserException {
             lexer.nextToken();
         } else if (lexer.token() == Token.YEAR || lexer.token() == Token.DAY || lexer.token() == Token.TIME
                    || lexer.token() == Token.MONTH || lexer.token() == Token.CASE || lexer.token() == Token.AT
-                   || lexer.token() == Token.TIMESTAMP) {
+                   || lexer.token() == Token.TIMESTAMP || lexer.token() == Token.LOG) {
             alias = lexer.token.name();
             lexer.nextToken();
         }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLPrimaryKey.java
Patch:
@@ -15,6 +15,6 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
-public interface SQLPrimaryKey extends SQLUniqueConstraint {
+public interface SQLPrimaryKey extends SQLUniqueConstraint, SQLTableElement {
 
 }

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLTruncateStatement.java
Patch:
@@ -25,5 +25,6 @@ protected void accept0(SQLASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, tableNames);
         }
+        visitor.endVisit(this);
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OraclePrimaryKey.java
Patch:
@@ -6,10 +6,11 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLPrimaryKey;
+import com.alibaba.druid.sql.ast.statement.SQLTableElement;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OraclePrimaryKey extends OracleSQLObjectImpl implements SQLPrimaryKey {
+public class OraclePrimaryKey extends OracleSQLObjectImpl implements SQLPrimaryKey, SQLTableElement {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -286,7 +286,7 @@ public SQLStatement parseCreate() throws ParserException {
         if (token == Token.TABLE || identifierEquals("GLOBAL")) {
             SQLCreateTableParser createTableParser = getSQLCreateTableParser();
             return createTableParser.parseCrateTable(false);
-        } else if (token == Token.INDEX) {
+        } else if (token == Token.INDEX || token == Token.UNIQUE) {
             return parseCreateIndex(false);
         }
 

File: src/main/java/com/alibaba/druid/stat/TableStat.java
Patch:
@@ -403,7 +403,7 @@ public boolean equals(Object obj) {
     }
 
     public static enum Mode {
-        Insert(1), Update(2), Delete(4), Select(8), Merge(16);
+        Insert(1), Update(2), Delete(4), Select(8), Merge(16), Truncate(32);
 
         public final int mark;
 

File: src/test/java/com/alibaba/druid/sql/TestTransform.java
Patch:
@@ -76,7 +76,7 @@ public void updateRecord(String sqlId, String result) throws Exception {
         System.out.println((this.updateCount++) + " : " + sqlId);
     }
 
-    public void test_transform() throws Exception {
+    public void f_test_transform() throws Exception {
 
         Connection conn = dataSource.getConnection();
 
@@ -191,7 +191,7 @@ public void clearResult() throws Exception {
         conn.close();
     }
 
-    public void f_test_migrate() throws Exception {
+    public void test_migrate() throws Exception {
         Connection conn = dataSource.getConnection();
 
         int count = 0;

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLPrimaryKey.java
Patch:
@@ -15,6 +15,6 @@
  */
 package com.alibaba.druid.sql.ast.statement;
 
-public interface SQLPrimaryKey extends SQLUniqueConstraint {
+public interface SQLPrimaryKey extends SQLUniqueConstraint, SQLTableElement {
 
 }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OraclePrimaryKey.java
Patch:
@@ -6,10 +6,11 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.ast.SQLName;
 import com.alibaba.druid.sql.ast.statement.SQLPrimaryKey;
+import com.alibaba.druid.sql.ast.statement.SQLTableElement;
 import com.alibaba.druid.sql.dialect.oracle.ast.OracleSQLObjectImpl;
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleASTVisitor;
 
-public class OraclePrimaryKey extends OracleSQLObjectImpl implements SQLPrimaryKey {
+public class OraclePrimaryKey extends OracleSQLObjectImpl implements SQLPrimaryKey, SQLTableElement {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectSubqueryTableSource.java
Patch:
@@ -82,7 +82,9 @@ protected void accept0(SQLASTVisitor visitor) {
 
     protected void accept0(OracleASTVisitor visitor) {
         if (visitor.visit(this)) {
+            acceptChild(visitor, this.hints);
             acceptChild(visitor, this.select);
+            acceptChild(visitor, this.pivot);
             acceptChild(visitor, this.flashback);
         }
         visitor.endVisit(this);

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -286,7 +286,7 @@ public SQLStatement parseCreate() throws ParserException {
         if (token == Token.TABLE || identifierEquals("GLOBAL")) {
             SQLCreateTableParser createTableParser = getSQLCreateTableParser();
             return createTableParser.parseCrateTable(false);
-        } else if (token == Token.INDEX) {
+        } else if (token == Token.INDEX || token == Token.UNIQUE) {
             return parseCreateIndex(false);
         }
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/CursorTest.java
Patch:
@@ -18,8 +18,8 @@ public void test_cursor() throws Exception {
 
         String text = TestUtils.outputOracle(stmt);
 
-        Assert.assertEquals("SELECT department_name, CURSOR(SELECT salary, commission_pct\n" + "\tFROM employees e\n"
-                            + "\tWHERE e.department_id = d.department_id)\n" + "FROM departments d;\n", text);
+        Assert.assertEquals("SELECT department_name, CURSOR(\n\t\tSELECT salary, commission_pct\n" + "\t\tFROM employees e\n"
+                            + "\t\tWHERE e.department_id = d.department_id\n\t)\n" + "FROM departments d;\n", text);
 
         System.out.println(text);
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterIndexTest1.java
Patch:
@@ -32,9 +32,9 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(0, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+//        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterIndexTest2.java
Patch:
@@ -32,9 +32,9 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(0, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+//        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest3.java
Patch:
@@ -38,7 +38,7 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("WRH$_ROWCACHE_SUMMARY")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest4.java
Patch:
@@ -34,11 +34,11 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ws_pledge_contract")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("ws_pledge_contract", "reference")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest6.java
Patch:
@@ -34,11 +34,11 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("wl_service_record")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("wl_service_record", "service_type")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest8.java
Patch:
@@ -34,11 +34,11 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ws_i18n_translate_item")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("ws_i18n_translate_item", "id")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTestRename.java
Patch:
@@ -34,7 +34,7 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("PRODUCT_NEW_CLUSTER_YZS_0210")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAnyTest.java
Patch:
@@ -15,10 +15,10 @@ public void test_any() throws Exception {
                      + "UNIQUE DIMENSION RULES UPSERT SEQUENTIAL ORDER (s[ANY, 2000] = 0) "
                      + "ORDER BY country, prod, year;";
 
-        String expect = "SELECT country, prod, YEAR, s\n" + "FROM sales_view\n" + "MODEL\n"
-                        + "\tPARTITION BY (country)\n" + "\tDIMENSION BY (prod, YEAR)\n" + "\tMEASURES (sale s)\n"
+        String expect = "SELECT country, prod, year, s\n" + "FROM sales_view\n" + "MODEL\n"
+                        + "\tPARTITION BY (country)\n" + "\tDIMENSION BY (prod, year)\n" + "\tMEASURES (sale s)\n"
                         + "\tIGNORE NAV\n" + "\tUNIQUE DIMENSION\n"
-                        + "\tRULES UPSERT SEQUENTIAL ORDER (s[ANY, 2000] = 0)\n" + "ORDER BY country, prod, YEAR;\n";
+                        + "\tRULES UPSERT SEQUENTIAL ORDER (s[ANY, 2000] = 0)\n" + "ORDER BY country, prod, year;\n";
 
         OracleStatementParser parser = new OracleStatementParser(sql);
         SQLSelectStatement stmt = (SQLSelectStatement) parser.parseStatementList().get(0);

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateIndexTest1.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("PFS_PACKAGE_SAMPLE")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateTableTest1.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("wl_track_task")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(8, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateTableTest2.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("wl_ship_forecast")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(7, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateTableTest3.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("wl_ship_order")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(2, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateTableTest6.java
Patch:
@@ -34,12 +34,12 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"SYS\".SYS_TEMP_0FD9D66FD_93E068F3")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("SYS.SYS_TEMP_0FD9D66FD_93E068F3")));
 
         Assert.assertEquals(2, visitor.getColumns().size());
 
-         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("\"SYS\".SYS_TEMP_0FD9D66FD_93E068F3", "\"C0\"")));
-         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("\"SYS\".SYS_TEMP_0FD9D66FD_93E068F3", "\"C1\"")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("SYS.SYS_TEMP_0FD9D66FD_93E068F3", "C0")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("SYS.SYS_TEMP_0FD9D66FD_93E068F3", "C1")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OraclePivotClauseTest.java
Patch:
@@ -16,7 +16,7 @@ public void test_0() throws Exception {
 
         String expected = "SELECT *\n" + "FROM pivot_table\n"
                           + "\tUNPIVOT (yearly_total FOR order_mode IN (store AS 'direct', internet AS 'online'))\n"
-                          + "ORDER BY YEAR, order_mode;\n";
+                          + "ORDER BY year, order_mode;\n";
 
         OracleStatementParser parser = new OracleStatementParser(sql);
         SQLSelectStatement stmt = (SQLSelectStatement) parser.parseStatementList().get(0);

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest1.java
Patch:
@@ -33,7 +33,7 @@ public void test_0() throws Exception {
 //        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("orders")));
 
         Assert.assertEquals(0, visitor.getTables().size());
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getColumns().size());
 
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("bonuses", "employee_id")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest15.java
Patch:
@@ -33,7 +33,7 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("DUAL")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest16.java
Patch:
@@ -33,9 +33,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sysauth$")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(3, visitor.getColumns().size());
 
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest17.java
Patch:
@@ -33,9 +33,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("v$session")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(5, visitor.getColumns().size());
 
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest19.java
Patch:
@@ -42,11 +42,11 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(4, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sys.dba_data_files")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(17, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest20.java
Patch:
@@ -36,9 +36,9 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(0, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+//        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest21.java
Patch:
@@ -49,9 +49,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("DBA_HIST_SYSTEM_EVENT")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(13, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest22.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ESCROW.HT_TASK_TRADE_HISTORY")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(15, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest24.java
Patch:
@@ -34,11 +34,11 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ESCROW.HT_TASK_TRADE_HISTORY")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(5, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("ESCROW.HT_TASK_TRADE_HISTORY", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest25.java
Patch:
@@ -32,9 +32,9 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(0, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+//        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest29.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("category")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(6, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest30.java
Patch:
@@ -45,9 +45,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"ESCROW\".\"IPAY_ACCOUNT_FUND_RCD\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ESCROW.IPAY_ACCOUNT_FUND_RCD")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+//        Assert.assertEquals(0, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest7.java
Patch:
@@ -47,5 +47,7 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("departments", "location_id")));
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "*")));
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "department_id")));
+        
+        Assert.assertTrue(visitor.getOrderByColumns().contains(new TableStat.Column("employees", "last_name")));
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleSelectSubqueryTableSource.java
Patch:
@@ -82,7 +82,9 @@ protected void accept0(SQLASTVisitor visitor) {
 
     protected void accept0(OracleASTVisitor visitor) {
         if (visitor.visit(this)) {
+            acceptChild(visitor, this.hints);
             acceptChild(visitor, this.select);
+            acceptChild(visitor, this.pivot);
             acceptChild(visitor, this.flashback);
         }
         visitor.endVisit(this);

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -407,7 +407,7 @@ public OracleDateExpr parseDate() {
     public SQLExpr parseTimestamp() {
         accept(Token.TIMESTAMP);
         
-        if (lexer.token() != Token.LITERAL_ALIAS) {
+        if (lexer.token() != Token.LITERAL_ALIAS && lexer.token() != Token.LITERAL_CHARS) {
             return new SQLIdentifierExpr("TIMESTAMP");
         }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -214,6 +214,7 @@ public SQLExpr primary() throws ParserException {
             case LIMIT:
             case SCHEMA:
             case AT:
+            case COLUMN:
                 sqlExpr = new SQLIdentifierExpr(lexer.stringVal());
                 lexer.nextToken();
                 break;

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/CursorTest.java
Patch:
@@ -18,8 +18,8 @@ public void test_cursor() throws Exception {
 
         String text = TestUtils.outputOracle(stmt);
 
-        Assert.assertEquals("SELECT department_name, CURSOR(SELECT salary, commission_pct\n" + "\tFROM employees e\n"
-                            + "\tWHERE e.department_id = d.department_id)\n" + "FROM departments d;\n", text);
+        Assert.assertEquals("SELECT department_name, CURSOR(\n\t\tSELECT salary, commission_pct\n" + "\t\tFROM employees e\n"
+                            + "\t\tWHERE e.department_id = d.department_id\n\t)\n" + "FROM departments d;\n", text);
 
         System.out.println(text);
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterIndexTest1.java
Patch:
@@ -32,9 +32,9 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(0, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+//        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterIndexTest2.java
Patch:
@@ -32,9 +32,9 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(0, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+//        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest3.java
Patch:
@@ -38,7 +38,7 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("WRH$_ROWCACHE_SUMMARY")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest4.java
Patch:
@@ -34,11 +34,11 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ws_pledge_contract")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("ws_pledge_contract", "reference")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest6.java
Patch:
@@ -34,11 +34,11 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("wl_service_record")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("wl_service_record", "service_type")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTest8.java
Patch:
@@ -34,11 +34,11 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ws_i18n_translate_item")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("ws_i18n_translate_item", "id")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAlterTableTestRename.java
Patch:
@@ -34,7 +34,7 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("PRODUCT_NEW_CLUSTER_YZS_0210")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleAnyTest.java
Patch:
@@ -15,10 +15,10 @@ public void test_any() throws Exception {
                      + "UNIQUE DIMENSION RULES UPSERT SEQUENTIAL ORDER (s[ANY, 2000] = 0) "
                      + "ORDER BY country, prod, year;";
 
-        String expect = "SELECT country, prod, YEAR, s\n" + "FROM sales_view\n" + "MODEL\n"
-                        + "\tPARTITION BY (country)\n" + "\tDIMENSION BY (prod, YEAR)\n" + "\tMEASURES (sale s)\n"
+        String expect = "SELECT country, prod, year, s\n" + "FROM sales_view\n" + "MODEL\n"
+                        + "\tPARTITION BY (country)\n" + "\tDIMENSION BY (prod, year)\n" + "\tMEASURES (sale s)\n"
                         + "\tIGNORE NAV\n" + "\tUNIQUE DIMENSION\n"
-                        + "\tRULES UPSERT SEQUENTIAL ORDER (s[ANY, 2000] = 0)\n" + "ORDER BY country, prod, YEAR;\n";
+                        + "\tRULES UPSERT SEQUENTIAL ORDER (s[ANY, 2000] = 0)\n" + "ORDER BY country, prod, year;\n";
 
         OracleStatementParser parser = new OracleStatementParser(sql);
         SQLSelectStatement stmt = (SQLSelectStatement) parser.parseStatementList().get(0);

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateIndexTest1.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("PFS_PACKAGE_SAMPLE")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateTableTest1.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("wl_track_task")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(8, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateTableTest2.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("wl_ship_forecast")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(7, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateTableTest3.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("cdc.en_complaint_ipr_stat_fdt0")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("wl_ship_order")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(2, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleCreateTableTest6.java
Patch:
@@ -34,12 +34,12 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"SYS\".SYS_TEMP_0FD9D66FD_93E068F3")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("SYS.SYS_TEMP_0FD9D66FD_93E068F3")));
 
         Assert.assertEquals(2, visitor.getColumns().size());
 
-         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("\"SYS\".SYS_TEMP_0FD9D66FD_93E068F3", "\"C0\"")));
-         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("\"SYS\".SYS_TEMP_0FD9D66FD_93E068F3", "\"C1\"")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("SYS.SYS_TEMP_0FD9D66FD_93E068F3", "C0")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("SYS.SYS_TEMP_0FD9D66FD_93E068F3", "C1")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }
 }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OraclePivotClauseTest.java
Patch:
@@ -16,7 +16,7 @@ public void test_0() throws Exception {
 
         String expected = "SELECT *\n" + "FROM pivot_table\n"
                           + "\tUNPIVOT (yearly_total FOR order_mode IN (store AS 'direct', internet AS 'online'))\n"
-                          + "ORDER BY YEAR, order_mode;\n";
+                          + "ORDER BY year, order_mode;\n";
 
         OracleStatementParser parser = new OracleStatementParser(sql);
         SQLSelectStatement stmt = (SQLSelectStatement) parser.parseStatementList().get(0);

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest1.java
Patch:
@@ -33,7 +33,7 @@ public void test_0() throws Exception {
 //        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("orders")));
 
         Assert.assertEquals(0, visitor.getTables().size());
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(1, visitor.getColumns().size());
 
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("bonuses", "employee_id")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest15.java
Patch:
@@ -33,7 +33,7 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("DUAL")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest16.java
Patch:
@@ -33,9 +33,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sysauth$")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(3, visitor.getColumns().size());
 
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest17.java
Patch:
@@ -33,9 +33,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("v$session")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(5, visitor.getColumns().size());
 
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
 //        Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest19.java
Patch:
@@ -42,11 +42,11 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(4, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("sys.dba_data_files")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(17, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest20.java
Patch:
@@ -36,9 +36,9 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(0, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+//        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest21.java
Patch:
@@ -49,9 +49,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("DBA_HIST_SYSTEM_EVENT")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(13, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest22.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ESCROW.HT_TASK_TRADE_HISTORY")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(15, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest24.java
Patch:
@@ -34,11 +34,11 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ESCROW.HT_TASK_TRADE_HISTORY")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(5, visitor.getColumns().size());
 
-        // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
+         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("ESCROW.HT_TASK_TRADE_HISTORY", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "order_mode")));
     }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest25.java
Patch:
@@ -32,9 +32,9 @@ public void test_0() throws Exception {
         System.out.println("relationships : " + visitor.getRelationships());
         System.out.println("orderBy : " + visitor.getOrderByColumns());
 
-        Assert.assertEquals(1, visitor.getTables().size());
+        Assert.assertEquals(0, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+//        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
 
         Assert.assertEquals(0, visitor.getColumns().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest29.java
Patch:
@@ -34,9 +34,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"DUAL\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("category")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+        Assert.assertEquals(6, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest30.java
Patch:
@@ -45,9 +45,9 @@ public void test_0() throws Exception {
 
         Assert.assertEquals(1, visitor.getTables().size());
 
-        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("\"ESCROW\".\"IPAY_ACCOUNT_FUND_RCD\"")));
+        Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("ESCROW.IPAY_ACCOUNT_FUND_RCD")));
 
-        Assert.assertEquals(0, visitor.getColumns().size());
+//        Assert.assertEquals(0, visitor.getColumns().size());
 
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "*")));
         // Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("pivot_table", "YEAR")));

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest7.java
Patch:
@@ -47,5 +47,7 @@ public void test_0() throws Exception {
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("departments", "location_id")));
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "*")));
         Assert.assertTrue(visitor.getColumns().contains(new TableStat.Column("employees", "department_id")));
+        
+        Assert.assertTrue(visitor.getOrderByColumns().contains(new TableStat.Column("employees", "last_name")));
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGSchemaStatVisitor.java
Patch:
@@ -193,7 +193,7 @@ public boolean visit(PGInsertStatement x) {
         x.putAttribute("_original_use_mode", getMode());
         setMode(x, Mode.Insert);
 
-        String originalTable = currentTableLocal.get();
+        String originalTable = getCurrentTable();
 
         if (x.getTableName() instanceof SQLName) {
             String ident = ((SQLName) x.getTableName()).toString();

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -136,6 +136,7 @@ public class OracleLexer extends Lexer {
         map.put("IF", Token.IF);
         map.put("ELSE", Token.ELSE);
         map.put("GOTO", Token.GOTO);
+        map.put("COMMIT", Token.COMMIT);
 
         DEFAULT_ORACLE_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -171,6 +171,7 @@ public enum Token {
     GRANT("GRANT"),
     LOOP("LOOP"),
     GOTO("GOTO"),
+    COMMIT("COMMIT"),
     
     // transact-sql
     TOP("TOP"),

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -136,6 +136,7 @@ public class OracleLexer extends Lexer {
         map.put("IF", Token.IF);
         map.put("ELSE", Token.ELSE);
         map.put("GOTO", Token.GOTO);
+        map.put("COMMIT", Token.COMMIT);
 
         DEFAULT_ORACLE_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -171,6 +171,7 @@ public enum Token {
     GRANT("GRANT"),
     LOOP("LOOP"),
     GOTO("GOTO"),
+    COMMIT("COMMIT"),
     
     // transact-sql
     TOP("TOP"),

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -170,6 +170,7 @@ public enum Token {
     EXCEPTION("EXCEPTION"),
     GRANT("GRANT"),
     LOOP("LOOP"),
+    GOTO("GOTO"),
     
     // transact-sql
     TOP("TOP"),
@@ -207,6 +208,7 @@ public enum Token {
     SEMI(";"), 
     COMMA(","), 
     DOT("."), 
+    DOTDOT(".."), 
     EQ("="), 
     GT(">"), 
     LT("<"), 

File: src/main/java/com/alibaba/druid/sql/parser/SQLStatementParser.java
Patch:
@@ -284,7 +284,7 @@ public SQLStatement parseCreate() throws ParserException {
 
         Token token = lexer.token();
 
-        if (token == Token.TABLE) {
+        if (token == Token.TABLE || identifierEquals("GLOBAL")) {
             SQLCreateTableParser createTableParser = getSQLCreateTableParser();
             return createTableParser.parseCrateTable(false);
         } else if (token == Token.INDEX) {

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlStatementParser.java
Patch:
@@ -34,7 +34,6 @@
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.CobarShowStatus;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlBinlogStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlCommitStatement;
-import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlCreateTableParser;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlCreateUserStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlDeleteStatement;
 import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlDropUser;

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -919,8 +919,8 @@ protected SQLTableSource parseTableSourceRest(OracleSelectTableSource tableSourc
                 this.createExprParser().exprList(join.getUsing());
                 accept(Token.RPAREN);
             }
-
-            return join;
+            
+            return parseTableSourceRest(join);
         }
 
         return tableSource;

File: src/main/java/com/alibaba/druid/sql/parser/SQLCreateTableParser.java
Patch:
@@ -66,7 +66,7 @@ public SQLCreateTableStatement parseCrateTable(boolean acceptCreate) {
             lexer.nextToken();
 
             while (lexer.token() == Token.IDENTIFIER) {
-                SQLColumnDefinition column = parseColumn();
+                SQLColumnDefinition column = this.exprParser.parseColumn();
                 createTable.getTableElementList().add(column);
 
                 // parseConstaint(column.getConstaints());

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -23,6 +23,7 @@
  */
 public enum Token {
     FOR("FOR"), 
+    IF("IF"), 
     INDEX("INDEX"), 
     PRIMARY("PRIMARY"), 
     KEY("KEY"), 
@@ -159,6 +160,7 @@ public enum Token {
     WAIT("WAIT"),
     ADVISE("ADVISE"),
     SESSION("SESSION"),
+    PROCEDURE("PROCEDURE"),
     AT("AT"),
     LOCAL("LOCAL"),
     TIME("TIME"),
@@ -167,6 +169,7 @@ public enum Token {
     DECLARE("DECLARE"),
     EXCEPTION("EXCEPTION"),
     GRANT("GRANT"),
+    LOOP("LOOP"),
     
     // transact-sql
     TOP("TOP"),

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLUnaryOperator.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.sql.ast.expr;
 
 public enum SQLUnaryOperator {
-    Plus("+"), Negative("-"), Not("!"), Compl("~"), Prior("PRIOR"), ConnectByRoot("CONNECT BY");
+    Plus("+"), Negative("-"), Not("!"), Compl("~"), Prior("PRIOR"), ConnectByRoot("CONNECT BY"), NOT("NOT");
 
     public final String name;
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLUnaryOperator.java
Patch:
@@ -16,7 +16,7 @@
 package com.alibaba.druid.sql.ast.expr;
 
 public enum SQLUnaryOperator {
-    Plus("+"), Negative("-"), Not("!"), Compl("~"), Prior("PRIOR"), ConnectByRoot("CONNECT BY");
+    Plus("+"), Negative("-"), Not("!"), Compl("~"), Prior("PRIOR"), ConnectByRoot("CONNECT BY"), NOT("NOT");
 
     public final String name;
 

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -53,6 +53,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLSomeExpr;
 import com.alibaba.druid.sql.ast.expr.SQLUnaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;
+import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.NotNullConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLCallStatement;
 import com.alibaba.druid.sql.ast.statement.SQLColumnConstraint;
@@ -746,7 +747,7 @@ public boolean visit(SQLSetStatement x) {
     }
 
     @Override
-    public boolean visit(SQLSetStatement.Item x) {
+    public boolean visit(SQLAssignItem x) {
         x.getTarget().accept(this);
         print(" = ");
         x.getValue().accept(this);

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTVisitor.java
Patch:
@@ -50,6 +50,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLSomeExpr;
 import com.alibaba.druid.sql.ast.expr.SQLUnaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;
+import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.NotNullConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLCallStatement;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
@@ -281,9 +282,9 @@ public interface SQLASTVisitor {
 
     boolean visit(SQLSetStatement x);
 
-    void endVisit(SQLSetStatement.Item x);
+    void endVisit(SQLAssignItem x);
 
-    boolean visit(SQLSetStatement.Item x);
+    boolean visit(SQLAssignItem x);
 
     void endVisit(SQLCallStatement x);
 

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTVisitorAdapter.java
Patch:
@@ -50,6 +50,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLSomeExpr;
 import com.alibaba.druid.sql.ast.expr.SQLUnaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;
+import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.NotNullConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLCallStatement;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
@@ -443,12 +444,12 @@ public boolean visit(SQLSetStatement x) {
     }
 
     @Override
-    public void endVisit(SQLSetStatement.Item x) {
+    public void endVisit(SQLAssignItem x) {
 
     }
 
     @Override
-    public boolean visit(SQLSetStatement.Item x) {
+    public boolean visit(SQLAssignItem x) {
         return true;
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -120,6 +120,7 @@ public class OracleLexer extends Lexer {
         map.put("MODE", Token.MODE);
         map.put("WAIT", Token.WAIT);
         map.put("NOWAIT", Token.NOWAIT);
+        map.put("SESSION", Token.SESSION);
 
         DEFAULT_ORACLE_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/parser/Lexer.java
Patch:
@@ -19,7 +19,6 @@
 import static com.alibaba.druid.sql.parser.CharTypes.isIdentifierChar;
 import static com.alibaba.druid.sql.parser.CharTypes.isWhitespace;
 import static com.alibaba.druid.sql.parser.LayoutCharacters.EOI;
-import static com.alibaba.druid.sql.parser.Token.COLON;
 import static com.alibaba.druid.sql.parser.Token.COLONEQ;
 import static com.alibaba.druid.sql.parser.Token.COMMA;
 import static com.alibaba.druid.sql.parser.Token.EOF;

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -65,7 +65,7 @@ protected String as() throws ParserException {
                 return alias;
             }
 
-            if (lexer.token() == Token.YEAR || lexer.token() == Token.DAY) {
+            if (lexer.token() == Token.YEAR || lexer.token() == Token.DAY || lexer.token() == Token.KEY) {
                 alias = lexer.token.name();
                 lexer.nextToken();
                 return alias;

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -155,6 +155,8 @@ public enum Token {
     EXCLUSIVE("EXCLUSIVE"),
     MODE("MODE"),
     WAIT("WAIT"),
+    ADVISE("ADVISE"),
+    SESSION("SESSION"),
     
     // transact-sql
     TOP("TOP"),

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTOutputVisitor.java
Patch:
@@ -53,6 +53,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLSomeExpr;
 import com.alibaba.druid.sql.ast.expr.SQLUnaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;
+import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.NotNullConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLCallStatement;
 import com.alibaba.druid.sql.ast.statement.SQLColumnConstraint;
@@ -746,7 +747,7 @@ public boolean visit(SQLSetStatement x) {
     }
 
     @Override
-    public boolean visit(SQLSetStatement.Item x) {
+    public boolean visit(SQLAssignItem x) {
         x.getTarget().accept(this);
         print(" = ");
         x.getValue().accept(this);

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTVisitor.java
Patch:
@@ -50,6 +50,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLSomeExpr;
 import com.alibaba.druid.sql.ast.expr.SQLUnaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;
+import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.NotNullConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLCallStatement;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
@@ -281,9 +282,9 @@ public interface SQLASTVisitor {
 
     boolean visit(SQLSetStatement x);
 
-    void endVisit(SQLSetStatement.Item x);
+    void endVisit(SQLAssignItem x);
 
-    boolean visit(SQLSetStatement.Item x);
+    boolean visit(SQLAssignItem x);
 
     void endVisit(SQLCallStatement x);
 

File: src/main/java/com/alibaba/druid/sql/visitor/SQLASTVisitorAdapter.java
Patch:
@@ -50,6 +50,7 @@
 import com.alibaba.druid.sql.ast.expr.SQLSomeExpr;
 import com.alibaba.druid.sql.ast.expr.SQLUnaryExpr;
 import com.alibaba.druid.sql.ast.expr.SQLVariantRefExpr;
+import com.alibaba.druid.sql.ast.statement.SQLAssignItem;
 import com.alibaba.druid.sql.ast.statement.NotNullConstraint;
 import com.alibaba.druid.sql.ast.statement.SQLCallStatement;
 import com.alibaba.druid.sql.ast.statement.SQLColumnDefinition;
@@ -443,12 +444,12 @@ public boolean visit(SQLSetStatement x) {
     }
 
     @Override
-    public void endVisit(SQLSetStatement.Item x) {
+    public void endVisit(SQLAssignItem x) {
 
     }
 
     @Override
-    public boolean visit(SQLSetStatement.Item x) {
+    public boolean visit(SQLAssignItem x) {
         return true;
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprTableSource.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLExprTableSource extends SQLTableSource {
+public class SQLExprTableSource extends SQLTableSourceImpl {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLJoinTableSource.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLJoinTableSource extends SQLTableSource {
+public class SQLJoinTableSource extends SQLTableSourceImpl {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSubqueryTableSource.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLSubqueryTableSource extends SQLTableSource {
+public class SQLSubqueryTableSource extends SQLTableSourceImpl {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleDeleteParser.java
Patch:
@@ -26,11 +26,14 @@ public class OracleDeleteParser extends SQLStatementParser {
 
     public OracleDeleteParser(String sql){
         super(sql);
+        this.exprParser = new OracleExprParser(lexer);
     }
 
     public OracleDeleteParser(Lexer lexer){
         super(lexer);
+        this.exprParser = new OracleExprParser(lexer);
     }
+    
 
     public OracleDeleteStatement parseDelete() throws ParserException {
         accept(Token.DELETE);

File: src/main/java/com/alibaba/druid/sql/parser/CharTypes.java
Patch:
@@ -70,6 +70,7 @@ public static boolean isFirstIdentifierChar(char c) {
         // identifierFlags['`'] = true;
         identifierFlags['_'] = true;
         identifierFlags['$'] = true;
+        identifierFlags['#'] = true;
     }
 
     public static boolean isIdentifierChar(char c) {

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -552,7 +552,7 @@ public final void exprList(Collection<SQLExpr> exprCol) throws ParserException {
         }
     }
 
-    public final SQLName name() throws ParserException {
+    public SQLName name() throws ParserException {
         String identName;
         if (lexer.token() == Token.LITERAL_ALIAS) {
             identName = '"' + lexer.stringVal() + '"';
@@ -570,8 +570,8 @@ public final SQLName name() throws ParserException {
         if (lexer.token() == Token.DOT) {
             lexer.nextToken();
 
-            if (lexer.token() != Token.IDENTIFIER) {
-                throw new ParserException("error");
+            if (lexer.token() != Token.LITERAL_ALIAS && lexer.token() != Token.IDENTIFIER) {
+                throw new ParserException("error, " + lexer.token());
             }
 
             name = new SQLPropertyExpr(name, lexer.stringVal());

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -114,7 +114,7 @@ public void accept(Token token) {
             lexer.nextToken();
         } else {
             setErrorEndPos(lexer.pos());
-            throw new SQLParseException("syntax error, expect " + token + ", actual " + lexer.token());
+            throw new SQLParseException("syntax error, expect " + token + ", actual " + lexer.token() + " " + lexer.stringVal());
         }
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLExprTableSource.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLExprTableSource extends SQLTableSource {
+public class SQLExprTableSource extends SQLTableSourceImpl {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLJoinTableSource.java
Patch:
@@ -18,7 +18,7 @@
 import com.alibaba.druid.sql.ast.SQLExpr;
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLJoinTableSource extends SQLTableSource {
+public class SQLJoinTableSource extends SQLTableSourceImpl {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLSubqueryTableSource.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.druid.sql.visitor.SQLASTVisitor;
 
-public class SQLSubqueryTableSource extends SQLTableSource {
+public class SQLSubqueryTableSource extends SQLTableSourceImpl {
 
     private static final long serialVersionUID = 1L;
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -113,6 +113,7 @@ public class OracleLexer extends Lexer {
         map.put("UNLIMITED", Token.UNLIMITED);
         map.put("RETURNING", Token.RETURNING);
         map.put("LIMIT", Token.LIMIT);
+        map.put("OF", Token.OF);
 
         DEFAULT_ORACLE_KEYWORDS = new Keywords(map);
     }
@@ -323,4 +324,5 @@ public void scanNumber() {
             token = Token.LITERAL_INT;
         }
     }
+    
 }

File: src/main/java/com/alibaba/druid/sql/parser/CharTypes.java
Patch:
@@ -70,6 +70,7 @@ public static boolean isFirstIdentifierChar(char c) {
         // identifierFlags['`'] = true;
         identifierFlags['_'] = true;
         identifierFlags['$'] = true;
+        identifierFlags['#'] = true;
     }
 
     public static boolean isIdentifierChar(char c) {

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -570,8 +570,8 @@ public final SQLName name() throws ParserException {
         if (lexer.token() == Token.DOT) {
             lexer.nextToken();
 
-            if (lexer.token() != Token.IDENTIFIER) {
-                throw new ParserException("error");
+            if (lexer.token() != Token.LITERAL_ALIAS && lexer.token() != Token.IDENTIFIER) {
+                throw new ParserException("error, " + lexer.token());
             }
 
             name = new SQLPropertyExpr(name, lexer.stringVal());

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -845,7 +845,7 @@ protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
             if (lexer.token() == Token.ON) {
                 lexer.nextToken();
                 join.setCondition(this.createExprParser().expr());
-            } else if (identifierEquals("USING")) {
+            } else if (lexer.token() == Token.USING) {
                 lexer.nextToken();
                 accept(Token.LPAREN);
                 this.createExprParser().exprList(join.getUsing());

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -296,6 +296,7 @@ public OracleStatement parseMultiInsert() {
                 parseInsert0(insertInto, false);
                 clause.setElseItem(insertInto);
             }
+            stmt.getEntries().add(clause);
         }
 
         SQLSelect subQuery = this.createSQLSelectParser().select();

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGSchemaStatVisitor.java
Patch:
@@ -72,6 +72,7 @@ public boolean visit(PGWithQuery x) {
 
             if (alias != null) {
                 aliasMap.put(alias, null);
+                subQueryMap.put(alias, x.getQuery());
             }
         }
         x.getQuery().accept(this);

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleUpdateSetListSingleColumnItem.java
Patch:
@@ -32,6 +32,7 @@ public OracleUpdateSetListSingleColumnItem(){
     public void accept0(OracleASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, this.column);
+            acceptChild(visitor, this.value);
         }
 
         visitor.endVisit(this);

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -845,7 +845,7 @@ protected SQLTableSource parseTableSourceRest(SQLTableSource tableSource) {
             if (lexer.token() == Token.ON) {
                 lexer.nextToken();
                 join.setCondition(this.createExprParser().expr());
-            } else if (identifierEquals("USING")) {
+            } else if (lexer.token() == Token.USING) {
                 lexer.nextToken();
                 accept(Token.LPAREN);
                 this.createExprParser().exprList(join.getUsing());

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleStatementParser.java
Patch:
@@ -296,6 +296,7 @@ public OracleStatement parseMultiInsert() {
                 parseInsert0(insertInto, false);
                 clause.setElseItem(insertInto);
             }
+            stmt.getEntries().add(clause);
         }
 
         SQLSelect subQuery = this.createSQLSelectParser().select();

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/visitor/PGSchemaStatVisitor.java
Patch:
@@ -72,6 +72,7 @@ public boolean visit(PGWithQuery x) {
 
             if (alias != null) {
                 aliasMap.put(alias, null);
+                subQueryMap.put(alias, x.getQuery());
             }
         }
         x.getQuery().accept(this);

File: src/main/java/com/alibaba/druid/sql/dialect/hive/parser/HiveLexer.java
Patch:
@@ -84,6 +84,8 @@ public class HiveLexer extends Lexer {
 
         map.put("WITH", Token.WITH);
         map.put("PARTITIONED", Token.PARTITIONED);
+        map.put("SHOW", Token.SHOW);
+        map.put("TABLES", Token.TABLES);
 
         DEFAULT_SQL_SERVER_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/ast/stmt/OracleUpdateSetListSingleColumnItem.java
Patch:
@@ -32,6 +32,7 @@ public OracleUpdateSetListSingleColumnItem(){
     public void accept0(OracleASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, this.column);
+            acceptChild(visitor, this.value);
         }
 
         visitor.endVisit(this);

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -157,6 +157,8 @@ public enum Token {
     
     // hive
     PARTITIONED("PARTITIONED"),
+    SHOW("SHOW"),
+    TABLES("TABLES"),
 
     EOF, 
     ERROR,

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleInsertTest.java
Patch:
@@ -10,7 +10,7 @@
 import com.alibaba.druid.sql.dialect.oracle.visitor.OracleSchemaStatVisitor;
 import com.alibaba.druid.stat.TableStat;
 
-public class OracleSelectTest extends OracleTest {
+public class OracleInsertTest extends OracleTest {
 
     public void test_0() throws Exception {
         String sql = "INSERT INTO films VALUES ('UA502', 'Bananas', 105, '1971-07-13', 'Comedy', '82 minutes');";
@@ -28,6 +28,7 @@ public void test_0() throws Exception {
         System.out.println("Tables : " + visitor.getTables());
         System.out.println("fields : " + visitor.getColumns());
         System.out.println("coditions : " + visitor.getConditions());
+        System.out.println("relationships : " + visitor.getRelationships());
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("films")));
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleMergeTest.java
Patch:
@@ -36,6 +36,7 @@ public void test_0() throws Exception {
         System.out.println("Tables : " + visitor.getTables());
         System.out.println("fields : " + visitor.getColumns());
         System.out.println("coditions : " + visitor.getConditions());
+        System.out.println("relationships : " + visitor.getRelationships());
 
         Assert.assertEquals(2, visitor.getTables().size());
 

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleSelectTest2.java
Patch:
@@ -40,6 +40,7 @@ public void test_0() throws Exception {
         System.out.println("Tables : " + visitor.getTables());
         System.out.println("fields : " + visitor.getColumns());
         System.out.println("coditions : " + visitor.getConditions());
+        System.out.println("relationships : " + visitor.getRelationships());
 
         Assert.assertEquals(2, visitor.getTables().size());
         

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUpdateStatement.java
Patch:
@@ -27,10 +27,10 @@ public class SQLUpdateStatement extends SQLStatementImpl {
 
     private static final long            serialVersionUID = 1L;
 
-    private final List<SQLUpdateSetItem> items            = new ArrayList<SQLUpdateSetItem>();
-    private SQLExpr                      where;
+    protected final List<SQLUpdateSetItem> items            = new ArrayList<SQLUpdateSetItem>();
+    protected SQLExpr                      where;
 
-    private SQLTableSource               tableSource;
+    protected SQLTableSource               tableSource;
 
     public SQLUpdateStatement(){
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -385,7 +385,7 @@ public final SQLExpr primaryRest(SQLExpr expr) throws ParserException {
         return super.primaryRest(expr);
     }
 
-    protected SQLSelectParser createSelectParser() {
+    public SQLSelectParser createSelectParser() {
         return new MySqlSelectParser(this.lexer);
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -478,7 +478,7 @@ private OracleIntervalType parseIntervalType() {
     }
 
     @Override
-    protected OracleSelectParser createSelectParser() {
+    public OracleSelectParser createSelectParser() {
         return new OracleSelectParser(this.lexer);
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -418,7 +418,7 @@ protected SQLExpr parseInterval() {
         throw new ParserException("TODO");
     }
 
-    protected SQLSelectParser createSelectParser() {
+    public SQLSelectParser createSelectParser() {
         return new SQLSelectParser(lexer);
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLUpdateStatement.java
Patch:
@@ -27,10 +27,10 @@ public class SQLUpdateStatement extends SQLStatementImpl {
 
     private static final long            serialVersionUID = 1L;
 
-    private final List<SQLUpdateSetItem> items            = new ArrayList<SQLUpdateSetItem>();
-    private SQLExpr                      where;
+    protected final List<SQLUpdateSetItem> items            = new ArrayList<SQLUpdateSetItem>();
+    protected SQLExpr                      where;
 
-    private SQLTableSource               tableSource;
+    protected SQLTableSource               tableSource;
 
     public SQLUpdateStatement(){
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -385,7 +385,7 @@ public final SQLExpr primaryRest(SQLExpr expr) throws ParserException {
         return super.primaryRest(expr);
     }
 
-    protected SQLSelectParser createSelectParser() {
+    public SQLSelectParser createSelectParser() {
         return new MySqlSelectParser(this.lexer);
     }
 

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -478,7 +478,7 @@ private OracleIntervalType parseIntervalType() {
     }
 
     @Override
-    protected OracleSelectParser createSelectParser() {
+    public OracleSelectParser createSelectParser() {
         return new OracleSelectParser(this.lexer);
     }
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLExprParser.java
Patch:
@@ -418,7 +418,7 @@ protected SQLExpr parseInterval() {
         throw new ParserException("TODO");
     }
 
-    protected SQLSelectParser createSelectParser() {
+    public SQLSelectParser createSelectParser() {
         return new SQLSelectParser(lexer);
     }
 

File: src/main/java/com/alibaba/druid/sql/ast/expr/SQLInSubQueryExpr.java
Patch:
@@ -70,6 +70,7 @@ public void output(StringBuffer buf) {
     @Override
     protected void accept0(SQLASTVisitor visitor) {
         if (visitor.visit(this)) {
+            acceptChild(visitor,this.expr);
             acceptChild(visitor, this.subQuery);
         }
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -105,6 +105,8 @@ public class PGLexer extends Lexer {
         map.put("CASCADE", Token.CASCADE);
         map.put("RESTRICT", Token.RESTRICT);
         map.put("USING", Token.USING);
+        map.put("CURRENT", Token.CURRENT);
+        map.put("RETURNING", Token.RETURNING);
 
         DEFAULT_MYSQL_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -125,6 +125,8 @@ public enum Token {
     CASCADE("CASCADE"),
     RESTRICT("RESTRICT"),
     USING("USING"),
+    CURRENT("CURRENT"),
+    RETURNING("RETURNING"),
     
     // oracle
     START("START"),

File: src/test/java/com/alibaba/druid/bvt/sql/postgresql/PGDeleteTest2.java
Patch:
@@ -30,7 +30,7 @@ public void test_0() throws Exception {
 
         Assert.assertTrue(visitor.getTables().containsKey(new TableStat.Name("tasks")));
 
-        //Assert.assertTrue(visitor.getFields().size() == 0);
+        Assert.assertTrue(visitor.getFields().size() == 0);
     }
 
     

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/PGTruncateStatement.java
Patch:
@@ -39,5 +39,6 @@ public void accept0(PGASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, tableNames);
         }
+        visitor.endVisit(this);
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/PGWithClause.java
Patch:
@@ -31,5 +31,6 @@ public void accept0(PGASTVisitor visitor) {
 		if (visitor.visit(this)) {
 			acceptChild(visitor, withQuery);
 		}
+		visitor.endVisit(this);
 	}
-}
\ No newline at end of file
+}

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/PGWithQuery.java
Patch:
@@ -40,5 +40,6 @@ public void accept0(PGASTVisitor visitor) {
 			acceptChild(visitor, columns);
 			acceptChild(visitor, subQuery);
 		}
+		visitor.endVisit(this);
 	}
-}
\ No newline at end of file
+}

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDeleteStatement.java
Patch:
@@ -23,8 +23,8 @@
 public class SQLDeleteStatement extends SQLStatementImpl {
 
     private static final long serialVersionUID = 1L;
-    private SQLName           tableName;
-    private SQLExpr           where;
+    protected SQLName         tableName;
+    protected SQLExpr         where;
 
     public SQLDeleteStatement(){
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/ast/PGTruncateStatement.java
Patch:
@@ -39,5 +39,6 @@ public void accept0(PGASTVisitor visitor) {
         if (visitor.visit(this)) {
             acceptChild(visitor, tableNames);
         }
+        visitor.endVisit(this);
     }
 }

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -104,6 +104,7 @@ public class PGLexer extends Lexer {
         map.put("IDENTITY", Token.IDENTITY);
         map.put("CASCADE", Token.CASCADE);
         map.put("RESTRICT", Token.RESTRICT);
+        map.put("USING", Token.USING);
 
         DEFAULT_MYSQL_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -124,6 +124,7 @@ public enum Token {
     CONTINUE("CONTINUE"),
     CASCADE("CASCADE"),
     RESTRICT("RESTRICT"),
+    USING("USING"),
     
     // oracle
     START("START"),

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -350,8 +350,6 @@ public boolean visit(SQLDeleteStatement x) {
         x.putAttribute("_original_use_mode", modeLocal.get());
         modeLocal.set(Mode.Delete);
 
-        aliasLocal.set(new HashMap<String, String>());
-
         String ident = ((SQLIdentifierExpr) x.getTableName()).getName();
         currentTableLocal.set(ident);
 

File: src/main/java/com/alibaba/druid/sql/ast/statement/SQLDeleteStatement.java
Patch:
@@ -23,8 +23,8 @@
 public class SQLDeleteStatement extends SQLStatementImpl {
 
     private static final long serialVersionUID = 1L;
-    private SQLName           tableName;
-    private SQLExpr           where;
+    protected SQLName         tableName;
+    protected SQLExpr         where;
 
     public SQLDeleteStatement(){
 

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -104,6 +104,7 @@ public class PGLexer extends Lexer {
         map.put("IDENTITY", Token.IDENTITY);
         map.put("CASCADE", Token.CASCADE);
         map.put("RESTRICT", Token.RESTRICT);
+        map.put("USING", Token.USING);
 
         DEFAULT_MYSQL_KEYWORDS = new Keywords(map);
     }

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -124,6 +124,7 @@ public enum Token {
     CONTINUE("CONTINUE"),
     CASCADE("CASCADE"),
     RESTRICT("RESTRICT"),
+    USING("USING"),
     
     // oracle
     START("START"),

File: src/main/java/com/alibaba/druid/sql/visitor/SchemaStatVisitor.java
Patch:
@@ -350,8 +350,6 @@ public boolean visit(SQLDeleteStatement x) {
         x.putAttribute("_original_use_mode", modeLocal.get());
         modeLocal.set(Mode.Delete);
 
-        aliasLocal.set(new HashMap<String, String>());
-
         String ident = ((SQLIdentifierExpr) x.getTableName()).getName();
         currentTableLocal.set(ident);
 

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -112,6 +112,9 @@ public enum Token {
     SHARE("SHARE"),
     NOWAIT("NOWAIT"),
     RECURSIVE("RECURSIVE"),
+    TEMPORARY("TEMPORARY"),
+    TEMP("TEMP"),
+    UNLOGGED("UNLOGGED"),
     
     // oracle
     START("START"),

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlSchemaStatVisitorTest5.java
Patch:
@@ -18,7 +18,7 @@ public void test_0() throws Exception {
 				+ "  LEFT JOIN (select * from view_portal_panel) c  ON a.panel_id = c.panel_id   "
 				+ " WHERE     b.user_id = ? and     ((b.is_grid='y' and c.param_name='is_hidden' and c.param_value='false') or      b.is_grid  != 'y') and b.user_id in (select user_id from table1 where id = 1)    ORDER BY    a.col ASC, a.position ASC";
 
-		sql = "select columnName from table1 where id in (select id from table3 where name = ?)";
+//		sql = "select columnName from table1 where id in (select id from table3 where name = ?)";
 		MySqlStatementParser parser = new MySqlStatementParser(sql);
 		List<SQLStatement> statementList = parser.parseStatementList();
 		SQLStatement statemen = statementList.get(0);

File: src/main/java/com/alibaba/druid/sql/dialect/postgresql/parser/PGLexer.java
Patch:
@@ -95,6 +95,7 @@ public class PGLexer extends Lexer {
 	        map.put("SHARE", Token.SHARE);
 	        map.put("NOWAIT", Token.NOWAIT);
 	        map.put("RECURSIVE", Token.RECURSIVE);
+	        map.put("WITH", Token.WITH);
 
 	        DEFAULT_MYSQL_KEYWORDS = new Keywords(map);
 	    }

File: src/test/java/com/alibaba/druid/bvt/sql/mysql/visitor/MySqlSchemaStatVisitorTest5.java
Patch:
@@ -18,7 +18,7 @@ public void test_0() throws Exception {
 				+ "  LEFT JOIN (select * from view_portal_panel) c  ON a.panel_id = c.panel_id   "
 				+ " WHERE     b.user_id = ? and     ((b.is_grid='y' and c.param_name='is_hidden' and c.param_value='false') or      b.is_grid  != 'y') and b.user_id in (select user_id from table1 where id = 1)    ORDER BY    a.col ASC, a.position ASC";
 
-		sql = "select columnName from table1 where id in (select id from table3 where name = ?)";
+//		sql = "select columnName from table1 where id in (select id from table3 where name = ?)";
 		MySqlStatementParser parser = new MySqlStatementParser(sql);
 		List<SQLStatement> statementList = parser.parseStatementList();
 		SQLStatement statemen = statementList.get(0);

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/visitor/MySqlSchemaStatVisitor.java
Patch:
@@ -47,8 +47,8 @@ public boolean visit(SQLSubqueryTableSource x) {
     }
 
     public boolean visit(SQLExprTableSource x) {
-        if (x.getExpr() instanceof SQLIdentifierExpr) {
-            String ident = ((SQLIdentifierExpr) x.getExpr()).getName();
+        if (x.getExpr() instanceof SQLIdentifierExpr || x.getExpr() instanceof SQLPropertyExpr) {
+            String ident = x.getExpr().toString();
             TableStat stat = tableStats.get(ident);
             if (stat == null) {
                 stat = new TableStat();

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/visitor/OracleSchemaStatVisitor.java
Patch:
@@ -54,8 +54,8 @@ public boolean visit(SQLSubqueryTableSource x) {
     }
 
     public boolean visit(SQLExprTableSource x) {
-        if (x.getExpr() instanceof SQLName) {
-            String ident = ((SQLName) x.getExpr()).toString();
+    	if (x.getExpr() instanceof SQLIdentifierExpr || x.getExpr() instanceof SQLPropertyExpr) {
+    		String ident = x.getExpr().toString();
             TableStat stat = tableStats.get(ident);
             if (stat == null) {
                 stat = new TableStat();

File: src/main/java/com/alibaba/druid/stat/DruidDataSourceStatManager.java
Patch:
@@ -210,6 +210,7 @@ public CompositeDataSupport getCompositeData(DruidDataSource dataSource) throws
 
         map.put("LastErrorTime", dataSource.getLastErrorTime());
         map.put("LastCreateErrorTime", dataSource.getLastCreateErrorTime());
+        map.put("CreateErrorCount", dataSource.getCreateErrorCount());
 
         return new CompositeDataSupport(rowType, map);
     }
@@ -232,7 +233,7 @@ public static CompositeType getDruidDataSourceCompositeType() throws JMException
                 SimpleType.LONG, SimpleType.LONG, SimpleType.LONG, SimpleType.LONG, SimpleType.LONG//
                 , SimpleType.LONG, SimpleType.LONG, JMXUtils.getThrowableCompositeType(), JMXUtils.getThrowableCompositeType(), SimpleType.LONG //
                 , SimpleType.LONG, SimpleType.LONG, SimpleType.LONG, SimpleType.LONG, SimpleType.STRING //
-                , SimpleType.DATE , SimpleType.DATE
+                , SimpleType.DATE , SimpleType.DATE, SimpleType.LONG
         //
         };
 
@@ -252,7 +253,7 @@ public static CompositeType getDruidDataSourceCompositeType() throws JMException
                 "StartTransactionCount", //
                 "CommitCount", "RollbackCount", "LastError", "LastCreateError", "PreparedStatementCacheDeleteCount" //
                 , "PreparedStatementCacheAccessCount", "PreparedStatementCacheMissCount", "PreparedStatementCacheHitCount", "PreparedStatementCacheCurrentCount", "Version" // 
-                , "LastErrorTime", "LastCreateErrorTime"
+                , "LastErrorTime", "LastCreateErrorTime", "CreateErrorCount"
         //
         };
 

File: src/main/java/com/alibaba/druid/sql/dialect/mysql/parser/MySqlExprParser.java
Patch:
@@ -415,7 +415,7 @@ protected SQLExpr parseInterval() {
 
             MySqlIntervalExpr intervalExpr = new MySqlIntervalExpr();
             intervalExpr.setValue(value);
-            intervalExpr.setUnit(MySqlIntervalUnit.valueOf(unit));
+            intervalExpr.setUnit(MySqlIntervalUnit.valueOf(unit.toUpperCase()));
 
             return intervalExpr;
         }

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PoolableCallableStatementTest.java
Patch:
@@ -29,7 +29,7 @@ public class PoolableCallableStatementTest extends TestCase {
     protected void setUp() throws Exception {
         raw = new MockCallableStatement(null, null);
         stmt = new PoolableCallableStatement(null,
-                                             new PreparedStatementHolder(new PreparedStatementKey("", null, null), raw)) {
+                                             new PreparedStatementHolder(new PreparedStatementKey("", null, null, 0, 0, 0), raw)) {
 
             protected SQLException checkException(Throwable error) throws SQLException {
                 if (error instanceof SQLException) {

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PoolablePreparedStatementTest.java
Patch:
@@ -25,7 +25,7 @@ public class PoolablePreparedStatementTest extends TestCase {
     protected void setUp() throws Exception {
         raw = new MockPreparedStatement(null, null);
         stmt = new PoolablePreparedStatement(null,
-                                             new PreparedStatementHolder(new PreparedStatementKey("", null, null), raw)) {
+                                             new PreparedStatementHolder(new PreparedStatementKey("", null, null, 0, 0, 0), raw)) {
 
             protected SQLException checkException(Throwable error) throws SQLException {
                 if (error instanceof SQLException) {

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -512,6 +512,9 @@ public void handleConnectionException(PoolableConnection pooledConnection, Throw
 
             // exceptionSorter.isExceptionFatal
             if (exceptionSorter != null && exceptionSorter.isExceptionFatal(sqlEx)) {
+                if (pooledConnection.isTraceEnable()) {
+                    activeConnections.remove(pooledConnection);
+                }
                 this.discardConnection(holder.getConnection());
                 pooledConnection.disable();
             }

File: src/test/java/com/alibaba/druid/bvt/filter/TraceFilterTest_close_error.java
Patch:
@@ -30,7 +30,7 @@ protected void setUp() throws Exception {
         };
 
         dataSource = new DruidDataSource();
-        dataSource.setUrl("jdbc:mock:xxx");
+        dataSource.setUrl("jdbc:mock:TraceFilterTest_close_error");
         dataSource.setDriver(driver);
         dataSource.setInitialSize(1);
         dataSource.setMaxActive(2);

File: src/test/java/com/alibaba/druid/bvt/filter/TraceFilterTest_commit_error.java
Patch:
@@ -31,7 +31,7 @@ protected void setUp() throws Exception {
         };
 
         dataSource = new DruidDataSource();
-        dataSource.setUrl("jdbc:mock:xxx");
+        dataSource.setUrl("jdbc:mock:TraceFilterTest_commit_error");
         dataSource.setDriver(driver);
         dataSource.setInitialSize(1);
         dataSource.setMaxActive(2);

File: src/test/java/com/alibaba/druid/bvt/pool/TestConnectError.java
Patch:
@@ -47,7 +47,7 @@ public Connection connect(String url, Properties info) throws SQLException {
         dataSource.setTimeBetweenEvictionRunsMillis(10);
         dataSource.setMinEvictableIdleTimeMillis(300 * 1000);
         dataSource.setMaxActive(20);
-        dataSource.setUrl("jdbc:mock:xxx");
+        dataSource.setUrl("jdbc:mock:TestConnectError");
 
     }
 

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PreparedStatementKeyTest.java
Patch:
@@ -4,6 +4,7 @@
 
 import org.junit.Assert;
 
+import com.alibaba.druid.mock.MockConnection;
 import com.alibaba.druid.mock.MockPreparedStatement;
 import com.alibaba.druid.pool.ConnectionHolder;
 import com.alibaba.druid.pool.DruidDataSource;
@@ -98,9 +99,10 @@ public void test_equals_6() throws Exception {
     
     public void test_contains() throws Exception {
         DruidDataSource dataSource = new DruidDataSource();
+        MockConnection conn = new MockConnection();
         PreparedStatementKey k1 = new PreparedStatementKey("x1", "c1", MethodType.M1);
         
-        PreparedStatementPool pool = new PreparedStatementPool(new ConnectionHolder(dataSource, null));
+        PreparedStatementPool pool = new PreparedStatementPool(new ConnectionHolder(dataSource, conn));
         MockPreparedStatement raw = new MockPreparedStatement(null, null);
         pool.put(new PreparedStatementHolder(k1, raw));
         

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -865,6 +865,9 @@ public void run() {
 
                     notEmpty.signal();
                     notEmptySignalCount++;
+                } catch (SQLException ex) {
+                    LOG.error("create connection holder error", ex);
+                    break;
                 } finally {
                     lock.unlock();
                 }

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleSelectParser.java
Patch:
@@ -70,7 +70,8 @@
 public class OracleSelectParser extends SQLSelectParser {
 
     public OracleSelectParser(String sql){
-        super(sql);
+        this(new OracleLexer(sql));
+        this.lexer.nextToken();
     }
 
     public OracleSelectParser(Lexer lexer){

File: src/test/java/com/alibaba/druid/bvt/pool/basic/PreparedStatementKeyTest.java
Patch:
@@ -99,10 +99,12 @@ public void test_equals_6() throws Exception {
     public void test_contains() throws Exception {
         DruidDataSource dataSource = new DruidDataSource();
         PreparedStatementKey k1 = new PreparedStatementKey("x1", "c1", MethodType.M1);
+        
         PreparedStatementPool pool = new PreparedStatementPool(new ConnectionHolder(dataSource, null));
         MockPreparedStatement raw = new MockPreparedStatement(null, null);
         pool.put(new PreparedStatementHolder(k1, raw));
+        
+        Assert.assertTrue(pool.get(k1) != null);
         Assert.assertTrue(pool.get(k1) != null);
-        Assert.assertTrue(pool.get(k1) == null);
     }
 }

File: src/main/java/com/alibaba/druid/sql/ast/SQLExpr.java
Patch:
@@ -16,4 +16,5 @@
 package com.alibaba.druid.sql.ast;
 
 public interface SQLExpr extends SQLObject {
+
 }

File: src/main/java/com/alibaba/druid/sql/ast/SQLExprImpl.java
Patch:
@@ -22,5 +22,8 @@ public abstract class SQLExprImpl extends SQLObjectImpl implements SQLExpr {
     public SQLExprImpl(){
 
     }
+    
+    public abstract boolean equals(Object o);
 
+    public abstract int hashCode();
 }

File: src/main/java/com/alibaba/druid/pool/PreparedStatementPool.java
Patch:
@@ -43,7 +43,7 @@ public static enum MethodType {
     }
 
     public PreparedStatementHolder get(PreparedStatementKey key) {
-        PreparedStatementHolder holder = map.remove(key);
+        PreparedStatementHolder holder = map.get(key);
 
         if (holder != null) {
             holder.incrementReusedCount();
@@ -73,7 +73,7 @@ public class LRUCache extends LinkedHashMap<PreparedStatementKey, PreparedStatem
         private static final long serialVersionUID = 1L;
 
         public LRUCache(int maxSize){
-            super(maxSize);
+            super(maxSize, 0.75f, true);
         }
 
         protected boolean removeEldestEntry(Entry<PreparedStatementKey, PreparedStatementHolder> eldest) {

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -146,6 +146,9 @@ public void resetStat() {
         rollbackCount.set(0);
         startTransactionCount.set(0);
         reusePreparedStatement.set(0);
+        closedPreparedStatementCount.set(0);
+        preparedStatementCount.set(0);
+        transactionHistogram.reset();
     }
 
     public boolean isEnable() {

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleExprParser.java
Patch:
@@ -332,7 +332,7 @@ public OracleOrderBy parseOrderBy() {
 
             lexer.nextToken();
 
-            if (identifierEquals("SIBINGS")) {
+            if (identifierEquals("SIBLINGS")) {
                 lexer.nextToken();
                 orderBy.setSibings(true);
             }

File: src/test/java/com/alibaba/druid/bvt/sql/oracle/OracleLiteralTest.java
Patch:
@@ -5,10 +5,9 @@
 
 import com.alibaba.druid.sql.ast.statement.SQLSelectStatement;
 import com.alibaba.druid.sql.dialect.oracle.parser.OracleStatementParser;
-import com.alibaba.druid.sql.parser.SQLStatementParser;
 import com.alibaba.druid.sql.test.TestUtils;
 
-public class OracleIsLiteralTest extends TestCase {
+public class OracleLiteralTest extends TestCase {
 
     public void test_oracle() throws Exception {
         String sql = "SELECT FROM_TZ(TIMESTAMP '2007-11-20 08:00:00', '3:00') FROM DUAL;";

File: src/main/java/com/alibaba/druid/sql/dialect/oracle/parser/OracleLexer.java
Patch:
@@ -99,6 +99,7 @@ public class OracleLexer extends Lexer {
         map.put("DAY", Token.DAY);
         map.put("YEAR", Token.YEAR);
         map.put("MONTH", Token.MONTH);
+        map.put("MINUTE", Token.MINUTE);
         map.put("SECOND", Token.SECOND);
         map.put("TO", Token.TO);
         map.put("MODEL", Token.MODEL);

File: src/main/java/com/alibaba/druid/sql/parser/Token.java
Patch:
@@ -110,6 +110,7 @@ public enum Token {
     DAY("DAY"),
     YEAR("YEAR"),
     MONTH("MONTH"),
+    MINUTE("MINUTE"),
     SECOND("SECOND"),
     TO("TO"),
     MODEL("MODEL"),

File: src/main/java/com/alibaba/druid/mock/MockResultSet.java
Patch:
@@ -368,8 +368,7 @@ public Reader getCharacterStream(String columnLabel) throws SQLException {
 
     @Override
     public BigDecimal getBigDecimal(int columnIndex) throws SQLException {
-
-        return null;
+        return (BigDecimal) getObject(columnIndex);
     }
 
     @Override

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent.java
Patch:
@@ -60,7 +60,7 @@ public void test_idle2() throws Exception {
 
         {
             // 并发创建14个
-            concurrent(driver, dataSource, 100);
+            concurrent(driver, dataSource, 30);
         }
 
         // 连续打开关闭单个连接

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxyImpl.java
Patch:
@@ -364,7 +364,7 @@ public CompositeDataSupport getCompositeData() throws JMException {
             map.put("ResultSetFetchRowCount", null);
             map.put("ResultSetLastOpenTime", null);
 
-            map.put("ResultSetLastErrorCount", null);
+            map.put("ResultSetErrorCount", null);
             map.put("ResultSetOpenningMillisTotal", null);
             map.put("ResultSetLastErrorTime", null);
             map.put("ResultSetLastErrorMessage", null);

File: src/test/java/com/alibaba/druid/bvt/pool/ManagedDataSourceTest.java
Patch:
@@ -16,6 +16,8 @@ public class ManagedDataSourceTest extends TestCase {
     private DruidDataSource dataSource;
 
     public void setUp() throws Exception {
+        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        
         dataSource = new DruidDataSource();
         dataSource.setUrl("jdbc:mock:xxx");
     }

File: src/test/java/com/alibaba/druid/bvt/pool/TestAbondon.java
Patch:
@@ -13,6 +13,8 @@ public class TestAbondon extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        
         dataSource = new DruidDataSource();
         dataSource.setRemoveAbandoned(true);
         dataSource.setRemoveAbandonedTimeoutMillis(10);

File: src/test/java/com/alibaba/druid/bvt/pool/TestDisable.java
Patch:
@@ -17,6 +17,8 @@ public class TestDisable extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        
         driver = new MockDriver();
 
         dataSource = new DruidDataSource();

File: src/test/java/com/alibaba/druid/bvt/pool/TestGraceShutdown.java
Patch:
@@ -17,6 +17,8 @@ public class TestGraceShutdown extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        
         driver = new MockDriver();
 
         dataSource = new DruidDataSource();

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_Starvation.java
Patch:
@@ -20,6 +20,8 @@ public class TestIdle3_Concurrent_Starvation extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        
         driver = new MockDriver();
 
         dataSource = new DruidDataSource();

File: src/test/java/com/alibaba/druid/bvt/pool/TestPoolPreparedStatement.java
Patch:
@@ -17,6 +17,8 @@ public class TestPoolPreparedStatement extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        
         driver = new MockDriver();
 
         dataSource = new DruidDataSource();

File: src/test/java/com/alibaba/druid/bvt/pool/TestClose_2.java
Patch:
@@ -11,6 +11,9 @@
 import com.alibaba.druid.stat.DruidDataSourceStatManager;
 
 public class TestClose_2 extends TestCase {
+    protected void setUp() throws Exception {
+        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+    }
     protected void tearDown() throws Exception {
         Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
     }

File: src/test/java/com/alibaba/druid/bvt/pool/TestConcurrent.java
Patch:
@@ -18,6 +18,8 @@ public class TestConcurrent extends TestCase {
     private DruidDataSource dataSource;
 
     protected void setUp() throws Exception {
+        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
+        
         driver = new MockDriver();
         driver.setLogExecuteQueryEnable(false);
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestConcurrent.java
Patch:
@@ -10,6 +10,7 @@
 
 import com.alibaba.druid.mock.MockDriver;
 import com.alibaba.druid.pool.DruidDataSource;
+import com.alibaba.druid.stat.DruidDataSourceStatManager;
 
 public class TestConcurrent extends TestCase {
 
@@ -41,6 +42,7 @@ protected void setUp() throws Exception {
 
     protected void tearDown() throws Exception {
         dataSource.close();
+        Assert.assertEquals(0, DruidDataSourceStatManager.getInstance().getDataSourceList().size());
     }
 
     public void test_0() throws Exception {
@@ -79,7 +81,7 @@ public void test_0() throws Exception {
         }
 
         // 使用单个线程模拟并发打开10个连接
-        for (int i = 0; i < 1000 * 10; ++i) {
+        for (int i = 0; i < 1000 * 1; ++i) {
             final int COUNT = 10;
             Connection[] connections = new Connection[COUNT];
 

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3_Concurrent_MaxActive.java
Patch:
@@ -1,12 +1,9 @@
 package com.alibaba.druid.bvt.pool;
 
-import java.lang.management.ManagementFactory;
 import java.sql.Connection;
 import java.util.Random;
 import java.util.concurrent.CountDownLatch;
 
-import javax.management.ObjectName;
-
 import junit.framework.Assert;
 import junit.framework.TestCase;
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -838,7 +838,7 @@ public int removeAbandoned() {
         for (; iter.hasNext();) {
             Map.Entry<PoolableConnection, ActiveConnectionTraceInfo> entry = iter.next();
             ActiveConnectionTraceInfo activeInfo = entry.getValue();
-            long timeMillis = activeInfo.getConnectTime() - currentMillis;
+            long timeMillis = currentMillis - activeInfo.getConnectTime();
 
             if (timeMillis >= removeAbandonedTimeoutMillis) {
                 PoolableConnection pooledConnection = entry.getKey();

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -821,6 +821,7 @@ public void run() {
                         Iterator<Map.Entry<PoolableConnection, ActiveConnectionTraceInfo>> iter = activeConnections.entrySet().iterator();
 
                         long currentMillis = System.currentTimeMillis();
+                        
                         for (; iter.hasNext();) {
                             Map.Entry<PoolableConnection, ActiveConnectionTraceInfo> entry = iter.next();
                             ActiveConnectionTraceInfo activeInfo = entry.getValue();

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -845,7 +845,7 @@ public void run() {
                                         buf.append("\n");
                                     }
 
-                                    LOG.warn(buf.toString());
+                                    LOG.error(buf.toString());
                                 }
                             }
                         }

File: src/main/java/com/alibaba/druid/pool/PoolableResultSet.java
Patch:
@@ -71,8 +71,8 @@ public boolean next() throws SQLException {
     @Override
     public void close() throws SQLException {
         try {
-            rs.close();
             this.closed = true;
+            rs.close();
         } catch (Throwable t) {
             throw checkException(t);
         }

File: src/test/java/com/alibaba/druid/bvt/pool/TestIdle3.java
Patch:
@@ -46,8 +46,8 @@ public void test_idle2() throws Exception {
 
             conn.close();
             Assert.assertEquals(0, dataSource.getDestroyCount());
-            Assert.assertEquals(2, driver.getConnections().size());
-            Assert.assertEquals(2, dataSource.getCreateCount());
+            Assert.assertEquals(1, driver.getConnections().size());
+            Assert.assertEquals(1, dataSource.getCreateCount());
             Assert.assertEquals(0, dataSource.getActiveCount());
         }
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -308,6 +308,7 @@ private PoolableConnection getConnectionInternal() throws SQLException {
         lock.lock();
         try {
             if (!enable) {
+                connectErrorCount++;
                 throw new DataSourceDisableException();
             }
             

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -307,11 +307,11 @@ private PoolableConnection getConnectionInternal() throws SQLException {
 
         lock.lock();
         try {
-            connectCount++;
-
             if (!enable) {
                 throw new DataSourceDisableException();
             }
+            
+            connectCount++;
 
             ConnectionHolder holder;
             for (;;) {

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -654,7 +654,8 @@ public void run() {
                     }
 
                     // 防止创建超过maxActive数量的连接
-                    if (activeCount + poolingCount >= maxIdle) {
+                    int max = maxActive > maxIdle ? maxActive : maxIdle;
+                    if (activeCount + poolingCount >= max) {
                         lowWater.await();
                         continue;
                     }

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -548,7 +548,7 @@ ConnectionHolder pollLast(long timeout, TimeUnit unit) throws InterruptedExcepti
         long nanos = unit.toNanos(timeout);
 
         for (;;) {
-            if (activeCount == maxActive) {
+            if (activeCount >= maxActive) {
                 long startNano = System.nanoTime();
                 notMaxActive.awaitNanos(nanos);
                 nanos -= (System.nanoTime() - startNano);

File: src/test/java/com/alibaba/druid/pool/benckmark/CaseKylin_mysql_idle_1.java
Patch:
@@ -13,7 +13,7 @@
 import com.alibaba.druid.TestUtil;
 import com.alibaba.druid.pool.DruidDataSource;
 
-public class CaseKylin_mysql_idle extends TestCase {
+public class CaseKylin_mysql_idle_1 extends TestCase {
 
     private String  jdbcUrl;
     private String  user;
@@ -27,7 +27,7 @@ public class CaseKylin_mysql_idle extends TestCase {
     private String  validationQuery               = null;    // "SELECT 1";
     private int     threadCount                   = 15;
     private int     TEST_COUNT                    = 3;
-    final int       LOOP_COUNT                    = 1000 * 1;
+    final int       LOOP_COUNT                    = 1000 * 10;
     private boolean testWhileIdle                 = true;
     private boolean testOnBorrow                  = false;
     private boolean testOnReturn                  = false;

File: src/test/java/com/alibaba/druid/pool/benckmark/CaseKylin_mysql_idle.java
Patch:
@@ -87,7 +87,7 @@ public void druid() throws Exception {
         p0(dataSource, "druid", threadCount);
 
         long startMillis = System.currentTimeMillis();
-        for (int i = 0; i < TEST_COUNT; ++i) {
+        for (int i = 0; i < 1000; ++i) {
             p0(dataSource, "druid", threadCount);
 
             long seconds = (System.currentTimeMillis() - startMillis) / 1000L;

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -700,7 +700,7 @@ public void run() {
                             numTestsPerEvictionRun = 1;
                         }
 
-                        for (int i = 0; i < numTestsPerEvictionRun; ++i) {
+                        for (int i = 0; i < numTestsPerEvictionRun && i < count; ++i) {
                             ConnectionHolder connection = connections[i];
 
                             if (evictCount == 0 && idleCount == 0 && connection == null) {

File: src/test/java/com/alibaba/druid/pool/Test_kyline.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.druid.pool;
 
 import java.sql.Connection;
+import java.sql.DriverManager;
 
 import junit.framework.TestCase;
 
@@ -18,7 +19,7 @@ public void test_0() throws Exception {
         ds.setPassword(password);
         ds.setDriverClassName(driver);
 
-        //DriverManager.getConnection(url, user, password);
+        DriverManager.getConnection(url, user, password);
 
         Connection conn = ds.getConnection();
         conn.close();

File: src/main/java/com/alibaba/druid/pool/ConnectionHolder.java
Patch:
@@ -17,7 +17,6 @@
 
 import java.sql.Connection;
 import java.sql.SQLException;
-import java.sql.Statement;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.CopyOnWriteArrayList;
@@ -113,7 +112,9 @@ public void reset() {
         connectionEventListeners.clear();
         statementEventListeners.clear();
 
-        for (Statement stmt : statementTrace) {
+        
+        for (Object item : statementTrace.toArray()) {
+            PoolableStatement stmt = (PoolableStatement) item;
             try {
                 if (!stmt.isClosed()) {
                     stmt.close();

File: src/test/java/com/alibaba/druid/bvt/pool/PasswordCallbackTest.java
Patch:
@@ -23,7 +23,7 @@ public void test_0() throws Exception {
         conn.close();
         
         Assert.assertEquals(dataSource.getUrl(), passwordCallback.getUrl());
-        Assert.assertEquals(dataSource.getConnectionProperties(), passwordCallback.getProperties());
+        Assert.assertEquals(dataSource.getConnectProperties(), passwordCallback.getProperties());
     }
 
     public static class TestPasswordCallback extends PasswordCallback {

File: src/test/java/com/alibaba/druid/pool/TestOracle.java
Patch:
@@ -23,7 +23,7 @@ public void test_0() throws Exception {
         dataSource.setUrl(jdbcUrl);
         dataSource.setUsername(user);
         dataSource.setPassword(password);
-        dataSource.setFilters("stat");
+        // dataSource.setFilters("stat");
         dataSource.setExceptionSoter(MySqlExceptionSorter.class.getName());
 
         Connection conn = dataSource.getConnection();

File: src/main/java/com/alibaba/druid/pool/DruidDataSourceMBean.java
Patch:
@@ -38,7 +38,7 @@ public interface DruidDataSourceMBean {
 
     long getConnectErrorCount();
 
-    int getPoolingSize();
+    int getPoolingCount();
 
     long getRecycleCount();
 

File: src/test/java/com/alibaba/druid/bvt/pool/Case2.java
Patch:
@@ -50,7 +50,7 @@ public void test_singleThread() throws Exception {
 
         Assert.assertEquals(0, dataSource.getCreateCount());
         Assert.assertEquals(0, dataSource.getDestroyCount());
-        Assert.assertEquals(0, dataSource.getPoolingSize());
+        Assert.assertEquals(0, dataSource.getPoolingCount());
 
         Connection[] connections = new Connection[COUNT];
         for (int i = 0; i < COUNT; ++i) {

File: src/test/java/com/alibaba/druid/bvt/pool/TestDruidDataSource.java
Patch:
@@ -38,7 +38,7 @@ public void test_0() throws Exception {
         Assert.assertEquals(0, dataSource.getConnectCount());
         Assert.assertEquals(0, dataSource.getConnectErrorCount());
         Assert.assertEquals(0, dataSource.getCloseCount());
-        Assert.assertEquals(0, dataSource.getPoolingSize());
+        Assert.assertEquals(0, dataSource.getPoolingCount());
 
         Connection conn = dataSource.getConnection();
 
@@ -49,7 +49,7 @@ public void test_0() throws Exception {
         Assert.assertEquals(0, dataSource.getCloseCount());
         Assert.assertEquals(0, dataSource.getRecycleCount());
         Assert.assertEquals(1, dataSource.getActiveCount());
-        Assert.assertEquals(9, dataSource.getPoolingSize());
+        Assert.assertEquals(9, dataSource.getPoolingCount());
 
         conn.close();
 
@@ -58,7 +58,7 @@ public void test_0() throws Exception {
         Assert.assertEquals(1, dataSource.getCloseCount());
         Assert.assertEquals(1, dataSource.getRecycleCount());
         Assert.assertEquals(0, dataSource.getActiveCount());
-        Assert.assertEquals(10, dataSource.getPoolingSize());
+        Assert.assertEquals(10, dataSource.getPoolingCount());
 
         conn.close(); // 重复close
 

File: src/test/java/com/alibaba/druid/pool/Case0.java
Patch:
@@ -63,7 +63,7 @@ public void test_singleThread() throws Exception {
 
         Assert.assertEquals(0, dataSource.getCreateCount());
         Assert.assertEquals(0, dataSource.getDestroyCount());
-        Assert.assertEquals(0, dataSource.getPoolingSize());
+        Assert.assertEquals(0, dataSource.getPoolingCount());
 
         for (int i = 0; i < LOOP_COUNT; ++i) {
             Connection conn = dataSource.getConnection();
@@ -74,7 +74,7 @@ public void test_singleThread() throws Exception {
             Assert.assertEquals(1, dataSource.getActiveCount());
             Assert.assertEquals(i, dataSource.getCloseCount());
             Assert.assertEquals(0, dataSource.getConnectErrorCount());
-            Assert.assertEquals(initialSize - 1, dataSource.getPoolingSize());
+            Assert.assertEquals(initialSize - 1, dataSource.getPoolingCount());
             Assert.assertEquals(i, dataSource.getRecycleCount());
 
             conn.close();
@@ -83,7 +83,7 @@ public void test_singleThread() throws Exception {
             Assert.assertEquals(0, dataSource.getActiveCount());
             Assert.assertEquals(i + 1, dataSource.getCloseCount());
             Assert.assertEquals(0, dataSource.getConnectErrorCount());
-            Assert.assertEquals(initialSize, dataSource.getPoolingSize());
+            Assert.assertEquals(initialSize, dataSource.getPoolingCount());
             Assert.assertEquals(i + 1, dataSource.getRecycleCount());
         }
 

File: src/main/java/com/alibaba/druid/pool/DruidDataSource.java
Patch:
@@ -110,6 +110,8 @@ private void init() throws SQLException {
             if (this.driverClass == null || this.driverClass.isEmpty()) {
                 this.driverClass = JdbcUtils.getDriverClassName(this.jdbcUrl);
             }
+            
+            this.dbType = JdbcUtils.getDbType(jdbcUrl, driverClass.getClass().getName());
 
             try {
                 driver = (Driver) Class.forName(this.driverClass).newInstance();

File: src/main/java/com/alibaba/druid/proxy/jdbc/DataSourceProxy.java
Patch:
@@ -26,6 +26,8 @@
 public interface DataSourceProxy {
 
     String getName();
+    
+    String getDbType();
 
     Driver getRawDriver();
 

File: src/main/java/com/alibaba/druid/sql/parser/SQLParser.java
Patch:
@@ -112,6 +112,8 @@ public void accept(Token token) {
     private int errorEndPos = -1;
 
     protected void setErrorEndPos(int errPos) {
-        if (errPos > errorEndPos) errorEndPos = errPos;
+        if (errPos > errorEndPos) {
+            errorEndPos = errPos;
+        }
     }
 }

