File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -52,7 +52,7 @@ public void test() throws Exception {
         File file = new File("/Users/zhuangjiaju/IdeaProjects/easyexcel/src/test/resources/converter/converter07.xlsx");
 
         List<Object> list = EasyExcel.read(
-                "/Users/zhuangjiaju/Downloads/证券投资基金估值表_外贸信托-稳盈淳享37号集合资金信托计划_2024-07-23.xls")
+                "/Users/zhuangjiaju/Downloads/证券投资基金估值表_外贸信托-稳盈淳享37号集合资金信托计划_2024-07-23(1).xls")
             //.useDefaultListener(false)
             .sheet(0)
             .headRowNumber(0).doReadSync();

File: easyexcel-core/src/main/java/com/alibaba/excel/constant/BuiltinFormats.java
Patch:
@@ -21,6 +21,8 @@
  **/
 public class BuiltinFormats {
 
+    private static final String RESERVED = "reserved-";
+
     public static short GENERAL = 0;
 
     public static final String[] BUILTIN_FORMATS_ALL_LANGUAGES = {
@@ -491,7 +493,7 @@ public static String getBuiltinFormat(Short index, String defaultFormat, Locale
         }
 
         // In other cases, give priority to using the externally provided format
-        if (!StringUtils.isEmpty(defaultFormat) && !defaultFormat.startsWith("reserved-")) {
+        if (!StringUtils.isEmpty(defaultFormat) && !defaultFormat.startsWith(RESERVED)) {
             return defaultFormat;
         }
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -52,8 +52,7 @@ public void test() throws Exception {
         File file = new File("/Users/zhuangjiaju/IdeaProjects/easyexcel/src/test/resources/converter/converter07.xlsx");
 
         List<Object> list = EasyExcel.read(
-                "/Users/zhuangjiaju/IdeaProjects/easyexcel/easyexcel-test/target/test-classes"
-                    + "/simpleWrite1674051907397.xlsx")
+                "/Users/zhuangjiaju/Downloads/证券投资基金估值表_外贸信托-稳盈淳享37号集合资金信托计划_2024-07-23.xls")
             //.useDefaultListener(false)
             .sheet(0)
             .headRowNumber(0).doReadSync();

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/v03/handlers/BofRecordHandler.java
Patch:
@@ -49,6 +49,7 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
         } else {
             xlsReadContext.xlsReadWorkbookHolder().setIgnoreRecord(Boolean.TRUE);
         }
+        xlsReadContext.xlsReadWorkbookHolder().setCurrentSheetStopped(Boolean.FALSE);
         // Go read the next one
         xlsReadWorkbookHolder.setReadSheetIndex(xlsReadWorkbookHolder.getReadSheetIndex() + 1);
     }

File: easyexcel-core/src/main/java/com/alibaba/excel/exception/ExcelAnalysisStopException.java
Patch:
@@ -2,8 +2,11 @@
 
 /**
  * Throw the exception when you need to stop
+ * This exception will stop the entire excel parsing. If you only want to stop the parsing of a certain sheet, please
+ * use ExcelAnalysisStopSheetException.
  *
  * @author Jiaju Zhuang
+ * @see ExcelAnalysisStopException
  */
 public class ExcelAnalysisStopException extends ExcelAnalysisException {
 

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/v03/handlers/BofRecordHandler.java
Patch:
@@ -49,6 +49,7 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
         } else {
             xlsReadContext.xlsReadWorkbookHolder().setIgnoreRecord(Boolean.TRUE);
         }
+        xlsReadContext.xlsReadWorkbookHolder().setCurrentSheetStopped(Boolean.FALSE);
         // Go read the next one
         xlsReadWorkbookHolder.setReadSheetIndex(xlsReadWorkbookHolder.getReadSheetIndex() + 1);
     }

File: easyexcel-core/src/main/java/com/alibaba/excel/exception/ExcelAnalysisStopException.java
Patch:
@@ -2,8 +2,11 @@
 
 /**
  * Throw the exception when you need to stop
+ * This exception will stop the entire excel parsing. If you only want to stop the parsing of a certain sheet, please
+ * use ExcelAnalysisStopSheetException.
  *
  * @author Jiaju Zhuang
+ * @see ExcelAnalysisStopException
  */
 public class ExcelAnalysisStopException extends ExcelAnalysisException {
 

File: easyexcel-core/src/main/java/com/alibaba/excel/write/builder/AbstractExcelWriterParameterBuilder.java
Patch:
@@ -106,8 +106,9 @@ public T includeColumnIndexes(Collection<Integer> includeColumnIndexes) {
     /**
      * Only output the custom columns.
      *
-     * @deprecated use {@link  #includeColumnFieldNames(Collection)}
+     * @deprecated use {@link  #includeColumnFieldNames(Collection)} spelling mistake
      */
+    @Deprecated
     public T includeColumnFiledNames(Collection<String> includeColumnFieldNames) {
         parameter().setIncludeColumnFieldNames(includeColumnFieldNames);
         return self();

File: easyexcel-core/src/main/java/com/alibaba/excel/util/ClassUtils.java
Patch:
@@ -39,8 +39,8 @@
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
+import org.apache.commons.collections4.CollectionUtils;
 import org.springframework.cglib.beans.BeanMap;
-import org.springframework.util.CollectionUtils;
 
 /**
  * Licensed to the Apache Software Foundation (ASF) under one or more

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/util/TestFileUtil.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.springframework.util.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 
 public class TestFileUtil {
 

File: easyexcel-core/src/main/java/com/alibaba/excel/metadata/AbstractParameterBuilder.java
Patch:
@@ -78,6 +78,8 @@ public T locale(Locale locale) {
      * The cache used when parsing fields such as head.
      *
      * default is THREAD_LOCAL.
+     *
+     * @since 3.3.0
      */
     public T filedCacheLocation(CacheLocationEnum filedCacheLocation) {
         parameter().setFiledCacheLocation(filedCacheLocation);

File: easyexcel-core/src/main/java/com/alibaba/excel/write/builder/AbstractExcelWriterParameterBuilder.java
Patch:
@@ -125,6 +125,8 @@ public T includeColumnFieldNames(Collection<String> includeColumnFieldNames) {
      * Data will be order by  {@link #includeColumnFieldNames} or  {@link #includeColumnIndexes}.
      *
      * default is false.
+     *
+     * @since 3.3.0
      **/
     public T orderByIncludeColumn(Boolean orderByIncludeColumn) {
         parameter().setOrderByIncludeColumn(orderByIncludeColumn);

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/ExcelAnalyserImpl.java
Patch:
@@ -19,6 +19,7 @@
 import com.alibaba.excel.read.metadata.holder.xls.XlsReadWorkbookHolder;
 import com.alibaba.excel.read.metadata.holder.xlsx.XlsxReadWorkbookHolder;
 import com.alibaba.excel.support.ExcelTypeEnum;
+import com.alibaba.excel.util.ClassUtils;
 import com.alibaba.excel.util.DateUtils;
 import com.alibaba.excel.util.FileUtils;
 import com.alibaba.excel.util.NumberDataFormatterUtils;
@@ -212,6 +213,7 @@ public void finish() {
     private void removeThreadLocalCache() {
         NumberDataFormatterUtils.removeThreadLocalCache();
         DateUtils.removeThreadLocalCache();
+        ClassUtils.removeThreadLocalCache();
     }
 
     private void clearEncrypt03() {

File: easyexcel-core/src/main/java/com/alibaba/excel/context/WriteContextImpl.java
Patch:
@@ -265,7 +265,7 @@ private void addOneRowOfHeadDataToExcel(Row row, Integer rowIndex, Map<Integer,
             Head head = entry.getValue();
             int columnIndex = entry.getKey();
             ExcelContentProperty excelContentProperty = ClassUtils.declaredExcelContentProperty(null,
-                currentWriteHolder.excelWriteHeadProperty().getHeadClazz(), head.getFieldName());
+                currentWriteHolder.excelWriteHeadProperty().getHeadClazz(), head.getFieldName(), currentWriteHolder);
 
             CellWriteHandlerContext cellWriteHandlerContext = WriteHandlerUtils.createCellWriteHandlerContext(this, row,
                 rowIndex, head, columnIndex, relativeRowIndex, Boolean.TRUE, excelContentProperty);
@@ -427,6 +427,7 @@ public void finish(boolean onException) {
     private void removeThreadLocalCache() {
         NumberDataFormatterUtils.removeThreadLocalCache();
         DateUtils.removeThreadLocalCache();
+        ClassUtils.removeThreadLocalCache();
     }
 
     @Override

File: easyexcel-core/src/main/java/com/alibaba/excel/converters/DefaultConverterLoader.java
Patch:
@@ -115,8 +115,6 @@ private static void initAllConverter() {
         putAllConverter(new StringNumberConverter());
         putAllConverter(new StringStringConverter());
         putAllConverter(new StringErrorConverter());
-
-        putAllConverter(new BigIntegerStringConverter());
     }
 
     private static void initDefaultWriteConverter() {
@@ -154,7 +152,6 @@ private static void initDefaultWriteConverter() {
         putWriteStringConverter(new LongStringConverter());
         putWriteStringConverter(new ShortStringConverter());
         putWriteStringConverter(new StringStringConverter());
-        putWriteStringConverter(new BigIntegerStringConverter());
     }
 
     /**

File: easyexcel-core/src/main/java/com/alibaba/excel/read/listener/ModelBuildEventListener.java
Patch:
@@ -149,7 +149,8 @@ private Object buildUserModel(Map<Integer, ReadCellData<?>> cellDataMap, ReadShe
             ReadCellData<?> cellData = cellDataMap.get(index);
             Object value = ConverterUtils.convertToJavaObject(cellData, head.getField(),
                 ClassUtils.declaredExcelContentProperty(dataMap, readSheetHolder.excelReadHeadProperty().getHeadClazz(),
-                    fieldName), readSheetHolder.converterMap(), context, context.readRowHolder().getRowIndex(), index);
+                    fieldName, readSheetHolder), readSheetHolder.converterMap(), context,
+                context.readRowHolder().getRowIndex(), index);
             if (value != null) {
                 dataMap.put(fieldName, value);
             }

File: easyexcel-core/src/main/java/com/alibaba/excel/read/listener/PageReadListener.java
Patch:
@@ -15,7 +15,7 @@
  */
 public class PageReadListener<T> implements ReadListener<T> {
     /**
-     * Defuault single handle the amount of data
+     * Default single handle the amount of data
      */
     public static int BATCH_COUNT = 100;
     /**

File: easyexcel-core/src/main/java/com/alibaba/excel/read/listener/ReadListener.java
Patch:
@@ -36,7 +36,7 @@ default void invokeHead(Map<Integer, ReadCellData<?>> headMap, AnalysisContext c
     /**
      * When analysis one row trigger invoke function.
      *
-     * @param data    one row value. Is is same as {@link AnalysisContext#readRowHolder()}
+     * @param data    one row value. It is same as {@link AnalysisContext#readRowHolder()}
      * @param context analysis context
      */
     void invoke(T data, AnalysisContext context);

File: easyexcel-core/src/main/java/com/alibaba/excel/read/metadata/holder/csv/CsvReadWorkbookHolder.java
Patch:
@@ -10,6 +10,9 @@
 import org.apache.commons.csv.CSVFormat;
 import org.apache.commons.csv.CSVParser;
 
+import java.io.IOException;
+import java.nio.file.Files;
+
 /**
  * Workbook holder
  *

File: easyexcel-core/src/main/java/com/alibaba/excel/read/metadata/property/ExcelReadHeadProperty.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+import com.alibaba.excel.metadata.ConfigurationHolder;
 import com.alibaba.excel.metadata.Holder;
 import com.alibaba.excel.metadata.property.ExcelHeadProperty;
 
@@ -12,7 +13,7 @@
  */
 public class ExcelReadHeadProperty extends ExcelHeadProperty {
 
-    public ExcelReadHeadProperty(Holder holder, Class headClazz, List<List<String>> head) {
-        super(holder, headClazz, head);
+    public ExcelReadHeadProperty(ConfigurationHolder configurationHolder, Class headClazz, List<List<String>> head) {
+        super(configurationHolder, headClazz, head);
     }
 }

File: easyexcel-core/src/main/java/com/alibaba/excel/util/WorkBookUtil.java
Patch:
@@ -70,7 +70,9 @@ public static void createWorkBook(WriteWorkbookHolder writeWorkbookHolder) throw
                     new OutputStreamWriter(writeWorkbookHolder.getOutputStream(), writeWorkbookHolder.getCharset())),
                     writeWorkbookHolder.getGlobalConfiguration().getLocale(),
                     writeWorkbookHolder.getGlobalConfiguration().getUse1904windowing(),
-                    writeWorkbookHolder.getGlobalConfiguration().getUseScientificFormat());
+                    writeWorkbookHolder.getGlobalConfiguration().getUseScientificFormat(),
+                    writeWorkbookHolder.getCharset(),
+                    writeWorkbookHolder.getWithBom());
                 writeWorkbookHolder.setCachedWorkbook(csvWorkbook);
                 writeWorkbookHolder.setWorkbook(csvWorkbook);
                 return;

File: easyexcel-core/src/main/java/com/alibaba/excel/write/property/ExcelWriteHeadProperty.java
Patch:
@@ -16,6 +16,7 @@
 import com.alibaba.excel.annotation.write.style.OnceAbsoluteMerge;
 import com.alibaba.excel.enums.HeadKindEnum;
 import com.alibaba.excel.metadata.CellRange;
+import com.alibaba.excel.metadata.ConfigurationHolder;
 import com.alibaba.excel.metadata.Head;
 import com.alibaba.excel.metadata.Holder;
 import com.alibaba.excel.metadata.property.ColumnWidthProperty;
@@ -44,8 +45,8 @@ public class ExcelWriteHeadProperty extends ExcelHeadProperty {
     private RowHeightProperty contentRowHeightProperty;
     private OnceAbsoluteMergeProperty onceAbsoluteMergeProperty;
 
-    public ExcelWriteHeadProperty(Holder holder, Class<?> headClazz, List<List<String>> head) {
-        super(holder, headClazz, head);
+    public ExcelWriteHeadProperty(ConfigurationHolder configurationHolder, Class<?> headClazz, List<List<String>> head) {
+        super(configurationHolder, headClazz, head);
         if (getHeadKind() != HeadKindEnum.CLASS) {
             return;
         }

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/large/LargeDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.support.ExcelTypeEnum;
 import com.alibaba.fastjson2.JSON;
 
-import org.junit.Assert;
+import org.junit.jupiter.api.Assertions;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -31,9 +31,9 @@ public void invoke(LargeData data, AnalysisContext context) {
     public void doAfterAllAnalysed(AnalysisContext context) {
         LOGGER.info("Large row count:{}", count);
         if (context.readWorkbookHolder().getExcelType() != ExcelTypeEnum.CSV) {
-            Assert.assertEquals(count, 464509);
+            Assertions.assertEquals(count, 464509);
         } else {
-            Assert.assertEquals(count, 499999);
+            Assertions.assertEquals(count, 499999);
         }
     }
 }

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/DemoDataListener.java
Patch:
@@ -48,7 +48,7 @@ public DemoDataListener(DemoDAO demoDAO) {
     /**
      * 这个每一条数据解析都会来调用
      *
-     * @param data    one row value. Is is same as {@link AnalysisContext#readRowHolder()}
+     * @param data    one row value. It is same as {@link AnalysisContext#readRowHolder()}
      * @param context
      */
     @Override

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/ReadTest.java
Patch:
@@ -20,15 +20,14 @@
 import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * 读的常见写法
  *
  * @author Jiaju Zhuang
  */
-@Ignore
+
 @Slf4j
 public class ReadTest {
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/web/UploadDataListener.java
Patch:
@@ -44,7 +44,7 @@ public UploadDataListener(UploadDAO uploadDAO) {
     /**
      * 这个每一条数据解析都会来调用
      *
-     * @param data    one row value. Is is same as {@link AnalysisContext#readRowHolder()}
+     * @param data    one row value. It is same as {@link AnalysisContext#readRowHolder()}
      * @param context
      */
     @Override

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/write/ImageDataWithAnnotation.java
Patch:
@@ -15,7 +15,6 @@
 
 /**
  * 图片导出类
- *
  */
 @Getter
 @Setter

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/write/WriteTest.java
Patch:
@@ -46,15 +46,14 @@
 import org.apache.poi.ss.usermodel.IndexedColors;
 import org.apache.poi.ss.usermodel.Workbook;
 import org.apache.poi.xssf.streaming.SXSSFSheet;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 /**
  * 写的常见写法
  *
  * @author Jiaju Zhuang
  */
-@Ignore
+
 public class WriteTest {
 
     /**

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/DemoData3.java
Patch:
@@ -1,9 +1,7 @@
 package com.alibaba.easyexcel.test.temp;
 
 import java.time.LocalDateTime;
-import java.util.Date;
 
-import com.alibaba.excel.annotation.ExcelIgnore;
 import com.alibaba.excel.annotation.ExcelProperty;
 
 import lombok.EqualsAndHashCode;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/LockDataListener.java
Patch:
@@ -3,14 +3,14 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.alibaba.easyexcel.test.demo.read.DemoDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.fastjson2.JSON;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 /**
  * 模板的读取类
  *

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/StyleData.java
Patch:
@@ -7,7 +7,6 @@
 import lombok.Setter;
 
 /**
- *
  * @author Jiaju Zhuang
  **/
 @Getter

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/WriteLargeTest.java
Patch:
@@ -14,8 +14,7 @@
 
 import org.apache.poi.ss.usermodel.FillPatternType;
 import org.apache.poi.ss.usermodel.IndexedColors;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -24,7 +23,7 @@
  *
  * @author Jiaju Zhuang
  **/
-@Ignore
+
 public class WriteLargeTest {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(WriteLargeTest.class);

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/WriteV33Test.java
Patch:
@@ -16,8 +16,7 @@
 import org.apache.poi.ss.usermodel.FillPatternType;
 import org.apache.poi.ss.usermodel.IndexedColors;
 import org.apache.poi.ss.usermodel.Workbook;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -26,7 +25,7 @@
  *
  * @author Jiaju Zhuang
  **/
-@Ignore
+
 public class WriteV33Test {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(WriteV33Test.class);

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/Xls03Test.java
Patch:
@@ -6,8 +6,7 @@
 import com.alibaba.excel.util.BeanMapUtils;
 import com.alibaba.fastjson2.JSON;
 
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.cglib.beans.BeanMap;
@@ -18,7 +17,7 @@
  *
  * @author Jiaju Zhuang
  **/
-@Ignore
+
 public class Xls03Test {
     private static final Logger LOGGER = LoggerFactory.getLogger(Xls03Test.class);
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/bug/HeadType.java
Patch:
@@ -16,14 +16,12 @@
 @EqualsAndHashCode
 public class HeadType {
 
-
     /**
      * 任务id
      */
     @ExcelProperty("任务ID")
     private Integer id;
 
-
     @ExcelProperty(value = "备注1")
     private String firstRemark;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/csv/CsvReadTest.java
Patch:
@@ -18,10 +18,8 @@
 import org.apache.commons.csv.CSVPrinter;
 import org.apache.commons.csv.CSVRecord;
 import org.apache.poi.poifs.filesystem.FileMagic;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-@Ignore
 @Slf4j
 public class CsvReadTest {
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/data/HeadType.java
Patch:
@@ -11,14 +11,12 @@
 @EqualsAndHashCode
 public class HeadType {
 
-
     /**
      * 任务id
      */
     @ExcelProperty("任务ID")
     private Integer id;
 
-
     @ExcelProperty(value = "备注1")
     private String firstRemark;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/dataformat/DataFormatTest.java
Patch:
@@ -22,8 +22,7 @@
 import org.apache.poi.ss.usermodel.Row;
 import org.apache.poi.ss.usermodel.Sheet;
 import org.apache.poi.xssf.usermodel.XSSFWorkbook;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -32,7 +31,7 @@
  *
  * @author Jiaju Zhuang
  **/
-@Ignore
+
 public class DataFormatTest {
     private static final Logger LOGGER = LoggerFactory.getLogger(Lock2Test.class);
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/large/LargeDataListener.java
Patch:
@@ -1,12 +1,12 @@
 package com.alibaba.easyexcel.test.temp.large;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.fastjson2.JSON;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 /**
  * @author Jiaju Zhuang
  */

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/large/NoModelLargeDataListener.java
Patch:
@@ -2,13 +2,13 @@
 
 import java.util.Map;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.fastjson2.JSON;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 /**
  * @author Jiaju Zhuang
  */

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/poi/Poi2Test.java
Patch:
@@ -8,8 +8,7 @@
 import org.apache.poi.xssf.usermodel.XSSFRow;
 import org.apache.poi.xssf.usermodel.XSSFSheet;
 import org.apache.poi.xssf.usermodel.XSSFWorkbook;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -18,7 +17,7 @@
  *
  * @author Jiaju Zhuang
  **/
-@Ignore
+
 public class Poi2Test {
     private static final Logger LOGGER = LoggerFactory.getLogger(Poi2Test.class);
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/poi/PoiFormatTest.java
Patch:
@@ -11,8 +11,7 @@
 import org.apache.poi.xssf.usermodel.XSSFRow;
 import org.apache.poi.xssf.usermodel.XSSFSheet;
 import org.apache.poi.xssf.usermodel.XSSFWorkbook;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -21,7 +20,7 @@
  *
  * @author Jiaju Zhuang
  **/
-@Ignore
+
 public class PoiFormatTest {
     private static final Logger LOGGER = LoggerFactory.getLogger(PoiFormatTest.class);
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/HDListener.java
Patch:
@@ -2,13 +2,13 @@
 
 import java.util.Map;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.fastjson2.JSON;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 /**
  * 模板的读取类
  *

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/HeadListener.java
Patch:
@@ -2,13 +2,13 @@
 
 import java.util.Map;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.fastjson2.JSON;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 /**
  * 模板的读取类
  *

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/HeadReadData.java
Patch:
@@ -15,7 +15,7 @@
 @Setter
 @EqualsAndHashCode
 public class HeadReadData {
-    @ExcelProperty({"主标题","数据1"})
+    @ExcelProperty({"主标题", "数据1"})
     private String h1;
     @ExcelProperty({"主标题", "数据2"})
     private String h2;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/simple/RepeatListener.java
Patch:
@@ -3,15 +3,15 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.alibaba.easyexcel.test.demo.read.DemoDataListener;
 import com.alibaba.easyexcel.test.temp.LockData;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.fastjson2.JSON;
 
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 /**
  * 模板的读取类
  *

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/simple/WriteData.java
Patch:
@@ -15,8 +15,8 @@
 @Setter
 @EqualsAndHashCode
 public class WriteData {
-//    @ContentStyle(locked = true)
+    //    @ContentStyle(locked = true)
     private Date dd;
-//    @ContentStyle(locked = false)
+    //    @ContentStyle(locked = false)
     private float f1;
 }

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/util/TestUtil.java
Patch:
@@ -1,7 +1,5 @@
 package com.alibaba.easyexcel.test.util;
 
-import java.io.File;
-import java.io.InputStream;
 import java.text.ParseException;
 import java.time.LocalDate;
 import java.time.LocalDateTime;
@@ -10,7 +8,6 @@
 import com.alibaba.excel.util.DateUtils;
 
 import lombok.extern.slf4j.Slf4j;
-import org.junit.Assert;
 
 /**
  * test util

File: easyexcel-core/src/main/java/com/alibaba/excel/metadata/GlobalConfiguration.java
Patch:
@@ -54,6 +54,6 @@ public GlobalConfiguration() {
         this.use1904windowing = Boolean.FALSE;
         this.locale = Locale.getDefault();
         this.useScientificFormat = Boolean.FALSE;
-        this.filedCacheLocation = CacheLocationEnum.MEMORY;
+        this.filedCacheLocation = CacheLocationEnum.THREAD_LOCAL;
     }
 }

File: easyexcel-core/src/main/java/com/alibaba/excel/write/builder/AbstractExcelWriterParameterBuilder.java
Patch:
@@ -122,12 +122,12 @@ public T includeColumnFieldNames(Collection<String> includeColumnFieldNames) {
     }
 
     /**
-     * Data will be sorted according to  {@link #includeColumnFieldNames} or  {@link #includeColumnIndexes}.
+     * Data will be order by  {@link #includeColumnFieldNames} or  {@link #includeColumnIndexes}.
      *
      * default is false.
      **/
-    public T sortByIncludeColumn(Boolean sortByIncludeColumn) {
-        parameter().setSortByIncludeColumn(sortByIncludeColumn);
+    public T orderByIncludeColumn(Boolean orderByIncludeColumn) {
+        parameter().setOrderByIncludeColumn(orderByIncludeColumn);
         return self();
     }
 }

File: easyexcel-core/src/main/java/com/alibaba/excel/write/metadata/WriteBasicParameter.java
Patch:
@@ -58,9 +58,9 @@ public class WriteBasicParameter extends BasicParameter {
     private Collection<String> includeColumnFieldNames;
 
     /**
-     * Data will be sorted according to  {@link #includeColumnFieldNames} or  {@link #includeColumnIndexes}.
+     * Data will be order by  {@link #includeColumnFieldNames} or  {@link #includeColumnIndexes}.
      *
      * default is false.
      */
-    private Boolean sortByIncludeColumn;
+    private Boolean orderByIncludeColumn;
 }

File: easyexcel-core/src/main/java/com/alibaba/excel/write/metadata/holder/WriteHolder.java
Patch:
@@ -49,11 +49,11 @@ public interface WriteHolder extends ConfigurationHolder {
     int relativeHeadRowIndex();
 
     /**
-     * Data will be sorted according to  {@link #includeColumnFieldNames} or  {@link #includeColumnIndexes}.
+     * Data will be order by  {@link #includeColumnFieldNames} or  {@link #includeColumnIndexes}.
      *
      * default is false.
      */
-    boolean sortByIncludeColumn();
+    boolean orderByIncludeColumn();
 
     /**
      * Only output the custom columns.

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/ExcelAnalyserImpl.java
Patch:
@@ -19,6 +19,7 @@
 import com.alibaba.excel.read.metadata.holder.xls.XlsReadWorkbookHolder;
 import com.alibaba.excel.read.metadata.holder.xlsx.XlsxReadWorkbookHolder;
 import com.alibaba.excel.support.ExcelTypeEnum;
+import com.alibaba.excel.util.ClassUtils;
 import com.alibaba.excel.util.DateUtils;
 import com.alibaba.excel.util.FileUtils;
 import com.alibaba.excel.util.NumberDataFormatterUtils;
@@ -212,6 +213,7 @@ public void finish() {
     private void removeThreadLocalCache() {
         NumberDataFormatterUtils.removeThreadLocalCache();
         DateUtils.removeThreadLocalCache();
+        ClassUtils.removeThreadLocalCache();
     }
 
     private void clearEncrypt03() {

File: easyexcel-core/src/main/java/com/alibaba/excel/context/WriteContextImpl.java
Patch:
@@ -265,7 +265,7 @@ private void addOneRowOfHeadDataToExcel(Row row, Integer rowIndex, Map<Integer,
             Head head = entry.getValue();
             int columnIndex = entry.getKey();
             ExcelContentProperty excelContentProperty = ClassUtils.declaredExcelContentProperty(null,
-                currentWriteHolder.excelWriteHeadProperty().getHeadClazz(), head.getFieldName());
+                currentWriteHolder.excelWriteHeadProperty().getHeadClazz(), head.getFieldName(), currentWriteHolder);
 
             CellWriteHandlerContext cellWriteHandlerContext = WriteHandlerUtils.createCellWriteHandlerContext(this, row,
                 rowIndex, head, columnIndex, relativeRowIndex, Boolean.TRUE, excelContentProperty);
@@ -427,6 +427,7 @@ public void finish(boolean onException) {
     private void removeThreadLocalCache() {
         NumberDataFormatterUtils.removeThreadLocalCache();
         DateUtils.removeThreadLocalCache();
+        ClassUtils.removeThreadLocalCache();
     }
 
     @Override

File: easyexcel-core/src/main/java/com/alibaba/excel/read/listener/ModelBuildEventListener.java
Patch:
@@ -149,7 +149,8 @@ private Object buildUserModel(Map<Integer, ReadCellData<?>> cellDataMap, ReadShe
             ReadCellData<?> cellData = cellDataMap.get(index);
             Object value = ConverterUtils.convertToJavaObject(cellData, head.getField(),
                 ClassUtils.declaredExcelContentProperty(dataMap, readSheetHolder.excelReadHeadProperty().getHeadClazz(),
-                    fieldName), readSheetHolder.converterMap(), context, context.readRowHolder().getRowIndex(), index);
+                    fieldName, readSheetHolder), readSheetHolder.converterMap(), context,
+                context.readRowHolder().getRowIndex(), index);
             if (value != null) {
                 dataMap.put(fieldName, value);
             }

File: easyexcel-core/src/main/java/com/alibaba/excel/read/metadata/property/ExcelReadHeadProperty.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.util.List;
 
+import com.alibaba.excel.metadata.ConfigurationHolder;
 import com.alibaba.excel.metadata.Holder;
 import com.alibaba.excel.metadata.property.ExcelHeadProperty;
 
@@ -12,7 +13,7 @@
  */
 public class ExcelReadHeadProperty extends ExcelHeadProperty {
 
-    public ExcelReadHeadProperty(Holder holder, Class headClazz, List<List<String>> head) {
-        super(holder, headClazz, head);
+    public ExcelReadHeadProperty(ConfigurationHolder configurationHolder, Class headClazz, List<List<String>> head) {
+        super(configurationHolder, headClazz, head);
     }
 }

File: easyexcel-core/src/main/java/com/alibaba/excel/write/metadata/holder/WriteWorkbookHolder.java
Patch:
@@ -11,6 +11,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import com.alibaba.excel.enums.CacheLocationEnum;
 import com.alibaba.excel.enums.HolderEnum;
 import com.alibaba.excel.exception.ExcelGenerateException;
 import com.alibaba.excel.metadata.data.DataFormatData;

File: easyexcel-core/src/main/java/com/alibaba/excel/write/property/ExcelWriteHeadProperty.java
Patch:
@@ -16,6 +16,7 @@
 import com.alibaba.excel.annotation.write.style.OnceAbsoluteMerge;
 import com.alibaba.excel.enums.HeadKindEnum;
 import com.alibaba.excel.metadata.CellRange;
+import com.alibaba.excel.metadata.ConfigurationHolder;
 import com.alibaba.excel.metadata.Head;
 import com.alibaba.excel.metadata.Holder;
 import com.alibaba.excel.metadata.property.ColumnWidthProperty;
@@ -44,8 +45,8 @@ public class ExcelWriteHeadProperty extends ExcelHeadProperty {
     private RowHeightProperty contentRowHeightProperty;
     private OnceAbsoluteMergeProperty onceAbsoluteMergeProperty;
 
-    public ExcelWriteHeadProperty(Holder holder, Class<?> headClazz, List<List<String>> head) {
-        super(holder, headClazz, head);
+    public ExcelWriteHeadProperty(ConfigurationHolder configurationHolder, Class<?> headClazz, List<List<String>> head) {
+        super(configurationHolder, headClazz, head);
         if (getHeadKind() != HeadKindEnum.CLASS) {
             return;
         }

File: easyexcel-core/src/main/java/com/alibaba/excel/util/WorkBookUtil.java
Patch:
@@ -70,7 +70,9 @@ public static void createWorkBook(WriteWorkbookHolder writeWorkbookHolder) throw
                     new OutputStreamWriter(writeWorkbookHolder.getOutputStream(), writeWorkbookHolder.getCharset())),
                     writeWorkbookHolder.getGlobalConfiguration().getLocale(),
                     writeWorkbookHolder.getGlobalConfiguration().getUse1904windowing(),
-                    writeWorkbookHolder.getGlobalConfiguration().getUseScientificFormat());
+                    writeWorkbookHolder.getGlobalConfiguration().getUseScientificFormat(),
+                    writeWorkbookHolder.getCharset(),
+                    writeWorkbookHolder.getWithBom());
                 writeWorkbookHolder.setCachedWorkbook(csvWorkbook);
                 writeWorkbookHolder.setWorkbook(csvWorkbook);
                 return;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/bom/BomData.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.easyexcel.test.core.bom;
 
 import com.alibaba.excel.annotation.ExcelProperty;
+
 import lombok.EqualsAndHashCode;
 import lombok.Getter;
 import lombok.Setter;
@@ -12,5 +13,5 @@ public class BomData {
     @ExcelProperty("姓名")
     private String name;
     @ExcelProperty("年纪")
-    private Integer age;
+    private Long age;
 }

File: easyexcel-core/src/main/java/com/alibaba/excel/read/listener/PageReadListener.java
Patch:
@@ -15,7 +15,7 @@
  */
 public class PageReadListener<T> implements ReadListener<T> {
     /**
-     * Defuault single handle the amount of data
+     * Default single handle the amount of data
      */
     public static int BATCH_COUNT = 100;
     /**

File: easyexcel-core/src/main/java/com/alibaba/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -37,7 +37,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.commons.collections4.CollectionUtils;
-import org.apache.poi.hssf.usermodel.PoiUtils;
+import com.alibaba.excel.util.PoiUtils;
 import org.apache.poi.ss.usermodel.Cell;
 import org.apache.poi.ss.usermodel.CellStyle;
 import org.apache.poi.ss.usermodel.CellType;

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/v03/handlers/BoundSheetRecordHandler.java
Patch:
@@ -16,6 +16,6 @@ public class BoundSheetRecordHandler extends AbstractXlsRecordHandler implements
     @Override
     public void processRecord(XlsReadContext xlsReadContext, Record record) {
         BoundSheetRecord bsr = (BoundSheetRecord)record;
-        xlsReadContext.xlsReadWorkbookHolder().getBoundSheetRecordList().add((BoundSheetRecord)record);
+        xlsReadContext.xlsReadWorkbookHolder().getBoundSheetRecordList().add(bsr);
     }
 }

File: easyexcel-core/src/main/java/com/alibaba/excel/converters/localdatetime/LocalDateTimeDateConverter.java
Patch:
@@ -10,13 +10,13 @@
 import com.alibaba.excel.util.WorkBookUtil;
 
 /**
- * Date and date converter
+ * LocalDateTime and date converter
  *
  * @author Jiaju Zhuang
  */
 public class LocalDateTimeDateConverter implements Converter<LocalDateTime> {
     @Override
-    public Class<LocalDateTime> supportJavaTypeKey() {
+    public Class<?> supportJavaTypeKey() {
         return LocalDateTime.class;
     }
 

File: easyexcel-core/src/main/java/com/alibaba/excel/metadata/data/WriteCellData.java
Patch:
@@ -17,7 +17,7 @@
 import org.apache.poi.ss.usermodel.CellStyle;
 
 /**
- * wirte cell data
+ * write cell data
  *
  * @author Jiaju Zhuang
  */

File: easyexcel-core/src/main/java/com/alibaba/excel/util/FileUtils.java
Patch:
@@ -174,7 +174,7 @@ public static File createTmpFile(String fileName) {
      *
      * @param directory
      */
-    private static File createDirectory(File directory) {
+    public static File createDirectory(File directory) {
         if (!directory.exists() && !directory.mkdirs()) {
             throw new ExcelCommonException("Cannot create directory:" + directory.getAbsolutePath());
         }

File: easyexcel-core/src/main/java/com/alibaba/excel/write/metadata/WriteWorkbook.java
Patch:
@@ -49,7 +49,8 @@ public class WriteWorkbook extends WriteBasicParameter {
     private InputStream templateInputStream;
 
     /**
-     * Template file
+     * Template file.
+     * This file is read into memory, excessive cases can lead to OOM.
      * <p>
      * If 'inputStream' and 'file' all not empty, file first
      */
@@ -66,7 +67,6 @@ public class WriteWorkbook extends WriteBasicParameter {
      * Whether the encryption
      * <p>
      * WARRING:Encryption is when the entire file is read into memory, so it is very memory intensive.
-     *
      */
     private String password;
     /**

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/annotation/AnnotationDataListener.java
Patch:
@@ -12,7 +12,7 @@
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.exception.ExcelCommonException;
 import com.alibaba.excel.util.DateUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/annotation/AnnotationIndexAndNameDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/celldata/CellDataDataListener.java
Patch:
@@ -6,7 +6,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.support.ExcelTypeEnum;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Assert;
 import org.slf4j.Logger;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterReadData.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.util.Date;
 
@@ -22,6 +23,8 @@ public class ConverterReadData {
     @ExcelProperty("日期")
     private Date date;
     @ExcelProperty("本地日期")
+    private LocalDate localDate;
+    @ExcelProperty("本地日期时间")
     private LocalDateTime localDateTime;
     @ExcelProperty("布尔")
     private Boolean booleanData;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterWriteData.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.util.Date;
 
@@ -22,6 +23,8 @@ public class ConverterWriteData {
     @ExcelProperty("日期")
     private Date date;
     @ExcelProperty("本地日期")
+    private LocalDate localDate;
+    @ExcelProperty("本地日期时间")
     private LocalDateTime localDateTime;
     @ExcelProperty("布尔")
     private Boolean booleanData;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/converter/ReadAllConverterDataListener.java
Patch:
@@ -11,7 +11,7 @@
 import com.alibaba.excel.exception.ExcelCommonException;
 import com.alibaba.excel.support.ExcelTypeEnum;
 import com.alibaba.excel.util.DateUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Assert;
 import org.slf4j.Logger;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/encrypt/EncryptDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/exception/ExceptionDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/extra/ExtraDataListener.java
Patch:
@@ -7,7 +7,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.metadata.CellExtra;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/extra/ExtraDataTest.java
Patch:
@@ -14,7 +14,7 @@
 import com.alibaba.excel.enums.CellExtraTypeEnum;
 import com.alibaba.excel.metadata.CellExtra;
 import com.alibaba.excel.read.listener.ReadListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/head/ComplexDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/head/ListHeadDataListener.java
Patch:
@@ -7,7 +7,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Assert;
 import org.slf4j.Logger;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/head/NoHeadDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/large/LargeDataListener.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.support.ExcelTypeEnum;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Assert;
 import org.slf4j.Logger;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/multiplesheets/MultipleSheetsListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/noncamel/UnCamelDataListener.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.junit.Assert;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/parameter/ParameterDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/repetition/RepetitionDataListener.java
Patch:
@@ -10,7 +10,7 @@
 import com.alibaba.easyexcel.test.core.simple.SimpleDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/simple/SimpleDataListener.java
Patch:
@@ -10,7 +10,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/simple/SimpleDataSheetNameListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/style/StyleDataListener.java
Patch:
@@ -10,7 +10,7 @@
 import com.alibaba.easyexcel.test.core.simple.SimpleDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/template/TemplateDataListener.java
Patch:
@@ -10,7 +10,7 @@
 import com.alibaba.easyexcel.test.core.simple.SimpleDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/fill/FillTest.java
Patch:
@@ -64,6 +64,7 @@ public void simpleFill() {
     public void listFill() {
         // 模板注意 用{} 来表示你要用的变量 如果本来就有"{","}" 特殊字符 用"\{","\}"代替
         // 填充list 的时候还要注意 模板中{.} 多了个点 表示list
+        // 如果填充list的对象是map,必须包涵所有list的key,哪怕数据为null，必须使用map.put(key,null)
         String templateFileName =
             TestFileUtil.getPath() + "demo" + File.separator + "fill" + File.separator + "list.xlsx";
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/CellDataDemoHeadDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/ConverterDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/DemoDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/DemoExceptionListener.java
Patch:
@@ -8,7 +8,7 @@
 import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/DemoExtraListener.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.metadata.CellExtra;
 import com.alibaba.excel.read.listener.ReadListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.junit.Assert;
@@ -46,7 +46,7 @@ public void extra(CellExtra extra, AnalysisContext context) {
                 break;
             case MERGE:
                 log.info(
-                    "额外信息是超链接,而且覆盖了一个区间,在firstRowIndex:{},firstColumnIndex;{},lastRowIndex:{},lastColumnIndex:{}",
+                    "额外信息是合并单元格,而且覆盖了一个区间,在firstRowIndex:{},firstColumnIndex;{},lastRowIndex:{},lastColumnIndex:{}",
                     extra.getFirstRowIndex(), extra.getFirstColumnIndex(), extra.getLastRowIndex(),
                     extra.getLastColumnIndex());
                 break;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/DemoHeadDataListener.java
Patch:
@@ -8,7 +8,7 @@
 import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/IndexOrNameDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/NoModelDataListener.java
Patch:
@@ -6,7 +6,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/ReadTest.java
Patch:
@@ -17,7 +17,7 @@
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.read.metadata.ReadSheet;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.junit.Ignore;
@@ -47,7 +47,8 @@ public void simpleRead() {
         // since: 3.0.0-beta1
         String fileName = TestFileUtil.getPath() + "demo" + File.separator + "demo.xlsx";
         // 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭
-        // 这里每次会读取100条数据 然后返回过来 直接调用使用数据就行
+        // 这里默认每次会读取100条数据 然后返回过来 直接调用使用数据就行
+        // 具体需要返回多少行可以在`PageReadListener`的构造函数设置
         EasyExcel.read(fileName, DemoData.class, new PageReadListener<DemoData>(dataList -> {
             for (DemoData demoData : dataList) {
                 log.info("读取到一条数据{}", JSON.toJSONString(demoData));

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/web/UploadDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/web/WebTest.java
Patch:
@@ -11,7 +11,7 @@
 import com.alibaba.excel.EasyExcel;
 import com.alibaba.excel.util.ListUtils;
 import com.alibaba.excel.util.MapUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -24,7 +24,7 @@
 import com.alibaba.excel.write.metadata.style.WriteCellStyle;
 import com.alibaba.excel.write.metadata.style.WriteFont;
 import com.alibaba.excel.write.style.HorizontalCellStyleStrategy;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections4.CollectionUtils;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/LockDataListener.java
Patch:
@@ -9,7 +9,7 @@
 import com.alibaba.easyexcel.test.demo.read.DemoDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 模板的读取类

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/LockTest.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.Map;
 
 import com.alibaba.excel.EasyExcel;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Ignore;
 import org.junit.Test;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/StyleTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.excel.EasyExcel;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 临时测试

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/Xls03Test.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.alibaba.excel.EasyExcel;
 import com.alibaba.excel.util.BeanMapUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Ignore;
 import org.junit.Test;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/cache/CacheTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.easyexcel.test.temp.poi.Poi2Test;
 import com.alibaba.excel.util.FileUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  *

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/csv/CsvDataListeer.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/csv/CsvReadTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.alibaba.easyexcel.test.util.TestFileUtil;
 import com.alibaba.excel.EasyExcel;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.csv.CSVFormat;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/dataformat/DataFormatTest.java
Patch:
@@ -13,7 +13,7 @@
 import com.alibaba.easyexcel.test.temp.Lock2Test;
 import com.alibaba.easyexcel.test.util.TestFileUtil;
 import com.alibaba.excel.EasyExcel;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
 import org.apache.poi.ss.usermodel.Cell;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/issue2443/Issue2443Test.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.util.NumberUtils;
 import com.alibaba.excel.EasyExcel;
 import com.alibaba.excel.read.listener.PageReadListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 import lombok.extern.slf4j.Slf4j;
 import org.junit.Ignore;
 import org.junit.Test;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/large/LargeDataListener.java
Patch:
@@ -5,7 +5,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/large/NoModelLargeDataListener.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/poi/PoiWriteTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.net.URL;
 import java.util.regex.Pattern;
 
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.apache.poi.xssf.streaming.SXSSFCell;
 import org.apache.poi.xssf.streaming.SXSSFRow;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/CommentTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.alibaba.excel.EasyExcel;
 import com.alibaba.excel.metadata.data.CellData;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 临时测试

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/HDListener.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 模板的读取类

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/HeadListener.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 模板的读取类

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/TestListener.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/simple/HgListener.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/simple/HgTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.excel.EasyExcel;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 测试poi

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/simple/RepeatListener.java
Patch:
@@ -10,7 +10,7 @@
 import com.alibaba.easyexcel.test.temp.LockData;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 模板的读取类

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/simple/Write.java
Patch:
@@ -13,7 +13,7 @@
 import com.alibaba.excel.util.BeanMapUtils;
 import com.alibaba.excel.write.metadata.WriteSheet;
 import com.alibaba.excel.write.metadata.WriteTable;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.junit.Ignore;
@@ -28,8 +28,8 @@
  **/
 @Ignore
 @Slf4j
-public class Wirte {
-    private static final Logger LOGGER = LoggerFactory.getLogger(Wirte.class);
+public class Write {
+    private static final Logger LOGGER = LoggerFactory.getLogger(Write.class);
 
     @Test
     public void simpleWrite1() {

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/annotation/AnnotationDataListener.java
Patch:
@@ -12,7 +12,7 @@
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.exception.ExcelCommonException;
 import com.alibaba.excel.util.DateUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/annotation/AnnotationIndexAndNameDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/celldata/CellDataDataListener.java
Patch:
@@ -6,7 +6,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.support.ExcelTypeEnum;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Assert;
 import org.slf4j.Logger;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterDataListener.java
Patch:
@@ -12,7 +12,7 @@
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.exception.ExcelCommonException;
 import com.alibaba.excel.util.DateUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Assert;
 import org.slf4j.Logger;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/converter/ReadAllConverterDataListener.java
Patch:
@@ -11,7 +11,7 @@
 import com.alibaba.excel.exception.ExcelCommonException;
 import com.alibaba.excel.support.ExcelTypeEnum;
 import com.alibaba.excel.util.DateUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Assert;
 import org.slf4j.Logger;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/encrypt/EncryptDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/exception/ExceptionDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/extra/ExtraDataListener.java
Patch:
@@ -7,7 +7,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.metadata.CellExtra;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/head/ComplexDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/head/ListHeadDataListener.java
Patch:
@@ -7,7 +7,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Assert;
 import org.slf4j.Logger;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/head/NoHeadDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/large/LargeDataListener.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.support.ExcelTypeEnum;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Assert;
 import org.slf4j.Logger;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/multiplesheets/MultipleSheetsListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/noncamel/UnCamelDataListener.java
Patch:
@@ -6,7 +6,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.junit.Assert;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/parameter/ParameterDataListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/repetition/RepetitionDataListener.java
Patch:
@@ -10,7 +10,7 @@
 import com.alibaba.easyexcel.test.core.simple.SimpleDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/simple/SimpleDataListener.java
Patch:
@@ -10,7 +10,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/simple/SimpleDataSheetNameListener.java
Patch:
@@ -9,7 +9,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/style/StyleDataListener.java
Patch:
@@ -10,7 +10,7 @@
 import com.alibaba.easyexcel.test.core.simple.SimpleDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/template/TemplateDataListener.java
Patch:
@@ -10,7 +10,7 @@
 import com.alibaba.easyexcel.test.core.simple.SimpleDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/CellDataDemoHeadDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/ConverterDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/DemoDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/DemoExceptionListener.java
Patch:
@@ -8,7 +8,7 @@
 import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/DemoExtraListener.java
Patch:
@@ -3,7 +3,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.metadata.CellExtra;
 import com.alibaba.excel.read.listener.ReadListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.junit.Assert;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/DemoHeadDataListener.java
Patch:
@@ -8,7 +8,7 @@
 import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/IndexOrNameDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/NoModelDataListener.java
Patch:
@@ -6,7 +6,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/ReadTest.java
Patch:
@@ -17,7 +17,7 @@
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.read.metadata.ReadSheet;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.junit.Ignore;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/web/UploadDataListener.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ListUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/web/WebTest.java
Patch:
@@ -11,7 +11,7 @@
 import com.alibaba.excel.EasyExcel;
 import com.alibaba.excel.util.ListUtils;
 import com.alibaba.excel.util.MapUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Controller;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -24,7 +24,7 @@
 import com.alibaba.excel.write.metadata.style.WriteCellStyle;
 import com.alibaba.excel.write.metadata.style.WriteFont;
 import com.alibaba.excel.write.style.HorizontalCellStyleStrategy;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.collections4.CollectionUtils;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/LockDataListener.java
Patch:
@@ -9,7 +9,7 @@
 import com.alibaba.easyexcel.test.demo.read.DemoDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 模板的读取类

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/LockTest.java
Patch:
@@ -5,7 +5,7 @@
 import java.util.Map;
 
 import com.alibaba.excel.EasyExcel;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Ignore;
 import org.junit.Test;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/StyleTest.java
Patch:
@@ -28,7 +28,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.excel.EasyExcel;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 临时测试

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/Xls03Test.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.alibaba.excel.EasyExcel;
 import com.alibaba.excel.util.BeanMapUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.junit.Ignore;
 import org.junit.Test;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/cache/CacheTest.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.alibaba.easyexcel.test.temp.poi.Poi2Test;
 import com.alibaba.excel.util.FileUtils;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  *

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/csv/CsvDataListeer.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/csv/CsvReadTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.alibaba.easyexcel.test.util.TestFileUtil;
 import com.alibaba.excel.EasyExcel;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.csv.CSVFormat;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/dataformat/DataFormatTest.java
Patch:
@@ -13,7 +13,7 @@
 import com.alibaba.easyexcel.test.temp.Lock2Test;
 import com.alibaba.easyexcel.test.util.TestFileUtil;
 import com.alibaba.excel.EasyExcel;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
 import org.apache.poi.ss.usermodel.Cell;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/issue2443/Issue2443Test.java
Patch:
@@ -5,7 +5,7 @@
 import com.alibaba.excel.util.NumberUtils;
 import com.alibaba.excel.EasyExcel;
 import com.alibaba.excel.read.listener.PageReadListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 import lombok.extern.slf4j.Slf4j;
 import org.junit.Ignore;
 import org.junit.Test;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/large/LargeDataListener.java
Patch:
@@ -5,7 +5,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/large/NoModelLargeDataListener.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * @author Jiaju Zhuang

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/poi/PoiWriteTest.java
Patch:
@@ -8,7 +8,7 @@
 import java.net.URL;
 import java.util.regex.Pattern;
 
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.apache.poi.xssf.streaming.SXSSFCell;
 import org.apache.poi.xssf.streaming.SXSSFRow;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/CommentTest.java
Patch:
@@ -11,7 +11,7 @@
 
 import com.alibaba.excel.EasyExcel;
 import com.alibaba.excel.metadata.data.CellData;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 临时测试

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/HDListener.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 模板的读取类

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/HeadListener.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 模板的读取类

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/read/TestListener.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/simple/HgListener.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/simple/HgTest.java
Patch:
@@ -12,7 +12,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.excel.EasyExcel;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 测试poi

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/simple/RepeatListener.java
Patch:
@@ -10,7 +10,7 @@
 import com.alibaba.easyexcel.test.temp.LockData;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 /**
  * 模板的读取类

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/simple/Write.java
Patch:
@@ -13,7 +13,7 @@
 import com.alibaba.excel.util.BeanMapUtils;
 import com.alibaba.excel.write.metadata.WriteSheet;
 import com.alibaba.excel.write.metadata.WriteTable;
-import com.alibaba.fastjson.JSON;
+import com.alibaba.fastjson2.JSON;
 
 import lombok.extern.slf4j.Slf4j;
 import org.junit.Ignore;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/DemoExtraListener.java
Patch:
@@ -46,7 +46,7 @@ public void extra(CellExtra extra, AnalysisContext context) {
                 break;
             case MERGE:
                 log.info(
-                    "额外信息是超链接,而且覆盖了一个区间,在firstRowIndex:{},firstColumnIndex;{},lastRowIndex:{},lastColumnIndex:{}",
+                    "额外信息是合并单元格,而且覆盖了一个区间,在firstRowIndex:{},firstColumnIndex;{},lastRowIndex:{},lastColumnIndex:{}",
                     extra.getFirstRowIndex(), extra.getFirstColumnIndex(), extra.getLastRowIndex(),
                     extra.getLastColumnIndex());
                 break;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/read/ReadTest.java
Patch:
@@ -47,12 +47,13 @@ public void simpleRead() {
         // since: 3.0.0-beta1
         String fileName = TestFileUtil.getPath() + "demo" + File.separator + "demo.xlsx";
         // 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭
-        // 这里每次会读取100条数据 然后返回过来 直接调用使用数据就行
+        // 这里默认每次会读取100条数据 然后返回过来 直接调用使用数据就行
+        // 具体需要返回多少行可以在`PageReadListener`的构造函数设置
         EasyExcel.read(fileName, DemoData.class, new PageReadListener<DemoData>(dataList -> {
             for (DemoData demoData : dataList) {
                 log.info("读取到一条数据{}", JSON.toJSONString(demoData));
             }
-        },3)).sheet().doRead();
+        })).sheet().doRead();
 
         // 写法2：
         // 匿名内部类 不用额外写一个DemoDataListener

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/write/WriteTest.java
Patch:
@@ -749,8 +749,8 @@ private List<List<Object>> dataList() {
         for (int i = 0; i < 10; i++) {
             List<Object> data = ListUtils.newArrayList();
             data.add("字符串" + i);
-            data.add(new Date());
             data.add(0.56);
+            data.add(new Date());
             list.add(data);
         }
         return list;

File: easyexcel-core/src/main/java/com/alibaba/excel/util/FileUtils.java
Patch:
@@ -174,7 +174,7 @@ public static File createTmpFile(String fileName) {
      *
      * @param directory
      */
-    private static File createDirectory(File directory) {
+    public static File createDirectory(File directory) {
         if (!directory.exists() && !directory.mkdirs()) {
             throw new ExcelCommonException("Cannot create directory:" + directory.getAbsolutePath());
         }

File: easyexcel-core/src/main/java/com/alibaba/excel/converters/localdatetime/LocalDateTimeDateConverter.java
Patch:
@@ -10,13 +10,13 @@
 import com.alibaba.excel.util.WorkBookUtil;
 
 /**
- * Date and date converter
+ * LocalDateTime and date converter
  *
  * @author Jiaju Zhuang
  */
 public class LocalDateTimeDateConverter implements Converter<LocalDateTime> {
     @Override
-    public Class<LocalDateTime> supportJavaTypeKey() {
+    public Class<?> supportJavaTypeKey() {
         return LocalDateTime.class;
     }
 

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterReadData.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.util.Date;
 
@@ -22,6 +23,8 @@ public class ConverterReadData {
     @ExcelProperty("日期")
     private Date date;
     @ExcelProperty("本地日期")
+    private LocalDate localDate;
+    @ExcelProperty("本地日期时间")
     private LocalDateTime localDateTime;
     @ExcelProperty("布尔")
     private Boolean booleanData;

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterWriteData.java
Patch:
@@ -2,6 +2,7 @@
 
 import java.math.BigDecimal;
 import java.math.BigInteger;
+import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.util.Date;
 
@@ -22,6 +23,8 @@ public class ConverterWriteData {
     @ExcelProperty("日期")
     private Date date;
     @ExcelProperty("本地日期")
+    private LocalDate localDate;
+    @ExcelProperty("本地日期时间")
     private LocalDateTime localDateTime;
     @ExcelProperty("布尔")
     private Boolean booleanData;

File: easyexcel-core/src/main/java/com/alibaba/excel/metadata/data/ReadCellData.java
Patch:
@@ -40,7 +40,7 @@ public class ReadCellData<T> extends CellData<T> {
      * for example, originalNumberValue = `44729.99998836806` ,time is:`2022-06-17 23:59:58.995`,
      * But in excel is displayed:` 2022-06-17 23:59:59`, dateValue = `2022-06-17 23:59:59`
      * </li>
-     * <ol/>
+     * </ol>
      * {@link CellDataTypeEnum#NUMBER} {@link CellDataTypeEnum#DATE}
      */
     private BigDecimal originalNumberValue;

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/v03/handlers/NumberRecordHandler.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.alibaba.excel.analysis.v03.IgnorableXlsRecordHandler;
 import com.alibaba.excel.constant.BuiltinFormats;
+import com.alibaba.excel.constant.EasyExcelConstants;
 import com.alibaba.excel.context.xls.XlsReadContext;
 import com.alibaba.excel.enums.RowTypeEnum;
 import com.alibaba.excel.metadata.data.DataFormatData;
@@ -22,7 +23,7 @@ public class NumberRecordHandler extends AbstractXlsRecordHandler implements Ign
     @Override
     public void processRecord(XlsReadContext xlsReadContext, Record record) {
         NumberRecord nr = (NumberRecord)record;
-        ReadCellData<?> cellData = ReadCellData.newInstance(BigDecimal.valueOf(nr.getValue()), nr.getRow(),
+        ReadCellData<?> cellData = ReadCellData.newInstanceOriginal(BigDecimal.valueOf(nr.getValue()), nr.getRow(),
             (int)nr.getColumn());
         short dataFormat = (short)xlsReadContext.xlsReadWorkbookHolder().getFormatTrackingHSSFListener().getFormatIndex(
             nr);

File: easyexcel-core/src/main/java/com/alibaba/excel/converters/localdatetime/LocalDateNumberConverter.java
Patch:
@@ -9,6 +9,7 @@
 import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.metadata.data.WriteCellData;
 import com.alibaba.excel.metadata.property.ExcelContentProperty;
+import com.alibaba.excel.util.DateUtils;
 
 import org.apache.poi.ss.usermodel.DateUtil;
 
@@ -33,10 +34,10 @@ public CellDataTypeEnum supportExcelTypeKey() {
     public LocalDateTime convertToJavaData(ReadCellData<?> cellData, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
         if (contentProperty == null || contentProperty.getDateTimeFormatProperty() == null) {
-            return DateUtil.getLocalDateTime(cellData.getNumberValue().doubleValue(),
+            return DateUtils.getLocalDateTime(cellData.getNumberValue().doubleValue(),
                 globalConfiguration.getUse1904windowing());
         } else {
-            return DateUtil.getLocalDateTime(cellData.getNumberValue().doubleValue(),
+            return DateUtils.getLocalDateTime(cellData.getNumberValue().doubleValue(),
                 contentProperty.getDateTimeFormatProperty().getUse1904windowing());
         }
     }

File: easyexcel-core/src/main/java/com/alibaba/excel/converters/string/StringNumberConverter.java
Patch:
@@ -37,9 +37,8 @@ public String convertToJavaData(ReadCellData<?> cellData, ExcelContentProperty c
         GlobalConfiguration globalConfiguration) {
         // If there are "DateTimeFormat", read as date
         if (contentProperty != null && contentProperty.getDateTimeFormatProperty() != null) {
-            return DateUtils.format(
-                DateUtil.getJavaDate(cellData.getNumberValue().doubleValue(),
-                    contentProperty.getDateTimeFormatProperty().getUse1904windowing(), null),
+            return DateUtils.format(cellData.getNumberValue(),
+                contentProperty.getDateTimeFormatProperty().getUse1904windowing(),
                 contentProperty.getDateTimeFormatProperty().getFormat());
         }
         // If there are "NumberFormat", read as number

File: easyexcel-core/src/main/java/com/alibaba/excel/metadata/data/CellData.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.excel.metadata.data;
 
 import java.math.BigDecimal;
+import java.time.LocalDateTime;
 
 import com.alibaba.excel.enums.CellDataTypeEnum;
 import com.alibaba.excel.metadata.AbstractCell;
@@ -57,6 +58,7 @@ public void checkEmpty() {
         }
         switch (type) {
             case STRING:
+            case DIRECT_STRING:
             case ERROR:
                 if (StringUtils.isEmpty(stringValue)) {
                     type = CellDataTypeEnum.EMPTY;
@@ -76,5 +78,4 @@ public void checkEmpty() {
         }
     }
 
-
 }

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/write/DemoData.java
Patch:
@@ -24,6 +24,7 @@ public class DemoData {
     private Date date;
     @ExcelProperty("数字标题")
     private Double doubleData;
+
     /**
      * 忽略这个字段
      */

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/v03/handlers/NumberRecordHandler.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.alibaba.excel.analysis.v03.IgnorableXlsRecordHandler;
 import com.alibaba.excel.constant.BuiltinFormats;
+import com.alibaba.excel.constant.EasyExcelConstants;
 import com.alibaba.excel.context.xls.XlsReadContext;
 import com.alibaba.excel.enums.RowTypeEnum;
 import com.alibaba.excel.metadata.data.DataFormatData;
@@ -22,7 +23,7 @@ public class NumberRecordHandler extends AbstractXlsRecordHandler implements Ign
     @Override
     public void processRecord(XlsReadContext xlsReadContext, Record record) {
         NumberRecord nr = (NumberRecord)record;
-        ReadCellData<?> cellData = ReadCellData.newInstance(BigDecimal.valueOf(nr.getValue()), nr.getRow(),
+        ReadCellData<?> cellData = ReadCellData.newInstanceOriginal(BigDecimal.valueOf(nr.getValue()), nr.getRow(),
             (int)nr.getColumn());
         short dataFormat = (short)xlsReadContext.xlsReadWorkbookHolder().getFormatTrackingHSSFListener().getFormatIndex(
             nr);

File: easyexcel-core/src/main/java/com/alibaba/excel/converters/localdatetime/LocalDateNumberConverter.java
Patch:
@@ -9,6 +9,7 @@
 import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.metadata.data.WriteCellData;
 import com.alibaba.excel.metadata.property.ExcelContentProperty;
+import com.alibaba.excel.util.DateUtils;
 
 import org.apache.poi.ss.usermodel.DateUtil;
 
@@ -33,10 +34,10 @@ public CellDataTypeEnum supportExcelTypeKey() {
     public LocalDateTime convertToJavaData(ReadCellData<?> cellData, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
         if (contentProperty == null || contentProperty.getDateTimeFormatProperty() == null) {
-            return DateUtil.getLocalDateTime(cellData.getNumberValue().doubleValue(),
+            return DateUtils.getLocalDateTime(cellData.getNumberValue().doubleValue(),
                 globalConfiguration.getUse1904windowing());
         } else {
-            return DateUtil.getLocalDateTime(cellData.getNumberValue().doubleValue(),
+            return DateUtils.getLocalDateTime(cellData.getNumberValue().doubleValue(),
                 contentProperty.getDateTimeFormatProperty().getUse1904windowing());
         }
     }

File: easyexcel-core/src/main/java/com/alibaba/excel/converters/string/StringNumberConverter.java
Patch:
@@ -37,9 +37,8 @@ public String convertToJavaData(ReadCellData<?> cellData, ExcelContentProperty c
         GlobalConfiguration globalConfiguration) {
         // If there are "DateTimeFormat", read as date
         if (contentProperty != null && contentProperty.getDateTimeFormatProperty() != null) {
-            return DateUtils.format(
-                DateUtil.getJavaDate(cellData.getNumberValue().doubleValue(),
-                    contentProperty.getDateTimeFormatProperty().getUse1904windowing(), null),
+            return DateUtils.format(cellData.getNumberValue(),
+                contentProperty.getDateTimeFormatProperty().getUse1904windowing(),
                 contentProperty.getDateTimeFormatProperty().getFormat());
         }
         // If there are "NumberFormat", read as number

File: easyexcel-core/src/main/java/com/alibaba/excel/metadata/data/CellData.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.excel.metadata.data;
 
 import java.math.BigDecimal;
+import java.time.LocalDateTime;
 
 import com.alibaba.excel.enums.CellDataTypeEnum;
 import com.alibaba.excel.metadata.AbstractCell;
@@ -57,6 +58,7 @@ public void checkEmpty() {
         }
         switch (type) {
             case STRING:
+            case DIRECT_STRING:
             case ERROR:
                 if (StringUtils.isEmpty(stringValue)) {
                     type = CellDataTypeEnum.EMPTY;
@@ -76,5 +78,4 @@ public void checkEmpty() {
         }
     }
 
-
 }

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/write/DemoData.java
Patch:
@@ -24,6 +24,7 @@ public class DemoData {
     private Date date;
     @ExcelProperty("数字标题")
     private Double doubleData;
+
     /**
      * 忽略这个字段
      */

File: easyexcel-core/src/main/java/com/alibaba/excel/util/FileUtils.java
Patch:
@@ -62,7 +62,6 @@ private FileUtils() {}
         // Initialize the cache directory
         File cacheFile = new File(cachePath);
         createDirectory(cacheFile);
-        cacheFile.deleteOnExit();
     }
 
     /**
@@ -160,7 +159,6 @@ public static void createPoiFilesDirectory() {
         File poiFilesPathFile = new File(poiFilesPath);
         createDirectory(poiFilesPathFile);
         TempFile.setTempFileCreationStrategy(new DefaultTempFileCreationStrategy(poiFilesPathFile));
-        poiFilesPathFile.deleteOnExit();
     }
 
     public static File createCacheTmpFile() {

File: easyexcel-core/src/main/java/com/alibaba/excel/util/FileUtils.java
Patch:
@@ -58,6 +58,7 @@ private FileUtils() {}
         // Create a temporary directory in advance
         File tempFile = new File(tempFilePrefix);
         createDirectory(tempFile);
+        tempFile.deleteOnExit();
         // Initialize the cache directory
         File cacheFile = new File(cachePath);
         createDirectory(cacheFile);

File: easyexcel-core/src/main/java/com/alibaba/excel/util/FileUtils.java
Patch:
@@ -58,11 +58,9 @@ private FileUtils() {}
         // Create a temporary directory in advance
         File tempFile = new File(tempFilePrefix);
         createDirectory(tempFile);
-        tempFile.deleteOnExit();
         // Initialize the cache directory
         File cacheFile = new File(cachePath);
         createDirectory(cacheFile);
-        cacheFile.deleteOnExit();
     }
 
     /**
@@ -160,7 +158,6 @@ public static void createPoiFilesDirectory() {
         File poiFilesPathFile = new File(poiFilesPath);
         createDirectory(poiFilesPathFile);
         TempFile.setTempFileCreationStrategy(new DefaultTempFileCreationStrategy(poiFilesPathFile));
-        poiFilesPathFile.deleteOnExit();
     }
 
     public static File createCacheTmpFile() {

File: easyexcel-core/src/main/java/com/alibaba/excel/write/metadata/WriteWorkbook.java
Patch:
@@ -37,7 +37,8 @@ public class WriteWorkbook extends WriteBasicParameter {
      */
     private OutputStream outputStream;
     /**
-     * output charset
+     * charset.
+     * Only work on the CSV file
      */
     private Charset charset;
     /**

File: easyexcel-core/src/main/java/com/alibaba/excel/write/metadata/holder/WriteWorkbookHolder.java
Patch:
@@ -80,7 +80,8 @@ public class WriteWorkbookHolder extends AbstractWriteHolder {
      */
     private OutputStream outputStream;
     /**
-     * output charset
+     * charset.
+     * Only work on the CSV file
      */
     private Charset charset;
     /**

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/dataformat/DateFormatTest.java
Patch:
@@ -26,8 +26,8 @@ public class DateFormatTest {
 
     @BeforeClass
     public static void init() {
-        file07 = TestFileUtil.readFile("easyexcel-test/test/resources/dataformat" + File.separator + "dataformat.xlsx");
-        file03 = TestFileUtil.readFile("easyexcel-test/test/resources/dataformat" + File.separator + "dataformat.xls");
+        file07 = TestFileUtil.readFile("dataformat" + File.separator + "dataformat.xlsx");
+        file03 = TestFileUtil.readFile("dataformat" + File.separator + "dataformat.xls");
     }
 
     @Test

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/extra/ExtraDataTest.java
Patch:
@@ -22,8 +22,8 @@ public class ExtraDataTest {
 
     @BeforeClass
     public static void init() {
-        file03 = TestFileUtil.readFile("easyexcel-test/test/resources/extra" + File.separator + "extra.xls");
-        file07 = TestFileUtil.readFile("easyexcel-test/test/resources/extra" + File.separator + "extra.xlsx");
+        file03 = TestFileUtil.readFile("extra" + File.separator + "extra.xls");
+        file07 = TestFileUtil.readFile("extra" + File.separator + "extra.xlsx");
     }
 
     @Test

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/fill/annotation/FillAnnotationDataTest.java
Patch:
@@ -44,8 +44,8 @@ public class FillAnnotationDataTest {
     public static void init() {
         file07 = TestFileUtil.createNewFile("fillAnnotation07.xlsx");
         file03 = TestFileUtil.createNewFile("fillAnnotation03.xls");
-        fileTemplate07 = TestFileUtil.readFile("easyexcel-test/test/resources/fill" + File.separator + "annotation.xlsx");
-        fileTemplate03 = TestFileUtil.readFile("easyexcel-test/test/resources/fill" + File.separator + "annotation.xls");
+        fileTemplate07 = TestFileUtil.readFile("fill" + File.separator + "annotation.xlsx");
+        fileTemplate03 = TestFileUtil.readFile("fill" + File.separator + "annotation.xls");
     }
 
     @Test
@@ -110,7 +110,7 @@ private List<FillAnnotationData> data() throws Exception {
         data.setNumber(99.99);
         data.setString1("string1");
         data.setString2("string2");
-        data.setImage(TestFileUtil.getPath() + "easyexcel-test/test/resources/converter" + File.separator + "img.jpg");
+        data.setImage(TestFileUtil.getPath() + "converter" + File.separator + "img.jpg");
         list.add(data);
         list.add(data);
         list.add(data);

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/fill/style/FillStyleAnnotatedTest.java
Patch:
@@ -46,8 +46,8 @@ public class FillStyleAnnotatedTest {
     public static void init() {
         FillStyleAnnotated07 = TestFileUtil.createNewFile("FillStyleAnnotated07.xlsx");
         FillStyleAnnotated03 = TestFileUtil.createNewFile("FillStyleAnnotated03.xls");
-        fileStyleTemplate07 = TestFileUtil.readFile("easyexcel-test/test/resources/fill" + File.separator + "style.xlsx");
-        fileStyleTemplate03 = TestFileUtil.readFile("easyexcel-test/test/resources/fill" + File.separator + "style.xls");
+        fileStyleTemplate07 = TestFileUtil.readFile("fill" + File.separator + "style.xlsx");
+        fileStyleTemplate03 = TestFileUtil.readFile("fill" + File.separator + "style.xls");
     }
 
     @Test

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/fill/style/FillStyleDataTest.java
Patch:
@@ -49,8 +49,8 @@ public static void init() {
         fileStyle03 = TestFileUtil.createNewFile("fileStyle03.xls");
         fileStyleHandler07 = TestFileUtil.createNewFile("fileStyleHandler07.xlsx");
         fileStyleHandler03 = TestFileUtil.createNewFile("fileStyleHandler03.xls");
-        fileStyleTemplate07 = TestFileUtil.readFile("easyexcel-test/test/resources/fill" + File.separator + "style.xlsx");
-        fileStyleTemplate03 = TestFileUtil.readFile("easyexcel-test/test/resources/fill" + File.separator + "style.xls");
+        fileStyleTemplate07 = TestFileUtil.readFile("fill" + File.separator + "style.xlsx");
+        fileStyleTemplate03 = TestFileUtil.readFile("fill" + File.separator + "style.xls");
     }
 
     @Test

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/multiplesheets/MultipleSheetsDataTest.java
Patch:
@@ -26,8 +26,8 @@ public class MultipleSheetsDataTest {
 
     @BeforeClass
     public static void init() {
-        file07 = TestFileUtil.readFile("easyexcel-test/test/resources/multiplesheets" + File.separator + "multiplesheets.xlsx");
-        file03 = TestFileUtil.readFile("easyexcel-test/test/resources/multiplesheets" + File.separator + "multiplesheets.xls");
+        file07 = TestFileUtil.readFile("multiplesheets" + File.separator + "multiplesheets.xlsx");
+        file03 = TestFileUtil.readFile("multiplesheets" + File.separator + "multiplesheets.xls");
     }
 
     @Test

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/simple/SimpleDataTest.java
Patch:
@@ -90,8 +90,8 @@ public void t13SynchronousReadCsv() {
 
     @Test
     public void t21SheetNameRead07() {
-        EasyExcel.read(TestFileUtil.readFile("easyexcel-test/test/resources/simple" + File.separator + "simple07.xlsx"), SimpleData.class,
-            new SimpleDataSheetNameListener()).sheet("easyexcel-test/test/resources/simple").doRead();
+        EasyExcel.read(TestFileUtil.readFile("simple" + File.separator + "simple07.xlsx"), SimpleData.class,
+            new SimpleDataSheetNameListener()).sheet("simple").doRead();
     }
 
     private void synchronousRead(File file) {

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/core/template/TemplateDataTest.java
Patch:
@@ -41,14 +41,14 @@ public void t02ReadAndWrite03() {
 
     private void readAndWrite07(File file) {
         EasyExcel.write(file, TemplateData.class)
-            .withTemplate(TestFileUtil.readFile("easyexcel-test/test/resources/template" + File.separator + "template07.xlsx")).sheet()
+            .withTemplate(TestFileUtil.readFile("template" + File.separator + "template07.xlsx")).sheet()
             .doWrite(data());
         EasyExcel.read(file, TemplateData.class, new TemplateDataListener()).headRowNumber(3).sheet().doRead();
     }
 
     private void readAndWrite03(File file) {
         EasyExcel.write(file, TemplateData.class)
-            .withTemplate(TestFileUtil.readFile("easyexcel-test/test/resources/template" + File.separator + "template03.xls")).sheet()
+            .withTemplate(TestFileUtil.readFile("template" + File.separator + "template03.xls")).sheet()
             .doWrite(data());
         EasyExcel.read(file, TemplateData.class, new TemplateDataListener()).headRowNumber(3).sheet().doRead();
     }

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/demo/write/WriteTest.java
Patch:
@@ -267,7 +267,7 @@ public void converterWrite() {
     public void imageWrite() throws Exception {
         String fileName = TestFileUtil.getPath() + "imageWrite" + System.currentTimeMillis() + ".xlsx";
 
-        String imagePath = TestFileUtil.getPath() + "easyexcel-test/test/resources/converter" + File.separator + "img.jpg";
+        String imagePath = TestFileUtil.getPath() + "converter" + File.separator + "img.jpg";
         try (InputStream inputStream = FileUtils.openInputStream(new File(imagePath))) {
             List<ImageDemoData> list =  ListUtils.newArrayList();
             ImageDemoData imageDemoData = new ImageDemoData();
@@ -419,7 +419,7 @@ public void writeCellDataWrite() {
      */
     @Test
     public void templateWrite() {
-        String templateFileName = TestFileUtil.getPath() + "easyexcel-test/test/resources/demo" + File.separator + "demo.xlsx";
+        String templateFileName = TestFileUtil.getPath() + "demo" + File.separator + "demo.xlsx";
         String fileName = TestFileUtil.getPath() + "templateWrite" + System.currentTimeMillis() + ".xlsx";
         // 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭
         EasyExcel.write(fileName, DemoData.class).withTemplate(templateFileName).sheet().doWrite(data());

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/WriteLargeTest.java
Patch:
@@ -33,7 +33,7 @@ public class WriteLargeTest {
     @Test
     public void test() throws Exception {
         // 方法2 如果写到不同的sheet 同一个对象
-        String fileName = TestFileUtil.getPath() + "easyexcel-test/test/resources/large" + System.currentTimeMillis() + ".xlsx";
+        String fileName = TestFileUtil.getPath() + "large" + System.currentTimeMillis() + ".xlsx";
         // 头的策略
         WriteCellStyle headWriteCellStyle = new WriteCellStyle();
         // 背景设置为红色
@@ -69,7 +69,7 @@ public void test() throws Exception {
     @Test
     public void test2() throws Exception {
         // 方法2 如果写到不同的sheet 同一个对象
-        String fileName = TestFileUtil.getPath() + "easyexcel-test/test/resources/large" + System.currentTimeMillis() + ".xlsx";
+        String fileName = TestFileUtil.getPath() + "large" + System.currentTimeMillis() + ".xlsx";
 
         ExcelWriter excelWriter = EasyExcel.write(fileName, LargeData.class).build();
         WriteSheet writeSheet = EasyExcel.writerSheet().build();

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/dataformat/DataFormatTest.java
Patch:
@@ -132,7 +132,7 @@ public void test2() throws Exception {
 
     @Test
     public void test355() throws IOException, InvalidFormatException {
-        File file = TestFileUtil.readFile("easyexcel-test/test/resources/dataformat" + File.separator + "dataformat.xlsx");
+        File file = TestFileUtil.readFile("dataformat" + File.separator + "dataformat.xlsx");
         XSSFWorkbook xssfWorkbook = new XSSFWorkbook(file);
         Sheet xssfSheet = xssfWorkbook.getSheetAt(0);
         DataFormatter d = new DataFormatter(Locale.CHINA);

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/issue1663/FillTest.java
Patch:
@@ -23,9 +23,9 @@ public class FillTest {
     @Test
     public void TestFillNullPoint(){
         String templateFileName =
-            TestFileUtil.getPath() + "easyexcel-test/test/resources/temp/issue1663" + File.separator + "template.xlsx";
+            TestFileUtil.getPath() + "temp/issue1663" + File.separator + "template.xlsx";
 
-        String fileName = TestFileUtil.getPath() + "easyexcel-test/test/resources/temp/issue1663" + File.separator + "issue1663.xlsx";
+        String fileName = TestFileUtil.getPath() + "temp/issue1663" + File.separator + "issue1663.xlsx";
         ExcelWriter excelWriter = EasyExcel.write(fileName).withTemplate(templateFileName).build();
         WriteSheet writeSheet = EasyExcel.writerSheet().build();
         FillConfig fillConfig = FillConfig.builder().direction(WriteDirectionEnum.VERTICAL).build();

File: easyexcel-test/src/test/java/com/alibaba/easyexcel/test/temp/poi/Poi3Test.java
Patch:
@@ -30,7 +30,7 @@ public class Poi3Test {
 
     @Test
     public void Encryption() throws Exception {
-        String file = TestFileUtil.getPath() + "easyexcel-test/test/resources/large" + File.separator + "large07.xlsx";
+        String file = TestFileUtil.getPath() + "large" + File.separator + "large07.xlsx";
         POIFSFileSystem fs = new POIFSFileSystem();
         EncryptionInfo info = new EncryptionInfo(EncryptionMode.agile);
         Encryptor enc = info.getEncryptor();

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/csv/CsvExcelReadExecutor.java
Patch:
@@ -96,6 +96,7 @@ private void dealRecord(CSVRecord record, int rowIndex) {
         Map<Integer, Cell> cellMap = new LinkedHashMap<>();
         Iterator<String> cellIterator = record.iterator();
         int columnIndex = 0;
+        Boolean autoTrim = csvReadContext.currentReadHolder().globalConfiguration().getAutoTrim();
         while (cellIterator.hasNext()) {
             String cellString = cellIterator.next();
             ReadCellData<String> readCellData = new ReadCellData<>();
@@ -105,7 +106,7 @@ private void dealRecord(CSVRecord record, int rowIndex) {
             // csv is an empty string of whether <code>,,</code> is read or <code>,"",</code>
             if (StringUtils.isNotBlank(cellString)) {
                 readCellData.setType(CellDataTypeEnum.STRING);
-                readCellData.setStringValue(cellString);
+                readCellData.setStringValue(autoTrim ? cellString.trim() : cellString);
             } else {
                 readCellData.setType(CellDataTypeEnum.EMPTY);
             }

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/v03/handlers/FormulaRecordHandler.java
Patch:
@@ -64,6 +64,7 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
                 dataFormatData.setFormat(BuiltinFormats.getBuiltinFormat(dataFormatData.getIndex(),
                     xlsReadContext.xlsReadWorkbookHolder().getFormatTrackingHSSFListener().getFormatString(frec),
                     xlsReadContext.readSheetHolder().getGlobalConfiguration().getLocale()));
+                tempCellData.setDataFormatData(dataFormatData);
                 cellMap.put((int)frec.getColumn(), tempCellData);
                 break;
             case ERROR:

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/csv/CsvExcelReadExecutor.java
Patch:
@@ -96,6 +96,7 @@ private void dealRecord(CSVRecord record, int rowIndex) {
         Map<Integer, Cell> cellMap = new LinkedHashMap<>();
         Iterator<String> cellIterator = record.iterator();
         int columnIndex = 0;
+        Boolean autoTrim = csvReadContext.currentReadHolder().globalConfiguration().getAutoTrim();
         while (cellIterator.hasNext()) {
             String cellString = cellIterator.next();
             ReadCellData<String> readCellData = new ReadCellData<>();
@@ -105,7 +106,7 @@ private void dealRecord(CSVRecord record, int rowIndex) {
             // csv is an empty string of whether <code>,,</code> is read or <code>,"",</code>
             if (StringUtils.isNotBlank(cellString)) {
                 readCellData.setType(CellDataTypeEnum.STRING);
-                readCellData.setStringValue(cellString);
+                readCellData.setStringValue(autoTrim ? cellString.trim() : cellString);
             } else {
                 readCellData.setType(CellDataTypeEnum.EMPTY);
             }

File: easyexcel-core/src/main/java/com/alibaba/excel/converters/biginteger/BigIntegerStringConverter.java
Patch:
@@ -37,6 +37,6 @@ public BigInteger convertToJavaData(ReadCellData<?> cellData, ExcelContentProper
     @Override
     public WriteCellData<?> convertToExcelData(BigInteger value, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
-        return NumberUtils.formatToCellData(value, contentProperty);
+        return NumberUtils.formatToCellDataString(value, contentProperty);
     }
 }

File: easyexcel-core/src/main/java/com/alibaba/excel/metadata/property/ExcelContentProperty.java
Patch:
@@ -18,7 +18,7 @@ public class ExcelContentProperty {
     public static final ExcelContentProperty EMPTY = new ExcelContentProperty();
 
     /**
-     * Java filed
+     * Java field
      */
     private Field field;
     /**

File: easyexcel-core/src/main/java/com/alibaba/excel/util/FieldUtils.java
Patch:
@@ -30,9 +30,9 @@ public class FieldUtils {
 
     private static final int START_RESOLVE_FIELD_LENGTH = 2;
 
-    public static Class<?> getFieldClass(Map dataMap, String filedName, Object value) {
+    public static Class<?> getFieldClass(Map dataMap, String fieldName, Object value) {
         if (dataMap instanceof BeanMap) {
-            Class<?> fieldClass = ((BeanMap)dataMap).getPropertyType(filedName);
+            Class<?> fieldClass = ((BeanMap)dataMap).getPropertyType(fieldName);
             if (fieldClass != null) {
                 return fieldClass;
             }

File: easyexcel-core/src/main/java/com/alibaba/excel/analysis/ExcelAnalyserImpl.java
Patch:
@@ -173,7 +173,7 @@ public void finish() {
             throwable = t;
         }
 
-        // close csv
+        // close csv.
         // https://github.com/alibaba/easyexcel/issues/2309
         try {
             if ((readWorkbookHolder instanceof CsvReadWorkbookHolder)

File: easyexcel-core/src/main/java/com/alibaba/excel/read/metadata/holder/csv/CsvReadWorkbookHolder.java
Patch:
@@ -8,6 +8,7 @@
 import lombok.Getter;
 import lombok.Setter;
 import org.apache.commons.csv.CSVFormat;
+import org.apache.commons.csv.CSVParser;
 
 /**
  * Workbook holder
@@ -20,6 +21,8 @@
 public class CsvReadWorkbookHolder extends ReadWorkbookHolder {
 
     private CSVFormat csvFormat;
+    private CSVParser csvParser;
+
 
     public CsvReadWorkbookHolder(ReadWorkbook readWorkbook) {
         super(readWorkbook);

File: easyexcel-core/src/test/java/com/alibaba/easyexcel/test/temp/write/TempWriteData.java
Patch:
@@ -8,7 +8,9 @@
 import lombok.Data;
 
 @Data
+//@Accessors(chain = true)
 public class TempWriteData {
+    private String name1;
 
     @ExcelProperty("     换行\r\n \\ \r\n的名字")
     @HeadStyle(wrapped = BooleanEnum.TRUE)

File: easyexcel-core/src/test/java/com/alibaba/easyexcel/test/temp/LockTest.java
Patch:
@@ -24,7 +24,7 @@ public class LockTest {
     @Test
     public void test() throws Exception {
         List<Object> list =
-            EasyExcel.read(new FileInputStream("/Users/zhuangjiaju/test/pic.xls")).doReadAllSync();
+            EasyExcel.read(new FileInputStream("/Users/zhuangjiaju/Downloads/test.xlsx")).useDefaultListener(false).doReadAllSync();
         for (Object data : list) {
             LOGGER.info("返回数据：{}", JSON.toJSONString(data));
         }

File: src/test/java/com/alibaba/easyexcel/test/core/annotation/AnnotationIndexAndNameDataTest.java
Patch:
@@ -8,13 +8,16 @@
 import com.alibaba.excel.EasyExcel;
 
 import org.junit.BeforeClass;
+import org.junit.FixMethodOrder;
 import org.junit.Test;
+import org.junit.runners.MethodSorters;
 
 /**
  * Annotation data test
  *
  * @author Jiaju Zhuang
  */
+@FixMethodOrder(MethodSorters.NAME_ASCENDING)
 public class AnnotationIndexAndNameDataTest {
 
     private static File file07;

File: src/main/java/com/alibaba/excel/util/ConverterUtils.java
Patch:
@@ -13,6 +13,7 @@
 import com.alibaba.excel.converters.ReadConverterContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
 import com.alibaba.excel.exception.ExcelDataConvertException;
+import com.alibaba.excel.metadata.data.CellData;
 import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.metadata.property.ExcelContentProperty;
 import com.alibaba.excel.read.metadata.holder.ReadSheetHolder;
@@ -89,7 +90,7 @@ public static Object convertToJavaObject(ReadCellData<?> cellData, Field field,
         } else {
             clazz = field.getType();
         }
-        if (clazz == ReadCellData.class) {
+        if (clazz == CellData.class || clazz == ReadCellData.class) {
             Class<?> classGeneric = getClassGeneric(field.getGenericType());
             ReadCellData<Object> cellDataReturn = cellData.clone();
             cellDataReturn.setData(doConvertToJavaObject(cellData, classGeneric, contentProperty, converterMap,

File: src/main/java/com/alibaba/excel/exception/ExcelDataConvertException.java
Patch:
@@ -32,7 +32,7 @@ public class ExcelDataConvertException extends RuntimeException {
      */
     private ExcelContentProperty excelContentProperty;
 
-    public ExcelDataConvertException(Integer rowIndex, Integer columnIndex, CellData cellData,
+    public ExcelDataConvertException(Integer rowIndex, Integer columnIndex, CellData<?> cellData,
         ExcelContentProperty excelContentProperty, String message) {
         super(message);
         this.rowIndex = rowIndex;
@@ -41,7 +41,7 @@ public ExcelDataConvertException(Integer rowIndex, Integer columnIndex, CellData
         this.excelContentProperty = excelContentProperty;
     }
 
-    public ExcelDataConvertException(Integer rowIndex, Integer columnIndex, CellData cellData,
+    public ExcelDataConvertException(Integer rowIndex, Integer columnIndex, CellData<?> cellData,
         ExcelContentProperty excelContentProperty, String message, Throwable cause) {
         super(message, cause);
         this.rowIndex = rowIndex;

File: src/main/java/com/alibaba/excel/metadata/AbstractHolder.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Map;
 
 import com.alibaba.excel.converters.Converter;
+import com.alibaba.excel.converters.ConverterKeyBuild.ConverterKey;
 
 import lombok.Data;
 import lombok.NoArgsConstructor;
@@ -38,7 +39,7 @@ public abstract class AbstractHolder implements ConfigurationHolder {
      * <p>
      * Write key:
      */
-    private Map<String, Converter<?>> converterMap;
+    private Map<ConverterKey, Converter<?>> converterMap;
 
     public AbstractHolder(BasicParameter basicParameter, AbstractHolder prentAbstractHolder) {
         this.newInitialization = Boolean.TRUE;
@@ -81,7 +82,7 @@ public AbstractHolder(BasicParameter basicParameter, AbstractHolder prentAbstrac
     }
 
     @Override
-    public Map<String, Converter<?>> converterMap() {
+    public Map<ConverterKey, Converter<?>> converterMap() {
         return getConverterMap();
     }
 

File: src/main/java/com/alibaba/excel/metadata/ConfigurationHolder.java
Patch:
@@ -3,17 +3,16 @@
 import java.util.Map;
 
 import com.alibaba.excel.converters.Converter;
+import com.alibaba.excel.converters.ConverterKeyBuild.ConverterKey;
 
 /**
- *
  * Get the corresponding holder
  *
  * @author Jiaju Zhuang
  **/
 public interface ConfigurationHolder extends Holder {
 
     /**
-     *
      * Record whether it's new or from cache
      *
      * @return Record whether it's new or from cache
@@ -32,5 +31,5 @@ public interface ConfigurationHolder extends Holder {
      *
      * @return Converter
      */
-    Map<String, Converter<?>> converterMap();
+    Map<ConverterKey, Converter<?>> converterMap();
 }

File: src/main/java/com/alibaba/excel/util/ConverterUtils.java
Patch:
@@ -8,6 +8,7 @@
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.converters.Converter;
 import com.alibaba.excel.converters.ConverterKeyBuild;
+import com.alibaba.excel.converters.ConverterKeyBuild.ConverterKey;
 import com.alibaba.excel.converters.NullableObjectConverter;
 import com.alibaba.excel.converters.ReadConverterContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
@@ -80,7 +81,7 @@ public static Map<Integer, String> convertToStringMap(Map<Integer, ReadCellData<
      * @return
      */
     public static Object convertToJavaObject(ReadCellData<?> cellData, Field field,
-        ExcelContentProperty contentProperty, Map<String, Converter<?>> converterMap, AnalysisContext context,
+        ExcelContentProperty contentProperty, Map<ConverterKey, Converter<?>> converterMap, AnalysisContext context,
         Integer rowIndex, Integer columnIndex) {
         Class<?> clazz;
         if (field == null) {
@@ -126,7 +127,7 @@ private static Class<?> getClassGeneric(Type type) {
      * @return
      */
     private static Object doConvertToJavaObject(ReadCellData<?> cellData, Class<?> clazz,
-        ExcelContentProperty contentProperty, Map<String, Converter<?>> converterMap, AnalysisContext context,
+        ExcelContentProperty contentProperty, Map<ConverterKey, Converter<?>> converterMap, AnalysisContext context,
         Integer rowIndex, Integer columnIndex) {
         Converter<?> converter = null;
         if (contentProperty != null) {

File: src/main/java/com/alibaba/excel/write/metadata/holder/AbstractWriteHolder.java
Patch:
@@ -430,4 +430,5 @@ public int relativeHeadRowIndex() {
     public boolean automaticMergeHead() {
         return getAutomaticMergeHead();
     }
+
 }

File: src/main/java/com/alibaba/excel/write/metadata/holder/WriteSheetHolder.java
Patch:
@@ -9,9 +9,7 @@
 import com.alibaba.excel.write.metadata.WriteSheet;
 
 import lombok.Data;
-import lombok.Getter;
 import lombok.NoArgsConstructor;
-import lombok.Setter;
 import org.apache.poi.hssf.usermodel.HSSFSheet;
 import org.apache.poi.ss.usermodel.Sheet;
 import org.apache.poi.xssf.streaming.SXSSFSheet;

File: src/main/java/com/alibaba/excel/annotation/ExcelProperty.java
Patch:
@@ -54,7 +54,7 @@
      *
      * @return Converter
      */
-    Class<? extends Converter> converter() default AutoConverter.class;
+    Class<? extends Converter<?>> converter() default AutoConverter.class;
 
     /**
      *

File: src/main/java/com/alibaba/excel/util/NumberUtils.java
Patch:
@@ -186,4 +186,5 @@ private static Number parse(String string, ExcelContentProperty contentProperty)
         decimalFormat.setParseBigDecimal(true);
         return decimalFormat.parse(string);
     }
+
 }

File: src/test/java/com/alibaba/easyexcel/test/core/noncamel/UnCamelDataListener.java
Patch:
@@ -22,11 +22,12 @@ public class UnCamelDataListener extends AnalysisEventListener<UnCamelData> {
     public void invokeHeadMap(Map<Integer, String> headMap, AnalysisContext context) {
         log.debug("Head is:{}", JSON.toJSONString(headMap));
         Assert.assertEquals(headMap.get(0), "string1");
-        Assert.assertEquals(headMap.get(1), "String2");
-        Assert.assertEquals(headMap.get(2), "sTring3");
+        Assert.assertEquals(headMap.get(1), "string2");
+        Assert.assertEquals(headMap.get(2), "STring3");
         Assert.assertEquals(headMap.get(3), "STring4");
         Assert.assertEquals(headMap.get(4), "STRING5");
         Assert.assertEquals(headMap.get(5), "STRing6");
+
     }
 
     @Override

File: src/test/java/com/alibaba/easyexcel/test/demo/fill/FillTest.java
Patch:
@@ -233,6 +233,7 @@ private List<FillData> data() {
             list.add(fillData);
             fillData.setName("张三");
             fillData.setNumber(5.2);
+            fillData.setDate(new Date());
         }
         return list;
     }

File: src/test/java/com/alibaba/easyexcel/test/core/large/LargeDataTest.java
Patch:
@@ -85,7 +85,7 @@ public void t03ReadAndWriteCsv() {
     @Test
     public void t04Write() throws Exception {
         long start = System.currentTimeMillis();
-        ExcelWriter excelWriter = EasyExcel.write(fileWrite07).build();
+        ExcelWriter excelWriter = EasyExcel.write(fileWrite07, LargeData.class).build();
         WriteSheet writeSheet = EasyExcel.writerSheet().build();
         for (int j = 0; j < 100; j++) {
             excelWriter.write(data(), writeSheet);

File: src/main/java/com/alibaba/excel/write/executor/AbstractExcelWriteExecutor.java
Patch:
@@ -49,7 +49,7 @@ public AbstractExcelWriteExecutor(WriteContext writeContext) {
 
     protected WriteCellData<?> converterAndSet(WriteHolder currentWriteHolder, Class<?> clazz,
         CellDataTypeEnum targetType, Cell cell, Object value, ExcelContentProperty excelContentProperty, Head head,
-        Integer relativeRowIndex) {
+        Integer relativeRowIndex, int rowIndex, int columnIndex) {
         boolean needTrim = value != null && (value instanceof String && currentWriteHolder.globalConfiguration()
             .getAutoTrim());
         if (needTrim) {
@@ -72,8 +72,8 @@ protected WriteCellData<?> converterAndSet(WriteHolder currentWriteHolder, Class
         fillFormula(cell, cellData.getFormulaData());
 
         // Fill index
-        cellData.setRowIndex(cell.getRowIndex());
-        cellData.setColumnIndex(cell.getColumnIndex());
+        cellData.setRowIndex(rowIndex);
+        cellData.setColumnIndex(columnIndex);
 
         if (cellData.getType() == null) {
             cellData.setType(CellDataTypeEnum.EMPTY);

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -203,7 +203,7 @@ private void doFill(List<AnalysisCell> analysisCellList, Object oneRowData, Fill
 
                 WriteCellData<?> cellData = converterAndSet(writeSheetHolder,
                     FieldUtils.getFieldClass(dataMap, variable, value), null, cell, value, excelContentProperty, null,
-                    relativeRowIndex);
+                    relativeRowIndex, analysisCell.getRowIndex(), analysisCell.getColumnIndex());
                 cellData.setAnalysisCell(analysisCell);
 
                 // Restyle

File: src/main/java/com/alibaba/excel/converters/WriteConverterContext.java
Patch:
@@ -5,13 +5,15 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
+import lombok.NoArgsConstructor;
 
 /**
  * write converter context
  *
  * @author Jiaju Zhuang
  */
 @Data
+@NoArgsConstructor
 @AllArgsConstructor
 public class WriteConverterContext<T> {
 

File: src/main/java/com/alibaba/excel/util/NumberUtils.java
Patch:
@@ -58,7 +58,7 @@ public static WriteCellData<?> formatToCellDataString(Number num, ExcelContentPr
      * @return
      */
     public static WriteCellData<?> formatToCellData(Number num, ExcelContentProperty contentProperty) {
-        WriteCellData<?> cellData = new WriteCellData<>(BigDecimal.valueOf(num.doubleValue()));
+        WriteCellData<?> cellData = new WriteCellData<>(new BigDecimal(num.toString()));
         if (contentProperty != null && contentProperty.getNumberFormatProperty() != null
             && StringUtils.isNotBlank(contentProperty.getNumberFormatProperty().getFormat())) {
             WorkBookUtil.fillDataFormat(cellData, contentProperty.getNumberFormatProperty().getFormat(), null);
@@ -134,7 +134,7 @@ public static BigDecimal parseBigDecimal(String string, ExcelContentProperty con
         if (!hasFormat(contentProperty)) {
             return new BigDecimal(string);
         }
-        return BigDecimal.valueOf(parse(string, contentProperty).doubleValue());
+        return new BigDecimal(parse(string, contentProperty).toString());
     }
 
     /**

File: src/main/java/com/alibaba/excel/converters/WriteConverterContext.java
Patch:
@@ -5,13 +5,15 @@
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
+import lombok.NoArgsConstructor;
 
 /**
  * write converter context
  *
  * @author Jiaju Zhuang
  */
 @Data
+@NoArgsConstructor
 @AllArgsConstructor
 public class WriteConverterContext<T> {
 

File: src/main/java/com/alibaba/excel/util/NumberUtils.java
Patch:
@@ -58,7 +58,7 @@ public static WriteCellData<?> formatToCellDataString(Number num, ExcelContentPr
      * @return
      */
     public static WriteCellData<?> formatToCellData(Number num, ExcelContentProperty contentProperty) {
-        WriteCellData<?> cellData = new WriteCellData<>(BigDecimal.valueOf(num.doubleValue()));
+        WriteCellData<?> cellData = new WriteCellData<>(new BigDecimal(num.toString()));
         if (contentProperty != null && contentProperty.getNumberFormatProperty() != null
             && StringUtils.isNotBlank(contentProperty.getNumberFormatProperty().getFormat())) {
             WorkBookUtil.fillDataFormat(cellData, contentProperty.getNumberFormatProperty().getFormat(), null);
@@ -134,7 +134,7 @@ public static BigDecimal parseBigDecimal(String string, ExcelContentProperty con
         if (!hasFormat(contentProperty)) {
             return new BigDecimal(string);
         }
-        return BigDecimal.valueOf(parse(string, contentProperty).doubleValue());
+        return new BigDecimal(parse(string, contentProperty).toString());
     }
 
     /**

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -178,7 +178,7 @@ private void increaseRowIndex(Map<String, List<AnalysisCell>> templateAnalysisCa
 
     private void doFill(List<AnalysisCell> analysisCellList, Object oneRowData, FillConfig fillConfig,
         Integer relativeRowIndex) {
-        if (CollectionUtils.isEmpty(analysisCellList)) {
+        if (CollectionUtils.isEmpty(analysisCellList) || oneRowData == null) {
             return;
         }
         Map<?, ?> dataMap;

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -32,12 +32,11 @@ public class Lock2Test {
 
     @Test
     public void test() throws Exception {
-        assert 1 != 1;
         // File file = TestFileUtil.readUserHomeFile("test/test4.xlsx");
         //        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
         File file = new File("/Users/zhuangjiaju/IdeaProjects/easyexcel/src/test/resources/converter/converter07.xlsx");
 
-        List<Object> list = EasyExcel.read("/Users/zhuangjiaju/Downloads/olay (1).xlsx").sheet(0).doReadSync();
+        List<Object> list = EasyExcel.read("/Users/zhuangjiaju/Downloads/1 (2).xlsx").sheet(0).doReadSync();
         LOGGER.info("数据：{}", list.size());
         for (Object data : list) {
             LOGGER.info("返回数据：{}", CollectionUtils.size(data));

File: src/main/java/com/alibaba/excel/enums/CellDataTypeEnum.java
Patch:
@@ -45,7 +45,7 @@ public enum CellDataTypeEnum {
     static {
         TYPE_ROUTING_MAP.put("s", STRING);
         TYPE_ROUTING_MAP.put("str", DIRECT_STRING);
-        TYPE_ROUTING_MAP.put("inlineStr", STRING);
+        TYPE_ROUTING_MAP.put("inlineStr", DIRECT_STRING);
         TYPE_ROUTING_MAP.put("e", ERROR);
         TYPE_ROUTING_MAP.put("b", BOOLEAN);
         TYPE_ROUTING_MAP.put("n", NUMBER);

File: src/main/java/com/alibaba/excel/enums/CellDataTypeEnum.java
Patch:
@@ -45,7 +45,7 @@ public enum CellDataTypeEnum {
     static {
         TYPE_ROUTING_MAP.put("s", STRING);
         TYPE_ROUTING_MAP.put("str", DIRECT_STRING);
-        TYPE_ROUTING_MAP.put("inlineStr", STRING);
+        TYPE_ROUTING_MAP.put("inlineStr", DIRECT_STRING);
         TYPE_ROUTING_MAP.put("e", ERROR);
         TYPE_ROUTING_MAP.put("b", BOOLEAN);
         TYPE_ROUTING_MAP.put("n", NUMBER);

File: src/main/java/com/alibaba/excel/enums/CellDataTypeEnum.java
Patch:
@@ -51,7 +51,7 @@ public enum CellDataTypeEnum {
     static {
         TYPE_ROUTING_MAP.put("s", STRING);
         TYPE_ROUTING_MAP.put("str", DIRECT_STRING);
-        TYPE_ROUTING_MAP.put("inlineStr", STRING);
+        TYPE_ROUTING_MAP.put("inlineStr", DIRECT_STRING);
         TYPE_ROUTING_MAP.put("e", ERROR);
         TYPE_ROUTING_MAP.put("b", BOOLEAN);
         TYPE_ROUTING_MAP.put("n", NUMBER);

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -36,7 +36,7 @@ public class Lock2Test {
     public void test() throws Exception {
         File file = TestFileUtil.readUserHomeFile("test/test4.xlsx");
 
-        List<Object> list = EasyExcel.read("/Users/zhuangjiaju/Downloads/olay的副本.xlsx").sheet(0).doReadSync();
+        List<Object> list = EasyExcel.read("/Users/zhuangjiaju/Downloads/olay (1).xlsx").sheet(0).doReadSync();
         LOGGER.info("数据：{}", list.size());
         for (Object data : list) {
             LOGGER.info("返回数据：{}", CollectionUtils.size(data));

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteAddExecutor.java
Patch:
@@ -92,12 +92,14 @@ private void addBasicTypeToExcel(RowData oneRowData, Row row, int relativeRowInd
             }
             cellIndex = entry.getKey();
             Head head = entry.getValue();
-            doAddBasicTypeToExcel(oneRowData, head, row, relativeRowIndex, dataIndex++, cellIndex++);
+            doAddBasicTypeToExcel(oneRowData, head, row, relativeRowIndex, dataIndex++, cellIndex);
         }
         // Finish
         if (dataIndex >= oneRowData.size()) {
             return;
         }
+        // fix https://github.com/alibaba/easyexcel/issues/1702
+        // If there is data, it is written to the next cell
         if (dataIndex != 0) {
             cellIndex++;
         }

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteAddExecutor.java
Patch:
@@ -92,7 +92,7 @@ private void addBasicTypeToExcel(RowData oneRowData, Row row, int relativeRowInd
             }
             cellIndex = entry.getKey();
             Head head = entry.getValue();
-            doAddBasicTypeToExcel(oneRowData, head, row, relativeRowIndex, dataIndex++, cellIndex);
+            doAddBasicTypeToExcel(oneRowData, head, row, relativeRowIndex, dataIndex++, cellIndex++);
         }
         // Finish
         if (dataIndex >= oneRowData.size()) {

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteAddExecutor.java
Patch:
@@ -98,7 +98,7 @@ private void addBasicTypeToExcel(RowData oneRowData, Row row, int relativeRowInd
         if (dataIndex >= oneRowData.size()) {
             return;
         }
-        if (cellIndex != 0) {
+        if (dataIndex != 0) {
             cellIndex++;
         }
         int size = oneRowData.size() - dataIndex;

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -36,7 +36,7 @@ public class Lock2Test {
     public void test() throws Exception {
         File file = TestFileUtil.readUserHomeFile("test/test4.xlsx");
 
-        List<Object> list = EasyExcel.read(file).sheet(0).doReadSync();
+        List<Object> list = EasyExcel.read("/Users/zhuangjiaju/Downloads/olay的副本.xlsx").sheet(0).doReadSync();
         LOGGER.info("数据：{}", list.size());
         for (Object data : list) {
             LOGGER.info("返回数据：{}", CollectionUtils.size(data));

File: src/main/java/com/alibaba/excel/write/property/ExcelWriteHeadProperty.java
Patch:
@@ -142,7 +142,7 @@ public List<CellRange> headCellRangeList() {
                     continue;
                 }
                 alreadyRangeSet.add(i + "-" + j);
-                String headName = headNameList.get(j) == null ? "" : headNameList.get(j);
+                String headName = headNameList.get(j);
                 int lastCol = i;
                 int lastRow = j;
                 for (int k = i + 1; k < headList.size(); k++) {

File: src/main/java/com/alibaba/excel/write/property/ExcelWriteHeadProperty.java
Patch:
@@ -142,7 +142,7 @@ public List<CellRange> headCellRangeList() {
                     continue;
                 }
                 alreadyRangeSet.add(i + "-" + j);
-                String headName = headNameList.get(j);
+                String headName = headNameList.get(j) == null ? "" : headNameList.get(j);
                 int lastCol = i;
                 int lastRow = j;
                 for (int k = i + 1; k < headList.size(); k++) {

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/StringRecordHandler.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.analysis.v03.IgnorableXlsRecordHandler;
 import com.alibaba.excel.context.xls.XlsReadContext;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 import com.alibaba.excel.read.metadata.holder.xls.XlsReadSheetHolder;
 
 /**
@@ -23,7 +23,7 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
         // String for formula
         StringRecord srec = (StringRecord)record;
         XlsReadSheetHolder xlsReadSheetHolder = xlsReadContext.xlsReadSheetHolder();
-        CellData tempCellData = xlsReadSheetHolder.getTempCellData();
+        CellData<?>tempCellData = xlsReadSheetHolder.getTempCellData();
         if (tempCellData == null) {
             LOGGER.warn("String type formula but no value found.");
             return;

File: src/main/java/com/alibaba/excel/annotation/ExcelProperty.java
Patch:
@@ -23,7 +23,7 @@
      * <p>
      * write: It automatically merges when you have more than one head
      * <p>
-     * read: When you have multiple heads, take the first one
+     * read: When you have multiple heads, take the last one
      *
      * @return The name of the sheet header
      */
@@ -32,7 +32,7 @@
     /**
      * Index of column
      *
-     * Read or write it on the index of column,If it's equal to -1, it's sorted by Java class.
+     * Read or write it on the index of column, If it's equal to -1, it's sorted by Java class.
      *
      * priority: index &gt; order &gt; default sort
      *

File: src/main/java/com/alibaba/excel/annotation/write/style/ContentFontStyle.java
Patch:
@@ -52,7 +52,7 @@
     short color() default -1;
 
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/annotation/write/style/HeadFontStyle.java
Patch:
@@ -52,7 +52,7 @@
     short color() default -1;
 
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/event/AnalysisEventListener.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.Map;
 
 import com.alibaba.excel.context.AnalysisContext;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.excel.metadata.CellExtra;
+import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ConverterUtils;
 
@@ -16,7 +16,7 @@
 public abstract class AnalysisEventListener<T> implements ReadListener<T> {
 
     @Override
-    public void invokeHead(Map<Integer, CellData> headMap, AnalysisContext context) {
+    public void invokeHead(Map<Integer, ReadCellData<?>> headMap, AnalysisContext context) {
         invokeHeadMap(ConverterUtils.convertToStringMap(headMap, context), context);
     }
 

File: src/main/java/com/alibaba/excel/metadata/ConfigurationHolder.java
Patch:
@@ -32,5 +32,5 @@ public interface ConfigurationHolder extends Holder {
      *
      * @return Converter
      */
-    Map<String, Converter> converterMap();
+    Map<String, Converter<?>> converterMap();
 }

File: src/main/java/com/alibaba/excel/metadata/property/FontProperty.java
Patch:
@@ -40,7 +40,7 @@ public class FontProperty {
      */
     private Short color;
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/read/metadata/holder/ReadHolder.java
Patch:
@@ -18,7 +18,7 @@ public interface ReadHolder extends ConfigurationHolder {
      *
      * @return Current {@link ReadListener}
      */
-    List<ReadListener> readListenerList();
+    List<ReadListener<?>> readListenerList();
 
     /**
      * What {@link ExcelReadHeadProperty} does the currently operated cell need to execute

File: src/main/java/com/alibaba/excel/read/metadata/property/ExcelReadHeadProperty.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class ExcelReadHeadProperty extends ExcelHeadProperty {
 
-    public ExcelReadHeadProperty(Holder holder, Class headClazz, List<List<String>> head, Boolean convertAllFiled) {
-        super(holder, headClazz, head, convertAllFiled);
+    public ExcelReadHeadProperty(Holder holder, Class headClazz, List<List<String>> head) {
+        super(holder, headClazz, head);
     }
 }

File: src/main/java/com/alibaba/excel/write/builder/AbstractExcelWriterParameterBuilder.java
Patch:
@@ -81,7 +81,7 @@ public T excludeColumnIndexes(Collection<Integer> excludeColumnIndexes) {
      * Ignore the custom columns.
      */
     public T excludeColumnFiledNames(Collection<String> excludeColumnFiledNames) {
-        parameter().setExcludeColumnFiledNames(excludeColumnFiledNames);
+        parameter().setExcludeColumnFieldNames(excludeColumnFiledNames);
         return self();
     }
 
@@ -97,7 +97,7 @@ public T includeColumnIndexes(Collection<Integer> includeColumnIndexes) {
      * Only output the custom columns.
      */
     public T includeColumnFiledNames(Collection<String> includeColumnFiledNames) {
-        parameter().setIncludeColumnFiledNames(includeColumnFiledNames);
+        parameter().setIncludeColumnFieldNames(includeColumnFiledNames);
         return self();
     }
 

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterSheetBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -54,7 +54,7 @@ public WriteSheet build() {
         return writeSheet;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterTableBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -47,7 +47,7 @@ public WriteTable build() {
         return writeTable;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet().table()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/handler/AbstractSheetWriteHandler.java
Patch:
@@ -7,7 +7,9 @@
  * Abstract sheet write handler
  *
  * @author Jiaju Zhuang
+ * @deprecated Please use it directly {@link SheetWriteHandler}
  **/
+@Deprecated
 public abstract class AbstractSheetWriteHandler implements SheetWriteHandler {
     @Override
     public void beforeSheetCreate(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder) {

File: src/main/java/com/alibaba/excel/write/handler/AbstractWorkbookWriteHandler.java
Patch:
@@ -6,7 +6,9 @@
  * Abstract workbook write handler
  *
  * @author Jiaju Zhuang
+ * @deprecated Please use it directly {@link WorkbookWriteHandler}
  **/
+@Deprecated
 public abstract class AbstractWorkbookWriteHandler implements WorkbookWriteHandler {
 
     @Override

File: src/main/java/com/alibaba/excel/write/merge/LoopMergeStrategy.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.alibaba.excel.metadata.property.LoopMergeProperty;
 import com.alibaba.excel.write.handler.AbstractRowWriteHandler;
+import com.alibaba.excel.write.handler.RowWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteTableHolder;
 
@@ -13,7 +14,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class LoopMergeStrategy extends AbstractRowWriteHandler {
+public class LoopMergeStrategy implements RowWriteHandler {
     /**
      * Each row
      */

File: src/main/java/com/alibaba/excel/write/merge/OnceAbsoluteMergeStrategy.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.alibaba.excel.metadata.property.OnceAbsoluteMergeProperty;
 import com.alibaba.excel.write.handler.AbstractSheetWriteHandler;
+import com.alibaba.excel.write.handler.SheetWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;
 
@@ -12,7 +13,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class OnceAbsoluteMergeStrategy extends AbstractSheetWriteHandler {
+public class OnceAbsoluteMergeStrategy implements SheetWriteHandler {
     /**
      * First row
      */

File: src/test/java/com/alibaba/easyexcel/test/core/annotation/AnnotationData.java
Patch:
@@ -9,7 +9,6 @@
 import com.alibaba.excel.annotation.write.style.ColumnWidth;
 import com.alibaba.excel.annotation.write.style.ContentRowHeight;
 import com.alibaba.excel.annotation.write.style.HeadRowHeight;
-import com.alibaba.excel.converters.doubleconverter.DoubleStringConverter;
 
 import lombok.Data;
 
@@ -24,7 +23,7 @@ public class AnnotationData {
     @ExcelProperty("日期")
     @DateTimeFormat("yyyy年MM月dd日HH时mm分ss秒")
     private Date date;
-    @ExcelProperty(value = "数字", converter = DoubleStringConverter.class)
+    @ExcelProperty(value = "数字")
     @NumberFormat("#.##%")
     private Double number;
     @ExcelIgnore

File: src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterReadData.java
Patch:
@@ -4,15 +4,15 @@
 import java.util.Date;
 
 import com.alibaba.excel.annotation.ExcelProperty;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.ReadCellData;
 
 import lombok.Data;
 
 /**
  * @author Jiaju Zhuang
  */
 @Data
-public class ConverterData {
+public class ConverterReadData {
     @ExcelProperty("日期")
     private Date date;
     @ExcelProperty("布尔")
@@ -34,5 +34,5 @@ public class ConverterData {
     @ExcelProperty("字符串")
     private String string;
     @ExcelProperty("自定义")
-    private CellData cellData;
+    private ReadCellData<?> cellData;
 }

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -28,7 +28,7 @@
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 
 import org.apache.commons.collections4.CollectionUtils;
-import org.apache.poi.hssf.usermodel.PoiHssfUtils;
+import org.apache.poi.hssf.usermodel.PoiUtils;
 import org.apache.poi.ss.usermodel.Cell;
 import org.apache.poi.ss.usermodel.CellStyle;
 import org.apache.poi.ss.usermodel.CellType;
@@ -354,7 +354,7 @@ private void checkRowHeight(AnalysisCell analysisCell, FillConfig fillConfig, bo
             return;
         }
         // fix https://github.com/alibaba/easyexcel/issues/1869
-        if (isOriginalCell && PoiHssfUtils.customHeight(row)) {
+        if (isOriginalCell && PoiUtils.customHeight(row)) {
             collectionRowHeightCache.put(currentUniqueDataFlag, row.getHeight());
             return;
         }

File: src/main/java/org/apache/poi/hssf/usermodel/PoiUtils.java
Patch:
@@ -10,7 +10,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class PoiHssfUtils {
+public class PoiUtils {
 
     /**
      * Whether to customize the height

File: src/main/java/com/alibaba/excel/write/style/HorizontalCellStyleStrategy.java
Patch:
@@ -60,9 +60,10 @@ protected void setHeadCellStyle(Cell cell, Head head, Integer relativeRowIndex)
 
     @Override
     protected void setContentCellStyle(Cell cell, Head head, Integer relativeRowIndex) {
-        if (contentCellStyleList == null || contentCellStyleList.isEmpty()) {
+        if (contentCellStyleList == null || contentCellStyleList.isEmpty() || relativeRowIndex == null) {
             return;
         }
+
         cell.setCellStyle(contentCellStyleList.get(relativeRowIndex % contentCellStyleList.size()));
     }
 

File: src/main/java/com/alibaba/excel/write/property/ExcelWriteHeadProperty.java
Patch:
@@ -146,7 +146,8 @@ public List<CellRange> headCellRangeList() {
                 int lastCol = i;
                 int lastRow = j;
                 for (int k = i + 1; k < headList.size(); k++) {
-                    if (headList.get(k).getHeadNameList().get(j).equals(headName)) {
+                    boolean flag = (j - 1 >= 0) && !headList.get(k).getHeadNameList().get(j - 1).equals(headName);
+                    if (headList.get(k).getHeadNameList().get(j).equals(headName) && flag) {
                         alreadyRangeSet.add(k + "-" + j);
                         lastCol = k;
                     } else {

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -367,6 +367,9 @@ private List<AnalysisCell> readTemplateData(Map<String, List<AnalysisCell>> anal
             return analysisCellList;
         }
         Sheet sheet = writeContext.writeSheetHolder().getCachedSheet();
+        if (sheet.getLastRowNum() == 0) {
+            throw new ExcelCommonException(sheet.getSheetName() + " not exists in the excel to be written");
+        }
         Map<String, Set<Integer>> firstRowCache = MapUtils.newHashMapWithExpectedSize(8);
         for (int i = 0; i <= sheet.getLastRowNum(); i++) {
             Row row = sheet.getRow(i);

File: src/main/java/com/alibaba/excel/annotation/ExcelProperty.java
Patch:
@@ -32,7 +32,7 @@
     /**
      * Index of column
      *
-     * Read or write it on the index of column,If it's equal to -1, it's sorted by Java class.
+     * Read or write it on the index of column, If it's equal to -1, it's sorted by Java class.
      *
      * priority: index &gt; order &gt; default sort
      *

File: src/main/java/com/alibaba/excel/annotation/write/style/ContentFontStyle.java
Patch:
@@ -52,7 +52,7 @@
     short color() default -1;
 
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/annotation/write/style/HeadFontStyle.java
Patch:
@@ -52,7 +52,7 @@
     short color() default -1;
 
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/metadata/property/FontProperty.java
Patch:
@@ -40,7 +40,7 @@ public class FontProperty {
      */
     private Short color;
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/read/metadata/ReadWorkbook.java
Patch:
@@ -30,19 +30,19 @@ public class ReadWorkbook extends ReadBasicParameter {
     /**
      * Read InputStream
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private InputStream inputStream;
     /**
      * Read file
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private File file;
     /**
      * Mandatory use 'inputStream' .Default is false.
      * <p>
-     * if false,Will transfer 'inputStream' to temporary files to improve efficiency
+     * if false, Will transfer 'inputStream' to temporary files to improve efficiency
      */
     private Boolean mandatoryUseInputStream;
     /**

File: src/main/java/com/alibaba/excel/read/metadata/holder/ReadWorkbookHolder.java
Patch:
@@ -38,19 +38,19 @@ public class ReadWorkbookHolder extends AbstractReadHolder {
     /**
      * Read InputStream
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private InputStream inputStream;
     /**
      * Read file
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private File file;
     /**
      * Mandatory use 'inputStream' .Default is false.
      * <p>
-     * if false,Will transfer 'inputStream' to temporary files to improve efficiency
+     * if false, Will transfer 'inputStream' to temporary files to improve efficiency
      */
     private Boolean mandatoryUseInputStream;
     /**

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterBuilder.java
Patch:
@@ -48,7 +48,7 @@ public ExcelWriterBuilder password(String password) {
     }
 
     /**
-     * Write excel in memory. Default false,the cache file is created and finally written to excel.
+     * Write excel in memory. Default false, the cache file is created and finally written to excel.
      * <p>
      * Comment and RichTextString are only supported in memory mode.
      */

File: src/main/java/com/alibaba/excel/write/executor/AbstractExcelWriteExecutor.java
Patch:
@@ -316,12 +316,12 @@ private WriteCellData<?> doConvert(WriteHolder currentWriteHolder, Class<?> claz
         } catch (Exception e) {
             throw new ExcelDataConvertException(cell.getRow().getRowNum(), cell.getColumnIndex(),
                 new WriteCellData<>(CellDataTypeEnum.EMPTY), excelContentProperty,
-                "Convert data:" + value + " error,at row:" + cell.getRow().getRowNum(), e);
+                "Convert data:" + value + " error, at row:" + cell.getRow().getRowNum(), e);
         }
         if (cellData == null || cellData.getType() == null) {
             throw new ExcelDataConvertException(cell.getRow().getRowNum(), cell.getColumnIndex(),
                 new WriteCellData<>(CellDataTypeEnum.EMPTY), excelContentProperty,
-                "Convert data:" + value + " return null,at row:" + cell.getRow().getRowNum());
+                "Convert data:" + value + " return null, at row:" + cell.getRow().getRowNum());
         }
         return cellData;
     }

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteAddExecutor.java
Patch:
@@ -50,7 +50,7 @@ public void add(Collection<?> data) {
         if (writeSheetHolder.isNew() && !writeSheetHolder.getExcelWriteHeadProperty().hasHead()) {
             newRowIndex += writeContext.currentWriteHolder().relativeHeadRowIndex();
         }
-        // BeanMap is out of order,so use sortedAllFiledMap
+        // BeanMap is out of order, so use sortedAllFiledMap
         Map<Integer, Field> sortedAllFiledMap = new TreeMap<>();
         int relativeRowIndex = 0;
         for (Object oneRowData : data) {

File: src/main/java/com/alibaba/excel/write/metadata/holder/WriteSheetHolder.java
Patch:
@@ -96,12 +96,12 @@ public WriteSheetHolder(WriteSheet writeSheet, WriteWorkbookHolder writeWorkbook
     }
 
     /**
-     * Get the last line of index,you have to make sure that the data is written next
+     * Get the last line of index, you have to make sure that the data is written next
      *
      * @return
      */
     public int getNewRowIndexAndStartDoWrite() {
-        // 'getLastRowNum' doesn't matter if it has one or zero,is's zero
+        // 'getLastRowNum' doesn't matter if it has one or zero, it's zero
         int newRowIndex = 0;
         switch (writeLastRowTypeEnum) {
             case TEMPLATE_EMPTY:

File: src/main/java/com/alibaba/excel/write/metadata/style/WriteFont.java
Patch:
@@ -39,7 +39,7 @@ public class WriteFont {
      */
     private Short color;
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/write/style/column/AbstractHeadColumnWidthStyleStrategy.java
Patch:
@@ -33,7 +33,7 @@ protected void setColumnWidth(WriteSheetHolder writeSheetHolder, List<WriteCellD
      * Returns the column width corresponding to each column head.
      *
      * <p>
-     * if return null,ignore
+     * if return null, ignore
      *
      * @param head
      *            Nullable.

File: src/main/java/com/alibaba/excel/annotation/ExcelProperty.java
Patch:
@@ -32,7 +32,7 @@
     /**
      * Index of column
      *
-     * Read or write it on the index of column,If it's equal to -1, it's sorted by Java class.
+     * Read or write it on the index of column, If it's equal to -1, it's sorted by Java class.
      *
      * priority: index &gt; order &gt; default sort
      *

File: src/main/java/com/alibaba/excel/annotation/write/style/ContentFontStyle.java
Patch:
@@ -52,7 +52,7 @@
     short color() default -1;
 
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/annotation/write/style/HeadFontStyle.java
Patch:
@@ -52,7 +52,7 @@
     short color() default -1;
 
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/metadata/property/FontProperty.java
Patch:
@@ -40,7 +40,7 @@ public class FontProperty {
      */
     private Short color;
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/read/metadata/ReadWorkbook.java
Patch:
@@ -27,19 +27,19 @@ public class ReadWorkbook extends ReadBasicParameter {
     /**
      * Read InputStream
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private InputStream inputStream;
     /**
      * Read file
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private File file;
     /**
      * Mandatory use 'inputStream' .Default is false.
      * <p>
-     * if false,Will transfer 'inputStream' to temporary files to improve efficiency
+     * if false, Will transfer 'inputStream' to temporary files to improve efficiency
      */
     private Boolean mandatoryUseInputStream;
     /**

File: src/main/java/com/alibaba/excel/read/metadata/holder/ReadWorkbookHolder.java
Patch:
@@ -33,19 +33,19 @@ public class ReadWorkbookHolder extends AbstractReadHolder {
     /**
      * Read InputStream
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private InputStream inputStream;
     /**
      * Read file
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private File file;
     /**
      * Mandatory use 'inputStream' .Default is false.
      * <p>
-     * if false,Will transfer 'inputStream' to temporary files to improve efficiency
+     * if false, Will transfer 'inputStream' to temporary files to improve efficiency
      */
     private Boolean mandatoryUseInputStream;
     /**

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterBuilder.java
Patch:
@@ -49,7 +49,7 @@ public ExcelWriterBuilder password(String password) {
     }
 
     /**
-     * Write excel in memory. Default false,the cache file is created and finally written to excel.
+     * Write excel in memory. Default false, the cache file is created and finally written to excel.
      * <p>
      * Comment and RichTextString are only supported in memory mode.
      */

File: src/main/java/com/alibaba/excel/write/executor/AbstractExcelWriteExecutor.java
Patch:
@@ -117,12 +117,12 @@ private CellData doConvert(WriteHolder currentWriteHolder, Class clazz, Cell cel
         } catch (Exception e) {
             throw new ExcelDataConvertException(cell.getRow().getRowNum(), cell.getColumnIndex(),
                 new CellData(CellDataTypeEnum.EMPTY), excelContentProperty,
-                "Convert data:" + value + " error,at row:" + cell.getRow().getRowNum(), e);
+                "Convert data:" + value + " error, at row:" + cell.getRow().getRowNum(), e);
         }
         if (cellData == null || cellData.getType() == null) {
             throw new ExcelDataConvertException(cell.getRow().getRowNum(), cell.getColumnIndex(),
                 new CellData(CellDataTypeEnum.EMPTY), excelContentProperty,
-                "Convert data:" + value + " return null,at row:" + cell.getRow().getRowNum());
+                "Convert data:" + value + " return null, at row:" + cell.getRow().getRowNum());
         }
         return cellData;
     }

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteAddExecutor.java
Patch:
@@ -48,7 +48,7 @@ public void add(List data) {
         if (writeSheetHolder.isNew() && !writeSheetHolder.getExcelWriteHeadProperty().hasHead()) {
             newRowIndex += writeContext.currentWriteHolder().relativeHeadRowIndex();
         }
-        // BeanMap is out of order,so use sortedAllFiledMap
+        // BeanMap is out of order, so use sortedAllFiledMap
         Map<Integer, Field> sortedAllFiledMap = new TreeMap<Integer, Field>();
         int relativeRowIndex = 0;
         for (Object oneRowData : data) {

File: src/main/java/com/alibaba/excel/write/metadata/holder/WriteSheetHolder.java
Patch:
@@ -148,12 +148,12 @@ public void setWriteLastRowTypeEnum(WriteLastRowTypeEnum writeLastRowTypeEnum) {
     }
 
     /**
-     * Get the last line of index,you have to make sure that the data is written next
+     * Get the last line of index, you have to make sure that the data is written next
      *
      * @return
      */
     public int getNewRowIndexAndStartDoWrite() {
-        // 'getLastRowNum' doesn't matter if it has one or zero,is's zero
+        // 'getLastRowNum' doesn't matter if it has one or zero, it's zero
         int newRowIndex = 0;
         switch (writeLastRowTypeEnum) {
             case TEMPLATE_EMPTY:

File: src/main/java/com/alibaba/excel/write/metadata/style/WriteFont.java
Patch:
@@ -37,7 +37,7 @@ public class WriteFont {
      */
     private Short color;
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/write/style/column/AbstractHeadColumnWidthStyleStrategy.java
Patch:
@@ -33,7 +33,7 @@ protected void setColumnWidth(WriteSheetHolder writeSheetHolder, List<CellData>
      * Returns the column width corresponding to each column head.
      *
      * <p>
-     * if return null,ignore
+     * if return null, ignore
      *
      * @param head
      *            Nullable.

File: src/test/java/com/alibaba/easyexcel/test/core/compatibility/CompatibilityDataTest.java
Patch:
@@ -58,7 +58,7 @@ private void readAndWrite(File file) throws Exception {
         generateParam.setOutputStream(out);
         generateParam.setClazz(null);
         ExcelWriter writer = new ExcelWriter(generateParam);
-        // sheet1 width,string head,string data
+        // sheet1 width, string head, string data
         Sheet sheet1 = new Sheet(1, 3);
         sheet1.setSheetName("第一个sheet");
         Map columnWidth = new HashMap();
@@ -68,7 +68,7 @@ private void readAndWrite(File file) throws Exception {
         sheet1.setHead(head());
         writer.write1(listData(), sheet1);
 
-        // sheet2 style,class head
+        // sheet2 style, class head
         Sheet sheet2 = new Sheet(2, 3, CompatibilityData.class, "第二个sheet", null);
         sheet2.setStartRow(5);
         sheet2.setTableStyle(style());

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -399,7 +399,7 @@ private List<AnalysisCell> readTemplateData(Map<String, List<AnalysisCell>> anal
      * @return Returns the data that the cell needs to replace
      */
     private String prepareData(Cell cell, int rowIndex, int columnIndex, Map<String, Set<Integer>> firstRowCache) {
-        if (!CellType.STRING.equals(cell.getCellTypeEnum())) {
+        if (!CellType.STRING.equals(cell.getCellType())) {
             return null;
         }
         String value = cell.getStringCellValue();

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -5,9 +5,9 @@
 import java.util.Date;
 import java.util.List;
 
-import org.apache.poi.hssf.util.CellReference;
 import org.apache.poi.ss.usermodel.FillPatternType;
 import org.apache.poi.ss.usermodel.IndexedColors;
+import org.apache.poi.ss.util.CellReference;
 import org.junit.Ignore;
 import org.junit.Test;
 import org.slf4j.Logger;

File: src/test/java/com/alibaba/easyexcel/test/temp/dataformat/DataFormatter1.java
Patch:
@@ -968,12 +968,12 @@ public String formatCellValue(Cell cell, FormulaEvaluator evaluator, Conditional
             return "";
         }
 
-        CellType cellType = cell.getCellTypeEnum();
+        CellType cellType = cell.getCellType();
         if (cellType == CellType.FORMULA) {
             if (evaluator == null) {
                 return cell.getCellFormula();
             }
-            cellType = evaluator.evaluateFormulaCellEnum(cell);
+            cellType = evaluator.evaluateFormulaCell(cell);
         }
         switch (cellType) {
             case NUMERIC:

File: src/test/java/com/alibaba/easyexcel/test/temp/dataformat/DataFormatter1.java
Patch:
@@ -973,7 +973,7 @@ public String formatCellValue(Cell cell, FormulaEvaluator evaluator, Conditional
             if (evaluator == null) {
                 return cell.getCellFormula();
             }
-            cellType = evaluator.evaluateFormulaCellEnum(cell);
+            cellType = evaluator.evaluateFormulaCell(cell);
         }
         switch (cellType) {
             case NUMERIC:

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/StringRecordHandler.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.analysis.v03.IgnorableXlsRecordHandler;
 import com.alibaba.excel.context.xls.XlsReadContext;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 import com.alibaba.excel.read.metadata.holder.xls.XlsReadSheetHolder;
 
 /**
@@ -23,7 +23,7 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
         // String for formula
         StringRecord srec = (StringRecord)record;
         XlsReadSheetHolder xlsReadSheetHolder = xlsReadContext.xlsReadSheetHolder();
-        CellData tempCellData = xlsReadSheetHolder.getTempCellData();
+        CellData<?>tempCellData = xlsReadSheetHolder.getTempCellData();
         if (tempCellData == null) {
             LOGGER.warn("String type formula but no value found.");
             return;

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/AbstractCellValueTagHandler.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.alibaba.excel.context.xlsx.XlsxReadContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.metadata.holder.xlsx.XlsxReadSheetHolder;
 import com.alibaba.excel.util.BooleanUtils;
 import com.alibaba.excel.util.StringUtils;
@@ -19,7 +19,7 @@ public abstract class AbstractCellValueTagHandler extends AbstractXlsxTagHandler
     @Override
     public void endElement(XlsxReadContext xlsxReadContext, String name) {
         XlsxReadSheetHolder xlsxReadSheetHolder = xlsxReadContext.xlsxReadSheetHolder();
-        CellData tempCellData = xlsxReadSheetHolder.getTempCellData();
+        ReadCellData<?> tempCellData = xlsxReadSheetHolder.getTempCellData();
         StringBuilder tempData = xlsxReadSheetHolder.getTempData();
         String tempDataString = tempData.toString();
         CellDataTypeEnum oldType = tempCellData.getType();
@@ -54,7 +54,7 @@ public void endElement(XlsxReadContext xlsxReadContext, String name) {
 
         if (tempCellData.getStringValue() != null
             && xlsxReadContext.currentReadHolder().globalConfiguration().getAutoTrim()) {
-            tempCellData.setStringValue(tempCellData.getStringValue());
+            tempCellData.setStringValue(tempCellData.getStringValue().trim());
         }
 
         tempCellData.checkEmpty();

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/CellValueTagHandler.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.excel.context.xlsx.XlsxReadContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 import com.alibaba.excel.util.StringUtils;
 
 /**

File: src/main/java/com/alibaba/excel/annotation/ExcelProperty.java
Patch:
@@ -23,7 +23,7 @@
      * <p>
      * write: It automatically merges when you have more than one head
      * <p>
-     * read: When you have multiple heads, take the first one
+     * read: When you have multiple heads, take the last one
      *
      * @return The name of the sheet header
      */

File: src/main/java/com/alibaba/excel/event/AnalysisEventListener.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.Map;
 
 import com.alibaba.excel.context.AnalysisContext;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.excel.metadata.CellExtra;
+import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ConverterUtils;
 
@@ -16,7 +16,7 @@
 public abstract class AnalysisEventListener<T> implements ReadListener<T> {
 
     @Override
-    public void invokeHead(Map<Integer, CellData> headMap, AnalysisContext context) {
+    public void invokeHead(Map<Integer, ReadCellData<?>> headMap, AnalysisContext context) {
         invokeHeadMap(ConverterUtils.convertToStringMap(headMap, context), context);
     }
 

File: src/main/java/com/alibaba/excel/metadata/ConfigurationHolder.java
Patch:
@@ -32,5 +32,5 @@ public interface ConfigurationHolder extends Holder {
      *
      * @return Converter
      */
-    Map<String, Converter> converterMap();
+    Map<String, Converter<?>> converterMap();
 }

File: src/main/java/com/alibaba/excel/read/metadata/holder/ReadHolder.java
Patch:
@@ -18,7 +18,7 @@ public interface ReadHolder extends ConfigurationHolder {
      *
      * @return Current {@link ReadListener}
      */
-    List<ReadListener> readListenerList();
+    List<ReadListener<?>> readListenerList();
 
     /**
      * What {@link ExcelReadHeadProperty} does the currently operated cell need to execute

File: src/main/java/com/alibaba/excel/read/metadata/property/ExcelReadHeadProperty.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class ExcelReadHeadProperty extends ExcelHeadProperty {
 
-    public ExcelReadHeadProperty(Holder holder, Class headClazz, List<List<String>> head, Boolean convertAllFiled) {
-        super(holder, headClazz, head, convertAllFiled);
+    public ExcelReadHeadProperty(Holder holder, Class headClazz, List<List<String>> head) {
+        super(holder, headClazz, head);
     }
 }

File: src/main/java/com/alibaba/excel/write/builder/AbstractExcelWriterParameterBuilder.java
Patch:
@@ -81,7 +81,7 @@ public T excludeColumnIndexes(Collection<Integer> excludeColumnIndexes) {
      * Ignore the custom columns.
      */
     public T excludeColumnFiledNames(Collection<String> excludeColumnFiledNames) {
-        parameter().setExcludeColumnFiledNames(excludeColumnFiledNames);
+        parameter().setExcludeColumnFieldNames(excludeColumnFiledNames);
         return self();
     }
 
@@ -97,7 +97,7 @@ public T includeColumnIndexes(Collection<Integer> includeColumnIndexes) {
      * Only output the custom columns.
      */
     public T includeColumnFiledNames(Collection<String> includeColumnFiledNames) {
-        parameter().setIncludeColumnFiledNames(includeColumnFiledNames);
+        parameter().setIncludeColumnFieldNames(includeColumnFiledNames);
         return self();
     }
 

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterSheetBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -54,7 +54,7 @@ public WriteSheet build() {
         return writeSheet;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterTableBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -47,7 +47,7 @@ public WriteTable build() {
         return writeTable;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet().table()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/handler/AbstractSheetWriteHandler.java
Patch:
@@ -7,7 +7,9 @@
  * Abstract sheet write handler
  *
  * @author Jiaju Zhuang
+ * @deprecated Please use it directly {@link SheetWriteHandler}
  **/
+@Deprecated
 public abstract class AbstractSheetWriteHandler implements SheetWriteHandler {
     @Override
     public void beforeSheetCreate(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder) {

File: src/main/java/com/alibaba/excel/write/handler/AbstractWorkbookWriteHandler.java
Patch:
@@ -6,7 +6,9 @@
  * Abstract workbook write handler
  *
  * @author Jiaju Zhuang
+ * @deprecated Please use it directly {@link WorkbookWriteHandler}
  **/
+@Deprecated
 public abstract class AbstractWorkbookWriteHandler implements WorkbookWriteHandler {
 
     @Override

File: src/main/java/com/alibaba/excel/write/merge/LoopMergeStrategy.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.alibaba.excel.metadata.property.LoopMergeProperty;
 import com.alibaba.excel.write.handler.AbstractRowWriteHandler;
+import com.alibaba.excel.write.handler.RowWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteTableHolder;
 
@@ -13,7 +14,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class LoopMergeStrategy extends AbstractRowWriteHandler {
+public class LoopMergeStrategy implements RowWriteHandler {
     /**
      * Each row
      */

File: src/main/java/com/alibaba/excel/write/merge/OnceAbsoluteMergeStrategy.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.alibaba.excel.metadata.property.OnceAbsoluteMergeProperty;
 import com.alibaba.excel.write.handler.AbstractSheetWriteHandler;
+import com.alibaba.excel.write.handler.SheetWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;
 
@@ -12,7 +13,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class OnceAbsoluteMergeStrategy extends AbstractSheetWriteHandler {
+public class OnceAbsoluteMergeStrategy implements SheetWriteHandler {
     /**
      * First row
      */

File: src/test/java/com/alibaba/easyexcel/test/core/annotation/AnnotationData.java
Patch:
@@ -9,7 +9,6 @@
 import com.alibaba.excel.annotation.write.style.ColumnWidth;
 import com.alibaba.excel.annotation.write.style.ContentRowHeight;
 import com.alibaba.excel.annotation.write.style.HeadRowHeight;
-import com.alibaba.excel.converters.doubleconverter.DoubleStringConverter;
 
 import lombok.Data;
 
@@ -24,7 +23,7 @@ public class AnnotationData {
     @ExcelProperty("日期")
     @DateTimeFormat("yyyy年MM月dd日HH时mm分ss秒")
     private Date date;
-    @ExcelProperty(value = "数字", converter = DoubleStringConverter.class)
+    @ExcelProperty(value = "数字")
     @NumberFormat("#.##%")
     private Double number;
     @ExcelIgnore

File: src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterReadData.java
Patch:
@@ -4,15 +4,15 @@
 import java.util.Date;
 
 import com.alibaba.excel.annotation.ExcelProperty;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.ReadCellData;
 
 import lombok.Data;
 
 /**
  * @author Jiaju Zhuang
  */
 @Data
-public class ConverterData {
+public class ConverterReadData {
     @ExcelProperty("日期")
     private Date date;
     @ExcelProperty("布尔")
@@ -34,5 +34,5 @@ public class ConverterData {
     @ExcelProperty("字符串")
     private String string;
     @ExcelProperty("自定义")
-    private CellData cellData;
+    private ReadCellData<?> cellData;
 }

File: src/test/java/com/alibaba/easyexcel/test/demo/read/CellDataDemoHeadDataListener.java
Patch:
@@ -2,14 +2,12 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.fastjson.JSON;
 
 /**

File: src/test/java/com/alibaba/easyexcel/test/demo/read/CellDataReadDemoData.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Date;
 
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 
 import lombok.Data;
 

File: src/test/java/com/alibaba/easyexcel/test/demo/write/CommentWriteHandler.java
Patch:
@@ -8,6 +8,7 @@
 import org.apache.poi.xssf.usermodel.XSSFRichTextString;
 
 import com.alibaba.excel.write.handler.AbstractRowWriteHandler;
+import com.alibaba.excel.write.handler.RowWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteTableHolder;
 
@@ -16,7 +17,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class CommentWriteHandler extends AbstractRowWriteHandler {
+public class CommentWriteHandler implements RowWriteHandler {
 
     @Override
     public void afterRowDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,

File: src/test/java/com/alibaba/easyexcel/test/demo/write/ImageDataWithAnnotation.java
Patch:
@@ -14,12 +14,11 @@
 /**
  * 图片导出类
  *
- * @author Jiaju Zhuang
  */
 @Data
 @ContentRowHeight(100)
 @ColumnWidth(100 / 8)
-public class ImageData {
+public class ImageDataWithAnnotation {
     private File file;
     private InputStream inputStream;
     /**

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/StringRecordHandler.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.analysis.v03.IgnorableXlsRecordHandler;
 import com.alibaba.excel.context.xls.XlsReadContext;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 import com.alibaba.excel.read.metadata.holder.xls.XlsReadSheetHolder;
 
 /**
@@ -23,7 +23,7 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
         // String for formula
         StringRecord srec = (StringRecord)record;
         XlsReadSheetHolder xlsReadSheetHolder = xlsReadContext.xlsReadSheetHolder();
-        CellData tempCellData = xlsReadSheetHolder.getTempCellData();
+        CellData<?>tempCellData = xlsReadSheetHolder.getTempCellData();
         if (tempCellData == null) {
             LOGGER.warn("String type formula but no value found.");
             return;

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/AbstractCellValueTagHandler.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.alibaba.excel.context.xlsx.XlsxReadContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.metadata.holder.xlsx.XlsxReadSheetHolder;
 import com.alibaba.excel.util.BooleanUtils;
 import com.alibaba.excel.util.StringUtils;
@@ -19,7 +19,7 @@ public abstract class AbstractCellValueTagHandler extends AbstractXlsxTagHandler
     @Override
     public void endElement(XlsxReadContext xlsxReadContext, String name) {
         XlsxReadSheetHolder xlsxReadSheetHolder = xlsxReadContext.xlsxReadSheetHolder();
-        CellData tempCellData = xlsxReadSheetHolder.getTempCellData();
+        ReadCellData<?> tempCellData = xlsxReadSheetHolder.getTempCellData();
         StringBuilder tempData = xlsxReadSheetHolder.getTempData();
         String tempDataString = tempData.toString();
         CellDataTypeEnum oldType = tempCellData.getType();
@@ -54,7 +54,7 @@ public void endElement(XlsxReadContext xlsxReadContext, String name) {
 
         if (tempCellData.getStringValue() != null
             && xlsxReadContext.currentReadHolder().globalConfiguration().getAutoTrim()) {
-            tempCellData.setStringValue(tempCellData.getStringValue());
+            tempCellData.setStringValue(tempCellData.getStringValue().trim());
         }
 
         tempCellData.checkEmpty();

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/CellValueTagHandler.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.excel.context.xlsx.XlsxReadContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 import com.alibaba.excel.util.StringUtils;
 
 /**

File: src/main/java/com/alibaba/excel/annotation/ExcelProperty.java
Patch:
@@ -23,7 +23,7 @@
      * <p>
      * write: It automatically merges when you have more than one head
      * <p>
-     * read: When you have multiple heads, take the first one
+     * read: When you have multiple heads, take the last one
      *
      * @return The name of the sheet header
      */

File: src/main/java/com/alibaba/excel/event/AnalysisEventListener.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.Map;
 
 import com.alibaba.excel.context.AnalysisContext;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.excel.metadata.CellExtra;
+import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ConverterUtils;
 
@@ -16,7 +16,7 @@
 public abstract class AnalysisEventListener<T> implements ReadListener<T> {
 
     @Override
-    public void invokeHead(Map<Integer, CellData> headMap, AnalysisContext context) {
+    public void invokeHead(Map<Integer, ReadCellData<?>> headMap, AnalysisContext context) {
         invokeHeadMap(ConverterUtils.convertToStringMap(headMap, context), context);
     }
 

File: src/main/java/com/alibaba/excel/metadata/ConfigurationHolder.java
Patch:
@@ -32,5 +32,5 @@ public interface ConfigurationHolder extends Holder {
      *
      * @return Converter
      */
-    Map<String, Converter> converterMap();
+    Map<String, Converter<?>> converterMap();
 }

File: src/main/java/com/alibaba/excel/read/metadata/holder/ReadHolder.java
Patch:
@@ -18,7 +18,7 @@ public interface ReadHolder extends ConfigurationHolder {
      *
      * @return Current {@link ReadListener}
      */
-    List<ReadListener> readListenerList();
+    List<ReadListener<?>> readListenerList();
 
     /**
      * What {@link ExcelReadHeadProperty} does the currently operated cell need to execute

File: src/main/java/com/alibaba/excel/read/metadata/property/ExcelReadHeadProperty.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class ExcelReadHeadProperty extends ExcelHeadProperty {
 
-    public ExcelReadHeadProperty(Holder holder, Class headClazz, List<List<String>> head, Boolean convertAllFiled) {
-        super(holder, headClazz, head, convertAllFiled);
+    public ExcelReadHeadProperty(Holder holder, Class headClazz, List<List<String>> head) {
+        super(holder, headClazz, head);
     }
 }

File: src/main/java/com/alibaba/excel/write/builder/AbstractExcelWriterParameterBuilder.java
Patch:
@@ -81,7 +81,7 @@ public T excludeColumnIndexes(Collection<Integer> excludeColumnIndexes) {
      * Ignore the custom columns.
      */
     public T excludeColumnFiledNames(Collection<String> excludeColumnFiledNames) {
-        parameter().setExcludeColumnFiledNames(excludeColumnFiledNames);
+        parameter().setExcludeColumnFieldNames(excludeColumnFiledNames);
         return self();
     }
 
@@ -97,7 +97,7 @@ public T includeColumnIndexes(Collection<Integer> includeColumnIndexes) {
      * Only output the custom columns.
      */
     public T includeColumnFiledNames(Collection<String> includeColumnFiledNames) {
-        parameter().setIncludeColumnFiledNames(includeColumnFiledNames);
+        parameter().setIncludeColumnFieldNames(includeColumnFiledNames);
         return self();
     }
 

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterSheetBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -54,7 +54,7 @@ public WriteSheet build() {
         return writeSheet;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterTableBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -47,7 +47,7 @@ public WriteTable build() {
         return writeTable;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet().table()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/handler/AbstractSheetWriteHandler.java
Patch:
@@ -7,7 +7,9 @@
  * Abstract sheet write handler
  *
  * @author Jiaju Zhuang
+ * @deprecated Please use it directly {@link SheetWriteHandler}
  **/
+@Deprecated
 public abstract class AbstractSheetWriteHandler implements SheetWriteHandler {
     @Override
     public void beforeSheetCreate(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder) {

File: src/main/java/com/alibaba/excel/write/handler/AbstractWorkbookWriteHandler.java
Patch:
@@ -6,7 +6,9 @@
  * Abstract workbook write handler
  *
  * @author Jiaju Zhuang
+ * @deprecated Please use it directly {@link WorkbookWriteHandler}
  **/
+@Deprecated
 public abstract class AbstractWorkbookWriteHandler implements WorkbookWriteHandler {
 
     @Override

File: src/main/java/com/alibaba/excel/write/merge/LoopMergeStrategy.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.alibaba.excel.metadata.property.LoopMergeProperty;
 import com.alibaba.excel.write.handler.AbstractRowWriteHandler;
+import com.alibaba.excel.write.handler.RowWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteTableHolder;
 
@@ -13,7 +14,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class LoopMergeStrategy extends AbstractRowWriteHandler {
+public class LoopMergeStrategy implements RowWriteHandler {
     /**
      * Each row
      */

File: src/main/java/com/alibaba/excel/write/merge/OnceAbsoluteMergeStrategy.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.alibaba.excel.metadata.property.OnceAbsoluteMergeProperty;
 import com.alibaba.excel.write.handler.AbstractSheetWriteHandler;
+import com.alibaba.excel.write.handler.SheetWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;
 
@@ -12,7 +13,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class OnceAbsoluteMergeStrategy extends AbstractSheetWriteHandler {
+public class OnceAbsoluteMergeStrategy implements SheetWriteHandler {
     /**
      * First row
      */

File: src/test/java/com/alibaba/easyexcel/test/core/annotation/AnnotationData.java
Patch:
@@ -9,7 +9,6 @@
 import com.alibaba.excel.annotation.write.style.ColumnWidth;
 import com.alibaba.excel.annotation.write.style.ContentRowHeight;
 import com.alibaba.excel.annotation.write.style.HeadRowHeight;
-import com.alibaba.excel.converters.doubleconverter.DoubleStringConverter;
 
 import lombok.Data;
 
@@ -24,7 +23,7 @@ public class AnnotationData {
     @ExcelProperty("日期")
     @DateTimeFormat("yyyy年MM月dd日HH时mm分ss秒")
     private Date date;
-    @ExcelProperty(value = "数字", converter = DoubleStringConverter.class)
+    @ExcelProperty(value = "数字")
     @NumberFormat("#.##%")
     private Double number;
     @ExcelIgnore

File: src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterReadData.java
Patch:
@@ -4,15 +4,15 @@
 import java.util.Date;
 
 import com.alibaba.excel.annotation.ExcelProperty;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.ReadCellData;
 
 import lombok.Data;
 
 /**
  * @author Jiaju Zhuang
  */
 @Data
-public class ConverterData {
+public class ConverterReadData {
     @ExcelProperty("日期")
     private Date date;
     @ExcelProperty("布尔")
@@ -34,5 +34,5 @@ public class ConverterData {
     @ExcelProperty("字符串")
     private String string;
     @ExcelProperty("自定义")
-    private CellData cellData;
+    private ReadCellData<?> cellData;
 }

File: src/test/java/com/alibaba/easyexcel/test/demo/read/CellDataDemoHeadDataListener.java
Patch:
@@ -2,14 +2,12 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.fastjson.JSON;
 
 /**

File: src/test/java/com/alibaba/easyexcel/test/demo/read/CellDataReadDemoData.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Date;
 
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 
 import lombok.Data;
 

File: src/test/java/com/alibaba/easyexcel/test/demo/write/CommentWriteHandler.java
Patch:
@@ -8,6 +8,7 @@
 import org.apache.poi.xssf.usermodel.XSSFRichTextString;
 
 import com.alibaba.excel.write.handler.AbstractRowWriteHandler;
+import com.alibaba.excel.write.handler.RowWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteTableHolder;
 
@@ -16,7 +17,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class CommentWriteHandler extends AbstractRowWriteHandler {
+public class CommentWriteHandler implements RowWriteHandler {
 
     @Override
     public void afterRowDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,

File: src/test/java/com/alibaba/easyexcel/test/demo/write/ImageDataWithAnnotation.java
Patch:
@@ -14,12 +14,11 @@
 /**
  * 图片导出类
  *
- * @author Jiaju Zhuang
  */
 @Data
 @ContentRowHeight(100)
 @ColumnWidth(100 / 8)
-public class ImageData {
+public class ImageDataWithAnnotation {
     private File file;
     private InputStream inputStream;
     /**

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/StringRecordHandler.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.analysis.v03.IgnorableXlsRecordHandler;
 import com.alibaba.excel.context.xls.XlsReadContext;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 import com.alibaba.excel.read.metadata.holder.xls.XlsReadSheetHolder;
 
 /**
@@ -23,7 +23,7 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
         // String for formula
         StringRecord srec = (StringRecord)record;
         XlsReadSheetHolder xlsReadSheetHolder = xlsReadContext.xlsReadSheetHolder();
-        CellData tempCellData = xlsReadSheetHolder.getTempCellData();
+        CellData<?>tempCellData = xlsReadSheetHolder.getTempCellData();
         if (tempCellData == null) {
             LOGGER.warn("String type formula but no value found.");
             return;

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/AbstractCellValueTagHandler.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.alibaba.excel.context.xlsx.XlsxReadContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.metadata.holder.xlsx.XlsxReadSheetHolder;
 import com.alibaba.excel.util.BooleanUtils;
 import com.alibaba.excel.util.StringUtils;
@@ -19,7 +19,7 @@ public abstract class AbstractCellValueTagHandler extends AbstractXlsxTagHandler
     @Override
     public void endElement(XlsxReadContext xlsxReadContext, String name) {
         XlsxReadSheetHolder xlsxReadSheetHolder = xlsxReadContext.xlsxReadSheetHolder();
-        CellData tempCellData = xlsxReadSheetHolder.getTempCellData();
+        ReadCellData<?> tempCellData = xlsxReadSheetHolder.getTempCellData();
         StringBuilder tempData = xlsxReadSheetHolder.getTempData();
         String tempDataString = tempData.toString();
         CellDataTypeEnum oldType = tempCellData.getType();
@@ -54,7 +54,7 @@ public void endElement(XlsxReadContext xlsxReadContext, String name) {
 
         if (tempCellData.getStringValue() != null
             && xlsxReadContext.currentReadHolder().globalConfiguration().getAutoTrim()) {
-            tempCellData.setStringValue(tempCellData.getStringValue());
+            tempCellData.setStringValue(tempCellData.getStringValue().trim());
         }
 
         tempCellData.checkEmpty();

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/CellValueTagHandler.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.excel.context.xlsx.XlsxReadContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 import com.alibaba.excel.util.StringUtils;
 
 /**

File: src/main/java/com/alibaba/excel/annotation/ExcelProperty.java
Patch:
@@ -23,7 +23,7 @@
      * <p>
      * write: It automatically merges when you have more than one head
      * <p>
-     * read: When you have multiple heads, take the first one
+     * read: When you have multiple heads, take the last one
      *
      * @return The name of the sheet header
      */

File: src/main/java/com/alibaba/excel/event/AnalysisEventListener.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.Map;
 
 import com.alibaba.excel.context.AnalysisContext;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.excel.metadata.CellExtra;
+import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ConverterUtils;
 
@@ -16,7 +16,7 @@
 public abstract class AnalysisEventListener<T> implements ReadListener<T> {
 
     @Override
-    public void invokeHead(Map<Integer, CellData> headMap, AnalysisContext context) {
+    public void invokeHead(Map<Integer, ReadCellData<?>> headMap, AnalysisContext context) {
         invokeHeadMap(ConverterUtils.convertToStringMap(headMap, context), context);
     }
 

File: src/main/java/com/alibaba/excel/metadata/ConfigurationHolder.java
Patch:
@@ -32,5 +32,5 @@ public interface ConfigurationHolder extends Holder {
      *
      * @return Converter
      */
-    Map<String, Converter> converterMap();
+    Map<String, Converter<?>> converterMap();
 }

File: src/main/java/com/alibaba/excel/read/metadata/holder/ReadHolder.java
Patch:
@@ -18,7 +18,7 @@ public interface ReadHolder extends ConfigurationHolder {
      *
      * @return Current {@link ReadListener}
      */
-    List<ReadListener> readListenerList();
+    List<ReadListener<?>> readListenerList();
 
     /**
      * What {@link ExcelReadHeadProperty} does the currently operated cell need to execute

File: src/main/java/com/alibaba/excel/read/metadata/property/ExcelReadHeadProperty.java
Patch:
@@ -12,7 +12,7 @@
  */
 public class ExcelReadHeadProperty extends ExcelHeadProperty {
 
-    public ExcelReadHeadProperty(Holder holder, Class headClazz, List<List<String>> head, Boolean convertAllFiled) {
-        super(holder, headClazz, head, convertAllFiled);
+    public ExcelReadHeadProperty(Holder holder, Class headClazz, List<List<String>> head) {
+        super(holder, headClazz, head);
     }
 }

File: src/main/java/com/alibaba/excel/write/builder/AbstractExcelWriterParameterBuilder.java
Patch:
@@ -81,7 +81,7 @@ public T excludeColumnIndexes(Collection<Integer> excludeColumnIndexes) {
      * Ignore the custom columns.
      */
     public T excludeColumnFiledNames(Collection<String> excludeColumnFiledNames) {
-        parameter().setExcludeColumnFiledNames(excludeColumnFiledNames);
+        parameter().setExcludeColumnFieldNames(excludeColumnFiledNames);
         return self();
     }
 
@@ -97,7 +97,7 @@ public T includeColumnIndexes(Collection<Integer> includeColumnIndexes) {
      * Only output the custom columns.
      */
     public T includeColumnFiledNames(Collection<String> includeColumnFiledNames) {
-        parameter().setIncludeColumnFiledNames(includeColumnFiledNames);
+        parameter().setIncludeColumnFieldNames(includeColumnFiledNames);
         return self();
     }
 

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterSheetBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -54,7 +54,7 @@ public WriteSheet build() {
         return writeSheet;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterTableBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -47,7 +47,7 @@ public WriteTable build() {
         return writeTable;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet().table()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/handler/AbstractSheetWriteHandler.java
Patch:
@@ -7,7 +7,9 @@
  * Abstract sheet write handler
  *
  * @author Jiaju Zhuang
+ * @deprecated Please use it directly {@link SheetWriteHandler}
  **/
+@Deprecated
 public abstract class AbstractSheetWriteHandler implements SheetWriteHandler {
     @Override
     public void beforeSheetCreate(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder) {

File: src/main/java/com/alibaba/excel/write/handler/AbstractWorkbookWriteHandler.java
Patch:
@@ -6,7 +6,9 @@
  * Abstract workbook write handler
  *
  * @author Jiaju Zhuang
+ * @deprecated Please use it directly {@link WorkbookWriteHandler}
  **/
+@Deprecated
 public abstract class AbstractWorkbookWriteHandler implements WorkbookWriteHandler {
 
     @Override

File: src/main/java/com/alibaba/excel/write/merge/LoopMergeStrategy.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.alibaba.excel.metadata.property.LoopMergeProperty;
 import com.alibaba.excel.write.handler.AbstractRowWriteHandler;
+import com.alibaba.excel.write.handler.RowWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteTableHolder;
 
@@ -13,7 +14,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class LoopMergeStrategy extends AbstractRowWriteHandler {
+public class LoopMergeStrategy implements RowWriteHandler {
     /**
      * Each row
      */

File: src/main/java/com/alibaba/excel/write/merge/OnceAbsoluteMergeStrategy.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.alibaba.excel.metadata.property.OnceAbsoluteMergeProperty;
 import com.alibaba.excel.write.handler.AbstractSheetWriteHandler;
+import com.alibaba.excel.write.handler.SheetWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;
 
@@ -12,7 +13,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class OnceAbsoluteMergeStrategy extends AbstractSheetWriteHandler {
+public class OnceAbsoluteMergeStrategy implements SheetWriteHandler {
     /**
      * First row
      */

File: src/test/java/com/alibaba/easyexcel/test/core/annotation/AnnotationData.java
Patch:
@@ -9,7 +9,6 @@
 import com.alibaba.excel.annotation.write.style.ColumnWidth;
 import com.alibaba.excel.annotation.write.style.ContentRowHeight;
 import com.alibaba.excel.annotation.write.style.HeadRowHeight;
-import com.alibaba.excel.converters.doubleconverter.DoubleStringConverter;
 
 import lombok.Data;
 
@@ -24,7 +23,7 @@ public class AnnotationData {
     @ExcelProperty("日期")
     @DateTimeFormat("yyyy年MM月dd日HH时mm分ss秒")
     private Date date;
-    @ExcelProperty(value = "数字", converter = DoubleStringConverter.class)
+    @ExcelProperty(value = "数字")
     @NumberFormat("#.##%")
     private Double number;
     @ExcelIgnore

File: src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterReadData.java
Patch:
@@ -4,15 +4,15 @@
 import java.util.Date;
 
 import com.alibaba.excel.annotation.ExcelProperty;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.ReadCellData;
 
 import lombok.Data;
 
 /**
  * @author Jiaju Zhuang
  */
 @Data
-public class ConverterData {
+public class ConverterReadData {
     @ExcelProperty("日期")
     private Date date;
     @ExcelProperty("布尔")
@@ -34,5 +34,5 @@ public class ConverterData {
     @ExcelProperty("字符串")
     private String string;
     @ExcelProperty("自定义")
-    private CellData cellData;
+    private ReadCellData<?> cellData;
 }

File: src/test/java/com/alibaba/easyexcel/test/demo/read/CellDataDemoHeadDataListener.java
Patch:
@@ -2,14 +2,12 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.fastjson.JSON;
 
 /**

File: src/test/java/com/alibaba/easyexcel/test/demo/read/CellDataReadDemoData.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Date;
 
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 
 import lombok.Data;
 

File: src/test/java/com/alibaba/easyexcel/test/demo/write/CommentWriteHandler.java
Patch:
@@ -8,6 +8,7 @@
 import org.apache.poi.xssf.usermodel.XSSFRichTextString;
 
 import com.alibaba.excel.write.handler.AbstractRowWriteHandler;
+import com.alibaba.excel.write.handler.RowWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteTableHolder;
 
@@ -16,7 +17,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class CommentWriteHandler extends AbstractRowWriteHandler {
+public class CommentWriteHandler implements RowWriteHandler {
 
     @Override
     public void afterRowDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,

File: src/test/java/com/alibaba/easyexcel/test/demo/write/ImageDataWithAnnotation.java
Patch:
@@ -14,12 +14,11 @@
 /**
  * 图片导出类
  *
- * @author Jiaju Zhuang
  */
 @Data
 @ContentRowHeight(100)
 @ColumnWidth(100 / 8)
-public class ImageData {
+public class ImageDataWithAnnotation {
     private File file;
     private InputStream inputStream;
     /**

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -34,7 +34,7 @@ public class Lock2Test {
     @Test
     public void test() throws Exception {
 //        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
-        File file = new File("/Users/zhuangjiaju/test/签到金模板-0507-v5.xlsx");
+        File file = new File("/Users/zhuangjiaju/Downloads/1.xlsx");
 
         List<Object> list = EasyExcel.read(file).sheet(0).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());

File: src/test/java/com/alibaba/easyexcel/test/temp/LockDataListener.java
Patch:
@@ -2,15 +2,13 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.easyexcel.test.demo.read.DemoDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.fastjson.JSON;
 
 /**

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/StringRecordHandler.java
Patch:
@@ -7,7 +7,7 @@
 
 import com.alibaba.excel.analysis.v03.IgnorableXlsRecordHandler;
 import com.alibaba.excel.context.xls.XlsReadContext;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 import com.alibaba.excel.read.metadata.holder.xls.XlsReadSheetHolder;
 
 /**
@@ -23,7 +23,7 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
         // String for formula
         StringRecord srec = (StringRecord)record;
         XlsReadSheetHolder xlsReadSheetHolder = xlsReadContext.xlsReadSheetHolder();
-        CellData tempCellData = xlsReadSheetHolder.getTempCellData();
+        CellData<?>tempCellData = xlsReadSheetHolder.getTempCellData();
         if (tempCellData == null) {
             LOGGER.warn("String type formula but no value found.");
             return;

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/AbstractCellValueTagHandler.java
Patch:
@@ -4,7 +4,7 @@
 
 import com.alibaba.excel.context.xlsx.XlsxReadContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.metadata.holder.xlsx.XlsxReadSheetHolder;
 import com.alibaba.excel.util.BooleanUtils;
 import com.alibaba.excel.util.StringUtils;
@@ -19,7 +19,7 @@ public abstract class AbstractCellValueTagHandler extends AbstractXlsxTagHandler
     @Override
     public void endElement(XlsxReadContext xlsxReadContext, String name) {
         XlsxReadSheetHolder xlsxReadSheetHolder = xlsxReadContext.xlsxReadSheetHolder();
-        CellData tempCellData = xlsxReadSheetHolder.getTempCellData();
+        ReadCellData<?> tempCellData = xlsxReadSheetHolder.getTempCellData();
         StringBuilder tempData = xlsxReadSheetHolder.getTempData();
         String tempDataString = tempData.toString();
         CellDataTypeEnum oldType = tempCellData.getType();
@@ -54,7 +54,7 @@ public void endElement(XlsxReadContext xlsxReadContext, String name) {
 
         if (tempCellData.getStringValue() != null
             && xlsxReadContext.currentReadHolder().globalConfiguration().getAutoTrim()) {
-            tempCellData.setStringValue(tempCellData.getStringValue());
+            tempCellData.setStringValue(tempCellData.getStringValue().trim());
         }
 
         tempCellData.checkEmpty();

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/CellValueTagHandler.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.alibaba.excel.context.xlsx.XlsxReadContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 import com.alibaba.excel.util.StringUtils;
 
 /**

File: src/main/java/com/alibaba/excel/annotation/ExcelProperty.java
Patch:
@@ -23,7 +23,7 @@
      * <p>
      * write: It automatically merges when you have more than one head
      * <p>
-     * read: When you have multiple heads, take the first one
+     * read: When you have multiple heads, take the last one
      *
      * @return The name of the sheet header
      */

File: src/main/java/com/alibaba/excel/event/AnalysisEventListener.java
Patch:
@@ -3,8 +3,8 @@
 import java.util.Map;
 
 import com.alibaba.excel.context.AnalysisContext;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.excel.metadata.CellExtra;
+import com.alibaba.excel.metadata.data.ReadCellData;
 import com.alibaba.excel.read.listener.ReadListener;
 import com.alibaba.excel.util.ConverterUtils;
 
@@ -16,7 +16,7 @@
 public abstract class AnalysisEventListener<T> implements ReadListener<T> {
 
     @Override
-    public void invokeHead(Map<Integer, CellData> headMap, AnalysisContext context) {
+    public void invokeHead(Map<Integer, ReadCellData<?>> headMap, AnalysisContext context) {
         invokeHeadMap(ConverterUtils.convertToStringMap(headMap, context), context);
     }
 

File: src/main/java/com/alibaba/excel/metadata/ConfigurationHolder.java
Patch:
@@ -32,5 +32,5 @@ public interface ConfigurationHolder extends Holder {
      *
      * @return Converter
      */
-    Map<String, Converter> converterMap();
+    Map<String, Converter<?>> converterMap();
 }

File: src/main/java/com/alibaba/excel/read/metadata/holder/ReadHolder.java
Patch:
@@ -18,7 +18,7 @@ public interface ReadHolder extends ConfigurationHolder {
      *
      * @return Current {@link ReadListener}
      */
-    List<ReadListener> readListenerList();
+    List<ReadListener<?>> readListenerList();
 
     /**
      * What {@link ExcelReadHeadProperty} does the currently operated cell need to execute

File: src/main/java/com/alibaba/excel/write/builder/AbstractExcelWriterParameterBuilder.java
Patch:
@@ -81,7 +81,7 @@ public T excludeColumnIndexes(Collection<Integer> excludeColumnIndexes) {
      * Ignore the custom columns.
      */
     public T excludeColumnFiledNames(Collection<String> excludeColumnFiledNames) {
-        parameter().setExcludeColumnFiledNames(excludeColumnFiledNames);
+        parameter().setExcludeColumnFieldNames(excludeColumnFiledNames);
         return self();
     }
 
@@ -97,7 +97,7 @@ public T includeColumnIndexes(Collection<Integer> includeColumnIndexes) {
      * Only output the custom columns.
      */
     public T includeColumnFiledNames(Collection<String> includeColumnFiledNames) {
-        parameter().setIncludeColumnFiledNames(includeColumnFiledNames);
+        parameter().setIncludeColumnFieldNames(includeColumnFiledNames);
         return self();
     }
 

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterSheetBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -54,7 +54,7 @@ public WriteSheet build() {
         return writeSheet;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterTableBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -47,7 +47,7 @@ public WriteTable build() {
         return writeTable;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet().table()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/handler/AbstractSheetWriteHandler.java
Patch:
@@ -7,7 +7,9 @@
  * Abstract sheet write handler
  *
  * @author Jiaju Zhuang
+ * @deprecated Please use it directly {@link SheetWriteHandler}
  **/
+@Deprecated
 public abstract class AbstractSheetWriteHandler implements SheetWriteHandler {
     @Override
     public void beforeSheetCreate(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder) {

File: src/main/java/com/alibaba/excel/write/handler/AbstractWorkbookWriteHandler.java
Patch:
@@ -6,7 +6,9 @@
  * Abstract workbook write handler
  *
  * @author Jiaju Zhuang
+ * @deprecated Please use it directly {@link WorkbookWriteHandler}
  **/
+@Deprecated
 public abstract class AbstractWorkbookWriteHandler implements WorkbookWriteHandler {
 
     @Override

File: src/main/java/com/alibaba/excel/write/merge/LoopMergeStrategy.java
Patch:
@@ -5,6 +5,7 @@
 
 import com.alibaba.excel.metadata.property.LoopMergeProperty;
 import com.alibaba.excel.write.handler.AbstractRowWriteHandler;
+import com.alibaba.excel.write.handler.RowWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteTableHolder;
 
@@ -13,7 +14,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class LoopMergeStrategy extends AbstractRowWriteHandler {
+public class LoopMergeStrategy implements RowWriteHandler {
     /**
      * Each row
      */

File: src/main/java/com/alibaba/excel/write/merge/OnceAbsoluteMergeStrategy.java
Patch:
@@ -4,6 +4,7 @@
 
 import com.alibaba.excel.metadata.property.OnceAbsoluteMergeProperty;
 import com.alibaba.excel.write.handler.AbstractSheetWriteHandler;
+import com.alibaba.excel.write.handler.SheetWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteWorkbookHolder;
 
@@ -12,7 +13,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class OnceAbsoluteMergeStrategy extends AbstractSheetWriteHandler {
+public class OnceAbsoluteMergeStrategy implements SheetWriteHandler {
     /**
      * First row
      */

File: src/test/java/com/alibaba/easyexcel/test/core/annotation/AnnotationData.java
Patch:
@@ -9,7 +9,6 @@
 import com.alibaba.excel.annotation.write.style.ColumnWidth;
 import com.alibaba.excel.annotation.write.style.ContentRowHeight;
 import com.alibaba.excel.annotation.write.style.HeadRowHeight;
-import com.alibaba.excel.converters.doubleconverter.DoubleStringConverter;
 
 import lombok.Data;
 
@@ -24,7 +23,7 @@ public class AnnotationData {
     @ExcelProperty("日期")
     @DateTimeFormat("yyyy年MM月dd日HH时mm分ss秒")
     private Date date;
-    @ExcelProperty(value = "数字", converter = DoubleStringConverter.class)
+    @ExcelProperty(value = "数字")
     @NumberFormat("#.##%")
     private Double number;
     @ExcelIgnore

File: src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterReadData.java
Patch:
@@ -4,15 +4,15 @@
 import java.util.Date;
 
 import com.alibaba.excel.annotation.ExcelProperty;
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.ReadCellData;
 
 import lombok.Data;
 
 /**
  * @author Jiaju Zhuang
  */
 @Data
-public class ConverterData {
+public class ConverterReadData {
     @ExcelProperty("日期")
     private Date date;
     @ExcelProperty("布尔")
@@ -34,5 +34,5 @@ public class ConverterData {
     @ExcelProperty("字符串")
     private String string;
     @ExcelProperty("自定义")
-    private CellData cellData;
+    private ReadCellData<?> cellData;
 }

File: src/test/java/com/alibaba/easyexcel/test/demo/read/CellDataDemoHeadDataListener.java
Patch:
@@ -2,14 +2,12 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.fastjson.JSON;
 
 /**

File: src/test/java/com/alibaba/easyexcel/test/demo/read/CellDataReadDemoData.java
Patch:
@@ -2,7 +2,7 @@
 
 import java.util.Date;
 
-import com.alibaba.excel.metadata.CellData;
+import com.alibaba.excel.metadata.data.CellData;
 
 import lombok.Data;
 

File: src/test/java/com/alibaba/easyexcel/test/demo/write/CommentWriteHandler.java
Patch:
@@ -8,6 +8,7 @@
 import org.apache.poi.xssf.usermodel.XSSFRichTextString;
 
 import com.alibaba.excel.write.handler.AbstractRowWriteHandler;
+import com.alibaba.excel.write.handler.RowWriteHandler;
 import com.alibaba.excel.write.metadata.holder.WriteSheetHolder;
 import com.alibaba.excel.write.metadata.holder.WriteTableHolder;
 
@@ -16,7 +17,7 @@
  *
  * @author Jiaju Zhuang
  */
-public class CommentWriteHandler extends AbstractRowWriteHandler {
+public class CommentWriteHandler implements RowWriteHandler {
 
     @Override
     public void afterRowDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row,

File: src/test/java/com/alibaba/easyexcel/test/demo/write/ImageDataWithAnnotation.java
Patch:
@@ -14,12 +14,11 @@
 /**
  * 图片导出类
  *
- * @author Jiaju Zhuang
  */
 @Data
 @ContentRowHeight(100)
 @ColumnWidth(100 / 8)
-public class ImageData {
+public class ImageDataWithAnnotation {
     private File file;
     private InputStream inputStream;
     /**

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -34,7 +34,7 @@ public class Lock2Test {
     @Test
     public void test() throws Exception {
 //        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
-        File file = new File("/Users/zhuangjiaju/test/签到金模板-0507-v5.xlsx");
+        File file = new File("/Users/zhuangjiaju/Downloads/1.xlsx");
 
         List<Object> list = EasyExcel.read(file).sheet(0).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());

File: src/test/java/com/alibaba/easyexcel/test/temp/LockDataListener.java
Patch:
@@ -2,15 +2,13 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.easyexcel.test.demo.read.DemoDataListener;
 import com.alibaba.excel.context.AnalysisContext;
 import com.alibaba.excel.event.AnalysisEventListener;
-import com.alibaba.excel.metadata.CellData;
 import com.alibaba.fastjson.JSON;
 
 /**

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -469,7 +469,7 @@ private String prepareData(Cell cell, int rowIndex, int columnIndex, Map<String,
             lastPrepareDataIndex = suffixIndex + 1;
         }
 
-        if (variableCount >= 1) {
+        if (variableCount > 1) {
             analysisCell.setOnlyOneVariable(Boolean.FALSE);
         }
 

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -455,7 +455,7 @@ private String prepareData(Cell cell, int rowIndex, int columnIndex, Map<String,
                 analysisCell.setCellType(WriteTemplateAnalysisCellTypeEnum.COLLECTION);
             }
             analysisCell.getVariableList().add(variable);
-            if (lastPrepareDataIndex == prefixIndex) {
+            if (lastPrepareDataIndex == prefixIndex && 0 == prefixIndex) {
                 analysisCell.getPrepareDataList().add(StringUtils.EMPTY);
             } else {
                 String data = convertPrepareData(value.substring(lastPrepareDataIndex, prefixIndex));

File: src/main/java/com/alibaba/excel/annotation/ExcelProperty.java
Patch:
@@ -32,7 +32,7 @@
     /**
      * Index of column
      *
-     * Read or write it on the index of column,If it's equal to -1, it's sorted by Java class.
+     * Read or write it on the index of column, If it's equal to -1, it's sorted by Java class.
      *
      * priority: index &gt; order &gt; default sort
      *

File: src/main/java/com/alibaba/excel/annotation/write/style/ContentFontStyle.java
Patch:
@@ -52,7 +52,7 @@
     short color() default -1;
 
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/annotation/write/style/HeadFontStyle.java
Patch:
@@ -52,7 +52,7 @@
     short color() default -1;
 
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/metadata/property/FontProperty.java
Patch:
@@ -40,7 +40,7 @@ public class FontProperty {
      */
     private Short color;
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/read/metadata/ReadWorkbook.java
Patch:
@@ -27,19 +27,19 @@ public class ReadWorkbook extends ReadBasicParameter {
     /**
      * Read InputStream
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private InputStream inputStream;
     /**
      * Read file
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private File file;
     /**
      * Mandatory use 'inputStream' .Default is false.
      * <p>
-     * if false,Will transfer 'inputStream' to temporary files to improve efficiency
+     * if false, Will transfer 'inputStream' to temporary files to improve efficiency
      */
     private Boolean mandatoryUseInputStream;
     /**

File: src/main/java/com/alibaba/excel/read/metadata/holder/ReadWorkbookHolder.java
Patch:
@@ -33,19 +33,19 @@ public class ReadWorkbookHolder extends AbstractReadHolder {
     /**
      * Read InputStream
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private InputStream inputStream;
     /**
      * Read file
      * <p>
-     * If 'inputStream' and 'file' all not empty,file first
+     * If 'inputStream' and 'file' all not empty, file first
      */
     private File file;
     /**
      * Mandatory use 'inputStream' .Default is false.
      * <p>
-     * if false,Will transfer 'inputStream' to temporary files to improve efficiency
+     * if false, Will transfer 'inputStream' to temporary files to improve efficiency
      */
     private Boolean mandatoryUseInputStream;
     /**

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterBuilder.java
Patch:
@@ -49,7 +49,7 @@ public ExcelWriterBuilder password(String password) {
     }
 
     /**
-     * Write excel in memory. Default false,the cache file is created and finally written to excel.
+     * Write excel in memory. Default false, the cache file is created and finally written to excel.
      * <p>
      * Comment and RichTextString are only supported in memory mode.
      */

File: src/main/java/com/alibaba/excel/write/executor/AbstractExcelWriteExecutor.java
Patch:
@@ -117,12 +117,12 @@ private CellData doConvert(WriteHolder currentWriteHolder, Class clazz, Cell cel
         } catch (Exception e) {
             throw new ExcelDataConvertException(cell.getRow().getRowNum(), cell.getColumnIndex(),
                 new CellData(CellDataTypeEnum.EMPTY), excelContentProperty,
-                "Convert data:" + value + " error,at row:" + cell.getRow().getRowNum(), e);
+                "Convert data:" + value + " error, at row:" + cell.getRow().getRowNum(), e);
         }
         if (cellData == null || cellData.getType() == null) {
             throw new ExcelDataConvertException(cell.getRow().getRowNum(), cell.getColumnIndex(),
                 new CellData(CellDataTypeEnum.EMPTY), excelContentProperty,
-                "Convert data:" + value + " return null,at row:" + cell.getRow().getRowNum());
+                "Convert data:" + value + " return null, at row:" + cell.getRow().getRowNum());
         }
         return cellData;
     }

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteAddExecutor.java
Patch:
@@ -48,7 +48,7 @@ public void add(List data) {
         if (writeSheetHolder.isNew() && !writeSheetHolder.getExcelWriteHeadProperty().hasHead()) {
             newRowIndex += writeContext.currentWriteHolder().relativeHeadRowIndex();
         }
-        // BeanMap is out of order,so use sortedAllFiledMap
+        // BeanMap is out of order, so use sortedAllFiledMap
         Map<Integer, Field> sortedAllFiledMap = new TreeMap<Integer, Field>();
         int relativeRowIndex = 0;
         for (Object oneRowData : data) {

File: src/main/java/com/alibaba/excel/write/metadata/holder/WriteSheetHolder.java
Patch:
@@ -148,12 +148,12 @@ public void setWriteLastRowTypeEnum(WriteLastRowTypeEnum writeLastRowTypeEnum) {
     }
 
     /**
-     * Get the last line of index,you have to make sure that the data is written next
+     * Get the last line of index, you have to make sure that the data is written next
      *
      * @return
      */
     public int getNewRowIndexAndStartDoWrite() {
-        // 'getLastRowNum' doesn't matter if it has one or zero,is's zero
+        // 'getLastRowNum' doesn't matter if it has one or zero, it's zero
         int newRowIndex = 0;
         switch (writeLastRowTypeEnum) {
             case TEMPLATE_EMPTY:

File: src/main/java/com/alibaba/excel/write/metadata/style/WriteFont.java
Patch:
@@ -37,7 +37,7 @@ public class WriteFont {
      */
     private Short color;
     /**
-     * Set normal,super or subscript.
+     * Set normal, super or subscript.
      *
      * @see Font#SS_NONE
      * @see Font#SS_SUPER

File: src/main/java/com/alibaba/excel/write/style/column/AbstractHeadColumnWidthStyleStrategy.java
Patch:
@@ -33,7 +33,7 @@ protected void setColumnWidth(WriteSheetHolder writeSheetHolder, List<CellData>
      * Returns the column width corresponding to each column head.
      *
      * <p>
-     * if return null,ignore
+     * if return null, ignore
      *
      * @param head
      *            Nullable.

File: src/test/java/com/alibaba/easyexcel/test/core/compatibility/CompatibilityDataTest.java
Patch:
@@ -58,7 +58,7 @@ private void readAndWrite(File file) throws Exception {
         generateParam.setOutputStream(out);
         generateParam.setClazz(null);
         ExcelWriter writer = new ExcelWriter(generateParam);
-        // sheet1 width,string head,string data
+        // sheet1 width, string head, string data
         Sheet sheet1 = new Sheet(1, 3);
         sheet1.setSheetName("第一个sheet");
         Map columnWidth = new HashMap();
@@ -68,7 +68,7 @@ private void readAndWrite(File file) throws Exception {
         sheet1.setHead(head());
         writer.write1(listData(), sheet1);
 
-        // sheet2 style,class head
+        // sheet2 style, class head
         Sheet sheet2 = new Sheet(2, 3, CompatibilityData.class, "第二个sheet", null);
         sheet2.setStartRow(5);
         sheet2.setTableStyle(style());

File: src/main/java/com/alibaba/excel/write/property/ExcelWriteHeadProperty.java
Patch:
@@ -158,7 +158,9 @@ public List<CellRange> headCellRangeList() {
                 int lastCol = i;
                 int lastRow = j;
                 for (int k = i + 1; k < headList.size(); k++) {
-                    if (headList.get(k).getHeadNameList().get(j).equals(headName)) {
+                    if (headList.get(k).getHeadNameList().get(j).equals(headName)
+                        && (j - 1 >= 0)
+                        && !headList.get(k).getHeadNameList().get(j-1).equals(headName)) {
                         alreadyRangeSet.add(k + "-" + j);
                         lastCol = k;
                     } else {

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/AbstractCellValueTagHandler.java
Patch:
@@ -43,7 +43,7 @@ public void endElement(XlsxReadContext xlsxReadContext, String name) {
                     break;
                 }
                 tempCellData.setType(CellDataTypeEnum.NUMBER);
-                tempCellData.setNumberValue(new BigDecimal(tempData.toString()));
+                tempCellData.setNumberValue(BigDecimal.valueOf(Double.parseDouble(tempDataString)));
                 break;
             default:
                 throw new IllegalStateException("Cannot set values now");

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -34,7 +34,7 @@ public class Lock2Test {
     @Test
     public void test() throws Exception {
 //        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
-        File file = new File("/Users/zhuangjiaju/Downloads/签到金模板-0507-v3.xlsx");
+        File file = new File("/Users/zhuangjiaju/test/签到金模板-0507-v5.xlsx");
 
         List<Object> list = EasyExcel.read(file).sheet(0).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/AbstractCellValueTagHandler.java
Patch:
@@ -43,7 +43,7 @@ public void endElement(XlsxReadContext xlsxReadContext, String name) {
                     break;
                 }
                 tempCellData.setType(CellDataTypeEnum.NUMBER);
-                tempCellData.setNumberValue(new BigDecimal(tempData.toString()));
+                tempCellData.setNumberValue(BigDecimal.valueOf(Double.parseDouble(tempDataString)));
                 break;
             default:
                 throw new IllegalStateException("Cannot set values now");

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -34,7 +34,7 @@ public class Lock2Test {
     @Test
     public void test() throws Exception {
 //        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
-        File file = new File("/Users/zhuangjiaju/Downloads/签到金模板-0507-v3.xlsx");
+        File file = new File("/Users/zhuangjiaju/test/签到金模板-0507-v5.xlsx");
 
         List<Object> list = EasyExcel.read(file).sheet(0).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());

File: src/main/java/com/alibaba/excel/write/style/HorizontalCellStyleStrategy.java
Patch:
@@ -60,9 +60,10 @@ protected void setHeadCellStyle(Cell cell, Head head, Integer relativeRowIndex)
 
     @Override
     protected void setContentCellStyle(Cell cell, Head head, Integer relativeRowIndex) {
-        if (contentCellStyleList == null || contentCellStyleList.isEmpty()) {
+        if (contentCellStyleList == null || contentCellStyleList.isEmpty() || relativeRowIndex == null) {
             return;
         }
+
         cell.setCellStyle(contentCellStyleList.get(relativeRowIndex % contentCellStyleList.size()));
     }
 

File: src/main/java/com/alibaba/excel/converters/string/StringNumberConverter.java
Patch:
@@ -47,7 +47,7 @@ public String convertToJavaData(CellData cellData, ExcelContentProperty contentP
         }
         // Excel defines formatting
         if (cellData.getDataFormat() != null && !StringUtils.isEmpty(cellData.getDataFormatString())) {
-            return NumberDataFormatterUtils.format(cellData.getNumberValue().doubleValue(), cellData.getDataFormat(),
+            return NumberDataFormatterUtils.format(cellData.getNumberValue(), cellData.getDataFormat(),
                 cellData.getDataFormatString(), globalConfiguration);
         }
         // Default conversion number

File: src/main/java/com/alibaba/excel/util/NumberDataFormatterUtils.java
Patch:
@@ -1,5 +1,7 @@
 package com.alibaba.excel.util;
 
+import java.math.BigDecimal;
+
 import com.alibaba.excel.metadata.format.DataFormatter;
 import com.alibaba.excel.metadata.GlobalConfiguration;
 
@@ -24,7 +26,7 @@ public class NumberDataFormatterUtils {
      * @param globalConfiguration
      * @return
      */
-    public static String format(Double data, Integer dataFormat, String dataFormatString,
+    public static String format(BigDecimal data, Integer dataFormat, String dataFormatString,
         GlobalConfiguration globalConfiguration) {
         DataFormatter dataFormatter = DATA_FORMATTER_THREAD_LOCAL.get();
         if (dataFormatter == null) {

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -34,7 +34,7 @@ public class Lock2Test {
     @Test
     public void test() throws Exception {
 //        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
-        File file = new File("D:\\test\\T85_税金入库表202010.xlsx");
+        File file = new File("/Users/zhuangjiaju/Downloads/签到金模板-0507-v3.xlsx");
 
         List<Object> list = EasyExcel.read(file).sheet(0).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());

File: src/main/java/com/alibaba/excel/converters/string/StringNumberConverter.java
Patch:
@@ -47,7 +47,7 @@ public String convertToJavaData(CellData cellData, ExcelContentProperty contentP
         }
         // Excel defines formatting
         if (cellData.getDataFormat() != null && !StringUtils.isEmpty(cellData.getDataFormatString())) {
-            return NumberDataFormatterUtils.format(cellData.getNumberValue().doubleValue(), cellData.getDataFormat(),
+            return NumberDataFormatterUtils.format(cellData.getNumberValue(), cellData.getDataFormat(),
                 cellData.getDataFormatString(), globalConfiguration);
         }
         // Default conversion number

File: src/main/java/com/alibaba/excel/util/NumberDataFormatterUtils.java
Patch:
@@ -1,5 +1,7 @@
 package com.alibaba.excel.util;
 
+import java.math.BigDecimal;
+
 import com.alibaba.excel.metadata.format.DataFormatter;
 import com.alibaba.excel.metadata.GlobalConfiguration;
 
@@ -24,7 +26,7 @@ public class NumberDataFormatterUtils {
      * @param globalConfiguration
      * @return
      */
-    public static String format(Double data, Integer dataFormat, String dataFormatString,
+    public static String format(BigDecimal data, Integer dataFormat, String dataFormatString,
         GlobalConfiguration globalConfiguration) {
         DataFormatter dataFormatter = DATA_FORMATTER_THREAD_LOCAL.get();
         if (dataFormatter == null) {

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -34,7 +34,7 @@ public class Lock2Test {
     @Test
     public void test() throws Exception {
 //        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
-        File file = new File("D:\\test\\T85_税金入库表202010.xlsx");
+        File file = new File("/Users/zhuangjiaju/Downloads/签到金模板-0507-v3.xlsx");
 
         List<Object> list = EasyExcel.read(file).sheet(0).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());

File: src/main/java/com/alibaba/excel/write/property/ExcelWriteHeadProperty.java
Patch:
@@ -154,11 +154,11 @@ public List<CellRange> headCellRangeList() {
                     continue;
                 }
                 alreadyRangeSet.add(i + "-" + j);
-                String headName = headNameList.get(j);
+                String headName = headNameList.get(j) == null ? "" : headNameList.get(j);
                 int lastCol = i;
                 int lastRow = j;
                 for (int k = i + 1; k < headList.size(); k++) {
-                    if (headList.get(k).getHeadNameList().get(j).equals(headName)) {
+                    if ((headList.get(k).getHeadNameList().get(j) == null ? "" : headList.get(k).getHeadNameList().get(j)).equals(headName)) {
                         alreadyRangeSet.add(k + "-" + j);
                         lastCol = k;
                     } else {

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteAddExecutor.java
Patch:
@@ -93,7 +93,7 @@ private void addBasicTypeToExcel(List<Object> oneRowData, Row row, int relativeR
         if (dataIndex >= oneRowData.size()) {
             return;
         }
-        if (headMap.size() != 0) {
+        if (dataIndex != 0) {
             cellIndex++;
         }
         int size = oneRowData.size() - dataIndex;

File: src/test/java/com/alibaba/easyexcel/test/demo/write/WriteTest.java
Patch:
@@ -503,14 +503,14 @@ public void variableTitleWrite() {
     }
 
     @Test
-    public void noModelSimpleWriteWithOneHead() {
+    public void noModelWriteWithOneHead() {
         // 写法1
         String fileName = TestFileUtil.getPath() + "noModelSimpleWrite" + System.currentTimeMillis() + ".xlsx";
         // 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭
-        EasyExcel.write(fileName).head(noModelSimpleOneHead()).sheet("模板").doWrite(dataList());
+        EasyExcel.write(fileName).head(noModelOneHead()).sheet("模板").doWrite(dataList());
     }
 
-    private List<List<String>> noModelSimpleOneHead() {
+    private List<List<String>> noModelOneHead() {
         List<List<String>> list = new ArrayList<List<String>>();
         List<String> head0 = new ArrayList<String>();
         head0.add("表头1");

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteAddExecutor.java
Patch:
@@ -93,7 +93,7 @@ private void addBasicTypeToExcel(List<Object> oneRowData, Row row, int relativeR
         if (dataIndex >= oneRowData.size()) {
             return;
         }
-        if (cellIndex != 0) {
+        if (headMap.size() != 0) {
             cellIndex++;
         }
         int size = oneRowData.size() - dataIndex;

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteAddExecutor.java
Patch:
@@ -149,7 +149,7 @@ private void addJavaObjectToExcel(Object oneRowData, Row row, int relativeRowInd
         Map<String, Field> ignoreMap = writeContext.currentWriteHolder().excelWriteHeadProperty().getIgnoreMap();
         initSortedAllFiledMapFieldList(oneRowData.getClass(), sortedAllFiledMap);
         for (Map.Entry<Integer, Field> entry : sortedAllFiledMap.entrySet()) {
-            cellIndex = entry.getKey();
+            // cellIndex = entry.getKey();
             Field field = entry.getValue();
             String filedName = field.getName();
             boolean uselessData = !beanMap.containsKey(filedName) || beanMapHandledSet.contains(filedName)
@@ -158,7 +158,7 @@ private void addJavaObjectToExcel(Object oneRowData, Row row, int relativeRowInd
                 continue;
             }
             Object value = beanMap.get(filedName);
-            WriteHandlerUtils.beforeCellCreate(writeContext, row, null, cellIndex, relativeRowIndex, Boolean.FALSE);
+            WriteHandlerUtils.beforeCellCreate(writeContext, row, null, cellIndex++, relativeRowIndex, Boolean.FALSE);
             Cell cell = WorkBookUtil.createCell(row, cellIndex);
             WriteHandlerUtils.afterCellCreate(writeContext, cell, null, relativeRowIndex, Boolean.FALSE);
             CellData cellData = converterAndSet(currentWriteHolder, value == null ? null : value.getClass(), cell,

File: src/main/java/com/alibaba/excel/write/executor/AbstractExcelWriteExecutor.java
Patch:
@@ -73,8 +73,7 @@ protected CellData<?> converterAndSet(WriteHolder currentWriteHolder, Class<?> c
     }
 
     protected CellData<?> convert(WriteHolder currentWriteHolder, Class<?> clazz, CellDataTypeEnum targetType,
-        Cell cell,
-        Object value, ExcelContentProperty excelContentProperty) {
+        Cell cell, Object value, ExcelContentProperty excelContentProperty) {
         // This means that the user has defined the data.
         if (value instanceof CellData) {
             CellData<?> cellDataValue = (CellData<?>)value;

File: src/main/java/com/alibaba/excel/write/ExcelBuilderImpl.java
Patch:
@@ -1,6 +1,7 @@
 package com.alibaba.excel.write;
 
 import java.lang.reflect.Field;
+import java.util.Collection;
 import java.util.List;
 
 import org.apache.poi.ss.usermodel.Sheet;
@@ -48,12 +49,12 @@ public ExcelBuilderImpl(WriteWorkbook writeWorkbook) {
     }
 
     @Override
-    public void addContent(List data, WriteSheet writeSheet) {
+    public void addContent(Collection<?> data, WriteSheet writeSheet) {
         addContent(data, writeSheet, null);
     }
 
     @Override
-    public void addContent(List data, WriteSheet writeSheet, WriteTable writeTable) {
+    public void addContent(Collection<?> data, WriteSheet writeSheet, WriteTable writeTable) {
         try {
             context.currentSheet(writeSheet, WriteTypeEnum.ADD);
             context.currentTable(writeTable);

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterSheetBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -54,7 +54,7 @@ public WriteSheet build() {
         return writeSheet;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet()' to call this method");
         }

File: src/main/java/com/alibaba/excel/write/builder/ExcelWriterTableBuilder.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.write.builder;
 
-import java.util.List;
+import java.util.Collection;
 
 import com.alibaba.excel.ExcelWriter;
 import com.alibaba.excel.exception.ExcelGenerateException;
@@ -47,7 +47,7 @@ public WriteTable build() {
         return writeTable;
     }
 
-    public void doWrite(List data) {
+    public void doWrite(Collection<?> data) {
         if (excelWriter == null) {
             throw new ExcelGenerateException("Must use 'EasyExcelFactory.write().sheet().table()' to call this method");
         }

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -34,7 +34,7 @@ public class Lock2Test {
     @Test
     public void test() throws Exception {
 //        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
-        File file = new File("/Users/zhuangjiaju/Downloads/easyexcel_error的副本.xlsx");
+        File file = new File("/Users/zhuangjiaju/Downloads/1.xlsx");
 
         List<Object> list = EasyExcel.read(file).sheet(0).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -34,7 +34,7 @@ public class Lock2Test {
     @Test
     public void test() throws Exception {
 //        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
-        File file = new File("D:\\test\\T85_税金入库表202010.xlsx");
+        File file = new File("/Users/zhuangjiaju/Downloads/easyexcel_error的副本.xlsx");
 
         List<Object> list = EasyExcel.read(file).sheet(0).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());

File: src/test/java/com/alibaba/easyexcel/test/core/simple/SimpleDataTest.java
Patch:
@@ -62,6 +62,7 @@ public void t05SheetNameRead07() {
 
     private void synchronousRead(File file) {
         // Synchronous read file
+        EasyExcel.write(file, SimpleData.class).sheet().doWrite(data());
         List<Object> list = EasyExcel.read(file).head(SimpleData.class).sheet().doReadSync();
         Assert.assertEquals(list.size(), 10);
         Assert.assertTrue(list.get(0) instanceof SimpleData);

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -33,9 +33,10 @@ public class Lock2Test {
 
     @Test
     public void test() throws Exception {
-        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
+//        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
+        File file = new File("D:\\test\\T85_税金入库表202010.xlsx");
 
-        List<Object> list = EasyExcel.read(file).sheet(1).headRowNumber(0).doReadSync();
+        List<Object> list = EasyExcel.read(file).sheet(0).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());
         for (Object data : list) {
             LOGGER.info("返回数据：{}", JSON.toJSONString(data));

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -33,9 +33,10 @@ public class Lock2Test {
 
     @Test
     public void test() throws Exception {
-        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
+//        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
+        File file = new File("D:\\test\\T85_税金入库表202010.xlsx");
 
-        List<Object> list = EasyExcel.read(file).sheet(1).headRowNumber(0).doReadSync();
+        List<Object> list = EasyExcel.read(file).sheet(0).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());
         for (Object data : list) {
             LOGGER.info("返回数据：{}", JSON.toJSONString(data));

File: src/test/java/com/alibaba/easyexcel/test/core/simple/SimpleDataTest.java
Patch:
@@ -62,6 +62,7 @@ public void t05SheetNameRead07() {
 
     private void synchronousRead(File file) {
         // Synchronous read file
+        EasyExcel.write(file, SimpleData.class).sheet().doWrite(data());
         List<Object> list = EasyExcel.read(file).head(SimpleData.class).sheet().doReadSync();
         Assert.assertEquals(list.size(), 10);
         Assert.assertTrue(list.get(0) instanceof SimpleData);

File: src/test/java/com/alibaba/easyexcel/test/demo/web/WebTest.java
Patch:
@@ -18,6 +18,7 @@
 import org.springframework.web.multipart.MultipartFile;
 
 import com.alibaba.excel.EasyExcel;
+import com.alibaba.excel.support.ExcelTypeEnum;
 import com.alibaba.fastjson.JSON;
 
 /**

File: src/test/java/com/alibaba/easyexcel/test/demo/web/WebTest.java
Patch:
@@ -63,8 +63,8 @@ public void downloadFailedUsingJson(HttpServletResponse response) throws IOExcep
             response.setContentType("application/vnd.ms-excel");
             response.setCharacterEncoding("utf-8");
             // 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系
-            String fileName = URLEncoder.encode("测试", "UTF-8");
-            response.setHeader("Content-disposition", "attachment;filename=" + fileName + ".xlsx");
+            String fileName = URLEncoder.encode("测试", "UTF-8").replaceAll("\\+", "%20");
+            response.setHeader("Content-disposition", "attachment;filename*=utf-8''" + fileName + ".xlsx");
             // 这里需要设置不关闭流
             EasyExcel.write(response.getOutputStream(), DownloadData.class).autoCloseStream(Boolean.FALSE).sheet("模板")
                 .doWrite(data());

File: src/test/java/com/alibaba/easyexcel/test/demo/web/WebTest.java
Patch:
@@ -46,8 +46,8 @@ public void download(HttpServletResponse response) throws IOException {
         response.setContentType("application/vnd.ms-excel");
         response.setCharacterEncoding("utf-8");
         // 这里URLEncoder.encode可以防止中文乱码 当然和easyexcel没有关系
-        String fileName = URLEncoder.encode("测试", "UTF-8");
-        response.setHeader("Content-disposition", "attachment;filename=" + fileName + ".xlsx");
+        String fileName = URLEncoder.encode("测试", "UTF-8").replaceAll("\\+", "%20");
+        response.setHeader("Content-disposition", "attachment;filename*=utf-8''" + fileName + ".xlsx");
         EasyExcel.write(response.getOutputStream(), DownloadData.class).sheet("模板").doWrite(data());
     }
 

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/FormulaRecordHandler.java
Patch:
@@ -79,6 +79,5 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
                 cellMap.put((int)frec.getColumn(), tempCellData);
                 break;
         }
-        xlsReadContext.xlsReadSheetHolder().setTempRowType(RowTypeEnum.DATA);
     }
 }

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/FormulaRecordHandler.java
Patch:
@@ -3,6 +3,7 @@
 import java.math.BigDecimal;
 import java.util.Map;
 
+import com.alibaba.excel.enums.RowTypeEnum;
 import org.apache.poi.hssf.model.HSSFFormulaParser;
 import org.apache.poi.hssf.record.FormulaRecord;
 import org.apache.poi.hssf.record.Record;
@@ -78,5 +79,6 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
                 cellMap.put((int)frec.getColumn(), tempCellData);
                 break;
         }
+        xlsReadContext.xlsReadSheetHolder().setTempRowType(RowTypeEnum.DATA);
     }
 }

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteAddExecutor.java
Patch:
@@ -156,6 +156,7 @@ private void addJavaObjectToExcel(Object oneRowData, Row row, int relativeRowInd
             boolean uselessData = !beanMap.containsKey(filedName) || beanMapHandledSet.contains(filedName)
                 || ignoreMap.containsKey(filedName) || writeContext.currentWriteHolder().ignore(filedName, cellIndex);
             if (uselessData) {
+                cellIndex++;
                 continue;
             }
             Object value = beanMap.get(filedName);

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -32,9 +32,9 @@ public class Lock2Test {
 
     @Test
     public void test() throws Exception {
-        File file = TestFileUtil.readUserHomeFile("test/test4.xlsx");
+        File file = TestFileUtil.readUserHomeFile("test/test6.xls");
 
-        List<Object> list = EasyExcel.read(file).sheet().headRowNumber(0).doReadSync();
+        List<Object> list = EasyExcel.read(file).sheet(1).headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());
         for (Object data : list) {
             LOGGER.info("返回数据：{}", JSON.toJSONString(data));

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/FormulaRecordHandler.java
Patch:
@@ -14,6 +14,7 @@
 import com.alibaba.excel.constant.BuiltinFormats;
 import com.alibaba.excel.context.xls.XlsReadContext;
 import com.alibaba.excel.enums.CellDataTypeEnum;
+import com.alibaba.excel.enums.RowTypeEnum;
 import com.alibaba.excel.metadata.Cell;
 import com.alibaba.excel.metadata.CellData;
 
@@ -43,6 +44,7 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
         }
         tempCellData.setFormula(Boolean.TRUE);
         tempCellData.setFormulaValue(formulaValue);
+        xlsReadContext.xlsReadSheetHolder().setTempRowType(RowTypeEnum.DATA);
         switch (cellType) {
             case STRING:
                 // Formula result is a string

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -32,9 +32,9 @@ public class Lock2Test {
 
     @Test
     public void test() throws Exception {
-        File file = TestFileUtil.readUserHomeFile("test/test.xlsx");
+        File file = TestFileUtil.readUserHomeFile("test/test4.xlsx");
 
-        List<Object> list = EasyExcel.read(file).ignoreEmptyRow(true).sheet().headRowNumber(0).doReadSync();
+        List<Object> list = EasyExcel.read(file).sheet().headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());
         for (Object data : list) {
             LOGGER.info("返回数据：{}", JSON.toJSONString(data));

File: src/main/java/com/alibaba/excel/context/WriteContextImpl.java
Patch:
@@ -163,14 +163,14 @@ private void initSheet(WriteTypeEnum writeType) {
         Sheet currentSheet;
         try {
             if (writeSheetHolder.getSheetNo() != null) {
-                int realSheetNo = writeSheetHolder.getSheetNo();
                 // When the add default sort order of appearance
                 if (WriteTypeEnum.ADD.equals(writeType)) {
                     currentSheet = createSheet();
                 } else {
-                    currentSheet = writeWorkbookHolder.getWorkbook().getSheetAt(realSheetNo);
+                    currentSheet = writeWorkbookHolder.getWorkbook().getSheetAt(writeSheetHolder.getSheetNo());
                     writeSheetHolder
-                        .setCachedSheet(writeWorkbookHolder.getCachedWorkbook().getSheetAt(realSheetNo));
+                        .setCachedSheet(
+                            writeWorkbookHolder.getCachedWorkbook().getSheetAt(writeSheetHolder.getSheetNo()));
                 }
             } else {
                 // sheet name must not null

File: src/main/java/com/alibaba/excel/write/metadata/holder/WriteWorkbookHolder.java
Patch:
@@ -112,6 +112,7 @@ public class WriteWorkbookHolder extends AbstractWriteHolder {
      */
     private Boolean writeExcelOnException;
 
+
     public WriteWorkbookHolder(WriteWorkbook writeWorkbook) {
         super(writeWorkbook, null, writeWorkbook.getConvertAllFiled());
         this.writeWorkbook = writeWorkbook;

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -32,7 +32,7 @@ public class Lock2Test {
 
     @Test
     public void test() throws Exception {
-        File file = TestFileUtil.readUserHomeFile("test/test2style.xls");
+        File file = TestFileUtil.readUserHomeFile("test/test.xlsx");
 
         List<Object> list = EasyExcel.read(file).ignoreEmptyRow(true).sheet().headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -32,9 +32,9 @@ public class Lock2Test {
 
     @Test
     public void test() throws Exception {
-        File file = TestFileUtil.readUserHomeFile("test/test.xlsx");
+        File file = TestFileUtil.readUserHomeFile("test/test2style.xls");
 
-        List<Object> list = EasyExcel.read(file).useScientificFormat(false).sheet().headRowNumber(0).doReadSync();
+        List<Object> list = EasyExcel.read(file).ignoreEmptyRow(true).sheet().headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());
         for (Object data : list) {
             LOGGER.info("返回数据：{}", JSON.toJSONString(data));

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/FormulaRecordHandler.java
Patch:
@@ -3,6 +3,7 @@
 import java.math.BigDecimal;
 import java.util.Map;
 
+import com.alibaba.excel.enums.RowTypeEnum;
 import org.apache.poi.hssf.model.HSSFFormulaParser;
 import org.apache.poi.hssf.record.FormulaRecord;
 import org.apache.poi.hssf.record.Record;
@@ -76,5 +77,6 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
                 cellMap.put((int)frec.getColumn(), tempCellData);
                 break;
         }
+        xlsReadContext.xlsReadSheetHolder().setTempRowType(RowTypeEnum.DATA);
     }
 }

File: src/main/java/com/alibaba/excel/util/WriteHandlerUtils.java
Patch:
@@ -234,6 +234,6 @@ private static List<WriteHandler> getHandlerList(WriteContext writeContext, Clas
         } else {
             writeHandlerMap = writeContext.currentWriteHolder().writeHandlerMap();
         }
-        return writeHandlerMap.get(WorkbookWriteHandler.class);
+        return writeHandlerMap.get(clazz);
     }
 }

File: src/test/java/com/alibaba/easyexcel/test/temp/Lock2Test.java
Patch:
@@ -32,7 +32,7 @@ public class Lock2Test {
 
     @Test
     public void test() throws Exception {
-        File file = new File("D:\\test\\headt1.xlsx");
+        File file = TestFileUtil.readUserHomeFile("test/t3.xls");
 
         List<Object> list = EasyExcel.read(file).sheet().headRowNumber(0).doReadSync();
         LOGGER.info("数据：{}", list.size());

File: src/main/java/com/alibaba/excel/util/ClassUtils.java
Patch:
@@ -109,11 +109,12 @@ private static void declaredFields(Class clazz, Boolean convertAllFiled) {
                     + "' and '" + field.getName() + "' must be inconsistent");
             }
             customFiledMap.put(excelProperty.index(), field);
-            allFieldList.add(field);
         }
 
+        List<Field> allWriteFieldList = new ArrayList<Field>(customFiledMap.values());
+        allWriteFieldList.addAll(allFieldList);
         FIELD_CACHE.put(clazz,
-            new SoftReference<FieldCache>(new FieldCache(defaultFieldList, customFiledMap, allFieldList, ignoreMap)));
+            new SoftReference<FieldCache>(new FieldCache(defaultFieldList, customFiledMap, allWriteFieldList, ignoreMap)));
     }
 
     private static class FieldCache {

File: src/main/java/com/alibaba/excel/ExcelReader.java
Patch:
@@ -136,6 +136,8 @@ public ExcelReader(InputStream in, ExcelTypeEnum excelTypeEnum, Object customCon
         readWorkbook.setReadCache(new MapCache());
         readWorkbook.setConvertAllFiled(Boolean.FALSE);
         readWorkbook.setDefaultReturnMap(Boolean.FALSE);
+        // The previous logic was that Article 0 started reading
+        readWorkbook.setHeadRowNumber(0);
         excelAnalyser = new ExcelAnalyserImpl(readWorkbook);
     }
 

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/sax/SharedStringsTableHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.excel.analysis.v07;
+package com.alibaba.excel.analysis.v07.handlers.sax;
 
 import org.xml.sax.Attributes;
 import org.xml.sax.helpers.DefaultHandler;

File: src/main/java/com/alibaba/excel/converters/byteconverter/ByteNumberConverter.java
Patch:
@@ -34,7 +34,7 @@ public Byte convertToJavaData(CellData cellData, ExcelContentProperty contentPro
     @Override
     public CellData convertToExcelData(Byte value, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
-        return new CellData(BigDecimal.valueOf(value));
+        return new CellData(new BigDecimal(Byte.toString(value)));
     }
 
 }

File: src/main/java/com/alibaba/excel/converters/floatconverter/FloatNumberConverter.java
Patch:
@@ -34,7 +34,7 @@ public Float convertToJavaData(CellData cellData, ExcelContentProperty contentPr
     @Override
     public CellData convertToExcelData(Float value, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
-        return new CellData(BigDecimal.valueOf(value));
+        return new CellData(new BigDecimal(Float.toString(value)));
     }
 
 }

File: src/main/java/com/alibaba/excel/converters/integer/IntegerNumberConverter.java
Patch:
@@ -34,7 +34,7 @@ public Integer convertToJavaData(CellData cellData, ExcelContentProperty content
     @Override
     public CellData convertToExcelData(Integer value, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
-        return new CellData(BigDecimal.valueOf(value));
+        return new CellData(new BigDecimal(Integer.toString(value)));
     }
 
 }

File: src/main/java/com/alibaba/excel/converters/shortconverter/ShortNumberConverter.java
Patch:
@@ -34,7 +34,7 @@ public Short convertToJavaData(CellData cellData, ExcelContentProperty contentPr
     @Override
     public CellData convertToExcelData(Short value, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
-        return new CellData(BigDecimal.valueOf(value));
+        return new CellData(new BigDecimal(Short.toString(value)));
     }
 
 }

File: src/main/java/com/alibaba/excel/write/style/column/LongestMatchColumnWidthStyleStrategy.java
Patch:
@@ -24,7 +24,7 @@ public class LongestMatchColumnWidthStyleStrategy extends AbstractColumnWidthSty
 
     private static final int MAX_COLUMN_WIDTH = 255;
 
-    private final Map<Integer, Map<Integer, Integer>> cache = new HashMap<Integer, Map<Integer, Integer>>(8);
+    private Map<Integer, Map<Integer, Integer>> cache = new HashMap<Integer, Map<Integer, Integer>>(8);
 
     @Override
     protected void setColumnWidth(WriteSheetHolder writeSheetHolder, List<CellData> cellDataList, Cell cell, Head head,

File: src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterDataListener.java
Patch:
@@ -32,7 +32,7 @@ public void doAfterAllAnalysed(AnalysisContext context) {
         Assert.assertEquals(list.size(), 1);
         ConverterData data = list.get(0);
         try {
-            Assert.assertEquals(data.getDate(), DateUtils.parseDate("2020-01-01 01:01:01"));
+            Assert.assertEquals(DateUtils.parseDate("2020-01-01 01:01:01"), data.getDate());
         } catch (ParseException e) {
             throw new ExcelCommonException("Test Exception", e);
         }

File: src/test/java/com/alibaba/easyexcel/test/core/converter/ReadAllConverterDataListener.java
Patch:
@@ -64,7 +64,7 @@ public void doAfterAllAnalysed(AnalysisContext context) {
         Assert.assertEquals(data.getStringBoolean(), "true");
         Assert.assertEquals(data.getStringString(), "测试");
         Assert.assertEquals(data.getStringError(), "#VALUE!");
-        Assert.assertEquals(data.getStringNumberDate(), "2020-01-01 01:01:01");
+        Assert.assertEquals("2020-1-1 1:01", data.getStringNumberDate());
         double doubleStringFormulaNumber = new BigDecimal(data.getStringFormulaNumber()).doubleValue();
         Assert.assertEquals(doubleStringFormulaNumber, 2.0, 0.0);
         Assert.assertEquals(data.getStringFormulaString(), "1测试");

File: src/test/java/com/alibaba/easyexcel/test/demo/read/NoModelDataListener.java
Patch:
@@ -16,8 +16,8 @@
  *
  * @author Jiaju Zhuang
  */
-public class NoModleDataListener extends AnalysisEventListener<Map<Integer, String>> {
-    private static final Logger LOGGER = LoggerFactory.getLogger(NoModleDataListener.class);
+public class NoModelDataListener extends AnalysisEventListener<Map<Integer, String>> {
+    private static final Logger LOGGER = LoggerFactory.getLogger(NoModelDataListener.class);
     /**
      * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收
      */

File: src/test/java/com/alibaba/easyexcel/test/demo/web/WebTest.java
Patch:
@@ -85,7 +85,7 @@ public void downloadFailedUsingJson(HttpServletResponse response) throws IOExcep
      * <p>
      * 1. 创建excel对应的实体对象 参照{@link UploadData}
      * <p>
-     * 2. 由于默认异步读取excel，所以需要创建excel一行一行的回调监听器，参照{@link UploadDataListener}
+     * 2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照{@link UploadDataListener}
      * <p>
      * 3. 直接读即可
      */

File: src/main/java/com/alibaba/excel/write/style/column/LongestMatchColumnWidthStyleStrategy.java
Patch:
@@ -24,7 +24,7 @@ public class LongestMatchColumnWidthStyleStrategy extends AbstractColumnWidthSty
 
     private static final int MAX_COLUMN_WIDTH = 255;
 
-    private static final Map<Integer, Map<Integer, Integer>> CACHE = new HashMap<Integer, Map<Integer, Integer>>(8);
+    private Map<Integer, Map<Integer, Integer>> cache = new HashMap<Integer, Map<Integer, Integer>>(8);
 
     @Override
     protected void setColumnWidth(WriteSheetHolder writeSheetHolder, List<CellData> cellDataList, Cell cell, Head head,
@@ -33,10 +33,10 @@ protected void setColumnWidth(WriteSheetHolder writeSheetHolder, List<CellData>
         if (!needSetWidth) {
             return;
         }
-        Map<Integer, Integer> maxColumnWidthMap = CACHE.get(writeSheetHolder.getSheetNo());
+        Map<Integer, Integer> maxColumnWidthMap = cache.get(writeSheetHolder.getSheetNo());
         if (maxColumnWidthMap == null) {
             maxColumnWidthMap = new HashMap<Integer, Integer>(16);
-            CACHE.put(writeSheetHolder.getSheetNo(), maxColumnWidthMap);
+            cache.put(writeSheetHolder.getSheetNo(), maxColumnWidthMap);
         }
         Integer columnWidth = dataLength(cellDataList, cell, isHead);
         if (columnWidth < 0) {

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/CellTagHandler.java
Patch:
@@ -24,7 +24,8 @@ public class CellTagHandler extends AbstractXlsxTagHandler {
     @Override
     public void startElement(XlsxReadContext xlsxReadContext, String name, Attributes attributes) {
         XlsxReadSheetHolder xlsxReadSheetHolder = xlsxReadContext.xlsxReadSheetHolder();
-        xlsxReadSheetHolder.setColumnIndex(PositionUtils.getCol(attributes.getValue(ExcelXmlConstants.ATTRIBUTE_R)));
+        xlsxReadSheetHolder.setColumnIndex(PositionUtils.getCol(attributes.getValue(ExcelXmlConstants.ATTRIBUTE_R),
+            xlsxReadSheetHolder.getColumnIndex()));
 
         // t="s" ,it's means String
         // t="str" ,it's means String,but does not need to be read in the 'sharedStrings.xml'

File: src/main/java/com/alibaba/excel/analysis/ExcelAnalyserImpl.java
Patch:
@@ -59,8 +59,7 @@ public ExcelAnalyserImpl(ReadWorkbook readWorkbook) {
     }
 
     private void choiceExcelExecutor(ReadWorkbook readWorkbook) throws Exception {
-        ExcelTypeEnum excelType =
-            ExcelTypeEnum.valueOf(readWorkbook.getFile(), readWorkbook.getInputStream(), readWorkbook.getExcelType());
+        ExcelTypeEnum excelType = ExcelTypeEnum.valueOf(readWorkbook);
         switch (excelType) {
             case XLS:
                 POIFSFileSystem poifsFileSystem;

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/DummyRecordHandler.java
Patch:
@@ -8,6 +8,7 @@
 
 import com.alibaba.excel.analysis.v03.IgnorableXlsRecordHandler;
 import com.alibaba.excel.context.xls.XlsReadContext;
+import com.alibaba.excel.enums.RowTypeEnum;
 import com.alibaba.excel.metadata.Cell;
 import com.alibaba.excel.metadata.CellData;
 import com.alibaba.excel.read.metadata.holder.ReadRowHolder;
@@ -30,6 +31,7 @@ public void processRecord(XlsReadContext xlsReadContext, Record record) {
                 xlsReadContext.readSheetHolder().getGlobalConfiguration(), xlsReadSheetHolder.getCellMap()));
             xlsReadContext.analysisEventProcessor().endRow(xlsReadContext);
             xlsReadSheetHolder.setCellMap(new LinkedHashMap<Integer, Cell>());
+            xlsReadSheetHolder.setTempRowType(RowTypeEnum.EMPTY);
         } else if (record instanceof MissingCellDummyRecord) {
             MissingCellDummyRecord mcdr = (MissingCellDummyRecord)record;
             xlsReadSheetHolder.getCellMap().put(mcdr.getColumn(),

File: src/main/java/com/alibaba/excel/read/builder/ExcelReaderBuilder.java
Patch:
@@ -205,9 +205,9 @@ public void doReadAll() {
      * @return
      */
     public <T> List<T> doReadAllSync() {
-        ExcelReader excelReader = build();
         SyncReadListener syncReadListener = new SyncReadListener();
         registerReadListener(syncReadListener);
+        ExcelReader excelReader = build();
         excelReader.readAll();
         excelReader.finish();
         return (List<T>)syncReadListener.getList();

File: src/test/java/com/alibaba/easyexcel/test/temp/read/CommentTest.java
Patch:
@@ -24,10 +24,10 @@ public class CommentTest {
 
     @Test
     public void comment() throws Exception {
-        File file = new File("D:\\test\\comment.xls");
+        File file = new File("D:\\test\\listHead07.xlsx");
         List<Map<Integer, CellData>> datas = EasyExcel.read(file).doReadAllSync();
         for (Map<Integer, CellData> data : datas) {
-            LOGGER.info("数据:{}", JSON.toJSONString(data.get(0)));
+            LOGGER.info("数据:{}", JSON.toJSONString(data));
         }
     }
 

File: src/test/java/com/alibaba/easyexcel/test/demo/read/NoModelDataListener.java
Patch:
@@ -40,7 +40,7 @@ public void doAfterAllAnalysed(AnalysisContext context) {
         LOGGER.info("所有数据解析完成！");
     }
 
-    /**git
+    /**
      * 加上存储数据库
      */
     private void saveData() {

File: src/test/java/com/alibaba/easyexcel/test/demo/read/NoModelDataListener.java
Patch:
@@ -16,8 +16,8 @@
  *
  * @author Jiaju Zhuang
  */
-public class NoModleDataListener extends AnalysisEventListener<Map<Integer, String>> {
-    private static final Logger LOGGER = LoggerFactory.getLogger(NoModleDataListener.class);
+public class NoModelDataListener extends AnalysisEventListener<Map<Integer, String>> {
+    private static final Logger LOGGER = LoggerFactory.getLogger(NoModelDataListener.class);
     /**
      * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收
      */
@@ -40,7 +40,7 @@ public void doAfterAllAnalysed(AnalysisContext context) {
         LOGGER.info("所有数据解析完成！");
     }
 
-    /**
+    /**git
      * 加上存储数据库
      */
     private void saveData() {

File: src/test/java/com/alibaba/easyexcel/test/demo/read/ReadTest.java
Patch:
@@ -236,9 +236,9 @@ public void synchronousRead() {
      * 不创建对象的读，不是特别推荐使用，都用String接收对日期的支持不是很好
      */
     @Test
-    public void noModleRead() {
+    public void noModelRead() {
         String fileName = TestFileUtil.getPath() + "demo" + File.separator + "demo.xlsx";
         // 这里 只要，然后读取第一个sheet 同步读取会自动finish
-        EasyExcel.read(fileName, new NoModleDataListener()).sheet().doRead();
+        EasyExcel.read(fileName, new NoModelDataListener()).sheet().doRead();
     }
 }

File: src/test/java/com/alibaba/easyexcel/test/demo/write/WriteTest.java
Patch:
@@ -418,9 +418,9 @@ public void customHandlerWrite() {
      * 不创建对象的写
      */
     @Test
-    public void noModleWrite() {
+    public void noModelWrite() {
         // 写法1
-        String fileName = TestFileUtil.getPath() + "noModleWrite" + System.currentTimeMillis() + ".xlsx";
+        String fileName = TestFileUtil.getPath() + "noModelWrite" + System.currentTimeMillis() + ".xlsx";
         // 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭
         EasyExcel.write(fileName).head(head()).sheet("模板").doWrite(dataList());
     }

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/ProcessResultCellHandler.java
Patch:
@@ -20,6 +20,7 @@
 public class ProcessResultCellHandler implements XlsxCellHandler {
     private AnalysisContext analysisContext;
     private XlsxRowResultHolder rowResultHandler;
+    private int currentRow = -1;
 
     public ProcessResultCellHandler(AnalysisContext analysisContext, XlsxRowResultHolder rowResultHandler) {
         this.analysisContext = analysisContext;
@@ -33,9 +34,9 @@ public boolean support(String name) {
 
     @Override
     public void startHandle(String name, Attributes attributes) {
+        currentRow = PositionUtils.getRowByRowTagt(attributes.getValue(ExcelXmlConstants.POSITION),currentRow);
         analysisContext.readRowHolder(
-            new ReadRowHolder(PositionUtils.getRowByRowTagt(attributes.getValue(ExcelXmlConstants.POSITION)),
-                analysisContext.readSheetHolder().getGlobalConfiguration()));
+            new ReadRowHolder(currentRow, analysisContext.readSheetHolder().getGlobalConfiguration()));
     }
 
     @Override

File: src/main/java/com/alibaba/excel/util/ClassUtils.java
Patch:
@@ -109,11 +109,12 @@ private static void declaredFields(Class clazz, Boolean convertAllFiled) {
                     + "' and '" + field.getName() + "' must be inconsistent");
             }
             customFiledMap.put(excelProperty.index(), field);
-            allFieldList.add(field);
         }
 
+        List<Field> allWriteFieldList = new ArrayList<Field>(customFiledMap.values());
+        allWriteFieldList.addAll(allFieldList);
         FIELD_CACHE.put(clazz,
-            new SoftReference<FieldCache>(new FieldCache(defaultFieldList, customFiledMap, allFieldList, ignoreMap)));
+            new SoftReference<FieldCache>(new FieldCache(defaultFieldList, customFiledMap, allWriteFieldList, ignoreMap)));
     }
 
     private static class FieldCache {

File: src/main/java/com/alibaba/excel/analysis/v03/XlsSaxAnalyser.java
Patch:
@@ -3,10 +3,10 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.HashMap;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.TreeMap;
 
 import org.apache.poi.hssf.eventusermodel.EventWorkbookBuilder;
 import org.apache.poi.hssf.eventusermodel.FormatTrackingHSSFListener;
@@ -191,7 +191,7 @@ private void endRow() {
         analysisContext.readRowHolder(
             new ReadRowHolder(lastRowNumber, analysisContext.readSheetHolder().getGlobalConfiguration()));
         analysisContext.readSheetHolder().notifyEndOneRow(new EachRowAnalysisFinishEvent(records), analysisContext);
-        records.clear();
+        records = new HashMap<Integer, CellData>();
         lastColumnNumber = -1;
     }
 
@@ -208,7 +208,7 @@ private void buildXlsRecordHandlers() {
             recordHandlers.add(new FormulaRecordHandler(stubWorkbook, formatListener));
             recordHandlers.add(new LabelRecordHandler());
             recordHandlers.add(new NoteRecordHandler());
-            recordHandlers.add(new NumberRecordHandler(formatListener));
+            recordHandlers.add(new NumberRecordHandler(analysisContext, formatListener));
             recordHandlers.add(new RkRecordHandler());
             recordHandlers.add(new SstRecordHandler());
             recordHandlers.add(new MissingCellDummyRecordHandler());

File: src/main/java/com/alibaba/excel/context/AnalysisContext.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.InputStream;
 
-import com.alibaba.excel.analysis.ExcelReadExecutor;
 import com.alibaba.excel.event.AnalysisEventListener;
 import com.alibaba.excel.metadata.Sheet;
 import com.alibaba.excel.read.metadata.ReadSheet;

File: src/main/java/com/alibaba/excel/converters/byteconverter/ByteNumberConverter.java
Patch:
@@ -34,7 +34,7 @@ public Byte convertToJavaData(CellData cellData, ExcelContentProperty contentPro
     @Override
     public CellData convertToExcelData(Byte value, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
-        return new CellData(BigDecimal.valueOf(value));
+        return new CellData(new BigDecimal(Byte.toString(value)));
     }
 
 }

File: src/main/java/com/alibaba/excel/converters/floatconverter/FloatNumberConverter.java
Patch:
@@ -34,7 +34,7 @@ public Float convertToJavaData(CellData cellData, ExcelContentProperty contentPr
     @Override
     public CellData convertToExcelData(Float value, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
-        return new CellData(BigDecimal.valueOf(value));
+        return new CellData(new BigDecimal(Float.toString(value)));
     }
 
 }

File: src/main/java/com/alibaba/excel/converters/integer/IntegerNumberConverter.java
Patch:
@@ -34,7 +34,7 @@ public Integer convertToJavaData(CellData cellData, ExcelContentProperty content
     @Override
     public CellData convertToExcelData(Integer value, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
-        return new CellData(BigDecimal.valueOf(value));
+        return new CellData(new BigDecimal(Integer.toString(value)));
     }
 
 }

File: src/main/java/com/alibaba/excel/converters/shortconverter/ShortNumberConverter.java
Patch:
@@ -34,7 +34,7 @@ public Short convertToJavaData(CellData cellData, ExcelContentProperty contentPr
     @Override
     public CellData convertToExcelData(Short value, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
-        return new CellData(BigDecimal.valueOf(value));
+        return new CellData(new BigDecimal(Short.toString(value)));
     }
 
 }

File: src/main/java/com/alibaba/excel/metadata/DataFormatter.java
Patch:
@@ -63,7 +63,8 @@ public class DataFormatter {
     private static final Pattern daysAsText = Pattern.compile("([d]{3,})", Pattern.CASE_INSENSITIVE);
 
     /** Pattern to find "AM/PM" marker */
-    private static final Pattern amPmPattern = Pattern.compile("(([AP])[M/P]*)|(([上下])[午/下]*)", Pattern.CASE_INSENSITIVE);
+    private static final Pattern amPmPattern =
+        Pattern.compile("(([AP])[M/P]*)|(([上下])[午/下]*)", Pattern.CASE_INSENSITIVE);
 
     /** Pattern to find formats with condition ranges e.g. [>=100] */
     private static final Pattern rangeConditionalPattern =
@@ -152,7 +153,6 @@ public DataFormatter() {
     public DataFormatter(Locale locale, Boolean use1904windowing) {
         this.use1904windowing = use1904windowing != null ? use1904windowing : Boolean.FALSE;
         this.locale = locale != null ? locale : Locale.getDefault();
-        this.locale = Locale.US;
         this.dateSymbols = DateFormatSymbols.getInstance(this.locale);
         this.decimalSymbols = DecimalFormatSymbols.getInstance(this.locale);
     }

File: src/main/java/com/alibaba/excel/util/DateUtils.java
Patch:
@@ -13,7 +13,7 @@
  *
  * @author Jiaju Zhuang
  **/
-public class DateUtils implements ThreadLocalCachedUtils {
+public class DateUtils {
     /**
      * Is a cache of dates
      */
@@ -302,8 +302,7 @@ public static boolean isInternalDateFormat(int format) {
         return false;
     }
 
-    @Override
-    public void removeThreadLocalCache() {
+    public static void removeThreadLocalCache() {
         DATE_THREAD_LOCAL.remove();
         DATE_FORMAT_THREAD_LOCAL.remove();
     }

File: src/main/java/com/alibaba/excel/util/NumberDataFormatterUtils.java
Patch:
@@ -8,7 +8,7 @@
  *
  * @author Jiaju Zhuang
  **/
-public class NumberDataFormatterUtils implements ThreadLocalCachedUtils {
+public class NumberDataFormatterUtils {
     /**
      * Cache DataFormatter.
      */
@@ -40,8 +40,7 @@ public static String format(Double data, Integer dataFormat, String dataFormatSt
 
     }
 
-    @Override
-    public void removeThreadLocalCache() {
+    public static void removeThreadLocalCache() {
         DATA_FORMATTER_THREAD_LOCAL.remove();
     }
 }

File: src/test/java/com/alibaba/easyexcel/test/temp/dataformat/DataFormatTest.java
Patch:
@@ -146,7 +146,7 @@ public void test355() throws IOException, InvalidFormatException {
 
     @Test
     public void test3556() throws IOException, InvalidFormatException {
-        String file = "D://test/dataformat.xlsx";
+        String file = "D://test/dataformat1.xlsx";
         XSSFWorkbook xssfWorkbook = new XSSFWorkbook(file);
         Sheet xssfSheet = xssfWorkbook.getSheetAt(0);
         DataFormatter d = new DataFormatter(Locale.CHINA);

File: src/main/java/com/alibaba/excel/analysis/ExcelAnalyserImpl.java
Patch:
@@ -176,7 +176,7 @@ public void finish() {
         clearEncrypt03();
 
         if (throwable != null) {
-            throw new ExcelAnalysisException("Can not close IO", throwable);
+            throw new ExcelAnalysisException("Can not close IO.", throwable);
         }
     }
 

File: src/main/java/com/alibaba/excel/write/merge/AbstractMergeStrategy.java
Patch:
@@ -45,5 +45,5 @@ public void afterCellDispose(WriteSheetHolder writeSheetHolder, WriteTableHolder
      * @param head
      * @param relativeRowIndex
      */
-    protected abstract void merge(Sheet sheet, Cell cell, Head head, int relativeRowIndex);
+    protected abstract void merge(Sheet sheet, Cell cell, Head head, Integer relativeRowIndex);
 }

File: src/main/java/com/alibaba/excel/write/merge/OnceAbsoluteMergeStrategy.java
Patch:
@@ -29,11 +29,11 @@ public OnceAbsoluteMergeStrategy(int firstRowIndex, int lastRowIndex, int firstC
     }
 
     @Override
-    protected void merge(Sheet sheet, Cell cell, Head head, int relativeRowIndex) {
+    protected void merge(Sheet sheet, Cell cell, Head head, Integer relativeRowIndex) {
         if (cell.getRowIndex() == firstRowIndex && cell.getColumnIndex() == firstColumnIndex) {
             CellRangeAddress cellRangeAddress =
                 new CellRangeAddress(firstRowIndex, lastRowIndex, firstColumnIndex, lastColumnIndex);
-            sheet.addMergedRegion(cellRangeAddress);
+            sheet.addMergedRegionUnsafe(cellRangeAddress);
         }
     }
 }

File: src/main/java/com/alibaba/excel/write/style/column/SimpleColumnWidthStyleStrategy.java
Patch:
@@ -19,7 +19,7 @@ public SimpleColumnWidthStyleStrategy(Integer columnWidth) {
     }
 
     @Override
-    protected Integer columnWidth(Head head) {
+    protected Integer columnWidth(Head head, Integer columnIndex) {
         return columnWidth;
     }
 }

File: src/test/java/com/alibaba/easyexcel/test/core/fill/FillData.java
Patch:
@@ -14,6 +14,6 @@ public class FillData {
     private String name;
     @NumberFormat("#")
     @ExcelProperty(converter = DoubleStringConverter.class)
-    private double number;
+    private Double number;
     private String empty;
 }

File: src/test/java/com/alibaba/easyexcel/test/demo/write/WriteTest.java
Patch:
@@ -73,6 +73,8 @@ public void simpleWrite() {
      * 2. 根据自己或者排除自己需要的列
      * <p>
      * 3. 直接写即可
+     *
+     * @since 2.1.1
      */
     @Test
     public void excludeOrIncludeWrite() {

File: src/test/java/com/alibaba/easyexcel/test/temp/LockTest.java
Patch:
@@ -39,7 +39,7 @@ public void test() throws Exception {
     @Test
     public void test2() throws Exception {
         List<Object> list =
-            EasyExcel.read(new FileInputStream("D:\\test\\null.xlsx")).sheet().headRowNumber(0).doReadSync();
+            EasyExcel.read(new FileInputStream("D:\\test\\开发部.xls")).sheet().headRowNumber(0).doReadSync();
         for (Object data : list) {
             LOGGER.info("返回数据：{}", ((Map)data).size());
             LOGGER.info("返回数据：{}", JSON.toJSONString(data));

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -127,6 +127,9 @@ private void shiftRows(int size, List<AnalysisCell> analysisCellList) {
         if (collectionLastIndexMap == null) {
             number--;
         }
+        if (number <= 0) {
+            return;
+        }
         sheet.shiftRows(maxRowIndex + 1, lastRowIndex, number, true, false);
         for (AnalysisCell analysisCell : templateAnalysisCache.get(writeContext.writeSheetHolder().getSheetNo())) {
             if (analysisCell.getRowIndex() > maxRowIndex) {

File: src/main/java/com/alibaba/excel/context/WriteContextImpl.java
Patch:
@@ -429,7 +429,9 @@ private POIFSFileSystem openFileSystemAndEncrypt(File file) throws Exception {
             OutputStream outputStream = encryptor.getDataStream(fileSystem);
             opcPackage.save(outputStream);
         } finally {
-            opcPackage.close();
+            if (opcPackage != null) {
+                opcPackage.close();
+            }
         }
         return fileSystem;
     }

File: src/main/java/com/alibaba/excel/context/WriteContextImpl.java
Patch:
@@ -429,7 +429,9 @@ private POIFSFileSystem openFileSystemAndEncrypt(File file) throws Exception {
             OutputStream outputStream = encryptor.getDataStream(fileSystem);
             opcPackage.save(outputStream);
         } finally {
-            opcPackage.close();
+            if (opcPackage != null) {
+                opcPackage.close();
+            }
         }
         return fileSystem;
     }

File: src/main/java/com/alibaba/excel/write/executor/ExcelWriteFillExecutor.java
Patch:
@@ -293,6 +293,7 @@ private List<AnalysisCell> readTemplateData(Map<Integer, List<AnalysisCell>> ana
     }
 
     /**
+     * To prepare data
      *
      * @param value
      * @param analysisCellList

File: src/main/java/com/alibaba/excel/write/metadata/holder/WriteWorkbookHolder.java
Patch:
@@ -146,7 +146,7 @@ private void copyTemplate() throws IOException {
         byte[] templateFileByte = null;
         if (writeWorkbook.getTemplateFile() != null) {
             templateFileByte = FileUtils.readFileToByteArray(writeWorkbook.getTemplateFile());
-        } else if (writeWorkbook.getTemplateInputStream() == null) {
+        } else if (writeWorkbook.getTemplateInputStream() != null) {
             try {
                 templateFileByte = IoUtils.toByteArray(writeWorkbook.getTemplateInputStream());
             } finally {

File: src/main/java/com/alibaba/excel/analysis/v07/SharedStringsTableHandler.java
Patch:
@@ -82,6 +82,6 @@ public void characters(char[] ch, int start, int length) {
         if (currentElementData == null) {
             currentElementData = new StringBuilder();
         }
-        currentElementData.append(new String(ch, start, length));
+        currentElementData.append(ch, start, length);
     }
 }

File: src/main/java/com/alibaba/excel/analysis/v07/XlsxRowHandler.java
Patch:
@@ -49,7 +49,7 @@ public void endElement(String uri, String localName, String name) throws SAXExce
     @Override
     public void characters(char[] ch, int start, int length) throws SAXException {
         if (rowResultHolder != null) {
-            rowResultHolder.appendCurrentCellValue(new String(ch, start, length));
+            rowResultHolder.appendCurrentCellValue(ch, start, length);
         }
     }
 }

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/BofRecordHandler.java
Patch:
@@ -49,14 +49,14 @@ public void processRecord(Record record) {
                     ReadSheet readSheet = new ReadSheet(sheetIndex, orderedBsrs[sheetIndex].getSheetname());
                     sheets.add(readSheet);
                 }
-                sheetIndex++;
                 if (context.readSheetHolder() != null) {
                     if (sheetIndex == context.readSheetHolder().getSheetNo()) {
                         context.readWorkbookHolder().setIgnoreRecord03(Boolean.FALSE);
                     } else {
                         context.readWorkbookHolder().setIgnoreRecord03(Boolean.TRUE);
                     }
                 }
+                sheetIndex++;
             }
         }
     }

File: src/test/java/com/alibaba/easyexcel/test/core/multiplesheets/MultipleSheetsDataTest.java
Patch:
@@ -36,7 +36,7 @@ public void t01Read07() {
     }
 
     @Test
-    public void t020Read03() {
+    public void t02Read03() {
         read(file03);
     }
 

File: src/main/java/com/alibaba/excel/write/metadata/holder/WriteWorkbookHolder.java
Patch:
@@ -24,7 +24,6 @@
  * @author Jiaju Zhuang
  */
 public class WriteWorkbookHolder extends AbstractWriteHolder {
-    private static final Logger LOGGER = LoggerFactory.getLogger(WriteWorkbookHolder.class);
     /***
      * poi Workbook
      */

File: src/test/java/com/alibaba/easyexcel/test/temp/poi/PoiTest.java
Patch:
@@ -3,6 +3,7 @@
 import java.io.File;
 import java.io.IOException;
 
+import org.apache.poi.ss.usermodel.CellStyle;
 import org.apache.poi.xssf.streaming.SXSSFRow;
 import org.apache.poi.xssf.streaming.SXSSFSheet;
 import org.apache.poi.xssf.streaming.SXSSFWorkbook;
@@ -15,6 +16,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.alibaba.easyexcel.test.util.TestFileUtil;
+import com.alibaba.excel.EasyExcel;
 
 /**
  * 测试poi

File: src/main/java/com/alibaba/excel/analysis/ExcelAnalyserImpl.java
Patch:
@@ -15,7 +15,6 @@
 import com.alibaba.excel.context.AnalysisContextImpl;
 import com.alibaba.excel.exception.ExcelAnalysisException;
 import com.alibaba.excel.exception.ExcelAnalysisStopException;
-import com.alibaba.excel.exception.ExcelGenerateException;
 import com.alibaba.excel.read.metadata.ReadSheet;
 import com.alibaba.excel.read.metadata.ReadWorkbook;
 import com.alibaba.excel.read.metadata.holder.ReadWorkbookHolder;
@@ -64,7 +63,8 @@ private void choiceExcelExecutor() throws Exception {
                 if (poifsFileSystem.getRoot().hasEntry(Decryptor.DEFAULT_POIFS_ENTRY)) {
                     InputStream decryptedStream = null;
                     try {
-                        decryptedStream = DocumentFactoryHelper.getDecryptedStream(poifsFileSystem.getRoot(), null);
+                        decryptedStream =
+                            DocumentFactoryHelper.getDecryptedStream(poifsFileSystem.getRoot().getFileSystem(), null);
                         excelExecutor = new XlsxSaxAnalyser(analysisContext, decryptedStream);
                         return;
                     } finally {

File: src/main/java/com/alibaba/excel/converters/booleanconverter/BooleanNumberConverter.java
Patch:
@@ -27,7 +27,7 @@ public CellDataTypeEnum supportExcelTypeKey() {
     @Override
     public Boolean convertToJavaData(CellData cellData, ExcelContentProperty contentProperty,
         GlobalConfiguration globalConfiguration) {
-        if (BigDecimal.ONE.equals(cellData.getNumberValue())) {
+        if (BigDecimal.ONE.compareTo(cellData.getNumberValue()) == 0) {
             return Boolean.TRUE;
         }
         return Boolean.FALSE;

File: src/main/java/com/alibaba/excel/converters/string/StringNumberConverter.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.math.BigDecimal;
 
-import org.apache.poi.hssf.usermodel.HSSFDateUtil;
 import org.apache.poi.ss.usermodel.DateUtil;
 
 import com.alibaba.excel.converters.Converter;

File: src/main/java/com/alibaba/excel/write/style/column/LongestMatchColumnWidthStyleStrategy.java
Patch:
@@ -21,18 +21,18 @@ public class LongestMatchColumnWidthStyleStrategy extends AbstractColumnWidthSty
 
     private static final int MAX_COLUMN_WIDTH = 256;
 
-    Map<Integer, Map<Integer, Integer>> cache = new HashMap<Integer, Map<Integer, Integer>>(8);
+    private static final Map<Integer, Map<Integer, Integer>> CACHE = new HashMap<Integer, Map<Integer, Integer>>(8);
 
     @Override
     protected void setColumnWidth(WriteSheetHolder writeSheetHolder, CellData cellData, Cell cell, Head head,
         int relativeRowIndex, boolean isHead) {
         if (!isHead && cellData == null) {
             return;
         }
-        Map<Integer, Integer> maxColumnWidthMap = cache.get(writeSheetHolder.getSheetNo());
+        Map<Integer, Integer> maxColumnWidthMap = CACHE.get(writeSheetHolder.getSheetNo());
         if (maxColumnWidthMap == null) {
             maxColumnWidthMap = new HashMap<Integer, Integer>(16);
-            cache.put(writeSheetHolder.getSheetNo(), maxColumnWidthMap);
+            CACHE.put(writeSheetHolder.getSheetNo(), maxColumnWidthMap);
         }
         Integer columnWidth = dataLength(cellData, cell, isHead);
         if (columnWidth < 0) {

File: src/test/java/com/alibaba/easyexcel/test/core/converter/ReadAllConverterDataListener.java
Patch:
@@ -65,7 +65,8 @@ public void doAfterAllAnalysed(AnalysisContext context) {
         Assert.assertEquals(data.getStringString(), "测试");
         Assert.assertEquals(data.getStringError(), "#VALUE!");
         Assert.assertEquals(data.getStringNumberDate(), "2020-01-01 01:01:01");
-        Assert.assertEquals(data.getStringFormulaNumber(), "2.0");
+        double doubleStringFormulaNumber = new BigDecimal(data.getStringFormulaNumber()).doubleValue();
+        Assert.assertEquals(doubleStringFormulaNumber, 2.0, 0.0);
         Assert.assertEquals(data.getStringFormulaString(), "1测试");
         LOGGER.debug("First row:{}", JSON.toJSONString(list.get(0)));
     }

File: src/test/java/com/alibaba/easyexcel/test/temp/simple/HgTest.java
Patch:
@@ -24,7 +24,7 @@ public class HgTest {
     @Test
     public void hh() throws IOException {
         List<Object> list =
-            EasyExcel.read(new FileInputStream("D:\\test\\test.xlsx")).headRowNumber(0).sheet().doReadSync();
+            EasyExcel.read(new FileInputStream("D:\\test\\折扣2007.xls")).headRowNumber(0).sheet().doReadSync();
         for (Object data : list) {
             LOGGER.info("返回数据：{}", JSON.toJSONString(data));
         }

File: src/main/java/com/alibaba/excel/metadata/property/ExcelHeadProperty.java
Patch:
@@ -137,8 +137,8 @@ private void initColumnProperties(Boolean convertAllFiled) {
                 continue;
             }
             if (customFiledMap.containsKey(excelProperty.index())) {
-                throw new ExcelGenerateException("The index of " + customFiledMap.get(excelProperty.index()).getName()
-                    + " and " + field.getName() + " must be inconsistent");
+                throw new ExcelGenerateException("The index of '" + customFiledMap.get(excelProperty.index()).getName()
+                    + "' and '" + field.getName() + "' must be inconsistent");
             }
             customFiledMap.put(excelProperty.index(), field);
         }

File: src/main/java/com/alibaba/excel/analysis/v03/XlsSaxAnalyser.java
Patch:
@@ -131,6 +131,7 @@ public void processRecord(Record record) {
                 thisColumn = handler.getColumn();
                 cellData = handler.getCellData();
                 if (cellData != null) {
+                    cellData.checkEmpty();
                     records.put(thisColumn, cellData);
                 }
                 break;

File: src/main/java/com/alibaba/excel/analysis/v07/handlers/DefaultCellHandler.java
Patch:
@@ -120,6 +120,7 @@ public void endHandle(String name) {
             } else if (currentCellData.getType() == CellDataTypeEnum.DIRECT_STRING) {
                 currentCellData.setType(CellDataTypeEnum.STRING);
             }
+            currentCellData.checkEmpty();
             curRowContent.put(curCol, currentCellData);
         }
         // This is a special form of string
@@ -130,6 +131,7 @@ public void endHandle(String name) {
                 stringValue = stringValue.trim();
             }
             currentCellData.setStringValue(stringValue);
+            currentCellData.checkEmpty();
             curRowContent.put(curCol, currentCellData);
         }
     }

File: src/main/java/com/alibaba/excel/analysis/v03/handlers/BlankOrErrorRecordHandler.java
Patch:
@@ -31,7 +31,7 @@ public void processRecord(Record record) {
             BoolErrRecord ber = (BoolErrRecord)record;
             this.row = ber.getRow();
             this.column = ber.getColumn();
-            this.cellData = new CellData(CellDataTypeEnum.EMPTY);
+            this.cellData = new CellData(ber.getBooleanValue());
         }
     }
 

File: src/main/java/com/alibaba/excel/converters/bigdecimal/BigDecimalBooleanConverter.java
Patch:
@@ -17,7 +17,7 @@ public class BigDecimalBooleanConverter implements Converter<BigDecimal> {
 
     @Override
     public Class supportJavaTypeKey() {
-        return Byte.class;
+        return BigDecimal.class;
     }
 
     @Override

File: src/main/java/com/alibaba/excel/converters/shortconverter/ShortBooleanConverter.java
Patch:
@@ -17,7 +17,7 @@ public class ShortBooleanConverter implements Converter<Short> {
 
     @Override
     public Class supportJavaTypeKey() {
-        return Long.class;
+        return Short.class;
     }
 
     @Override

File: src/main/java/com/alibaba/excel/read/listener/event/AnalysisFinishEvent.java
Patch:
@@ -1,6 +1,6 @@
 package com.alibaba.excel.read.listener.event;
 
-import java.util.List;
+import java.util.Map;
 
 import com.alibaba.excel.metadata.CellData;
 
@@ -16,5 +16,5 @@ public interface AnalysisFinishEvent {
      *
      * @return
      */
-    List<CellData> getAnalysisResult();
+    Map<Integer, CellData> getAnalysisResult();
 }

File: src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterData.java
Patch:
@@ -4,6 +4,7 @@
 import java.util.Date;
 
 import com.alibaba.excel.annotation.ExcelProperty;
+import com.alibaba.excel.metadata.CellData;
 
 import lombok.Data;
 
@@ -32,4 +33,6 @@ public class ConverterData {
     private Float floatData;
     @ExcelProperty("字符串")
     private String string;
+    @ExcelProperty("自定义")
+    private CellData cellData;
 }

File: src/test/java/com/alibaba/easyexcel/test/core/converter/ConverterDataListener.java
Patch:
@@ -45,6 +45,7 @@ public void doAfterAllAnalysed(AnalysisContext context) {
         Assert.assertEquals(data.getDoubleData(), 1.0, 0.0);
         Assert.assertEquals(data.getFloatData(), (float)1.0, 0.0);
         Assert.assertEquals(data.getString(), "测试");
+        Assert.assertEquals(data.getCellData().getStringValue(), "自定义");
         LOGGER.debug("First row:{}", JSON.toJSONString(list.get(0)));
     }
 }

File: src/test/java/com/alibaba/easyexcel/test/core/head/NoHeadData07Test.java
Patch:
@@ -1,4 +1,4 @@
-package com.alibaba.easyexcel.test.core.nohead;
+package com.alibaba.easyexcel.test.core.head;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -9,7 +9,7 @@
 
 /**
  * Order data test
- * 
+ *
  * @author zhuangjiaju
  */
 public class NoHeadData07Test {

File: src/test/java/com/alibaba/easyexcel/test/ReadTest.java
Patch:
@@ -80,6 +80,7 @@ public void saxReadSheetsV2007() throws IOException {
         ExcelListener excelListener = new ExcelListener();
         ExcelReader excelReader = EasyExcelFactory.getReader(inputStream,excelListener);
         List<Sheet> sheets = excelReader.getSheets();
+        System.out.println("llll****"+sheets);
         System.out.println();
         for (Sheet sheet:sheets) {
             if(sheet.getSheetNo() ==1) {

File: src/test/java/com/alibaba/easyexcel/test/util/DataUtil.java
Patch:
@@ -58,8 +58,8 @@ public static List<JavaModel1> createTestListJavaMode(){
         List<JavaModel1> model1s = new ArrayList<JavaModel1>();
         for (int i = 0; i <10000 ; i++) {
             JavaModel1 model1 = new JavaModel1();
-            model1.setP1("第一列，第"+i+"行");
-            model1.setP2("222"+i);
+            model1.setP1("第一列，第行");
+            model1.setP2("121212jjj");
             model1.setP3(33+i);
             model1.setP4(44);
             model1.setP5("555");

File: src/main/java/com/alibaba/excel/util/StringUtils.java
Patch:
@@ -549,7 +549,7 @@ public static String getFilename(String path) {
 
     /**
      * Extract the filename extension from the given Java resource path,
-     * e.g. "mypath/myfile.txt" -> "txt".
+     *
      * @param path the file path (may be {@code null})
      * @return the extracted filename extension, or {@code null} if none
      */
@@ -573,7 +573,7 @@ public static String getFilenameExtension(String path) {
 
     /**
      * Strip the filename extension from the given Java resource path,
-     * e.g. "mypath/myfile.txt" -> "mypath/myfile".
+     *
      * @param path the file path
      * @return the path with stripped filename extension
      */

File: src/main/java/com/alibaba/excel/analysis/v07/XlsxRowHandler.java
Patch:
@@ -19,7 +19,6 @@
 /**
  *
  * @author jipengfei
- * @date 2017/08/23
  */
 public class XlsxRowHandler extends DefaultHandler {
 

File: src/main/java/com/alibaba/excel/analysis/v07/XlsxSaxAnalyser.java
Patch:
@@ -26,7 +26,6 @@
 /**
  *
  * @author jipengfei
- * @date 2017/08/27
  */
 public class XlsxSaxAnalyser extends BaseSaxAnalyser {
 

File: src/main/java/com/alibaba/excel/annotation/ExcelColumnNum.java
Patch:
@@ -11,7 +11,6 @@
  * Field column num at excel head
  *
  * @author jipengfei
- * @date 2017/03/19
  */
 @Target(ElementType.FIELD)
 @Retention(RetentionPolicy.RUNTIME)

File: src/main/java/com/alibaba/excel/annotation/FieldType.java
Patch:
@@ -3,7 +3,6 @@
 /**
  *
  * @author jipengfei
- * @date 2017/03/15
  */
 public enum FieldType {
 

File: src/main/java/com/alibaba/excel/constant/ExcelXmlConstants.java
Patch:
@@ -2,7 +2,6 @@
 
 /**
  * @author jipengfei
- * @date 2017/08/24
  */
 public class ExcelXmlConstants {
     public static final String DIMENSION = "dimension";

File: src/main/java/com/alibaba/excel/event/OneRowAnalysisFinishEvent.java
Patch:
@@ -5,7 +5,6 @@
 
 /**
  * @author jipengfei
- * @date 2017/07/21
  */
 public class OneRowAnalysisFinishEvent {
 

File: src/main/java/com/alibaba/excel/metadata/CellRange.java
Patch:
@@ -2,7 +2,6 @@
 
 /**
  * @author jipengfei
- * @date 2017/06/02
  */
 public class CellRange {
 

File: src/main/java/com/alibaba/excel/metadata/ExcelColumnProperty.java
Patch:
@@ -6,7 +6,6 @@
 
 /**
  * @author jipengfei
- * @date 2017/05/31
  */
 public class ExcelColumnProperty implements Comparable<ExcelColumnProperty> {
 

File: src/main/java/com/alibaba/excel/metadata/ExcelHeadProperty.java
Patch:
@@ -11,7 +11,6 @@
  * Define the header attribute of excel
  *
  * @author jipengfei
- * @date 2017/05/31
  */
 public class ExcelHeadProperty {
 

File: src/main/java/com/alibaba/excel/metadata/Font.java
Patch:
@@ -3,7 +3,6 @@
 /**
  *
  * @author jipengfei
- * @date 2017/05/24
  */
 public class Font {
 

File: src/main/java/com/alibaba/excel/metadata/Table.java
Patch:
@@ -4,7 +4,6 @@
 
 /**
  * @author jipengfei
- * @date 2017/05/16
  */
 public class Table {
     /**

File: src/main/java/com/alibaba/excel/metadata/TableStyle.java
Patch:
@@ -4,7 +4,6 @@
 
 /**
  * @author jipengfei
- * @date 2017/05/24
  */
 public class TableStyle {
 

File: src/main/java/com/alibaba/excel/parameter/ExcelWriteParam.java
Patch:
@@ -8,7 +8,6 @@
  * {@link com.alibaba.excel.ExcelWriter}
  *
  * @author jipengfei
- * @date 2017/05/15
  */
 @Deprecated
 public class ExcelWriteParam {

File: src/main/java/com/alibaba/excel/util/IndexValueConverter.java
Patch:
@@ -9,7 +9,6 @@
 /**
  * 去除空Cell
  * @author jipengfei
- * @date 2017/04/13
  */
 public class IndexValueConverter {
     public static List<String> converter(List<IndexValue> i_list) {

File: src/main/java/com/alibaba/excel/util/POITempFile.java
Patch:
@@ -5,7 +5,6 @@
 /**
  *
  * @author jipengfei
- * @date 2017/06/22
  */
 public class POITempFile {
 

File: src/main/java/com/alibaba/excel/util/PositionUtils.java
Patch:
@@ -2,7 +2,6 @@
 
 /**
  * @author jipengfei
- * @date 2017/08/27
  */
 public class PositionUtils {
 

File: src/main/java/com/alibaba/excel/util/StyleUtil.java
Patch:
@@ -6,7 +6,6 @@
 
 /**
  * @author jipengfei
- * @date 2017/03/15
  */
 public class StyleUtil {
 

File: src/main/java/com/alibaba/excel/util/TypeUtil.java
Patch:
@@ -15,7 +15,6 @@
 
 /**
  * @author jipengfei
- * @date 2017/03/15
  */
 public class TypeUtil {
 

File: src/main/java/com/alibaba/excel/write/ExcelBuilderImpl.java
Patch:
@@ -23,7 +23,6 @@
 
 /**
  * @author jipengfei
- * @date 2017/05/27
  */
 public class ExcelBuilderImpl implements ExcelBuilder {
 

File: src/main/java/com/alibaba/excel/annotation/FieldType.java
Patch:
@@ -3,6 +3,7 @@
 /**
  *
  * @author jipengfei
+ * @date 2017/03/15
  */
 public enum FieldType {
 

File: src/main/java/com/alibaba/excel/constant/ExcelXmlConstants.java
Patch:
@@ -2,6 +2,7 @@
 
 /**
  * @author jipengfei
+ * @date 2017/08/24
  */
 public class ExcelXmlConstants {
     public static final String DIMENSION = "dimension";

File: src/main/java/com/alibaba/excel/exception/ExcelGenerateException.java
Patch:
@@ -17,5 +17,4 @@ public ExcelGenerateException(String message, Throwable cause) {
     public ExcelGenerateException(Throwable cause) {
         super(cause);
     }
-
 }

File: src/main/java/com/alibaba/excel/metadata/BaseRowModel.java
Patch:
@@ -1,10 +1,10 @@
 package com.alibaba.excel.metadata;
 
-import org.apache.poi.ss.usermodel.CellStyle;
-
 import java.util.HashMap;
 import java.util.Map;
 
+import org.apache.poi.ss.usermodel.CellStyle;
+
 /**
  * Excel基础模型
  * @author jipengfei
@@ -14,7 +14,7 @@ public class BaseRowModel {
     /**
      * 每列样式
      */
-    private Map<Integer, CellStyle> cellStyleMap = new HashMap<Integer, CellStyle>();
+    private Map<Integer,CellStyle> cellStyleMap = new HashMap<Integer,CellStyle>();
 
     public void addStyle(Integer row, CellStyle cellStyle){
         cellStyleMap.put(row,cellStyle);

File: src/main/java/com/alibaba/excel/metadata/CellRange.java
Patch:
@@ -2,6 +2,7 @@
 
 /**
  * @author jipengfei
+ * @date 2017/06/02
  */
 public class CellRange {
 

File: src/main/java/com/alibaba/excel/metadata/ExcelColumnProperty.java
Patch:
@@ -6,6 +6,7 @@
 
 /**
  * @author jipengfei
+ * @date 2017/05/31
  */
 public class ExcelColumnProperty implements Comparable<ExcelColumnProperty> {
 

File: src/main/java/com/alibaba/excel/metadata/Font.java
Patch:
@@ -3,6 +3,7 @@
 /**
  *
  * @author jipengfei
+ * @date 2017/05/24
  */
 public class Font {
 

File: src/main/java/com/alibaba/excel/metadata/Sheet.java
Patch:
@@ -15,6 +15,7 @@ public class Sheet {
     private int headLineMun;
 
     /**
+     * Starting from 1
      */
     private int sheetNo;
 
@@ -48,7 +49,7 @@ public class Sheet {
     /**
      *
      */
-    private int startRow = -1;
+    private int startRow = 0;
 
 
     public Sheet(int sheetNo) {

File: src/main/java/com/alibaba/excel/metadata/TableStyle.java
Patch:
@@ -4,6 +4,7 @@
 
 /**
  * @author jipengfei
+ * @date 2017/05/24
  */
 public class TableStyle {
 

File: src/main/java/com/alibaba/excel/parameter/AnalysisParam.java
Patch:
@@ -17,7 +17,7 @@ public class AnalysisParam {
     private ExcelTypeEnum excelTypeEnum;
 
     /**
-     * file in
+     * the POI filesystem that contains the Workbook stream
      */
     private InputStream in;
 

File: src/main/java/com/alibaba/excel/parameter/ExcelWriteParam.java
Patch:
@@ -1,13 +1,14 @@
 package com.alibaba.excel.parameter;
 
-import com.alibaba.excel.support.ExcelTypeEnum;
-
 import java.io.OutputStream;
 
+import com.alibaba.excel.support.ExcelTypeEnum;
+
 /**
  * {@link com.alibaba.excel.ExcelWriter}
  *
  * @author jipengfei
+ * @date 2017/05/15
  */
 @Deprecated
 public class ExcelWriteParam {

File: src/main/java/com/alibaba/excel/parameter/GenerateParam.java
Patch:
@@ -1,9 +1,9 @@
 package com.alibaba.excel.parameter;
 
-import com.alibaba.excel.support.ExcelTypeEnum;
-
 import java.io.OutputStream;
 
+import com.alibaba.excel.support.ExcelTypeEnum;
+
 /**
  * Created by jipengfei on 17/2/19.
  */

File: src/main/java/com/alibaba/excel/util/IndexValueConverter.java
Patch:
@@ -1,14 +1,15 @@
 package com.alibaba.excel.util;
 
-import com.alibaba.excel.metadata.IndexValue;
-
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Stack;
 
+import com.alibaba.excel.metadata.IndexValue;
+
 /**
  * 去除空Cell
  * @author jipengfei
+ * @date 2017/04/13
  */
 public class IndexValueConverter {
     public static List<String> converter(List<IndexValue> i_list) {

File: src/main/java/com/alibaba/excel/util/POITempFile.java
Patch:
@@ -5,6 +5,7 @@
 /**
  *
  * @author jipengfei
+ * @date 2017/06/22
  */
 public class POITempFile {
 

File: src/main/java/com/alibaba/excel/util/PositionUtils.java
Patch:
@@ -2,6 +2,7 @@
 
 /**
  * @author jipengfei
+ * @date 2017/08/27
  */
 public class PositionUtils {
 

File: src/main/java/com/alibaba/excel/ExcelReader.java
Patch:
@@ -49,7 +49,6 @@ public ExcelReader(InputStream in, Object customContent,
     }
 
     /**
-     * old 1.1.0
      * @param param
      * @param eventListener
      */

File: src/main/java/com/alibaba/excel/support/ExcelTypeEnum.java
Patch:
@@ -28,7 +28,8 @@ public void setValue(String value) {
     }
     public static ExcelTypeEnum valueOf(InputStream inputStream){
         try {
-            FileMagic fileMagic =  FileMagic.valueOf(inputStream);
+            InputStream in = FileMagic.prepareToCheckMagic(inputStream);
+            FileMagic fileMagic =  FileMagic.valueOf(in);
             if(FileMagic.OLE2.equals(fileMagic)){
                 return XLS;
             }

File: src/test/java/read/v07/Read2007Xlsx.java
Patch:
@@ -24,7 +24,7 @@ public class Read2007Xlsx {
     //创建没有自定义模型,没有sheet的解析器,默认解析所有sheet解析结果以List<String>的方式通知监听者
     @Test
     public void noModel() {
-        InputStream inputStream = getInputStream("2007NoModelBigFile.xlsx");
+        InputStream inputStream = getInputStream("1.xlsx");
         try {
             ExcelReader reader = new ExcelReader(inputStream, ExcelTypeEnum.XLSX, null,
                 new AnalysisEventListener<List<String>>() {

File: src/main/java/com/alibaba/excel/ExcelWriter.java
Patch:
@@ -20,7 +20,7 @@ public class ExcelWriter {
     private ExcelBuilder excelBuilder;
 
     /**
-     * 生成小Excel低于2000行
+     * 生成EXCEL
      *
      * @param outputStream 文件输出流
      * @param typeEnum     输出文件类型03或07，强烈建议使用07版（可以输出超大excel而不内存溢出）
@@ -30,7 +30,7 @@ public ExcelWriter(OutputStream outputStream, ExcelTypeEnum typeEnum) {
     }
 
     /**
-     * 生成小Excel低于2000行
+     * 生成EXCEL
      *
      * @param outputStream 文件输出流
      * @param typeEnum     输出文件类型03或07，强烈建议使用07版（可以输出超大excel而不内存溢出）

File: src/main/java/com/alibaba/excel/metadata/Sheet.java
Patch:
@@ -15,7 +15,7 @@ public class Sheet {
     private int headLineMun;
 
     /**
-     * sheet序号
+     * sheet序号 从0开始
      */
     private int sheetNo;
 

